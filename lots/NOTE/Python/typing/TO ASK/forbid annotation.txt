

how to forbid some type use as annotation type?
    e.g. how to avoid "MyCallable[R]" and force to be "MyCallable[R](A,B)"?



typing_Callable = Callable
class MyCallableT(Non_TypingAnotation):
    def __getitem__(self, ReturnT : TypingAnotation) -> Callable[[]]:
        return lambda *args: typing_Callable[args, ReturnT]
class _MyCallable_tmp(Non_TypingAnotation):
    def __init__(self, ReturnT : TypingAnotation):
        self.ReturnT = ReturnT
    def __call__(self, *args : List[TypingAnotation]) -> TypingAnotation:
        return typing_Callable[args, self.ReturnT]
MyCallable = MyCallableT()

# MyCallable[R](A,B)

