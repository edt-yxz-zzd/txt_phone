'__doc__' = r"""
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

Static objects:

builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a struct sequence with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a struct sequence with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a struct sequence with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a struct sequence with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
dllhandle -- [Windows only] integer handle of the Python DLL
winver -- [Windows only] version number of the Python DLL
_enablelegacywindowsfsencoding -- [Windows only] 
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function

"""




'__displayhook__' = <class 'builtin_function_or_method'>
'__excepthook__' = <class 'builtin_function_or_method'>
'__interactivehook__' = <class 'function'>
'__loader__' = <class 'type'>
'__name__' = 'sys'
'__package__' = ''
'__spec__' = <class '_frozen_importlib.ModuleSpec'>
'__stderr__' = <class '_io.TextIOWrapper'>
'__stdin__' = <class '_io.TextIOWrapper'>
'__stdout__' = <class '_io.TextIOWrapper'>
'_clear_type_cache' = <class 'builtin_function_or_method'>
'_current_frames' = <class 'builtin_function_or_method'>
'_debugmallocstats' = <class 'builtin_function_or_method'>
'_enablelegacywindowsfsencoding' = <class 'builtin_function_or_method'>
'_getframe' = <class 'builtin_function_or_method'>
'_git' = (
    'CPython'
    'v3.6.2'
    '5fd33b5'
    {closer}
'_home' = <class 'NoneType'>
'_xoptions' = <class 'dict'>
'api_version' = 1013
'argv' = [
    'show_all_sys_string.py'
    {closer}
'base_exec_prefix' = 'C:\\Python36'
'base_prefix' = 'C:\\Python36'
'builtin_module_names' = <class 'tuple'>
'byteorder' = 'little'
'call_tracing' = <class 'builtin_function_or_method'>
'callstats' = <class 'builtin_function_or_method'>
'copyright' = 'Copyright (c) 2001-2017 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved.'
'displayhook' = <class 'builtin_function_or_method'>
'dllhandle' = 1872625664
'dont_write_bytecode' = False
'exc_info' = <built-in function exc_info>
'excepthook' = <class 'builtin_function_or_method'>
'exec_prefix' = 'C:\\Python36'
'executable' = 'C:\\Python36\\python.exe'
'exit' = <class 'builtin_function_or_method'>
'flags' = <class 'sys.flags'>
'float_info' = sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
'float_repr_style' = 'short'
'get_asyncgen_hooks' = <class 'builtin_function_or_method'>
'get_coroutine_wrapper' = <class 'builtin_function_or_method'>
'getallocatedblocks' = <class 'builtin_function_or_method'>
'getcheckinterval' = <class 'builtin_function_or_method'>
'getdefaultencoding' = <class 'builtin_function_or_method'>
'getfilesystemencodeerrors' = <class 'builtin_function_or_method'>
'getfilesystemencoding' = <class 'builtin_function_or_method'>
'getprofile' = <class 'builtin_function_or_method'>
'getrecursionlimit' = <class 'builtin_function_or_method'>
'getrefcount' = <class 'builtin_function_or_method'>
'getsizeof' = <class 'builtin_function_or_method'>
'getswitchinterval' = <class 'builtin_function_or_method'>
'gettrace' = <class 'builtin_function_or_method'>
'getwindowsversion' = <class 'builtin_function_or_method'>
'hash_info' = sys.hash_info(width=64, modulus=2305843009213693951, inf=314159, nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, seed_bits=128, cutoff=0)
'hexversion' = 50725616
'implementation' = <class 'types.SimpleNamespace'>
'int_info' = sys.int_info(bits_per_digit=30, sizeof_digit=4)
'intern' = <class 'builtin_function_or_method'>
'is_finalizing' = <class 'builtin_function_or_method'>
'maxsize' = 9223372036854775807
'maxunicode' = 1114111
'meta_path' = <class 'list'>
'modules' = <class 'dict'>
'path' = [
    'E:\\my_data\\my_record_txt\\NOTE\\Python\\howto\\get os sys info'
    'C:\\Python36\\python36.zip'
    'C:\\Python36\\DLLs'
    'C:\\Python36\\lib'
    'C:\\Python36'
    'C:\\Python36\\lib\\site-packages'
    'C:\\Python36\\lib\\site-packages\\xart-0.2.0-py3.6.egg'
    'E:\\my_data\\program_source\\github\\edt-yxz-zzd\\python3_src'
    'C:\\Python36\\lib\\site-packages\\win32'
    'C:\\Python36\\lib\\site-packages\\win32\\lib'
    'C:\\Python36\\lib\\site-packages\\Pythonwin'
    {closer}
'path_hooks' = <class 'list'>
'path_importer_cache' = <class 'dict'>
'platform' = 'win32'
'prefix' = 'C:\\Python36'
'set_asyncgen_hooks' = <class 'builtin_function_or_method'>
'set_coroutine_wrapper' = <class 'builtin_function_or_method'>
'setcheckinterval' = <class 'builtin_function_or_method'>
'setprofile' = <class 'builtin_function_or_method'>
'setrecursionlimit' = <class 'builtin_function_or_method'>
'setswitchinterval' = <class 'builtin_function_or_method'>
'settrace' = <class 'builtin_function_or_method'>
'stderr' = <class '_io.TextIOWrapper'>
'stdin' = <class '_io.TextIOWrapper'>
'stdout' = <class '_io.TextIOWrapper'>
'thread_info' = sys.thread_info(name='nt', lock=None, version=None)
'version' = '3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:57:36) [MSC v.1900 64 bit (AMD64)]'
'version_info' = sys.version_info(major=3, minor=6, micro=2, releaselevel='final', serial=0)
'warnoptions' = [
    {closer}
'winver' = '3.6'
