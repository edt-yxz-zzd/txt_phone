get/set environment variables

os.environ["XXX"] = "1"
assert os.environ["XXX"] == "1"
#py3.6.doc
#   16.1.2. Process Parameters
#   os.environ  # key,value::str    # using sys.getfilesystemencoding()
#   os.environb # key,value::bytes
#   This mapping is captured the first time the os module is imported, typically during Python startup as part of processing site.py. Changes to the environment made after this time are not reflected in os.environ, except for changes made by modifying os.environ directly.


https://stackoverflow.com/questions/5971312/how-to-set-environment-variables-in-python
1) local get/set; not global
    Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv(). In other words, keep in mind that this approach won't modify the way your program is running, only the way your program's children run. True, your program can set and read back environment variables, but only from the environment it configures for its children.
    no way for a Python script to modify its parent env.
    A process's environment variables are set when the process is created. Any changes made after this won't affect the process's own copy of the environment variable. This is common to all processes, not just Python.
2) Child processes automatically inherit the environment of the parent process -- no special action on your part is required.
    # On some platforms, modifying os.environ will not actually modify the system environment either for the current process or child processes.

