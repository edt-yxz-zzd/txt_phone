

*) reorder bases in a global ordering per runtime
*) method override
    should use @override explicitly
    handle method override problems
        donot allow implicitly inherint override by mro!
        usings = ...
        forbid super # del super from builtins
        except stable api/consume args api
            @arbitrary_ordered # put super to builtins
            which allow use super
    abstractmethod has single declaration source
        # allow subclass to override the declaration
        # but should use @override
    method should either have @concretemethod or @abstractmethod
        introduce mixin t
*) all abstractclass, __slots__ = () # rename nonempty __slots__ for concrete subclass
    concrete class should single inherint
*) issubclass
    only those declare that itself is meaningful, than test issubclass normally
    otherwise test it meaningful bases
    i.e. treat nonmeaningful class as a collection of bases instead of a real class
    nonmeaningful class should have empty body
        except doc
        __slots__ = ()
can super() in staticmethod?
single inheritance allow super().any_method
named override allow super().named_overrided_method
    form an in-tree
    @named(method_name2superclass) # cannot override arbitrary_order_override_func
    def f(self, ..., * super, ...):
        super().method(a...)
    <==> method_name2superclass[method].method(self, a...)
arbitrary order override allow super().arbitrary_order_override_func
    must call super().this_func one and only one!!
    cooperative multiple inheritance
    # if be overrided, then should again arbitrary_order_override_func
    all positional args are the same pass to the end auto
    consume keyword args # arg sink/parameter declaration
    product keyword args # arg source/parameter deletor
    reproduct keyword args # arg filter # consume and product same name
    pass keyword args # arg toucher # reproduct the same obj auto

    donot allow two unordered classes consume same arg/declare same parameter
        otherwise should use topmost class distinguish:
            arg dispatcher :: {parameter_name: {declare_class:arg}}
    @arbitrary_order_override(num_positionol_args, )
    def f(self, *positionol_args, *, super, ...):
        num_positionol_args donot consider self
        super was offer auto by @arbitrary_order_override
        super().f
        or super().this_func(...)

interface move to last
    no method definition
    only method declarations
leveled abstractclass
    global_base_clase_order by reversed sorted [(level, created_time)]
default method
    default level = auto select from default
    explicit default method
        allow be overrided implicit if only one max default level
    implicit default method
        allow be overrided implicit at same level
meta: mutual exclusivity, collective exclusivity
    (at the concrete subclass)
    ==>> finalclass
haskell type sys:
    * auto insert mixins
        new concrete methods!
    * auto insert mixins
        override abstractmethods
