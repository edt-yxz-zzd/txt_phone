
6.3.4. Calls



### f.__call__? why not return function itself??


>>> f
<function f at 0x000000000065E048>
>>> f.__call__
<method-wrapper '__call__' of function object at 0x000000000065E048>
>>> f.__call__.__call__
<method-wrapper '__call__' of method-wrapper object at 0x0000000002D130B8>

>>> type
<class 'type'>
>>> type.__call__
<slot wrapper '__call__' of 'type' objects>
>>> type.__call__.__call__
<method-wrapper '__call__' of wrapper_descriptor object at 0x00000000003444A8>

>>> dir
<built-in function dir>
>>> dir.__call__
<method-wrapper '__call__' of builtin_function_or_method object at 0x0000000000377900>



###############
6.3.4. Calls
A call always returns some value, possibly None, unless it raises an exception. How this value is computed depends on the type of the callable object.

If it is
    a user-defined function:
        The code block for the function is executed, passing it the argument list. The first thing the code block will do is bind the formal parameters to the arguments; this is described in section Function definitions. When the code block executes a return statement, this specifies the return value of the function call.

    a built-in function or method:
        The result is up to the interpreter; see Built-in Functions for the descriptions of built-in functions and methods.

    a class object:
        A new instance of that class is returned.

    a class instance method:
        The corresponding user-defined function is called, with an argument list that is one longer than the argument list of the call: the instance becomes the first argument.

    a class instance:
        The class must define a __call__() method; the effect is then the same as if that method was called.


