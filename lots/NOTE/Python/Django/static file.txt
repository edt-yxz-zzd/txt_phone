
static files per YYY_app or for whole
    # settings.STATIC_URL

    YYY_app:
        settings.STATIC_ROOT :: String # abspath
        # STATIC_ROOT under YYY_app?? or XXX_project??
    whole:
        settings.STATICFILES_DIRS :: [String] # [abspath]
        # under BASE_DIR??

    using StaticImageView or RedirectView
        RedirectView.as_view(url='/static/images/favicon.ico')
            # begin with "/"
            # when settings.STATIC_URL = '/static/'
        StaticImageView('static/images/favicon.ico')
            # not begin with "/" ==>> relative_path



https://stackoverflow.com/questions/12161271/can-i-make-staticfiles-dir-same-as-static-root-in-django-1-3

!!!!!STATIC_ROOT should be empty!!!!!
!!!!!STATIC_ROOT should be filled by "py manage.py collectstatic"


No. In fact, the file django/contrib/staticfiles/finders.py even checks for this and raises an ImproperlyConfigured exception when you do so:

    "The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting"

The STATICFILES_DIRS can contain other directories (not necessarily app directories) with static files and these static files will be collected into your STATIC_ROOT when you run collectstatic. These static files will then be served by your web server and they will be served from your STATIC_ROOT.

If you have files currently in your STATIC_ROOT that you wish to serve then you need to move these to a different directory and put that other directory in STATICFILES_DIRS. Your STATIC_ROOT directory should be empty and all static files should be collected into that directory (i.e., it should not already contain static files).









https://help.pythonanywhere.com/pages/DjangoStaticFiles


How to setup static files in Django

There are 3 main things to do:

    set STATIC_ROOT in settings.py
    run python2.7 manage.py collectstatic (or python3.5 or python3.6 as appropriate)
    set up a Static Files entry on the PythonAnywhere Web tab.

    Optionally, you can also customise STATIC_URL, if you want to use a static URL prefix other than /static/

* Set STATIC_ROOT in settings.py
        The STATIC_ROOT variable in settings.py defines the single folder you want to collect all your static files into. Typically, this would be a top-level folder inside your project, eg:

            STATIC_ROOT = "/home/myusername/myproject/static"
            # or, eg,
            STATIC_ROOT = os.path.join(BASE_DIR, "static")

    The important thing is this needs to be the full, absolute path to your static files folder.

* Run pythonX.Y manage.py collectstatic
    This command (don't forget to replace "X.Y" with the version of Python your website uses) collects up all your static files from each of your app folders (including the static files for the admin app) and from any other folders you specify in settings.py, and copies them into STATIC_ROOT.

    You need to re-run this command whenever you want to publish new versions of your static files.

* (Optionally) change STATIC_URL
    If you really must, you can change the default STATIC_URL, which is /static/, to being a different prefix, like /assets/, or whatever it may be. You'll probably want to use the {% static %} template tag with this. There's more info in the django docs.

* Set up a static files mapping
    Finally, set up a static files mapping to get our web servers to serve out your static files for you.

        Go to the Web tab on the PythonAnywhere dashboard
        Go to the Static Files section
        Enter the same URL as STATIC_URL in the url section (typically, /static/)
        Enter the path from STATIC_ROOT into the path section (the full path, including /home/username/etc)

    Then hit Reload and test your static file mapping by going to retrieve a known static file.

    Eg, if you have a file at /home/myusername/myproject/static/css/base.css, go visit http://www.your-domain.com/static/css/base.css

* Serving static files in development
    Django does have an alternative for serving static files during development, which can avoid then need for you to run collectstatic whenever you make changes to your files, but it comes at the cost of putting an extra processing burden on the Python parts of your app. If you really want to use this, you'll find more info in the django docs.

* Media files
    If you're using Django's default uploaded files handling, then you'll need to set up a similar static files mapping from MEDIA_URL to MEDIA_ROOT...



######################################
######################################
######################################
https://stackoverflow.com/questions/34564579/read-static-file-in-view

django.conf.settings.BASE_DIR/STATIC_ROOT
    #BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    #STATIC_ROOT = os.path.join(BASE_DIR, 'static')


    ######################################
from django.conf import settings
from django.http import HttpResponse, StreamingHttpResponse
from django.core.files.storage import get_storage_class
import os.path

class StaticImageView:
    '''

# .../urls.py
urlpatterns = [
    ...
    re_path(r'^favicon[.]ico$', StaticImageView('static/images/favicon.ico')),
    #                                           ^^^ no "/" at beginning
    ...
]

'''
    def __init__(self, relative_path):
        self.relative_path = relative_path
        self.path = os.path.join(settings.BASE_DIR, self.relative_path)

    def __call__(self, request):
        if request.method == 'GET':
            storage_class = get_storage_class(settings.STATICFILES_STORAGE)
            image_file = storage_class().open(self.path)
            return StreamingHttpResponse(image_file, content_type='image/jpeg')
            #image_data = image_file.read()
            #return HttpResponse(image_data, content_type='image/jpeg')

