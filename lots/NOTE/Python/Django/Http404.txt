from django.http import Http404

def my_view(request):
    try:
        obj = MyModel.objects.get(pk=1)
    except MyModel.DoesNotExist:
        raise Http404("No MyModel matches the given query.")


####################################################
####################################################
####################################################
# set status_code on the response #
def custom_404(request):
    response = ...
    response.status_code = 404
    return response
####################################################
####################################################
####################################################
https://stackoverflow.com/questions/2308212/django-custom-404-handler-that-returns-404-status-code
def my_view(request):
    ...
    return HttpResponse(content=template.render(context), content_type='text/html; charset=utf-8', status=404)


# Imports
from django.shortcuts import render
from django.http import HttpResponse
from django.template import Context, loader


##
# Handle 404 Errors
# @param request WSGIRequest list with all HTTP Request
def error404(request):

    # 1. Load models for this view
    #from idgsupply.models import My404Method

    # 2. Generate Content for this view
    template = loader.get_template('404.htm')
    context = Context({
        'message': 'All: %s' % request,
        })

    # 3. Return Template for this view + Data
    return HttpResponse(content=template.render(context), content_type='text/html; charset=utf-8', status=404)


