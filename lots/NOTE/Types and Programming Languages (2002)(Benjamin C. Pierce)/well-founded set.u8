2.2.10
    Definition: Suppose we have a set S with a preorder ≤. We say that ≤ is well founded if it contains no infinite decreasing chains.
    For example, the usual order on the natural numbers, with 0 < 1 < 2 < 3 < ... is well founded, but the same order on the integers, ... < −3 < −2 < −1 < 0 < 1 < 2 < 3 < ... is not.
    We sometimes omit mentioning ≤ explicitly and simply speak of S as a well-founded set. 
3.5.11
    Theorem [Uniqueness of normal forms]:
        If t ->* u and t ->* u', where u and u' are both normal forms, then u = u' . 
    Proof: Corollary of the determinacy of single-step evaluation (3.5.4). 
    The last property of evaluation that we consider before turning our attention to arithmetic expressions is the fact that every term can be evaluated to a value. Clearly, this is another property that need not hold in richer languages with features like recursive function definitions. Even in situations where it does hold, its proof is generally much more subtle than the one we are about to see. In Chapter 12 we will return to this point, showing how a type system can be used as the backbone of a termination proof for certain languages.
    Most termination proofs in computer science have the same basic form:
        First, we choose some well-founded set S and give a function f mapping “machine states” (here, terms) into S.
        Next, we show that, whenever a machine state t can take a step to another state t', we have f(t') < f(t). We now observe that an infinite sequence of evaluation steps beginning from t can be mapped, via f , into an infinite decreasing chain of elements of S. Since S is well founded, there can be no such infinite decreasing chain, and hence no infinite evaluation sequence. The function f is often called a termination measure for the evaluation relation.
