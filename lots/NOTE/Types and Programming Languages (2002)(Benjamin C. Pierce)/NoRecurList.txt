
List a = forall r. (a->r->r) -> r -> r
-- head/tail both O(n)!

List a = forall r. (a->(()->r)->r) -> r -> r
-- head O(1), tail O(n)

data ListI (i :: Integer) a where
    Empty :: ListI 0 a
    Cons :: (i>=0) => a -> ListI i a -> ListI (i+1) a
List a = exists i. ListI i a
headI :: (i>0) => ListI i a -> a
headI (Cons a ts) = a
tailI :: (i>=0) => ListI (i+1) a -> ListI i a
tailI (Cons a ts) = ts


head a0 ls = let (i, lsI) = ls in
    if i == 0 then a0
    else (Cons a ts) = lsI in a
tail ts0 ls = let (i, lsI) = ls in
    if i == 0 then ts0
    else (Cons a ts) = lsI in ts




