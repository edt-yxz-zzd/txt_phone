
why rec?
    List vs List$n
        List = \X. @R. (X->Will R->R) -> R -> R
        List$n = \X. @R. (X->List$(n-1)->R) -> R -> R
    list as fold: too slow
        tail - O(n)
        zip - O(n^2) - for compare...
why call-by-need/name?
    unfold$n should avoid the unfold$(n-1) branch when n == 0
    call-by-value or full-redution will cause infinite loop.
why sub?
    List$n <: List$(n-1) <: List$(-1)
why "let T = ..."?
    shorthand is important!!
    let T = expr in term === (\@T :==: expr. term) @expr
