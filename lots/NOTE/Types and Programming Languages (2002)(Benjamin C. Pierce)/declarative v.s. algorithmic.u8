21.4 A Digression on Transitivity
[page 289]
declarative and algorithmic presentations

One of the most distinctive differences between declarative and algorithmic presentations is that declarative presentations include an explicit rule of tran-sitivity—if S<:U and U<:T then S<:T—while algorithmic systems do not. This rule is useless in an algorithm, since applying it in a goal-directed manner would involve guessing U.


Somewhat surprisingly, the possibility of giving a declarative presentation with the rule of transitivity turns out to be a consequence of a “trick” that can be played with inductive, but not coinductive, definitions. To see why, observe that the property of transitivity is a "closure property" —it demands that the subtype relation be closed under the transitivity rule. Since the subtype relation for finite types is itself defined as the closure of a set of rules, we can achieve closure under transitivity simply by adding it to the other rules. This is a general property of inductive definitions and closure properties: the union of two sets of rules, when applied inductively, generates the least relation that is closed under both sets of rules separately. This fact can be formulated more abstractly in terms of generating functions:
    21.4.1 Proposition: Suppose F and G are monotone functions, and let H(X) = F(X)∪G(X). Then µH is the smallest set that is both F -closed and G-closed.




