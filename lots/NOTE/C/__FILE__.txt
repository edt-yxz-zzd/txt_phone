
e ../lots/NOTE/C/__FILE__.txt



[[
C 『__FILE__』『__LINE__』
===
/sdcard/0my_files/book/lang/C/The C Library Reference Guide(1997)(Eric Huss).pdf
    file:///C|/Documents%20and%20Settings/sshaikot/Desktop/c_guide/c_guide/1.7.html (4 of 5)4/1/2008 8:39:51 AM

===
C Guide--1.7 Preprocessing Directives

1.7.4 #line
The #line directive allows the current line number and the apparent name of the current sourcecode filename to be changed.
Syntax:
    #line line-number filename
Note that if the filename is not given, then it stays the same. The line number on the current line is one greater than the number of new-line characters (so the first line number is 1).
Examples:
    #line 50 user.c
    #line 23

1.7.5 #error
The #error directive will cause the compiler to halt compiling and return with the specified error message.
Syntax:
    #error message
Examples:
    #ifndef VERSION
    #error Version number not specified.
    #endif

1.7.7 Predefined Macros
The following macros are already defined by the compiler and cannot be changed.
    __LINE__
        A decimal constant representing the current line number.
    __FILE__
        A string representing the current name of the source code file.
    __DATE__
        A string representing the current date when compiling began for the current source file. It is in the format "mmm dd yyyy", the same as what is generated by the asctime function.
    __TIME__
        A string literal representing the current time when cimpiling began for the current source file. It is in the format "hh:mm:ss", the same as what is generated by the asctime function.
    __STDC__
        The decimal constant 1. Used to indicate if this is a standard C compiler.

2.1 assert.h
The assert header is used for debugging purposes.
Macros:
    assert();
External References:
    NDEBUG

2.1.1 assert
Declaration:
    void assert(int expression);
The assert macro allows diagnostic information to be written to the standard error file.
If expression evaluates to 0 (false), then the expression, sourcecode filename, and line number are sent to the standard error, and then calls the abort function. If the identifier NDEBUG ("no debug") is defined with #define NDEBUG then the macro assert does nothing.
Common error outputting is in the form:
    Assertion failed: expression, file filename, line line-number
Example:
    #include<assert.h>
    void open_record(char *record_name)
    { assert(record_name!=NULL);
      /* Rest of code */
    }
    int main(void)
    { open_record(NULL);
    }

]]
