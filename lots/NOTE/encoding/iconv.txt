
e ../lots/NOTE/encoding/iconv.txt

转换编码:

py不太行:
[len(2B & cp936) == 21791]
!! [len(2B & py3_11_9.gbk) == 21791]
    [py3_11_9.gbk =[def]= cp936]

[[[
iconv --help
===
Usage: iconv [OPTION...] [-f ENCODING] [-t ENCODING] [INPUTFILE...]
or:    iconv -l

Converts text from one encoding to another encoding.

Options controlling the input and output format:
  -f ENCODING, --from-code=ENCODING
                              the encoding of the input
  -t ENCODING, --to-code=ENCODING
                              the encoding of the output

Options controlling conversion problems:
  -c                          discard unconvertible characters
  --unicode-subst=FORMATSTRING
                              substitution for unconvertible Unicode characters
  --byte-subst=FORMATSTRING   substitution for unconvertible bytes
  --widechar-subst=FORMATSTRING
                              substitution for unconvertible wide characters

Options controlling error output:
  -s, --silent                suppress error messages about conversion problems

Informative output:
  -l, --list                  list the supported encodings
  --help                      display this help and exit
  --version                   output version information and exit

Report bugs in the bug tracker at <https://savannah.gnu.org/projects/libiconv>
or by email to <bug-gnu-libiconv@gnu.org>.
===
]]]

[[[
iconv --version
===
iconv (GNU libiconv 1.17)
Copyright (C) 2000-2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Written by Bruno Haible.
===
]]]


[[[
iconv -l    >  /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp
===
ANSI_X3.4-1968 ANSI_X3.4-1986 ASCII CP367 IBM367 ISO-IR-6 ISO646-US ISO_646.IRV:1991 US US-ASCII CSASCII
UTF-8
ISO-10646-UCS-2 UCS-2 CSUNICODE
UCS-2BE UNICODE-1-1 UNICODEBIG CSUNICODE11
UCS-2LE UNICODELITTLE
ISO-10646-UCS-4 UCS-4 CSUCS4
UCS-4BE
UCS-4LE
UTF-16
UTF-16BE
UTF-16LE
UTF-32
UTF-32BE
UTF-32LE
UNICODE-1-1-UTF-7 UTF-7 CSUNICODE11UTF7
UCS-2-INTERNAL
UCS-2-SWAPPED
UCS-4-INTERNAL
UCS-4-SWAPPED
C99
JAVA
CP819 IBM819 ISO-8859-1 ISO-IR-100 ISO8859-1 ISO_8859-1 ISO_8859-1:1987 L1 LATIN1 CSISOLATIN1
ISO-8859-2 ISO-IR-101 ISO8859-2 ISO_8859-2 ISO_8859-2:1987 L2 LATIN2 CSISOLATIN2
ISO-8859-3 ISO-IR-109 ISO8859-3 ISO_8859-3 ISO_8859-3:1988 L3 LATIN3 CSISOLATIN3
ISO-8859-4 ISO-IR-110 ISO8859-4 ISO_8859-4 ISO_8859-4:1988 L4 LATIN4 CSISOLATIN4
CYRILLIC ISO-8859-5 ISO-IR-144 ISO8859-5 ISO_8859-5 ISO_8859-5:1988 CSISOLATINCYRILLIC
ARABIC ASMO-708 ECMA-114 ISO-8859-6 ISO-IR-127 ISO8859-6 ISO_8859-6 ISO_8859-6:1987 CSISOLATINARABIC
ECMA-118 ELOT_928 GREEK GREEK8 ISO-8859-7 ISO-IR-126 ISO8859-7 ISO_8859-7 ISO_8859-7:1987 ISO_8859-7:2003 CSISOLATINGREEK
HEBREW ISO-8859-8 ISO-IR-138 ISO8859-8 ISO_8859-8 ISO_8859-8:1988 CSISOLATINHEBREW
ISO-8859-9 ISO-IR-148 ISO8859-9 ISO_8859-9 ISO_8859-9:1989 L5 LATIN5 CSISOLATIN5
ISO-8859-10 ISO-IR-157 ISO8859-10 ISO_8859-10 ISO_8859-10:1992 L6 LATIN6 CSISOLATIN6
ISO-8859-11 ISO8859-11 ISO_8859-11
ISO-8859-13 ISO-IR-179 ISO8859-13 ISO_8859-13 L7 LATIN7
ISO-8859-14 ISO-CELTIC ISO-IR-199 ISO8859-14 ISO_8859-14 ISO_8859-14:1998 L8 LATIN8
ISO-8859-15 ISO-IR-203 ISO8859-15 ISO_8859-15 ISO_8859-15:1998 LATIN-9
ISO-8859-16 ISO-IR-226 ISO8859-16 ISO_8859-16 ISO_8859-16:2001 L10 LATIN10
KOI8-R CSKOI8R
KOI8-U
KOI8-RU
CP1250 MS-EE WINDOWS-1250
CP1251 MS-CYRL WINDOWS-1251
CP1252 MS-ANSI WINDOWS-1252
CP1253 MS-GREEK WINDOWS-1253
CP1254 MS-TURK WINDOWS-1254
CP1255 MS-HEBR WINDOWS-1255
CP1256 MS-ARAB WINDOWS-1256
CP1257 WINBALTRIM WINDOWS-1257
CP1258 WINDOWS-1258
850 CP850 IBM850 CSPC850MULTILINGUAL
862 CP862 IBM862 CSPC862LATINHEBREW
866 CP866 IBM866 CSIBM866
CP1131
MAC MACINTOSH MACROMAN CSMACINTOSH
MACCENTRALEUROPE
MACICELAND
MACCROATIAN
MACROMANIA
MACCYRILLIC
MACUKRAINE
MACGREEK
MACTURKISH
MACHEBREW
MACARABIC
MACTHAI
HP-ROMAN8 R8 ROMAN8 CSHPROMAN8
NEXTSTEP
ARMSCII-8
GEORGIAN-ACADEMY
GEORGIAN-PS
KOI8-T
CP154 CYRILLIC-ASIAN PT154 PTCP154 CSPTCP154
KZ-1048 RK1048 STRK1048-2002 CSKZ1048
MULELAO-1
CP1133 IBM-CP1133
ISO-IR-166 TIS-620 TIS620 TIS620-0 TIS620.2529-1 TIS620.2533-0 TIS620.2533-1
CP874 WINDOWS-874
VISCII VISCII1.1-1 CSVISCII
TCVN TCVN-5712 TCVN5712-1 TCVN5712-1:1993
ISO-IR-14 ISO646-JP JIS_C6220-1969-RO JP CSISO14JISC6220RO
JISX0201-1976 JIS_X0201 X0201 CSHALFWIDTHKATAKANA
ISO-IR-87 JIS0208 JIS_C6226-1983 JIS_X0208 JIS_X0208-1983 JIS_X0208-1990 X0208 CSISO87JISX0208
ISO-IR-159 JIS_X0212 JIS_X0212-1990 JIS_X0212.1990-0 X0212 CSISO159JISX02121990
CN GB_1988-80 ISO-IR-57 ISO646-CN CSISO57GB1988
CHINESE GB_2312-80 ISO-IR-58 CSISO58GB231280
CN-GB-ISOIR165 ISO-IR-165
ISO-IR-149 KOREAN KSC_5601 KS_C_5601-1987 KS_C_5601-1989 CSKSC56011987
EUC-JP EUCJP EXTENDED_UNIX_CODE_PACKED_FORMAT_FOR_JAPANESE CSEUCPKDFMTJAPANESE
MS_KANJI SHIFT-JIS SHIFT_JIS SJIS CSSHIFTJIS
CP932
ISO-2022-JP CSISO2022JP
ISO-2022-JP-1
ISO-2022-JP-2 CSISO2022JP2
CP50221 ISO-2022-JP-MS
CN-GB EUC-CN EUCCN GB2312 CSGB2312
GBK
CP936 MS936 WINDOWS-936
GB18030
ISO-2022-CN CSISO2022CN
ISO-2022-CN-EXT
HZ HZ-GB-2312
EUC-TW EUCTW CSEUCTW
BIG-5 BIG-FIVE BIG5 BIGFIVE CN-BIG5 CSBIG5
CP950
BIG5-HKSCS:1999
BIG5-HKSCS:2001
BIG5-HKSCS:2004
BIG5-HKSCS BIG5-HKSCS:2008 BIG5HKSCS
EUC-KR EUCKR CSEUCKR
CP949 UHC
CP1361 JOHAB
ISO-2022-KR CSISO2022KR
CP856
CP922
CP943
CP1046
CP1124
CP1129
CP1161 IBM-1161 IBM1161 CSIBM1161
CP1162 IBM-1162 IBM1162 CSIBM1162
CP1163 IBM-1163 IBM1163 CSIBM1163
DEC-KANJI
DEC-HANYU
437 CP437 IBM437 CSPC8CODEPAGE437
CP737
CP775 IBM775 CSPC775BALTIC
852 CP852 IBM852 CSPCP852
CP853
855 CP855 IBM855 CSIBM855
857 CP857 IBM857 CSIBM857
CP858
860 CP860 IBM860 CSIBM860
861 CP-IS CP861 IBM861 CSIBM861
863 CP863 IBM863 CSIBM863
CP864 IBM864 CSIBM864
865 CP865 IBM865 CSIBM865
869 CP-GR CP869 IBM869 CSIBM869
CP1125
CP037 EBCDIC-CP-CA EBCDIC-CP-NL EBCDIC-CP-US EBCDIC-CP-WT IBM-037 IBM037 CSIBM037
CP273 IBM-273 IBM273 CSIBM273
EBCDIC-CP-DK EBCDIC-CP-NO IBM-277 IBM277 CSIBM277
CP278 EBCDIC-CP-FI EBCDIC-CP-SE IBM-278 IBM278 CSIBM278
CP280 EBCDIC-CP-IT IBM-280 IBM280 CSIBM280
IBM-282 IBM282
CP284 EBCDIC-CP-ES IBM-284 IBM284 CSIBM284
CP285 EBCDIC-CP-GB IBM-285 IBM285 CSIBM285
CP297 EBCDIC-CP-FR IBM-297 IBM297 CSIBM297
CP423 EBCDIC-CP-GR IBM-423 IBM423 CSIBM423
CP424 EBCDIC-CP-HE IBM-424 IBM424 CSIBM424
IBM-425 IBM425
CP500 EBCDIC-CP-BE EBCDIC-CP-CH IBM-500 IBM500 CSIBM500
IBM-838 IBM-THAI IBM838 CSIBMTHAI
CP870 EBCDIC-CP-ROECE EBCDIC-CP-YU IBM-870 IBM870 CSIBM870
CP871 EBCDIC-CP-IS IBM-871 IBM871 CSIBM871
CP875 EBCDIC-GREEK IBM-875 IBM875
CP880 EBCDIC-CYRILLIC IBM-880 IBM880 CSIBM880
CP905 EBCDIC-CP-TR IBM-905 IBM905 CSIBM905
CCSID00924 CP00924 EBCDIC-LATIN9-EURO IBM-924 IBM00924 IBM924 CSIBM00924
CP1025 IBM-1025 IBM1025
CP1026 IBM-1026 IBM1026 CSIBM1026
CP1047 IBM-1047 IBM1047 CSIBM1047
CP1097 IBM-1097 IBM1097
CP1112 IBM-1112 IBM1112
CP1122 IBM-1122 IBM1122
CP1123 IBM-1123 IBM1123
CP1130 IBM-1130 IBM1130
CP1132 IBM-1132 IBM1132
CP1137 IBM-1137 IBM1137
CCSID01140 CP01140 EBCDIC-US-37+EURO IBM-1140 IBM01140 IBM1140 CSIBM01140
CCSID01141 CP01141 EBCDIC-DE-273+EURO IBM-1141 IBM01141 IBM1141 CSIBM01141
CCSID01142 CP01142 EBCDIC-DK-277+EURO EBCDIC-NO-277+EURO IBM-1142 IBM01142 IBM1142 CSIBM01142
CCSID01143 CP01143 EBCDIC-FI-278+EURO EBCDIC-SE-278+EURO IBM-1143 IBM01143 IBM1143 CSIBM01143
CCSID01144 CP01144 EBCDIC-IT-280+EURO IBM-1144 IBM01144 IBM1144 CSPC8CODEPAGE1144
CCSID01145 CP01145 EBCDIC-ES-284+EURO IBM-1145 IBM01145 IBM1145 CSIBM01145
CCSID01146 CP01146 EBCDIC-GB-285+EURO IBM-1146 IBM01146 IBM1146 CSPC8CODEPAGE1146
CCSID01147 CP01147 EBCDIC-FR-297+EURO IBM-1147 IBM01147 IBM1147 CSIBM01147
CCSID01148 CP01148 EBCDIC-INTERNATIONAL-500+EURO IBM-1148 IBM01148 IBM1148 CSIBM01148
CCSID01149 CP01149 EBCDIC-IS-871+EURO IBM-1149 IBM01149 IBM1149 CSIBM01149
CP1153 IBM-1153 IBM1153
CP1154 IBM-1154 IBM1154
CP1155 IBM-1155 IBM1155
CP1156 IBM-1156 IBM1156
CP1157 IBM-1157 IBM1157
CP1158 IBM-1158 IBM1158
CP1160 IBM-1160 IBM1160
CP1164 IBM-1164 IBM1164
IBM-1165 IBM1165
CP1166 IBM-1166 IBM1166
CP4971 IBM-4971 IBM4971
CP12712 IBM-12712 IBM12712
CP16804 IBM-16804 IBM16804
EUC-JIS-2004 EUC-JISX0213
SHIFT_JIS-2004 SHIFT_JISX0213
ISO-2022-JP-2004 ISO-2022-JP-3
BIG5-2003
ISO-IR-230 TDS565
ATARI ATARIST
RISCOS-LATIN1
===
]]]

[[[
echo 一   >  /sdcard/0my_files/tmp/0tmp
===
iconv -f utf-8 -t gbk    /sdcard/0my_files/tmp/0tmp
һ

===
0x04bb
===

'一'.encode('gbk')
b'\xd2\xbb'

'一'.encode('gbk').decode('u8')
'һ'

hex(ord('一'.encode('gbk').decode('u8')))
'0x4bb'

'һ'.encode('u8')
b'\xd2\xbb'

'\u04bb'.encode('u8')
b'\xd2\xbb'
===
===
===
iconv -f utf-8 -t ascii    /sdcard/0my_files/tmp/0tmp
iconv: /sdcard/0my_files/tmp/0tmp:1:0: cannot convert
===
iconv -f utf-8 -t ascii  -c  /sdcard/0my_files/tmp/0tmp
===
===
]]]
[[[
===
'一业丧乍乒习'
<-gbk->
b'\xd2\xbb\xd2\xb5\xc9\xa5\xd5\xa7\xc6\xb9\xcf\xb0'
<-utf8->
'һҵɥէƹϰ'

===
s = ''.join(map(chr, range(0x4e00,0x4f00)))
t = ''.join(c for c in s if '\xff' < c.encode('gbk').decode('utf8', errors='ignore'))

t
'一丌丐专丕业丝丞丧丨丫丶为丿乇之乍乒乜也习乾亍亘些亟亩亭什仟'

r = t.encode('gbk').decode('utf8', errors='ignore')
r
'һآؤרاҵ˿ةɥحѾؼΪدر֮էƹؿҲϰǬءبЩؽĶͤʲǪ'

len(r) == len(t) == 30
True

[f'{ord(c):X}' for c in r]
['4BB', '622', '624', '5E8', '627', '4B5', '2FF', '629', '265', '62D', '47E', '63C', '3AA', '62F', '631', '5AE', '567', '1B9', '63F', '4B2', '3F0', '1EC', '621', '628', '429', '63D', '136', '364', '2B2', '1EA']

import unicodedata as U
[U.category(c) for c in r]
['Ll', 'Lo', 'Lo', 'Lo', 'Lo', 'Ll', 'Sk', 'Lo', 'Ll', 'Lo', 'Lu', 'Lo', 'Lu', 'Lo', 'Lo', 'Mn', 'Ll', 'Ll', 'Lo', 'Lu', 'Ll', 'Lu', 'Lo', 'Lo', 'Lu', 'Lo', 'Lu', 'Mn', 'Lm', 'Lu']

[U.name(c) for c in r]


js = [j for j, c in enumerate(r) if U.category(c) == 'Ll']
js
[0, 5, 8, 16, 17, 20]

t2 = ''.join(t[j] for j in js)
t2
'一业丧乍乒习'

r2 = t2.encode('gbk').decode('utf8', errors='ignore')
r2
'һҵɥէƹϰ'

len(r2) == len(t2) == 6
True

[f'{ord(c):X}' for c in r2]
['4BB', '4B5', '265', '567', '1B9', '3F0']

[U.category(c) for c in r2]
['Ll', 'Ll', 'Ll', 'Ll', 'Ll', 'Ll']

[U.name(c) for c in r2]
['CYRILLIC SMALL LETTER SHHA', 'CYRILLIC SMALL LIGATURE TE TSE', 'LATIN SMALL LETTER TURNED H', 'ARMENIAN SMALL LETTER EH', 'LATIN SMALL LETTER EZH REVERSED', 'GREEK KAPPA SYMBOL']

r2.encode('u8').decode('gbk') == t2
True


b2 = t2.encode('gbk')
b2
b'\xd2\xbb\xd2\xb5\xc9\xa5\xd5\xa7\xc6\xb9\xcf\xb0'
r2.encode('u8') == b2
True



===
echo abcxyz一业丧乍乒习    | iconv -f utf-8 -t gbk
abcxyzһҵɥէƹϰ

===
echo abcxyz一业丧乍乒习    | iconv -f utf-8 -t ascii
abcxyz
iconv: (stdin):1:6: cannot convert
===
echo abcxyz一业丧乍乒习    | iconv -f utf-8 -t ascii  -c
abcxyz

===
echo abcxyz一业丧乍乒习    | iconv -f utf-8 -t ascii  -c    | iconv -t utf-8 -f ascii  -c
abcxyz
===
]]]

[[[
===
for nm in $(iconv -l); do echo ${nm} ; done
  空格 切分
===
iconv -l | grep '^\S\+' -o
  每行只保留首个编码
===
for nm in $(iconv -l | grep '^\S\+' -o); do echo ${nm} ; done
===
for nm in gbk ascii; do echo ${nm} ; done
for nm in gbk ascii; do echo abcxyz一业丧乍乒习    | iconv -f utf-8 -t ${nm}  -c    | iconv -t utf-8 -f ${nm}  -c  ; done
for nm in gbk gb2312 ascii; do if [[ $(echo abcxyz一业丧乍乒习    | iconv -f utf-8 -t ${nm}  -c    | iconv -t utf-8 -f ${nm}  -c) == abcxyz一业丧乍乒习 ]]; then echo ${nm} ; fi ; done
gbk
gb2312
===
]]]
[[[
===
findout encodings support cjk+ascii
===
???『abcxyz一业丧乍乒习』=>没有gb2312!!??
  有:别名: CN-GB
    『CN-GB EUC-CN EUCCN GB2312 CSGB2312』
总计:29:
    但没有:big5!!!
===
for nm in $(iconv -l | grep '^\S\+' -o) ; do if [[ $(echo abcxyz一业丧乍乒习    | iconv -f utf-8 -t ${nm}  -c    | iconv -t utf-8 -f ${nm}  -c) == abcxyz一业丧乍乒习 ]]; then echo ${nm} ; fi ; done
UTF-8
ISO-10646-UCS-2
UCS-2BE
UCS-2LE
ISO-10646-UCS-4
UCS-4BE
UCS-4LE
UTF-16
UTF-16BE
UTF-16LE
UTF-32
UTF-32BE
UTF-32LE
UNICODE-1-1-UTF-7
UCS-2-INTERNAL
UCS-2-SWAPPED
UCS-4-INTERNAL
UCS-4-SWAPPED
C99
JAVA
CN-GB-ISOIR165
ISO-2022-JP-2
CN-GB
GBK
CP936
GB18030
ISO-2022-CN
ISO-2022-CN-EXT
HZ
===
===
『一业丧乍乒习』:含:简体字，不行!
改为『一』
共计:38:
for nm in $(iconv -l | grep '^\S\+' -o | grep 'UTF\|UCS' -v) ; do if [[ $(echo 一    | iconv -f utf-8 -t ${nm}  -c    | iconv -t utf-8 -f ${nm}  -c) == 一 ]]; then echo ${nm} ; fi ; done
C99
JAVA
ISO-IR-87
CHINESE
CN-GB-ISOIR165
ISO-IR-149
EUC-JP
MS_KANJI
CP932
ISO-2022-JP
ISO-2022-JP-1
ISO-2022-JP-2
CP50221
CN-GB
GBK
CP936
GB18030
ISO-2022-CN
ISO-2022-CN-EXT
HZ
EUC-TW
BIG-5
CP950
BIG5-HKSCS:1999
BIG5-HKSCS:2001
BIG5-HKSCS:2004
BIG5-HKSCS
EUC-KR
CP949
CP1361
ISO-2022-KR
CP943
DEC-KANJI
DEC-HANYU
EUC-JIS-2004
SHIFT_JIS-2004
ISO-2022-JP-2004
BIG5-2003
===
===
]]]

[[[
export 'cjk_encidings=UTF-8 ISO-10646-UCS-2 UCS-2BE UCS-2LE ISO-10646-UCS-4 UCS-4BE UCS-4LE UTF-16 UTF-16BE UTF-16LE UTF-32 UTF-32BE UTF-32LE UNICODE-1-1-UTF-7 UCS-2-INTERNAL UCS-2-SWAPPED UCS-4-INTERNAL UCS-4-SWAPPED C99 JAVA CN-GB-ISOIR165 ISO-2022-JP-2 CN-GB GBK CP936 GB18030 ISO-2022-CN ISO-2022-CN-EXT HZ'
  『一业丧乍乒习』:含:简体字，不行!
  改为『一』
export 'cjk_encidings=C99 JAVA ISO-IR-87 CHINESE CN-GB-ISOIR165 ISO-IR-149 EUC-JP MS_KANJI CP932 ISO-2022-JP ISO-2022-JP-1 ISO-2022-JP-2 CP50221 CN-GB GBK CP936 GB18030 ISO-2022-CN ISO-2022-CN-EXT HZ EUC-TW BIG-5 CP950 BIG5-HKSCS:1999 BIG5-HKSCS:2001 BIG5-HKSCS:2004 BIG5-HKSCS EUC-KR CP949 CP1361 ISO-2022-KR CP943 DEC-KANJI DEC-HANYU EUC-JIS-2004 SHIFT_JIS-2004 ISO-2022-JP-2004 BIG5-2003'
===
for nm in ${cjk_encidings}; do echo ${nm} ; done
===
#ver1:ignore:跳过Surrogates Area, 但没有跳过Private Use Area (PUA)，导致GB18030出现不对称
with open('/sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8', 'xt', encoding='u8', errors='ignore') as ofile:
    for cp in range(0x11_00_00):
        ch = chr(cp)
        _ = ofile.write(ch)

du -h /sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8
  4.2M


===
>>> chr(0xd800)
'\ud800'
>>> chr(0xd800).encode('u8')
UnicodeEncodeError: 'utf-8' codec can't encode character '\ud800' in position 0: surrogates not allowed

===
Surrogates Area: U+D800..U+DFFF
    total 2**(3+8) == 2**11

Private Use Area (PUA): U+E000..U+F8FF
    total of 6400 private-use characters
Supplementary Private Use Areas
    Supplementary Private Use Area-A : U+F 0000..U+F FFFD
        Plane 15
    Supplementary Private Use Area-B: U+10 0000..U+10 FFFD
        Plane 16


===
#ver2:strict:
#skipss = [range(0xD800,0xE000), range(0xE0_00,0xF9_00), range(0xF_00_00,0x11_00_00)]
#uss = [range(0xD800), range(0xF9_00,0xF_00_00),(0xF_FF_FF,0x10_FF_FF)]
#txt = ''.join(chr(cp) for us in uss for cp in us)

from seed.data_funcs.rngs import make_Ranges, sorted_ints_to_iter_nontouch_ranges
skips = make_Ranges([(0xD800,0xDFFF+1), (0xE000,0xF8FF+1), (0xF_00_00,0xF_FF_FD+1), (0x10_00_00,0x10_FF_FD+1)])
all_code_points = make_Ranges([(0, 0x11_00_00)])
us = all_code_points -skips
txt = ''.join(chr(cp) for cp in us.iter_ints_(reverse=False))
print(len(txt)) #974596 #0xedf04
bs = txt.encode('u8')
with open('/sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8', 'xb') as ofile:
    ofile.write(bs)

3839120 bytes
du -h /sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8
  3.7M


===
]]]

[[[
===

export 'tmp_dir=/sdcard/0my_files/tmp'
export "utf8_txt_name=1tmp.all.uncode.chars.u8"
export "utf8_txt_path=${tmp_dir}/${utf8_txt_name}"
export 'cjk_encidings=C99 JAVA ISO-IR-87 CHINESE CN-GB-ISOIR165 ISO-IR-149 EUC-JP MS_KANJI CP932 ISO-2022-JP ISO-2022-JP-1 ISO-2022-JP-2 CP50221 CN-GB GBK CP936 GB18030 ISO-2022-CN ISO-2022-CN-EXT HZ EUC-TW BIG-5 CP950 BIG5-HKSCS:1999 BIG5-HKSCS:2001 BIG5-HKSCS:2004 BIG5-HKSCS EUC-KR CP949 CP1361 ISO-2022-KR CP943 DEC-KANJI DEC-HANYU EUC-JIS-2004 SHIFT_JIS-2004 ISO-2022-JP-2004 BIG5-2003'

mkdir ${tmp_dir}/${utf8_txt_name}...odir/
for nm in ${cjk_encidings}; do echo ${nm} ; iconv -f utf-8 -t ${nm}  -c  ${utf8_txt_path}  >  "${tmp_dir}/${utf8_txt_name}...odir/all_chars.${nm}" ; done


===
ls ${tmp_dir}/${utf8_txt_name}...odir/
ls -sSh ${tmp_dir}/${utf8_txt_name}...odir/

======================
======================
======================
===convert back to utf8:
mkdir ${tmp_dir}/${utf8_txt_name}...odir..back_to_u8/

for nm in ${cjk_encidings}; do echo ${nm} ; iconv -t utf-8 -f ${nm}   "${tmp_dir}/${utf8_txt_name}...odir/all_chars.${nm}" >  "${tmp_dir}/${utf8_txt_name}...odir..back_to_u8/${nm}.u8" ; done
ISO-2022-JP-2
iconv: /sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8...odir/1tmp.all.uncode.chars.u8...ISO-2022-JP-2:2:0: cannot convert
ISO-2022-CN
iconv: /sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8...odir/1tmp.all.uncode.chars.u8...ISO-2022-CN:2:0: cannot convert
ISO-2022-CN-EXT
iconv: /sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8...odir/1tmp.all.uncode.chars.u8...ISO-2022-CN-EXT:2:0: cannot convert
HZ
iconv: /sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8...odir/1tmp.all.uncode.chars.u8...HZ:2:94: cannot convert

『-c』
for nm in ISO-2022-JP-2 ISO-2022-CN ISO-2022-CN-EXT HZ ; do echo ${nm} ; iconv -t utf-8 -f ${nm}  -c "${tmp_dir}/${utf8_txt_name}...odir/all_chars.${nm}"  >  "${tmp_dir}/${utf8_txt_name}...odir..back_to_u8/${nm}.u8" ; done



===
ls -sSh -1 ${tmp_dir}/${utf8_txt_name}...odir..back_to_u8/

===


e ../lots/NOTE/encoding/iconv.txt.py
py ../lots/NOTE/encoding/iconv.txt.py    >  /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp
  82784行
du -h /sdcard/0my_files/tmp/0tmp
  628K

毛病一:
    '\r'出毛病:
    snippet -c 8 -n 3 -b 0 /sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8
      没毛病
    毛病出在:universal newlines mode
    改为:
        txt = bs.decode('u8')

毛病二:
    GB18030:出现反序字符=>PUA导致多值不对称映射
    返回前面，重新生成${utf8_txt_path}:即ver2,不含PUA

毛病三:
    5个UCS编码:出现唯一相同 反序字符:『FFFF:FFFD』
    处理方式:跳过整个编码


from seed.helper.stable_repr import stable_repr__expand_top_layer, stable_repr_print__expand_top_layer

from seed.data_funcs.rngs import make_Ranges, sorted_ints_to_iter_nontouch_ranges

from pathlib import Path
d = Path('/sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8...odir..back_to_u8/')
#for ipath in sorted(d.glob('GB18030.u8')):
for ipath in sorted(d.glob('*.u8')):
    bad = False
    nm = ipath.stem
    print(repr(nm))
    nm4id = nm.replace('-', '_')
    assert nm4id.isidentifier()
    if 0:
        with open(ipath, 'rt', encoding='u8') as ifile:
            txt = ifile.read()
    else:
        bs = ipath.read_bytes()
        txt = bs.decode('u8')
    txt
    if 0b001:
        c_ = txt[0]
        for c in txt:
            if not c_ <= c:
                bad = True
                print(c_+c)
                print(f'{ord(c_):X}:{ord(c):X}')
            c_ = c
    if bad:
        print(f'skip:{nm}')
        continue
    if 1:
        rngs = sorted_ints_to_iter_nontouch_ranges(map(ord, txt))
            #C99
            #raise TypeError('not sorted_unique_ints: {} {}'.format(end-1, last))
            #TypeError: not sorted_unique_ints: 12 10
            #
            #'\r'出毛病:
            #snippet -c 8 -n 3 -b 0 /sdcard/0my_files/tmp/1tmp.all.uncode.chars.u8
            #  没毛病
            #毛病出在:universal newlines mode
            #
            #
            #'GB18030'
            #
            #TypeError: not sorted_unique_ints: 65042 65041
            #
    else:
        rngs = sorted_ints_to_iter_nontouch_ranges(sorted(map(ord, txt)))
    rngs = make_Ranges(rngs)
    print(rngs.len_ints())
    print(rngs.len_rngs())
    print(f'{nm4id}4hxXhxsz_ls = (') #)
    print(stable_repr__expand_top_layer(rngs.to_hexXhexszpair_list()))
    #(
    print(')')
    print(f'{nm4id}4hx2sz = (') #)
    print(stable_repr__expand_top_layer(rngs.to_hex2sz()))
    #(
    print(')')

输出见:
view '../lots/NOTE/encoding/rngs4cjk_encodings5iconv.out.txt.7z'
  view ../lots/NOTE/encoding/iconv.txt.py


===
rm -r /sdcard/0my_files/tmp/1tmp.all*
===
xxx:cp -iv /sdcard/0my_files/tmp/0tmp ../../python3_src/nn_ns/CJK/cjk_subsets/iconv_output.py
view /sdcard/0my_files/tmp/rngs4cjk_encodings5iconv.out.txt
cp -iv '../lots/NOTE/encoding/rngs4cjk_encodings5iconv.out.txt.7z' ../../python3_src/nn_ns/CJK/cjk_subsets/
view ../../python3_src/nn_ns/CJK/cjk_subsets/rngs4cjk_encodings5iconv.out.txt.7z
e ../../python3_src/nn_ns/CJK/cjk_subsets/iconv_output.py
===
===

view ../../python3_src/seed/exec/cmd_call.py
view '../lots/NOTE/encoding/rngs4cjk_encodings5iconv.out.txt.7z'
===
]]]



