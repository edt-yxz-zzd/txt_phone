反防盗链
    实测有效！
    from python3_src\nn_ns\app\Django\mzitu_com\mzitu_com_project_main\mzitu_com_project\per_page_transform.py
        # http://bbs.hahacn.com/thread/5.html
        # [success]
        img_url = 'http://api.hahacn.com/other/getimg2?url=' + img_url

example:
    http://api.hahacn.com/other/getimg2?url=https://i.meizitu.net/2018/12/28f02.jpg



盗链 Hotlinking
    Inline linking (also known as hotlinking, leeching, piggy-backing, direct linking, offsite image grabs)

download via proxy
def download_image_file_as_view(request):
    # from:
    #   https://blog.csdn.net/qq_33733970/article/details/77876675
    #   Python3爬虫之图片防盗链破解
    #
    #   https://blog.csdn.net/quikai1981/article/details/52494723
    #   python 3.3 下载带有防盗链的文件

    if request.method == 'GET':
        # http://www.../echo_image?url=<img_url>
        # 'User-Agent'
        # 'Referer'
        url = request.GET['url'] # ''imgurl' -> 'url'
        opener = urllib.request.build_opener()


        #('User-Agent','Mozilla/5.0 (Linux; Android 4.4.4; en-us; Nexus 5 Build/JOP40D)
        #('Referer', 'http://www.python.org/')
        UserAgent = r'Mozilla/5.0 (Linux; Android 4.4.4; en-us; Nexus 5 Build/JOP40D)'
        Referer = get_scheme_authority(url)
        assert type(UserAgent) is str is type(Referer)

        opener.addheaders = [('User-Agent', UserAgent), ('Referer', Referer)]
        image_file = opener.open(url)
        image_data = image_file.read()
        return HttpResponse(image_data, content_type='image/jpeg')
    else:
        pass


