
/*

nn_ns\math_nn\continued_fraction>pym _countBC_givenD.py ratio_small
args= [('exprD', None), ('firstD', 2), ('input_Ds_directly', None), ('lastD', 30), ('show_eachD'
, False), ('show_first_n_infos', None), ('sort_attrs', ['ratio_small']), ('stepD', 1)]
============================================================
max ratio_small first
    Ds=[3, 7, 2, 13, 6, 19, 10, 14, 21, 22, 8, 5, 11, 17, 23, 29, 12, 24, 28, 15, 26, 18, 20, 27]

D=3, total=2, ratio_total=2/3, ratio_small=2/3, ratio_total_floor_sqrt=2, ratio_small_floor_sqrt=2:
    len=2, BCss[0]=[(1, 1), (1, 2)]

D=7, total=4, ratio_total=4/7, ratio_small=4/7, ratio_total_floor_sqrt=2, ratio_small_floor_sqrt=2:
    len=4, BCss[0]=[(1, 2), (1, 3), (2, 1), (2, 3)]

D=2, total=1, ratio_total=1/2, ratio_small=1/2, ratio_total_floor_sqrt=1, ratio_small_floor_sqrt=1:
    len=1, BCss[0]=[(1, 1)]

D=13, total=6, ratio_total=6/13, ratio_small=5/13, ratio_total_floor_sqrt=2, ratio_small_floor_sqrt=5/3:
    len=5, BCss[0]=[(1, 3), (2, 3), (1, 4), (3, 1), (3, 4)]
    len=1, BCss[1]=[(3, 2)]

D=6, total=2, ratio_total=1/3, ratio_small=1/3, ratio_total_floor_sqrt=1, ratio_small_floor_sqrt=1:
    len=2, BCss[0]=[(2, 1), (2, 2)]

D=19, total=6, ratio_total=6/19, ratio_small=6/19, ratio_total_floor_sqrt=3/2, ratio_small_floor_sqrt=3/2:
    len=6, BCss[0]=[(2, 3), (4, 1), (4, 3), (2, 5), (3, 2), (3, 5)]

D=10, total=4, ratio_total=2/5, ratio_small=3/10, ratio_total_floor_sqrt=4/3, ratio_small_floor_sqrt=1:
    len=3, BCss[0]=[(1, 3), (2, 2), (2, 3)]
    len=1, BCss[1]=[(3, 1)]

D=14, total=4, ratio_total=2/7, ratio_small=2/7, ratio_total_floor_sqrt=4/3, ratio_small_floor_sqrt=4/3:
    len=4, BCss[0]=[(2, 2), (2, 5), (3, 1), (3, 5)]

D=21, total=8, ratio_total=8/21, ratio_small=2/7, ratio_total_floor_sqrt=2, ratio_small_floor_sqrt=3/2:
    len=6, BCss[0]=[(1, 4), (3, 3), (3, 4), (1, 5), (4, 1), (4, 5)]
    len=2, BCss[1]=[(3, 2), (3, 6)]

D=22, total=6, ratio_total=3/11, ratio_small=3/11, ratio_total_floor_sqrt=3/2, ratio_small_floor_sqrt=3/2:
    len=6, BCss[0]=[(2, 3), (4, 2), (4, 3), (2, 6), (4, 1), (4, 6)]

D=8, total=3, ratio_total=3/8, ratio_small=1/4, ratio_total_floor_sqrt=3/2, ratio_small_floor_sqrt=1:
    len=2, BCss[0]=[(2, 1), (2, 4)]
    len=1, BCss[1]=[(2, 2)]

D=5, total=2, ratio_total=2/5, ratio_small=1/5, ratio_total_floor_sqrt=1, ratio_small_floor_sqrt=1/2:
    len=1, BCss[0]=[(1, 2)]
    len=1, BCss[1]=[(2, 1)]

D=11, total=2, ratio_total=2/11, ratio_small=2/11, ratio_total_floor_sqrt=2/3, ratio_small_floor_sqrt=2/3:
    len=2, BCss[0]=[(3, 1), (3, 2)]

D=17, total=4, ratio_total=4/17, ratio_small=3/17, ratio_total_floor_sqrt=1, ratio_small_floor_sqrt=3/4:
    len=3, BCss[0]=[(1, 4), (3, 2), (3, 4)]
    len=1, BCss[1]=[(4, 1)]

D=23, total=4, ratio_total=4/23, ratio_small=4/23, ratio_total_floor_sqrt=1, ratio_small_floor_sqrt=1:
    len=4, BCss[0]=[(3, 2), (3, 7), (4, 1), (4, 7)]

D=29, total=6, ratio_total=6/29, ratio_small=5/29, ratio_total_floor_sqrt=6/5, ratio_small_floor_sqrt=1:
    len=5, BCss[0]=[(2, 5), (3, 4), (5, 1), (5, 4), (3, 5)]
    len=1, BCss[1]=[(5, 2)]

D=12, total=4, ratio_total=1/3, ratio_small=1/6, ratio_total_floor_sqrt=4/3, ratio_small_floor_sqrt=2/3:
    len=2, BCss[0]=[(2, 2), (2, 4)]
    len=2, BCss[1]=[(3, 1), (3, 3)]

D=24, total=8, ratio_total=1/3, ratio_small=1/6, ratio_total_floor_sqrt=2, ratio_small_floor_sqrt=1:
    len=4, BCss[0]=[(2, 4), (2, 5), (3, 3), (3, 5)]
    len=2, BCss[1]=[(4, 1), (4, 8)]
    len=2, BCss[2]=[(4, 2), (4, 4)]

D=28, total=8, ratio_total=2/7, ratio_small=1/7, ratio_total_floor_sqrt=8/5, ratio_small_floor_sqrt=4/5:
    len=4, BCss[0]=[(2, 4), (2, 6), (4, 2), (4, 6)]
    len=4, BCss[1]=[(4, 3), (5, 1), (5, 3), (4, 4)]

D=15, total=4, ratio_total=4/15, ratio_small=2/15, ratio_total_floor_sqrt=4/3, ratio_small_floor_sqrt=2/3:
    len=2, BCss[0]=[(3, 1), (3, 6)]
    len=2, BCss[1]=[(3, 2), (3, 3)]

D=26, total=4, ratio_total=2/13, ratio_small=3/26, ratio_total_floor_sqrt=4/5, ratio_small_floor_sqrt=3/5:
    len=3, BCss[0]=[(1, 5), (4, 2), (4, 5)]
    len=1, BCss[1]=[(5, 1)]

D=18, total=3, ratio_total=1/6, ratio_small=1/9, ratio_total_floor_sqrt=3/4, ratio_small_floor_sqrt=1/2:
    len=1, BCss[0]=[(3, 3)]
    len=2, BCss[1]=[(4, 1), (4, 2)]

D=20, total=4, ratio_total=1/5, ratio_small=1/10, ratio_total_floor_sqrt=1, ratio_small_floor_sqrt=1/2:
    len=1, BCss[0]=[(2, 4)]
    len=2, BCss[1]=[(4, 1), (4, 4)]
    len=1, BCss[2]=[(4, 2)]

D=27, total=4, ratio_total=4/27, ratio_small=2/27, ratio_total_floor_sqrt=4/5, ratio_small_floor_sqrt=2/5:
    len=2, BCss[0]=[(3, 3), (3, 6)]
    len=2, BCss[1]=[(5, 1), (5, 2)]

*/

CREATE TABLE positive_nonperfect_square_table
    (positive_nonperfect_square
        Integer     not NULL
        check (positive_nonperfect_square >= 2)
    ,floor_square_root
        Integer     not NULL
        check (floor_square_root >= 1)
        check (floor_square_root*floor_square_root < positive_nonperfect_square)
        check (positive_nonperfect_square < (floor_square_root+1)*(floor_square_root+1))
    -----------------------
    ,PRIMARY KEY (positive_nonperfect_square ASC)
    );
-- .tables
-- .schema positive_nonperfect_square_table

INSERT INTO positive_nonperfect_square_table
    (positive_nonperfect_square, floor_square_root)
    VALUES  (2, 1), (3, 1)  -- 4=2^2
        ,   (5, 2), (6, 2), (7, 2), (8, 2) -- 9=3^2
        ,   (11, 3)
    ;
SELECT positive_nonperfect_square, floor_square_root
    from positive_nonperfect_square_table
    ;
-- .dump positive_nonperfect_square_table

/*
should fail
INSERT INTO positive_nonperfect_square_table
    (positive_nonperfect_square, floor_square_root)
    VALUES  (4, 2)
    ;
*/

CREATE TABLE num_orbits_of_quadratic_surd_table
    (positive_nonperfect_square
        Integer     not NULL
        check (positive_nonperfect_square >= 2)
    ,num_orbits
        Integer     not NULL
        check (num_orbits >= 1)
    -----------------------
    ,PRIMARY KEY (positive_nonperfect_square ASC)
    );

INSERT INTO num_orbits_of_quadratic_surd_table
    (positive_nonperfect_square, num_orbits)
    VALUES  (2, 1), (3, 1), (5, 2)
        ,   (6, 1), (7, 1), (8, 2)
        ,   (10, 2), (11, 1)
    ;



CREATE TABLE len_orbit_of_quadratic_surd_table
    (positive_nonperfect_square
        Integer     not NULL
        check (positive_nonperfect_square >= 2)
    ,orbit_idx
        Integer     not NULL
        -- bug: check (0 <= orbit_idx < num_orbits)
        check (0 <= orbit_idx and orbit_idx < num_orbits)
        -- ??AUTO_INCREMENT??
    ,len_orbit
        Integer     not NULL
        check (len_orbit >= 1)
    ,num_orbits
        Integer     not NULL
        check (num_orbits >= 1)
    -----------------------
    ,PRIMARY KEY (positive_nonperfect_square ASC, orbit_idx ASC)
    ,FOREIGN KEY (positive_nonperfect_square, num_orbits) references
        num_orbits_of_quadratic_surd_table
            (positive_nonperfect_square, num_orbits)
        -- ?? ON DELETE CASCADE
        -- ?? ON UPDATE CASCADE
    );

INSERT INTO len_orbit_of_quadratic_surd_table
    (positive_nonperfect_square, orbit_idx, len_orbit, num_orbits)
    VALUES  (2, 0, 1, 1), (3, 0, 2, 1), (5, 0, 1, 2), (5, 1, 1, 2)
        ,   (6, 0, 2, 1), (7, 0, 4, 1), (8, 0, 2, 2), (8, 1, 1, 2)
        ,   (10, 0, 3, 2), (10, 1, 1, 2), (11, 0, 2, 1)
    ;


CREATE TABLE reduced_quadratic_surd_table
    (D
        Integer     not NULL
        -- floor_sqrt(D)^2 < D
        check (D >= 2)
    ,orbit_idx
        Integer     not NULL
        -- orbit = BCs = BCss[orbit_idx]
        -- BCss :: sorted[orbit]
        -- orbit :: min_first-by-continued-digit-order[(B, C)]]
        check (orbit_idx >= 0)
    ,in_orbit_idx
        Integer     not NULL
        -- (B, C) = BC = BCss[orbit_idx][in_orbit_idx]
        -- bug: check (0 <= in_orbit_idx < len_orbit)
        check (0 <= in_orbit_idx and in_orbit_idx < len_orbit)
    ,B
        Integer     not NULL
        check (B >= 1)
    ,C
        Integer     not NULL
        check (C >= 1)

    ,floor_sqrtD
        Integer     not NULL
        check (floor_sqrtD >= 1)
    ,len_orbit
        Integer     not NULL
        check (len_orbit >= 1)
    ------------------------
    ,PRIMARY KEY (D, orbit_idx, in_orbit_idx)
    ,UNIQUE (D, B, C)
    ,FOREIGN KEY (D, floor_sqrtD) references
        positive_nonperfect_square_table
            (positive_nonperfect_square, floor_square_root)
        -- ?? ON DELETE CASCADE
        -- ?? ON UPDATE CASCADE
    ,FOREIGN KEY (D, orbit_idx, len_orbit) references
        len_orbit_of_quadratic_surd_table
            (positive_nonperfect_square, orbit_idx, len_orbit)
        -- ?? ON DELETE CASCADE
        -- ?? ON UPDATE CASCADE

    -- (D-B^2)%C == 0
    -- is_reduced_quadratic_surd B D C
    --  [C>0][B>0][C+B > floor_sqrt(D) >= B][floor_sqrt(D) >= C-B]
    ,check ((D - B*B)%C == 0)
    -- bug: ,check (C+B > floor_sqrtD >= B)
    ,check (C+B > floor_sqrtD and floor_sqrtD >= B)
    ,check (floor_sqrtD >= C-B)
    );

INSERT INTO reduced_quadratic_surd_table
    (D, orbit_idx, in_orbit_idx, B, C, floor_sqrtD, len_orbit)
    VALUES  (2, 0, 0, 1, 1, 1, 1)
        ,   (3, 0, 0, 1, 1, 1, 2)
        ,   (3, 0, 1, 1, 2, 1, 2)
        ,   (5, 0, 0, 1, 2, 2, 1)
        ,   (5, 1, 0, 2, 1, 2, 1)
    ;

SELECT
    D, orbit_idx, in_orbit_idx, B, C, floor_sqrtD, len_orbit
    from reduced_quadratic_surd_table;
COMMIT;
