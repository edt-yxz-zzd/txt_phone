SAX vs DOM vs StAX vs TrAX





the parser standards:
    SAX - Simple API for XML Parsing (SAX)
        parse xml as a stream of events
    DOM - Document Object Model (DOM)
        to build an object representation of xml
    STAX - the Streaming API for XML (StAX) standard

XSLT - the Extensible Stylesheet Language Transformations (XSLT) standard
    giving you control over the presentation of the data and enabling you to convert the data to other XML documents or to other formats, such as HTML.

Java API for XML Processing (JAXP)
    /javatutorials/tutorial/jaxp/intro/index.html



https://docs.oracle.com/cd/E17802_01/webservices/webservices/docs/1.6/tutorial/doc/SJSXP2.html
Streaming vs DOM
    two programming models for working with XML infosets:
        document streaming model
        document object model (DOM)
Streaming Pull Parsing vs Streaming Push Parsing
    pull - the client only gets (pulls) XML data when it explicitly asks for it.
    push - the parser sends the data whether or not the client is ready to use it at that time.

Streaming Pull Parsing is better than Streaming Push Parsing
    * With pull parsing, the client controls the application thread, and can call methods on the parser when needed. By contrast, with push processing, the parser controls the application thread, and the client can only accept invocations from the parser.
    * Pull parsing libraries can be much smaller and the client code to interact with those libraries much simpler than with push libraries, even for more complex documents.
    * Pull clients can read multiple documents at one time with a single thread.
    * A StAX pull parser can filter XML documents such that elements unnecessary to the client can be ignored, and it can support XML views of non-XML data.

StAX Use Cases
    The StAX specification defines a number of uses cases for the API:
    * Data binding
        Unmarshalling an XML document
        Marshalling an XML document
        Parallel document processing
        Wireless communication
    * SOAP message processing
        Parsing simple predictable structures
        Parsing graph representations with forward references
        Parsing WSDL
    * Virtual data sources
        Viewing as XML data stored in databases
        Viewing data in Java objects created by XML data binding
        Navigating a DOM tree as a stream of events
    * Parsing specific XML vocabularies
    * Pipelined XML processing

Comparing StAX to Other JAXP APIs
    As an API in the JAXP family, StAX can be compared, among other APIs, to SAX, TrAX, and JDOM. Of the latter two, StAX is not as powerful or flexible as TrAX or JDOM, but neither does it require as much memory or processor load to be useful, and StAX can, in many cases, outperform the DOM-based APIs. The same arguments outlined above, weighing the cost/benefits of the DOM model versus the streaming model, apply here.

    With this in mind, the closest comparisons between can be made between StAX and SAX, and it is here that StAX offers features that are beneficial in many cases; some of these include:

    * StAX-enabled clients are generally easier to code than SAX clients. While it can be argued that SAX parsers are marginally easier to write, StAX parser code can be smaller and the code necessary for the client to interact with the parser simpler.
    * StAX is a bidirectional API, meaning that it can both read and write XML documents. SAX is read only, so another API is needed if you want to write XML documents.
    * SAX is a push API, whereas StAX is pull. The trade-offs between push and pull APIs outlined above apply here.

Table 3-1 synopsizes the comparative features of StAX, SAX, DOM, and TrAX (table adapted from "Does StAX Belong in Your XML Toolbox?" (http://www.developer.com/xml/article.php/3397691) by Jeff Ryan).
Table 3-1 XML Parser API Feature Summary
    -\\-#StAX           #SAX            #DOM            #TrAX
    Feature
    API Type
        #Pull, streaming#Push, streaming#In memory tree #XSLT Rule
    Ease of Use
        #High           #Medium         #High           #Medium
    XPath Capability
        #No             #No             #Yes            #Yes
    CPU and Memory Efficiency
        #Good           #Good           #Varies         #Varies
    Forward Only
        #Yes            #Yes            #No             #No
    Read XML
        #Yes            #Yes            #Yes            #Yes
    Write XML
        #Yes            #No             #Yes            #Yes
    Create, Read, Update, Delete
        #No             #No             #Yes            #No


=========================
StAX vs StAX
    http://tutorials.jenkov.com/java-xml/sax-vs-stax.html
    StAX allows Subparsing / Delegation
    SAX cannot.

