"rigid_connected ugraph fake_embedding isomorphism.txt"
    a developping idea from:
        "[planar_graph][triconnected][isomorphism][1973]A V log V algorithm for isomorphism of triconnected planar graphs[good].pdf"

    [rigid_connected]
        <==> [connected][num_vertices>=1]
        <==> [num_connected components==1]
    fake_embedding =[def]= arbitrary local embedding of hedges around vertex

the ref paper record local information for each hedge of "planar" ugraph:
    hedge2local_info__planar hedge =
        (hedge.begin_vertex.vertex_degree
        ,hedge.end_vertex.vertex_degree
        ,hedge.clockwise_face.face_degree
        ,hedge.counterclockwise_face.face_degree
        )

"next" =[def]= fake_clockwise_next
if extend from planar_embedding to fake_embedding:
    we should record more information about fface than face
    we may treat face_degree as the next duplicate vertex/hedge in infinite extended periods
        ,for planar ugraph, distance to next duplicate vertex/hedge are the same
    but for arbitrary ugraph:
        fface may contains duplicate vertices inside one period
        fface may contains both (hedge, hedge.reversal)

    similar for vertex_degree:
        neighbor vertices of vertex may contains duplicate vertex
        incident aedges of vertex may contains duplicate aedges
        # but planar too!!!!!!
        #   this information seems useless

simple_nonempty_cycle
    # no duplicate vertex
hsimple_nonempty_cycle =[def]= hedges1 s.t.
    # no duplicate hedge
    hedges1 :: [HEdge]
    len(set(hedges1)) == len(hedges1) >= 1
    hedges1[0].begin_vertex == hedges1[-1].end_vertex
    hedges1[i-1].end_vertex == hedges1[i].begin_vertex


planar_embedding:
    face is a simple_nonempty_cycle
    no duplicate vertex per face
    no duplicate hedge per face
    no duplicate aedge per face

    hedge2face_degree hedge = hedge.fake_clockwise_face.face_degree
    vertex2vertex_degree vertex = vertex.vertex_degree

fake_embedding:
  * fface
    fface is a hsimple_nonempty_cycle
    may have duplicate vertex per face
    no duplicate hedge per face
    may have duplicate aedge per face
        # at most two copies of same aedge, for both hedges of the aedge

    # skip the from_hedge at first time meet it
    hedge.distance_to_next_duplicate_hedge_around_fface
        = hedge2distance_to_next_duplicate_hedge_around_fface hedge
        = hedge2fface_degree hedge
        = hedge.fake_clockwise_fface.fface_degree
        = hedge2distance_to_next_duplicate_hedge_around_fface(
            fface=hedge.fake_clockwise_face
            ,from_hedge=hedge
            ,to_hedge=hedge
            )
    hedge.distance_to_next_duplicate_vertex_around_fface
        = hedge2distance_to_next_duplicate_vertex_around_fface hedge
        = hedge2distance_to_next_duplicate_begin_vertex_around_fface(
            fface=hedge.fake_clockwise_face
            ,from_hedge=hedge
            ,to_vertex=hedge.begin_vertex
            )
    hedge.distance_to_next_duplicate_aedge_around_fface
        = hedge2distance_to_next_duplicate_aedge_around_fface hedge
        = hedge2distance_to_next_duplicate_aedge_around_fface(
            fface=hedge.fake_clockwise_face
            ,from_hedge=hedge
            ,to_aedge=hedge.aedge
            )
        # ==>> whether the 2 ffaces on left/right of hedge are the same
    hedge.single_local_fface_info
        = hedge2single_local_fface_info hedge
        = (hedge.distance_to_next_duplicate_hedge_around_fface
          ,hedge.distance_to_next_duplicate_aedge_around_fface
          ,hedge.distance_to_next_duplicate_vertex_around_fface
          )
        # ==>> overlap-decompose fface into:
        #   duplicate aedges and may-overlap simple_nonempty_cycles


  * vertex
    hedge.distance_to_next_duplicate_hedge_around_vertex
        = hedge.begin_vertex.vertex_degree
        = hedge2distance_to_next_duplicate_hedge_around_vertex hedge
        = hedge2distance_to_next_duplicate_hedge_around_vertex(
            vertex=hedge.begin_vertex
            ,from_hedge=hedge
            ,to_hedge=hedge
            )
    hedge.distance_to_next_duplicate_vertex_around_vertex
        = hedge2distance_to_next_duplicate_vertex_around_vertex hedge
        = hedge2distance_to_next_duplicate_vertex_around_vertex(
            vertex=hedge.begin_vertex
            ,from_hedge=hedge
            ,to_vertex=hedge.end_vertex
            )
    hedge.distance_to_next_duplicate_aedge_around_vertex
        = hedge2distance_to_next_duplicate_aedge_around_vertex hedge
        = hedge2distance_to_next_duplicate_aedge_around_vertex(
            vertex=hedge.begin_vertex
            ,from_hedge=hedge
            ,to_aedge=hedge.aedge
            )
    hedge.single_local_vertex_info
        = hedge2single_local_vertex_info hedge
        = (hedge.distance_to_next_duplicate_hedge_around_vertex
          ,hedge.distance_to_next_duplicate_aedge_around_vertex
          ,hedge.distance_to_next_duplicate_vertex_around_vertex
          )



  * single
    hedge.single_local_info__fake
        = hedge2single_local_info__fake hedge
        = (hedge.single_local_vertex_info
          ,hedge.single_local_fface_info
          )

  * double # directed
    #extended local information
    hedge.local_info__fake =
        = hedge2local_info__fake hedge
        (hedge.single_local_info__fake
        ,hedge.reversal.single_local_info__fake
        )

now I can proof:
    # primary_path: 2 neighbor hedges are clockwise neighbor around vertex
    # distinguishable <<== primary_path

    # even neednot extended local information
        [h1,h2 are indistinguishable] <==> [h1.reversal,h2.reversal are indistinguishable]

        [path p1,p2][p1[0],p2[0] are indistinguishable][p1 is corresponding to p2]
            ==>> [p1.hedges[-1],p2.hedges[-1] are indistinguishable]
            # arbitrary path
            #   not just primary_path
            #   may not simple

but now can not proof yet:
    [path p1,p2][p1[0],p2[0] are indistinguishable][p1 is corresponding to p2]
        ??==>> [[p1 is cycle] <--> [p2 is cycle]]??
            # arbitrary cycle # no matter whether simple/hsimple
            # proof for path length = [1..2]

    ### fail!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    counterexample: grid on torus
        we can insert as many columns and rows as possible

      |  |  |  |  |
    -A0-B0-C0-D0-A0-
      |  |  |  |  |
    -A1-B1-C1-D1-A1-
      |  |  |  |  |
    -A2-B2-C2-D2-A2-
      |  |  |  |  |
    -A3-B3-C3-D3-A3-
      |  |  |  |  |
    -A0-B0-C0-D0-A0-
      |  |  |  |  |

