let x be a sentence
    Ini_k(x) ::= x[:k] # initial of length k # the prefix of x having length k
        Ini_2(aabacba) = aa
    
    x^R ::= x[::-1] # Mirror Reflection
    x^m ::= x * m   # Repetition # mth power
    
    ¦Å ::= '' = x[0:0] = x^0 # epsilon
    
    a.b ::= a ++ b = ''.join([a,b]) # concate

let L be a language
    Prefixes(L) = {y|x=yz¡Äx¡ÊL¡Äy!= ¦Å¡Äz!= ¦Å}
    prefix-free
        A language is prefix-free if none of the proper prefixes of sentences is in the language.
        L1={x|x=a^n.b^n¡Än¡Ý1} is prefix-free
        ¦Å should not be a valid sentence of a prefix-free language.
    
    L1 L2 = L1 . L2 = L1+L2 = L1 | L2 # set union # language concatenation
    L^m # mth power
        L^0 = {¦Å}
    
    strings of finite length
        (¦² + {¦Å}) ^ k # k be the max_length
        ¦²^min_length . (¦² + {¦Å}) ^ (max_length-min_length)
        

set operations
    union (¡È), intersection (¡É), difference (\)
set relations
    inclusion (<=), strict inclusion(<), and equality (=)


universal language of alphabet ¦²
    the set of all strings of alphabet ¦², of any length, including zero.
    
    universal_language(¦²) = union ¦²^k {k=0->oo} = ¦²*

complement of a language L
    complement(L) = universal_language(alphabet_of(L)) \ L



Star and Cross
    star operation | Kleene's star | closure by concatenation
        L* ::= union L^k {k>=0}
    cross
        L+ ::= union L^k {k>0}
    
        
right quotient
    L1 /_R L2 ::= {y | exists z s.t. y.z in L1 and z in L2}

left quotient
    L2 \_L L1 ::= {y | exists z s.t. z.y in L1 and z in L2}


Regular Expression -> r.e.
    .concatenation 
    ¡Èunion 
    *star 
        # r+ = r.r*
    
    {}empty set
    {a} singleton set # for a in ¦²
        # {¦Å} = {}^0 = {}*



the family REG of regular languages
the family FIN of finite languages
    FIN < REG




derivation | implication
    subexpression -> s.e.
    choice
        1. e[k], 1¡Ük¡Üm, is a choice of union e[k] {k=1..m}
        2. e^k, k >= 1, is a choice of the expressions e* or e+
        3. {¦Å} is a choice of e*
    
    e1 ==>> e2 # e1 derives e2
        if e2 is a choice of e1
        or e1 = union r[k] {k = 1..m}, e2 = union r[k] {k = 1..n-1} | r'[n] | union r[k] {k = n+1..m}
            and r'[n] is a choice of r[n]
    =[n]=>>
    =[+]=>>
    =[*]=>>

language defined by a regular expression e
    L(¦²,e) ::= {s in ¦²* | e =[*]=>> s}
    
    Two r.e. are equivalent if they define the same language.



Ambiguous regular expression
    the presence of at least one a
        (a¡Èb)*a(a¡Èb)*

    A sentence (and the r.e. deriving it) is said to beambiguous, 
        <==> can be obtained through two structurally different derivations.


Repetition from k to n>k times
    [e]_k ^n ::= union e^i {i=k..n}
Option
    [e] ::= ({¦Å}¡Èe)

Interval of ordered set
    (0...9)
    (A...Z)

Extended r.e. with intersection
    e1 ¡É e2
Extended r.e. with complement
    ~e

an r.e. extended with complement and intersection produces always a regular language

The family REG of regular languages is the smallest language family such that: 
    (i) it contains all finite languages and 
    (ii) it is closed by concatenation, union, and star.



Linguistic Abstraction
    Lists with Separators and Opening/Closing Marks
        list ::= opening_mark [elem (sep elem)*] closing_mark # [] means option
    Hierarchical or Precedence Lists # list with precedences
        list_k ::= opening_mark_k [elem_k (sep elem_k)*] closing_mark_k
        elem_k ::= list_(k-1)
        list_0 ::= elem | atom | atomic element



[generative]
    A generative grammar or syntax is a set of simple rules that can be repeatedly applied in order to generate all and only the valid strings.

    Sometimes the term grammar has a broader connotation than syntax, as when rules for computing the meaning of sentences are added to rules for enumerating them.







A context-free(CF) (or type 2 or BNF) grammar G is defined by four entities:
1. V, nonterminal alphabet, a set of symbols termed nonterminals(or metasymbols).
2. ¦², terminal alphabet.
3. P, a set of syntactic rules(or productions).
4. S¡ÊV, a particular nonterminal termed axiom.
A rule of Pis an ordered pair X¡ú¦Á, with X¡ÊV and ¦Á¡Ê(V ¡È¦²)*
    Type 2 comes from Chomsky¡¯s classification
    BNF : Backus Normal Form, or also Backus Naur Form



[alternative]
    X¡ú¦Á1, X¡ú¦Á2 ==>> X¡ú¦Á1|¦Á2
    ¦Á1,¦Á2 are the alternatives of X






Different styles for writing grammars
    Nonterminals                        Terminals                   Examples
    <sentence>, <list of sentences>     atom,   list_of_words       <if sentence>¡ú if   <cond> then   <sentence> else   <sentence>
    sentence,   list_of_sentences       'atom', 'list of words'     if_sentence  ¡ú 'if' cond   'then' sentence   'else' sentence
    SENTENCE,   LIST_OF_SENTENCES       atom,   list_of_words       F            ¡ú if   C      then   D          else   D


the metasymbols ¡®¡ú¡¯, ¡®|¡¯, ¡®¡È¡¯, ¡®¦Å¡¯ should not be used for terminal and nonterminal symbols
the terminal and nonterminal alphabets should be disjoint





In this book, we often adopt for simplicity the following style:
    ? lowercase Latin letters near the beginning of the alphabet{a, b, ...}for terminal characters;
    ? uppercase Latin letters{A,B,...,Z}for nonterminal symbols;
    ? lowercase Latin letters near the end of the alphabet{r, s, . . . , z}for strings over ¦²* (i.e. including only terminals);
    ? lowercase Greek letters {¦Á,¦Â,...} for strings over the combined alphabets (V ¡È¦²)*


rule
    LP -> left part
    RP -> right part




[derivation]
    a relation between two strings
    ¦Â derives ¦Ã for grammar G
        ¦Â =_[G]_=>> ¦Ã
    Rule A¡ú¦Á
         string ¦Á reduces to nonterminal A
[produce]
    a relation between nonterminals
    A produces B <==> exists a rule A ==>> ¦ÁB¦Â where A,B are nonterminals


language generated or defined by a grammar G starting from nonterminal A
    L(A, G, ¦²) ::= {s in ¦²*| A =[+;G]=>> s}
    L(G, ¦²) ::= L(S, G, ¦²) = L(start_symbol_of(G), G, ¦²)
    


[string form]
    a string ¦Á¡Ê(V ¡È¦²)* such that A =[*]=>> ¦Á, for any A in V
[sentential form]
    a string ¦Á¡Ê(V ¡È¦²)* such that S =[*]=>> ¦Á
a sentence <==> a sentential form devoid of nonterminals




[clean]
[reduced]
A grammar G is called clean(or reduced) under the following conditions:
    1. Every nonterminal A is reachable from the axiom, i.e., there exists derivation S =[*]=>> ¦ÁA¦Â.
    2. Every nonterminal A is well-defined, i.e., it generates a nonempty language, L(A,G) != {}.
[non-circular]
    ? G should not permit circular derivations A =[+]=>> A
    ??????????????????
    circularity may also come from the presence of an empty rule
        X ==>> XY
        Y ==>> ¦Å | ...


[Grammar Cleaning]
    undefined nonterminals (not-well-defined or empty)
    unreachable ones
    cancel rules containing non-terminals of either type
    
    
    init : well_defined_nonterminals = {}
        well_defined_nonterminals = {A| (A->u) in P and u in (this|¦²)*}
    
    
    NOTE: 
        redundant rules
        circularity
    

[recursive]
    for derivation or nonterminal
    A =[n]=>> xAy
    
    [immediately recursive] if n=1
    [left recursive] or [right recursive]
        If x(resp. y) is empty,the recursion is termed left(resp.right).
        


Let G be a grammar clean and devoid of circular derivations. 
    The language L(G) is infinite if, and only if, G has a recursive derivation.






[syntax tree]
    rooted/ordered and oriented tree
    label nonleaves by nonterminals and root by the axiom (the start symbol)
    label leaves by terminals
[frontier]
    The sequence of all leaves, read from left to right, is the frontier of the tree.
    
    A syntax tree has as root the axiom and as frontier a sentence.

[skeleton tree]
    drop the nonleaves' labels of syntax tree
[condensed skeleton tree]
    // for [structurally similar]
    shortening non-bifurcating paths (that is merging adjacent nodes who have one son)

[left/leftmost derivation] or [right/rightmost derivation]
    the order of children in syntax tree for derivation





Parenthesis Languages
    Many artificial languages include parenthesized or nested structures, made by matching pairs of opening/closing marks.
    Dyck language


The family CF of context-free languages is closed by union, concatenation, star, and cross.


Ambiguity
    for sentence or grammar
    
    semantic ambiguity
        a hot spring
        // spring denotes either a coil or a season
    syntactic (or structural) ambiguity
        half baked chicken
        // [[half baked] chicken] or [half [baked chicken]]
       
    A sentence x defined by grammar G is syntactically ambiguous, if it is generated with two different syntax trees. Then the grammar too is called ambiguous.
    

[inherently ambiguous]
    A language is called inherently ambiguous if every grammar of the language is ambiguous.


[structural adequacy]
    It is not enough for a grammar to generate the correct sentences; 
        it should also assign to each one a suitable structure, in agreement with the intended meaning. 
[equivalence] <==> [weak equivalence]
    // non-decidable property
    two grammars are equivalent if they define the same language,L(G)=L(G')
[strongly or structurally equivalent]
    for unambiguous grammars
    // decidable property
    Grammars G and G' are strongly or structurally equivalent, if L(G)=L(G') and in addition G and G' assign to each sentence two syntax trees, which may be considered structurally similar.
    
    [structurally similar]
        A plausible formulation is: two syntax trees are structurally similar 
            if the corresponding condensed skeleton trees are equal.



[normal form]
    Such forms are widely used in theoretical papers, to simplify statements and proofs of theorems. 
    Otherwise, in applied work, grammars in normal form are rarely used because they are larger and less readable.

[nullable]
    A nonterminal A is nullable if it can derive the empty string, i.e., A =+=>>¦Å.

    Null = {A in V | A is nullable}
[non-nullable normal form]
    = normal form without nullable nonterminals
    <==> no nonterminal other than the axiom is nullable


[copy rule] = [subcategorization rule]
    A¡úB, with B¡ÊV, a nonterminal symbol
    ==>> L(B, G) <= L(A, G)

Copy(A) ::= {B in V | A =[*]=>> B}
    A in Copy(A)
    Copy(A) <= V

copy rules are very convenient for reusing certain blocks of rules, corresponding to syntactic subcategories
    reference manuals of technical languages cannot do without copy rules.










[RRP] Repeated Right Part
[Invertible Grammar]
    grammar that does not include any rules with repeated right parts (RRP) is qualified as invertible

[Elimination of RRP's] [page60]
    many errors!!!

[Chomsky/Binary Normal Form]
    In Chomsky's normal form there are two types of rules:
        1. homogeneous binary:A¡úBC,where B,C ¡Ê V
        2. terminal with singleton right part:A¡úa,where a¡Ê¦²
        3. if the empty string is in the language, there is rule S¡ú¦Å but the axiom is not allowed in any right part.

    This form is used in mathematical essays, but rarely in practical work.


[Operator Grammar]
    A grammar is in operator form 
        if at least one terminal character is interposed between any two nonterminal symbols occurring in the right part of every rule.

    used in some efficient language parsing algorithms
[Operator Precedence grammar]
    The operator form of the rules, combined with a sort of precedence relation between terminal characters, yields the class of Operator Precedence grammars
    
    nice application in parallel parsing algorithms.



[not left-recursive normal form]
    characterized by the absence of left-recursive rules or derivations (l-recursions)
    it is indispensable for the top-down parsers

transform l-recursions to right recursions
    1) Converting immediate l-recursions to right recursions
        A -> A (x|y...) # to be removed
        A -> a|b...
        ==>> A -> (a|b...) (x|y...)*
        ==>> A -> (a|b...) A'
            where A' -> (x|y...)* == (x|y...) A' | (x|y...)
    
    2) Transformation of Non-immediate Left Recursions [page 65]
    assume
        grammar is homogeneous, non-nullable, with singleton terminal rules
    two nested loops
        // expand to immediate l-recursion
            The external loop employs nonterminal expansion to change non-immediate into immediate l-recursions, thus shortening the length of derivations. 
        // handle immediate l-recursions
            The internal loop converts immediate l-recursions to right recursions; in so doing it creates ancillary nonterminals.

transform right recursions to left ones
    a conversion sometimes applied to speed up the bottom-up parsing algorithms


[Greibach/Real-Time Normal Form]
    Real-Time Normal Form ::= every rule starts with a terminal
    Greibach Normal Form ::= every rule starts with a terminal, followed by zero or more nonterminals
    # exclude the empty string from the language
    
    why named 'real-time'
        at each step it reads and consumes a terminal character, thus the total number of steps equals the length of the string to be parsed.
        # but isnot this LL1 ??
    
    howto obtain the above forms
        assume
            grammar is non-nullable
        real-time form
            1) eliminate all left-recursions
            2) by elementary transformations, expand any nonterminal that occurs in first position in a right part, until a terminal prefix is produced.
        Greibach form:
            3) if in any position other than the first, a terminal occurs, replace it by an ancillary nonterminal and add the terminal rule that derives it.
            












[Linear Grammar]
    every rule has the form A¡úuBv where u, v ¡Ê ¦²*, B¡Ê(V ¡È{¦Å})
    at most one nonterminal is in the right part
    syntax tree has a linear structure made by a stem with leaves directly attached to it
    
    [left-/right- linearity]
        left-linear rule has the form A¡úBv where v ¡Ê ¦²*, B¡Ê(V ¡È{¦Å})
    [unilinear grammar] == [grammar of type 3]
        a grammar such that all the rules are right-linear or all the rules are left-linear
    [Strictly Unilinear Grammar]
        unilinear grammar that every rule contains at most one terminal character
        
        more: to impose that the only terminal rules are empty ones. 
            A¡úaB|¦Å  where a¡Ê¦², B¡ÊV
the identity of the languages defined by r.e. and by unilinear grammars





[Self-nested Derivation]
    A =[+]=>> u A v , where u != ¦Å and v != ¦Å
Any context-free grammar not producing self-nesting derivations generates a regular language.
    in some cases self-nesting derivations do not cause the language to be non-regular
        example: |¦²| == 1 , i.e. unary alphabet / one-letter alphabet


[Limits of Context-Free Languages]
    In order to understand what cannot be done with context-free grammars, we study the unavoidable repetitions which are found in longer sentences of such languages, much as we did for regular languages. We shall see that longer sentences necessarily contain two substrings, which can be repeated the same unbounded number of times by applying a self-nested derivation. This property will be exploited to prove that context-free grammars cannot generate certain languages where three or more parts are repeated the same number of times.
    L = {a^n b^n c^n | n¡Ý1} is not context-free.


the intersection of a context-free language with a regular one is always a context-free language.
# Complement | Intersection of CF is not CF [page78] Table 2.8 Closure properties of REG and CF

[Language of Copies or Replica]
    {uu | u in ¦²+} is not CF
[Language of palindrome]
    {u u^R | u in ¦²+} is CF
















[Alphabetic Transformation]
    Transliteration == alphabetic homomorphism
    An alphabetic transliteration is a function: h:¦²¡ú¦¤¡È{¦Å}
        where source ¦² and target ¦¤
    [transliteration] or [image]
        transliteration or image of character c¡Ê¦² is h(c)
    [erase]
        If h(c)=¦Å, character c is erased.
    [nonerasing]
        A transliteration is nonerasing if, for no source characterc,it is h(c)=¦Å.

    [erasing homomorphism]
        [projection]
            // a special case of erasing homomorphism
            it is a function that erases some source characters and leaves the others unchanged.
    [compositional]
        h(v.w)=h(v).h(w)

[Transliteration to Words]
    the image of a character is a string. (not limit by len(h(c)) <= 1)

[substitution]
    given a source alphabet ¦²={a,b,...}, a substitution h associates each character with a language h(a)=L(a), h(b)=L(b),...of target alphabet ¦¤. 
    Applying substitution h to a source string a1 a2...an, ai ¡Ê ¦² we obtain a set of strings:h(a1 a2...an)={y1 y2...yn | yi ¡Ê L(ai)}

relations between [substitution], [Transliteration to Words] and [Alphabetic Transformation]
    a transliteration to words is a substitution such that each image language contains one string only; 
        if the (image) string has length one or zero, the transliteration is alphabetic.
            where domain is source alphabet.


Closure Under Alphabetic Transformation
    The family CF/REG is closed under the operation of substitution with languages of the same family 
        (therefore also under the operation of transliteration).

Grammars with Regular Expressions
    [EBNF] == [Extended BNF] == [extended context-free grammar]
        allow the right part of a rule to be an r.e.
        other derived operators (cross, power, option) too may be permitted in the r.e.


