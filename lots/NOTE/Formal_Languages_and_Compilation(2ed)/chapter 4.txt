PDA ::= pushdown automaton

non- or deterministic finite automata <==> REG
non-deterministic pushdown automata <==> CF
deterministic pushdown automata <==> DET < CF

While the equivalence of two CF grammars or pushdown automata is undecidable, an algorithm exists for checking if two deterministic automata are equivalent.

If a language is accepted by a deterministic automaton, each sentence is recognized with exactly one computation and it is provable that the language is generated by a non-ambiguous grammar.
    // of course other grammars of L(M) may be ambiguous.
any inherently ambiguous context-free language is non-deterministic


# ELR ==>> 'E' stands for Extended in 'EBNF'






4.3.2.5 Some Simple Deterministic Subfamilies
    simple deterministic gram. <==> SLL(1) gram. // ??
    


4.6 Bottom-Up Deterministic Analysis
    [page176]
        The language family accepted by the parsers of type LR(1)(or ELR(1)) is exactly the family DET of deterministic context-free languages; more of that in Sect.4.8.
        # what !!!!!!!!
        # really????????
     

    [page211] Transformation of Non-LR(k) Grammars
        It is known that for every LR(k) grammar with k>1, there is an equivalent LR(1) grammar; see Property 4.73 on p.245. 
        
        Anyway, if the language is deterministic yet the given grammar is not of type LR(k) for any k¡Ý1, then we do not have any systematic transformations to turn it into a LR(k) one for some k¡Ý1. However, we may try to study the languages generated by the critical nonterminals, to identify the conflict sources, and finally to adjust such sub-grammars and make them of type LR(1).



4.7 Deterministic Top-Down Parsing
    [page211]
        ELL(1) -  Extended, Left to right, Leftmost, with length of look-ahead equal to one.
    [page244]
        Property 4.72 The family DET of deterministic context-free languages coincides with the family of the languages generated by LR(1) grammars.



4.11 Parallel Local Parsing
4.11.1 Floyd¡¯s Operator-Precedence Grammars and Parsers
    operator form
    # 'a' stands for any terminal, 'A' for any nonterminal.
    operator_form_rule -> () | a operator_form_rule | A | A a operator_form_rule
    or operator_form_rule -> () | operator_form_rule a | A | operator_form_rule a A

    def is_operator_form_rule(concat_symbols):
        *isNTs, = map(is_nonterminal, concat_symbols)
        *twoNTs, = map(__and__, isNTs[:-1], isNTs[1:])
        return not any(twoNTs)

