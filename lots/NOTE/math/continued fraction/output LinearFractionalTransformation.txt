
* radix base float number
* simple continued fraction
* Engel expansion # ascending continued fraction



* radix base float number
    = floor_part + float_part
    B = radix_base :: Integer
    floor_part :: Integer
    float_part :: [Digit B]
    0 <= toReal float_part <= 1

    float_part = [d0, d1, d2...] = 1/B*(d0 + 1/B*(d1 + ...))
    0 <= toReal float_part <= 1
    y = 1/B*(d0+x) = (x+d0)/B
    x = (B*y-d0)/1
    inv matrix[1, d0; 0, B] = matrix[B,-d0; 0, 1]
        matrix[1, d0; 0, B] * matrix[B,-d0; 0, 1]
            = matrix[B, 0; 0, B] ~=~ I
            # as LinearFractionalTransformation

* simple continued fraction
    = floor_part + float_part
    float_part :: [PositiveInteger]

    float_part = [d0, d1, d2...] = 1/(d0 + 1/(d1 + ...))
    0 <= toReal float_part <= 1
    y = 1/(d0 + x) = 1/(x+d0)
    x = 1/y - d0 = (-d0*y + 1)/y
    inv matrix[0,1;1,d0] = matrix[-d0,1;1,0]
        matrix[0,1;1,d0] * matrix[-d0,1;1,0]
            = matrix[1,0; 0,1] = I
* Engel expansion # ascending continued fraction
    = floor_part + float_part
    float_part :: Increasing[PositiveInteger]

    float_part = [d0, d1, d2...] = 1/d0*(1 + 1/d1*(1 + ...))
    0 <= toReal float_part <= 1
    y = 1/d0*(1+x) = (x+1)/d0
    x = (d0*y-1)/1
    inv matrix[1, 1; 0, d0] = matrix[d0,-1; 0, 1]
        matrix[1, 1; 0, d0] * matrix[d0,-1; 0, 1]
            = matrix[d0, 0; 0, d0] ~=~ I
            # as LinearFractionalTransformation


