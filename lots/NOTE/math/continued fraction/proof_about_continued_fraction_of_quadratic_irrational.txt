
proof_about_continued_fraction_of_quadratic_irrational

[x is quadratic_irrational]
    x = A1/A2 + A3/A4*sqrt(A5)
    x = (P + sqrt(N))/Q
    (Q*x-P)^2 = N
    Q^2*x^2 -2*P*Q*x +P^2-N = 0
    the? discriminant = (-2*P*Q)^2 - 4*Q^2*(P^2-N) = 4*N*Q^2
        # so what is the D???
    but N,Q is not unique!
    x = (P + sqrt(N))/Q
        = (P*KK + sqrt(N*KK^2))/(Q*KK)
    ???[Q `divs` N-P^2] ==>> [unqiue Q,N]???
        No.
        [(P*KK)^2 == N*KK^2 mod (Q*KK)]
        [KK mod Q == 0]
        let KK = k*Q
        discriminant = 4*(N*KK^2)*(Q*KK)^2 = 4*N*Q^2*KK^4
            = 4*N*Q^2*(k*Q)^4
            = 4*N*Q^6*k^4

---------------
[sqrt(A5) is irrational][A3!=0][A2!=0][A4!=0]
x = A1/A2 + A3/A4*sqrt(A5)
    = (A1*A4 + A2*A3*sqrt(A5))/ (A2*A4)
    = (s*A1*A4 + s*A2*A3*sqrt(A5))/ (s*A2*A4)
    = (s*A1*A4 + sqrt((A2*A3)^2*A5))/ (s*A2*A4)
    = (P + sqrt(N))/Q
    where
        s = sign (A2*A3)
        P = s*A1*A4
        N = (A2*A3)^2*A5
        Q = s*A2*A4
[sqrt(A5) is irrational][A3!=0] <==> [sqrt(N) is irrational]
---------------
???[Q,N :: Integer] ==>> [?P. [Q `divs` N-P^2]]???
    No!
    [Q `divs` N-P^2]:
        [P^2 == N mod Q]
        [N is quadratic_residue_modulo Q]
    [N is quadratic_nonresidue_modulo Q] ==>> [not exist such P]

    sqrt(N)/Q > 1
    find N s.t. [N > Q^2][N i quadratic_nonresidue_modulo Q]
    Q=3, 9<N = 2+3*i = 11
???[Q,N :: Integer] ==>> [?PP,KK. [KK*Q `divs` KK^2*N-PP^2]]???
    Yes!
    [KK^2*N == PP^2 mod (KK*Q)]
    [KK == Q][PP mod Q == 0]
???[Q,N,P :: Integer] ==>> [?PP,KK. [KK*Q `divs` KK^2*N-PP^2][(P+sqrt(N))/Q == (PP+sqrt(N*KK^2))/(Q*KK)]]???
    Yes!
    e.g. [KK == Q][PP == P*Q]
    N*KK^2 == (KK*P)^2 mod (KK*Q)
    (N-P^2)*KK^2 == k*KK*Q
    (N-P^2)*KK == k*Q
    KK = lcm(N-P^2, Q)/(N-P^2) = Q/gcd(N-P^2,Q)

    see below for P/N/Q;d0;B,D,C;dk;B',D',C'
        let N = N
            Q = Q
            P = P
            d0 = 0
            dk = 0
        ==>>
        B = d0*Q^2-P*Q
            = -P*Q
        C = N - (P-d0*Q)^2
            = N-P^2
        D = N*Q^2
        ==>>
        B' = _B/C = dk*C-B
            = -B = P*Q
        C' = _C/C = (D-B^2)//C + (2*B - dk*C)*dk
            = (D-B^2)//C = (N*Q^2 - (P*Q)^2)//(N-P^2) = Q^2
        D' = _D/C^2 = D = N*Q^2
        ==>>
        PP = B'
        KK^2*N = D'
        KK*Q = C'
        ==>>
        KK = Q
        PP = P*Q
    (P+sqrt(N))/Q
        = (PP+sqrt(N*KK^2))/(Q*KK)
        = (PP+sqrt(N*Q^2))/(Q^2)
        = (P*Q+sqrt(N*Q^2))/(Q^2)
        = (P+sqrt(N))/Q
---------------
[sqrt(N) is irrational]
x = d0 + 1/x'
    [d0 is aribitrary Integer]
x' = 1/(x-d0)
    = 1/((P+sqrt(N))/Q - d0)
    = Q/((P+sqrt(N)) - d0*Q)
    = Q/(sqrt(N) + P-d0*Q)
    = Q*(sqrt(N) + d0*Q-P)/(N - (P-d0*Q)^2)
    = (d0*Q^2-P*Q + sqrt(N*Q^2))/(N - (P-d0*Q)^2)
    = (B+sqrt(D))/C
    where
        B = d0*Q^2-P*Q
        C = N - (P-d0*Q)^2
        D = N*Q^2
        D - B^2
            = N*Q^2 - (d0*Q^2-P*Q)^2
            = Q^2*(N - (d0*Q-P)^2)
            = Q^2*C
        [C `divs` D - B^2]
[sqrt(N) is irrational] <==> [sqrt(D) is irrational]
[C `divs` D - B^2]


---------------
[sqrt(D) is irrational]
[C `divs` D - B^2]
x' = dk + 1/x''
    [dk is aribitrary Integer]
x'' = 1/(x' - dk)
    = (_B+sqrt(_D))/_C
    = (B'+sqrt(D'))/C'
    = (B'+sqrt(D))/C'
    where
        # P/N/Q/d0/B/D/C := B/D/C/dk/_B/_D/_C
        _B = dk*C^2-B*C
        _C = D - (B-dk*C)^2
        _D = D*C^2
        _D-_B^2 = C^2*_C
        [_C `divs` _D - _B^2]

        ???[C `div` _C]???
            _C = D - (B-dk*C)^2 = (D-B^2) - (dk^2*C^2 - 2*dk*B*C)
                = C * ((D-B^2)//C + (2*B - dk*C)*dk)
        [C `div` _C]

        B' = _B/C = dk*C-B
        C' = _C/C = (D-B^2)//C + (2*B - dk*C)*dk
        D' = _D/C^2 = D
        ???[C' `divs` D' - B'^2]???
            D' - B'^2 = (_D-_B^2)/C^2 = _C = C*C'
        [C' `divs` D' - B'^2][D' - B'^2 == C*C']
[C' `divs` D' - B'^2][D' - B'^2 == C*C']
[D' == D]

---------------convergent
convergent :: Real -> Integer -> Rational
convergent x k = convergent[k] x = regular_continued_fraction2rational (regular_continued_fraction_digits x)[:1+k]
is_convergent :: Rational -> Real -> Bool
is_convergent r x = r in map (convergent x) [0..]

[|x-p/q| <= 1/(2*q^2)]:
    [is_convergent (p/q) x]

    https://ocw.mit.edu/courses/mathematics/18-781-theory-of-numbers-spring-2012/lecture-notes/MIT18_781S12_lec20.pdf
        "Lecture 20 - Periodic Continued Fractions, Quadratic Irrationalities.pdf"

---------------complete_quotients
maybe_complete_quotient :: Real -> Integer -> Maybe Real
complete_quotient :: Irrational -> Integer -> Maybe Real

maybe_complete_quotient x k = complete_quotient[k] x =
    if length digits == 0 then Nothing
    else Just regular_continued_fraction2rational digits
    where digits = (regular_continued_fraction_digits x)[k:]
complete_quotient x k = case maybe_complete_quotient x k of (Just r) -> r

[maybe_complete_quotient x 0 == Just x]

---------------bound B[i],C[i]
[x is irrational]

let x[i] = complete_quotient x i = (B[i] + sqrt(D))/C[i]
[C[i] `divs` D-B[i]^2]
    # how to make B[0], C[0]?
    #   mul KK; # see above

let y[i] = (B[i] - sqrt(D))/C[i] = conjugate x[i]
let z[i] = p[i]/q[i] = convergent x i
    p[0] = floor x
    q[0] = 1
    [i>=0]:
        [q[i] >= 1]



[LIMIT z[i] {i->+oo} == LIMIT p[i]/q[i] {i->+oo} == x]
[x == x[0] == (x[n]*p[n-1]+p[n-2])/(x[n]*q[n-1]+q[n-2])]
[i>=1]:
    [x is irrational]!
    [x[i] > 1]
[conjugate x == conjugate x[0] == (conjugate x[n]*p[n-1]+p[n-2])/(conjugate x[n]*q[n-1]+q[n-2])]
[y == y[0] == (y[n]*p[n-1]+p[n-2])/(y[n]*q[n-1]+q[n-2])]
[y[n] == -q[n-2]/q[n-1] * (y[0]-z[n-2])/(y[0]-z[n-1])]
[LIMIT y[n] * q[n-1]/q[n-2] {n->+oo} == LIMIT -(y[0]-z[n-2])/(y[0]-z[n-1]) {n->+oo} == -(y-z)/(y-z) == -1]
[q[i] >= 1]!
[?N. [n>=N] ==>> [y[n] < 0]]
[[i>=1] ==>> [x[i] > 1]]!
[?N. [n>=N] ==>> [y[n] < 0 < 1 < x[n]]]
[N::Integer][[n>=N] ==>> [y[n] < 0 < 1 < x[n]]]:
    [n>=N]:
        [0 < x[n] - y[n] == 2*sqrt(D)/C[n]]
        [C[n] > 0]
        [C[n+1] > 0]
        [C' `divs` D' - B'^2][D' - B'^2 == C*C']!
        [C[n] <= C[n]*C[n+1] == D-B[n+1]^2 <= D]
        [0 < D-B[n+1]^2]
        [abs(B[n+1]) < sqrt(D)]
        [0 <= C[n] <= D]
[?N. [n>=N] ==>> [abs(B[n+1]) < sqrt(D)][0 <= C[n] <= D]]
    # finitely many possibilities for (B[n], C[i])


---------------
-- ??[sqrt(D) is irrational]??
[p,q,D :: PInt][p>0][q>0][z[i] == p[i]/q[i] = convergent sqrt(D) i]:
    ???[p^2 - D*q^2 == 1] ==>> [?i. [p/q==z[i]][(p,q) == (p[i],q[i])]]???
        Yes!
    ???[p^2 - D*q^2 == 1] <==> [?i. [p/q==z[i]][(p,q) == (p[i],q[i])]]???
        No!

    * [p^2 - D*q^2 == 1]:
        [p^2 - D*q^2 == 1 > 0]
        [p > q*sqrt(D)]

        [(p/q)^2 - D == (1/q)^2]
        [abs(p/q-sqrt(D))
            == 1/q^2/abs(p/q+sqrt(D))
            == 1/q/(p+q*sqrt(D))
            < 1/q/(2*q*sqrt(D))
            <= 1/(2*q^2)
        ]

        [|x-p/q| <= 1/(2*q^2)] ==>> [is_convergent (p/q) x]!

    * [i::Integer][p/q==z[i]][(p,q) == (p[i],q[i])]:
        [z[0] == floor_sqrt(D)]
        D = 11
        z[0] = p[0]/q[0] = 3/1
        p[0]^2 - 11*q[0]^2 = 3^2 - 11*1^2 = -2
        _L


----------------------TODO:

[x is reduced_quadratic_surd] =[def]= [x is quadratic_irrational][x > 1][-1 < conjugate x < 0]
???[x is periodic_continued_fraction] <==> [x is quadratic_irrational]???
???[x is purely_periodic_continued_fraction] <==> [x is reduced_quadratic_surd]???
???[digits::nonempty[PInt]][x == regular_continued_fraction2rational (repeat digits)] ==>> [-1/conjugate x == regular_continued_fraction2rational (repeat $ reverse digits)]???
???[x is rational][x > 0][sqrt(x) is irrational]
    ==>> [?d0:PInt. ?ls:[PInt].
            [is_palindromic ls] # i.e. reverse ls == ls
            [continued_fraction_digits sqrt(x)
                == (if x < 1 then [0] else [])
                ++ [d0] ++ ls ++ [2*d0]
            ]
        ]???

============================ TODO end


see:
    "compute_about_continued_fraction_of_quadratic_irrational.txt"
    [sqrt(N) is irrational][x = (P+sqrt(N))/Q
    ][x is reduced_quadratic_surd]:
        [Q>0][P>0][Q+P > floor_sqrt(N) >= P][floor_sqrt(N) >= Q-P]

# rename P,N,Q to B,D,C since requires "divs"!!!
[[sqrt(D) is irrational][x = (B+sqrt(D))/C][x is reduced_quadratic_surd
][C `divs` D - B^2]]:
    [C>0][B>0][C+B > floor_sqrt(D) >= B][floor_sqrt(D) >= C-B]!
    [C `divs` D - B^2]!
    [D' == D]
    [0 < C <= 2*R]:
        [C-B <= R < C+B]
        [C-R <= B][R-C < B]
        [max(C-R, R-C+1) <= B <= R]
    [0 < B <= R]:
        [C-B <= R < C+B]
        [R-B < C <= R+B]
        [total C = 2*B][C <= 2*R]
    [total (B,C) = SUM total C {B<-1..R} = SUM 2*B {B<-1..R} = R*(1+R)]

    draw on x=B-y=C-plane
    let R = floor_sqrt(D) # the "*" point on C-axis and B-axis
    all possibles (B,C) are in the triangle area:
        total (B,C) == R*(R+1)
        len(periodic_digits)
            <= total (B,C)
            <= R*(R+1)
        len(periodic_digits) <= floor_sqrt(D)*(floor_sqrt(D)+1)

    C
    ^
    |
    |
    |   C-B=R/
    |       /
    |      /
    |     /|
    |    / | B=R
    |   /  |
    |  /   |
    | /    |
    |/     |
    * HERE |
    |\     |
    | \    |
    |  \   |
    |   \  |
    |    \ |
    |     \|
    -------*-------------------------------------> B
    |       \
    |        \
    |         \C+B == R



    #I guess: [total (B,C) <= 2/3*D]
    2/3
    OOX
    OOXOOXOOXOOXOOXOOX
    3/5
    OOXOX
    OOXOXOOXOXOOXOXOOXOX

    #fix y=C, x=B
    [y>0][x>0]
    f(i) =[def]= (D-(x+i)^2)
    Z z =[def]= [z%y==0]
    # let X be not (?%y==0), O ~ not X
    data Ok = X | O
    is_ok :: Integer -> Ok -> Bool
    is_ok i xo = [xo == X] or [Z f(i)]
    is_pattern_ok_at :: Integer -> [Ok] -> Bool
    is_pattern_ok_at x pattern = is_pattern_ok_ex $ zip [x..] pattern where
        is_pattern_ok_ex (i, xo) = is_ok i xo
    allow :: [Ok] -> Bool
    allow pattern = is_pattern_ok_at x pattern

    [allow OOO]:
        [Z f(0)][Z f(1)][Z f(2)]
        [Z $ f(0)-f(1)][Z $ f(0)-f(2)]
        [Z $ 2*x+1][Z $ 4*x+4]
        [Z $ 4*x+4 - 2*(2*x+1)]
        [Z $ 2]
        [2%y==0]
        [1 <= y <= 2]

    mk_OXsOXsO :: Integer -> Integer -> [Ok]
    mk_OXsOXsO k n = assert (0<k<n) $ O:[X]*(k-1) ++ O:[X]*(n-k-1) ++ [O]
            # O XXXXXX...XXXXXX O XXXXXX...XXXXXX O
            # 0 123..........   k k+1..........   n
    mk_OXsO :: Integer -> [Ok]
    mk_OXsO k = assert (0<k) $ O:[X]*(k-1) ++ [O]
            # O XXXXXX...XXXXXX O
            # 0 123..........   k
    [0<k<n][allow $ mk_OXsOXsO k n]:
        [Z f(0)][Z f(k)][Z f(n)]
        [Z $ f(0)-f(k)][Z $ f(0)-f(n)]
        [Z $ 2*k*x+k^2][Z $ 2*n*x+n^2]
        let g = gcd(k,n)
        [Z $ (2*n*x+n^2)*k/g - (2*k*x+k^2)*n/g]
        [Z $ n^2*k/g - k^2*n/g]
        [Z $ n*k/g *(n-k)]
        [n*k/g *(n-k) %y==0]
        [1 <= y <= n*k/g *(n-k)]
    y_upper_bound k n =[def]= assert (0<k<n) $ n*k/gcd(n,k) * (n-k)
    [[0<k<n][allow $ mk_OXsOXsO k n] ==>> [y_upper_bound k n % y==0][1 <= y <= y_upper_bound k n]]

    [allow OO]:
        [(2*x+1)%y==0]
        [y%2 != 0]
    [k>0][allow $ mk_OXsO k]:
        [(2*k*x+k^2)%y==0]
        [k%2 != 0]:
            [y%2 != 0]
    [[k>0][allow $ mk_OXsO k][k%2 != 0] ==>> [y%2 != 0]]
    [allow OOXOO]:
        [allow OO][allow OOXOX][allow OOXXO]
        [y%2!=0][gcd(y_upper_bound 1 3, y_upper_bound 1 4)%y==0]
        [y%2!=0][gcd(6, 12)%y==0]
        [y%2!=0][6%y==0]
        [y==3]

    at_most_2O_per_len :: Integer -> Bool
    at_most_2O_per_len len = assert (len>=0) $
        [not [?n. ?k. [0<k<n<len][allow $ mk_OXsOXsO k n]]]
        # for (? < 2/len * D)
    [2<=N]:
        [at_most_2O_per_len (N+1)] <<==:
            <==> [not [?n. ?k. [0<k<n<N+1][allow $ mk_OXsOXsO k n]]]
            <==> [@n. @k. [[0<k<n<N+1] ==>> [not . allow $ mk_OXsOXsO k n]]]
            <<== [@n. @k. [[0<k<n<N+1] ==>> [not [1 <= y <= n*k/g *(n-k)]]]]
            <<== [@n. @k. [[0<k<n<N+1] ==>> [y > n*k/g *(n-k)]]]
            <<== [@n. @k. [[0<k<n<N+1] ==>> [y(k) > n/g*(k*n-k^2)]]]
            <<== [@n. @k. [[0<k<n<N+1] ==>>
                                [[n==2][y>2]
                                +[n==2*m>2][k=m-1][g=1][y > n/g*(n^2/4-1)]
                                +[n==2*m+1>2][k=m][g=1][y > n/g*(n^2-1)/4]
                                ]
                        ]
                ]
            <<== [@n. @k. [[0<k<n<N+1] ==>>
                                [[n==2][y>2] + [n>2][y > n*((n^2-1)//4)]]
                        ]
                ]
            <<== [[N==2][y>2] + [N>2][y > N*((N^2-1)//4)]]
    [N==2][y>2]:
        [at_most_2O_per_len (N+1)]
    [N>2][y > N*((N^2-1)//4)]:
        [at_most_2O_per_len (N+1)]
    # that is: for fixed N, [?j. [[D > j] ==>> [total (B,C) < 2/(N+1)*D]]]
    #   how to eval a lower bound j(N)??


    [[0 < C <= 2*R] ==>> [max(C-R, R-C+1) <= B <= R]]!
    total_x_at_y y =[def]= assert (0<y<=2*R) $
                            R+1 - max(y-R, R-y+1)
    [max(C-R, R-C+1) == 1]:
        [[C==R] + [C==R+1]]
    [total_x_at_y y == R]:
        [max(y-R, R-y+1) == 1]
        [[y==R] + [y==R+1]]
        # 1..R   R+1..2*R
    [0<y<=R]:
        total_x_at_y y = y
    [0 < y <= 2*R]:
        [total_x_at_y y <= total_x_at_y R == R]
    M(N) =[def]= N*((N^2-1)//4)
        # N = 3 4  5  6  7  ...
        # M = 6 12 30 48 84 ...
        #
    [M(n+1)-M(n)
        = [n=2*m]{(2*m+1)*(m+1)*m - 2*m*(m^2-1)}
        + [n=2*m+1]{2*(m+1)*((m+1)^2-1) - (2*m+1)*(m+1)*m}
        # [n=2*m]m*{(2*m^2+3*m+1 - 2*m^2+2)}
        = [n=2*m]{(2*m+1) - 2*(m-1)}*(m+1)*m
        + [n=2*m+1]{2*(m^2+2*m) - (2*m+1)*m}*(m+1)
        = [n=2*m]{(2*m+1) - (2*m-2)}*(m+1)*m
        + [n=2*m+1]{2*(m+2) - (2*m+1)}*(m+1)*m
        = [n=2*m]3*(m+1)*m
        + [n=2*m+1]3*(m+1)*m
        = [m=n//2]3*(m+1)*m
    ]
    [M(n+1)+M(n)
        = [n=2*m]{(2*m+1)*(m+1)*m + 2*m*(m^2-1)}
        + [n=2*m+1]{2*(m+1)*((m+1)^2-1) + (2*m+1)*(m+1)*m}
        = [n=2*m]{(2*m+1) + 2*(m-1)}*(m+1)*m
        + [n=2*m+1]{2*(m^2+2*m) + (2*m+1)*m}*(m+1)
        = [n=2*m](4*m-1)*(m+1)*m
        + [n=2*m+1](4*m+5)*(m+1)*m
    ]

    [N>2][R == M(N)+1>=M(3)+1==7]:
        [total (B,C)
            <= SUM ... {total_x_at_y y=1..6}    # n<=2
            + SUM SUM ... {total_x_at_y y=M(n)+1..M(n+1)} {n=3..N-1}
            + SUM ... {total_x_at_y y=R}        # n==N
        ]
        [(total (B,C))/2
            <= SUM ... {total_x_at_y y=1..6 | 1<=y<=R (or R+1<=y<=2*R)}    # n<=2
            + SUM SUM ... {total_x_at_y y=M(n)+1..M(n+1) | 1<=y<=R (or R+1<=y<=2*R)} {n=3..N-1}
            + SUM ... {total_x_at_y y=R | 1<=y<=R (or R+1<=y<=2*R)}        # n==N
        ]

        # bottom
        [SUM ... {total_x_at_y y=1..6 | 1<=y<=R (or R+1<=y<=2*R)}
            = SUM ... {y=1..6 (or 2*R-5<=y<=2*R)}
            let countO pattern = count O pattern
                max_countO patterns = max $ map countO patterns
                max_countO_filter = max_countO . filter allow
            = [y=1 (or 2*R)]max_countO_filter ["O"]
            + [y=2 (or 2*R-1)]max_countO_filter ["OO", "OX"]
                # [[allow OO] ==>> [y%2 != 0]]!
            + [y=3 (or 2*R-2)]max_countO_filter ["OOX", "OXO"]
                # [[allow OOO] ==>> [y <= 2]]!
            + [y=4 (or 2*R-3)]max_countO_filter ["OOXO", "OXOX", "OXXO"]
                # [[k>0][allow $ mk_OXsO k][k%2 != 0] ==>> [y%2 != 0]]!
                # [[0<k<n][allow $ mk_OXsOXsO k n] ==>> [1 <= y <= n*k/g *(n-k)]]!
                # [allow $ mk_OXsOXsO 1 3] ==>> [y<=6] # OOXO
                # [allow $ mk_OXsOXsO 2 3] ==>> [y<=6] # OXOO
            + [y=5 (or 2*R-4)]max_countO_filter ???????
            + [y=6 (or 2*R-5)]max_countO_filter ???????
            = 1/2*
                # [R >= 7] ==>> [2*R-5 >= 9]
                ([y=1] + [y=2*R]    # O
                +[y=2]1             # OX # [y%2==0] ==>> [not $ allow OO]
                +[y=2*R-1]2         # OO
                +[y=3]2             # OXO # not allow OOO
                +[y=2*R-2]2         # OXO # not allow OO
                +[y=4]2             # OXOX # not allow O??O, OO, OOO
                +[y=2*R-3]2         # OOXX # not allow OOO, OO?O
                +[y=5]2             # OXOXX # not allow OOO, OO?O?, OO??O, O?O?O
                +[y=2*R-4]2         # OXOXX # not allow OO, O?O?O
                +[y=6]3             # OXOXXO # not OO, O?O?O
                +[y=2*R-5]          # OOXXXX # not OOO, OO?O, OO??O, OO???O, O?O?O
                )
        ]
        # top: R
        [SUM ... {total_x_at_y y=R | 1<=y<=R (or R+1<=y<=2*R)}
            = SUM ... {y=R}
            <= SUM ceil((total_x_at_y y)/(N+1))*2 {y=R}
            <= ceil(R/(N+1))*2
            <= 2*((R+N)//(N+1))
            <= 2*(R+N)/(N+1)
        ]
        # middle
        [3<=n<N]:
            [SUM ... {total_x_at_y y=M(n)..M(n+1)-1 | 1<=y<=R (or R+1<=y<=2*R)}
                = SUM ... {y=M(n)..M(n+1)-1}
                = SUM ceil((total_x_at_y y)/(n+1))*2 {y=M(n)..M(n+1)-1}
                = SUM ceil(y/(n+1))*2 {y=M(n)..M(n+1)-1}
                = SUM 2*((y+n)//(n+1)) {y=M(n)..M(n+1)-1}
                <= SUM 2*(y+n)/(n+1) {y=M(n)..M(n+1)-1}
                = 2/(n+1) * SUM (y+n) {y=M(n)..M(n+1)-1}
                = 2/(n+1) * (n*(M(n+1)-M(n)) + (M(n+1)-M(n))*(M(n+1)+M(n)-1)/2)
                = 1/(n+1)*(M(n+1)-M(n)) * (2*n + (M(n+1)+M(n)-1))
                = [n=2*m]1/(2*m+1) * 3*(m+1)*m * (4*m-1 + (4*m-1)*(m+1)*m)
                + [n=2*m+1]1/(2*m+2) * 3*(m+1)*m * (4*m+2-1 + (4*m+5)*(m+1)*m)
                = [n=2*m]1/(2*m+1) * 3*(m+1)*m * (4*m-1)*(1 + (m+1)*m)
                + [n=2*m+1]1/2 * 3*m * (4*m+1 + (4*m+5)*(m+1)*m)
                = [n=2*m]3/(2*m+1) *(m+1)*m*(4*m-1)*(m^2+m+1)
                + [n=2*m+1]3/2 *m * (4*m+1 + (4*m^2+9*m+5)*m)
                = [n=2*m]3/(2*m+1) *(m+1)*m*(4*m-1)*(m^2+m+1)
                    # (2*m+1)*(A*m+B) == C*m^2+C*m+D
                    # C==2*A==2*B+A, D=B
                    # 2*B=A=C/2
                    # (A,B) = (2,1)
                    # (2*m+1)*(2*m+1) = 4*m^2 + 4*m + 1
                + [n=2*m+1]3/2 *m * (4*m^3+9*m^2+9*m+1)
                    # (4 ... 1) ==>> +/- 1 1/2 1/4 ==>> (-1, -1/2, -1/4)
                    # -1 ==>> -3
                    # -1/2 ==>> -4/8 + 9/4 -9/2 + 1 = ?+1/4 =/= 0
                    # -1/4 ==>> -1/16 + 9/16 - 9/4 + 1 = ?+1/4 =/= 0
                    # cannot factor (4*m^3+9*m^2+9*m+1)
                = [n=2*m]3/(2*m+1) *(4*m^2+4*m)/4*(4*m-1)*(m^2+m+1)
                + [n=2*m+1]3/2 *m*(m^3+3*(m+1)^3 -2)

                # see below
                <= [n=2*m]3*m*(16*m^3 + 20*m^2 + 14*m + 1)/8
                + [n=2*m+1]3/2 *m*(4*m^3+9*m^2+9*m+1)
            ]
            ################### for above
            [[n=2*m]3/(2*m+1) *(4*m^2+4*m)/4*(4*m-1)*(m^2+m+1)
                = 3*(32*m**4 + 40*m**3 + 28*m**2 + 2*m - 9)/16
                + 27/16/(2*m+1)
                # [n>=3] ==>> [m>=2][2*m+1>=5]
                <= 3*(32*m**4 + 40*m**3 + 28*m**2 + 2*m - 9)/16
                + (27/16)/5
                = 3/40*(80*m**4 + 100*m**3 + 70*m**2 + 5*m - 18)
                < 3/40*(80*m**4 + 100*m**3 + 70*m**2 + 5*m)
                = 3*m*(16*m**3 + 20*m**2 + 14*m + 1)/8
                = 3*m*(16*m^3 + 20*m^2 + 14*m + 1)/8
            ]

        [SUM SUM ... {total_x_at_y y=M(n)..M(n+1)-1 | 1<=y<=R (or R+1<=y<=2*R)} {n=3..N-1}
            <= SUM [n=2*m]3*m*(16*m^3 + 20*m^2 + 14*m + 1)/8 {n=4,6..(N-1)//2*2}
            +  SUM [n=2*m+1]3/2 *m*(m^3+3*(m+1)^3 -2) {n=3,5..N//2*2-1}

            = SUM 3/8*m*(16*m^3 + 20*m^2 + 14*m + 1) {m=2,3..(N-1)//2}
            +  SUM 3/2 *m*(4*m^3+9*m^2+9*m+1) {m=1,2..N//2-1}
            # [N=2*NN]:
            #   [(N-1)//2 == NN-1][N//2-1 == NN-1]
            # [N=2*NN+1]:
            #   [(N-1)//2 == NN][N//2-1 == NN-1]

            = [N=2*NN]{3/8 SUM ... {m=2..NN-1} + 3/2 SUM ... {m=1..NN-1}}
            + [N=2*NN+1]{3/8 SUM ... {m=2..NN} + 3/2 SUM ... {m=1..NN-1}}
            = [NN=N//2]3/8 SUM ... {m=2..NN} + 3/2 SUM ... {m=1..NN-1}
            - [N=2*NN] 3/8 SUM ... {m=NN}

            #### wolframalpha.com
            # SUM m*(16*m^3 + 20*m^2 + 14*m + 1) {m=2,3..j}
            #   # Sum[m (16 m^3 + 20 m^2 + 14 m + 1), {m, 2, j}]
            #   = sum m*(16*m^3 + 20*m^2 + 14*m + 1), m=2 to j
            #   = 1/10 (j - 1) (32 j^4 + 162 j^3 + 362 j^2 + 487 j + 510)
            #   = (16 j^5)/5 + 13 j^4 + 20 j^3 + (25 j^2)/2 + (23 j)/10 - 51
            #   = Sum1
            #
            # SUM m*(4*m^3+9*m^2+9*m+1) {m=1,2..j}
            #   = sum m*(4*m^3+9*m^2+9*m+1), m=1 to j
            #   = 1/60 j (j + 1) (48 j^3 + 207 j^2 + 323 j + 112)
            #   = 1/60 j (48 j^4 + 255 j^3 + 530 j^2 + 435 j + 112)
            # j:=j-1
            # Sum[m (4 m^3 + 9 m^2 + 9 m + 1), {m, 1, -1 + j}]
            #   = sum_(m=1)^(j - 1) m (4 m^3 + 9 m^2 + 9 m + 1)
            #   = 1/60 (j - 1) j (48 j^3 + 63 j^2 + 53 j - 52)
            #   = Sum2

            = [NN=N//2]3/8 SUM ... {m=2..NN} + 3/2 SUM ... {m=1..NN-1}
            - [N=2*NN] 3/8 SUM ... {m=NN}
            = [j=N//2]3/8 (Sum1) + 3/2 (Sum2)
            - [N=2*NN] 3/8 SUM ... {m=NN}
            = [j=N//2] {1/80 (j - 1) (192 j^4 + 612 j^3 + 1192 j^2 + 1357 j + 1530)}
            - [N=2*NN][m=NN] 3/8 *m*(16*m^3 + 20*m^2 + 14*m + 1)

            = [N=2*NN] {1/80 (192 NN^5 - 60 NN^4 - 20 NN^3 - 255 NN^2 + 143 NN - 1530)}
            + [N=2*NN+1] {1/80 (NN - 1) (192 NN^4 + 612 NN^3 + 1192 NN^2 + 1357 NN + 1530)}

        ]


