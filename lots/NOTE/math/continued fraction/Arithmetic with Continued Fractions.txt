Arithmetic with Continued Fractions
    binary_op :: ContinuedFraction -> ContinuedFraction -> ContinuedFraction
        let ContinuedFraction = Either Rational Irrational
        avoid (Irrational -> Irrational -> Rational)
        i.e. avoid infinite -> infinite -> finite
            the last pass 1 value should be +oo, which can not be output

http://contfrac.sourceforge.net/
    http://www.inwap.com/pdp10/hbaker/hakmem/cf.html
        good!
        download as "HAKMEM -- CONTINUED FRACTIONS -- DRAFT, NOT YET PROOFED.htm"
http://www.lix.polytechnique.fr/Labo/Ilan.Vardi/publications.html
    http://www.lix.polytechnique.fr/Labo/Ilan.Vardi/pseudo_code.ps
    http://www.lix.polytechnique.fr/Labo/Ilan.Vardi/pseudo_code.tex
    "efficient implementation of Gosper's continued fraction artithmetic"
https://math.stackexchange.com/questions/164606/are-there-simple-algebraic-operations-for-continued-fractions
https://rosettacode.org/wiki/Continued_fraction/Arithmetic
    http://perl.plover.com/yak/cftalk/
        # it seems broken now

Gosper's_algorithm

N<a,b,c,d> x y = a*x*y + b*x + c*y + d
F<a,b,c,d; e,f,g,h> x y = N<a,b,c,d> x y / N<e,f,g,h> x y

(+) = F<0,1,1,0;    0,0,0,1>
(-) = F<0,1,-1,0;   0,0,0,1>
(*) = F<1,0,0,0;    0,0,0,1>
(/) = F<0,1,0,0;    0,0,1,0>

constant c = F<0,0,0,c; 0,0,0,1>



N<a,b,c,d> x y = N<a,c,b,d> y x
    ^^^              ^^^
F<a,b,c,d; e,f,g,h> x y = F<a,c,b,d; e,g,f,h> y x
    ^^^      ^^^              ^^^      ^^^

data Interval = Inside Number Number | Outside Number Number
    # {x| min <= x <= max}
    # {x| x <= min or max <= x}
    # (Inside narrowness) < (Inside wideness) < (Outside wideness) < (Outside narrowness)

[1 < xm <= x <= xM][1 < ym <= y <= yM]:
    [nn x y <- nn_interval_of nn]
    [min ff_bounds <= ff x y <= max ff_bounds]
    where
        nn = N<a,b,c,d>
        D<x> (nn x y) = a*y + b # sign unchanges if fix y
        D<y> (nn x y) = a*x + c
        nn_bounds_of nn = {nn x y | x <- [xm, xM], y <- [ym, yM]}
        nn_interval_of nn = Inside (min $ nn_bounds_of nn) (max $ nn_bounds_of nn)

        ff = F<a,b,c,d>
        let nnN,nnD from ff x y = nnN x y / nnD x y
        ff_eval_L :: Number -> Number -> (Number|+oo|-oo)
        ff_eval_R :: Number -> Number -> (Number|+oo|-oo)
        ff_eval_L x y = if nnD x y == 0 then LIMIT ff w y {w->x^+} else ff x y
        ff_eval_R x y = if nnD x y == 0 then LIMIT ff w y {w->x^-} else ff x y

        # fix y
        ff_interval__fix_y ff y = ff_interval
          where
            D<x> (ff x y) = D<x> ((A*x+B)/(C*x+D)) = (E or -G/(C*x+D)^2)
                # sign unchanges if fix y
            ff_bounds = {ff_eval_L xm y, ff_eval_R xM y}
            xMID = (xm+xM)/2
            ff_interval = if xm == xM || ff_eval_L xMID y <- inside
                            then inside else outside
            inside = Inside (min ff_bounds) (max ff_bounds)
            outside = Outside (min ff_bounds) (max ff_bounds)
        ff_interval__fix_x ff x = ...
        ff_interval ff = unions
            [ff_interval__fix_y ff ym
            ,ff_interval__fix_y ff yM
            ,ff_interval__fix_x ff xm
            ,ff_interval__fix_x ff xM
            ] # should be a Interval


F<a,b,c,d; e,f,g,h> +oo y
    = LIMIT F<a,b,c,d; e,f,g,h> x y {x->+oo}
    = F<0,0,a,b; 0,0,e,f> UNDEFINED y
F<a,b,c,d; e,f,g,h> x +oo
    = LIMIT F<a,b,c,d; e,f,g,h> x y {y->+oo}
    = F<a,c,b,d; e,g,f,h> +oo x
    = F<0,0,a,c; 0,0,e,g> UNDEFINED x
    = F<0,a,0,c; 0,e,0,g> x UNDEFINED


step of continued fraction:
    x = a0 + 1/x' # 1 <= x' <= +oo
let x = p + q/x'
    y = r + s/y'
    z x y = t + u/(z' x y) = F<a,b,c,d; e,f,g,h> x y
    z x y = (A*z'' x y + B)/(C*z'' x y + D) = F<a,b,c,d; e,f,g,h> x y
    x = (A*x''+B)/(C*x''+D)
    y = (A*y''+B)/(C*y''+D)
[u==1] ==>> [0 <= u/(z' x y) < 1][t == floor z x y]
z x y = F<a*p+c,b*p+d,a*q,b*q; e*p+g,f*p+h,e*q,f*q> x' y
    (*F1*) # consume one input from x
z x y = F<a*r+b,a*s,c*r+d,c*s; e*r+f,e*s,g*r+h,g*s> x y'
    (*F2*) # consume one input from y
z' x y = F<u*e, u*f, u*g, u*h; a-t*e, b-t*f, c-t*g, d-t*h> x y
    (*F3*) # product one output "t" to z
        where
            [u==1]
            [t==floor (z x y)==floor (min $ ff_interval z)==floor (max $ ff_interval zz) for x in interval?? and y in interval??]
                if the 2 floor not equal, then consume one input from x or y
                ??choose x or y??
                    choose the widest interval from the above 4 interval when eval ff_interval
                    ???so, which one?
                    consider more than 2 variables
                    * 1 variables:
                        linear fraction transformation
                        z1 x = (a*x+b)/(c*x+d) = F1<a,b; c,d>
                    * 2 variables:
                        bilinear fraction transformation
                        z2 x y = z x y = F2<...> = F<...>
                    * 3 variables:
                        trilinear fraction transformation
                        z3 x y z = F3<symbols<8>; symbols<8> >
                    * n variables:
                        z[n] x y z = F[n]<symbols<2^n>; symbols<2^n> >
                    ff_interval__fix_others_except_x
                        instead of ff_interval__fix_y
                    ???so, which one?
                        if the widest interval from ff_interval__fix_others_except_x/ff_interval__fix_y than consume one input from x

z'' x y = F<-D*a+B*e, -D*b+B*f, -D*c+B*g, -D*d+B*h
            ; C*a-A*e, C*b-A*f, C*c-A*g, C*d-A*h> x y
    (*F4*) # arbitray transform on output-side
z x y = z''' x'' y = ???
        = F<a*A+c*C, b*A+d*C, c*D+a*B, d*D+b*B
           ;e*A+g*C, f*A+h*C, g*D+e*B, h*D+f*B> x'' y
    (*F5*) # arbitray transform on input-x
z x y = z'''' x y'' = ???
        = F<a*A+b*C, a*B+b*D, c*A+d*C, c*B+d*D
            ;e*A+f*C, e*B+f*D, g*A+h*C, g*B+h*D> x y''
    (*F6*) # arbitray transform on input-y

proof (*F1*):
    F<a,b,c,d; e,f,g,h> x y
        = F<a,b,c,d; e,f,g,h> (p+q/x') y
        = (a*x*y + b*x + c*y + d)/(e*x*y + f*x + g*y + h)
        = (a*(p+q/x')*y + b*(p+q/x') + c*y + d)
        / (e*(p+q/x')*y + f*(p+q/x') + g*y + h)
        = (a*(p*x'+q)*y + b*(p*x'+q) + c*y*x' + d*x')
        / (e*(p*x'+q)*y + f*(p*x'+q) + g*y*x' + h*x')
        = (a*p*x'*y+a*q*y + b*p*x'+b*q + c*y*x' + d*x')
        / (e*p*x'*y+e*q*y + f*p*x'+f*q + g*y*x' + h*x')
        = ((a*p+c)*x'*y + (b*p+d)*x' + a*q*y + b*q)
        / ((e*p+g)*x'*y + (f*p+h)*x' + e*q*y + f*q)
        = F<a*p+c,b*p+d,a*q,b*q; e*p+g,f*p+h,e*q,f*q> x' y
    F<a,b,c,d; e,f,g,h> x y
        = F<a*p+c,b*p+d,a*q,b*q; e*p+g,f*p+h,e*q,f*q> x' y
proof (*F2*):
    F<a,b,c,d; e,f,g,h> x y
        = F<a,c,b,d; e,g,f,h> y x
        = F<a*r+b,c*r+d,a*s,c*s; e*r+f,g*r+h,e*s,g*s> y' x
        = F<a*r+b,a*s,c*r+d,c*s; e*r+f,e*s,g*r+h,g*s> x y'
    F<a,b,c,d; e,f,g,h> x y
        = F<a*r+b,a*s,c*r+d,c*s; e*r+f,e*s,g*r+h,g*s> x y'

proof (*F3*):
    z' x y
        = u/(z x y - t)
        = u/((a*x*y + b*x + c*y + d)/(e*x*y + f*x + g*y + h) - t)
        = u*(e*x*y + f*x + g*y + h)/((a*x*y + b*x + c*y + d)- t*(e*x*y + f*x + g*y + h))
        = (u*e*x*y + u*f*x + u*g*y + u*h)/((a-t*e)*x*y + (b-t*f)*x + (c-t*g)*y + (d-t*h))
        = F<u*e, u*f, u*g, u*h; a-t*e, b-t*f, c-t*g, d-t*h> x y
    z' x y
        = F<u*e, u*f, u*g, u*h; a-t*e, b-t*f, c-t*g, d-t*h> x y

proof (*F4*):
    # z x y = t + u / (z' x y)
    #   A=t,B=u,C=1,D=0
    z x y = (A*z'' x y + B)/(C*z'' x y + D) = F<a,b,c,d; e,f,g,h> x y
    let E/F = X = (A*Y+B)/(C*Y+D)
    C*X*Y+D*X = A*Y+B
    (C*X-A)*Y = B-D*X
    Y=(-D*X+B)/(C*X-A) = (-D*E+B*F)/(C*E-A*F)
    E = a*x*y + b*x + c*y + d
    F = e*x*y + f*x + g*y + h
    (-D*E+B*F) = -D*( a*x*y + b*x + c*y + d ) + B*( e*x*y + f*x + g*y + h )
        = (-D*a+B*e, -D*b+B*f, -D*c+B*g, -D*d+B*h)
    (C*E-A*F)
        = (C*a-A*e, C*b-A*f, C*c-A*g, C*d-A*h)

    z'' x y = Y = F<-D*a+B*e, -D*b+B*f, -D*c+B*g, -D*d+B*h
                ; C*a-A*e, C*b-A*f, C*c-A*g, C*d-A*h> x y
        !!!!matrix mul!!!!
            m=[-D, B; C, -A], s=[a,b,c,d; e,f,g,h]
            s' = m*s
            Y = call m X

proof (*F5*):
    x = (A*x''+B)/(C*x''+D)
    z x y = z''' x'' y = ???
    let E/F = x
    z x y = (a*x*y + b*x + c*y + d)/(e*x*y + f*x + g*y + h)
        = (a*E*y + b*E + c*F*y + F*d)/(e*E*y + f*E + g*F*y + F*h)
        = (a*(A_+B)*y + b*(A_+B) + c*(C_+D)*y + (C_+D)*d)
         /(e*(A_+B)*y + f*(A_+B) + g*(C_+D)*y + (C_+D)*h)
        = ((a*A_*y+a*B*y) + (b*A_+b*B) + (c*C_*y+c*D*y) + (C_*d+D*d))
         /((e*A_*y+e*B*y) + (f*A_+f*B) + (g*C_*y+g*D*y) + (C_*h+D*h))
        = ((a*A+c*C)*_y + (b*A+d*C)*_ + (c*D+a*B)*y + (d*D+b*B))
         /((e*A+g*C)*_y + (f*A+h*C)*_ + (g*D+e*B)*y + (h*D+f*B))
        = F<a*A+c*C, b*A+d*C, c*D+a*B, d*D+b*B
           ;e*A+g*C, f*A+h*C, g*D+e*B, h*D+f*B> x'' y
        ----------
        m = matrix[A,B;C,D] ==>> x = call m x''
        u = [a,c;b,d]
        v = [e,g;f,h]
        u' = u*m
        v' = v*m
        3-dim matrix!!!!
proof (*F6*):
    y = (A*y''+B)/(C*y''+D)
    z x y = z'''' x y'' = ???

    F<a,b,c,d; e,f,g,h> x y = F<a,c,b,d; e,g,f,h> y x
        ^^^      ^^^              ^^^      ^^^
    (*F5*)
    z x y = F<a*A+c*C, b*A+d*C, c*D+a*B, d*D+b*B
             ;e*A+g*C, f*A+h*C, g*D+e*B, h*D+f*B> x'' y
          # swap x'' y
          = F<a*A+c*C, c*D+a*B, b*A+d*C, d*D+b*B
             ;e*A+g*C, g*D+e*B, f*A+h*C, h*D+f*B> y x''
    z x y = F<a,b,c,d; e,f,g,h> x y
          # swap x y
          = F<a,c,b,d; e,g,f,h> y x
    F<a,c,b,d; e,g,f,h> y x
          # merge above two
          = F<a*A+c*C, c*D+a*B, b*A+d*C, d*D+b*B
             ;e*A+g*C, g*D+e*B, f*A+h*C, h*D+f*B> y x''
    F<a,c,b,d; e,g,f,h> x y
          # {y=>x,x=>y,x''=>y''}
          = F<a*A+c*C, c*D+a*B, b*A+d*C, d*D+b*B
             ;e*A+g*C, g*D+e*B, f*A+h*C, h*D+f*B> x y''
    F<a,b,c,d; e,f,g,h> x y
          # {b<=>c,f<=>g}
          = F<a*A+b*C, b*D+a*B, c*A+d*C, d*D+c*B
             ;e*A+f*C, f*D+e*B, g*A+h*C, h*D+g*B> x y''
    z x y = F<a*A+b*C, b*D+a*B, c*A+d*C, d*D+c*B
             ;e*A+f*C, f*D+e*B, g*A+h*C, h*D+g*B> x y''
          = F<a*A+b*C, a*B+b*D, c*A+d*C, c*B+d*D
             ;e*A+f*C, e*B+f*D, g*A+h*C, g*B+h*D> x y''
        ----------
        m = matrix[A,B;C,D] ==>> y = call m y''
        u'' = [a,b;c,d]
        v'' = [e,f;g,h]
        u''' = u''*m
        v''' = v''*m



https://en.wikipedia.org/wiki/Chudnovsky_algorithm
    #The time complexity of the algorithm is O(n*log(n)^3)
    #"[pi] Pi Unleashed (2001)[good].djvu" :: [page 230] :: (16.89)
    (640320)^(3/2) / (12*pi)
    = 426880 * sqrt(10005) / pi
    = SUM (6*k)!*(545140134*k+13591409) / ((3*k)! * (k!)^3 * (-262537412640768000)^k) {k <- 0..}
    where
        640320^3 = 262537412640768000
        640320 = 2^6 * 3 * 5 * 23 * 29
        545140134 = 163 * 127 * 19 * 11 * 7 * 3^2 * 2
        13591409 = 13 * 1045493
[pi = x/y]:
    x = 426880 * sqrt(10005)
        #continued fraction of x:
        #len(non_periodic_digits)=1
        #len(periodic_digits)=78408
    y = 13591409 + f(1)
        = g(1)
    f(k) = a(k)/b(k)*(d(k) + f(k+1))
        = call matrix[a(k), a(k)*d(k); 0, b(k)] f(k+1)
        ver1
    g(k) = d(k-1) + f(k)
        = d(k-1) + a(k)/b(k)*g(k+1)
        = call matrix[a(k), d(k-1)*b(k); 0, b(k)] g(k+1)
        ver2
    a(k) = 8*prdouct[6*k-5,6*k-3,6*k-1]
    b(k) = k^3 * (-262537412640768000)
    d(k) = (545140134*k+13591409)

    --------------------from:-----------------------
    y = SUM (6*k)!*(545140134*k+13591409) / ((3*k)! * (k!)^3 * (-262537412640768000)^k) {k <- 0..}
        = (6*0)! / ((3*0)! * (0!)^3 * (-262537412640768000)^0) *((545140134*0+13591409) + f(1))
        = 13591409 + f(1)
    # k >= 1
    f(k) = c(k)*(d(k) + f(k+1))
            = a(k)/b(k)*(d(k) + f(k+1))
            = call matrix[a(k), a(k)*d(k); 0, b(k)] f(k+1)
    d(k) = (545140134*k+13591409)
    c(k) = ((6*k)! / ((3*k)! * (k!)^3 * (-262537412640768000)^k))
          /((6*(k-1))! / ((3*(k-1))! * ((k-1)!)^3 * (-262537412640768000)^(k-1)))
        = prdouct[(6*k-5)..6*k] / prdouct[3*k-2..3*k] / k^3 / (-262537412640768000)
        = 8*prdouct[6*k-5,6*k-3,6*k-1] / k^3 / (-262537412640768000)
        = a(k)/b(k)
    a(k) = 8*prdouct[6*k-5,6*k-3,6*k-1]
    b(k) = k^3 * (-262537412640768000)

----------------------------------
min max?
??? < f(k) < ??? ver1
    f(k) = a(k)/b(k)*(d(k) + f(k+1))
    a(k) = 8*prdouct[6*k-5,6*k-3,6*k-1] <= 8*6^3 *k^3
    b(k) = k^3 * (-262537412640768000)
    d(k) = (545140134*k+13591409)

    abs f(k) = abs a(k)/b(k)*(d(k) + f(k+1))
        <= abs 8*6^3 /(-+-+++++++262537412640768000)*((545140134*k+13591409) + f(k+1))
        == K*((A*k+B) + abs f(k+1))
        == (K*A*k+K*B + K* abs f(k+1))
        <= (K*A*k+K*B + K*(K*A*(k+1)+K*B + K*abs f(k+2)))
        <= (K*A*k+K*B + K^2*A*(k+1)+K^2*B + K^2*f(k+2))
        <= SUM K^i*B {i<-1..} + SUM K^i*K*A*(k+i) {i<-0..}
        <= SUM K^i*B {i<-1..} + SUM K^i*K*A*k + K^i*K*A*i {i<-0..}
        <= B*SUM K^i {i<-1..} + k*A* SUM K^i {i<-1..} + K*A*SUM K^i*i {i<-0..}
        == sum1*(B+k*A) + sum2
        == sum1*(B+k*A) + sum1/(1-K)
        == k*(sum1*A) + sum1*B+sum1/(1-K)
        == k*(K/(1-K)*A) + K/(1-K)*B+K/(1-K)/(1-K)
        -- K := -K
        K = 8*6^3 /(262537412640768000)
        A = 545140134
        B = 13591409
    sum1 = SUM K^i {i<-1..} = K/(1-K)
    sum2 = SUM K^i*i {i<-0..}
    = SUM K^i*i {i<-1..}
    = SUM K^(i+1)*(i+1) {i<-0..}
    = SUM K^(i+1)*i+K^(i+1) {i<-0..}
    = K*SUM K^i*i {i<-0..} + SUM K^(i+1) {i<-0..}
    = K*sum2 + sum1
    sum2 = sum1/(1-K) = -6.581919059149153e-15

    abs f(k) <= k*(sum1*A) + (sum1*B+sum2)
        == k*(K/(1-K)*A) + K/(1-K)*B + K/(1-K)/(1-K)
        == 545140134 / 151931373055999 * k + 2064961583067035368591 / 23083142118681138916389888001
        ~~ 3.5880682378817955e-6 *k + 8.945756051971219e-8
    this approximate of f(k) ==>> too slower for convergence!


??? < g(k) < ??? ver2
    y = g(1)
    g(k) = d(k-1) + a(k)/b(k)*g(k+1)
        = call matrix[a(k), d(k-1)*b(k); 0, b(k)] g(k+1)
    a(k) = 8*(6*k-5)*(6*k-3)*(6*k-1)
    b(k) = k^3 * (-262537412640768000)
    d(k) = (545140134*k+13591409)
    B(k) = abs b(k)

    g1 = d0 - a1/B1*(d1 - a2/B2*g3)
        = (d0-a1*d1/B1) + (a1*a2/B1/B2)*g3
    k>=1
    g(k) = (d(k-1)-a(k)*d(k)/B(k)) + (a(k)*a(k+1)/B(k)/B(k+1))*g(k+2)
        = A(k) + C(k)*g(k+2)
        = A(k) + C(k)*(A(k+2) + C(k+2)*g(k+4))
        = A(k) + C(k)*A(k+2) + C(k)*C(k+2)*A(k+4) + ...
        = SUM A(i)*II C(j) {j<-k,k+2..i-2} {i<-k,k+2..}
    # see below: [proof of image range of A(k), C(k), V(k) of g(k)]
    A1 = A(1) <= Ak = A(k) < A(k+1) < A(+oo) = Aoo ~ k*D+E
    C1 = C(1) <= Ck = C(k) < C(k+1) < C(+oo) = Coo
    let V(k) = A(k)-k*D
    V1 = V(1) <= Vk = V(k) < V(k+1) < V(+oo) = Voo

    A(k) = k*D + V(k) < k*D + Voo
    g(k) >= Ak + Ck*Ak + Ck^2*Ak + ... = Ak * SUM Ck^i {i<-0..}
    g(k) < (k*D+Voo) + Coo*((k+2)*D+Voo) + Coo^2*((k+4)*D+Voo) + ...
        = (k*D+Voo) + Coo*(k*D+Voo) + Coo^2*(k*D+Voo) + ...
        + 0 + Coo*2*D + Coo^2*4*D + ...
        = (k*D+Voo) * SUM Coo^i {i<-0..} + 2*D * SUM i*Coo^i {i<-0..}
    [0 < Ck < 1]!
    SUM i*Coo^i {i<-0..} = Coo/(1-Coo)^2
    SUM Ck^i {i<-0..} = 1/(1-Ck)
    SUM Coo^i {i<-0..} = 1/(1-Coo)
    ==>>
    Ak/(1-Ck) <= g(k) < (k*D+Voo)/(1-Coo) + 2*D*Coo/(1-Coo)^2
    where
        D = 5963320012791692474198352/10939058860032000
        Voo = -10094865954426918685151/18991421632000
        Coo = 1/23083142118681442779136000000
        Ak = A(k) = (d(k-1)-a(k)*d(k)/B(k))
        Ck = C(k) = (a(k)*a(k+1)/B(k)/B(k+1))
            = (2*k - 1)*(2*k + 1)*(6*k - 5)*(6*k - 1)*(6*k + 1)*(6*k + 5)/(119663008743244599367041024000000*k**3*(k + 1)**3)
        -------
        a(k) = 8*(6*k-5)*(6*k-3)*(6*k-1)
        B(k) = k^3 * (262537412640768000)
        d(k) = (545140134*k+13591409)


proof of image range of A(k), C(k), V(k) of g(k):
>>> import sympy as s
>>> import sympy.abc as S
>>> x = S.x
>>> k = S.k
>>> d = (545140134*k+13591409)
>>> B = k**3 * (262537412640768000)
>>> a = 8*(6*k-5)*(6*k-3)*(6*k-1)
>>> call = lambda f, x: f.subs(k,x)
>>> A = call(d,k-1)-call(a,k)*call(d,k)/call(B,k)
>>> C = call(a,k)*call(a,k+1)/call(B,k)/call(B,k+1)
>>> Ak = A.simplify()
(5963320012791692474198352*k**4 - 5814642789749905162646976*k**3 - 23608573992*k**2 + 2100495856*k + 67957045)/(10939058860032000*k**3)
>>> Ck = C.simplify()
(5184*k**6 - 5040*k**4 + 1036*k**2 - 25)/(119663008743244599367041024000000*k**3*(k**3 + 3*k**2 + 3*k + 1))
>>> Af = Ak.factor()
(5963320012791692474198352*k**4 - 5814642789749905162646976*k**3 - 23608573992*k**2 + 2100495856*k + 67957045)/(10939058860032000*k**3)
>>> Cf = Ck.factor()
(2*k - 1)*(2*k + 1)*(6*k - 5)*(6*k - 1)*(6*k + 1)*(6*k + 5)/(119663008743244599367041024000000*k**3*(k + 1)**3)
#################### Cf
>>> dCf = Cf.diff().factor()
(15552*k**6 + 10080*k**5 - 5040*k**4 - 4144*k**3 - 1036*k**2 + 150*k + 75)/(119663008743244599367041024000000*k**4*(k + 1)**4)
>>> s.nroots(dCf.as_numer_denom()[0])
[-0.775272040266076, -0.285451525944753, 0.228986718719710, 0.644790449982602, -0.230600875319815 - 0.307268863637211*I, -0.230600875319815 + 0.307268863637211*I]
# ==>> all real roots of d/d<k>(C(k)) < 1
>>> call(dCf, 1)
15637/1914608139891913589872656384000000
>>> call(Cf, 1)
77/63820271329730452995755212800000
>>> Cf.limit(k,s.oo)
1/23083142118681442779136000000
# ==>> [k >= 1] ==>> [dCf(k) > 0][77/63820271329730452995755212800000==C(1)<=C(k)<C(k+1)<C(+oo)=1/23083142118681442779136000000=Coo]
>>> s.sympify('77/63820271329730452995755212800000-1/23083142118681442779136000000')
-13439/319101356648652264978776064000000
#################### Af
>>> dAf = Af.diff().factor()
(5963320012791692474198352*k**4 + 23608573992*k**2 - 4200991712*k - 203871135)/(10939058860032000*k**4)
>>> s.nroots(dAf.as_numer_denom()[0])
[-7.64356019304361e-5, 7.64958440024364e-5, -3.01210360001586e-8 - 7.6465760718757e-5*I, -3.01210360001586e-8 + 7.6465760718757e-5*I]
# ==>> all real roots of d/d<k>(A(k)) < 1
>>> call(dAf, 1)
5963320012791711677909497/10939058860032000
>>> call(Af, 1)
29735444608353174286057/2187811772006400
>>> (Af-k*5963320012791692474198352/10939058860032000).limit(k,s.oo)
-10094865954426918685151/18991421632000
# ==>> [k >= 1] ==>> [dAf(k) > 0][5963320012791711677909497/10939058860032000==A(1)<=A(k)<A(k+1)<A(+oo)=k*5963320012791692474198352/10939058860032000-10094865954426918685151/18991421632000]
######################## V = Vf = Af - D*k
>>> D = s.sympify('5963320012791692474198352/10939058860032000')
>>> Vf = (Af-k*D).factor()
>>> dVf = Vf.diff().factor()
(23608573992*k**2 - 4200991712*k - 203871135)/(10939058860032000*k**4)
>>> s.nroots(dVf.as_numer_denom()[0])
[-0.0396806630012843, 0.217624138681922]
# ==>> all real roots of d/d<k>(V(k)) < 1
>>> call(dVf, 1)
3840742229/2187811772006400
>>> call(Vf, 1)
-5814642789749926602768067/10939058860032000
>>> Vf.limit(k,s.oo)
-10094865954426918685151/18991421632000
# ==>> [k >= 1] ==>> [dVf(k) > 0][-5814642789749926602768067/10939058860032000==V(1)<=V(k)<V(k+1)<V(+oo)=-10094865954426918685151/18991421632000=Voo]
>>> s.sympify('-5814642789749926602768067/10939058860032000 - (-10094865954426918685151/18991421632000)')
-21440121091/10939058860032000
######################

