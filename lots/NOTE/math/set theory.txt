set theory under set theory


x = {s in ALL | s not in s} from LLA
==>>
    1) not exist x ==>> 
        x not in LLA
        illegal-construction // !!
        ALL == LLA
        bool-inclusion
            i.e. for x,y in ALL: [x in y] in {True, False}
    2) exist x, but undefined [x in x] ==>> 
        x in LLA
        ALL == LLA
        tribool-inclusion
            i.e. for x,y in ALL: [x in y] in {True, False, Undefined}
    3) exist x, defined [x in x], defined bool-inclusion in ALL ==>> 
        x in LLA
        x not in ALL, x <= ALL 
            ==>> x not in x
            ==>> exist S <= ALL, S not in ALL // !! finite union?? open set??
        ALL < LLA
        bool-inclusion
            i.e. for x,y in ALL: [x in y] in {True, False}
        
        // ALL[i]??
        let y = {s in LLA | s not in s} from LLA
        let [y in y] = Undefined

    we can treat "1) LLA" as "3) ALL" and "2) LLA" as "3) LLA"
        that is why there are two all's.


"from" and "in"
    in universe LLA, in :: LLA -> tribool
        i.e. [x in y] in {True, False, Undefined}
        for x from S:... <==> for x from LLA if defined [x in S] if [x in S]: ...
        for x not from S:... <==> for x from LLA if defined [x in S] if [x not in S]: ...
        =xx=>> LLA = S + not S = {x|x from S} + {x|x not from S}
    in universe ALL, in :: ALL -> bool
        i.e. [x in y] in {True, False}
        for x in S:... <==> for x from ALL if [x in S]==True: ...
        ALL = S + not S 
            = {x|x from S} + {x|x not from S}
            = {x|x in S} + {x|x not in S}
            


define set s = {x | P(x)}
    <==> if [exist {x | P(x)}]: ...
    <==> for s in {{x in ALL | P(x)} in ALL | }:...
define x, s.t. P(x); ...
    <==> for x in {x in U | P(x)}: ... 
    <==> object x from {x in U | P(x)}
    let's call [:P:]={x in U | P(x)} a class, an equivalence class
    hence x is an arbitrary element of [:P:]=[=x=]
    
    
    there is no "is" relationship for user-defined object (except atom)
        i.e. define group x, y; [x is y]
    "==" should have a context
    "==[U, P]" means in the universe U, under partition P, the two classes equals
    U ==[LLA, ] X + not X
    
    can we say [0 == {}] or [0 in {{}}]??
        0 is an abstract symbol
            ==>> it can be anything (i.e. atom or object)
        {} is a user-defined object
            ==>> {} is an arbitrary element of [={}=]
   
    for any object x, 
        Q(x) means "all u in [=x=]: Q(u)"
        ~Q(x) means "exist u in [=x=]: ~Q(u)"
        Q~(x) means "all u in [=x=]: ~Q(u)"
        
        but in set-theory, we denote ~Q(x) ::= Q~(x), an fatal error! 
        
        if [=x=] in [={}=]:
            |- Q(x) ^ Q~(x)
        if [=x=] not in [={}=]:
            if [exist x: Q(x)] and [exist y: Q~(y)]
                |- ~[Q(x) or Q~(x)] 

    object x from [:P:]
    object y from [:P:]
    if card([:P:]) > 1
        [x is x]
        y may not be x

        

// define x, s.t. x = {s | s not in s}
    object x ::= {s | s not in s}
    |- x in x -->> x not in x
    |- x not in x       // p -->> ~p ==>> ~p
    |- x not in x -->> x in x
    |- x in x           // p, p-->>q ==>> q
    |- exist p: p and ~p
    |- x not in ALL     // not exist x

    <==>> 
    stmt P(s) ::= s not in s
    for x in {{s in ALL | P(s)} in ALL | }:
        |- x in x -->> x not in x
        ...
        |- exist p: p and ~p
    |- {{s in ALL | P(s)} in ALL | } = {}
    |- {{s in ALL | P(s)} from LLA | } ^ ALL = {}
    |- {s in ALL | P(s)} not in ALL
    // since {s in ALL | P(s)} <= ALL
    |- {x in ALL | P(x)} not in {x in ALL | P(x)}
    |- exists S <= ALL: S not in ALL




    |- {} not in {}
    |- P({})
    |- exist s: P(s)
    |- exist P: [exist s:P(s)] and [not exist {s | P(s)}]
    |- ~[[exist s:P(s)] -->> [exist {s | P(s)}]]
    |- exist P: {s in ALL | P(s)} not in ALL
    |- 
    
    


LLA - set of any element

// allow finite constructor
object bool from {{True, False} |
    object True from LLA
    object False from LLA
    [True /= False]
}

stmt "object x :: a->b" ::= "object x from {f | f:a->b}"
expr "[x :: a->b]" ::= "[x in {f | f:a->b}]"

// NOTE: we don't define 'includes' relation on LLA
// set_theory_domain
object set_theory_domain(ALL, __contains__) 
  from {set_theory_domain(ALL, __contains__) from LLA | 
    // ==>> all in LLA, 
    // ==>> __contains__ in LLA, 
    
    // define "includes" relation
    [__contains__ :: all -> all -> bool]
    expr "[x in y]" ::= "[__contains__(x, y)]"
    

    // ?? True, False in ALL
    // ?? ALL in ALL
    object {} from {x from ALL | for y in ALL: y not in x}
    
}

// NOTE: ALL may be empty



x in ALL, y in ALL, x in
{} in ALL
ALL in ALL
stmt exist x: P(x) ::= exist x in ALL: P(x) <==> {x|P(x)}
stmt any x: P(x) ::= for x in ALL: P(x)
|- any x: x in ALL

any x: x not in ALL
|- ALL /= {}

// set {x in ALL | P(x)} may or may not in ALL
for x in ALL: [x^ALL == x]

P








0 = {}
n = {(n-1)}
Pair(a,b) = {{a}, {{b}, {}}}
mapping f:A->B = {Pair(a, f(a)) | a in A, b in B}
tuple[N, {A[i]}] t:[0..N-1]->union A[i] {i=0..N-1}



