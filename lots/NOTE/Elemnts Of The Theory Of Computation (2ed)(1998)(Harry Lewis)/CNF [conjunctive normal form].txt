data Literal bv = PositiveLiteral bv | NegativeLiteral bv
type Clause bv = Set (Literal bv) -- NonemptySet (Literal bv)
type BooleanFormula_CNF bv = Set (Clause bv)
type TrueAssignment bv = bv -> Bool
satisfies :: TrueAssignment bv -> BooleanFormula_CNF bv -> Bool
satisfies ta bf = eval bf on ta
satisfiable :: BooleanFormula_CNF bv -> Bool
satisfiable bf = exist ta: ta `satisfies` bf




[CNF] conjunctive normal form = /\~ \/~ x {x in C} {C in F}
positive literal - Boolean variable - x[i]
negative literal - negation of Boolean variable - ~x[i]
literal = positive literal | negative literal
clause = nonempty? set of literals -- or \/
    -- {} means False, which cause the whole formula be False, i.e. unsatisfiable

Boolean formula in conjunctive normal form = set of clause -- and /\
    -- {} means True, i.e. satisfiable

truth assignment
satisfies
satisfiable


2-SATISFIABILITY.