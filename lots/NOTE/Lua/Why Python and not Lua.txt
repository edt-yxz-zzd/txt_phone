
e ../lots/NOTE/Lua/Why Python and not Lua.txt

有很多缺陷:
  table==list+dict，但不确定长度
  标准库小，各自为政

主要用途:
  配置文件
  游戏自定义脚本语言

[[[
Why Python and not Lua
https://softwareengineering.stackexchange.com/questions/66590/why-python-and-not-lua
===
Software Engineering
Why Python and not Lua? [closed]
Asked 12 years, 3 months ago
Modified 10 years ago
Viewed 114k times
58

Closed. This question is opinion-based. It is not currently accepting answers.
Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.

Closed 9 years ago.

Why has Python been backed by google and become so rapidly popular and Lua has not?

Do you know why Lua has stayed in background?

pythonscriptinglua
Share
Improve this question
Follow
edited Apr 9, 2011 at 4:16
Bernard Dy's user avatar
Bernard Dy
3,1882626 silver badges3333 bronze badges
asked Apr 8, 2011 at 21:52
BenjaminB's user avatar
BenjaminB
1,70611 gold badge1212 silver badges1515 bronze badges
6
Lua likes to pretend arrays and dictionaries are the same thing, and has a length getter that can not only return wrong results, but nondeterministic results. I don't know what Googles reasons are, but this is enough reason for me to dislike it. – 
user8709
 Aug 8, 2011 at 7:47
6
To me, Python is easier to code in, more enjoyable, and has more features. Some examples from the top of my head: generators come as a first-class citizen in Python (yield), and Lua requires more cumbersome setup. Python's list indexing [::] is a huge plus. Python has legitimate classes and inheritance. Lua is faster, yes, but I actually like writing Go code for use in Python when speed is important. – 
Frank Bryce
 May 17, 2016 at 17:54
I love LuaJIT but a big part of my love for it is its ease of embedding, speed, and teeny footprint. If I had to program in something all day long, I might lean more towards Python. – 
user204677
 Dec 1, 2017 at 2:04
1
@FrankBryce you got it backwards. Python's generators are a subset of Lua's coroutines. See inf.puc-rio.br/~roberto/docs/MCC15-04.pdf – 
user183922
 Aug 31, 2019 at 14:55
Add a comment
3 Answers
Sorted by:

Highest score (default)
50

I really love Lua, but it does have some real limitations, and as others have mentioned they derive mostly from Lua's origins as a configuration file language and then later as an embedded scripting language.

Because of the goal to keep Lua small, there exists only a very tiny standard library, that has only bare bones functionality.

This has lead to an unfortunate culture in Lua circles where Lua developers like to re-implement the functionality offered by many other language's standard libraries themselves rather than working collectively on a universally accepted set of core libraries.

Things like multi-threading, regular expressions, platform independent file access methods, and even bit operations (until 5.2) ere all "not included" since they would make Lua much larger and slower. Sure you can get libraries do so these things - but then those have independent maintainers and quality levels.

Don't get me wrong. I love Lua for the same reasons I have just listed.

Share
Improve this answer
Follow
answered Aug 8, 2011 at 7:32
sylvanaar's user avatar
sylvanaar
2,29511 gold badge1919 silver badges2626 bronze badges
Add a comment
64

Simple : Lua have more "niche" objectives than Python.

Python is thought to be useful as a general programming language. So, it's useful in a lot of cases. It covers many well known types of application but doesn't enter directly into competition with other languages that might be targeted at specific constraints, but the simplicity of it's syntax.

Lua is totally targeted to be an embedded scripting language. It's initial purpose, even if it's used in other contexts currently, like build systems; is to be embedded in software and to allow easy implementation of domain-specific script functions and structures. It's so minimalist that it can even be used on really constrained hardware (I used Lua on NintendoDS), it's lightweight, easy to use, FAST, and is such a minimalist language but thought to be extended that a lot of dialect (importing paradigms like object-orientation) are available. It's so portable (ANSI C) that you can use it on any embedded hardware with decent amount of memory for modern embedded software (if I remember well the default lua vm is around 400ko and will almost never grow if you don't loop creating objects...).

So, Lua is initially used in context where you need to embed a scripting language for your application.

Python is used for...almost anything that doesn't require a more niche language (you can make quite performant games using Python, but some kind of performance-heavy games really require to avoid such system).

It's simply that Python is used in more contexts than Lua. As far as I know, other than Android (that provide Java and native language support), Google isn't an embedded software company so they don't really need Lua everywhere, while Python is useful for anything they do (web, build system, communication, web and web).

Python is used in a lot of games for embedded scripting too, but it's heavy and slower than Lua. The syntax of Python makes it more appropriate for big games that rely a lot on scripted information in their game structure (not sure I'm clear there but just think that if you need a "real complete language" for scripting, embedding Python might be a good idea, if the performance is fine for you). Python was not made to be embedded, so that's fine. An equivalent of Python that is targeted at being embedded in C++ is Falcon.

For extreme comparison, some languages that target embedding and try to have more complete syntax than the minimalist Lua, and compete on performance : ChaiScript, AngelScript, Io...

By the way, I've seen new build systems like PreMake or Bam use Lua as the build file language. The idea is that it's lightweight and well known from game developers (build systems in game developpement is a major problem). So maybe that's another domain where Lua might be more appreciated. It's certainly more user-friendly than CMake syntax....

Share
Improve this answer
Follow
edited Apr 11, 2011 at 13:04
Matt Ellen's user avatar
Matt Ellen
3,36844 gold badges3030 silver badges3737 bronze badges
answered Apr 8, 2011 at 22:10
Klaim's user avatar
Klaim
14.8k33 gold badges4949 silver badges6262 bronze badges
5
I think Lua's target as an embedded language is probably a major contributor. But even still, I believe "popularity" of a language has less to with the actual design or capability of the language itself and more a matter of "right time, right place" (see PHP, for example). – 
Dean Harding
 Apr 8, 2011 at 22:38
Well I think that a language targetted at specific purpose naturally appeal to specific users, making it's audience more restraint than any general-purpose language. Having a less audiance than general-purpose languages directly impact the number of people that will ever talk about it. Other than that, specific targets means specific features. Therefore, it's not good for every situation. Here for example lua alone is not a very good gui-programming language. It requires some additions to be really useful. – 
Klaim
 Apr 8, 2011 at 22:43
1
That said, I fully agree: if php wasn't used for such a widely used field as web-site developpement, it wouldn't be everywhere now. – 
Klaim
 Apr 8, 2011 at 22:48
Lua is mainly used as embedded language but it is a general purpose programming language, for instance you can make CGI script with mod_lua. I could change my question to why lua stayed as an embedded language? – 
BenjaminB
 Apr 8, 2011 at 23:01
Because it's it's origin. You can use it as a general purpose language yes, as you can use php too for general purpose. You can also use Perl to do the same. But their origins makes their orientations. Again, their initial purpose makes them less useful than other languages for general purpose languages. Lua lack some feature language to be easy to use with GUI system for examples, like object orientation (that you can add easily, but it's not native). Make sure you see the difference between a language originally made for specific purpose and a general one. They all have constraints anyway. – 
Klaim
 Apr 10, 2011 at 11:35
Add a comment
4

You can do everything with Lua, it's created as a scripting language to extend programs? Yes, but it's far from limited to it, there is a lot of libraries for Lua, and with the right tools(LuaJIT's FFI or tolua) you can even use a C/C++ Library on it. The reason that makes Python more used in my point of view are only age, Python is used as first languages in many colleges and schools, there is more people that know Python than Lua, and is much more easy to found a good library for Python than for Lua, because the language is more mature. Also, i don't know much about Python, but as much as i know, it's easy to hide your code from the end-user, what in Lua, isn't that easy, i'm right?

Share
Improve this answer
Follow
answered Jul 19, 2013 at 3:51
Gustavo's user avatar
Gustavo
5111 bronze badge
Add a comment
Not the answer you're looking for? Browse other questions tagged pythonscriptinglua or ask your own question.
The Overflow Blog
Announcing OverflowAI
Behind the scenes with the folks building OverflowAI (Ep. 594)
Featured on Meta
Stack Overflow at WeAreDevelopers World Congress in Berlin
Related
99
Why is Python written in C and not in C++?
230
Why do people hesitate to use Python 3?
9
What does (Lua) game scripting mean?
11
How Lua handles both integer and float numbers?
7
Creating New Scripts Dynamically in Lua
7
Should I use Lua for writing config files?
Hot Network Questions
Alaska mayor offers homeless free flight to Los Angeles, but is Los Angeles (or any city in California) allowed to reject them?
How is the damping equation obtained?
Align \vdots at the center of an `aligned` environment
What is the least number of concerts needed to be scheduled in order that each musician may listen, as part of the audience, to every other musician?
Is the DC-6 Supercharged? And what is a Turbosupercharger?
more hot questions
SOFTWARE ENGINEERING
Tour
Help
Chat
Contact
Feedback
COMPANY
Stack Overflow
Teams
Advertising
Collectives
Talent
About
Press
Legal
Privacy Policy
Terms of Service
Cookie Settings
Cookie Policy
STACK EXCHANGE NETWORK
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2023 Stack Exchange Inc; user contributions licensed under CC BY-SA. rev 2023.7.27.43548

Your privacy

By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.

Software Engineering Stack Exchange requires external JavaScript from another domain, which is blocked or failed to load. Retry using another source.
]]]

