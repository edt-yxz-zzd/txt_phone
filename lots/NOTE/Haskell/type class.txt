
-- i :: *
class Integral i where ...
instance Integral Int where ...
    type "i" is an Integral
    Integral is like an abstract base class or an Interface in OO
        Integral.register(i) # python
        class i : Integral // C++
        class i implement Integral // Java
// Hashable e


-- m :: *-*
class Monad m where ...
instance Monad Maybe where ...
    Maybe a               v.s. shared_ptr<a>
    Maybe is an Monad     v.s. shared_ptr is of concept pointer
    class Monad m         v.s. template<template ptr> pointer_trait_base
    instance Monad Maybe  v.s. template<> pointer_trait_base<shared_ptr>
    
    template "Maybe" is of concept Monad
    Monad is like a concept trait base class template in OO

-- elem :: *, elems :: *
class Collection elem elems | elems -> elem where ...
instance Collection e [e] where ...
    e and [e] has a "Collection" relationship
    i.e. [e] is a collection of e
    
    type elems is an (Collection elem)
    (Collection elem) v.s. Integral
        class elems : Collection<elem> // C++
        class elems implement Collection<elem> // Java

-- elem :: *, collection_template :: *->*
class CollectionTemplate elem collection_template where
    type elems = collection_template elem
    ...
type ct a e = Map e a
instance CollectionTemplate e (ct a) where ...






