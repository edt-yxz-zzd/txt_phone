Life Without Arrays or Hash Tables
[page 289] 
A Brief Introduction to Maps
    It is very important to remember this, as Map¡¯s laziness over values is a frequent source of space leaks among coders who are not expecting it.
    Mapis strict in its keys, but nonstrict in its values. In other words, the  spine, or structure, of the map is always kept up-to-date, but values in the map aren¡¯t evaluated unless we force them to be.


[page 289] 
Type constraints
    a common design pattern in Haskell code: type constraints are pushed out to where they¡¯re actually needed, not necessarily applied at the point where they¡¯d result in the least typing for a library¡¯s author.

Partial application awkwardness
    code that uses partially applied map functions almost always contains adapter functions to fiddle with argument ordering.


Getting started with the API
    M.lookup/findWithDefault/(!) 
    (!) - partial function
    insertWith' - evaluates the combining function strictly, allowing us to avoid space leaks.
    union - left-biased ¡ª if two maps contain the same key, the result will contain the value from the left map
    
[page 292] Further Reading
Purely Functional Data Structuresby Chris Okasaki (Cambridge University Press)
http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf 



