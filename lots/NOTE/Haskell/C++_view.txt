
typedef ... haskell_obj_t;
typedef const haskell_obj_t& hobj; // atomic lazy

template <HClasses...>struct Constraints;

template <>struct Constraints{};
template <HClass, HClasses...>struct Constraints
{
    HClass interface;
};

template <a, HClasses...> struct HType
{
    typedef a type;
    
    hobj obj;
    Constraints cs;
    operator hobj()const {return obj;}
};


xxx :: Int
T<Int> xxx;

xxx :: a
HType<T<a>> xxx;

xxx :: Num a => a
HType<a, Num> xxx; 


class Num a where
    (+) :: a->a->a
    ...
// class Num
// {
//    static hobj operator+(hobj, hobj);
//    ...
//    
// };


(+) :: Num a => a->a->a
template <a>
HType<a, Num> operator+(HType<a, Num>, HType<a, Num>);



