[real world Haskell.pdf]


GHC = ghc + ghci + runghc
    compiler + interactive-interpreter + script-runner


<ghci field>

# what is important?
# list all help item; list one item
# :?
# :info

comment
	single line: "-- xx"
	multilines: "{- xx -}"
	document, using 'haddock' : 
		"-- |xx" or "{-|xx -}"
		or replace "|" by "^"
# how to set searching path?
# donot know, but
# :cd path
# :load src # src.hs

:t xxx # type
:info xxx # signature
(+) # infix op

:? # list all :cmd
:set +t # show all ans's type
    why "1\n" ==>> "it :: Integer"?
        it has to choose a type so that it can print the value, 
        and it defaults to Integer
    but ":t 1\n" ==>> "1 :: Num a => a"
        we ask ghci to print the type of the expression 
        without actually evaluating it, 
        so it does not have to be so specific.


x :: y has meaning ¡°the expression x has the type y.¡±
When you see an =symbol in Haskell code, it represents ¡°meaning¡±
    ¡ªthe name on the left is defined to be the expression on the right.


let xxx = expr # ghci spec # not Haskell 98
:show bindings
:browse

# import modules; should be in front of file
    :m + Data.List  Data.Map Data.Set
    import Data.List
    import Data.List (nub, sort)
    import Data.List hiding (nub)
    import qualified Data.Map
    import qualified Data.Map as M



strict
    strict - non-lazy
    non-strict - lazy
    seq: see : [page 109] Learning to Use seq -- Space Leaks and Strict valuation | 109

partial/currying/section
    Partial function application is named  currying, after the logician Haskell Curry (for whom the Haskell language is named).
    section - write a partially applied function in infix style


point-free style
    func = .... # no input args
    The term pointis roughly synonymous (in Haskell) with value, so a point-free expression makes no mention of the values that it operates on.
    vs pointy version


[page 321] monoid == semigroup ?????

[page 24] 
Distinguishing type names and type variables
    We can now see why a type name must start with an uppercase letter:
    it makes it distinct from a type variable, 
    which must start with a lowercase letter.

[page 24]
Data ==>> code
    Lists are the easiest stepping stone into the idea that 
    we can use data to structure our program and its control flow. 

[page 25] Haskell doesn¡¯t have a notion of a one-element tuple. 

[page 30] In Haskell, indentation is important: it  continues an existing definition, instead of starting a new one.


[page 62] 
    // let xx = expr
    Also, our use of whitespace here is important.  
    // scope, top-level; in scope; out of scope;
    In general, we¡¯ll refer to the places within our code where we can use a name as the name¡¯s scope. If we can use a name, it¡¯s in scope; otherwise, it¡¯s out of scope. If a name is visible throughout a source file, we say it¡¯s at the top level.

[page 223] lift
    # A Domain-Specific Language for Predicates | 223
    # take func as input...
    This act of taking a function, such as (>), and transforming it into another function that operates in a different context (here  greaterP) is referred to as  liftingit into that context. (This explains the presence of  liftin the function¡¯s name.) Lifting lets us reuse code and reduce boilerplate. We¡¯ll be using it a lot, in different guises, throughout the rest of this book.
    When we lift a function, we¡¯ll often refer to its original and new versions as unlifted and lifted, respectively.

[page 225] Combinators
    In Haskell, we refer to functions that take other functions as arguments and return new functions as combinators.


[370] fundep
    "| m -> s" is a functional dependency, often called a fundep. We can read the vertical bar | as ¡°such that,¡± and the arrow  -> as ¡°uniquely determines.¡± Our functional dependency establishes a relationshipbetween mand s.
    The "FunctionalDependencies" language pragma governs the availability of functional dependencies.
    The purpose behind us declaring a relationship is to help the type checker. Recall that a Haskell type checker is essentially a theorem prover, and that it is conservative in how it operates: it insists that its proofs must terminate. A nonterminating proof results in the compiler either giving up or getting stuck in an infinite loop.
    ### xy :: (Num s, MonadSupply s m) => m s ### s is determined by m
    




















