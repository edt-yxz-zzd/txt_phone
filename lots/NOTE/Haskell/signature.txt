
g :: b -> b <==> g :: forall b. b -> b


constraints in a type signature
    ":: (c1, c2 ...) => type" <==> ":: forall tv1 tv2 ... (c1, c2...) => type"

tv1 should reachable from "=> type"
    error:
        forall a. Eq a => Int
    correct:
        class C a b | a -> b where ...
        class C a b => D a b where ...
        f :: forall a b. D a b => a -> a

Explicitly-kinded quantification
    data Set (cxt :: * -> *) a = Set [a]
    cxt is not used in right part, so compiler will assume it be ":: *"



Arbitrary-rank polymorphism
    f1 :: forall a b. a -> b -> a
    g1 :: forall a b. (Ord a, Eq  b) => a -> b -> a

    f2 :: (forall a. a->a) -> Int -> Int
    g2 :: (forall a. Eq a => [a] -> a -> Bool) -> Int -> Int

    f3 :: ((forall a. a->a) -> Int) -> Bool -> Bool

    f4 :: Int -> (forall a. a -> a)








