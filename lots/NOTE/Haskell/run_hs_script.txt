e ../lots/NOTE/Haskell/run_hs_script.txt

{-

view ../lots/NOTE/Haskell/01start.txt
GHC = ghc + ghci + runghc
    compiler + interactive-interpreter + script-runner

runghc ../../python3_src/haskell_src/Framework4Translation.hs
main = print "ok"

pushd ../../python3_src/haskell_src/ ; runghc ../../python3_src/haskell_src/Framework4Translation.hs ; popd
  -- ##if using 『import Xxx(fff)』, then required:Xxx.hs under the working directory
  <==>:
  cd ../../python3_src/haskell_src/ ; ../../python3_src/haskell_src/Framework4Translation.hs ; cd $OLDPWD
  <==>:
  bash -c 'cd ../../python3_src/haskell_src/ ; runghc ../../python3_src/haskell_src/Framework4Translation.hs'

$ ghci
Prelude> :?
Prelude> :show imports
import Prelude -- implicit
Prelude> :browse Prelude
Prelude> :quit

ghci '--show-options' | grep GADT
ghci '--show-options' | grep '^-X' | grep '^-XNo' -v
view ../lots/NOTE/Haskell/options.txt



-}


{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE GADTs #-}
class ... where
    {-# MINIMAL pure, ((<*>) | liftA2) #-}

{-
view ../../python3_src/haskell_src/PureTypeSystem.hs

runghc ../../python3_src/haskell_src/PureTypeSystem.hs

$ ghci
Prelude> :info Applicative
Prelude> :info Monad
Prelude> :info Functor
class Functor f => Applicative f where
  pure :: a -> f a
  (<*>) :: f (a -> b) -> f a -> f b
  GHC.Base.liftA2 :: (a -> b -> c) -> f a -> f b -> f c
  (*>) :: f a -> f b -> f b
  (<*) :: f a -> f b -> f a
  {-# MINIMAL pure, ((<*>) | liftA2) #-}
class Applicative m => Monad m where
  (>>=) :: m a -> (a -> m b) -> m b
  (>>) :: m a -> m b -> m b
  return :: a -> m a
  {-# MINIMAL (>>=) #-}
type Functor :: (* -> *) -> Constraint
class Functor f where
  fmap :: (a -> b) -> f a -> f b
  (<$) :: a -> f b -> f a
  {-# MINIMAL fmap #-}


-}

