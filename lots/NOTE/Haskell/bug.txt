
[page 318] Chapter 13: Data Structures
Taking Advantage of Functions as Data
    By choosing an unfamiliar data representation, we¡¯ve avoided a nasty performance quagmire, while gaining a new perspective on the usefulness of treating functions as data. By the way, this is an old trick, and it¡¯s usually called a difference list.
    -- I don't think so.
    -- one func per char...
    ?????? may be I wrong??????

[page 320]
    The head function has constant cost for lists. Our  DList equivalent requires that we convert the entire DListto a regular list, so it is much more expensive than its list counterpart¡ªits cost is linear in the number of appends we have performed to construct the DList


????? Monad [] is O(n^2)???????
    no, since we construct a new list of diff type each time





[page 368] Chapter 15: Programming with Monads
Supplying Random Numbers
    the RandomGen typeclass¡¯s  split function, which takes one random number generator and turns it into two generators.
    how? if call split 10 times, the last generator skip 2^10 objects??
    


restrictions
[page 375] 
Hiding the IO Monad
    The blessing and curse of the IO monad is that it is extremely powerful. If we believe that careful use of types helps us to avoid programming mistakes, then the IO monad should be a great source of unease. Because the IO monad imposes no restrictions onvwhat we can do, it leaves us vulnerable to all kinds of accidents.
    How can we tame its power? Let¡¯s say that we would like guarantee to ourselves that a piece of code can read and write files on the local filesystem, but it will not access the network. We can¡¯t use the plain IO monad, because it won¡¯t restrict us.
Designing for Unexpected Uses
    class (Monad m) => MonadIO m where liftIO :: IO a -> m a
#### but now "it won¡¯t restrict us."
#### real solution :
    restricted function using base class that no liftIO
    the caller using subclass which define liftXXXIO
    

[page 392] Chapter 16: Using Parsec
    parseCSV "\"Cell without an end\n"
#### what if  :  parseCSV "\"eol is allowed in string?\n\"\n"
####   Right [["eol is allowed in string?\n"]]
#### I think it is wrong.



