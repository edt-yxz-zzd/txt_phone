
yy = let a = xx
         b = xx
         ...
     in expr
        where expr = xx
     where xx = ...
           xx = ...

a@(pattern)

f (a:_) -- not f a:_ !!!

yy = case expr of 
    (x:[]) -> expr
    (construct pattern) -> expr
    _ -> otherwise_expr
    
We can use const value in matching pattern, but not variable names.
local pattern variable.
    Here, it is more obvious apple does not refer to the top-level value named apple¡ªit is a local pattern variable.


guards
    Pattern matching limits us to performing fixed tests of a value¡¯s shape. Although this is useful, we will often want to make a more expressive check before evaluating a function¡¯s body. Haskell provides a feature called  guards that give us this ability. 

f pattern
    | bool_expr = ...  -- NOTE: "="
    | ...
    ...
    | otherwise = ...
f x = case x of
    | bool_expr -> ... -- NOTE: "->"






