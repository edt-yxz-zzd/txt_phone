2.3.7 Sequential Composition and Exit

stop: halt / deadlock
exit: using for successful termination

<successful termination>
    := (...; exit)
     | ((...; exit) ||| (<successful termination>))
(i) (x; y; exit) >>(z; stop)
    x;y;i;z
(ii) (x; y; stop) >>(z; stop)
    x;y
(iii) (x; stop | y; exit) >>(x; stop)
    x | y;i;x
(iv) (x; exit ||| y; exit) >>(z; stop)
    x;y;i;z | y;x;i;z
(v) (x; stop ||| y; exit) >>(z; stop)
    x;y | y;x
(vi) (x; exit |[x]| y; exit) >>(z; stop)
    y
(vii) x; y; exit
    x;y;¦Ä


(pick_stick1;exit ||| pick_stick2;exit) >> (put_stick1;stop ||| put_stick2;stop)
    As suggested by this example, the main role of the sequential composition operator is in enabling specifiers to subdivide their specifications into phases. Here we have decomposed into a picking-up phase and a putting-down phase and there will be a synchronisation (the successful termination) before moving between phases.
    -- phases



