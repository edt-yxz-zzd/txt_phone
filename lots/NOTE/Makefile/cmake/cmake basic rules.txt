https://stackoverflow.com/questions/21163188/most-simple-but-complete-cmake-example




after some research I have now my own version of the most simple but complete cmake example. Here it is, and it tries to cover most of the basics, including resources and packaging.

one thing it does non-standard is resource handling. By default cmake wants to put them in /usr/share/, /usr/local/share/ and something equivalent on windows. I wanted to have a simple zip/tar.gz that you can extract anywhere and run. Therefore resources are loaded relative to the executable.

the basic rule to understand cmake commands is the following syntax:
    <function-name>(<arg1> [<arg2> ...])
    without comma or semicolor.
Each argument is a string.
    foobar(3.0) and foobar("3.0") is the same.

You can set lists/variables with set(args arg1 arg2).
    With this variable set:
        foobar(${args}) and foobar(arg1 arg2) are effectively the same.
    A non existent variable is equivalent to an empty list.
A list is internally just a string with semicolons to separate the elements.
    Therefore a list with just one element is by definition just that element, no boxing takes place.
    Variables are global.

Builtin functions offer some form of named arguments by the fact that they expect some ids like PUBLIC or DESTINATION in their argument list, to group the arguments.
    But that's not a language feature, those ids are also just strings, and parsed by the function implementation.

see:
    last example in "cmake examples.txt"

