[page 85-86] 3 while Programs
3.5 Completeness
A natural question concerning any proof system is whether it is strong enough for the purpose at hand, that is, whether every semantically valid (i.e., true) formula can indeed be proved. This is the question of completeness of a proof system.



There are several reasons why the proof systems PW and TW could be incomplete.
(1) There is no complete proof system for the assertions used in the rule of consequence.
(2) The language used for assertions and expressions is too weak to describe the sets of states and the bound functions needed in the correctness proofs.
(3) The proof rules presented here for while programs are not powerful enough.
Obstacle (1) is indeed true. Since we interpret our assertions over a fixed structure containing the integers, Godel¡¯s Incompleteness Theorem applies and tells us that there cannot be any complete proof system for the set of all true assertions. We circumvent this problem by simply adding all true assertions to the proof systems PW and TW. As a consequence, any completeness result will be in fact a completeness relative to the truth of all assertions.
Obstacle (2) is partly true. On the one hand, we see that all sets of states needed in correctness proofs can be defined by assertions. However, we also observe that the syntax for expressions as introduced in Chapter 2 is not powerful enough to express all necessary bound functions.
Thus our question about completeness of the proof systems PW and TW really address point (3). We can show that the axioms and proof rules given in these proof systems for the individual program constructs are indeed powerful enough. For example, we show that together with the consequence rule the loop II rule is sufficient to prove all true total correctness formulas about while programs.
First let us examine the expressiveness of the assertions and expressions.  For this purpose we introduce the notion of weakest precondition originally due to Dijkstra [1975].



