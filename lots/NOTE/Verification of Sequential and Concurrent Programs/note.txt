[page 70] 3 while Programs
    The only step in the above proof that required some creativity was finding the appropriate loop invariant.
    // creativity ~ loop invariant

    It is important to note that the proof system PW does not allow us to establish termination of programs. Thus PW is not appropriate for proofs of total correctness.
    // total correctness ~ termination
    // since assume loop will end


[page 78] [proof systemS] [soundness theoremS] 
    Our primary goal in this book is to verify programs, that is, to prove the truth of certain correctness formulas. The use of certain proof systems is only a means of achieving this goal. Therefore we often apply proof rules to reason directly about the truth of correctness formulas. This is justified by the corresponding soundness theorems.

[page 85] [proof outline]
    Proof outlines are well suited for the documentation of programs because they allow us to record the main assertions that were used to establish the correctness of the programs, in particular the invariants and bound functions of loops.


correctness = partial correctness | total correctness
total correctness = partial correctness && termination

soundness    : {p}S -[deduce]->> {q} ==>> {p}S -[proof]->> {q}
completeness : {p}S -[proof]->> {q} ==>> {p}S -[deduce]->> {q}

P(i) ::= if decode(i) == Nothing then false else deduce_to(unjust decode(i), "not exists Int i: P(i)")
where encode::deduce_seq->int
      decode::int->Maybe deduce_seq
deduce("exists Int i: P(i)")?
    if yes:
        if soundness ==>> exists i: P(i)
            but exists a deduce_seq S=unjust decode(i): deduce_to(S, "not exists Int i: P(i)")
        error ==>> not consistent ==>> not soundness
    else:
        if soundness ==>> not exists i: P(i)
        not exists a deduce_seq S: deduce_to(S, "not exists Int i: P(i)")
        ==>> not completeness
