propositional logic
proposition

sound (all provable statements are true in all models)
complete (all statements which are true in all models are provable)
    # ??completeness <==> semidecidability??
decidable (all statements which are true in all models are decidable)
    (entailment/"logical consequence relation" is decidable or semidecidable)
    decidable fragments of first order logic (R. Ramanujam)(2008)[PPT]
    Decidable Fragments of First-Order and Fixed-Point Logic (Erich Gradel)[classification]
    The Classical Decision Problem[TOC only]
    decidable fragments of first-order temporal logics (Ian Hodkinson)(2000)
    Decidable fragments of First order logic (Francois Schwarzentruber)(2013)[PPT]
    Handbook of pratical logic and automated reasoning(J. Harrison)(2009)[TOC only]

why important?
  [decidable fragments of first-order logic]
    "Bernays-Schonfinkel class"(effectively propositional, EPR)
        # prenex normal form = E*A*_;
        # function-free;
        # with equality;
    "first-order function-free two-variable logic"
        # The two-variable fragment of first-order logic with no function symbols is known to be decidable even with the addition of counting quantifiers, and thus of uniqueness quantification.

    "first-order function-free definite clauses"(Datalog) # decidable
        1) <= "description logic" # decidable
        2) <= "first-order definite clauses" # semidecidable
            <= "first-order logic" # undecidable
                <= "second-order logic"
    "definite clauses" <= "Horn clauses" <= "propositional logic"
    "propositional logic"
        1) <= "Bayesian network"
            <= "#P-hard" >= "NP-hard"
        2) <= "[pure] monadic first-order logic" # decidable
            # pure: function-free or allowing monadic function
            #   quantifiers cannot nest usefully if there are no polyadic predicates to relate the bound variables
            # monadic v.s. polyadic
            #   mon-adic v.s. poly-adic
            #   all relation symbols in the signature take only one argument
            # mine: ??function is relation??
            #   R(..., F(a,b,c), ...) -->
            #       @fabc. CallF(fabc, a,b,c) ==>> R(..., fabc, ...)
            # mine: ??polyadic is monadic with function??
            #   R(a,b,c) ==>> R2(Tuple3(a,b,c))


True <=> A \/ ~A
A <=> A \/ True
A => A \/ B
(A \/ B \/ C) /\ (A \/ ~B \/ D) => A \/ C \/ D
(A \/ B) /\ (A \/ ~B \/ D) <=> (A \/ B) /\ (A \/ D)

