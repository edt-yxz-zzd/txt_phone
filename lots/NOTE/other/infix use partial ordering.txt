standard ~ Rational/partial ordered data type
new op compare with old op
if not the above two cases then the infix op must not use with other/self
infix

one call
    f a
group op -- with highest precedence
    -- O1 O2 ... On ==>>
    --    ?? x0 O1 x1 O2 ... On xn
    --    ??    O1 x1 O2 ... On xn
    --    ?? x0 O1 x1 O2 ... On   
    --    ??    O1 x1 O2 ... On   
    -- since prefix call ==>> no x0
    -- 
    
    pair: error!!
        (     )
        begin end => (begin(...)end)
    pair:
        -- error: a if b else c
        fff a ggg b => (fff(...)ggg(...))<eol>
        begin /end => (begin(...)/end)
    triple:
        if then else => (if(...)then(...)else(...))<eol>
begin of block -- like "do"
    :fff
        stmt
        stmt

let \p = ((?=\S)\W), \i=[_\w+]
"\p+\w\S+" ==>> special
    "/\w+" - end id of group op
    ":\w+" - begin id of stmt block
    "^\w+" - refer to a defined id
    ">\w+" - new id in local scope, ie. in user defined lambda expr framework
    "`\i\S*`" - infix op
"\p+(_\S+)?" ==>> binary op / infix
    <=_set - set lt; not total ordering
    <=_|
"\i\S*" ==>> id
    i.e. abc'  isXX?
(literal<no-space>"_"<no-space>)+ <no-space> "\S+" ==>> units
    i.e. "afsf"_decoder   12_hour 2000_1_1_yyyymmdd [1, 3]_xxx






