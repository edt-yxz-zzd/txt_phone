
class (A t, B t) => A_B t where ...


e.g.
    class Div<n> : int
    {
        Div<n>(int i):
            requires:
                i % n == 0;
    }
    
    class (T extends Div<m>, T extends Div<n>) => T extends Div<lcm(m,n)>;
    
    // anonymous
    // if T extends A and T extends B ==>> T extends \:{A,B}
    // default \:{A,B} has an empty body but user can offer a definition
    // \:{A,B} is an interface
    T extends \:{A,B}
    {
        override A::f(); // exist A::f
        new_method g(); // no A::g or B::g
        
    }
    
    class C : A{}
    class D : B{}
    class E : D, C
    {
        // exists \:{A,B}::g 
    }


