

don't use star import
    since if some imported packages add new entries, 
        new ones may collision exist entries

redirect by ancestor package
    package xxx.yyy; // may become a.b.c
    import zzz.ttt; // may become d.e.f

method collision:
    NOTE: base classes methods are start imported in C++/Java/Python
    
    we may:
        1) import explicitly: "using Base::xxxx;"
        2) refer as "Base::xxxx"
            e.g. 
            class Derived{
                void f()overried Base::f;
            } d;
            d.Base::f(); // call Derived::f which override Base::f
            
        yet, some public base method may not visible from derived!
            which we have to call derived.Base::method()
        // now we implement interface by using other as a member is more easier
    
    on the caller side:
    redirect!
        on top of module
            redirect Derived{
                using Base::xxxx;
            }
        or redirect by parent package
        now, "d.xxxx" ==>> d.Base::xxxx
        

nonvisible entities "as-if" not exists
    private members should not complaint collisions
    







