
curry space call : f a
    -- lazy?
touch call : f(a)
    -- strict?

pair op:
    1) begin op "\w+`"; end op "`{...}"
        sum` ... `{x <- xx | p(x)}
    or 2) begin op "\w+~"; end op "{...}" or "~(...)" or "~\w+"
        sum~ ... {x | x in xx, p(x)}
        sum~ expr(x) {x <- calc ...} -- the name "x" is exported to the expr
        sum~ ~(fmap expr $ calc ...)
        sum . fmap expr $ calc ...

        ::= sum [expr(x) | x <- calc ...]
            -- but insert "expr" into "[]" will make things ugly
            --  if there many "sum"

            sum [product [expr x y | y <- ys...] | x <- xs...]
            sum~ product~ expr x y {y <- ys...} {x <- xs...}
            sum . fmap (\x-> product . fmap (expr x) $ ys...) $ xs...

not op : re"`\W+`"
op : re"\W+" | re"`\w+`"
prefix unary op : re"[^\w~]\W*~" | "~"
suffix unary op : re"~\W*[^\w~]"
infix binary op : re"(?!~)\W+(?<!~)"

::= -- def
<==> -- iff / if and only if
==>> -- deduce -- |-*
<<== -- if

-->> -- implies / only if -- a -->> b <==> ~a \/ b
    -- a -->> b \/ c ::= (a-->>b)\/c
    -- a ==>> b \/ c ::= a==>>(b\/c)
<<-- -- if
<-->
\ ... -> ... -- def a function
_L -- bottom // false
T -- top // true



is/equal
    ===
    =/= -- not ===
equivalence
    [=x=] -- equivalence class of x
    ~=~ -- [=lhs=] === [=rhs=]
    ~/~ -- not ~=~
partial ordering compare
    ~<~
    ~<=~ -- ~<~ or ===
total ordering compare
    < -- =/= ::= < or >
    <= -- < or === <==> not flip <
set op
    |<-| -- in, member
    |<=| -- is subset of
    |==| -- set_eq
    /-\ -- intersection /\
    \-/ -- union \/
    \\ -- difference \-\ |--|
    
    /\-  -/\  \/-  -\/ -- biased op
        -- or /-\-  -/-\  \-/-  -\-/
        -- or /-\.  ./-\  \-/.  .\-/
    \-/~ -- unions
    /-\~ -- intersections
    
    \~\ -- complement
    `/-\` -- `||` -- `{}` -- empty set
    `\-/` -- `\~\` -- `~{}` -- universal set
boolean op
    /\  \/  /\~  \/~ -- && || (all id) (any id)
    -- ~ -- not ; but what `associates` should be??
    -- may assign ~ with special meaning
    \~ -- not
    


semigroup:
    >< -- mul; may noncommutative -- ?? >.< ??

    
    -- subclasses
    `>=<` -- identity <==> Monoid
    `><` -- zero; ??infinite?? (bad in ring)

    -- one "~" means "0->many"
    -- the other means "inv"
    >/~< -- right div; (a >/< d) >< d == a
    >~\< -- left div; d >< (d >\< a) == a
    ><~~ -- right_invs ::= (`>=<` >/~<)
    ~~>< -- left_invs ::= (>~\< `>=<`)
commutative semigroup
    \\ -- divides; a \\ b ::= [a|b] = exist c: c*a == b
    ~~ -- associates; a ~~ b ::= [a|b][b|a]
    >+< -- ><
    >+<~~ -- ><~~
group
    ><~ -- inv == ><~~
    >/< -- div == >/~<
comutative group
    >-< -- >/<
    >+<~ -- >+<~~

ring
    + -- add; >+<[Sum]
    - -- sub; >-<[Sum]
    +~ -- neg; >+<~[Sum]
    `<>` -- zero == `><`[Product] == `>=<`[Sum]
    
    -- subclasses
    `|` -- one == `>=<`[Sum]
    `-|` -- neg one == +~ `-|`
commutative ring
    * -- mul; ><[Product]
division ring
    *~ -- inv but 0 == (`|` />) == (<\ `|`)
    <\ -- left div
    /> -- right div
field
    / -- div but 0 == />





