
e.g. Iterable ==>> Iterator



class To<C> a where
    convert :: C c => a -> c

class C a => To<C> a where
    convert = id
    

_f :: C c => c->b
f :: To<C> a => a -> b
f a = _f (convert a)


class Iterable e a where
    iter :: Iterator e it => a -> it
class Iterator e it where
    next :: it -> Maybe (e, it)

class Iterator e it => Iterable e it where
    iter = id


class Iterable e a => To<Iterator e> a where
    -- convert :: Iterator e it => a -> it
    convert = iter
_handleIterator :: Iterator e it => it -> IO()
handle :: To<Iterator e> a => a -> IO()
handle a = _handleIterator (convert a)

