

0. unique id
    only [xx invisible root] are unique
        [...] == temporary local physical path | complex and long string
1. total control
    my own package
    [my invisible root ->] my_package.(subpkg.)*name
    [my invisible root ->] his_package_alias.(subpkg.)*name
    redirect
        [his invisible root] his_package -> [my invisible root].his_package_alias

    after redirect, pkg name is in total control in [my invisible root]
    ==>> no standard id!
    we can not get full qualified id as a string!
    or a temporary id string (from temporary local physical path)
    standard tail id of my_package which is under total contral:
        module Container_base (ContainerT) where ...
            qualified ContainerT with module Container
            or rename ContainerT to Container.ContainerT
        module Container (ContainerT) where
            import Container_base
            -- handshake with above
            def ContainerT = Container_base.Container_base

        ------ or
        module Container_base where
            place ContainerT in Container
        module Container where
            slot ContainerT from Container_base

        ------ or
        module Container_base part_of Container where ...
        module Container include Container_base where ...

2. package inteface -- like Haskell type class
3. visible
    export:
        public -- place in public domain
        export xxxx

        protected
        export xxxx to other_pkg/module/this_pkg/subclass/friend_class/group
            -- group i.e. namespace or group of pkgs/objects

        private -- anonymous namespace / static
        export xxxx to this_file/this_namespace/this_class_scope

    import:
        import pkg (name as name')
        import {name,...} from (pkg...) -- from anyone, first wins
        import (name,...) from (pkg...) -- as a whole from anyone, first wins

        import xxx from ... to (class, submodule, function, unique file labeled object/scope)



