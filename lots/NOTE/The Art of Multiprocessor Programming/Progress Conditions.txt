3.7 Progress Conditions
[page 59]

[blocking]
    an unexpected delay by one thread can prevent others from making progress.
    
[nonblocking]
    any pending invocation has a correct response
    an arbitrary and unexpected delay by one thread (say, the one holding a lock) does not necessarily prevent the others from making progress.

[wait-free method]
    A method is wait-free if it guarantees that every call finishes its execution in a finite number of steps.
    // but we don't know how long?? or just nonblocking and will return??

[bounded wait-free method]
    bounded wait-free if there is a bound on the number of steps a method call can take.

    This bound may depend on the number of threads.

[population-oblivious method]
    A wait-free method whose performance does not depend on the number of active threads is called population-oblivious.

[wait-free object]
    an object is wait-free if its methods are wait-free


Being wait-free is an example of a nonblocking progress condition
wait-free algorithms can be inefficient


[lock-free method]
    A method is lock-free if it guarantees that infinitely often some method call finishes in a finite number of steps.
    // I donot know what you talk about

    !!! starve !!! compare with wait-free
    Lock-free algorithms admit the possibility that some threads could starve.
    As a practical matter, there are many situations in which starvation, while possible, is extremely unlikely, so a fast lock-free algorithm may be more attractive than a slower wait-free algorithm.


    // wait-free nonblocking progress inefficient
    // lock-free nonblocking starve   fast

    Chapter 6 Universality of Consensus::6.3 A Lock-Free Universal Construction
    [page 130]
        It follows that the only way a thread can repeatedly fail to add its own node to the log is if other threads repeatedly succeed in appending their own nodes to the log. Thus, a node can starve only if other nodes are continually completing their invocations, implying that the construction is lock-free.
    
    [page 199] 9.3 Concurrent Reasoning
        A method is wait-free if it guarantees that every call finishes in a finite number of steps.
        A method is lock-free if it guarantees that somecall always finishes in a finite number of steps.

[Dependent Progress Conditions]
    deadlock-free
    starvation-free
    // starvation-free should be deadlock-free
    // starvation-free < deadlock-free; 
    // i.e. starvation-free is stronger

    the deadlock-free and starvation-free properties.
    These properties are dependent progress conditions: 
        progress occurs only if the underlying platform (i.e., the operating system) provides certain guarantees. 
    In principle, the deadlock-free and starvation-free properties are useful when the operating system guarantees that every thread eventually leaves every critical section. 
    In practice, these properties are useful when the operating system guarantees that every thread eventually leaves every critical section in a timely manner.

    // why progress?? <<== does thread leave critical section? how long?
    // every thread eventually leaves every critical section (in a timely manner)



    Classes whose methods rely on lock-based synchronization can guarantee, at best, dependent progress properties. 
        Does this observation mean that lock-based algorithms should be avoided? Not necessarily. 
            If preemption in the middle of a critical section is sufficiently rare, then dependent blocking progress conditions are effectively indistinguishable from their nonblocking counterparts. 
            If preemption is common enough to cause concern, or if the cost of preemption-based delay are sufficiently high, then it is sensible to consider nonblocking progress conditions.


[dependent nonblocking progress condition]
    obstruction-free

    [executes in isolation]
        a method call executes in isolation if no other threads take steps.

    [obstruction-free]
        A method is obstruction-free if, from any point after which it executes in isolation, it finishes in a finite number of steps.

        lock-free should be obstruction-free
        lock-free < obstruction-free

        obstruction-free rules out the use of locks but does not guarantee progress when multiple threads execute concurrently.






[absolute progress condition] v.s. [dependent progress condition]
    Picking a progress condition for a concurrent object implementation depends on both the needs of the application and the characteristics of the underlying platform. 
        The absolute wait-free and lock-free progress properties have good theoretical properties, they work on just about any platform, and they provide real-time guarantees useful to applications such as music, electronic games, and other interactive applications. 
        The dependent obstruction-free, deadlock-free, and starvation-free properties rely on guarantees provided by the underlying platform. 
        Given those guarantees, however, the dependent properties often admit simpler and more efficient implementations.































