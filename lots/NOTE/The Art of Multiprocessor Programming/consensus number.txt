
Chapter 5 The Relative Power of Primitive Synchronization Operations

[page 105]
Corollary5.2.1. It is impossible to construct a wait-free implementation of any object with consensus number greater than 1 using atomic registers.
    The aforementioned corollary is perhaps one of the most striking impossibility results in Computer Science. 
    It explains why, if we want to implement lock-free concurrent data structures on modern multiprocessors, our hardware must provide primitive synchronization operations other than loads and stores (reads-writes).


[page 115]
Theorem5.7.1. Any RMW register in Common2 has consensus number (exactly) 2.
    Very informally, here is why RMW registers in Common2 cannot solve 3-thread consensus. 
        The first thread (the winner) can always tell it was first, and each of the second and third threads (the losers) can each tell that they were losers. 
        However, because the functions defining the state following operations in Common2 commute or overwrite, a loser thread cannot tell which of the others went first (was the winner), and because the protocol is wait-free, it cannot wait to find out. 


Theorem5.8.1. A register providing compareAndSet() and get() methods has an infinite consensus number.
