The Art of Readable Code::Further Reading


Books on Writing High-Quality Code
    Code Complete: A Practical Handbook of Software Construction, 2nd edition, by Steve McConnell (Microsoft Press, 2004)
        A rigorous and well-researched tome on all aspects of software construction, including code quality and more.
    Refactoring: Improving the Design of Existing Code, by Martin Fowler et al. (Addison-Wesley Professional, 1999)
        A great book that talks about the philosophy of incremental code improvements and contains a detailed catalog of many different refactorings, along with steps to take to make these changes with less chance of breaking things.
    The Practice of Programming, by Brian Kernighan and Rob Pike (Addison-Wesley Professional, 1999)
        Discusses various aspects of programming including debugging, testing, portability, and performance, with various coding examples.
    The Pragmatic Programmer: From Journeyman to Master, by Andrew Hunt and David Thomas (Addison-Wesley Professional, 1999)
        A collection of many good programming and engineering principles, organized into short discussions.
    Clean Code: A Handbook of Agile Software Craftsmanship, by Robert C. Martin (Prentice Hall, 2008)
        A book similar to ours (but Java-specific); explores other topics such as error handling and concurrency.


Books on Various Programming Topics
    JavaScript: The Good Parts, by Douglas Crockford (OReilly, 2008)
        We believe this book has a similar spirit to ours, even though the book isnt explicitly about readability. Its about using a clean subset of the JavaScript language that is less error-prone and easier to reason about.
    Effective Java, 2nd edition, by Joshua Bloch (Prentice Hall, 2008)
        A phenomenal book about making your Java programs easier to read and more bug-free. Although its about Java, many of the principles apply to all languages. Highly recommended.
    Design Patterns: Elements of Reusable Object-Oriented Software, by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley Professional, 1994)
        The original book on a common language of patterns for software engineers to talk about object-oriented programming. As a catalog of common, useful patterns, it helps programmers avoid the pitfalls that often happen when people try to solve a tricky problem on their own for the first time.
    Programming Pearls, 2nd edition, by Jon Bentley (Addison-Wesley Professional, 1999)
        A series of articles on real software problems. Great insights on solving real-world problems in each chapter.
    High Performance Web Sites, by Steve Souders (OReilly, 2007)
        Although not a book about programming, this book is noteworthy because it describes a number of ways to optimize a website without writing much code (in keeping with Chapter 13, Writing Less Code).
    Joel on Software: And on Diverse and &, by Joel Spolsky
        Some of the best articles from http://www.joelonsoftware.com/. Spolsky writes about many aspects of software engineering and has an insightful take on many related topics. Be sure to read Things You Should Never Do, Part I, and The Joel Test: 12 Steps to Better Code.


Books of Historical Note
    Writing Solid Code, by Steve Maguire (Microsoft Press, 1993)
        This book has unfortunately become a bit dated, but it definitely influenced us with great advice about how to make your code more bug-free. If you read it, youll notice a lot of overlap with what we recommend.
    Smalltalk Best Practice Patterns, by Kent Beck (Prentice Hall, 1996)
        Although the examples are in Smalltalk, the book has many good programming principles.
    The Elements of Programming Style, by Brian Kernighan and P.J. Plauger (Computing McGraw-Hill, 1978)
        One of the oldest books dealing with the issue of the clearest way to write things. Most of the examples are in Fortran and PL1.
    Literate Programming, by Donald E. Knuth (Center for the Study of Language and Information, 1992)
        We agree wholeheartedly with Knuths statement, Instead of imagining that our main task is to instruct a computerwhat to do, let us concentrate rather on explaining to human beingswhat we want a computer to do (p. 99). But be warned: the bulk of the book is about Knuths WEB programming environment for documentation. WEB is effectively a language for writing your programs as works of literature, with code on the sidelines.
        Having used a WEB-derived system ourselves, we think that when code is constantly changing (which is usually), its harder to keep a so-called literate program fresh than it is to keep your code fresh using the practices we recommend.





