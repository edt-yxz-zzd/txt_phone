设计：汉字部件的楷体字字形唯一描述符
始于[20191212]


一个抽象字可能有多个字形：
    书体：篆隶楷行草
    简繁
    异体字
    不同地区出版物字体不同
    #书同文？
    #笔画数可能不同
    #笔顺可能不同
    同一部件在字的不同位置可能会变形

一个字形可能对应多个抽象字：
    1. see: "book/数据/简繁对比/others/说「㝉（宁）」字.txt"
        or see: "NOTE/汉字/说「㝉（宁）」字.txt"
    繁：「寧（níng）」、「宁（zhù）」；「薴（níng）烯」、「苧（zhù）麻」
    简：「宁（níng）」、「㝉（zhù）」；「苧（níng）烯」、「苎（zhù）麻」
    繁：「檸（níng）」、「濘（nìng）」；「柠（chǔ）」、「泞（zhù）」
    简：「柠（níng）」、「泞（nìng）」；「？【⿰木㝉】（chǔ）」、「？【⿰氵㝉】（zhù）」

    2. 同一字形有时同时是“字”“偏旁”“笔划”，对应多个不同语义

笔顺可能不同
笔画的起折止可能有疑问

汉字部件的楷体字字形唯一描述符
    目标：
        1 字形->描述
            看见字形就可以描述之。
                （可以是从未发现的字、石碑上的异体字、手写的错别字、打入冷宫的死字、自己想象的生造字或待查询字）
            描述是唯一无岐义的，不会因为知识构成经验经历而不知怎么描述（不懂汉字的初学者）或描述出错（唯一性）。
        2 描述->字形
            由描述可以准确显示该字。
    注：
        之所以有这样的目标，主要是因为最近我对常见汉字(gb2312)进行粗略的拆分。基本只考虑上下结构与左右结构，因为定义良好，可直接组合成字。其它结构则需要“常识”。
            （其实也不一定真那么“定义良好”：上下结构－大小（最奇器亮京）、浅包围（春卷写）；左右结构－高低（明鸿班）、半包围（取魅））
            (graphical decomposition, not etymological (or historical) decomposition)

        我参考了已有的一些项目：
            * cjk-decomp
                http://cjkdecomp.codeplex.com/
                    cjk-decomp-0.4.0.txt
                https://github.com/amake/cjk-decom
                    cjk-decomp-master.zip
            * cjkvi、CHISE-IDS
                http://kanji-database.sourceforge.net
                http://kanji.zinbun.kyoto-u.ac.jp/projects/chise/ids/
                http://git.chise.org/gitweb/?p=chise/ids.git;a=summary
                    ids-67b94ff.tar.gz
                    snapshot
                http://www.chise.org/dist/ids/
                    chise-ids-0.25.tar.gz
            * CCD-TSV
                https://commons.wikimedia.org/wiki/Commons:Chinese_characters_decomposition
                https://commons.wikimedia.org/wiki/User:Artsakenos/CCD-TSV

        注意到一个问题，就是
            既然要拆分汉字，就要命名“部件”，不论整字还是部件都可能不在unicode里。
                自己命名的话，要保证不重复，要建立档案使该部件的字形与其它部件区分开来；
                如果unicode更新后包含该部件，为使项目数据库前后一致，就要将内部命名换成unicode编码，更改档案。
            不论是档案的建立、维护、还是不同项目之间的交流，都十分麻烦。从一开始就应该使用全新的“形象”编码方式，而非使用unicode或其它抽象编码方式。
        为了确认字形，有几种方案：
            1、图片或svg(glyphwiki.org)（类印刷体）；
            2、使用常见字拆开组合(unicode)（需：人工想象+汉字常识）；
            3、笔画类型+笔顺（需：汉字常识）（仅粗略区分）；
            4、含方向及相对位置的拓扑描述。
        第1、2种方案维护命名的唯一性需要大量的人工参与，最后可能还是需要第3、4种方案帮助。
        第3种方案因为只能作粗略区分，需要第1、2种方案甄别；即使每一个命名碰撞的对象总数不多，但命名不唯一的名字总数却可能很多，维护与交流还是麻烦。
        本设计（汉字部件的楷体字字形唯一描述符）采用第4种字形确认方案。
            * cjk-decomp
                用5个阿拉伯数字命名。
                字形确认方案为第2种。因为部件既在某字的拆解中，本身也是被拆解对象。
                bug:
                    某些部件已在unicode中，但还是用的内部命名。
                        37121 奏；凑右
                        37021 䍃；瑶右
                        37167 要；腰右
                        37079 覃；潭右
                        37094 暴；曝右
                        37324 函；涵右
                        37509 分；份右
                        38005 㣊；修右
                        37308 𢼸；微右二
                        91297 𡭴；隙右
                        37176 㐫；脑右
                        ……
                    某些拆分不合理：
                        鸿 ('a', ['氵', 38434])
                            -> ('a', ['江', '鸟'])
                            -> ('a', ['氵', '工', '鸟'])
                我在使用过程中，用第3种方案重新梳理。但因为自己对笔顺没信心，所以用的是“汉典”网站上给的笔顺。这也让我意识到笔顺是个坏东西，萌生了用拓朴结构来规避笔顺（第4种方案）的念头。
            * cjkvi、CHISE-IDS
                部件命名举例：
                    &CDP-8BF1;
                    &GT-K00264;
                    &U-i003+76D1;
                    &C6-2566;
                    &AJ1-04220;
                字形确认方案为第1种。似乎有部分引用：glyphwiki
                    https://glyphwiki.org/wiki/cdp-8bf5
                bug:
                    'U+5175\t兵\t⿱斤&GT-K00264;\t?' # 兵 = 斤兀 -> 丘八
                    'U+7C14\t簔\t⿱竹衰\t?'          # ⺮
                    'U+5DE4\t巤\t⿱巛囚&CDP-8D46;'
                    'U+38A4\t㢤\t弋?'
                    'U-000200A6\t𠂦\t⿻&CDP-8BF5;上十'
                    'U-000200B5\t𠂵\t⿻&CDP-8BF5;土&CDP-8BF1;'
                    'U-00020176\t𠅶\t⿰⿱𠅘丸':
                    ......

            * CCD-TSV
                旅 = 回 㫃 氏
                雗 = 回 倝 隹               # 即不直观又不一致
                雖 = 吅 虽 隹 # != 回 虫 唯

                疏 = 吅 疋 㐬 # != 吅 𤴔 㐬

                疑 = 吅 𠤕     又*疋        # 用的是第2种方案
                雜 = 吅 亠从木 隹

    目标导出要求：
        不得含笔顺
        不得含笔画起折止
        ======
        接没接触？日曰冒
        探没探头？入人，己已巳，夏各
        谁长谁短？土士
        竖还是竖撇？青月，辨，归坚临
        点还是捺？村，亲
        带不带钩？书，亲
        横还是提还是撇？徽系，七比匕𠤎，玨琴，月⺼⺝
        ……

    注意到：手写体比印刷体随意很多
        每一个字形是唯一的，如字符串。
        手写体、查询体是模糊的，或是字形集合，如正则表达式。
            每一个unicode汉字对应一个模糊体。
            用户输入某个特定字形（相当于含一个元素的集合）或模糊体，对应所有交集不为空的汉字。

    “谁长谁短？土士；接没接触？日曰冒”
        用户输入时很难注意到这些性质，下面不予考虑。
        相当于同一字形对应多个抽象字。


每一部件都在一个方框里，这个“虚拟方框”的四个顶点 必须指出。
端点、转折点、交点、疑似交点、有用的延长线交点 必须指出。
只考虑“线段”，不考虑“笔画”，也就是上面的“点”的连接，弯、折变成多个线段。
只考虑“倾斜方向”，不考虑“书写方向”（笔顺方向），只有四个方向：水平[横]、竖直[竖，向上钩]、左倾[点，捺，向左上钩]、右倾[提，撇，向右上钩]。
[deprecated]
    添加“辅助线”（虚线），将“虚拟方框”切成多个“凸多边形”（顺时针），内部无“点”。
    #这个“凸多边形”的思路源之于“阝”，它的弯钩含两条左倾线段，需要区分它们的倾斜角度。

命名点、重合点、命名方框
    命名方框名用作点命名的前缀
    唯一性：由程序实现标准化
    赋名的好处在于方便用户输入，以及模块化。

字形与方框的关系：
    正常“回”字型
        也即不满框，不接触边界。
        比如“明”字，左右结构，两部分都不能满框，整字也不满框。
    接触边界型
        用于构造更复杂的结构。
        土士 = V十一
    但是以上很难使用。
    使用以下函数：
        放大至填满方框[@1]
        顺时针九十度[@1]
        回字缩小[@1]
    默认字形“放大至填满方框”
    默认方框“export outbox (1,2,3,4)”
        # (1:topleft, 2:topright, 3:bottomright, 4:bottomleft)

X轴向右，Y轴向下
    顺时针方向将依次遍历第一二三四象限（相当于数学课本中的逆时针）
虚点的作用
    虚点在最终的标准化表达中，不应该存在，因为用户能发现同一套“实点”已属不易，不能指望还能发现同一套“虚点”。
    但虚点也有用，可以减少人工输入量。
        1. 实现“虚拟方框”的四个顶点。对于两个不连通的部件，在不使用虚点时，人工输入量为M*N。（但也可使用集合表达：{A,B}<{C,D}）
        2. 使表达更直观（己已巳？“暴”字底中心、飞习）
        3. 同一连通部件内部，用以表达模糊字形（接没接触、探没探头）
    注：#发现同一套“实点”#
        用户当尽量减少实点数量：
            * 接没接触？
                为了方便用户查询，模糊字形当包含不接触。
                但用户本身原则上不该略去接触点（即明知接触，但将其当作不接触）。
                    #四黑、日曰、水暴、凶
                端点接触其它边，并不会增加实点数，反而可能减少，接触点是原有的实点。
            * 三线共点。
                斜线过不过、触不触：折点、交点（木）、接触点（老）？
                “黑”“墙”中的倒“八”，模糊字形当包含其端点重合其它实点的情况。

==================== ver1[deprecated]
==================== ver1 begin
最终展开后的表达为：
    #有效点 = 不重合的实点 + 最外方框顶点 # 此定义无用？
    有效点之间XY坐标各分量之间的完全比较
        # 为何不只是“实点”？有时实点与方框顶点有“=”的可能
    分量的比较关系：
        < = >
        <= >=
        >=< # 无关，无法比较
    实点间的实线段

    ？点重合
    点在线上，共线点的偏序（两个方向各排一次）：
        ~<~
        ~<=~
    经过同一点的所有线段（多于3时）的顺时针次序（循环）？

标准化步骤
线性字符串化步骤


标准化步骤
    #这里实点专指不重合的实点
    对给定的任一排序（实点排序+实线段排序），进行如下步骤：
        表一：不重合的实点*不重合的实点：之间有没有实线段
        表二：有效点*有效点：实点X坐标比较
        表三：有效点*有效点：实点Y坐标比较
        集合一：至少有三个不重合的实点的所有直线
        映射一：至少有三条不同直线经过的所有实点 -> 经过该点的所有直线的有序集合
        #直线表达为：实点的有序集合
        #过同一点的直线的有序集合？
        #   第一个依前面输入的排序选
        #   其它则按拓朴顺序，但有的不能比较，则依第一个的选择法。
        #在同一线上的点的有序集合？
        #   有两个方向，从结果选一个
        #   任一方向：（可能是不连通DAG）依拓朴顺序，不能比较则按输入的次序。

    实点排序==>>实线段排序

    ？实点排序？
        * 所有组合，但太慢。
        * X分量排序，无法比较时产生分枝。
        * 连通部件之间先排序（有分枝），再内部X分量排序（有分枝）。

==================== ver1 end
==================== ver2 begin
反对ver1：
    坐标分量“=”：
        左倾、右倾是模糊的、多角度的，如“阝”，竖直、水平也应如是。
    坐标比较<==>与水平线的夹角范围

两点关系：之间有无实线段
三点关系：共线或顺时针三角形或逆
    <==>点线关系：点在有向线段的左侧或右侧或共线
多点共线细节：线上次序（某一方向上的先后次序形成不一定连通的DAG）

两线关系：两有向线段的夹角范围（除非同线，否则夹角不得精确）
    <==>线的方向
三线关系：有无共点；有两同线或顺时针或逆
多线共点细节：顺时针循环次序

点的位置<==>三点关系+多点共线细节
线的位置<==>点的位置+线的方向+三线关系+多线共点细节


夹角范围：
    以八分之一平面为最小单位：2*pi/8
    不存在精确夹角（共线除外）
        #不存在平行（共线除外）、垂直关系
        但是“结构模板”“输入框”“输出外框”等网格的纯虚线则可以且必须！
    -1表示前进方向左侧45度（逆时针）= 7 = -9 = 8*n-1
    +1表示前进方向右侧45度（顺时针）= -7 = 9 = 8*n+1
    范围的表示：(mod8, mod8) # 顺时针范围
        (-1,+1)：从左侧45度顺时针扫到右侧45度
        (+1,-1)：从右侧45度顺时针扫到左侧45度
    相对X轴：
        水平向右：(7,1) = 前
        左倾向右下：(0,2) = 前右
        竖直向下：(1,3) = 右
        右倾向左下：(2,4) = 后右
    常用范围：
        90度：前、后、左、右；前右、后右、后左、前左。
        180度：前半、后半、左半、右半。
        45度：前右左、前右右、……#（90度范围）+[左右]

当使用方框组合嵌入时，因为没有垂直关系，只能是变形后嵌入：
    [deprecated]:#see below:网格
        指定3个顶点时：平行四边形
        指定4个顶点时：凸四边形；要求“凸”
        显式指出各点所分别对应的方框的顶点。
    不得镜像#防错
        需先显式镜像
    可旋转
        无所谓旋不旋转，因为一切都是相对方框而定义的，而嵌入的位置本来也不水平。

？“土”中“十”字的横的端点A可否比竖的底部端点B低？
    如果不能，则AB与X轴的夹角需给出。
        但引入虚线AB违反“对象实直观”的设计原则。
        如果所有虚线都显式列出，对用户而言又太沉重；不显式列出，因为不直观，用户根本不会想到。
        虚线可作提示，用于“显示字形”，但不应成为最终标准化输出的对象。
            只考虑局部状态，不考虑全局状态。 # [nonglobal]
    不连通的部件之间的位置关系显然需要虚线（只用于网格线）。
        （方框的作用只是减少输入）
        （大点、大碗、大洞）
        #？隔空对齐：“坐”中“从”？#无需
        #   本设计并不用来“计算笔画数”、“字内搜索部件”
        #   如果用网格：“土”2*3，“从”1*3，是可以直接加上的。
    浅包围（春卷写）半包围（同这）互包围（包喦）甚至可能需要虚端点辅助线。
        考虑下如何指定方框顶点？
        不像“可”字可直接利用“丁”的实点。
        “春”：
            用“”构建“𠰫”（虚“口”），再插入“日”得到“春”。
            “𠰫”中的虚“口”是“输入框”
        同理，“包”：
            输出外框：
                类似“输入框”
                “巳”需显式添加多边形虚外框（挖空“凵”即“凹”）
                “勹”需显式添加多边形虚外框（挖空“冂”即倒“凹”）
                通过合并2*3的网格，来设计输出框
            结构模板：
                类似上下结构有默认的“吕”字作模板，“包”字也需要这样一个结构模板来放置：
                -----------------
                |     A     | B |
                |   -----   |---|
                |   |   |   |   |
                |---|   -----   |
                | C |     D     |
                -----------------
                #BC两格是空的，AD用来放“勹巳”
                通过合并3*4的网格，来设计模板


最终展开后的结果：
    #方框顶点与边框另外处理？没必要，只需引入X轴（向右水平线）
    对象：
        点=实点
        线=有向实直线+向右虚水平线
        －－－－－－－－－－－－－
        实点
            不重合的实点
        有向实直线
            不重合的直线，须带有实线段
            其上任一实点须在其上的某一实线段上
                # 防止隔空对齐某点
            其上所有实点须相连 # [link_all]？
                # 防止隔空对齐线段
    关系：#2F<N> - 2:ver2, F-field
        #(点*点) -> 相连否  # 定义线段 <<== [link_all]
        2F1. (点*有向实直线)->(在其上｜未知)
            # 定义直线
            每条直线至少两个不同点
            两条不同直线不得有两个不同共点

        2F2. (有向实直线) -> (其上点*其上点) -> (=｜<｜<=｜>= | > | >=<)
            (重合｜先｜重合或先｜重合或后｜后｜未知)
            # 定义直线内部向
            任一实点在任一经过它的直线上不得全是“>=<”
            不得有：a[0] <= a[1] <= ... <= a[n] <= a[0] # n>=0
            #DAG
        2F3. (有向实直线) -> (非其上点) -> (左半｜右半｜未知)
            # 部分隐式虚线作用，只能确定左右侧

        [move_xy_012]:
            2F4. (有向实直线*{X轴}) -> (夹角范围)
                #2 xy
                用以画只有一条线的情况，如“一”“丶”
            2F5. (点) -> (其所在线*其所在线*xy) -> (顺时针｜逆时针｜重合｜未知)
                #1 xy
                用以排序只有两条线且与X轴夹角有重叠的情况，如“阝”
            2F6. (点) -> (其所在线*其所在线*其所在线) -> (顺时针｜逆时针｜有重合)
                #0 xy
                局部嵌入方式完全已知 <<== 部件必是平面图
            推算与检查：
                #最简单的是让用户提供一个可能的cfg
                let z = 顺时针 #或 逆时针
                    z' = 逆时针 #或 顺时针

                # len(a..b) >= 0; (b..a) = reversed(a..b)
                [reverse]: z'(a..b,c) ==>> z(c,b..a)
                [shift]: z(a..b,c) ==>> z(c,a..b)
                [delete]: z(a..b,c) ==>> z(a..b)
                [insert]: z(a,b..c,d)/\z(d,x,a)/\[d!=a]/\[x not in (b..c)] ==>> z(a,b..c,d,x)
                [排中律]: z()/\z(a)/\z(a,b)/\[z(a,b,c)\/z(a,c,b)]
                ......????enough????
                不断依上面的公式推算，直到：
                    1 找到一个cfg，满足所有约束
                    2 cache状态不变：
                        #长可使短，短可使长，调到长为n
                        let n=总数 in state=/\~ {\/~ op z(args{n}...) | op <- {id,not}}
                        # 使用“排中律<n>”
                        let n=总数 in state=/\~ {\/~ z(args{n}...)}
                        找到一个z(a,b,c)未知的，设定它的值并记录，继续。
                    3 值发生碰撞：
                        在2之前，用户错
                        在2之后，公式不完备


        -----------------------------------------------------------
        #[deprecated by move_xy_012]#
        #[move_xy]: (点) -> (其所在线*(其所在线+xy)*(其所在线+xy)) -> (顺时针｜逆时针｜有重合｜未知)
            无xy或是2 xy时不得“未知”
            xy = {0,1,2,3} = {0度X轴，45度，90度Y轴，135度}
        -----------------------------------------------------------
        #[deprecated by move_xy]#
        #(有向实直线*{X轴}) -> (夹角范围)
        #(点) -> (其所在线*其所在线*其所在线) -> (顺时针｜逆时针｜有重合)
        -----------------------------------------------------------
        #[deprecated by nonglobal]#
        ##[nonglobal]## ##(线*线*线) -> (顺时针｜逆时针｜未知)
            # 有两线重合时=>未知
        ##[nonglobal]## ##(点*点*点) -> (=｜<｜<=｜>=｜>｜>=<)
            # (共线｜顺时针｜共线或顺时针｜共线或逆时针｜逆时针｜未知)
            # 部分隐式虚线作用，只能确定左右侧
        ##[nonglobal]## ##(点*点*{X轴})->(线段｜夹角范围｜未知)
            # 部分隐式虚线作用
        ##[nonglobal]## ##？(点*点*点) -> (共线0｜共线4｜共线夹角未知｜夹角范围｜夹角未知)？
            # 部分隐式虚线作用
            # 和显式虚线比，少了三线关系、与X轴夹角、不能确定任两虚线夹角#(点*点*点*点)


以上是用于单个连通部件，若用于整字，则恐数据太大。部件之间应使用网格粘合。
===================================== ver2 end


