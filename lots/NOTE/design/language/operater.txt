

if[] :: Bool -> a -> a -> a
if[b] else then = ...
else `if`[b] then
else `if`[b] (else2 `if`[b2] then2)
infixr `if`[]

+[][] :: a -> b -> c -> d -> r
c +[a][b] d = ...
infixr +[][] == `if`[]  -- DAG ordering

+{}[] :: {?by :: By, ...} -> a -> b -> c -> r
b +{?by=?by, ...}[a] c = ...
infix +{}[]



type application
@ a -> b
    === forall a b. Proxy a -> b

prefix
+@ :: a -> b
+@ a = ...

postfix
@+ :: a -> b
a @+ = ...

