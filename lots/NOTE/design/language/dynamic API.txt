
add1 :: Integer -> Integer
add1 :: UInt -> PInt
add1 :: (a<-Integer) -> (b<-Integer) ==>> [a < b]
add1 :: (a<-Integer) -> (b<-Integer) ==>> [a+1 == b]

find_first :: (Eq k, Iterable (k,v) x) => x -> Maybe v
find_first :: (Eq k, Iterable (k,v) x, Sized x) => (c<-x) -> Maybe v ==>> time:O(len c) * (next{<type(iter c)>} + (==){<k>})
find_first :: (Ord k, Sorted c by fst) => (c <- Array (k,v)) -> Maybe v ==>> time:O(log (len c)) * (index{<Array(k,v)>} + (<=){<k>})
    # big-O
    #   more common and important and complecate in graph algorithm

how?
    API is public
    implement was public too

    public to who??
    some API/implement is protected, not for all.

    * concept implement
        i.e. given a definition
        all API can be derived
        e.g.
            add1_sub1 :: Integer -> (Integer, Integer)
            add1_sub1 :: (a<-Integer) -> (b<-Integer, c<-Integer) ==>> [a+1==b, a-1==c]
    * facet implement
        one concrete implement can satisfy many facet implements
        add1_sub1 :: (a<-Integer) -> (b<-Integer, c<-Integer) ==>> [a+1==b]
        [facet implement] exists f. add1_sub1 a = (a+1, f a)
            we can public this facet implement
            and other one can use this facet implement to proof some conclusion



