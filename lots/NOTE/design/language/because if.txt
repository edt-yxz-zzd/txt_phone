
assume [assumption]
    ??[assumption]
since  [condition]
    !![condition]
assert [conclusion]
    ![conclusion]
    =>[conclusion]
    ==>>[conclusion]
to prove [proposition]
    ?![proposition]
to disprove [proposition]
    ?! not [proposition]
question [proposition]
    ???[proposition]???


because/since ==>> so/hence:
    !![given condition]
        ![condition]
    !![old conclusion]
        ![new conclusion]
if/assume ==>> then:
    ??[assumption]
        ![condition]

question:
    ???[question]???
    ???[hypothesis]???

proposition:
    [proposition] ::=
        [? element <- set. [proposition]]
            # exist

        [@ element <- set. [proposition]]
            # all

        [predicate]
            #predicate ::= boolean_expression
            #boolean_expression = expression which return boolean

    expression ::= function argument*
                | prefix_operator argument
                | argument binary_operator argument
                | let name = expression in expression
    argument = expression
    function ::= defined_function_name
                | \ parameter <- set. expression
    prefix_operator ::= not | ...
    binary_operator ::= and | or | -->>
                    | in | <- | not in | <-/-
                    | == | =/=
        # -->> : assumption-implies-conclusion
        # <- : element-in-set
        # == : element-equals-element


