
OOP relationship
    examples:
        a cat is a kind of pet (inheritance / generalization association)
        owners feed pets, pets please owners (association)
        a tail is a part of both dogs and cats (aggregation / composition)
            a man has two heads or two men share one body
    * IS-A relationship (Inheritance)
    * Has-A relationship (Association)
        Composition <: Aggregation <: Association
        IS_MADE_UP_OF (Composition) <: OWNS_A <: USES_A (Aggregation) <: Association
        * Aggregation
            B exists independently (conceptually) from A
            * USES-A
                A "uses-a" B = Aggregation
                many-to-many
                lifetime
            * OWNS-A # ????
                01-to-many
                father owns a child
                husband owns a wife
                    # wife may change husband
                USA owns Alaska
                    # Russian Empire owned Alaska
                    USA may lose Alaska
            * IS-MADE-UP-OF (Composition)
                # part-whole relationship
                # B "is-part-of" A
                A "is-made-up-of" B = Composition
                    B has no meaning or purpose in the system without A
                ??01-to-many??
                    not that true
                    1) B cannot change its A
                        ??Alaska is-part-of Russian Empire or USA??
                    2) lifetime
                        ??child is part of father
                        ??wife is part of husband
                        ??room is part of house

                        incomplete A object conceptually is born before incomplete B object
                        complete A object conceptually is born after complete B object
                        complete A object conceptually dies before complete B object
                        incomplete A object conceptually dies after incomplete B object
                        incomplete A birth < incomplete B birth
                        < complete B birth < complete A birth
                        < complete A death < complete B death
                        < incomplete B death < incomplete A death



https://softwareengineering.stackexchange.com/questions/61376/aggregation-vs-composition
    Aggregation differs from ordinary composition in that it does not imply ownership. In composition, when the owning object is destroyed, so are the contained objects. In aggregation, this is not necessarily true.
https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-aggregation-vs-composition/
    Generalization vs Specialization
    The UML diagram's Generalization association is also known as Inheritance.
