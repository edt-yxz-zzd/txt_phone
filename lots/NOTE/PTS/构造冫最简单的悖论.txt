
e ../lots/NOTE/PTS/构造冫最简单的悖论.txt

[RussellSet<set_set> =[def]= {set | [set :<- set_set][not$ set <- set]}]
[PowerSet<whole_set> =[def]= {subset | [subset :<- AllSet][subset |<=| whole_set]}]
[RussellSet<set_set> |<=| set_set <- PowerSet<set_set>]
[RussellSet<set_set> <- PowerSet<set_set>]


[[PowerSet<set_set> |<=| set_set] -> [RussellSet<set_set> <- set_set]]
[@set_set. [PowerSet<set_set> |<=| set_set] -> [rs := RussellSet<set_set>] -> [[rs <- rs] <-> [not$ rs <- rs]]]
    [[proof:
    !! [RussellSet<set_set> <- PowerSet<set_set>]
    !! [PowerSet<set_set> |<=| set_set]
    [RussellSet<set_set> <- set_set]
    *[rs <- rs]:
      !! [RussellSet<set_set> =[def]= {set | [set :<- set_set][not$ set <- set]}]
      !! [rs <- rs == RussellSet<set_set>]
      [not$ rs <- rs]
      _L


    *[not$ rs <- rs]:
      !! [RussellSet<set_set> =[def]= {set | [set :<- set_set][not$ set <- set]}]
      !! [RussellSet<set_set> <- set_set]
      [RussellSet<set_set> <- RussellSet<set_set>]
      [rs <- rs]
      _L
    DONE
    ]]







[** :: **]:
  -- Bool = True|False
  [True := (@[T :: **] -> T -> T)]
  [the_True := (\[T :: **] -> \[x::T] -> x) :: True]
  [False := _L :: (@[T :: **] -> T)]

  [类型纟集合纟类型 := (** -> **) :: **]
      -- [(** -> Bool) :: **]
  [类型纟集合纟集合纟类型 := ((** -> **) -> **) :: **]
      -- [((** -> Bool) -> Bool) :: **]
  [欤集合牜自指扌 := (\[set::(** -> **)] -> set set) :: ((** -> **) -> **)]
  [Not := (\[T :: **] -> (T->False)) :: (** -> **)]
  [欤集合牜不自指扌 := (\[set::(** -> **)] -> ((set set)->False)) :: ((** -> **) -> **)]
  [集合纟不自指集合纟类型 := 欤集合牜不自指扌 :: 类型纟集合纟集合纟类型]
  [欤集合牜自指扌 集合纟不自指集合纟类型
    === (集合纟不自指集合纟类型 集合纟不自指集合纟类型) # !!
    === (欤集合牜不自指扌 集合纟不自指集合纟类型)
    === ((集合纟不自指集合纟类型 集合纟不自指集合纟类型) -> False) # !!
    ]
  [命题冫悖论 := (集合纟不自指集合纟类型 集合纟不自指集合纟类型)]
  [命题冫悖论 === (命题冫悖论 -> False)]
  [证明冫悖论 := (\[x :: 命题冫悖论] -> (x x)) :: (命题冫悖论 -> False)]
  [证明冫悖论 :: (命题冫悖论 -> False)]
  [证明冫悖论 :: 命题冫悖论]
  [证明冫此类型系统不真 := (证明冫悖论 证明冫悖论) :: False]
      -- [sound vs complete]
      -- [可靠性 vs 完备性]
      -- [健全性 == 可靠性+完备性]
      --    #但两者不可兼得，取可靠而舍完备
      --
  -- 可见:重点在于构造出『自指类型』/『递归函数』
  --    [命题冫悖论 === (命题冫悖论 -> False) === ((... -> False) -> False)]

  -- 展开式:
  [命题冫悖论
    === (\[set::(** -> **)] -> ((set set)->False))  (\[set::(** -> **)] -> ((set set)->False))
    === ((\[set::(** -> **)] -> ((set set)->False))  (\[set::(** -> **)] -> ((set set)->False)))->False
    === 命题冫悖论->False
    -- 类型不收敛:计算不停止
    ]
  -- 以下:无用:
  [全集 := (\[_ :: **] -> True) :: (** -> **)]
  [(欤集合牜不自指扌 全集) === ((全集 全集)->False)]
  [(全集 全集) === True]
  [命题冫全集不自指 := (欤集合牜不自指扌 全集)]
  [命题冫全集不自指 === (True->False)]
  [命题冫全集自指 := (全集 全集)]
  [命题冫全集自指 === True]

  [(欤集合牜不自指扌 全集 the_True) :: False]







