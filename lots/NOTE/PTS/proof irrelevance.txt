proof irrelevance
    proof_irrelevance asserts equality of all proofs of a given formula
    Definition proof_irrelevance := forall (A:Prop) (a1 a2:A), a1 = a2.

why?
    x <- X
    p1,p2 <- P x
    Q x p1 =?= Q x p2
    S (Q x p1) =?= S (Q x p2)


Big X P = ((x, eqX)<-(X, Eq X); p <- Proof x eqX P)
    where
        P :: X -> s
            P is a property of X to be proof
            s is a sort
        p - the proof is not a ghost
        p's type depend on (x, eqX)
BigFunc = [xep@(xe@(x,eqX); p) <- Big X P]
        -> [(xep2ye xep; xep2q xep) <- Big Y@(xe2Y xe) Q@(xe2Q xe)]
    where
        Y,Q depend on x,eqX, but not on p
        y,q depend on x, eqX, p
        eqY depend xe


List A = @R. R -> (A -> R -> R) -> R
null A = \R. \r.\f. r
con A a ls = \R. \r.\f. f a (ls r f)
finite_list A ls = @P. P (null A) -> (@a:A. @xs:List A. @finite_list A xs. P xs -> P (con A a xs)) -> P ls
    # finite_list A ls = ... is a type depend on the ls
    # finite_list A = ... is a lambda
    # list_ind    A = ... is a type
    # list_ind A = @P : List A -> * . P (null A) -> (@a:A. @xs:List A. P xs -> P (con A a xs)) -> @ls:List A. P ls

    # finite_list ref itself!!
    #   and cannot define obj of "@xs:List A. ..."

to proof:
    1) finite_list A null
    2) finite_list A ls -> finite_list (con A a ls)

    1) finite_null = \P. \pnull. \_. pnull   # : finite_list A null



