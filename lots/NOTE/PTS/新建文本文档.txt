what is s in A->(R:s)?
    it turns out that data is schema!

(zero-:a) -> (succ-:a->a) -> (@x:a. x ::succ x) -> (make Rules here) # ECC
@0,1,2,3:a. ... (HOL)
    b = @x:a. x is 0 | x is 1 | ...
    succb (x, <is0|||>= ...
    succb (x, <||is2|>= ...
    call ECC with b, succb
    note if 0 is 2, succb 0 = (1 or 3)

HOL 0 1 0 3 # i.e. 2 is 0
    the output term should be normal...
    until untyped lambda # each lambda object is an untyped obj!


term : type : sort
    means that the term is normal
    obj : type
        any term of type obj is normal
    anything can be a type, anything can be a sort, anything can have types(many!)
        but only it satisfited the above constraint.

    [obj : type1 : s][obj : type2] ==>> [obj : (type2, normal)]
        if type2 has some non-normal term


eq-class
ghost property
nondetermine eq-class
    to cut off external function relations, except those provided.
    if use other than given member operator/property, then the result is nondetermine too!



encode PTS in PTS
    PTS_interpreter :: String -> Maybe String
        if well typed, evalue and return Just value string.
    if PTS_interpreter exists, that is proof PTS is normal, then we ==> _L
    so, well typed is easy, but, to evalue cannot assert to stop.

SKIBC coding
    concrete tree:
        G = T
        G = T G
        G = ( G )
        G = ( G ) G
        T = S|K|I|B|C

    ast
        G = G G
        G = T
        T = S|K|I|B|C
    how many oriented binary tree?

CFG syntax tree counting (not sentence, unless non-ambigous...) for a given length sentence
    X never deriving to X again!
        forbid:
            X = X

            X = U
            U = A X
            A = ''

UInt -> k UInts
    n = sum uints
    choose (k-1) (n+k-1) for layer n
