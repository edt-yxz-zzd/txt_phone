A Modern Perspective on Type Theory -- From its Origins until Today (2005)(Fairouz Kamareddine)
    [page 118] 4 Propositions as Types and Pure Type Systems
        #  Luo's Extended Calculus of Constructions ECC (see [3])
        def ECC = PTS with
                    Sorts = Natural                     # 0 is a sort
                    Axioms = {(n, n+1) | n <- Natural}  # n : (n+1)
                    Rules = {(m,0,0) | m <- Natural} \-/ {(i,o,f) | i,o,f <- Natural, f >= max(i,o)}

    [page 123] 4c Pure Type Systems
        Theorem 4.40 (Strong Normalisation for ECC)Let A be a legal term in the Extended Calculus of Constructions. Then A is strongly normalising.
    Bibliography
        [1] S. Abramsky, Dov M. Gabbay, and T.S.E. Maibaum,editors. Handbook of Logic in Computer Science, Volume 2: Background: Computational Structures.Oxford University Press, 1992.
        [3] H.P. Barendregt. Lambda calculi with types. In [1], pages 117â€“309. Oxford University Press, 1992.
        An Extended Calculus of Constructions (1990)(Zhaohui Luo)(PhD thesis)
        Perspectives in Logic

======================= more =======================
"An Extended Calculus of Constructions (1990)(Zhaohui Luo)(PhD thesis)"
    2.2.3 Non-propositional types and predicative universes Type[j]
        Prop ~<=~ Type[0] ... Type[i] ~<=~ Type[i+1] ...
            Prop is the impredicative universe
                propositional types reside Prop
            Type[i]s are predicative universes
                non-propositional types reside Prop

        Furthermore, by rule (~<=~), we can infer that every object of type Prop is an object of type Type[0] and every object of type Type[j] is an object of type Type[j+1].
            # i.e. [A:T:S] ==>> [A:S]
            # ?require A is a type/universe? or arbitrary object?

        Therefore, the universes Type[3] are predicative in the sense that there is no circularity in formations of non-propositional types. This predicativity will be made formally explicit in chapter 4 and is essential for ECC to be logically consistent and not to suffer from logical paradox. For example, if Type[0] were closed for arbitrary dependent product types as Prop does, Cirard's paradox [Cir72][Coq86a] could be deduced.
            # i.e. require:
            #   [context |- A:K1][context++[x:A] |- B:K2]
            #       |- [context |- @x:A. B : K3]
            #       |- [context |- ?x:A. B : K3]
            #       where K3 = max{Type[0], K1, K2}
            #   NOTE: Type[0] in the "max" to avoid resulting Prop.
            #       since Prop is a impredicative propositional universe.
            #





