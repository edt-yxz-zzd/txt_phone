
given type x, can we construct a variable of type x?
    what variables we have?
        e.g.
            3 :: Int        -- so we have some x::Int
            () :: ()
            True :: Bool
            -- no bottom/_L of course:
            --      undefined :: a
        assumption:
            exist x: x :: Int
    what functions/combinators we have?
        e.g.
            -- id :: a -> a
            -- flip (.) ::(a->b) -> (b->c) -> (a->c)

            combinators:
                K :: a -> (b->a) -- const
                S :: (a->(b->c)) -> ((a->b)->(a->c))
                    -- compare with application
                    -- ($) f  a    = f      a
                    -- S   f_ a_ x = (f_ x) (a_ x)
            modus_ponens/detachment :: (a->b) -> a -> b -- ($) application
        axioms:
            

https://en.wikipedia.org/wiki/Curryâ€“Howard_correspondence

