-- ReaderMonad!! StateMonad!! Monad as Container...

true x y = x
false x y = y
    -- true $$ f x $ g h
    -- ($$), ($) :: (a->b) -> a -> b
    -- infixr $$ 1
    -- infixr $ 0
and x y = x y x
or x y = x x y
not x = x false true












n0 f x = x
n1 f x = f x
n2 f x = f (f x) = f (n1 f x) = n1 f (f x)
n<N> f x = f (n<N-1> f x) = n<N-1> f (f x)
succ n<N> f x = n<N> f (f x)

pred n<N> f x = n<N> (\g h->h $ g f) (const x) id
pred n0 f x = n0 (\g h->..) _1 _2 = _1 _2 = const x id = x = n0 f x
    pred n0 = n0 !!!!!!!!!!
pred n1 f x = n1 (\g h->..) _1 _2 = (\..) _1 _2 = _2 $ _1 f = x = n0 f x
pred n<N> f x = n<N> (\g h->..) _1 _2
    (\g\h..) . (\g\h..) = ??????
        f . (\g->h) = \g->f h
    (\g1->?1) . (\g2->?2) = \g2->(\g1->?1)?2 = \g2->(\g1\h h$g1 f) ?2
        = \g2->\h h$ ?2 f = \g2-> \h h (?2 f)
    n<N> (\g\h..) = \g -> \h h(\h h(..N..\h h(g f)..N..f)f)
    n<N> (\g\h..) g id = id (f(..N-1..f(g f)..)
        g f = x ==>> n<N-1> f x


    if...
    n<N> :: (~x->~x) -> (~x -> ~x)
    f :: x->x
    x :: x
    _1 = const x :: a -> x
    n<N> (\g h->...) _1 ==>> _2 :: g -> h -> y === (a->x) -> (a->x)
    g f ==>> g :: (x->x) -> z
    h (g f) ==>> h :: z -> y
    ==>> ((x->x)->z) -> (z->y) -> y === (a->x) -> a -> x
    ==>> x->x === a; z === x; z->y === a; y === x
    ==>> (a, y, z) === (x->x, x, x)
    g :: (x->x) -> x
    h :: x -> x
    (\g h->..) :: ((x->x)->x) -> ((x->x)->x)


