
coding
    tree coding
        labelled
        no label?
    error-correcting code
        finite field


eq if use only given operations and omit some effects, then result will be same(eq again??)
    eq if external fun only extract one aspect of object
        i.e.  a =[f,h]= b <=> exists g, (g . h == f) /\ (h a == h b)
    (obj, proof)
    subclass
    (vtable, obj)
    cpu times
        join
        consume
    spaces
        reuse

haskell class 
    per template: a minimal set
python
    1to1 transform
        object isinstance
        forward/backward * check/uncheck
        I/O type descriptor/checker/example-values
        int+int_rng_set
        tuple of same length
            dict with constant keys
        list of same type
            dict with same (key, value) type
        union
        tagged-cases
            (constant-tag, *obj)

graph
    planar
        isomorphism
        draw on grid
            3/4 degree max
            or using big vertex (a big black square over n^2 grid)
    3-connected
    SQRP-tree

    knot
    tree
sequence
    de Bruijn Sequence
        how many Eulerian Cycle?
    伯努利数列
    catalan
        number of paths over grid

group
    simple
polynomial
    irreducible polynomial
        represent elements of finite field
    continued fraction
        nth max real root of square-free polynomial without rational solution
            # 0th max
            floor(root(sum c[i]*x^i {i=0..d}, k)) = a0
            how many roots in (a0, kth max real root)? => k'
            floor(root(sum c[i]*(1/x+a0)^i {i=0..d}, k')) = a1


uint <-> uints{+ .. +}
    1) via pint
        p = II primes[i] ^ u[i];
        u = p - 1
        but:
            1) factorization is slow
            2) u will be too large
                [u0] => (2^u0 - 1)
    2) via bits
        bits = '1'.join('0'*u for u in uints)
        p = int('1' + bits, base=2)
        u = p - 1
        but:
            u will be too large
                [u0] => (2^u0 - 1)

    # u should be small: log u == O(L + sum log u[i] {i=0->L}) where L = len(uints)

    3) via blocks
        seperator string
            bits avoid '11' ==>> fibbonacci number system ==>> there fib[n+1] bits of len n
                ''                      1
                0 1                     2
                00 01 10                3
                000 001 010 100 101     5
        uints{+ 1..n +} <-> uints{+ n +} <-> uints{+ 0..n +} <-> uint
        uints{+ a, b..c, d.. +} <-> uints{+ 0..a, a+1..b..c, c+1..d.. +}=uints{+ .. +}
    4) via layers
        level :: [uint] -> uint
            for any u, exists N, sum uints > N => level uints > u
        layer :: uint -> Set [uint]
            level uints == u <==> uints in layer u

        ordered_layer :: Set [uint] -> [[uint]]

    5) via continued fraction >= 1
        uints1 <- one_more_uint uints
            uints1 :: uints{+ 1.. +}
            one_more_uint :: uints{+ .. +} -> uints{+ 1.. +}
        cf_ge_1 = map (1+) (uints1[1:] + [0])
        big, small = to_radio cf_ge_1
            big >= small >= 1, gcd(big, small) == 1
        gcd = uints1[0] + 1
        uint_pair = [gcd*big-gcd*small, gcd*small-1]
            uint_pair :: uints{+ 2 +}
        u = pair2uint uint_pair
            pair2uint :: uints{+ 2 +} -> uint




