
how many Eulerian Cycles for a given graph?
    https://en.wikipedia.org/wiki/Eulerian_path
    https://en.wikipedia.org/wiki/Eulerian_path#Counting_Eulerian_circuits
    The number of Eulerian circuits in digraphs can be calculated using the so-called BEST theorem, named after de Bruijn, van Aardenne-Ehrenfest, Smith and Tutte. The formula states that the number of Eulerian circuits in a digraph is the product of certain degree factorials and the number of rooted arborescences. The latter can be computed as a determinant, by the matrix tree theorem, giving a polynomial time algorithm.
    Counting the number of Eulerian circuits on undirected graphs is much more difficult. This problem is known to be #P-complete.[9] In a positive direction, a Markov chain Monte Carlo approach, via the Kotzig transformations (introduced by Anton Kotzig in 1968) is believed to give a sharp approximation for the number of Eulerian circuits in a graph, though as yet there is no proof of this fact (even for graphs of bounded degree).

un/directed graph
even degree/incoming degree == outgoing degree
a connected component with isolated vertices or empty graph
multi-edges
self-loops
XXX without edge label
    if with, assume (v[i] -> v[j]) edges have n0's label0, n1's label1, ...
    then => (NumberOfEulerianCycles graph_without_labels) * (choose (sum n[i] {i}) [n[i] {i}]) * ...
    where
        choose sum [a,b,c...] = sum! / (a!b!c!...) # and sum = sum [a,b,c...]
    ERROR!!!!!!!!!!!!!!!!!!!
    graph: only one vertex, many loops
        necklace instead of choose!!!
        necklace(length, alphbet_size) = 1/length * sum Euler_totient_function(length/d) * alphbet_size ^ d {d = 1..n | [d|n]}
        Euler_totient_function 0 = 1
        Euler_totient_function 1 = 1
        Euler_totient_function n = size {i=1..n | gcd i n = 1}

