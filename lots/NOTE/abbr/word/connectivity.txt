1-connectedness is equivalent to connectedness for graphs of at least 2 vertices.
    !!!!!!!!!!!!
    https://en.wikipedia.org/wiki/Connectivity_(graph_theory)


block = nonseparable graph = biconnected graph
    is_biconnected(any_graph[n<2]) = undefined
    K[2] is biconnected

cut-edge = bridge
    an edge of a not-necessarily-connected graph G whose removal increases the number of components
    edge cut set
bridged graph       -- at least one bridge
bridgeless graph    -- no bridges

cut-vertex = articulation vertex = cutpoint
    a vertex of a not-necessarily-connected graph whose removal increases the connected component count.
biconnected graph = num_vertices >= 2 & no cut vertices
    a vertex is an articulation vertex iff it appears in two biconnected components.

[G is disconnected]
    ==>> [complement(G) is connected]
    ==>> [G != complement(G)]
but [G is connected] ==xx==>> [complement(G) is disconnected]
    e.g. C[5] == complement(C[5])
[G == complement(G)] ==>> [G is connected]
    K[0] == complement(K[0])
    K[1] == complement(K[1])
    ==>> K[n<2] are connected

maximally connected = connectivity equals minimum degree
maximally edge-connected = edge-connectivity equals minimum degree.
edge-connectivity
    edge_connectivity(g) = the size of a smallest edge cut of g
    local_edge_connectivity(u, v) = the size of a smallest edge cut disconnecting u from v.
    k-edge-connected = edge connectivity is k or greater.
connectivity(vertex connectivity)
    it asks for the minimum number of elements (nodes or edges) that need to be removed to disconnect the remaining nodes from each other.
    cut(vertex cut)
        a set of vertices whose removal renders G disconnected.
        complete graph has no cut
    any graph G (complete or not) is said to be k-connected if it contains at least k+1 vertices, but does not contain a set of k-1 vertices whose removal disconnects the graph
    vertex_connectivity(g) =
        # ?? assume g is simple
        # ==>> ?? K[0] is (-1)-connected
        # ==>> ?? K[1] is 0-connected, hence disconnected??
        # ?? 1-connected ==>> num_vertices >= 2
        # ==>> ?? connected != 1-connected
        #   https://www.wolframalpha.com/input/?i=VertexConnectivity%5B%7B0-%3E0%7D%5D
        #   0 == VertexConnectivity[{0->0}]
        #   https://www.wolframalpha.com/input/?i=VertexConnectivity%5B%7B0-%3E1,1-%3E0%7D%5D
        #   1 == VertexConnectivity[{0->1,1->0}]
        (n-1)   if g = K[n]
        the size of a minimal vertex cut of g otherwise


    local_connectivity(u, v) = the size of a smallest vertex cut separating u and v.
        if undirected: local_connectivity(v,u)==local_connectivity(u,v)

    biconnectivity = 2-connectivity
    triconnectivity = 3-connectivity
    separable = connected but not 2-connected

    vertex_connectivity(g)
        >=1 <==> connected # ?? except any_graph[n<2]
        >=2 <==> biconnected
        >=3 <==> triconnected
        >=k <==> k-connected
        http://mathworld.wolfram.com/VertexConnectivity.html
    vertex_connectivity(g) <= edge_connectivity(g) <= min_degree(g)
    null graph and singleton graph are considered connected
        http://mathworld.wolfram.com/ConnectedGraph.html

    connected
    unreachable
    disconnected
    2 vertices:
        adjacent
        connected
    A graph is said to be connected if every pair of vertices in the graph is connected.
        ==>> null graph is connected?
    connected component
        a maximal connected subgraph
    weakly connected
    strongly connected
    strong component
        a maximal strongly connected subgraph


