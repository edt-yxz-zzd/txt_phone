
r'''
大衍筮法爻变概率分布 ~~ {6:1, 7:5, 8:7, 9:3}/16
-----------------------------from:
py 大衍筮法爻变概率分布.py 10
threshold=10
[(6, 0.06220568999997696), (7, 0.31257310858192955), (8, 0.4376922055651776), (9, 0.18752899585291594)]

~~ [(6, 0.0622), (7, 0.3126), (8, 0.4377), (9, 0.1875)]

approach_proportion.bat 622 3126 4377 1875
..., [(49, 247, 346, 148)], [(1, 5, 7, 3)], ...
'''


import random
import math
from abc import ABC, abstractmethod
from fractions import Fraction
from collections import defaultdict

def exact_div(n,d):
    q,r = divmod(n,d)
    if r != 0: raise ValueError
    return q

def choose(n, k):
    return math.factorial(n)//math.factorial(k)//math.factorial(n-k)
def 揲之以四(策数):
    奇 = 策数%4
    return 奇 if 奇 else 4
def is_概率分布(x):
    return (type(x) is dict
        and all(type(k) is int for k in x.keys())
        and all(type(v) is Fraction for v in x.values())
        and sum(x.values()) == 1
        )
def 概率分布2概率分布(总数2概率分布, 概率分布):
    assert is_概率分布(概率分布)
    d = defaultdict(Fraction)
    for n, p0 in 概率分布.items():
        概率分布 = 总数2概率分布(n)
        for n, p in 概率分布.items():
            d[n] += p0*p

    概率分布 = dict(d)
    assert is_概率分布(概率分布)
    return 概率分布

class 大衍筮法爻变概率类ABC(ABC):
    # 概率分布::{k:Fraction}
    # 概率分布::{策数:Fraction}
    # 策数::UInt[1..49]
    # sum 概率分布.values()==1
    大衍之数 = sum(range(1, 10+1))  # 55
    爻数 = 6                        # 6
    用数 = 大衍之数 - 爻数          # 49
    assert 大衍之数==55
    assert 爻数==6
    assert 用数==49

    def __init__(self, threshold):
        assert type(threshold) is int
        assert threshold > 0
        assert threshold < 16
        self.threshold = threshold
    @classmethod
    @abstractmethod
    def __choose_from_策数__(cls, 策数, sky_num):
        # UInt -> UInt -> (UInt|Fraction)
        raise NotImplementedError
    def 变4策数(self, 策数):
        # 策数 -> 概率分布
        assert type(策数) is int
        assert 0 < 策数
        threshold = self.threshold
        min_num = threshold
        max_num = 策数-threshold
        assert 0 < min_num <= max_num < 策数
        d = defaultdict(int)
        f = type(self).__choose_from_策数__
        for sky_num in range(min_num, max_num+1):
            ground_num = 策数-sky_num
            human_num = 1
            ground_num -= human_num
            扐 = 揲之以四(sky_num)+human_num+揲之以四(ground_num)
            new策数 = 策数-扐
            #
            count = f(策数, sky_num)
            d[new策数] += count
        total = sum(d.values())
        total = Fraction(total)
        概率分布 = {n: count/total for n, count in d.items()}
        assert is_概率分布(概率分布)
        return 概率分布
    def 变4概率分布(self, 概率分布):
        # 概率分布 -> 概率分布
        return 概率分布2概率分布(self.变4策数, 概率分布)
    @classmethod
    def make_大衍筮法爻变概率类(cls, threshold):
        return cls(threshold)
    @classmethod
    def calc_大衍筮法爻变概率分布(cls, threshold):
        self = cls.make_大衍筮法爻变概率类(threshold)
        策数 = cls.用数
        概率分布 = {策数:Fraction(1)}
        for _ in range(3):
            概率分布 = self.变4概率分布(概率分布)
        assert set(概率分布) == {4*营数 for 营数 in range(6,9+1)}
        概率分布 = {exact_div(策数, 4):p for 策数, p in 概率分布.items()}
        assert set(概率分布) == set(range(6,9+1))
        assert is_概率分布(概率分布)
        return 概率分布




class 大衍筮法爻变概率类__choose(大衍筮法爻变概率类ABC):
    @classmethod
    def __choose_from_策数__(cls, 策数, sky_num):
        # UInt -> UInt -> (UInt|Fraction)
        count = choose(策数, sky_num)
        return count




def main(args=None):
    import argparse

    parser = argparse.ArgumentParser(
        description='大衍筮法爻变概率分布'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('thresholds', type=int, nargs='+'
                        , help='threshold(min value for sky number) <- [1..15]')
    parser.add_argument('-m', '--method', choices=['choose']
                        , default = 'choose'
                        , help='sky number choose method')

    args = parser.parse_args(args)
    method = args.method
    thresholds = args.thresholds
    if method == 'choose':
        f = 大衍筮法爻变概率类__choose.calc_大衍筮法爻变概率分布
    else:
        raise logic-error
    for threshold in thresholds:
        print(f'threshold={threshold}')
        概率分布 = f(threshold)
        print(概率分布)
        概率分布f = {n:float(p) for n, p in 概率分布.items()}
        print(sorted(概率分布f.items()))

if __name__ == "__main__":
    main()

r'''
py 大衍筮法爻变概率分布.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threshold=1
{9: Fraction(15211796926865394983396966400000, 81129643250153162820333340721153), 8: Fraction(174225008013737383167916879301666353152000, 398227616554758601026315059272269168939593), 7: Fraction(3741421086389618565037576818174513429969566029922305, 11972622120691828060312526090398472652320788176699394), 6: Fraction(2475920511559731176179220481, 39614083599796607460074061826)}
[(6, 0.06250101697600405), (7, 0.31249805169441225), (8, 0.4375010691650021), (9, 0.1874998621645816)]
threshold=2
{9: Fraction(423939514216751926851900250073399060, 2261012404609696964697230311590371583), 8: Fraction(492586857858597620772616636316156640833560766, 1125910066457018636118866349951982087694757217), 7: Fraction(3363552939978164238472180891997774671759381550087589397, 10763436513414231933821224183475799505597478251537062090), 6: Fraction(31904032352795795065598105950921, 510456211697210902722533802439930)}
[(6, 0.06250101697600738), (7, 0.31249805169438616), (8, 0.437501069165014), (9, 0.18749986216459247)]
threshold=3
{7: Fraction(71564935967328199401740291054310831677339235269722643, 229009230076147998759789098001303072278545805021086590), 8: Fraction(723159407971900309107472471043064957309964952, 1652931766855157281809920955667450636811017455), 9: Fraction(601332642440029765925020596489600, 3207109788864018083927264059427597), 6: Fraction(678809198995655214161661828743, 10860767937697569657391240898870)}
[(6, 0.06250103150068406), (7, 0.31249804186290703), (8, 0.4375010647582703), (9, 0.18749986187813864)]
threshold=4
{6: Fraction(632625926363722905563065291, 10121847769708366821611259758), 7: Fraction(41711038181330309228952867235003599450375124533, 133476158546323631748373349319656320055637888746), 8: Fraction(36669501727065128337723049229452391590234, 83815799963028828836010276534578039261459), 9: Fraction(5945938998106915013185180584900, 31711698017682682225621355766647)}
[(6, 0.06250103150701211), (7, 0.31249804186456465), (8, 0.4375010647543787), (9, 0.18749986187404455)]
threshold=5
{9: Fraction(594593899512310496363312768750, 3171169223273075290469615980629), 8: Fraction(23835153132679805159513808666181206871045, 54480166638637710302951415569411448175812), 7: Fraction(1402330487245279214004794707446872024942956061, 4487476845857949559943805149036851574793458628), 6: Fraction(379562717094297584003785681, 6073005952135518148264521114)}
[(6, 0.062499974491351806), (7, 0.3124986569099882), (8, 0.43750147261436145), (9, 0.18749989598429856)]
threshold=6
{9: Fraction(2972965558698682530630441036668, 15855825073293866000539460764971), 8: Fraction(961083064775410109065303934584944664828, 2196753894492513463613977884610102574253), 7: Fraction(47526028929747662242273750603647317430589333, 152083946424805654493690523359416926557799498), 6: Fraction(70282715596936179848779213, 1124523916261937849227875578)}
[(6, 0.062499974060636225), (7, 0.3124986564788138), (8, 0.4375014730530095), (9, 0.18749989640754047)]
threshold=7
{7: Fraction(12703775344587114986704691267023352710921696, 40653824983206210760761795777412777879633185), 8: Fraction(44697294462965964468075525213785378179, 102168007165428017940576725672449220190), 9: Fraction(23045884307623092154506034742, 122912409735938376957451058285), 6: Fraction(445767752200440886990143, 7129226852290438051365230)}
[(6, 0.06252680149422193), (7, 0.3124865950457294), (8, 0.43748816976133403), (9, 0.18749843369871466)]
threshold=8
{6: Fraction(979118591791354098444797, 15659167304967850415814730), 7: Fraction(165861012856792500004612579100650293093, 530778041840332389191764810319243436580), 8: Fraction(83289298254264890103952385181232055, 190380696503784703671337470900776364), 9: Fraction(1868512944207390995109410500, 9965486633262048294762578091)}
[(6, 0.06252686191562243), (7, 0.31248657589849294), (8, 0.43748814761064353), (9, 0.18749841457524108)]
threshold=9
{9: Fraction(2278671888281085261343750, 12151068027366276173068257), 8: Fraction(203027039643566139469083462531473, 463859099448353750094815870471436), 7: Fraction(22927774835699657816858957393350026103, 73352358691265420271243707677000531860), 6: Fraction(590997984701410999463, 9500062691995142540090)}
[(6, 0.06220990364615093), (7, 0.31257038280392513), (8, 0.4376911865801853), (9, 0.18752852696973862)]
threshold=10
{9: Fraction(27208408805552827346992, 145089076394847860062049), 8: Fraction(805862426584698610153118607285, 1841162388405146383052754115924), 7: Fraction(66182252882011556189994288729483, 211733674666591834051066723331260), 6: Fraction(8175182656588134451, 131421782422012562330)}
[(6, 0.06220568999997696), (7, 0.31257310858192955), (8, 0.4376922055651776), (9, 0.18752899585291594)]
threshold=11
{7: Fraction(2892407510276793001358658967024965, 9254911702389905151440699279644228), 8: Fraction(21474028542099527890119124581547, 49250708466420355830990493353740), 9: Fraction(731918669041100228604074, 3910143143828982233437705), 6: Fraction(24525547969764403353, 381577987070899815070)}
[(6, 0.06427401160645933), (7, 0.31252675371607097), (8, 0.43601461198757663), (9, 0.18718462268989305)]
threshold=12
{6: Fraction(790278723380144769, 12272400486199139374), 7: Fraction(70994511593935573489225727905901, 227219350996041749661745691867484), 8: Fraction(144711205115832332202077475109, 331922440994055469397128911996), 9: Fraction(25106663483620474057736, 134133272741328791159493)}
[(6, 0.06439479580778418), (7, 0.31244923147048476), (8, 0.43597897352901194), (9, 0.18717699919271913)]
threshold=13
{9: Fraction(5653418031135298837, 29819637236436885183), 8: Fraction(15780860793295256583903101, 35511490313579012079190308), 7: Fraction(59881912328067934838101211837, 192933926873674772626240943364), 6: Fraction(1073704304606803, 19293797972760354)}
[(6, 0.055650230510482984), (7, 0.31037523207246054), (8, 0.4443874547067633), (9, 0.1895870827102932)]
threshold=14
{9: Fraction(98433629857916829, 518927603498209499), 8: Fraction(5548639455717497771039, 12467754601647981422974), 7: Fraction(440540888228908184168234, 1415090147287045891507549), 6: Fraction(19313166187809, 357931671933278)}
[(6, 0.05395768997891074), (7, 0.31131648331627176), (8, 0.4450391937441632), (9, 0.18968663296065433)]
threshold=15
{7: Fraction(5033581926964713154996, 15790062695942286190985), 8: Fraction(267645582494431121849, 644492354936419844530), 9: Fraction(60384410385477849, 338138696189097505), 6: Fraction(5447303283741, 62355868682870)}
[(6, 0.08735830963152708), (7, 0.3187816301868287), (8, 0.41528123715421694), (9, 0.1785788230274273)]
'''
