A000001 Number of groups of order n
    https://oeis.org/A000001
    https://oeis.org/A000001/list
    A000001[49] = 2
    A000001[50] = 5
A060689 Number of non-Abelian groups of order n
    https://oeis.org/A060689
    https://oeis.org/A060689/list
    A060689[49] = 0
    A060689[50] = 3
A000688 Number of Abelian groups of order n
    A000688[n] depends only on prime signature of n
    A000688[49] = 2
    A000688[50] = 2
    49 = 7^2     = 7 * 7
        = II {7:{2:1}} = II {7:{1:2}}
    50 = 5^2 * 2 = 5 * 5 * 2
        = II {5:{2:1}, 2:{1:1}} = II {5:{1:2}, 2:{1:1}}
        # Map Prime (Map PInt PInt)
        # II d = product(base**(exp*count) for base, exp_dict in d.items() for exp, count in exp_dict.items())
https://en.wikipedia.org/wiki/Finite_group
https://en.wikipedia.org/wiki/List_of_small_groups
    For groups of order n < 60, the simple groups are precisely the cyclic groups of prime order n.
    Classifying groups of small order
http://www.icm.tu-bs.de/ag_algebra/software/small/
    The Small Groups library
    GAP -> Small Groups library
        gap-4.10.0.exe
        smallgrp: The Small Groups Library
        SmallGroup( order, i )
https://people.maths.bris.ac.uk/~matyd/GroupNames/
https://people.maths.bris.ac.uk/~matyd/GroupNames/1/e2/D5byC5.html#s1
    groups of order 49 = {Cyclic[49], Cyclic[7]^2}
    groups of order 50 = {
        # Abelian
        Cyclic[50], Cyclic[5]^2*Cyclic[2]
        # non-Abelian
        , Dihedral[25]
        , Cyclic[5]*Dihedral[5]
        , Cyclic[5]:[phi]Dihedral[5]
            #where phi : Q -> Aut<N>
            where phi : Dihedral[5] -> Aut<Cyclic[5]>
                image(phi) ~=~ Cyclic[2]
                # ??the mirror operator donot commute with the 2 rotations.
                # ??the 2 rotations commute??
                # = <mirror, rotation0, rotation1
                    | mirror^2 = 1
                    , rotation0^5 = 1
                    , rotation1^5 = 1
                    , rotation0*rotation1 = rotation1*rotation0
                    , mirror*rotation0 = rotation0^(-1)*mirror
                    , mirror*rotation1 = rotation1^(-1)*mirror
                    >
        }

Extensions 1->N->G->Q->1
    Extensions 1->N->G means N->G is an injection
    Extensions G->Q->1 means G->Q is an surjection
    Extensions 1->N->G->Q->1 means
        # G/N ~=~ Q
        N ~=~ image(N->G) == kernel(G->Q)
        G/image(N->G) == G/kernel(G->Q) ~=~ Q
        if N is a normal subgroup of G:
            G/N ~=~ G/image(N->G) == G/kernel(G->Q) ~=~ Q
            G/N ~=~ Q

        let N' = image(N->G)
        [N' is normal subgroup of G][N' ~=~ N]
        let condition Q' = [Q' is subgroup of G][Q' ~=~ Q][Q' /-\ N' == {1}]
        # maybe:
        #   G ~=~ N.Q   if not [?Q'. condition Q']
        #   G ~=~ N:Q   if     [?Q'. condition Q']
        #   G ~=~ N*Q   if     [?Q'. [condition Q'] && Q' is normal subgroup of G]
        #   ...
        #   # see below

                |\
                | \
         -------|\ \
        |       | \ |\
    1===|=======|-->|->1
        |       | / |/
         -------|/ /
                | /
                |/
    1   N       G   Q  1

definitions:
    # https://people.maths.bris.ac.uk/~matyd/GroupNames/extensions.html
    # Every finite group can be built up from simple groups using extensions, so these constructions are fundamental for describing general groups.
    * Non-split extensions    G=N.Q
        semidirect products are excluded from non-split extensions
    * Semidirect products     G=N:Q
        a split extension of Q by N == a semi-direct product of N and Q
    * Direct product          G=N*Q
        direct products are excluded from split extensions

    There may be many different groups that are extensions of a given group Q by a given group N.
        Dihedral[4] ~~ Cyclic[2].Cyclic[2]^2
        Q8          ~~ Cyclic[2].Cyclic[2]^2
        2 non-split extension of C2^2 by C2
    When G=N:Q is a split extension, a copy of Q in G acts on N by conjugation, which gives a homomorphism phi : Q -> Aut<N>.
        # Aut<N> = N -> N
        e.g. phi = \q : Q. \n : N. q*n*q^(-1)
    there is a unique split extension of Q by N with action Ï†, the semidirect product:
        semidirect_product<phi>(N,Q) = N:[phi]Q =[def]=
            Group {elements=Set(N)*Set(Q)
                  , (*) = \(n,q). \(n',q'). (n*phi q n', q*q')
                  }
    ...

    Extensions 1->N->G->Q->1 with N=Cyclic[5] and Q=Dihedral[5]

Q8 =[def]= < a,b | a^4=1, b^2=a^2, b*a*b^(-1)=a^(-1) >
Dihedral[n] =[def]=
    < g,h | g^n=h^2=1, h*g=g^(-1)*h >
    = {e,g,g^2,...,g^(n-1),h,g*h,...,g^(n-1)*h}


    Group of symmetries of a regular n-gon
        ; consisting of n rotations and n reflections
        ; order 2n
        ; generated by one rotation of order n and one reflection of order 2

    ??? Dihedral[n] = Cyclic[n]:Cyclic[2]


the 5 groups of order 50:
    g50 must contain a subgroup of order 2 and order 25, named g2, g25
    g2 = < mirror | mirror^2=1 >
    g25 = Cyclic[25] | Cyclic[5]^2
    lemma:
        g2N = Cyclic[N]*Cyclic[2]
        gN = < rotation | rotation^N=1 >
        g2N.elements
            = gN.elements * g2.elements
            = g2.elements * gN.elements
        @x <- g2N.
            x = mirror^i * rotation^j
            x = rotation^j' * mirror^i'
        rotation * mirror^0 = mirror^0 * rotation
        rotation * mirror = mirror^i * rotation^j
            ==>> [i != 0]
        rotation * mirror = mirror * rotation^j
        rotation^j' * mirror = mirror * rotation^(j*j')
        rotation^j' = rotation^j' * mirror^2
                    = mirror * rotation^(j*j') * mirror
                    = mirror^2 * rotation^(j*j*j')
                    = rotation^(j*j*j')
        @j' : Integer.
            [mod N: j*j*j' == j']
        [mod N: j*j == 1]
        if [N == p^e][p is odd prime][N >= 3]:
            [j = +1] || [j = -1]

    g50.elements = g2.elements * g25.elements
    * g25 = Cyclic[25]
        g25 = < rotation | rotation^25=1 >
        * Cyclic[25]*Cyclic[2] = Cyclic[50]
            [rotation * mirror = mirror * rotation]
        * Cyclic[25]:Cyclic[2] = Dihedral[25]
            [rotation * mirror = mirror * rotation^(-1)]
    * g25 = Cyclic[5]^2
        g25 = < rotation0 | rotation0^5=1, rotation1^5=1, rotation1*rotation0 = rotation0*rotation1 >
        # ??????????????exists g10???????????????????
        #   no [rotation0*mirror = mirror^i*rotation0^j*rotation1^k]????
        * Cyclic[5]^2*Cyclic[2] = Cyclic[5]*Cyclic[10]
            [rotation0 * mirror = mirror * rotation0]
            [rotation1 * mirror = mirror * rotation1]
        * Cyclic[5]*(Cyclic[5]:Cyclic[2]) = Cyclic[5]*Dihedral[5]
            [rotation0 * mirror = mirror * rotation0]
            [rotation1 * mirror = mirror * rotation1^(-1)]
        * Cyclic[5]^2:Cyclic[2] = Cyclic[5]:Dihedral[5]
            [rotation0 * mirror = mirror * rotation0^(-1)]
            [rotation1 * mirror = mirror * rotation1^(-1)]

    C25*C2
    C25:C2
    C5*C5*C2
    (C5*C5):C2
    C5*(C5:C2)

https://en.wikipedia.org/wiki/Group_representation
https://en.wikipedia.org/wiki/Representation_theory_of_finite_groups
https://en.wikipedia.org/wiki/Irreducible_representation
    In the mathematical field of representation theory, group representations describe abstract groups in terms of linear transformations of vector spaces; in particular, they can be used to represent group elements as matrices so that the group operation can be represented by matrix multiplication.
    A "representation" means a homomorphism from the group to the automorphism group of an object. If the object is a vector space we have a linear representation.

    finite groups
        If the field of scalars of the vector space has characteristic p, and if p divides the order of the group, then this is called modular representation theory; this special case has very different properties.
    representation
        a representation is a map   rho : G -> GL(V)
            G - group
            K - field
            V
                - vector space over field K
                - the representation space of rho
            dim(V)
                - the dimension of V
                - the dimension of the representation rho
            GL(V)
                - the general linear group on vector space V
            GL(n, K)
                - GL(K^n)
            rho
                - a representation of a group G on a vector space V over a field K
                - a group homomorphism from G to GL(V)
                    [g1,g2 <- G]
                        rho(g1*g2) = rho(g1)*rho(g2)

    [rho is faithful representation] =[def]= [rho is injective]

    reducibility
    subrepresentation
        A subspace W of V that is invariant under the group action is called a subrepresentation.
    irreducible/reducible
        If V has exactly two subrepresentations, namely the zero-dimensional subspace and V itself, then the representation is said to be irreducible
        ; if it has a proper subrepresentation of nonzero dimension, the representation is said to be reducible.
        The representation of dimension zero is considered to be neither reducible nor irreducible.

    Maschke's theorem
        Under the assumption that the characteristic of the field K does not divide the size of the group, representations of finite groups can be decomposed into a direct sum of irreducible subrepresentations.
        it follows from the Jordan-Holder theorem that, while the decomposition into a direct sum of irreducible subrepresentations may not be unique, the irreducible pieces have well-defined multiplicities.

realization =
    * representation
        as linear transformation
        alias:
            linear representation
            group representation
    * set-theoretic representation
        as group action
        alias:
            permutation representation
        * left-regular representation
        * right-regular representation
            set X = G.elements
            left_regular g1 g2 = g1*g2
            right_regular g1 g2 = g2*g1^(-1)
    ...
    ...


GF(7^2)
    x^49 - x = II x - r {r <- GF(7^2)}
    GF(7^2) = GF(7)[X]/(X^2 + 1)

    * primitive element
        # number of primitive elements of GF(p^n) = phi(p^n-1)
        #
        # multiplicative group: number of elements = 49-1 = 2^4*3^1
        # cyclic group: number of primitive elements = 2^3*(2-1)*3^0*(3-1) = 16
        #
        # e.g.
        #   f = X^2 + X + 3
        #   r = [+-](X+1)   + [+-]1 in   GF(7)[X]/(f)
        #   r = [+-](2*X+1) + [+-]1 in   GF(7)[X]/(f)
        #   r = [+-]X       + [+-]1 in   GF(7)[X]/(f)
        #   r = [+-](3*X-2) + [+-]1 in   GF(7)[X]/(f)
        #
        #   r = [+-]X + [+-]2   in   GF(7)[X]/(X^2+1)
        #   r = [+-]X + [+-]3   in   GF(7)[X]/(X^2+1)
        #   r = [+-]2*X + [+-]1 in   GF(7)[X]/(X^2+1)
        #   r = [+-]3*X + [+-]1 in   GF(7)[X]/(X^2+1)
        #
    * primitive polynomial
        # number of primitive polynomials of GF(p^n) = phi(p^n-1)/n
        # degree of primitive polynomials of GF(p^n) = n
        #
        # https://en.wikipedia.org/wiki/Primitive_polynomial_(field_theory)
        # https://math.stackexchange.com/questions/1324/what-is-a-primitive-polynomial
        #
        # primitive polynomials = minimal polynomials of primitive elements
        # e.g.
        #   primitive polynomial f <- GF(7)[X]
        #   f has a root r
        #   r is a primitive element of GF(7^2)
        #       r is primitive (7^2 âˆ’ 1)-root of unity in GF(7^2)
        #   deg(f) = 2
        #   f is irreducible polynomial
        #
        #   f = X^2 + X + 3
        #   r = X           in   GF(7)[X]/(f)
        #   r = -X - 1      in   GF(7)[X]/(f)
        #   r = [+-]X + 3   in   GF(7)[X]/(X^2+1)
        #
        # another meaning, but not here:
        #   a polynomial whose coefficients have no common prime factor


    https://www.wolframalpha.com/input/?i=GF(49)
      * Properties:
        number of elements | 49
        characteristic | 7
        degree | 2
        number of primitive elements | 16
        number of primitive polynomials | 8
        number of characteristic polynomials | 21
        number of subfields | 1
      * Primitive polynomials:
        x^2 + x + 3
        x^2 + 2 x + 3
        x^2 + 2 x + 5
        x^2 + 3 x + 5
        x^2 + 4 x + 5
        x^2 + 5 x + 3
        x^2 + 5 x + 5
        x^2 + 6 x + 3
      * Characteristic polynomials:
        # ??irreducible polynomials??
        # ??P in GF(7)[X]/(P)??
        x^2 + 1
        x^2 + 2
        x^2 + 4
        x^2 + x + 3
        x^2 + x + 4
        x^2 + x + 6
        x^2 + 2 x + 2
        x^2 + 2 x + 3
        x^2 + 2 x + 5
        x^2 + 3 x + 1
        x^2 + 3 x + 5
        x^2 + 3 x + 6
        x^2 + 4 x + 1
        x^2 + 4 x + 5
        x^2 + 4 x + 6
        x^2 + 5 x + 2
        x^2 + 5 x + 3
        x^2 + 5 x + 5
        x^2 + 6 x + 3
        x^2 + 6 x + 4
        x^2 + 6 x + 6


    https://en.wikipedia.org/wiki/Finite_field
    # finite field = Galois field
    A finite field of order q exists if and only if the order q is a prime power p^n (where p is a prime number and n is a positive integer).
    All finite fields of a given order are isomorphic.
        existence & uniqueness
        GF(q) = GF(p^n)

    In a finite field of order q, the polynomial X^q âˆ’ X has all q elements of the finite field as roots.
        x^q - x = II x - r {r <- GF(p^n)}
    The non-zero elements of a finite field form a multiplicative group. This group is cyclic, so all non-zero elements can be expressed as powers of a single element called a primitive element of the field. (In general there will be several primitive elements for a given field.)
        ?r <- GF(p^n). x^q - x = x * II x - r^i {i <- [1..q-1]}

    https://en.wikipedia.org/wiki/Division_ring
    Division rings differ from fields only in that their multiplication is not required to be commutative. However, by Wedderburn's little theorem all finite division rings are commutative and therefore finite fields.
        finite division ring = finite field


explicit construction
    GF(p) = ZZ/(p*ZZ)
        prime field = integers modulo p
    GF(q) = GF(p)[X]/(P)
        p
            prime number
        n
            positive integer
        q
            q = p^n
        GF(q)
            finite field of order q

        GF(p)
            prime field
        GF(p)[X]
            polynomial ring
        P
            irreducible polynomial in GF(p)[X] of degree n
        (P)
            ideal generated by P
        GF(p)[X]/(P)
            quotient ring

choices for irreducible polynomial P
    # to make the needed Euclidean divisions efficient.
    * GF(p^n) where p > 2, n >= 2
        P(a,b) = X^n + a*X + b
    * GF(2^n) where p = 2, n >= 2
        * P = X^n + X + 1
        * P(i) = X^n + X^i + 1
        * P(a,b,c) = X^n + X^a + X^b + X^c + 1

    ###### special cases
    * GF(4)
        P = X^2 + X + 1 # the only irreducible polynomial
    * GF(p^2) where p > 2
        P(r) = X^2 - r where r is a quadratic non-residue modulo p



Law of quadratic reciprocity
    https://en.wikipedia.org/wiki/Quadratic_residue
    https://en.wikipedia.org/wiki/Legendre_symbol
    https://en.wikipedia.org/wiki/Jacobi_symbol
    https://en.wikipedia.org/wiki/Kronecker_symbol

    If p and q are distinct odd primes, then:
        (
            (p is a quadratic residue mod q) if and only if (q is a quadratic residue mod p)
        )
        if and only if (at least one of p and q is congruent to 1 mod 4).
    That is:
        [p,q are odd primes][p != q]:
            [Legendre_symbol(p,q)*Legendre_symbol(q,p) == (-1)^((p-1)/2 * (q-1)/2)]
    where
        [n != 0]:
            [k is a quadratic residue mod n] =[def]=
                [?x:Integer. [mod n: x^2 == k]]

        [p is odd prime][k is integer]:
            #Legendre symbol
            Legendre_symbol(k,p) =[def]=
                0 if [mod p: k == 0] else
                +1 if [k is a quadratic residue mod p] else
                -1

            ##########################
            [Legendre_symbol(k,p) == Jacobi_symbol(k,p)]
            [-1 <= Legendre_symbol(k,p) <= 1]
            [mod p: Legendre_symbol(k,p) == k^((p-1)/2)]
            [Legendre_symbol(k,p) == (1+k^((p-1)/2)) % p - 1]
            [Legendre_symbol(k1*k2,p) == Legendre_symbol(k1,p)*Legendre_symbol(k2,p)]

        [n is positive odd integer][k is integer]:
            #Jacobi symbol
            Jacobi_symbol(k,n) =[def]=
                Jacobi_symbol(k,II p[i]^e[i] {i})
                = II Legendre_symbol(k, p[i])^e[i] {i}

            ##########################
            [Jacobi_symbol(k,n) == Kronecker_symbol(k,n)]
            [abs(Jacobi_symbol(k,n)) == [gcd(k,n)==1]]
            [Jacobi_symbol(k,n) == Jacobi_symbol(k+n,n)]
            [Jacobi_symbol(k1*k2,n) == Jacobi_symbol(k1,n)*Jacobi_symbol(k2,n)]
            [Jacobi_symbol(k,n1*n2) == Jacobi_symbol(k,n1)*Jacobi_symbol(k,n2)]
                # the upper argument ("numerator") is an integer and the lower argument ("denominator") is a positive odd integer
                # If either the top or bottom argument is fixed, the Jacobi symbol is a completely multiplicative function in the remaining argument

        [m and n are odd positive coprime integers]:
            [Jacobi_symbol(m,n)*Jacobi_symbol(n,m) == (-1)^((m-1)/2 * (n-1)/2)]
        [Jacobi_symbol(-1,n) == (-1)^((n-1)/2)]
            # what if?
            #   Jacobi_symbol(n,-1) =[def]= Jacobi_symbol(n,1) = 1
            #   [Jacobi_symbol(-1,n)*Jacobi_symbol(n,-1) == (-1)^((-1-1)/2 * (n-1)/2)]
        [Jacobi_symbol(2,n) == (-1)^((n^2-1)/8)]

    Jacobi_symbol vs Legendre_symbol:
        [p is odd prime]:
            [Legendre_symbol(k,p) >= 0] <==> [k is a quadratic residue mod p]
            [Legendre_symbol(k,p) == -1] <==> [k is a quadratic non-residue mod p]
            # Jacobi_symbol provides an efficient way to compute Legendre_symbol without performing factorization along the way.
        [n is positive odd integer]:
            [Jacobi_symbol(k,n) == 1] ==xx=>> [k is a quadratic residue mod n]
            #This is because for a to be a quadratic residue modulo n, it has to be a quadratic residue modulo every prime factor of n.

            [@p. [p is prime][div p n] ==>> [Jacobi_symbol(k,p) >= 0]] ==>> [k is a quadratic residue mod n]

        [n is integer][k is integer]:
            # bad, quadratic reciprocity of Kronecker_symbol is ugly
            Kronecker_symbol(k,n) =[def]=
                | n == 0 = [abs(k) == 1]
                | n == -1 = -1 if [k < 0] else +1
                | n == 1 = 1
                | n == 2 = if [div 2 k] then 0 else
                            if [mod 8: k <- {-3,+3}] then -1 else +1
                | n == p && p is odd prime = Legendre_symbol(k,p)
                | n == u * II p[i]^e[i] {i} && abs(u) == 1
                    = Kronecker_symbol(k,u)
                        * II Kronecker_symbol(k,p[i])^e[i] {i}

function calc Legendre_symbol using Jacobi_symbol:
    [p is odd prime]:
        Legendre_symbol(k,p) = Jacobi_symbol(k,p)
function calc Jacobi_symbol:
    [n is positive odd integer][k is integer]:
        Jacobi_symbol(k,n)
            | gcd(k,n) != 1 = 0
            # [gcd(k,n) == 1]
            | not (-(n-1) <= k <= n-1) = Jacobi_symbol(k%n, n)
                # k%n =[def]= mod(k,n) or rem(k,n)
            | k == -1
                = (-1)^((n-1)/2)
                = -1 if [mod 4: n == 3] else +1
            | k < 0 = Jacobi_symbol(-1,n) * Jacobi_symbol(-k,n)
            | k == 1 = 1
            | k is odd
                = Jacobi_symbol(n,k)*(-1)^((k-1)/2 * (n-1)/2)
                = Jacobi_symbol(n,k)*(-1 if [mod 4: k==3==n] else +1)
            | k == 2
                = (-1)^((n^2-1)/8)
                = -1 if [mod 8: n <- {3, 5}] else +1
            | k == 2^e * k' && k' is odd
                = if div 2 e
                    then Jacobi_symbol(k', n)
                    else Jacobi_symbol(2,n)*Jacobi_symbol(k', n)

function [k is a quadratic residue mod n] for [n != 0]:
    https://en.wikipedia.org/wiki/Quadratic_residue
    [n is integer][n != 0]:
        # [k is a quadratic residue mod n]
        is_quadratic_residue_mod k n
            | n < 0 = is_quadratic_residue_mod k (-n)
            # prime power
            | n == 2 = True
            | n == 4 = [mod 4: k <- {0,1}]
            | n == 2^_ && n >= 8
                = [k == 0] || [k == 4^_ * (8*_+1)]
            | n is odd prime
                = [Legendre_symbol(k,n) >= 0]
            | n == p^e && p is odd prime && e >= 2
              && k == p^i * k' && not (div p k')
                # div n k # [mod n: k == 0]
                = if [i >= e] then True else
                  if [i is odd] then False else
                  is_quadratic_residue_mod k' p
                  # == is_quadratic_residue_mod k' n
            #[n > 0][n has distinct prime factors]
            | n == II p[i]^e[i] {i}
                = all [is_quadratic_residue_mod k p[i]^e[i]] {i}
                # Chinese remainder theorem


finding square roots
    https://en.wikipedia.org/wiki/Quadratic_residue#Complexity_of_finding_square_roots

    [n != 0]:
        num_square_roots_mod k n
            | n < 0 = num_square_roots_mod k (-n)
          #prime modulus n
            | n == 2 = 1
            | n == p && p is odd prime = 1 + Legendre_symbol(k,p)
          #composite modulus n
            #prime power modulus n
            #   Hensel's lemma
            | n == 4 = 2 if [k%4 < 2] else 0
            | n == 2^e = ???
            | n == p^e = ???
            #product of powers of distinct primes
            #   Chinese remainder theorem
            | n == II p[i]^e[i] {i}
                = II num_square_roots_mod k p[i]^e[i] {i}

        square_roots_mod k n
            | n < 0 = square_roots_mod k (-n)
            | n == 2 = {k%2}
            | n == p && p is odd prime
                = case Legendre_symbol(k,p) of
                    -1 -> {}
                    0  -> {0}
                    +1 -> let r = ...
                              r = if [p%4 == 3] then k^((p+1)/4) % p else
                                  #[mod p: Legendre_symbol(k,p) == k^((p-1)/2)]
                                  #[k^((p-1)/2) % p == Legendre_symbol(k,p) % p == 1]
                                  #[mod p: r^2 == (k^((p+1)/4))^2 == k^((p+1)/2)  *k^((p-1)/2) == k^p == k]

                                  if [p%8 == 5] then
                                    # assert Legendre_symbol(-1,p) == +1
                                    if [is_quadratic_residue_mod ?? ?p]
                                        # may be try and see which result is correct??
                                    then k^((p+3)/8) % p
                                    else k^((p+3)/8)*2^((p-1)/4) % p
                                    #p <- {5,13,29,...}
                                    #p=5: {2,3}->4
                                    #   (p+3)/8=1,(p-1)/4=1
                                    #   k=4,r=4^1*2^1 % 5 = 3
                                    #   k=1,r=1^1*2^0 % 5 = 1
                                    #p=13: {2,11}->4,{3,10}->9,{4,9}->3,{5,8}->12,{6,7}->10
                                    #   (p+3)/8=2,(p-1)/4=3
                                    #   k=4,r=4^2*2^3 % 13 = 11
                                    #   k=9,r=9^2*2^0 % 13 = 3
                                    #   k=3,r=3^2*2^0 % 13 = 9
                                    #   k=10,r=10^2*2^3 % 13 = 7
                                    #   k=12,r=12^2*2^3 % 13 = 8
                                    #   k=1,r=1^2*2^0 % 13 = 1
                                  else
                                    # assert [p%8 == 1]
                                    ...there is no known formula
                                    # Tonelli-Shanks algorithm
                                    # https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm

                          in  {r,p-r}
            | n == 2^e = ???
            | n == p^e = ???
            | n == II p[i]^e[i] {i} = ???




