HOWTO10.1:  Implementing a Graphical User Interface (GUI)
    A GUI program allows users to supply inputs and specify actions.

    Step 1 Enumerate the actions that your program needs to carry out.
    Step 2 For each action, enumerate the inputs that you need.
    Step 3 For each action, enumerate the outputs that you need to show.
    Step 4 Supply the user interface components.
        Right now, you need to use buttons for actions, text fields for inputs, and labels for outputs. 
            In Chapter 18, you will see many more user-interface components that can be used for actions and inputs. 
            In Chapter 3, you learned how to implement your own components to produce graphical output, such as charts or drawings.
        Add the required buttons, text fields, and other components to a frame. 
            In this chapter, you have seen how to lay out very simple user interfaces, by adding all components to a single panel and adding the panel to the frame. 
            Chapter 18shows you how you can achieve more complex layouts.
    
    Step 5 Supply event handler classes.
    Step 6 Make listener objects and attach them to the event sources.


COMMONERROR10.8:  By Default, Components Have Zero Width and Height
    xxx.setPreferredSize(new Dimension(CHART_WIDTH, CHART_HEIGHT));



layout managers: 
    flow layout
    border layout
        When adding a component to a container with the border layout, 
        specify the NORTH, EAST, SOUTH, WEST, or CENTER position.
        
        panel.setLayout(new BorderLayout());
        panel.add(component, BorderLayout.NORTH);
    grid layout
        The grid layout arranges components in a grid with a fixed number of rows and columns, 
            resizing each of the components so that they all have the same size. 
        Like the border layout, it also expands each component to fill the entire allotted area. 
            (If that is not desirable, you need to place each component inside a panel.)

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(4, 3));
        buttonPanel.add(button7);
        buttonPanel.add(button8);
        buttonPanel.add(button9);
        buttonPanel.add(button4);
    
    grid bag layout
        to have a tabular arrangement of the components 
            where columns have different sizes or one component spans multiple columns.


use as many panels as you need to organize your components

exclusive choices
    For a small set of mutually exclusive choices, 
        use a group of radio buttons or a combo box.

ButtonGroup
    Add radio buttons into a ButtonGroup so that only one button in the group is on at any time.
    
    JRadioButton smallButton = new JRadioButton("Small");
    JRadioButton mediumButton = new JRadioButton("Medium");
    JRadioButton largeButton = new JRadioButton("Large");
    
    ButtonGroup group = new ButtonGroup();
    group.add(smallButton);
    group.add(mediumButton);
    group.add(largeButton);

    largeButton.setSelected(true);
    if (largeButton.isSelected()) size = LARGE_SIZE;

border
    You can place a border around a panel to group its contents visually.
    JPanel panel = new JPanel();
    panel.setBorder(new EtchedBorder());
    panel.setBorder(new TitledBorder(new EtchedBorder(), "title..."));


check box
    For a binary choice, use a check box.
    JCheckBox italicCheckBox = new JCheckBox("Italic");
    Do not place check boxes inside a button group.

combo box
    For a large set of choices, use a combo box
    .setEditable
    JComboBox facenameCombo = new JComboBox();
    facenameCombo.addItem("Serif");
    facenameCombo.addItem("SansSerif");
    String selectedString = (String) facenameCombo.getSelectedItem();

ActionEvent
    Radio buttons, check boxes, and combo boxes generate action events, just as buttons do.









PRODUCTIVITY HINT 18.1:  Use a GUI Builder
    GroupLayout
        a powerful layout manager that was specifically designed to be used by GUI builders

menu
    A frame contains a menu bar. 
    The menu bar contains menus. 
    A menu contains submenus and menu items.

    JMenuBar menuBar = new JMenuBar();
    this.setJMenuBar(menuBar);
    
    JMenu fileMenu = new JMenu(¡°File¡±);
    menuBar.add(fileMenu);
    
    JMenuItem fileExitItem = new JMenuItem("Exit");
    fileExitItem.addActionListener(listener);
    fileMenu.add(fileExitItem);

Menu items generate action events.






