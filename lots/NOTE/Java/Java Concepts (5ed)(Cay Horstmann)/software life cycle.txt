[plan >> program + test]
    for larger projects, the amount of time spent on planning is much higher than the amount of time spent on programming and testing.



The life cycle of software encompasses all activities from initial analysis until obsolescence.


[formal process]
    A formal process for software development describes phases of the development process and gives guidelines for how to carry out the phases.
phases
    ? Analysis
        decide what the project is supposed to accomplish;
        do not think about how the program will accomplish its tasks.
        
        output ==>> requirements document
            which describes in complete detail what the program will be able to do once it is completed. 
            includes:
                a user manual that tells how the user will operate the program to derive the promised benefits.
                performance criteria¡ªhow many inputs the program must be able to handle in what time, or what its maximum memory and disk storage requirements are.
                ...
    ? Design
        develop a plan for how you will implement the system. 
            You discover the structures that underlie the problem to be solved. 
            When you use object-oriented design, you decide what classes you need and what their most important methods are.
        
        output ==>> 
            a description of the classes and methods, with diagrams that show the relationships among the classes.
    
    ? Implementation
        write and compile program code to implement the classes and methods that were discovered in the design phase.
        
        output ==>>
            the completed program
    ? Testing
        run tests to verify that the program works correctly
        
        output ==>> 
            a report describing the tests that you carried out and their results.
    ? Deployment
        the users of the program install it and use it for its intended purpose.

[waterfall model]
    The waterfall model of software development describes a sequential process of analysis, design, implementation, testing, and deployment.

    In an ideal world the waterfall model has a lot of appeal: 
        You figure out what to do; 
        then you figure out how to do it; 
        then you do it; 
        then you verify that you did it right; 
        then you hand the product to the customer.

    When rigidly applied, though, the waterfall model simply did not work. 
        It was very difficult to come up with a perfect requirement specification. 
        It was quite common to discover in the design phase 
            that the requirements were inconsistent 
            or that a small change in the requirements would lead to a system 
                    that was both easier to design and more useful for the customer, 
            but the analysis phase was over, so the designers had no choice -- 
                they had to take the existing requirements, errors and all. 
        This problem would repeat itself during implementation. 
            The designers may have thought they knew how to solve the problem as efficiently as possible, 
            but when the design was actually implemented, 
                it turned out that the resulting program was not as fast as the designers had thought. 
        The next transition is one with which you are surely familiar. 
            When the program was handed to the quality assurance department for testing, 
                many bugs were found that would best be fixed by reimplementing, or maybe even redesigning, the program, 
            but the waterfall model did not allow for this. 
        Finally, when the customers received the finished product, they were often not at all happy with it. 
            Even though the customers typically were very involved in the analysis phase, often they themselves were not sure exactly what they needed. 
            After all, it can be very difficult to describe how you want to use a product that you have never seen before. 
            But when the customers started using the program, they began to realize what they would have liked. 
            Of course, then it was too late, and they had to live with what they got.


[spiral model]
    The spiral model of software development describes an iterative process in which design and implementation are repeated.

    Having some level of iteration is clearly necessary.
    Early phases focus on the construction of prototypes.
    It is common to build a user interface prototype that shows the user interface in action.
    Other prototypes can be built to validate interfaces with external systems, to test performance, and so on.


    However, there is also a danger. 
        If engineers believe that they don't have to do a good job 
            because they can always do another iteration, 
        then there will be many iterations, 
            and the process will take a very long time to complete.


[Extreme Programming]
    Extreme Programming is a development methodology that strives for simplicity by removing formal structure and focusing on best practices.
    
    practices
        ? Realistic planning:
            Customers are to make business decisions, 
            programmers are to make technical decisions. 
            Update the plan when it conflicts with reality.
        ? Small releases:
            Release a useful system quickly, 
            then release updates on a very short cycle.
        ? Metaphor:
            All programmers should have a simple shared story that explains the system under development.
        ? Simplicity:
            Design everything to be as simple as possible instead of preparing for future complexity.
        ? Testing:
            Both programmers and customers are to write test cases. 
            The system is continuously tested.
        ? Refactoring:
            Programmers are to restructure the system continuously to improve the code and eliminate duplication.
        ? Pair programming:
            Put programmers together in pairs, and require each pair to write code on a single computer.
        ? Collective ownership:
            All programmers have permission to change all code as it becomes necessary.
        ? Continuous integration:
            Whenever a task is completed, build the entire system and test it.
        ? 40-hour week:
            Don't cover up unrealistic schedules with bursts of heroic effort.
        ? On-site customer:
            An actual customer of the system is to be accessible to team members at all times.
        ? Coding standards:
            Programmers are to follow standards that emphasize self-documenting code.




In object-oriented design, 
    discover classes
        look for nouns in the task description
    determine the responsibilities of classes
        look for verbs in the task description, and then match the verbs to the appropriate objects.
        "CRC card method"
            CRC stands for "classes", "responsibilities", "collaborators"
            CRC :: Map Class [(Responsibility, [(Class, [Responsibility])])]
            or :: Map Class (Map Responsibility (Map Class [Responsibility]))
            As you think about verbs in the task description that indicate methods, 
                you pick the card of the class that you think should be responsible, 
                and write that responsibility on the card. 
            For each responsibility, you record which other classes are needed to fulfill it. 
                Those classes are the collaborators.
                This is a good time to look up the index card for the collaborator class. 
                    Does it have a xxxx method? If not, add one.
            responsibility <==> [Java methods]
                Some researchers say that a CRC card should have no more than three distinct responsibilities.
    describe the relationships between classes
        inheritance - is-a
            subclass ----|> superclass
        interface implement - is-a
            class =-=-|> interface
        aggregation - has-a
            whole <>---- part
            an Whole object needs to store a reference to a Part object. 
                Does it need to locate the same Part object across multiple method calls?
        dependency - uses // > aggregation, i.e. aggregation is dependency
            using =-=-> used // who depends whom?
        association
            from ----> to // navigate from .. to ..
            a <---> b // navigate both direction


ADVANCED TOPIC 12.1:  Attributes and Methods in UML Diagrams
    Sometimes it is useful to indicate class attributesand methodsin a class diagram.
    
    An attributeis an externally observable property that objects of a class have.
        Usually, attributes correspond to instance variables. 
        But they don't have to 
            -- a class may have a different way of organizing its data.
    
            GregorianCalendar object from the Java library has attributes day, month, and year, 
                and it would be appropriate to draw a UML diagram that shows these attributes.
                it internally represents all dates by counting the milliseconds from January 1, 1970 
                -- an implementation detail that a class user certainly doesn't need to know about.

    You need not list all attributes and methods in a particular diagram. 
        Just list the ones that are helpful to understand 
            whatever point you are making with a particular diagram.

     -----------
    | ClassName |
    |-----------|
    |   fields  |
    |-----------|
    |  methods  |
     -----------

ADVANCED TOPIC 12.3:  Aggregation and Association
    Some designers find the aggregation or has-a terminology unsatisfactory. 
        For example, consider customers of a bank. 
            Does the bank "have" customers? 
            Do the customers "have" bank accounts, or does the bank "have" them?

    [association]
        Early in the design phase, it makes sense to use a more general relationship between classes called association. 
        A class is associated with another if you can navigate from objects of one class to objects of the other class. 
            For example, given a Bank object, 
                you can navigate to Customer objects, perhaps by accessing an instance field, or by making a database lookup.




for beginning programmers:
    1. Gather requirements.
    2. Use CRC cards to find classes, responsibilities, and collaborators.
    3. Use UML diagrams to record class relationships.
    4. Use javadocto document method behavior.
        Use javadoc comments (with the method bodies left blank) to record the behavior of classes.
    5. Implement your program.










