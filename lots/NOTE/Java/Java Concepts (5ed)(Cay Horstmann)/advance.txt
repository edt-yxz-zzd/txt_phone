String
    some characters may occupy two positions
    string1 == string2 <==> whether refer to same object.
        using string1. equals(string2) instead
        string1.equalsIgnoreCase(string2)
        string1.compareTo (string2) < 0 // Lexicographic Comparison ; in dictionary order
Comparing Objects
    a == b <==> a is b
    Testing for Null
    a == null <==> a is null reference

constructor
    // delegation
    // occur only as the first line in another constructor
    this(...);
    super(...);

loop
    // there is a second form of the break statement that is used to break out of a nested statement. 
    // The statement "break label;" immediately jumps to the end of the statement that is tagged with a label. 
    // Any statement (including if and block statements) can be tagged with a label
    break label;


case
    if (aSuperclassObject instanceof Subclass)
    {
        Subclass aSubclassObject = (Subclass) aSuperclassObject;
        . . .
    }


[toString]
    // i.e. __repr__
    public String toString()
    {
        // type(self).__name__
        return getClass().getName()+ ...;
        // or return super.toString() + "[{fieldName}={value}...]";
    }

[equals][hashCode]
    // i.e. __eq__, __hash__
    // NOTE: Object
    // if T extends Object
    public boolean equals(Object otherObject){
        if (otherObject == null) return false;
        if (getClass() != otherObject.getClass()) return false;
        T other = (T) otherObject;
        return name.equals(other.name) && ...;
    }
    // if T extends C
    public boolean equals(Object otherObject){
        if (!super.equals(otherObject)) return false;
        T other = (T) otherObject;
        return name.equals(other.name) && ...;
    }
    

    When you override the equals method, you should also override the hashCode method so that equal objects have the same hash code


[clone]
    T t = (T) obj.clone();
    
    Clone Mutable Instance Fields in Accessor Methods
    public XXX getXxx(){
        return (XXX) this.xxx.clone();
    }
    
    Object.clone ::= shallow copy
        It creates a new object of the same type as the original object. 
        It also automatically copies the instance fields from the original object to the cloned object.
        
        public class Object
        {
            protected Object clone() throws CloneNotSupportedException
            {
                if (this instanceof Cloneable)
                {
                    //Copy the instance fields
                    . . .
                }
                else
                    throw new CloneNotSupportedException();
            }
        }

    // T extends Object
    public class T implements Cloneable
    {
        . . .
        public Object clone()
        {
            try
            {
                return super.clone();
            }
            catch (CloneNotSupportedException e)
            {
                // Can't happen because we implement Cloneable but we still must catch it.
                return null;
            }
        }
    }




ADVANCED TOPIC 10.7:  Enumerated Types Revisited
    public enum FilingStatus { SINGLE, MARRIED }
    Enumeration classes extend the Enum class

    public enum CoinType
    {
        PENNY(0.01), NICKEL(0.05), DIME(0.1), QUARTER(0.25);
        CoinType(double aValue) { value = aValue; }
        public double getValue() { return value; }
        private double value;
    }


