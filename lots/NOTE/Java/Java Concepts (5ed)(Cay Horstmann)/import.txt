there must be some way to ensure that package names are unique.
    the inventors of Java recommend that you use a package-naming scheme that takes advantage of the uniqueness of Internet domain names.
    Use a domain name in reverse to construct unambiguous package names.
        domain name "horstmann.com" ==>> package name "com.horstmann"
    If you don't have your own domain name, you can still create a package name that has a high probability of being unique by writing your e-mail address backwards. 
        "walters@cs.sjsu.edu" ==>> "edu.sjsu.cs.walters"
    what about MAC address?? 
        GPS, date, personal identification number (PIN)??


The import directive lets you refer to a class of a package by its class name, without the package prefix.
    packageName.className // refer to a class by its full name
    import packageName.className 
    className // after import
    import java.util.*; // import all classes
    // implicitly import java.lang.*

Static Imports
    Starting with Java version 5.0, there is a variant of the importdirective that lets you use static methods and fields without class prefixes. 

    import static java.lang.System.*;
    import static java.lang.Math.*;
    public class RootTester
    {
        public static void main(String[] args)
        {
            double r = sqrt(PI)// Instead of Math. sqrt(Math. PI)
            out.println(r);  // Instead of System.out
        }
    }
    Static imports can make programs easier to read, particularly if they use many mathematical functions.




8.9.4 How Classes are Located
    The path of a class file must match its package name.
    
    path_to_class = base_directory + package_path
    class_path = base_directories

    compilation environment:
      -- UNIX
        export CLASSPATH=/home/walters/lib:.
      -- Windows
        set CLASSPATH=c:\home\walters\lib;.

COMMONERROR8.3:  Confusing Dots
    If class names always start with an uppercase letter, and variable, method, and package names always start with a lowercase letter, then confusion can be avoided.
    In Java, the dot symbol ( . ) is used as a separator in the following situations:
        ? Between package names (java.util)
        ? Between package and class names (homework1.Bank)
        ? Between class and inner class names (Ellipse2D.Double)
        ? Between class and instance variable names (Math.PI)
        ? Between objects and methods (account.getBalance())
