[generic class]
         generic class    type variable
    class       C             <T>        {}

    cannot substitute any of the eight primitive types for a type variable

[generic method]
    Supply the type variables of a generic method between the modifiers and the method return type.
    [public static] <E> void print(E[] a){}

[constrain]
    <E extends Comparable>
    <E extends Comparable & Cloneable>


[Wildcard Types]
    <? extends B>
        public void f(Set<? extends B> s){
            for (B e: s){}
        }
        public <T> void f(Set<T extends B> s){...}
    <? super D>
        public <E extends Comparable<? super E> > E min(E[]);
    <?>
        public static void reverse(List<?> list)
        public static <T> void reverse(List<T> list)


[raw type]
    The raw type of a generic type is obtained by erasing the type variables.
    Erasure turns type variables into the bounds type.
    e.g.
        C<T> ==>> C<Object>
        C<T extends Comparable> ==>> C<Comparable>

        you cannot construct an array of a generic type. 
            Because new E[] ==>> new Object[], the compiler disallows it.


    COMMON ERROR 17.3:  Using Generic Types in a Static Context
    public class C<T>
    {
        // C<T> ==>> C<Object>; after all, there is only one class
        // so there is one static field.
        . . .
        private static T m; // ERROR
        public static List<T> f(T t, int n) { . . . } // ERROR
        private static class Node { public T data; public Node next; } // ERROR
    }
    
    public class C<T>
    {
        . . .
        // private static T m; // ERROR
        public static <X> List<X> f(X t, int n) { . . . }
        private static class Node<X> { public X data; public Node<X> next; } // ERROR
    }
    
    










