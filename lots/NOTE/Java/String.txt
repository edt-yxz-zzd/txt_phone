create separate format instances for each thread.


java.text.MessageFormat // begin from {0}
    grammar
        MessageFormatPattern:
             String
             MessageFormatPattern FormatElement String
        
        FormatElement:
             { ArgumentIndex }
             { ArgumentIndex , FormatType }
             { ArgumentIndex , FormatType , FormatStyle }
        
        FormatType: one of 
             number date time choice
        
        FormatStyle:
             short
             medium
             long
             full
             integer
             currency
             percent
             SubformatPattern

    String:
        UnquotedString
        QuotedString
            // a pair of single quotes
            // "''" ==>> "'"
            // "'.+'" ==>> ".+"
            // "'{0}'" ==>> "{0}"
    SubformatPattern:
        // depends on FormatType
        // see:
        //  DecimalFormat
        //  SimpleDateFormat
        //  ChoiceFormat
    

    Object[] objs = {...};
    MessageFormat fmt = new MessageFormat(
        "The disk \"{1}\" contains {0} file(s).");
    String result = fmt.format(objs); // ?? I cannot find this method in API doc
    objs = fmt.parse(result, new ParsePosition(0));


    MessageFormat(String pattern[, Locale locale])
    StringBuffer format(Object[] arguments, StringBuffer result, FieldPosition pos)
    static String format(String pattern, Object... arguments)
    Object[] parse(String source[, ParsePosition pos])
    String toPattern();

java.util.Formatter // begin from %1$
    for general, character, and numeric types
        %[argument_index$][flags][width][.precision]conversion
    for dates and times
        %[argument_index$][flags][width]conversion
    
    
    StringBuilder sb = new StringBuilder();
    // Send all output to the Appendable object sb
    Formatter formatter = new Formatter(sb, Locale.US);
    
    // Explicit argument indices may be used to re-order output.
    formatter.format("%4$2s %3$2s %2$2s %1$2s", "a", "b", "c", "d")
    // -> " d  c  b  a"
    
    // Optional locale as the first argument can be used to get
    // locale-specific formatting of numbers.  The precision and width can be
    // given to round and align the value.
    formatter.format(Locale.FRANCE, "e = %+10.4f", Math.E);
    // -> "e =    +2,7183"
    
    // The '(' numeric flag may be used to format negative numbers with
    // parentheses rather than a minus sign.  Group separators are
    // automatically inserted.
    formatter.format("Amount gained or lost since last statement: $ %(,.2f",
                     balanceDelta);
    // -> "Amount gained or lost since last statement: $ (6,217.58)"
    








