java.util.ResourceBundle

ResourceBundle = Map String Object
getBundle :: String -> Locale -> Loader -> Map String Object
//           family                        ResourceBundle


// set Locale
ResourceBundle myResources = ResourceBundle.getBundle("MyResources", currentLocale);
// translate
button1 = new Button(myResources.getString("OkKey"));



getBundle ::
candidate bundle names:
    baseName + "_" + language + "_" + script + "_" + country + "_" + variant
    baseName + "_" + language + "_" + script + "_" + country
    baseName + "_" + language + "_" + script
    baseName + "_" + language + "_" + country + "_" + variant
    baseName + "_" + language + "_" + country
    baseName + "_" + language
    baseName
    
    NOTE:
        if no country
            baseName + "_" + language + "_" + "_" + variant

for each candidate bundle name:
    candidate bundle name ==>> class name & properties file name
    try:
        return new load(class name)()
    except:pass
    properties file name = (candidate bundle name).replace('.', '/') + '.properties'
    try:
        return new PropertyResourceBundle(load_properties_file(properties file name))
    except:pass








