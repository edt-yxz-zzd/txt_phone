java.util.Properties
    java -Dxxx.yyy=zzz ...

java -X
    java -XshowSettings:properties
    java -XshowSettings:locale

java -D
    java -Djava.util.logging.config.class=ClassName
    java -Djava.util.logging.config.file=xxx.properties

    if (defined java.util.logging.config.class)
        new ClassName():
            getMngr().readConfiguration(InputStream)
            getLogger().setLevel(...);
            getLogger().addHandler(...);
    else if (defined java.util.logging.config.file)
        getLogManager().readConfiguration(InputStream)
    else
        file = <Java installation directory>/lib/logging.properties
        getLogManager().readConfiguration(InputStream)


java.util.logging.Logger
    // should keep a strong reference
    Logger logger = Logger.getLogger(String name, String resourceBundleName)
    Logger.getGlobal() // should this keep a strong reference??
    
    logger.log(Level.FINER, D::calc|()->D.calc());


    java -Djava.util.logging.config.file=my.logging.properties
    // from .../jdk8u25/jre/lib/logging.properties
    # By default we only configure a ConsoleHandler, which will only
    # show messages at the INFO and above levels.
    #handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
    handlers= java.util.logging.ConsoleHandler
    
    # Default global logging level.
    .level = INFO
    
    # Limit the message that are printed on the console to INFO and above.
    java.util.logging.ConsoleHandler.level = INFO
    java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

    # default file output is in user's home directory.
    java.util.logging.FileHandler.pattern = %h/java%u.log
    java.util.logging.FileHandler.limit = 50000
    java.util.logging.FileHandler.count = 1
    java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter


ResourceBundle

