1. primitive type or void ==>> same as source
    int.class.getName() === 'int'
    void.class.getName() === 'void'
2. non-array non-primitive type ==>> binary_name
    xxx.yyy.MyClass$1$2$Inner
3. array type of primitive type ==>> regex"\[[ZBCDFIJS]"
4. array type of class or interface ==>> regex"\[L{binary_name};"
5. array type of array type ==>> regex"\[{array_name}"




https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getName--

public String getName()

Returns the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String.

If this class object represents a reference type that is not an array type then the binary name of the class is returned, as specified by The Javaâ„¢ Language Specification.

If this class object represents a primitive type or void, then the name returned is a String equal to the Java language keyword corresponding to the primitive type or void.

If this class object represents a class of arrays, then the internal form of the name consists of the name of the element type preceded by one or more '[' characters representing the depth of the array nesting. The encoding of element type names is as follows:

    Element Type 	    	Encoding
    boolean 	    	Z
    byte 	    	B
    char 	    	C
    class or interface 	    	Lclassname;
    double 	    	D
    float 	    	F
    int 	    	I
    long 	    	J
    short 	    	S

The class or interface name classname is the binary name of the class specified above.

Examples:

     String.class.getName()
         returns "java.lang.String"
     byte.class.getName()
         returns "byte"
     (new Object[3]).getClass().getName()
         returns "[Ljava.lang.Object;"
     (new int[3][4][5][6][7][8][9]).getClass().getName()
         returns "[[[[[[[I"


Returns:
    the name of the class or interface represented by this object.

