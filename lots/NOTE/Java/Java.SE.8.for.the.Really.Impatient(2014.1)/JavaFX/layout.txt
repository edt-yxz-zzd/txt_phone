
pane
    // not like Swing where pane + layout
    // but pane<layout>
    BorderPane pane = new BorderPane();
    pane.setTop(new Button("Top"));
    pane.setLeft(new Button("Left"));
    pane.setCenter(new Button("Center"));
    pane.setRight(new Button("Right"));
    pane.setBottom(new Button("Bottom"));
    stage.setScene(new Scene(pane));
    
NOTE: 
    expand or not
        With the Swing BorderLayout, buttons were expanded to fill each region of the layout. 
        In JavaFX, a button does not expand past its natural size.

[box]
    HBox buttons = new HBox(10); // ten pixels between controls
    buttons.getChildren().addAll(yesButton, noButton, maybeButton);
    
    VBox pane = new VBox(10);
    pane.getChildren().addAll(question, buttons);
    pane.setPadding(new Insets(10)); // Without it, the label and the buttons would touch the window border.





[unit : pixel]
    CAUTION: In JavaFX, dimensions are specified in pixels. 
        In our example, we use ten pixels for the box spacing and padding.
        This is not really appropriate nowadays, when pixel densities can vay widely. 
        One way to overcome this is to compute dimensions in rem, as you would do in CSS3. 
        (A rem or "root em" is the height of the default font of the document root.)
        
        final double rem = new Text("").getLayoutBounds().getHeight();
        pane.setPadding(new Insets(0.8 * rem));

[GridPane]
    Swing had the GridBagLayout as "the mother of all layout managers," 
    JavaFX has the GridPane.

    specify column and row index (in that order; think x- and y-coordinates)
        pane.add(usernameLabel, 0, 0);
        pane.add(username, 1, 0);
        pane.add(passwordLabel, 0, 1);
        pane.add(password, 1, 1);

    specify the spans after the positions
        pane.add(buttons, 0, 2,     2, 1); // spans two columns and one row

    span all remaining rows or columns
        GridPane.REMAINING
    
    alignment
        // horizontal alignment of a child
        GridPane.setHalignment(usernameLabel, HPos.RIGHT);
        
        CAUTION: Do notcenter the HBox inside a grid.
            That box has expanded to the full horizontal size, 
                and centering will not change its position. 
            Instead, tell the HBox to center its contents:
                hbox.setAlignment(Pos.CENTER);


    spacing
        // spacing around the rows and columns
        pane.setHgap(0.8 * em);
        pane.setVgap(0.8 * em);
        
        // padding around the table
        pane.setPadding(new Insets(0.8 * em));

        TIP: For debugging, it can be useful to see the cell boundaries
            pane.setGridLinesVisible(true);
            
            // to see the borders of an individual child
            // ==>> set its border
            
            // with CSS
            buttons.setStyle("-fx-border-color: red;");


Table 4-2 JavaFX Layouts
    AnchorPane
        Children can be positioned in absolute positions, 
        or relative to pane's boundaries. 
        This is the default in the SceneBuilder layout tool.

[deprecated]
    JavaFX Script had a "builder" syntax




see FXML
see CSS











