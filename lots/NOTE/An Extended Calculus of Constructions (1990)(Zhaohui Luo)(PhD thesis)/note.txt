
ref:
    "An Extended Calculus of Constructions (1990)(Zhaohui Luo)(PhD thesis).pdf"



1.1.1 Type theories as logical systems
* Coquand-Huet's calculus of constructions
    CC is a very strong functional system. As Girard pointed out, any further attempt to extend the calculus must be very cautious [Gir86]. Adding another impredicative level to the calculus would result in a logically inconsistent system in which Girard's paradox can be deduced [Coq86a]. Similarly, adding (type-indexed) strong dependent sum as proposition constructor would also lead to logical inconsistency [Coq86a][HH86][MH88] (see section 2.2.4 for a further discussion).
    # one impredicative level is OK; more may be inconsistent.
    #   see: "impredicativity.txt"
    # not allow dependent tuple???

1.1.2 Applications in computer science
Programming methodology
    Sorting_ver1
        =[def]= @ls:List(N). ?ls2:List(N). sorted(ls, ls2)
        = [ls <- List UInt] -> ([ls2 <- List UInt], sorted ls ls2)

    How to do specifications in the calculus of constructions [CH88] does not seem to have been paid enough attention. This is partly because of the fact that (type indexed) SUM-types are inconsistent with impredicativity, which prevented people from using SUM-types to describe specifications. In the extended calculus of constructions we are going to describe, we show how SUM-types can be used to describe program specifications.

    Sorting_ver2
        =[def]= ?f:List(N) -> List(N). @ls:List(N). sorted(ls,f(ls))
        = ([f <- List UInt -> List UInt], [ls <- List UInt] -> sorted ls (f ls))
    Then, an implementation of this specification is a pair consisting of a sorting program and a proof of the correctness of the program. This gives a view of program verification or correct program development.

1.2 Motivations and Overview of the Thesis
    We present and study a type theory ECC - Extended Calculus of Constructions. ECC is developed based on Coquand-Huet's calculus of constructions [CH88][Coq851 and the ideas of type universes and SUM-typesin Martin-Lof's type theory [ML73,84]. It extends the calculus of constructions by SUM-types and fully cumulative (predicative) type universes and may also be considered as an impredicative extension of Martin-Lof's type theory with universes by adding a new (impredicative) universe Prop of propositions.
    # ECC = infinite predicative universes + one impredicative universe Prop

    We have thus integrated the (logical) power of impredicativity with the (structural) power of predicative universes and SUM-types into a unifying theory of dependent types. The known difficulty that the introduction of SUM-types together with impredicativity leads to logical paradox [Coq86a][HH86][MH88] is solved by adding SUM-types as non-propositional types in the predicative universes of the calculus and lifting propositions as higher-level types. Type inclusions between universes are coherently generalized to the other types by introducing a syntactic cumulativity relation over terms so that a nice unicity of typing is obtained based on a simple notion of principal type.

    # impredicativity for logical power
    # predicativity for structural power
    #   SUM-types = non-propositional types in predicative universes
    #   higher-ordermodule mechanism which can describe parameterized modules

    The main proof-theoretic result about the calculus is:
    â€¢  Strong Normalization: Every well-typed term is strongly normalizable.
    i.e. every reduction sequence starting from a well-typed term is terminating. This result shows the proof-theoretic consistency of the calculus. Its proof uses Girard-Tait's reducibility method [Gir72][Tai751 and is based on the proofs of strong normalization for the calculus of constructions [CH88] by Coquand [Coq86b] and Pottinger [Pot87]. One of the special key points of this proof is to find a suitable ranking of the types to make explicit the predicativity of the predicative universes. We do this by proving a quasi-normalization theorem which enables us to define a two-dimensional ranking measure of types.
    # Girard-Tait's reducibility method + proofs for CC + quasi-normalization + two-dimensional ranking

    Program specifications can be expressed by SUM-types in a similar style to using Martin-Lof's type theory as we discussed in section 1.1.2, but propositions in the embedded higher-order logic are used to express program properties.
    # for properties of program: ([f <- A->B], P f)
    # ????not for subset: ([u <- UInt], P u)


ECC definition:
    see:
        "def - 1. ECC.txt"


universal/existential quantification
universal/existential quantifier
    "for all"
    "there exists"/"for some"


3.3 Principal Types
    Lemma 3.3.3 (diamond property of (~<=~))
        [L |- M : A][L |- M : B] ==>> [?C:Term. [L |- M : C][C ~<=~ A][C ~<=~ B]]
    [A is a principal type of M under L] =[def]= [L |- M : A][@A2. [L |- M : A2] <==> ?K. [K is kind][L |- A2 : K][A ~<=~ A2]]

    T<L>(M) =[def]= principal type of M under L


4.2 Levels of Types

    let NInt = IntGeNeg1 # [-1..]
    [L |- A : K][K is a kind]
        level :: Context -> TypeTerm -> NInt
        level<L>(A) =[def]= kind2level T<L>(A)
        kind2level :: Kind -> NInt
        kind2level Prop = -1
        kind2level (Universe i) = i

    [L-type A,B]
        [A ~=~ B] ==>> [level L A = level L B]
        [A ~<=~ B] ==>> [level L A <= level L B]
    [L-term M,N][[N == M _]+[N == fst M]+[N == snd M]]
        [level L T<L>(N) <= level L T<L>(M)]
        [T<L>(T<L>(N)) ~<=~ T<L>(T<L>(M))]
    The above lemma implies that the level of the principal type of the major term of a redex is not less than that of the principal type of the redex.

quasi-normalization theorem
4.3 The Quasi Normalization Theorem
    The ultimate goal of proving the quasi-normalization theorem is to make explicit the predicativity of formations of the non-propositional types. The basic idea to achieve this is to proceed as follows:
    1. Quasi normalization: every Env-term can be reduced to some term which does not contain any sigma-redex or any beta-redex whose major term has a non-propositional principal type; and this implies:
    2. every Env-type can be reduced to some head-normal form; and this allows us to define:
    3. the degrees of Env-types which serves as the second dimension of the complexity measure to be defined.

    # elim all non-propositional redexes




base terms and the key variable of a base term
base_term   = variable
            | base_term term # App
            | fst base_term
            | snd base_term
key_variable :: base_term -> variable
key_variable variable = variable
key_variable (base_term term) = key_variable base_term
key_variable (fst base_term) = key_variable base_term
key_variable (snd base_term) = key_variable base_term



ECC[n] = max universe is (Universe n)
ECC = \-/~ ECC[n] ~{n}
[system is ECC[n]]
    [Env |- x:A]
        [A ~<~ Universe n]
    [Env |- M : A]
        [(Universe n) not occur in Env]
        [(Universe n) not occur in M]
        [[(Universe n) not occur in A]+[A === Universe n][M is not variable][[M is (Universe (n-1))/Prop]+[M is of form @x:A.B/?x:A.B]]]


Definition 4.3.3. j-degree of Env-types in ECC[n]
degree<n,j> :: type -> UInt
# count height of input-type and length of arrow
#degree<n,-1> A = 0# extended
degree<n,j> A
    | @i:UInt. [i>j] ==>> [A is i-quasi-normal] =
        if level A =/= j then 0 else
        if A is kind then 1 else
        if A is base_term then 1 else
        if A is @x:A1.A2 or ?x:A1.A2 then 1+max(this_func A1, this_func A2) else
          impossible
    | ?i:UInt. [i>j] /\ [A is not i-quasi-normal] =
        # [reduce A until i-quasi-normal]
        let A' = from: ?A':type. [A |> A'][@i:UInt. [i>j] ==>> [A' is i-quasi-normal]]
        in  this_func A'
# why not use a multiset?
#   Map Rank Count
#   or sorted[(Rank, Count)]
#   ((\x:I.M : F) (N:I)) |> [N/x]M
#   assume Rank(F) > Rank(I) >= max{Rank(N') | N' is a subterm of N}
#   remove a object of type F, though adding many less Rank objects.
#   the multiset decrease
#
#   F = @x:I.O
#   \x:I.M : @x:I.O
#   [N/x]M : [N/x]O
#   [N/x]O vs @x:I.O
#   since (O : Universe i) instead of (O:Prop)
#       # quasi-normal not consider Prop
#       * O = @@@...P x # arrow that finally return an (P x)
#           in this case length of arrow may increase after substitution
#           (P x) is a type, KP is a kind
#           @x:I:K. @@@...(P x:KP) -->> [N/x]@@@... (P x:KP)
#           kind K go, kind KP and lesser kinds come in at this arrow level
#       * or not.
#           in this case length of arrow may decrease after substitution
#           kind K go at this arrow level
#


Lemma 4.3.4 (well-definedness of i-degree):
    [degree<n,j> is a function from the Env-types of ECC[n] to UInt]
    [A,B are Env-types of ECC[n]]
        [A ~=~ B] ==>> [degree<n,j> A == degree<n,j> B]
Lemma 4.3.5
    [A,B are Env-types of ECC[n]]
        [level A == j] <==> [degree<n,j> A >= 1]
        [A ~<=~ B] ==>> [level A < level B]+[level A == level B][degree<n,j> A <= degree<n,j> B]
            # what about extended (~<=~)?
            #   level using principal type, donot care about decl type
            #   but [@x:Universe 3. (x : Universe 4) : Universe 5] ~<=~ [@x:Universe 1. (x : Universe 5) : Universe 6]
            #   but [@x:Universe 3. x : Universe 4] ~<=~ [@x:Universe 1. x : Universe 2]

Lemma 4.3.6
    # Env[k] === (e[k]:E[k])
    # Env[:k] is a valid context
    [Env[:k] |- N : E[k+1]][Env[:k+1] |- B : _]
        [level E[k+1] <= j][level B <= j] ==>> [degree<n,j>([N/e[k+1]]B) <= degree<n,j>(B)]
    The above lemma shows that type-preserving substitution does not increase the i-degree of an Env-type B if the levels of B and the principal type of the substituted variable are not bigger than j. (c.f. remark after lemma 4.2.3.) Note that the condition level (E[k+1]) < j is necessary and important (c.f. proof of lemma 4.4.4).

[R is a redex in ECC[n]]
    delta<n,j> R =[def]= degree<n,j>(T<Env>(major_term_of R))
[M is a term in ECC[n]]
    gamma<n,j> M =[def]= max{delta<n,j>(R) | R is a redex occurring in M}
        # default = ??? if there is no redex
        #   0 <<== because of definition of j-quasi-normal; see below
Definition 4.3.7 (j-quasi-normal Env-terms)
    An Env-term M is j-quasi-normal if and only if gamma<n,j> M = 0, i.e. M does not contain any redex such that the level of the principal type of its major term is j.
    [M is Env-term in ECC[n]]
        [M is j-quasi-normal] =[def]= [gamma<n,j> M == 0]

Lemma 4.3.9 Let Env-term M be a redex and M' be its contractum. If M is i-quasi-normal for all i > j and M is the only redex in M whose delta<n,j>-value equals (gamma<n,j> M) > 0, then
    1. gamma<n,j> M' < gamma<n,j> M
    2. degree<n,j>(T<Env> M') < gamma<n,j> M, if M' is of lambda/abs-form or pair-form.
    # M is the only max-delta<n,j>-value redex




4.4 A Complexity Measure of Types
    [A is a Env-type in ECC[n]]
        beta :: type -> (UInt, UInt)
        beta A =[def]= (1+level A, degree<n,level A> A)
        # NOTE:
        #   range of level = [-1..] # why (1+)
        #   range of degree = [0..]
        #   degree<n,-1> A = 0 # extended
Lemma 4.4.4
    [A is a Env-type
    ][A is non-propositional type # i.e. Prop ~<~ T<Env>(A) = Universe i
    ][A |> A'][A' is quasi-normal
    ][[A' = @x:A1.A2]+[A' = ?x:A1:A2]]
        [beta A1 < beta A]
        [Env |- N : A1]
            beta([N/x]A2) < beta A

    The existence of the complexity measure beta with the above property shows that the formations of the non-propositional types are essentially non-circular and that the type universes (Universe i) are predicative.
    In other words, the types can be ranked in such a way (by beta) that the existence of any non-propositional type depends essentially only on those types with lower ranks.
    This is one of the key property used to prove strong normalization theorem for ECC (see the next chapter). Note that only non-propositional types can be stratified to have the above property. For propositions, there is no way one can define such a measure to stratify them because formations of propositions are impredicative (circular).


5.1 Girard-Tait's Reducibility Method
    Girard-Tait's reducibility method
    1. Define a notion of saturated sets or candidates of reducibility.
    2. Define an interpretation of types A, Eval<rho>(A), with respect to type variable assignment rho.
    3. Prove that Eval<rho>(A) is a saturated set (or candidate of reducibility) for every type A.
    4. Prove the soundness of the interpretation Eval, i.e. if M is of type A, then M is in Eval<rho>(A).

Definition 5.1.1 (key redex)
    key_redex :: term -> Maybe term

    #key_redex R | R is a redex = Just R
    key_redex R@((\x:X.M) N) = Just R
    key_redex R@(fst Pair<A>(M,N)) = Just R
    key_redex R@(snd Pair<A>(M,N)) = Just R

    key_redex (M N) = key_redex M
    key_redex (fst M) = key_redex M
    key_redex (snd M) = key_redex M
    key_redex _ = Nothing

    The intuitive idea behind the notion of key redex is that every reduction sequence, starting from a term with key redex and ending with a normal form, will necessarily contract the key redex of the term (possibly after contracting some redexes in subterms of the key redex).

    [key_redex M == Just keyR]
        red_k(M) =[def]= contractum of M by contracting keyR



SN(A) =[def]= {M | [Env |- M : A], M is strongly normalizable}

Definition 5.1.2 (saturated sets)
    [A is a Env-type]
        [S is an A-saturated set] =[def]= [S <- Sat(A)]

        Sat(A) =[def]= {S <- 2**SN(A) |
            [{M <- SN(A) | [M is a base term]} <= S]
            [[M <- SN(A)][key_redex M =/= Nothing]
                [red_k(M) <- S] ==>> [M <- S]
                # [key_redex M == Just keyR][keyR <- S] ==>> [M <- S]
            ]}

[M is a Env-term]
    [M is simple] =[def]= [M is a base term]+[M has key redex]
    #???[M is simple] =[def]= [M is (variable|M1 M2|fst M3|snd M4)]
        but these 2 definition are not the same!!!

Definition 5.1.3 (candidates of reducibility)
    [A is a Env-type]
        [S is an A-candidate of reducibility] =[def]= [S <- CR(A)]

        CR(A) =[def]= {S <- 2**SN(A) |
            [[M <- S][M |>[1] N] ==>> [N <- S]]
            [[Env |- M : A][M is simple]
                [[M |>[1] N] ==>> [N <- S]] ==>> [M <- S]
            ]}

[CR(A) <= Sat(A)]

