e ../lots/NOTE/char/space.txt

[[[
#begin-space_chars
===
[[
@[unicode14_0_0&py3_11_9_re2_2_1]

py.re.space:29
unicode14.WSpace:25
unicode14.Pat_WS:11

relationship:
  [ranges4Pat_WS <!> ranges4WSpace]
  [ranges4Pat_WS <!> ranges4space4py_re]
  [ranges4WSpace < ranges4space4py_re]

ranges4Pat_WS_and_py_re_sp:31
  {0x9: 5, 0x1C: 5, 0x85: 1, 0xA0: 1, 0x1680: 1, 0x2000: 11, 0x200E: 2, 0x2028: 2, 0x202F: 1, 0x205F: 1, 0x3000: 1}
  '\t\n\x0b\x0c\r\x1c\x1d\x1e\x1f \x85\xa0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200e\u200f\u2028\u2029\u202f\u205f\u3000'
  ages4sp
    {'3.0', '3.2', '1.1'}
  scripts4sp
    {'Ogam', 'Zyyy'}
[:list_all_spaces6unicode14_0_0__py3_11_9_re2_2_1]:goto

]]
[[
view ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/xml/resource_loader.py
ls ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/xml/ver14_0_0/
ls ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/xml/ver14_0_0/ | grep space -i
  Pat_WS.Pattern_White_Space.ver14_0_0.xml.out.txt
  WSpace.White_Space.ver14_0_0.xml.out.txt

]]
[[
view ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/xml/ver14_0_0/Pat_WS.Pattern_White_Space.ver14_0_0.xml.out.txt
{'N'
: {0x0: 9, 0xE: 18, 0x21: 100, 0x86: 8072, 0x2010: 24, 0x202A: 1105878}
,'Y'
: {0x9: 5, 0x20: 1, 0x85: 1, 0x200E: 2, 0x2028: 2}
}
]]
[[
view ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/xml/ver14_0_0/WSpace.White_Space.ver14_0_0.xml.out.txt
{'N'
: {0x0: 9, 0xE: 18, 0x21: 100, 0x86: 26, 0xA1: 5599, 0x1681: 2431, 0x200B: 29, 0x202A: 5, 0x2030: 47, 0x2060: 4000, 0x3001: 1101823}
,'Y'
: {0x9: 5, 0x20: 1, 0x85: 1, 0xA0: 1, 0x1680: 1, 0x2000: 11, 0x2028: 2, 0x202F: 1, 0x205F: 1, 0x3000: 1}
}
]]
[[
from seed.data_funcs.rngs import IRanges
ranges4WSpace = IRanges.from_hex2sz({0x9: 5, 0x20: 1, 0x85: 1, 0xA0: 1, 0x1680: 1, 0x2000: 11, 0x2028: 2, 0x202F: 1, 0x205F: 1, 0x3000: 1})
ranges4non_WSpace = IRanges.from_hex2sz({0x0: 9, 0xE: 18, 0x21: 100, 0x86: 26, 0xA1: 5599, 0x1681: 2431, 0x200B: 29, 0x202A: 5, 0x2030: 47, 0x2060: 4000, 0x3001: 1101823})
ranges4Pat_WS = IRanges.from_hex2sz({0x9: 5, 0x20: 1, 0x85: 1, 0x200E: 2, 0x2028: 2})
ranges4non_Pat_WS = IRanges.from_hex2sz({0x0: 9, 0xE: 18, 0x21: 100, 0x86: 8072, 0x2010: 24, 0x202A: 1105878})

ranges4WSpace.len_ints()
  25
ranges4non_WSpace.len_ints()
  1114087
(ranges4non_WSpace | ranges4WSpace).to_hex_repr_pair_list()
  [(0x0, 0x110000)]

ranges4Pat_WS.len_ints()
  11
ranges4non_Pat_WS.len_ints()
  1114101
(ranges4non_Pat_WS | ranges4Pat_WS).to_hex_repr_pair_list()
  [(0x0, 0x110000)]
0x110000
  1114112


]]

[[
Python 3.11.9 (main, Jun 10 2024, 00:57:33) [Clang 17.0.2 (https://android.googlesource.com/toolchain/llvm-project d9f89f4d1 on linux###...)]
>>> import re
>>> rex = re.compile(r'\S')
>>> rex.sub('', ' a\nb')
' \n'
>>> s = rex.sub('', ''.join(map(chr, range(0x11_00_00))))
>>> s
'\t\n\x0b\x0c\r\x1c\x1d\x1e\x1f \x85\xa0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u2028\u2029\u202f\u205f\u3000'
>>> len(s)
29
>>> import unicodedata as u
>>> dir(u)
['UCD', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_ucnhash_CAPI', 'bidirectional', 'category', 'combining', 'decimal', 'decomposition', 'digit', 'east_asian_width', 'is_normalized', 'lookup', 'mirrored', 'name', 'normalize', 'numeric', 'ucd_3_2_0', 'unidata_version']
>>> u.ucd_3_2_0.unidata_version
'3.2.0'
>>> u.unidata_version
'14.0.0'
>>> dir(re)
['A', 'ASCII', 'DEBUG', 'DOTALL', 'I', 'IGNORECASE', 'L', 'LOCALE', 'M', 'MULTILINE', 'Match', 'NOFLAG', 'Pattern', 'RegexFlag', 'S', 'Scanner', 'T', 'TEMPLATE', 'U', 'UNICODE', 'VERBOSE', 'X', '_MAXCACHE', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_cache', '_casefix', '_compile', '_compile_repl', '_compiler', '_constants', '_expand', '_parser', '_pickle', '_special_chars_map', '_subx', 'compile', 'copyreg', 'enum', 'error', 'escape', 'findall', 'finditer', 'fullmatch', 'functools', 'match', 'purge', 'search', 'split', 'sub', 'subn', 'template']
>>> re.__version__
'2.2.1'

import seed.data_funcs.rngs
import importlib
importlib.reload(seed.data_funcs.rngs)
import seed.data_funcs.rngs
from seed.data_funcs.rngs import IRanges
ranges4WSpace = IRanges.from_hex2sz({0x9: 5, 0x20: 1, 0x85: 1, 0xA0: 1, 0x1680: 1, 0x2000: 11, 0x2028: 2, 0x202F: 1, 0x205F: 1, 0x3000: 1})
ranges4Pat_WS = IRanges.from_hex2sz({0x9: 5, 0x20: 1, 0x85: 1, 0x200E: 2, 0x2028: 2})
ranges4space4py_re = IRanges.from_sorted_chars('\t\n\x0b\x0c\r\x1c\x1d\x1e\x1f \x85\xa0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u2028\u2029\u202f\u205f\u3000')

ranges4WSpace.len_ints()
  25
ranges4Pat_WS.len_ints()
  11
ranges4space4py_re.len_ints()
  29

ranges4space4py_re.to_hex_repr_pair_list()
  [(0x9, 0xE), (0x1C, 0x21), (0x85, 0x86), (0xA0, 0xA1), (0x1680, 0x1681), (0x2000, 0x200B), (0x2028, 0x202A), (0x202F, 0x2030), (0x205F, 0x2060), (0x3000, 0x3001)]
ranges4space4py_re.to_hex2sz()
  {0x9: 5, 0x1C: 5, 0x85: 1, 0xA0: 1, 0x1680: 1, 0x2000: 11, 0x2028: 2, 0x202F: 1, 0x205F: 1, 0x3000: 1}

ranges4Pat_WS < ranges4WSpace
  False

(ranges4Pat_WS - ranges4WSpace).to_hex2sz()
  {0x200E: 2}
(ranges4WSpace - ranges4Pat_WS).to_hex2sz()
  {0xA0: 1, 0x1680: 1, 0x2000: 11, 0x202F: 1, 0x205F: 1, 0x3000: 1}

(ranges4space4py_re - ranges4WSpace).to_hex2sz()
  {0x1C: 4}
(ranges4WSpace - ranges4space4py_re).to_hex2sz()
  {}

(ranges4Pat_WS - ranges4space4py_re).to_hex2sz()
  {0x200E: 2}
(ranges4space4py_re - ranges4Pat_WS).to_hex2sz()
  {0x1C: 4, 0xA0: 1, 0x1680: 1, 0x2000: 11, 0x202F: 1, 0x205F: 1, 0x3000: 1}

relationship:
  [ranges4Pat_WS <!> ranges4WSpace]
  [ranges4Pat_WS <!> ranges4space4py_re]
  [ranges4WSpace < ranges4space4py_re]

ranges4Pat_WS_and_py_re_sp = (ranges4Pat_WS | ranges4space4py_re)
ranges4Pat_WS_and_py_re_sp.len_ints()
  31
ranges4Pat_WS_and_py_re_sp.to_hex2sz()
  {0x9: 5, 0x1C: 5, 0x85: 1, 0xA0: 1, 0x1680: 1, 0x2000: 11, 0x200E: 2, 0x2028: 2, 0x202F: 1, 0x205F: 1, 0x3000: 1}

for i in ranges4Pat_WS_and_py_re_sp.iter_ints():
    ch = chr(i)
    nm = u.name(ch, '<None>')
    print(hex(i), nm)
见下面:
]]
[[
import unicodedata
from seed.data_funcs.rngs import IRanges
from nn_ns.CJK.unicode.ucd_unihan.xml.resource_loader import data_loader4depth2__literal_eval__u8
(age2hex2sz, hex2age) = data_loader4depth2__literal_eval__u8.ver14_0_0.age
(script2hex2sz, hex2script) = data_loader4depth2__literal_eval__u8.ver14_0_0.sc

ranges4Pat_WS_and_py_re_sp = IRanges.from_hex2sz({0x9: 5, 0x1C: 5, 0x85: 1, 0xA0: 1, 0x1680: 1, 0x2000: 11, 0x200E: 2, 0x2028: 2, 0x202F: 1, 0x205F: 1, 0x3000: 1})
ages4sp = {hex2age[u] for u in ranges4Pat_WS_and_py_re_sp.iter_ints()}
ages4sp
  {'3.0', '3.2', '1.1'}
scripts4sp = {hex2script[u] for u in ranges4Pat_WS_and_py_re_sp.iter_ints()}
scripts4sp
  {'Ogam', 'Zyyy'}

[:list_all_spaces6unicode14_0_0__py3_11_9_re2_2_1]:here
for i in ranges4Pat_WS_and_py_re_sp.iter_ints():
    ch = chr(i)
    nm = unicodedata.name(ch, '<None>')
    age = hex2age[i]
    script = hex2script[i]
    print(f'0x{i:0>4X}:{age}:{script}:{nm}')
0x0009:1.1:Zyyy:<None>
0x000A:1.1:Zyyy:<None>
0x000B:1.1:Zyyy:<None>
0x000C:1.1:Zyyy:<None>
0x000D:1.1:Zyyy:<None>
0x001C:1.1:Zyyy:<None>
0x001D:1.1:Zyyy:<None>
0x001E:1.1:Zyyy:<None>
0x001F:1.1:Zyyy:<None>
0x0020:1.1:Zyyy:SPACE
0x0085:1.1:Zyyy:<None>
0x00A0:1.1:Zyyy:NO-BREAK SPACE
0x1680:3.0:Ogam:OGHAM SPACE MARK
0x2000:1.1:Zyyy:EN QUAD
0x2001:1.1:Zyyy:EM QUAD
0x2002:1.1:Zyyy:EN SPACE
0x2003:1.1:Zyyy:EM SPACE
0x2004:1.1:Zyyy:THREE-PER-EM SPACE
0x2005:1.1:Zyyy:FOUR-PER-EM SPACE
0x2006:1.1:Zyyy:SIX-PER-EM SPACE
0x2007:1.1:Zyyy:FIGURE SPACE
0x2008:1.1:Zyyy:PUNCTUATION SPACE
0x2009:1.1:Zyyy:THIN SPACE
0x200A:1.1:Zyyy:HAIR SPACE
0x200E:1.1:Zyyy:LEFT-TO-RIGHT MARK
0x200F:1.1:Zyyy:RIGHT-TO-LEFT MARK
0x2028:1.1:Zyyy:LINE SEPARATOR
0x2029:1.1:Zyyy:PARAGRAPH SEPARATOR
0x202F:3.0:Zyyy:NARROW NO-BREAK SPACE
0x205F:3.2:Zyyy:MEDIUM MATHEMATICAL SPACE
0x3000:1.1:Zyyy:IDEOGRAPHIC SPACE


]]
[[
str.isspace <==> py.re r"\s"
<<==:
sp31 = ranges4Pat_WS_and_py_re_sp.to_chars__str()
sp31
  '\t\n\x0b\x0c\r\x1c\x1d\x1e\x1f \x85\xa0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200e\u200f\u2028\u2029\u202f\u205f\u3000'
sp31.isspace()
  False
sp31.split()
  ['\u200e\u200f']

sp29 = ''.join(filter(str.isspace, map(chr, range(0x11_00_00))))
sp29
  '\t\n\x0b\x0c\r\x1c\x1d\x1e\x1f \x85\xa0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u2028\u2029\u202f\u205f\u3000'
len(sp31)
len(sp29)

]]


===
#end-space_chars
]]]
