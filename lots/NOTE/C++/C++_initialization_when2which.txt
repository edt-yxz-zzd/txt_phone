when2which

default initialization  
    T object ;  (1) 
    new T ;  (2)   
    [not mentioned subobject] (3)

    1) when a variable with automatic storage duration is declared with no initializer
    2) when an object with dynamic storage duration is created by a new-expression without an initializer
    3) when a base class or a non-static data member is not mentioned in a constructor initializer list and that constructor is called.

value initialization 
    T object {};  (1)  (since C++11)  
     
    T(); 
    T{}; 
     (2)  
    (since C++11)  
     
    new T (); 
    new T {}; 
     (3)  
    (since C++11)  


zero initialization
    static T object ;  (1)   
     
    int () ;  (2)   
     
    char array [ n ] = "";  (3)   


copy initialization
    T object = other ;  (1)   
     
    f(other);  (2)   
     
    return other;  (3)   
     
    catch ( T other) ;  (4)   
     
    T array [ N ] = { other };  (5)   


direct initialization
    T object ( arg ); 
    T object ( arg1, arg2, ... ); 
     (1)   
     
    T object { arg }; 
    T object { arg1, arg2, ... }; 
     (2)  (since C++11)  
     
    T ( other ) 
    T ( arg1, arg2, ... ); 
     (3)   
     
    static_cast< T >( other )  (4)   
     
    new T(args, ...)  (5)   
     
    Class::Class() : member(args, ...) {...  (6)   
     
    [arg](){...  (7)  (since C++11)  
     


aggregate initialization
    T object = {arg1, arg2, ...};  (1)   
     
    T object {arg1, arg2, ...};  (2)  (since C++11)  
 


list initialization
    T object { arg1, arg2, ... };  (1)   
     
    T { arg1, arg2, ... };  (2)   
     
    new T { arg1, arg2, ... };  (3)   
     
    return { arg1, arg2, ... } ;  (4)   
     
    function( { arg1, arg2, ... } ) ;  (5)   
     
    object[ { arg1, arg2, ... } ] ;  (6)   
     
    T( { arg1, arg2, ... } )  (7)   
     
    Class { T member = { arg1, arg2, ... }; };  (8)   
     
    Class::Class() : member{arg1, arg2, ...} {...  (9)   
     
    T object = {arg1, arg2, ...};  (10)   
     




































Trivial default constructor The implicitly-declared default constructor for class T is trivial if all of the following is true: 
    T has no virtual member functions 
    T has no virtual base classes 
    T has no non-static members with brace-or-equal initializers (since C++11) 
    Every direct base of T has a trivial default constructor 
    Every non-static member of class type has a trivial default constructor 
A trivial default constructor is a constructor that performs no action. Objects with trivial default constructors can be created by using reinterpret_cast on any suitably aligned storage, e.g. on memory allocated with std::malloc. All data types compatible with the C language (POD types) are trivially default-constructible. 


Trivial copy constructor The implicitly-declared copy constructor for class T is trivial if all of the following is true: 
    T has no virtual member functions 
    T has no virtual base classes 
    The copy constructor selected for every direct base of T is trivial 
    The copy constructor selected for every non-static class type (or array of class type) memeber of T is trivial 
A trivial copy constructor is a constructor that creates a bytewise copy of the object representation of the argument, and performs no other action. Objects with trivial copy constructors can be copied by copying their object representations manually, e.g. with std::memmove. All data types compatible with the C language (POD types) are trivially copyable. 





