
[page152] CHAPTER 5 Styles
1. Flat C APIs: These are APIs that can be compiled by a C compiler. They simply involve a set of free functions along with any supporting data structures and constants. As this style of interface contains no objects or inheritance, it¡¯s often called flat.
2. Object-Oriented C++ APIs: As a C++ programmer, this is likely the style that you¡¯re most familiar with. It involves the use of objects with associated data and methods and the application of concepts such as inheritance, encapsulation, and polymorphism.
3. Template-Based APIs: C++ also supports generic programming and metaprogramming via its template functionality. This allows functions and data structures to be written in terms of generic types that can be specialized later by instantiating them with concrete types.
4. Data-Driven APIs: This type of interface involves sending named commands to a handler, with arguments that are packaged within a flexible data structure, rather than invoking specific methods or free functions.

TIP
    Try compiling your C API with a C++ compiler for greater type checking and to ensure that a C++ program can use your API.
TIP
    Use an extern ¡°C¡± scope in your C API headers so that C++programs can compile and link against your API correctly.


