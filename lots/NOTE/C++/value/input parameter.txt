
pass-by-value
    f(T a)

    f(a); // user can copy argument
    f(std::move(a)); // user can move argument

pass-by-lvalue-reference
    f(T& a)
pass-by-const-lvalue-reference
    f(T const& a)
pass-by-rvalue-reference
pass-by-universal/forwarding-reference
    f(T&& a)
    // assume '&&' indicate rvalue
    // when may want to move parameter inside f()
    // then force user to move f(std::move(a))
    // but this may not mean rvalue!!!!!!!!!!!!!!!!!!!!!!

    reference collapsing??
    https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers

    ######### ERROR !!!!!!!!!!!!!!!!!!!
    Widget&& var1 = someWidget;      // here, “&&” means rvalue reference
    auto&& var2 = var1;              // here, “&&” does not mean rvalue reference
    template<typename T>
    void f(std::vector<T>&& param);  // here, “&&” means rvalue reference
    template<typename T>
    void f(T&& param);               // here, “&&”does not mean rvalue reference
    template<typename T>
    void f(const T&& param);               // “&&” means rvalue reference
    template <class T, ...> class vector {
        // fully specified parameter type
        // no type deduction;
        void push_back(T&& x);  // && = rvalue reference
        // since template <class T> void vector<T>::push_back(T&& x);

        template <class... Args>
        void emplace_back(Args&&... args); // deduced parameter types
        ...                                // && = universal references
    };

    "&&" in a type declaration sometimes means rvalue reference, but sometimes it means either rvalue reference or lvalue reference.

    

