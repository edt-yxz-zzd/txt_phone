
using "class template" to do pattern match and specialization
    instead of using "function template"
or using std::enable_if


* class template
    template <typename A, typename B> struct F;
    template <typename... As, typename... Bs>
    struct F<tuple<As...>, tuple<Bs...> > { void impl(tuple<As...>&, tuple<Bs...>&){} };
* function template
    template <typename... As, typename... Bs>
    void f(tuple<As...>&, tuple<Bs...>&){}










enable_if
    see: cppreference.com :: enable_if
    * function template
        A common mistake is to declare two function templates that differ only in their default template arguments. This is illegal because default template arguments are not part of function template's signature, and declaring two different function templates with the same signature is illegal.

        // #1, enabled via the return type
            // template signature keep simple
        // #3, enabled via a default parameter (normally never used)
        // #4, enabled via a default template parameter (concrete integral type =0) (never used)
            // function signature keep simple
            <...
            , typename std::enable_if<???, std::nullptr_t>::type = nullptr
            >

    * class template
        // the partial specialization enabled via a default template parameter



