目录:
  第3第4章 摘要
  其他信息+表格

e ../../txt_phone/lots/NOTE/unicode/note4UnicodeStandard_13_0_pdf/unicode_ver13_0第3第4章摘要.txt
copy from:
  view ../../txt_phone/lots/NOTE/unicode/note4UnicodeStandard_13_0_pdf/[20220407]list_all_values_of_property.py
######################
######################
######################
######################
######################
######################
[[[[[[[[[第3第4章 摘要
UnicodeStandard-13.0.pdf


[[[[[[[begin of Chapter 3
3. Conformance
3.5 Properties
    -> Section 4.1, Unicode Character Database
        , for an overview of those data files.
        The actual values of Unicode character properties are specified in the Unicode Character Database.

    -> Chapter 4, Character Properties, contains more detailed descriptions of some particular, important character properties.

    -> Additional properties that are specific to particular characters (such as the definition and use of the right-to-left override character or zero width space) are discussed in the relevant sections of this standard.

Types of Properties
    任何时候以UCD(数据库)为准，标准pdf+UAX并不准确
        UAX:Unicode Standard Annex
    ----
    -> UAX #44, “Unicode Character Database,”
        UCD exclude Unihan
        code point property
        encoded character property
        UCD::PropertyAliases.txt
        UCD::PropertyValueAliases.txt
    -> UAX #38, “Unicode Han Database (Unihan).”
        Unihan
        encoded character property
    -> UAX #31, “Unicode Identifier and Pattern Syntax.”

    ----
    * encoded character property/Unicode character property/character property/property
        ...即 (已赋字符的编码点)的属性

    * abstract character property
        ...即 抽象字符的属性#种类，数字，...

    * code point property
        ...即 编码点的属性#是否字符，...

Property values
    • For example, the East_Asian_Width [EAW] property has the possible values “Narrow”, “Neutral”, “Wide”, “Ambiguous”, and “Unassigned”.

    * Explicit property value
        UCD/Unihan 中 显式指明
    * Implicit property value
        UCD/Unihan 中 隐式指明，通过 规则 或 另行条款
            by a generic rule or by an “otherwise” clause
        ---
        A value for an encoded character property that is given by a generic rule or by an “otherwise” clause in one of the data files of the Unicode Character Database.

    Default Property Values
        同一属性，可能有多个 默认属性值，或者说是，不同编码区 有各自的 默认属性值
        私用区 默认属性值 可被 高层应用协议 覆盖:
            -> Section 23.5, Private-Use Characters.


Classification of Properties by Their Values
    -> Section 5.7.6, Properties Whose Values Are Sets of Values, in UAX #44, “Unicode Character Database.”
        集合属性:
            属性值 类型 是 集合

    * 枚举属性
        属性值 少，相对稳定，但 后续版本 可添加
    * 闭式枚举属性
        <:枚举属性
        后续版本 不可添加 属性值
        ---
        • The General_Category and Bidi_Class properties are the only closed enumerations, except for the Boolean properties.
    * 真值属性
        <:闭式枚举属性
    * 数值属性
        属性值 类型: 整数、实数
        例:Numeric_Value property
    * 字符串属性
        属性值 类型: 字符串
        例:Canonical_Decomposition property
    * 概况属性
        <:枚举属性
        例:Age/Block/Script property
        ----
        a new value for Age is added for each new Unicode version
        a new value for Block is added for each new block added to the standard
        a new value for Script is added for each new script added to the standard


Property Status
    * normative
        #normative 规范的，惯常的
        normative properties can be subclassified, based on whether or not they can be overridden by conformant higher-level protocols.
        规范属性
    * informative
        #informative 报道性的/情报的，增长见识的/使知道消息的，见闻广博的
        资讯属性
    * contributory
        #contributory #？有助的/有益的/辅助性质的/由捐助支付的/群策群力的？
        辅助属性
    * provisional
        #provisional 暂定的/暂时性的/临时性的
        暂定属性

    ----
    Normative property: A Unicode character property used in the specification of the standard.
        Whenever a normative process depends on a property in a specified way, that property is designated as normative.
        #可能改变，虽然原意固定不变
        #   The fact that a given Unicode character property is normative does not mean that the values of the property will never change for particular characters.
        #   Corrections and extensions to the standard in the future may require minor changes to normative values, even though the Unicode Technical Committee strives to minimize such changes.
        #   See also “Stability of Properties” later in this section.

        分为2种:
            * normative and not overridable
                no higher-level protocol may override these values
                例: Canonical_Decomposition property is not overridable
            * Overridable property
                a normative property whose values may be overridden by conformant higher-level protocols
                例: Uppercase property can be overridden.


    ----
    Informative property: A Unicode character property whose values are provided for information only.
        实现 可 覆盖 其 属性值
            #encourage comparable behavior between implementations.
        后续版本 可能将之提升为 Normative property
    ----
    Contributory property: A simple property defined merely to make the statement of a rule defining a derived property more compact or general.
        Contributory properties typically consist of short lists of exceptional characters which are used as part of the definition of a more generic normative or informative property.
        多数命名以“Other”开头: Other_Alphabetic or Other_Default_Ignorable_Code_Point...
        原意并无固化之意，但当用于Normative property的定义中，也可被动固化
            such as the derived, normative identifier-related properties, XID_Start and XID_Continue.

    ----
    Provisional property: A Unicode character property whose values are unapproved and tentative, and which may be incomplete or otherwise not in a usable state.
        • Provisional properties may be removed from future versions of the standard, without prior notice.
        用于 评审 更进
            Some of the information provided about characters in the Unicode Character Database constitutes provisional data.
            This data may capture partial or preliminary information.
            It may contain errors or omissions, or otherwise not be ready for systematic use
            For example, a number of the tags in the Unihan Database file (Unihan.zip) provide provisional property values of various sorts about Han characters.
        UCD 注释 不稳定，也可当作 provisional property


Context Dependence
    ----
    * Context-dependent property: A property that applies to a code point in the context of a longer code point sequence.
        • For example, the lowercase mapping of a Greek sigma depends on the context of the surrounding characters.

    ----
    * Context-independent property: A property that is not context dependent; it applies to a code point in isolation.



Stability of Properties
    ----
    * Stable transformation: A transformation T on a property P is stable with respect to an algorithm A if the result of the algorithm on the transformed property A(T(P)) is the same as the original result A(P) for all code points.
        ####
        is_Stable_transformation<P, A>(T) := all (A<T<P> >(pt) == A<P>(pt)) {pt<-[0:0x11_00_00]}
            P:property
            A<P>:app-algorithm
            T<P>:version-transformation

    ----
    稳态属性/针对性稳态属性
        #?vs 全局性稳态属性
        #仅针对 特定算法，故而 允许 属性值 更改/等价变换(相对于 特定算法集 而言 等价)
        #例外情况:初始化覆盖默认值 是 允许的
    * Stable property: A property is stable with respect to a particular algorithm or process as long as possible changes in the assignment of property values are restricted in such a manner that the result of the algorithm on the property continues to be the same as the original result for all previously assigned code points.
        • As new characters are assigned to previously unassigned code points, the replacement of any default values for these code points with actual property values must maintain stability.
        ####
        is_Stable_property<P, A>() := all (is_Stable_transformation<P, A>(delta<P, version, version-1>)) {version<-[1..]}

    ----
    定值属性
        #不允许 属性值 更改
        #例外情况:初始化覆盖默认值 是 允许的
        #例外情况:更正错误 是 允许的
    * Fixed property: A property whose values (other than a default value), once associated with a specific code point, are fixed and will not be changed, except to correct obvious or clerical errors.
        • For a fixed property, any default values can be replaced without restriction by actual property values as new characters are assigned to previously unassigned code points.
            Examples of fixed properties include Age and Hangul_Syllable_Type.
        • Designating a property as fixed does not imply stability or immutability.
            (see “Stability” in Section 3.1, Versions of the Unicode Standard)
            While the age of a character, for example, is established by the version of the Unicode Standard to which it was added, errors in the published listing of the property value could be corrected.
            For some other properties, even the correction of such errors is prohibited by explicit guarantees of property stability.


    ----
    固化属性 <: 稳态属性&定值属性
        定值属性 允许 更正错误
        针对性稳态属性 允许 等价变换
        固化属性=全局性稳态属性 不允许任何非初始化 更改
        #例外情况:初始化覆盖默认值 是 允许的
    * Immutable property: A fixed property that is also subject to a stability guarantee preventing any change in the published listing of property values other than assignment of new values to formerly unassigned code points.
        • An immutable property is trivially stable with respect to all algorithms.
        • An example of an immutable property is the Unicode character name itself.
            Because character names are values of an immutable property, misspellings and incorrect names will never be corrected clerically.
            Any errata will be noted in a comment in the character names list and, where needed, an informative character name alias will be provided.
        • When an encoded character property representing a code point property is immutable, none of its values can ever change.
            This follows from the fact that the code points themselves do not change, and the status of the property is unaffected by whether a particular abstract character is encoded at a code point later.
            An example of such a property is the Pattern_Syntax property; all values of that property are unchangeable for all code points, forever.
        • In the more typical case of an immutable property, the values for existing encoded characters cannot change, but when a new character is encoded, the formerly unassigned code point changes from having a default value for the property to having one of its nondefault values.
            Once that nondefault value is published, it can no longer be changed.


    ----
    满员属性 <: 定值属性&其他新增字符只能赋予默认值
    * Stabilized property: A property that is neither extended to new characters nor maintained in any other manner, but that is retained in the Unicode Character Database.
        • A stabilized property is also a fixed property.


    ----
    过气属性
    * Deprecated property: A property whose use by implementations is discouraged.
        • One of the reasons a property may be deprecated is because a different combination of properties better expresses the intended semantics.
        • Where sufficiently widespread legacy support exists for the deprecated property, not all implementations may be able to discontinue the use of the deprecated property.
            In such a case, a deprecated property may be extended to new characters so as to maintain it in a usable and consistent state.


    ----
    ----
    Informative or normative properties in the standard will not be removed even when they are supplanted by other properties or are no longer useful. However, they may be stabilized and/or deprecated.

    The complete list of stability policies which affect character properties, their values, and their aliases, is available online. See the subsection “Policies” in Appendix B.3, Other Unicode Online Resources.

end of Chapter 3]]]]]]]



[[[[[[[begin of Chapter 4
Chapter 4 Character Properties
4.1 UCD#除了Unihan
    PropertyAliases 无冲突
    PropertyValueAliases 在各自的 属性名下也无冲突，但 跨属性名 则不行
    gc=General_Category

    -> Unicode Technical Standard #18, “Unicode Regular Expressions.”
        For a recommended use of property and property value aliases

    UCD::PropertyAliases.txt
    UCD::PropertyValueAliases.txt
        还有 xml格式的UCD

    “\p{bc=B}” versus “\p{ccc=B}”.
        我猜:p是property或properties
        “\properties{bc=B}” versus “\properties{ccc=B}”.
        “\properties{Bidi_Class=B}” versus “\p{Canonical_Combining_Class=B}”.
        “\properties{Bidi_Class=Paragraph_Separator}” versus “\p{Canonical_Combining_Class=Below}”.



4.2 Case
    normative property
    三种: UPPERCASE, Titlecase, lowercase.
        titlecase 是因为 有些字符 其实代表 多个字符的字符串，当其内容刚好所有单词首字母大写时，就叫titlecase
            #中文也有一个顶俩的汉字:近代以来新造的计量单位:双音节字！：兞/毫克，兛/千克，瓱/毫瓦，瓩/千瓦，粍/毫米，粁/千米，粴/公里，粨/百米，瓸/百瓦，兡/百克，兙/十克，瓧/十瓦 之类。
            #单位 Hz？？
            char.Case???
            isTitlecase(str) 作用于 字符串 时，更显而易见
        gc=Lu
        gc=Lt
        gc=Ll

    General_Category property is, by design, a partition of the Unicode codespace.
        This means that each Unicode character can only have one General_Category value, which results in some odd edge cases for modifier letters, letterlike symbols and letterlike numbers.
        ==>>相关的派生属性
        #modifier [语法]修饰语
        #修饰用的字符:gc=Lm
        #字符似的符号:gc=So其中部分
        #字符似的数字:gc=Nl

    相关的派生属性:
        真值属性:Lowercase, Uppercase
            UCD::DerivedCoreProperties.txt
            包含了 gc=Lu/Ll 以外的一些边缘字符
            借助于 辅助属性: Other_Lowercase, Other_Uppercase
                UCD::PropList.txt
                    #全是 真值属性

    相关函数:
        isLowercase, isUppercase :: str -> bool
        isLowercase(s) := toLowercase(s)==s
        ==>> [[ch is caseless/无大小写]-->>[isLowercase ch][isUppercase ch]]
            同时为真#如同 空字符串

        [ch.gc==Lm][ch 派生自 letter/字母(不论大小写！)]-->>[ch.Lowercase][not ch.Uppercase][ch is caseless]
        [ch.gc==Lm][ch 并非派生自 letter/字母(不论大小写！)]-->>[not ch.Lowercase][not ch.Uppercase][ch is caseless]

        see:[pg191/1030] Table 4-1. Relationship of Casing Definitions
            关系惊人地混乱！设计者 脑子里在想什么？使用场景是什么？用户惯常行为是什么？




[pg194/1030]
4.3 Combining Classes
    只用于 某个特定算法，无趣！不看！
Each combining character has a normative canonical combining class.
This class is used with the Canonical Ordering Algorithm
    to determine which combining characters interact typographically
        字符的规范序列 由哪些字符构成？
    and to determine how the canonical ordering of sequences of combining characters takes place.
        字符的规范序列 成分字符 是如何排序的？
Class zero combining characters act like base letters for the purpose of determining canonical order.
Combining characters with non-zero classes participate in reordering for the purpose of determining the canonical order of sequences of characters.
(See Section 3.11, Normalization Forms, for the specification of the algorithm.)

4.4 Directionality
    只用于 某个特定算法，无趣！不看！

4.5 General Category
    #根据 字符 的 首要用途 分类
    #是对ASCII 4个分类的推广: 字母，数字，标点，符号
    # gc属性值 皆 2字符: 大属类+小种类
    #   小种类o 只是对其余字符的归类，并无 明确 共同点
    ######################
    #gc 用途:
    #   regex识别 边界分割/标识名/数字
    #   辅助 字符串规范化
    #
    #
The Unicode Character Database defines a General_Category property for all Unicode code points.
    The General_Category value for a character serves as a basic classification of that character, based on its primary usage.
    The property extends the widely used subdivision of ASCII characters into letters, digits, punctuation, and symbols
    —a useful classification that needs to be elaborated and further subdivided to remain appropriate for the larger and more comprehensive scope of the Unicode Standard.

Each Unicode code point is assigned a normative General_Category value.
    Each value of the General_Category is given a two-letter property value alias
        , where the first letter gives information about a major class
        and the second letter designates a subclass of that major class.
    In each class, the subclass “other” merely collects the remaining characters of the major class.
        For example, the subclass “No” (Number, other) includes all characters of the Number class that are not a decimal digit or letter.
        These characters may have little in common besides their membership in the same major class.

Table_4_4 gc属性值 的 含义
Table 4-4 enumerates the General_Category values, giving a short description of each value.

Table_2_3 编码点的基础种类
See Table 2-3 for the relationship between General_Category values and basic types of code points.



4.6 Numeric Value
Decimal Digits.
    Decimal digits, as commonly understood, are digits used to form decimalradix numbers.
    They include script-specific digits, but exclude characters such as Roman numerals and Greek acrophonic numerals, which do not form decimal-radix expressions.
    (Note that <1, 5> = 15 = fifteen, but <I, V> = IV = four.)

The Numeric_Type = Decimal property value (which is correlated with the General_Category = Nd property value)
    is limited to those numeric characters that are used in decimal-radix numbers and for which a full set of digits has been encoded in a contiguous range, with ascending order of Numeric_Value, and with the digit zero as the first code point in the range.
        # [0..9] 连续的编码区
        #   大部分 序号 都是从 1 开始。

属性值: Decimal, Digit, Numeric, None
其中 Digit, Numeric 并无区别，Unicode标准 将 不再有 新字符 拥有 Digit 属性值。






4.7 Bidi Mirrored
真值属性
    Bidi_Mirrored = Y
目标:
    成对标点
    部分数学符号
        主要是 非精确镜像
            组合性的:其中 数字/箭头 方向不改
例外:
    大部分引号quotation marks
        例外的例外:『』「」等？
    legacy exception:
        U+FD3E ornate left parenthesis
        U+FD3F ornate right parenthesis
            ﴾  ﴿

双向镜像: 是指当字符用于 不同的书写反向 中时 发生的 形变。
    从左向右横排书写
    从右向左横排书写
    从上向下竖排书写
    比如:
        ====不一定是镜像字形:
        U+2232∲ 顺时针环状积分号 积分号反转，箭头方向不改
        U+221B∛立方根 根号反转，3不反转
        ====
        #补偿一个(
        从左向右横排书写
            abc
            [a,b]
            [a,b)
        从右向左横排书写
            cba
            [b,a] #而非 ]b,a[
            (b,a] #而非 )b,a[
        #补偿一个]
        ====
        从左向右横排书写
            『a』
        从上向下竖排书写
            ﹃
            a
            ﹄
            #而非
            『
            a
            』
UCD::BidiBrackets.txt
UCD::BidiMirroring.txt


[[[
4.8 Name
char.Name <- (
    regex'[0-9A-Z -]+'
      #没有 下划线/小写字母
    - regex'(.*[ ])?[0-9].*'
      #数字
      #不在开头，不在空格之后
    - regex'-.*'
      #连字符
      #不在开头
    - regex'.*-'
      #连字符
      #不在结尾
    - regex'.*--.*'
      #连字符
      #不连续出现
    - regex'.*[ ]-[ ].*'
      #连字符
      #不连接两空格
      # 'A- -B' 是允许的
    - regex'[ ].*'
      #空格
      #不在开头
    - regex'.*[ ]'
      #空格
      #不在结尾
    - regex'.*[ ][ ].*'
      #空格
      #不连续出现
    )
For more information on character name matching, see Section 5.9, “Matching Rules” in Unicode Standard Annex #44, “Unicode Character Database.”
[[
UAX44-v28::5.9.2 Matching Character Names
UAX44-LM2. Ignore case, whitespace, underscore ('_'), and all medial hyphens except the hyphen in U+1180 HANGUL JUNGSEONG O-E.
    * "zero-width space" is equivalent to "ZERO WIDTH SPACE" or "zerowidthspace"
    * "character -a" is not equivalent to "character a"
Loose matching rule UAX44-LM2 步骤定义如下：
    1. remove all medial hyphens (except the medial hyphen in the name for U+1180)
      例外: U+1180 HANGUL JUNGSEONG O-E

    "zero-width space" is equivalent to "ZERO WIDTH SPACE" or "zerowidthspace"
    2. remove all whitespace and underscore characters
      #怎么有 下划线？是处理别名？
      不可调换 步骤1与步骤2的次序
        U+10089 LINEAR B IDEOGRAM B107M HE-GOAT
          连字符 被删除
        U+0F39 TIBETAN MARK TSA -PHRU
          连字符 被保留
    3. apply toLowercase() to both strings
Loose matching rule UAX44-LM2 is also appropriate for matching character name aliases, the names of named character sequences, and code point labels, which all share the unique namespace (and matching behavior) of Unicode character names. See Section 4.8, Name in [Unicode]

Implementations of name matching should use extreme care when matching non-standard, alternative names for particular characters. The Name Uniqueness Policy in the Unicode Consortium Stability Policies [Stability] guarantees that the Unicode Standard will never add a character whose name would match an existing encoded character, according to matching rule UAX44-LM2. However, any other name for a character might be used in the future.
]]

UCD::NameAliases.txt
UCD::NamedSequences.txt
UCD::DerivedName.txt
    #非使用模版生成的 正式名:For all other Graphic characters and for all Format characters, the Name property value is as explicitly listed in Field 1 of UnicodeData.txt.
    #
    #For all other Unicode code points of all other types (Control, Private-Use, Surrogate, Noncharacter, and Reserved), the value of the Name property is the null string. In other words, na = “”.
    #

[[char.gc==Cc]-->>[char.Name=""]]
    Control codes
Code Point Labels
    没有 Name 的 编码点 怎么命名？
        For each code point type without character names, code point labels are constructed by using a lowercase prefix derived from the code point type, followed by a hyphen-minus and then a 4- to 6-digit hexadecimal representation of the code point.
    但 通常 显示成 <xxx-yyy> 即 加上 尖括号
        所以，到底 有啥用？既然已有 U+NNNN
    ======
    [[Table_4_9
    Table 4-9. Construction of Code Point Labels
    #大写 数值
    #NNNN 也可能是 NNNNNN
    Type            Label
    Control         control-NNNN
    Reserved        reserved-NNNN
    Noncharacter    noncharacter-NNNN
    Private-Use     private-use-NNNN
    Surrogate       surrogate-NNNN
    ]]

12个 例外 汉字:(F900..FA6D)[:12]
    名曰 兼容，其实是 统一的。
    应该使用: char.Unified_Ideograph
        $ grep Unified_Ideograph  -l -r ./unicode_13__UCD
        ./PropertyValueAliases.txt
        ./EquivalentUnifiedIdeograph.txt
        ./PropList.txt
        ./PropertyAliases.txt
        ./EquivalentUnifiedIdeograph.txt
        ==========
        ./PropList.txt
            真值属性！！！
        [[2+1+2+1+1+2+3==12
        FA0E..FA0F
        FA11
        FA13..FA14
        FA1F
        FA21
        FA23..FA24
        FA27..FA29
        ]]
        =====
        view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropList.txt
        [[
        FA0E..FA0F    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA0E..CJK COMPATIBILITY IDEOGRAPH-FA0F
        FA11          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA11
        FA13..FA14    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA13..CJK COMPATIBILITY IDEOGRAPH-FA14
        FA1F          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA1F
        FA21          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA21
        FA23..FA24    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA23..CJK COMPATIBILITY IDEOGRAPH-FA24
        FA27..FA29    ; Unified_Ideograph # Lo   [3] CJK COMPATIBILITY IDEOGRAPH-FA27..CJK COMPATIBILITY IDEOGRAPH-FA29
        ]]
    ####
    Twelve of the CJK ideographs in the starred range in Table 4-8, in the CJK Compatibility Ideographs block, are actually CJK unified ideographs.
    Nonetheless, their names are constructed with the “cjk compatibility ideograph-” prefix shared by all other code points in that block.
    The status of a CJK ideograph as a unified ideograph cannot be deduced from the Name property value for that ideograph; instead, the dedicated binary property Unified_Ideograph should be used to determine that status.
    See “CJK Compatibility Ideographs” in Section 18.1, Han
        , and Section 4.4, “Listing of Characters Covered by the Unihan Database” in Unicode Standard Annex #38, “Unihan Database,”
        for more details about these exceptional twelve CJK ideographs.
]]]





4.10 Letters, Alphabetic, and Ideographic

    3个 真值属性？
        Letter
            包含 Letters and Syllables (两者不作区分)
        Alphabetic
            资讯属性
            Alphabetic property is a derived informative property
        Ideographic
            资讯属性
            Ideographic property is an informative property

Computer language standards often characterize identifiers as consisting of letters, syllables, ideographs, and digits
    , but do not specify exactly what a “letter,” “syllable,” “ideograph,” or “digit” is
    , leaving the definitions implicitly either to a character encoding standard or to a locale specification.




4.12 Characters with Unusual Properties
Table 4-10. Unusual Properties
===head
Function
    Details
    Code Point and Name
===body
汉字相关部分Ideographic-related
Ideographic variation indication
    Section 6.2
    303E ideographic variation indicator
Ideographic description
    Section 18.2
    2FF0..2FFB ideographic description character left to right..ideographic description character overlaid
===end



『@』中文名『老鼠号』？
    #from: Table 6-7. Names for the @
    #   [pg303/1030]

annex?? adj. 附加的 n 附件
slang?? 俚语，行话/专业用语
geta??日式木屐
sandal?? 凉鞋，草鞋
nominal adj. 名义上的/挂名的/空有其名无实权的(<->real)，象征性的极少的(费用)，面值/票面上的/名目上的，额定的/标称的/公称的，由名字构成的(nominal list名单)，记名的(股票)，[文法]名词的  n. 名词短语
depict 描述


书写成单字-平面-二维
书写成词语-线性-一维
视觉想象-立体-三维


[pg308/1030] CJK Punctuation
[pg310/1030] Unknown or Unavailable Ideographs 
U+3013 geta mark
    找不到 字符的对应字形 时，用 此字符的字形 替代。
    〓
    is used to indicate the presence of, or to hold a place for, an ideograph that is not available when a document is printed.
    It has no other use.
    Its name comes from its resemblance to the mark left by traditional Japanese sandals (geta).
    A variety of light and heavy glyphic variants occur.

U+303E ideographic variation indicator
    找不到 实际字符的编码 时，用 此字符 后接 一个 字形相近的字符。期待最终能够 更换回 实际字符。
    〾
    is a graphic character that is to be rendered visibly.
    It alerts the user that the intended character is similar to, but not equal to, the character that follows.
    Its use is similar to the existing character U+3013 geta mark.
        A geta mark substitutes for the unknown or unavailable character, but does not identify it.
        The ideographic variation indicator is the head of a two-character sequence that gives some indication about the intended glyph or intended character.
            Ultimately, the ideographic variation indicator and the character following it are intended to be replaced by the correct character
            , once it has been identified or a font resource or input resource has been provided for it.

U+303F ideographic half fill space
    is a visible indicator of a display cell filler used when ideographic characters have been split during display on systems using a double-byte character encoding.
    It is included in the Unicode Standard for compatibility.

See also “Ideographic Description Sequences” in Section 18.2, Ideographic Description Characters.



see:
    [pg288/1030] Blocks Devoted to Punctuation
    See Section 18.5, Halfwidth and Fullwidth Forms, for more information.
        本文件内 搜索:
            /18[.]5

end of Chapter 4]]]]]]]


]]]]]]]]]



######################
######################
######################
######################
######################
######################
[[[[[[[[[其他信息+表格
U+200B 零宽空格
[pg311/1030]
CJK Compatibility Forms::Fullwidth and Halfwidth Variants.
    ASCII标点符号的fullwidth变体
    CJK标点符号的halfwidth变体
    For compatibility with East Asian legacy character sets, the Unicode Standard encodes
        fullwidth variants of ASCII punctuation
        and halfwidth variants of CJK punctuation.
    See Section 18.5, Halfwidth and Fullwidth Forms, for more information.

[[[
[pg288/1030]
Blocks Devoted to Punctuation
For compatibility with widely used legacy character sets, the Basic Latin (ASCII) block (U+0000..U+007F) and the Latin-1 Supplement block (U+0080..U+00FF) contain several of the most common punctuation signs.
    They are isolated from the larger body of Unicode punctuation, signs, and symbols only because their relative code locations within ASCII and Latin-1 are so widely used in standards and software.
    The Unicode Standard has a number of blocks devoted specifically to encoding collections of punctuation characters.



The General Punctuation block (U+2000..U+206F)
    contains the most common punctuation characters widely used in Latin typography, as well as a few specialized punctuation marks and a large number of format control characters.
    All of these punctuation characters are intended for generic use, and in principle they could be used with any script.

The Supplemental Punctuation block (U+2E00..U+2E7F)
    is devoted to less commonly encountered punctuation marks
    , including those used in specialized notational systems or occurring primarily in ancient manuscript traditions.

The CJK Symbols and Punctuation block (U+3000..U+303F)
    has the most commonly occurring punctuation specific to East Asian typography—that is, typography involving the rendering of text with CJK ideographs.

The Vertical Forms block (U+FE10..U+FE1F)
, the CJK Compatibility Forms block (U+FE30..U+FE4F)
, the Small Form Variants block (U+FE50..U+FE6F)
, and the Halfwidth and Fullwidth Forms block (U+FF00..U+FFEF)
    contain many compatibility characters for punctuation marks
    , encoded for compatibility with a number of East Asian character encoding standards.
    Their primary use is for round-trip mapping with those legacy standards.
    For vertical text, the regular punctuation characters are used instead, with alternate glyphs for vertical layout supplied by the font.

The punctuation characters in these various blocks are discussed below in terms of their general types.
]]]






[[[ Table_2_3
[pg116/1030]
7 种 编码点的基础种类:
    code_point_type: Any of the seven fundamental classes of code points in the standard:
        Graphic     #正常用字符#内容字符
        Format      #排版用字符#文本字符
        ---
        Control     #规范外字符
        Private-Use #私有字符
        ---
        Surrogate   #转义用字符@utf16
        Noncharacter#非字符编码点
        Reserved    #保留区编码点

Control
    #65个:32(U+0000..U+001F)+33(U+007F..U+009F)
Noncharacter
    #66个:32(U+FDD0..U+FDEF)+34(U+[00..10]FFF[E..F])
    # Noncharacter code points are reserved for internal use, such as for sentinel values.
Surrogate:
    #2048个:(U+D800..U+DFFF)
    #high=(U+D800..U+DBFF)
    #low=(U+DC00..U+DFFF)
    #====
    #11bit=0bit+10bit ==>> 10bit*10bit=20bit=4bit*16bit==16*16bit
    #17*16bit == 16bit+16*16bit == 16bit+10bit*10bit
    #([0:0x110000]-Surrogate) == ([0:0xffff]-Surrogate)+[Surrogate-high]*[Surrogate-low]

[[
[pg58/1030]
Table 2-3. Types of Code Points
====head[[
Basic Type
    ====
    Brief Description
    ====
    General Category
    ====
    Character Status
        _Assigned:=Assigned to abstract character
            #<==> otherwise
        _Forbid_Assigned:=Cannot be assigned to abstract character
            <==> Surrogate
        _Not_Assigned:=Not assigned to abstract character
            <==> Noncharacter or Reserved
    ====
    Code Point Status
        _Designated:=Designated (assigned) code point
            <==> not Reserved
        _Undesignated:=Undesignated (unassigned) code point
            <==> Reserved
    ====
    ]]
====body[[
    ====
    Graphic
        Letter, mark, number, punctuation, symbol, and spaces
        L, M, N, P, S, Zs
        _Assigned
        _Designated
    ====
    Format
        Invisible but affects neighboring characters; includes line/paragraph separators
        Cf, Zl, Zp
        _Assigned
        _Designated
    ====
    Control
        Usage defined by protocols or standards outside the Unicode Standard
        Cc
        _Assigned
        _Designated
    ====
    Private_Use
        Usage defined by private agreement outside the Unicode Standard
        Co
        _Assigned
        _Designated
    ====
    Surrogate
        Permanently reserved for UTF-16; restricted interchange
        Cs
        _Forbid_Assigned (the only)
        _Designated
    ====
    Noncharacter
        Permanently reserved for internal usage; restricted interchange
        Cn-part
        _Not_Assigned
        _Designated
    ====
    Reserved
        Reserved for future assignment; restricted interchange
        Cn-part
        _Not_Assigned
        _Undesignated (the only)
    ====
    ]]
====
]]

]]]

[[[
[pg126/1030]
Table_3_2
Table 3-2. Normative Character Properties
# /\S\(UAX\|Sec\)
========================
Table 3-2. Normative Character Properties
========================
===
Property
    :Description
===
Bidi_Class (directionality)
    :UAX #9 and Section 4.4
Bidi_Mirrored
    :UAX #9 and Section 4.7
Bidi_Paired_Bracket
    :UAX #9
Bidi_Paired_Bracket_Type
    :UAX #9
Block
    :Section 24.1
Canonical_Combining_Class
    :Section 3.11 and Section 4.3
Case-related properties
    :Section 3.13, Section 4.2, and UAX #44
Composition_Exclusion
    :Section 3.11
Decomposition_Mapping
    :Section 3.7 and Section 3.11
Default_Ignorable_Code_Point
    :Section 5.21
Deprecated
    :Section 3.1
East_Asian_Width
    :Section 18.4 and UAX #11
General_Category
    :Section 4.5
Hangul_Syllable_Type
    :Section 3.12 and UAX #29
Joining_Type and Joining_Group
    :Section 9.2
Line_Break
    :Section 23.1, Section 23.2, and UAX #14
Name
    :Section 4.8
Noncharacter_Code_Point
    :Section 23.7
Numeric_Value
    :Section 4.6
White_Space
    :UAX #44
========================


Table_3_3
========================
Table 3-3. Informative Character Properties
========================
===
Property
    :Description
===
Dash
    :Section 6.2 and Table 6-3
Letter-related properties
    :Section 4.10
Mathematical
    :Section 22.5
Script
    :UAX #24
Space
    :Section 6.2 and Table 6-2
Unicode_1_Name
    :Section 4.9
========================
]]]


[[[
Table_4_4
4.5 General Category
    <<== Table 3-2. Normative Character Properties
Table 4-4. General Category
Lu = Letter, uppercase
Ll = Letter, lowercase
Lt = Letter, titlecase
Lm = Letter, modifier
Lo = Letter, other
Mn = Mark, nonspacing
Mc = Mark, spacing combining
Me = Mark, enclosing
Nd = Number, decimal digit
Nl = Number, letter
No = Number, other
Pc = Punctuation, connector
Pd = Punctuation, dash
Ps = Punctuation, open
Pe = Punctuation, close
Pi = Punctuation, initial quote (may behave like Ps or Pe depending on usage)
Pf = Punctuation, final quote (may behave like Ps or Pe depending on usage)
Po = Punctuation, other
Sm = Symbol, math
Sc = Symbol, currency
Sk = Symbol, modifier
So = Symbol, other
Zs = Separator, space
Zl = Separator, line
Zp = Separator, paragraph
Cc = Other, control
Cf = Other, format
Cs = Other, surrogate
Co = Other, private use
Cn = Other, not assigned (including noncharacters)
]]]



18.5 Halfwidth and Fullwidth Forms
    -> UAX #11, “East Asian Width.”
        For a complete description of the East Asian Width property

# U+3000, (U+FF00–U+FFEF)
Halfwidth and Fullwidth Forms: U+FF00–U+FFEF
    The characters in this block consist of fullwidth forms of the ASCII block (except space), certain characters of the Latin-1 Supplement, and some currency symbols. In addition, this block contains halfwidth forms of the Katakana and Hangul Compatibility Jamo charac- ters. Finally, a number of symbol characters are replicated here (U+FFE8..U+FFEE) with explicit halfwidth semantics.

    Unifications. The fullwidth form of U+0020 space is unified with U+3000 ideographic space.



#补偿 [ \]
#补偿 [ \]
view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropertyValueAliases.txt
view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/EastAsianWidth.txt
    from:
        /storage/emulated/0/0my_files/zip/zip_selected__e_book_data/13.0.0\[download_at]\[20200913]/zipped_UCD/UCD.zip
            UCD::PropertyValueAliases.txt
            UCD::EastAsianWidth.txt
            UCD::DerivedEastAsianWidth.txt
            UCD::Blocks.txt
[[[UCD::PropertyValueAliases.txt
# East_Asian_Width (ea)

ea ; A                                ; Ambiguous
ea ; F                                ; Fullwidth
ea ; H                                ; Halfwidth
ea ; N                                ; Neutral
ea ; Na                               ; Narrow
ea ; W                                ; Wide
]]]

==>>
['A', 'F', 'H', 'N', 'Na', 'W']
    A-Ambiguous
    F-Fullwidth
    H-Halfwidth
    N-Neutral
    Na-Narrow
    W-Wide
    ##?no "Unassigned"?
[('A', 138739), ('F', 836706), ('H', 123), ('N', 26925), ('Na', 111), ('W', 111508)]
tiny size:
    H
    Na
    ==>> grep H/Na in EastAsianWidth.txt

问题是 若说：
    ASCII标点符号的fullwidth版 变体
    CJK标点符号的halfwidth版 变体
        [[！！！正确！！！
        见 CodeCharts.pdf::[pg1159/2684]:
        Halfwidth and Fullwidth Forms (FF00..FFEF)的 注释
            Fullwidth ASCII variants
                See ASCII 0020-007E
                FF01『！』FULLWIDTH EXCLAMATION MARK ≈ <wide> 0021『!』
            Halfwidth CJK punctuation
                See CJK punctuation 3000-303F
                FF61『｡』HALFWIDTH IDEOGRAPHIC FULL STOP ≈ <narrow> 3002『。』
        ]]

    Narrow 是 字符本身 就是 窄的，并非halfwidth变体
    Wide 是 字符本身 就是 宽的，并非fullwidth变体
    Neutral 无关宽窄
        ？U+200B 零宽空格？
            对! (0x2000, 0x2010).east_asian_width==N
    Ambiguous 歧义
        ？缺省值/默认值/未赋值？
            错！Ambiguous 主要来自 私用区，默认值 实际上是 Neutral!!!!
            见下面:UCD::DerivedEastAsianWidth-13.0.0.txt
    那：
        为何 Fullwidth 远比 Narrow多？ 别说是 Narrow 的 变体，即便 其余字符 加起来 也没Fullwidth的多！
            感觉 要么是 版本不同，版本12 与 版本13 有 巨大不同
                要么就是 py::unicodedata 实现有误，Fullwidth抢了Neutral+Wide



[[[UCD::DerivedEastAsianWidth.txt

版本不同:
    py::unicodedata.unidata_version = '12.1.0'
    UCD::DerivedEastAsianWidth-13.0.0.txt

UCD::DerivedEastAsianWidth.txt
    view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/extracted/DerivedEastAsianWidth.txt
    默认属性值:N/Neutral 不是 Ambiguous!!!
#下面 只列出 几万/几千 的 区域
#   搜索 /\[\d\{5}\]
#   搜索 /\[\d\{4}\]
#   ==>> Neutral 主要来源 默认缺省
#   ==>> Ambiguous 主要来源 私用区
#   ==>> Wide 主要来源 CJK/东亚字符/预留区
#   ==>> py::unicodedata-12.1.0::Fullwidth 应当抢了 83万 于 UCD::DerivedEastAsianWidth-13.0.0.txt::Neutral(76万)+Wide(7万)
#           Neutral 刚好有 767414 未显式指明
#           Wide 刚好有 60595 预留区 字符
#
##########################


# DerivedEastAsianWidth-13.0.0.txt
# @missing: 0000..10FFFF; Neutral

:21 lineno
# East_Asian_Width=Neutral
13000..1342E  ; N # Lo [1071] EGYPTIAN HIEROGLYPH A001..EGYPTIAN HIEROGLYPH AA032
# The above property value applies to 767414 code points not listed here.
# Total code points: 792699
vs ('N', 26925) <

:1942 lineno
# East_Asian_Width=Ambiguous
F0000..FFFFD  ; A # Co [65534] <private-use-F0000>..<private-use-FFFFD>
100000..10FFFD; A # Co [65534] <private-use-100000>..<private-use-10FFFD>
E000..F8FF    ; A # Co [6400] <private-use-E000>..<private-use-F8FF>
# Total code points: 138739
vs ('A', 138739) ==

:2147 lineno
# East_Asian_Width=Halfwidth
# Total code points: 123
vs ('H', 123) ==

:2171 lineno
# East_Asian_Width=Wide
4E00..9FFC    ; W # Lo [20989] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FFC
AC00..D7A3    ; W # Lo [11172] HANGUL SYLLABLE GA..HANGUL SYLLABLE HIH
20000..2A6DD  ; W # Lo [42718] CJK UNIFIED IDEOGRAPH-20000..CJK UNIFIED IDEOGRAPH-2A6DD
3134B..3FFFD  ; W # Cn [60595] <reserved-3134B>..<reserved-3FFFD>
3400..4DBF    ; W # Lo [6592] CJK UNIFIED IDEOGRAPH-3400..CJK UNIFIED IDEOGRAPH-4DBF
A016..A48C    ; W # Lo [1143] YI SYLLABLE BIT..YI SYLLABLE YYR
17000..187F7  ; W # Lo [6136] TANGUT IDEOGRAPH-17000..TANGUT IDEOGRAPH-187F7
18800..18CD5  ; W # Lo [1238] TANGUT COMPONENT-001..KHITAN SMALL SCRIPT CHARACTER-18CD5
2A700..2B734  ; W # Lo [4149] CJK UNIFIED IDEOGRAPH-2A700..CJK UNIFIED IDEOGRAPH-2B734
2B820..2CEA1  ; W # Lo [5762] CJK UNIFIED IDEOGRAPH-2B820..CJK UNIFIED IDEOGRAPH-2CEA1
2CEB0..2EBE0  ; W # Lo [7473] CJK UNIFIED IDEOGRAPH-2CEB0..CJK UNIFIED IDEOGRAPH-2EBE0
2EBE1..2F7FF  ; W # Cn [3103] <reserved-2EBE1>..<reserved-2F7FF>
2FA1E..2FFFD  ; W # Cn [1504] <reserved-2FA1E>..<reserved-2FFFD>
30000..3134A  ; W # Lo [4939] CJK UNIFIED IDEOGRAPH-30000..CJK UNIFIED IDEOGRAPH-3134A
# Total code points: 182336
vs ('W', 111508) <
    70828 = 182336-111508
        echo $[182336-111508]
    10233 = 70828-60595-3103-1504
        echo $[70828-60595-3103-1504]
        reserved
        #-60595(3134B..3FFFD)
        #-3103(2EBE1..2F7FF)
        #-1504(2FA1E..2FFFD)
        #见下面 THIS -c rngs east_asian_width :: F :: (0x2fa1e, 0xe0001) 包含了 60595(3134B..3FFFD)、1504(2FA1E..2FFFD)；:: (0x2ebe1, 0x2f800) 包含了 3103(2EBE1..2F7FF)；
        #难道是 程序员 直接使用 UCD::EastAsianWidth.txt 却 忽视了 文件头的各区默认值声明？？
        #   猜测错误。
        #   W::(0x3250, 0x4db6) 不完全包含 默认的 (3400..4DBF)
        #       这是正常情况，应该是 出现了 显式赋值
        #       也说明 程序员 并未出错。
        #
    5294 = 10233-4939
        echo $[10233-4939]
        #-4939(30000..3134A)
        #   F::(0x2fa1e, 0xe0001)

:2416 lineno
# East_Asian_Width=Fullwidth
# Total code points: 104
vs ('F', 836706) >

:2457 lineno
# East_Asian_Width=Narrow
# Total code points: 111
vs ('Na', 111) ==

# EOF
]]]

]]]]]]]]]

