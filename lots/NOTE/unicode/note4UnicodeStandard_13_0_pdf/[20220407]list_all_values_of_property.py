
#__doc__:begin
r'''[[[[[
注:
    其实 看 UCD::PropertyValueAliases.txt
    view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropertyValueAliases.txt


e ../../python3_src/script/try_python/unicodedata/list_all_values_of_property.py
e ../../txt_phone/lots/NOTE/unicode/category.txt

py -m script.try_python.unicodedata.list_all_values_of_property -h

py -m script.try_python.unicodedata.list_all_values_of_property -i east_asian_width category
py -m script.try_python.unicodedata.list_all_values_of_property -c count -i east_asian_width category
py -m script.try_python.unicodedata.list_all_values_of_property -c rngs -i east_asian_width category -o "$my_tmp/out4py/script.try_python.unicodedata.list_all_values_of_property.[rngs].out.txt"
#补偿 [ \]
view  /sdcard/0my_files/tmp/out4py/script.try_python.unicodedata.list_all_values_of_property.\[rngs].out.txt
    see:eof:end of this file
        #太长，自动换行
        :s/, ('/\r\0/g
        :.,$s/)\@<=\]\|\(\(\[\@<=\|, \)(0x\S* \w*)\)\{1,10}/\r    \0/g

py -m script.try_python.unicodedata.list_all_values_of_property -c rng2prop -i east_asian_width category -o "$my_tmp/out4py/script.try_python.unicodedata.list_all_values_of_property.[rng2prop].out.txt"
#补偿 [ \]
view  /sdcard/0my_files/tmp/out4py/script.try_python.unicodedata.list_all_values_of_property.\[rng2prop].out.txt
    see:eof:end of this file
        #太长，自动换行
        :.,$s/, ((0x/\r\0/g



# /^《\?[^\x00-\xff\uff03-\uff3f《]
view ../../python3_src/nn_ns/app/char2name.py
    import unicodedata as U
    category = U.category(ch)
    east_asian_width = U.east_asian_width(ch)
py -m nn_ns.app.char2name  我無
    'category': 'Lo',
    'east_asian_width': 'W',
py -m nn_ns.app.char2name  '｛　＿＼．［＃《'
  'category': Zs Ps Po Pc
  'east_asian_width': 'F'
#



e ../../txt_phone/lots/NOTE/unicode/category.txt
UnicodeStandard-13.0.pdf


[[[[[[[begin of Chapter 3
3. Conformance
3.5 Properties
    -> Section 4.1, Unicode Character Database
        , for an overview of those data files.
        The actual values of Unicode character properties are specified in the Unicode Character Database.

    -> Chapter 4, Character Properties, contains more detailed descriptions of some particular, important character properties.

    -> Additional properties that are specific to particular characters (such as the definition and use of the right-to-left override character or zero width space) are discussed in the relevant sections of this standard.

Types of Properties
    任何时候以UCD(数据库)为准，标准pdf+UAX并不准确
        UAX:Unicode Standard Annex
    ----
    -> UAX #44, “Unicode Character Database,”
        UCD exclude Unihan
        code point property
        encoded character property
        UCD::PropertyAliases.txt
        UCD::PropertyValueAliases.txt
    -> UAX #38, “Unicode Han Database (Unihan).”
        Unihan
        encoded character property
    -> UAX #31, “Unicode Identifier and Pattern Syntax.”

    ----
    * encoded character property/Unicode character property/character property/property
        ...即 (已赋字符的编码点)的属性

    * abstract character property
        ...即 抽象字符的属性#种类，数字，...

    * code point property
        ...即 编码点的属性#是否字符，...

Property values
    • For example, the East_Asian_Width [EAW] property has the possible values “Narrow”, “Neutral”, “Wide”, “Ambiguous”, and “Unassigned”.

    * Explicit property value
        UCD/Unihan 中 显式指明
    * Implicit property value
        UCD/Unihan 中 隐式指明，通过 规则 或 另行条款
            by a generic rule or by an “otherwise” clause
        ---
        A value for an encoded character property that is given by a generic rule or by an “otherwise” clause in one of the data files of the Unicode Character Database.

    Default Property Values
        同一属性，可能有多个 默认属性值，或者说是，不同编码区 有各自的 默认属性值
        私用区 默认属性值 可被 高层应用协议 覆盖:
            -> Section 23.5, Private-Use Characters.


Classification of Properties by Their Values
    -> Section 5.7.6, Properties Whose Values Are Sets of Values, in UAX #44, “Unicode Character Database.”
        集合属性:
            属性值 类型 是 集合

    * 枚举属性
        属性值 少，相对稳定，但 后续版本 可添加
    * 闭式枚举属性
        <:枚举属性
        后续版本 不可添加 属性值
        ---
        • The General_Category and Bidi_Class properties are the only closed enumerations, except for the Boolean properties.
    * 真值属性
        <:闭式枚举属性
    * 数值属性
        属性值 类型: 整数、实数
        例:Numeric_Value property
    * 字符串属性
        属性值 类型: 字符串
        例:Canonical_Decomposition property
    * 概况属性
        <:枚举属性
        例:Age/Block/Script property
        ----
        a new value for Age is added for each new Unicode version
        a new value for Block is added for each new block added to the standard
        a new value for Script is added for each new script added to the standard


Property Status
    * normative
        #normative 规范的，惯常的
        normative properties can be subclassified, based on whether or not they can be overridden by conformant higher-level protocols.
        规范属性
    * informative
        #informative 报道性的/情报的，增长见识的/使知道消息的，见闻广博的
        资讯属性
    * contributory
        #contributory #？有助的/有益的/辅助性质的/由捐助支付的/群策群力的？
        辅助属性
    * provisional
        #provisional 暂定的/暂时性的/临时性的
        暂定属性

    ----
    Normative property: A Unicode character property used in the specification of the standard.
        Whenever a normative process depends on a property in a specified way, that property is designated as normative.
        #可能改变，虽然原意固定不变
        #   The fact that a given Unicode character property is normative does not mean that the values of the property will never change for particular characters.
        #   Corrections and extensions to the standard in the future may require minor changes to normative values, even though the Unicode Technical Committee strives to minimize such changes.
        #   See also “Stability of Properties” later in this section.

        分为2种:
            * normative and not overridable
                no higher-level protocol may override these values
                例: Canonical_Decomposition property is not overridable
            * Overridable property
                a normative property whose values may be overridden by conformant higher-level protocols
                例: Uppercase property can be overridden.


    ----
    Informative property: A Unicode character property whose values are provided for information only.
        实现 可 覆盖 其 属性值
            #encourage comparable behavior between implementations.
        后续版本 可能将之提升为 Normative property
    ----
    Contributory property: A simple property defined merely to make the statement of a rule defining a derived property more compact or general.
        Contributory properties typically consist of short lists of exceptional characters which are used as part of the definition of a more generic normative or informative property.
        多数命名以“Other”开头: Other_Alphabetic or Other_Default_Ignorable_Code_Point...
        原意并无固化之意，但当用于Normative property的定义中，也可被动固化
            such as the derived, normative identifier-related properties, XID_Start and XID_Continue.

    ----
    Provisional property: A Unicode character property whose values are unapproved and tentative, and which may be incomplete or otherwise not in a usable state.
        • Provisional properties may be removed from future versions of the standard, without prior notice.
        用于 评审 更进
            Some of the information provided about characters in the Unicode Character Database constitutes provisional data.
            This data may capture partial or preliminary information.
            It may contain errors or omissions, or otherwise not be ready for systematic use
            For example, a number of the tags in the Unihan Database file (Unihan.zip) provide provisional property values of various sorts about Han characters.
        UCD 注释 不稳定，也可当作 provisional property


Context Dependence
    ----
    * Context-dependent property: A property that applies to a code point in the context of a longer code point sequence.
        • For example, the lowercase mapping of a Greek sigma depends on the context of the surrounding characters.

    ----
    * Context-independent property: A property that is not context dependent; it applies to a code point in isolation.



Stability of Properties
    ----
    * Stable transformation: A transformation T on a property P is stable with respect to an algorithm A if the result of the algorithm on the transformed property A(T(P)) is the same as the original result A(P) for all code points.
        ####
        is_Stable_transformation<P, A>(T) := all (A<T<P> >(pt) == A<P>(pt)) {pt<-[0:0x11_00_00]}
            P:property
            A<P>:app-algorithm
            T<P>:version-transformation

    ----
    稳态属性/针对性稳态属性
        #?vs 全局性稳态属性
        #仅针对 特定算法，故而 允许 属性值 更改/等价变换(相对于 特定算法集 而言 等价)
        #例外情况:初始化覆盖默认值 是 允许的
    * Stable property: A property is stable with respect to a particular algorithm or process as long as possible changes in the assignment of property values are restricted in such a manner that the result of the algorithm on the property continues to be the same as the original result for all previously assigned code points.
        • As new characters are assigned to previously unassigned code points, the replacement of any default values for these code points with actual property values must maintain stability.
        ####
        is_Stable_property<P, A>() := all (is_Stable_transformation<P, A>(delta<P, version, version-1>)) {version<-[1..]}

    ----
    定值属性
        #不允许 属性值 更改
        #例外情况:初始化覆盖默认值 是 允许的
        #例外情况:更正错误 是 允许的
    * Fixed property: A property whose values (other than a default value), once associated with a specific code point, are fixed and will not be changed, except to correct obvious or clerical errors.
        • For a fixed property, any default values can be replaced without restriction by actual property values as new characters are assigned to previously unassigned code points.
            Examples of fixed properties include Age and Hangul_Syllable_Type.
        • Designating a property as fixed does not imply stability or immutability.
            (see “Stability” in Section 3.1, Versions of the Unicode Standard)
            While the age of a character, for example, is established by the version of the Unicode Standard to which it was added, errors in the published listing of the property value could be corrected.
            For some other properties, even the correction of such errors is prohibited by explicit guarantees of property stability.


    ----
    固化属性 <: 稳态属性&定值属性
        定值属性 允许 更正错误
        针对性稳态属性 允许 等价变换
        固化属性=全局性稳态属性 不允许任何非初始化 更改
        #例外情况:初始化覆盖默认值 是 允许的
    * Immutable property: A fixed property that is also subject to a stability guarantee preventing any change in the published listing of property values other than assignment of new values to formerly unassigned code points.
        • An immutable property is trivially stable with respect to all algorithms.
        • An example of an immutable property is the Unicode character name itself.
            Because character names are values of an immutable property, misspellings and incorrect names will never be corrected clerically.
            Any errata will be noted in a comment in the character names list and, where needed, an informative character name alias will be provided.
        • When an encoded character property representing a code point property is immutable, none of its values can ever change.
            This follows from the fact that the code points themselves do not change, and the status of the property is unaffected by whether a particular abstract character is encoded at a code point later.
            An example of such a property is the Pattern_Syntax property; all values of that property are unchangeable for all code points, forever.
        • In the more typical case of an immutable property, the values for existing encoded characters cannot change, but when a new character is encoded, the formerly unassigned code point changes from having a default value for the property to having one of its nondefault values.
            Once that nondefault value is published, it can no longer be changed.


    ----
    满员属性 <: 定值属性&其他新增字符只能赋予默认值
    * Stabilized property: A property that is neither extended to new characters nor maintained in any other manner, but that is retained in the Unicode Character Database.
        • A stabilized property is also a fixed property.


    ----
    过气属性
    * Deprecated property: A property whose use by implementations is discouraged.
        • One of the reasons a property may be deprecated is because a different combination of properties better expresses the intended semantics.
        • Where sufficiently widespread legacy support exists for the deprecated property, not all implementations may be able to discontinue the use of the deprecated property.
            In such a case, a deprecated property may be extended to new characters so as to maintain it in a usable and consistent state.


    ----
    ----
    Informative or normative properties in the standard will not be removed even when they are supplanted by other properties or are no longer useful. However, they may be stabilized and/or deprecated.

    The complete list of stability policies which affect character properties, their values, and their aliases, is available online. See the subsection “Policies” in Appendix B.3, Other Unicode Online Resources.

end of Chapter 3]]]]]]]



[[[[[[[begin of Chapter 4
Chapter 4 Character Properties
4.1 UCD#除了Unihan
    PropertyAliases 无冲突
    PropertyValueAliases 在各自的 属性名下也无冲突，但 跨属性名 则不行
    gc=General_Category

    -> Unicode Technical Standard #18, “Unicode Regular Expressions.”
        For a recommended use of property and property value aliases

    UCD::PropertyAliases.txt
    UCD::PropertyValueAliases.txt
        还有 xml格式的UCD

    “\p{bc=B}” versus “\p{ccc=B}”.
        我猜:p是property或properties
        “\properties{bc=B}” versus “\properties{ccc=B}”.
        “\properties{Bidi_Class=B}” versus “\p{Canonical_Combining_Class=B}”.
        “\properties{Bidi_Class=Paragraph_Separator}” versus “\p{Canonical_Combining_Class=Below}”.



4.2 Case
    normative property
    三种: UPPERCASE, Titlecase, lowercase.
        titlecase 是因为 有些字符 其实代表 多个字符的字符串，当其内容刚好所有单词首字母大写时，就叫titlecase
            #中文也有一个顶俩的汉字:近代以来新造的计量单位:双音节字！：兞/毫克，兛/千克，瓱/毫瓦，瓩/千瓦，粍/毫米，粁/千米，粴/公里，粨/百米，瓸/百瓦，兡/百克，兙/十克，瓧/十瓦 之类。
            #单位 Hz？？
            char.Case???
            isTitlecase(str) 作用于 字符串 时，更显而易见
        gc=Lu
        gc=Lt
        gc=Ll

    General_Category property is, by design, a partition of the Unicode codespace.
        This means that each Unicode character can only have one General_Category value, which results in some odd edge cases for modifier letters, letterlike symbols and letterlike numbers.
        ==>>相关的派生属性
        #modifier [语法]修饰语
        #修饰用的字符:gc=Lm
        #字符似的符号:gc=So其中部分
        #字符似的数字:gc=Nl

    相关的派生属性:
        真值属性:Lowercase, Uppercase
            UCD::DerivedCoreProperties.txt
            包含了 gc=Lu/Ll 以外的一些边缘字符
            借助于 辅助属性: Other_Lowercase, Other_Uppercase
                UCD::PropList.txt
                    #全是 真值属性

    相关函数:
        isLowercase, isUppercase :: str -> bool
        isLowercase(s) := toLowercase(s)==s
        ==>> [[ch is caseless/无大小写]-->>[isLowercase ch][isUppercase ch]]
            同时为真#如同 空字符串

        [ch.gc==Lm][ch 派生自 letter/字母(不论大小写！)]-->>[ch.Lowercase][not ch.Uppercase][ch is caseless]
        [ch.gc==Lm][ch 并非派生自 letter/字母(不论大小写！)]-->>[not ch.Lowercase][not ch.Uppercase][ch is caseless]

        see:[pg191/1030] Table 4-1. Relationship of Casing Definitions
            关系惊人地混乱！设计者 脑子里在想什么？使用场景是什么？用户惯常行为是什么？




[pg194/1030]
4.3 Combining Classes
    只用于 某个特定算法，无趣！不看！
Each combining character has a normative canonical combining class.
This class is used with the Canonical Ordering Algorithm
    to determine which combining characters interact typographically
        字符的规范序列 由哪些字符构成？
    and to determine how the canonical ordering of sequences of combining characters takes place.
        字符的规范序列 成分字符 是如何排序的？
Class zero combining characters act like base letters for the purpose of determining canonical order.
Combining characters with non-zero classes participate in reordering for the purpose of determining the canonical order of sequences of characters.
(See Section 3.11, Normalization Forms, for the specification of the algorithm.)

4.4 Directionality
    只用于 某个特定算法，无趣！不看！

4.5 General Category
    #根据 字符 的 首要用途 分类
    #是对ASCII 4个分类的推广: 字母，数字，标点，符号
    # gc属性值 皆 2字符: 大属类+小种类
    #   小种类o 只是对其余字符的归类，并无 明确 共同点
    ######################
    #gc 用途:
    #   regex识别 边界分割/标识名/数字
    #   辅助 字符串规范化
    #
    #
The Unicode Character Database defines a General_Category property for all Unicode code points.
    The General_Category value for a character serves as a basic classification of that character, based on its primary usage.
    The property extends the widely used subdivision of ASCII characters into letters, digits, punctuation, and symbols
    —a useful classification that needs to be elaborated and further subdivided to remain appropriate for the larger and more comprehensive scope of the Unicode Standard.

Each Unicode code point is assigned a normative General_Category value.
    Each value of the General_Category is given a two-letter property value alias
        , where the first letter gives information about a major class
        and the second letter designates a subclass of that major class.
    In each class, the subclass “other” merely collects the remaining characters of the major class.
        For example, the subclass “No” (Number, other) includes all characters of the Number class that are not a decimal digit or letter.
        These characters may have little in common besides their membership in the same major class.

Table_4_4 gc属性值 的 含义
Table 4-4 enumerates the General_Category values, giving a short description of each value.

Table_2_3 编码点的基础种类
See Table 2-3 for the relationship between General_Category values and basic types of code points.



4.6 Numeric Value
Decimal Digits.
    Decimal digits, as commonly understood, are digits used to form decimalradix numbers.
    They include script-specific digits, but exclude characters such as Roman numerals and Greek acrophonic numerals, which do not form decimal-radix expressions.
    (Note that <1, 5> = 15 = fifteen, but <I, V> = IV = four.)

The Numeric_Type = Decimal property value (which is correlated with the General_Category = Nd property value)
    is limited to those numeric characters that are used in decimal-radix numbers and for which a full set of digits has been encoded in a contiguous range, with ascending order of Numeric_Value, and with the digit zero as the first code point in the range.
        # [0..9] 连续的编码区
        #   大部分 序号 都是从 1 开始。

属性值: Decimal, Digit, Numeric, None
其中 Digit, Numeric 并无区别，Unicode标准 将 不再有 新字符 拥有 Digit 属性值。






4.7 Bidi Mirrored
真值属性
    Bidi_Mirrored = Y
目标:
    成对标点
    部分数学符号
        主要是 非精确镜像
            组合性的:其中 数字/箭头 方向不改
例外:
    大部分引号quotation marks
        例外的例外:『』「」等？
    legacy exception:
        U+FD3E ornate left parenthesis
        U+FD3F ornate right parenthesis
            ﴾  ﴿

双向镜像: 是指当字符用于 不同的书写反向 中时 发生的 形变。
    从左向右横排书写
    从右向左横排书写
    从上向下竖排书写
    比如:
        ====不一定是镜像字形:
        U+2232∲ 顺时针环状积分号 积分号反转，箭头方向不改
        U+221B∛立方根 根号反转，3不反转
        ====
        #补偿一个(
        从左向右横排书写
            abc
            [a,b]
            [a,b)
        从右向左横排书写
            cba
            [b,a] #而非 ]b,a[
            (b,a] #而非 )b,a[
        #补偿一个]
        ====
        从左向右横排书写
            『a』
        从上向下竖排书写
            ﹃
            a
            ﹄
            #而非
            『
            a
            』
UCD::BidiBrackets.txt
UCD::BidiMirroring.txt


[[[
4.8 Name
char.Name <- (
    regex'[0-9A-Z -]+'
    - regex'(.* )?[0-9].*'
    - regex'-.*'
    - regex'.*-'
    - regex'.*--.*'
    - regex'.* - .*'
        # 'a- -b' 是允许的
    - regex' .*'
    - regex'.* '
    - regex'.*  .*'
    )

UCD::NameAliases.txt
UCD::NamedSequences.txt
UCD::DerivedName.txt
    #非使用模版生成的 正式名:For all other Graphic characters and for all Format characters, the Name property value is as explicitly listed in Field 1 of UnicodeData.txt.
    #
    #For all other Unicode code points of all other types (Control, Private-Use, Surrogate, Noncharacter, and Reserved), the value of the Name property is the null string. In other words, na = “”.
    #

[[char.gc==Cc]-->>[char.Name=""]]
    Control codes
Code Point Labels
    没有 Name 的 编码点 怎么命名？
        For each code point type without character names, code point labels are constructed by using a lowercase prefix derived from the code point type, followed by a hyphen-minus and then a 4- to 6-digit hexadecimal representation of the code point.
    但 通常 显示成 <xxx-yyy> 即 加上 尖括号
        所以，到底 有啥用？既然已有 U+NNNN
    ======
    [[Table_4_9
    Table 4-9. Construction of Code Point Labels
    #大写 数值
    #NNNN 也可能是 NNNNNN
    Type            Label
    Control         control-NNNN
    Reserved        reserved-NNNN
    Noncharacter    noncharacter-NNNN
    Private-Use     private-use-NNNN
    Surrogate       surrogate-NNNN
    ]]

12个 例外 汉字:(F900..FA6D)[:12]
    名曰 兼容，其实是 统一的。
    应该使用: char.Unified_Ideograph
        $ grep Unified_Ideograph  -l -r ./unicode_13__UCD
        ./PropertyValueAliases.txt
        ./EquivalentUnifiedIdeograph.txt
        ./PropList.txt
        ./PropertyAliases.txt
        ./EquivalentUnifiedIdeograph.txt
        ==========
        ./PropList.txt
            真值属性！！！
        [[2+1+2+1+1+2+3==12
        FA0E..FA0F
        FA11
        FA13..FA14
        FA1F
        FA21
        FA23..FA24
        FA27..FA29
        ]]
        =====
        view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropList.txt
        [[
        FA0E..FA0F    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA0E..CJK COMPATIBILITY IDEOGRAPH-FA0F
        FA11          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA11
        FA13..FA14    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA13..CJK COMPATIBILITY IDEOGRAPH-FA14
        FA1F          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA1F
        FA21          ; Unified_Ideograph # Lo       CJK COMPATIBILITY IDEOGRAPH-FA21
        FA23..FA24    ; Unified_Ideograph # Lo   [2] CJK COMPATIBILITY IDEOGRAPH-FA23..CJK COMPATIBILITY IDEOGRAPH-FA24
        FA27..FA29    ; Unified_Ideograph # Lo   [3] CJK COMPATIBILITY IDEOGRAPH-FA27..CJK COMPATIBILITY IDEOGRAPH-FA29
        ]]
    ####
    Twelve of the CJK ideographs in the starred range in Table 4-8, in the CJK Compatibility Ideographs block, are actually CJK unified ideographs.
    Nonetheless, their names are constructed with the “cjk compatibility ideograph-” prefix shared by all other code points in that block.
    The status of a CJK ideograph as a unified ideograph cannot be deduced from the Name property value for that ideograph; instead, the dedicated binary property Unified_Ideograph should be used to determine that status.
    See “CJK Compatibility Ideographs” in Section 18.1, Han
        , and Section 4.4, “Listing of Characters Covered by the Unihan Database” in Unicode Standard Annex #38, “Unihan Database,”
        for more details about these exceptional twelve CJK ideographs.
]]]





4.10 Letters, Alphabetic, and Ideographic

    3个 真值属性？
        Letter
            包含 Letters and Syllables (两者不作区分)
        Alphabetic
            资讯属性
            Alphabetic property is a derived informative property
        Ideographic
            资讯属性
            Ideographic property is an informative property

Computer language standards often characterize identifiers as consisting of letters, syllables, ideographs, and digits
    , but do not specify exactly what a “letter,” “syllable,” “ideograph,” or “digit” is
    , leaving the definitions implicitly either to a character encoding standard or to a locale specification.




4.12 Characters with Unusual Properties
Table 4-10. Unusual Properties
===head
Function
    Details
    Code Point and Name
===body
汉字相关部分Ideographic-related
Ideographic variation indication
    Section 6.2
    303E ideographic variation indicator
Ideographic description
    Section 18.2
    2FF0..2FFB ideographic description character left to right..ideographic description character overlaid
===end



『@』中文名『老鼠号』？
    #from: Table 6-7. Names for the @
    #   [pg303/1030]

annex?? adj. 附加的 n 附件
slang?? 俚语，行话/专业用语
geta??日式木屐
sandal?? 凉鞋，草鞋
nominal adj. 名义上的/挂名的/空有其名无实权的(<->real)，象征性的极少的(费用)，面值/票面上的/名目上的，额定的/标称的/公称的，由名字构成的(nominal list名单)，记名的(股票)，[文法]名词的  n. 名词短语
depict 描述


书写成单字-平面-二维
书写成词语-线性-一维
视觉想象-立体-三维


[pg308/1030] CJK Punctuation
[pg310/1030] Unknown or Unavailable Ideographs 
U+3013 geta mark
    找不到 字符的对应字形 时，用 此字符的字形 替代。
    〓
    is used to indicate the presence of, or to hold a place for, an ideograph that is not available when a document is printed.
    It has no other use.
    Its name comes from its resemblance to the mark left by traditional Japanese sandals (geta).
    A variety of light and heavy glyphic variants occur.

U+303E ideographic variation indicator
    找不到 实际字符的编码 时，用 此字符 后接 一个 字形相近的字符。期待最终能够 更换回 实际字符。
    〾
    is a graphic character that is to be rendered visibly.
    It alerts the user that the intended character is similar to, but not equal to, the character that follows.
    Its use is similar to the existing character U+3013 geta mark.
        A geta mark substitutes for the unknown or unavailable character, but does not identify it.
        The ideographic variation indicator is the head of a two-character sequence that gives some indication about the intended glyph or intended character.
            Ultimately, the ideographic variation indicator and the character following it are intended to be replaced by the correct character
            , once it has been identified or a font resource or input resource has been provided for it.

U+303F ideographic half fill space
    is a visible indicator of a display cell filler used when ideographic characters have been split during display on systems using a double-byte character encoding.
    It is included in the Unicode Standard for compatibility.

See also “Ideographic Description Sequences” in Section 18.2, Ideographic Description Characters.



see:
    [pg288/1030] Blocks Devoted to Punctuation
    See Section 18.5, Halfwidth and Fullwidth Forms, for more information.
        本文件内 搜索:
            /18[.]5

end of Chapter 4]]]]]]]


TODO
alterT mimic fmapT
    ctor(filter(chain...))

标点符号:用来表示停顿、语气以及词语性质和作用的书写符号，包括句号（。）、问号（？）、叹号（！）、逗号（，）、顿号（、）、分号（；）、冒号（：）、引号（“”、‘’）、括号（［］、（）、〔〕、【】）、破折号（——）、省略号（……）、着重号（．）、连接号（—）、间隔号（·）、书名号（《》、〈〉）、专名号（____）等。









xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx





TODO
复制
    ../../python3_src/script/try_python/unicodedata/list_all_values_of_property.py
    ->  ../../txt_phone/lots/NOTE/unicode/ucd__unihan/
    ===
    e  ../../txt_phone/lots/NOTE/unicode/ucd__unihan/tree.ucd__unihan.ver13_0.txt
        ===copy from ./list_all_values_of_property.py
    e  ../../txt_phone/lots/NOTE/unicode/ucd__unihan/value_meaning.ucd__unihan.ver13_0.txt
        ===copy from ./list_all_values_of_property.py


TODO:
looking pdf 194   4.3 Combining Classes
正在 搜索 width
UAX #11
U+200B 零宽空格
[pg311/1030]
CJK Compatibility Forms::Fullwidth and Halfwidth Variants.
    ASCII标点符号的fullwidth变体
    CJK标点符号的halfwidth变体
    For compatibility with East Asian legacy character sets, the Unicode Standard encodes
        fullwidth variants of ASCII punctuation
        and halfwidth variants of CJK punctuation.
    See Section 18.5, Halfwidth and Fullwidth Forms, for more information.

[[[
[pg288/1030]
Blocks Devoted to Punctuation
For compatibility with widely used legacy character sets, the Basic Latin (ASCII) block (U+0000..U+007F) and the Latin-1 Supplement block (U+0080..U+00FF) contain several of the most common punctuation signs.
    They are isolated from the larger body of Unicode punctuation, signs, and symbols only because their relative code locations within ASCII and Latin-1 are so widely used in standards and software.
    The Unicode Standard has a number of blocks devoted specifically to encoding collections of punctuation characters.



The General Punctuation block (U+2000..U+206F)
    contains the most common punctuation characters widely used in Latin typography, as well as a few specialized punctuation marks and a large number of format control characters.
    All of these punctuation characters are intended for generic use, and in principle they could be used with any script.

The Supplemental Punctuation block (U+2E00..U+2E7F)
    is devoted to less commonly encountered punctuation marks
    , including those used in specialized notational systems or occurring primarily in ancient manuscript traditions.

The CJK Symbols and Punctuation block (U+3000..U+303F)
    has the most commonly occurring punctuation specific to East Asian typography—that is, typography involving the rendering of text with CJK ideographs.

The Vertical Forms block (U+FE10..U+FE1F)
, the CJK Compatibility Forms block (U+FE30..U+FE4F)
, the Small Form Variants block (U+FE50..U+FE6F)
, and the Halfwidth and Fullwidth Forms block (U+FF00..U+FFEF)
    contain many compatibility characters for punctuation marks
    , encoded for compatibility with a number of East Asian character encoding standards.
    Their primary use is for round-trip mapping with those legacy standards.
    For vertical text, the regular punctuation characters are used instead, with alternate glyphs for vertical layout supplied by the font.

The punctuation characters in these various blocks are discussed below in terms of their general types.
]]]






[[[ Table_2_3
[pg116/1030]
7 种 编码点的基础种类:
    code_point_type: Any of the seven fundamental classes of code points in the standard:
        Graphic     #正常用字符#内容字符
        Format      #排版用字符#文本字符
        ---
        Control     #规范外字符
        Private-Use #私有字符
        ---
        Surrogate   #转义用字符@utf16
        Noncharacter#非字符编码点
        Reserved    #保留区编码点

Control
    #65个:32(U+0000..U+001F)+33(U+007F..U+009F)
NoncharaControl
    #66个:32(U+FDD0..U+FDEF)+34(U+[00..10]FFF[E..F])
    # Noncharacter code points are reserved for internal use, such as for sentinel values.
Surrogate:
    #2048个:(U+D800..U+DFFF)
    #high=(U+D800..U+DBFF)
    #low=(U+DC00..U+DFFF)
    #====
    #11bit=0bit+10bit ==>> 10bit*10bit=20bit=4bit*16bit==16*16bit
    #17*16bit == 16bit+16*16bit == 16bit+10bit*10bit
    #([0:0x110000]-Surrogate) == ([0:0xffff]-Surrogate)+[Surrogate-high]*[Surrogate-low]

[[
[pg58/1030]
Table 2-3. Types of Code Points
====head[[
Basic Type
    ====
    Brief Description
    ====
    General Category
    ====
    Character Status
        _Assigned:=Assigned to abstract character
            #<==> otherwise
        _Forbid_Assigned:=Cannot be assigned to abstract character
            <==> Surrogate
        _Not_Assigned:=Not assigned to abstract character
            <==> Noncharacter or Reserved
    ====
    Code Point Status
        _Designated:=Designated (assigned) code point
            <==> not Reserved
        _Undesignated:=Undesignated (unassigned) code point
            <==> Reserved
    ====
    ]]
====body[[
    ====
    Graphic
        Letter, mark, number, punctuation, symbol, and spaces
        L, M, N, P, S, Zs
        _Assigned
        _Designated
    ====
    Format
        Invisible but affects neighboring characters; includes line/paragraph separators
        Cf, Zl, Zp
        _Assigned
        _Designated
    ====
    Control
        Usage defined by protocols or standards outside the Unicode Standard
        Cc
        _Assigned
        _Designated
    ====
    Private_Use
        Usage defined by private agreement outside the Unicode Standard
        Co
        _Assigned
        _Designated
    ====
    Surrogate
        Permanently reserved for UTF-16; restricted interchange
        Cs
        _Forbid_Assigned (the only)
        _Designated
    ====
    Noncharacter
        Permanently reserved for internal usage; restricted interchange
        Cn-part
        _Not_Assigned
        _Designated
    ====
    Reserved
        Reserved for future assignment; restricted interchange
        Cn-part
        _Not_Assigned
        _Undesignated (the only)
    ====
    ]]
====
]]

]]]

[[[
[pg126/1030]
Table_3_2
Table 3-2. Normative Character Properties
# /\S\(UAX\|Sec\)
========================
Table 3-2. Normative Character Properties
========================
===
Property
    :Description
===
Bidi_Class (directionality)
    :UAX #9 and Section 4.4
Bidi_Mirrored
    :UAX #9 and Section 4.7
Bidi_Paired_Bracket
    :UAX #9
Bidi_Paired_Bracket_Type
    :UAX #9
Block
    :Section 24.1
Canonical_Combining_Class
    :Section 3.11 and Section 4.3
Case-related properties
    :Section 3.13, Section 4.2, and UAX #44
Composition_Exclusion
    :Section 3.11
Decomposition_Mapping
    :Section 3.7 and Section 3.11
Default_Ignorable_Code_Point
    :Section 5.21
Deprecated
    :Section 3.1
East_Asian_Width
    :Section 18.4 and UAX #11
General_Category
    :Section 4.5
Hangul_Syllable_Type
    :Section 3.12 and UAX #29
Joining_Type and Joining_Group
    :Section 9.2
Line_Break
    :Section 23.1, Section 23.2, and UAX #14
Name
    :Section 4.8
Noncharacter_Code_Point
    :Section 23.7
Numeric_Value
    :Section 4.6
White_Space
    :UAX #44
========================


Table_3_3
========================
Table 3-3. Informative Character Properties
========================
===
Property
    :Description
===
Dash
    :Section 6.2 and Table 6-3
Letter-related properties
    :Section 4.10
Mathematical
    :Section 22.5
Script
    :UAX #24
Space
    :Section 6.2 and Table 6-2
Unicode_1_Name
    :Section 4.9
========================
]]]


[[[
Table_4_4
4.5 General Category
    <<== Table 3-2. Normative Character Properties
Table 4-4. General Category
Lu = Letter, uppercase
Ll = Letter, lowercase
Lt = Letter, titlecase
Lm = Letter, modifier
Lo = Letter, other
Mn = Mark, nonspacing
Mc = Mark, spacing combining
Me = Mark, enclosing
Nd = Number, decimal digit
Nl = Number, letter
No = Number, other
Pc = Punctuation, connector
Pd = Punctuation, dash
Ps = Punctuation, open
Pe = Punctuation, close
Pi = Punctuation, initial quote (may behave like Ps or Pe depending on usage)
Pf = Punctuation, final quote (may behave like Ps or Pe depending on usage)
Po = Punctuation, other
Sm = Symbol, math
Sc = Symbol, currency
Sk = Symbol, modifier
So = Symbol, other
Zs = Separator, space
Zl = Separator, line
Zp = Separator, paragraph
Cc = Other, control
Cf = Other, format
Cs = Other, surrogate
Co = Other, private use
Cn = Other, not assigned (including noncharacters)
]]]



18.5 Halfwidth and Fullwidth Forms
    -> UAX #11, “East Asian Width.”
        For a complete description of the East Asian Width property

# U+3000, (U+FF00–U+FFEF)
Halfwidth and Fullwidth Forms: U+FF00–U+FFEF
    The characters in this block consist of fullwidth forms of the ASCII block (except space), certain characters of the Latin-1 Supplement, and some currency symbols. In addition, this block contains halfwidth forms of the Katakana and Hangul Compatibility Jamo charac- ters. Finally, a number of symbol characters are replicated here (U+FFE8..U+FFEE) with explicit halfwidth semantics.

    Unifications. The fullwidth form of U+0020 space is unified with U+3000 ideographic space.



#补偿 [ \]
#补偿 [ \]
view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropertyValueAliases.txt
view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/EastAsianWidth.txt
    from:
        /storage/emulated/0/0my_files/zip/zip_selected__e_book_data/13.0.0\[download_at]\[20200913]/zipped_UCD/UCD.zip
            UCD::PropertyValueAliases.txt
            UCD::EastAsianWidth.txt
            UCD::DerivedEastAsianWidth.txt
            UCD::Blocks.txt
[[[UCD::PropertyValueAliases.txt
# East_Asian_Width (ea)

ea ; A                                ; Ambiguous
ea ; F                                ; Fullwidth
ea ; H                                ; Halfwidth
ea ; N                                ; Neutral
ea ; Na                               ; Narrow
ea ; W                                ; Wide
]]]

==>>
['A', 'F', 'H', 'N', 'Na', 'W']
    A-Ambiguous
    F-Fullwidth
    H-Halfwidth
    N-Neutral
    Na-Narrow
    W-Wide
    ##?no "Unassigned"?
[('A', 138739), ('F', 836706), ('H', 123), ('N', 26925), ('Na', 111), ('W', 111508)]
tiny size:
    H
    Na
    ==>> grep H/Na in EastAsianWidth.txt

问题是 若说：
    ASCII标点符号的fullwidth版 变体
    CJK标点符号的halfwidth版 变体
        [[！！！正确！！！
        见 CodeCharts.pdf::[pg1159/2684]:
        Halfwidth and Fullwidth Forms (FF00..FFEF)的 注释
            Fullwidth ASCII variants
                See ASCII 0020-007E
                FF01『！』FULLWIDTH EXCLAMATION MARK ≈ <wide> 0021『!』
            Halfwidth CJK punctuation
                See CJK punctuation 3000-303F
                FF61『｡』HALFWIDTH IDEOGRAPHIC FULL STOP ≈ <narrow> 3002『。』
        ]]

    Narrow 是 字符本身 就是 窄的，并非halfwidth变体
    Wide 是 字符本身 就是 宽的，并非fullwidth变体
    Neutral 无关宽窄
        ？U+200B 零宽空格？
            对! (0x2000, 0x2010).east_asian_width==N
    Ambiguous 歧义
        ？缺省值/默认值/未赋值？
            错！Ambiguous 主要来自 私用区，默认值 实际上是 Neutral!!!!
            见下面:UCD::DerivedEastAsianWidth-13.0.0.txt
    那：
        为何 Fullwidth 远比 Narrow多？ 别说是 Narrow 的 变体，即便 其余字符 加起来 也没Fullwidth的多！
            感觉 要么是 版本不同，版本12 与 版本13 有 巨大不同
                要么就是 py::unicodedata 实现有误，Fullwidth抢了Neutral+Wide



[[[UCD::DerivedEastAsianWidth.txt

版本不同:
    py::unicodedata.unidata_version = '12.1.0'
    UCD::DerivedEastAsianWidth-13.0.0.txt

UCD::DerivedEastAsianWidth.txt
    view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/extracted/DerivedEastAsianWidth.txt
    默认属性值:N/Neutral 不是 Ambiguous!!!
#下面 只列出 几万/几千 的 区域
#   搜索 /\[\d\{5}\]
#   搜索 /\[\d\{4}\]
#   ==>> Neutral 主要来源 默认缺省
#   ==>> Ambiguous 主要来源 私用区
#   ==>> Wide 主要来源 CJK/东亚字符/预留区
#   ==>> py::unicodedata-12.1.0::Fullwidth 应当抢了 83万 于 UCD::DerivedEastAsianWidth-13.0.0.txt::Neutral(76万)+Wide(7万)
#           Neutral 刚好有 767414 未显式指明
#           Wide 刚好有 60595 预留区 字符
#
##########################


# DerivedEastAsianWidth-13.0.0.txt
# @missing: 0000..10FFFF; Neutral

:21 lineno
# East_Asian_Width=Neutral
13000..1342E  ; N # Lo [1071] EGYPTIAN HIEROGLYPH A001..EGYPTIAN HIEROGLYPH AA032
# The above property value applies to 767414 code points not listed here.
# Total code points: 792699
vs ('N', 26925) <

:1942 lineno
# East_Asian_Width=Ambiguous
F0000..FFFFD  ; A # Co [65534] <private-use-F0000>..<private-use-FFFFD>
100000..10FFFD; A # Co [65534] <private-use-100000>..<private-use-10FFFD>
E000..F8FF    ; A # Co [6400] <private-use-E000>..<private-use-F8FF>
# Total code points: 138739
vs ('A', 138739) ==

:2147 lineno
# East_Asian_Width=Halfwidth
# Total code points: 123
vs ('H', 123) ==

:2171 lineno
# East_Asian_Width=Wide
4E00..9FFC    ; W # Lo [20989] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FFC
AC00..D7A3    ; W # Lo [11172] HANGUL SYLLABLE GA..HANGUL SYLLABLE HIH
20000..2A6DD  ; W # Lo [42718] CJK UNIFIED IDEOGRAPH-20000..CJK UNIFIED IDEOGRAPH-2A6DD
3134B..3FFFD  ; W # Cn [60595] <reserved-3134B>..<reserved-3FFFD>
3400..4DBF    ; W # Lo [6592] CJK UNIFIED IDEOGRAPH-3400..CJK UNIFIED IDEOGRAPH-4DBF
A016..A48C    ; W # Lo [1143] YI SYLLABLE BIT..YI SYLLABLE YYR
17000..187F7  ; W # Lo [6136] TANGUT IDEOGRAPH-17000..TANGUT IDEOGRAPH-187F7
18800..18CD5  ; W # Lo [1238] TANGUT COMPONENT-001..KHITAN SMALL SCRIPT CHARACTER-18CD5
2A700..2B734  ; W # Lo [4149] CJK UNIFIED IDEOGRAPH-2A700..CJK UNIFIED IDEOGRAPH-2B734
2B820..2CEA1  ; W # Lo [5762] CJK UNIFIED IDEOGRAPH-2B820..CJK UNIFIED IDEOGRAPH-2CEA1
2CEB0..2EBE0  ; W # Lo [7473] CJK UNIFIED IDEOGRAPH-2CEB0..CJK UNIFIED IDEOGRAPH-2EBE0
2EBE1..2F7FF  ; W # Cn [3103] <reserved-2EBE1>..<reserved-2F7FF>
2FA1E..2FFFD  ; W # Cn [1504] <reserved-2FA1E>..<reserved-2FFFD>
30000..3134A  ; W # Lo [4939] CJK UNIFIED IDEOGRAPH-30000..CJK UNIFIED IDEOGRAPH-3134A
# Total code points: 182336
vs ('W', 111508) <
    70828 = 182336-111508
        echo $[182336-111508]
    10233 = 70828-60595-3103-1504
        echo $[70828-60595-3103-1504]
        reserved
        #-60595(3134B..3FFFD)
        #-3103(2EBE1..2F7FF)
        #-1504(2FA1E..2FFFD)
        #见下面 THIS -c rngs east_asian_width :: F :: (0x2fa1e, 0xe0001) 包含了 60595(3134B..3FFFD)、1504(2FA1E..2FFFD)；:: (0x2ebe1, 0x2f800) 包含了 3103(2EBE1..2F7FF)；
        #难道是 程序员 直接使用 UCD::EastAsianWidth.txt 却 忽视了 文件头的各区默认值声明？？
        #   猜测错误。
        #   W::(0x3250, 0x4db6) 不完全包含 默认的 (3400..4DBF)
        #       这是正常情况，应该是 出现了 显式赋值
        #       也说明 程序员 并未出错。
        #
    5294 = 10233-4939
        echo $[10233-4939]
        #-4939(30000..3134A)
        #   F::(0x2fa1e, 0xe0001)

:2416 lineno
# East_Asian_Width=Fullwidth
# Total code points: 104
vs ('F', 836706) >

:2457 lineno
# East_Asian_Width=Narrow
# Total code points: 111
vs ('Na', 111) ==

# EOF
]]]

[[[tree unicode_13__Unihan
mkdir $my_tmp/out4tree/
cd /storage/emulated/0/0my_files/unzip/e_book/
tree unicode_13__Unihan/ > $my_tmp/out4tree/unicode_13__Unihan.tree.txt
view  /sdcard/0my_files/tmp/out4tree/unicode_13__Unihan.tree.txt
[[
unicode_13__Unihan/
├── Unihan_DictionaryIndices.txt
├── Unihan_DictionaryLikeData.txt
├── Unihan_IRGSources.txt
├── Unihan_NumericValues.txt
├── Unihan_OtherMappings.txt
├── Unihan_RadicalStrokeCounts.txt
├── Unihan_Readings.txt
└── Unihan_Variants.txt

0 directories, 8 files
]]


添加注释:#见下面 感兴趣的、详细信息
[[
unicode_13__Unihan/
├── Unihan_DictionaryIndices.txt
    # 汉字在各字典中的位置/编码(有重码)
    # 行格式: 编码点\t字典名\t\S+( +\S+)*
    #
    # 但 位置信息\S+ 各字典 含义、格式 各不同
    # 编码点 重复: 因为 PK主键 是(编码点,字典名)
    #   Map (编码点,字典名) [定位信息]
    # 一字多定位信息:
    #   U+34B9  kHanYu  10254.060 10254.100
    # 定位信息 重复:甴电 的 kKangXi 定位信息 一样！
    #
    #   U+7534  kKangXi 0759.001
    #   U+7535  kKangXi 0759.001
    # 有重码，意义不大

├── Unihan_DictionaryLikeData.txt
    # 汉字在各仿字典的字库中的编码(字形库/输入法编码方案...，有重码？未知)
    # 行格式:同上

├── Unihan_IRGSources.txt
    # ...来源
├── Unihan_NumericValues.txt
    # 只有73个
    # 已用于生成 DerivedNumericValues.txt
    #       意义不大

├── Unihan_OtherMappings.txt
    # 汉字在各字符集中的编码/加入日期序列号(我猜 无重码)
    #U+344A  kHKSCS  8CF4
    #U+344A  kKPS1   3555
    #U+344A  kTGH    2013:6700
    #
    #但 感觉没什么用？

├── Unihan_RadicalStrokeCounts.txt
    # 汉字的部首与笔画数
    #
    # 有用: 可推导出-部首的笔画数，余下偏旁的笔画数
    #
├── Unihan_Readings.txt
    # 阅读汉字所需的相关信息
    # 诸如：释义，词频，各种形式的注音(普通话/粤语/韩语/越南语) 等等
    #
    # 有用: 释义，词频，普通话拼音
    #   kDefinition
    #   kHanyuPinlu
    #   kHanyuPinyin
    #   kMandarin

└── Unihan_Variants.txt
    # 汉字的各种变体
    # 诸如：简体，繁体，语义变体，专门语义变体，高相似变体，折笔变体
    #
    # 简繁变体，有用
    # 我猜:高相似变体，折笔变体，可用于 规范化
    #
#
0 directories, 8 files
]]


感兴趣的
[[
├── Unihan_RadicalStrokeCounts.txt
├── Unihan_Readings.txt
└── Unihan_Variants.txt
]]


详细信息
[[
├── Unihan_RadicalStrokeCounts.txt
    # 汉字的部首与笔画数
    #
    # 有用: 可推导出-部首的笔画数，余下偏旁的笔画数
    #   但是 有无可能 部首 存在 多个 笔画数不同的变体？
    #       不会，至少 康熙字典部首 是 先按 自身笔画数 归类的。所以 笔画数不同的变体 应该 成为 不同的部首
    #
    #？部分行格式: 编码点\tkRSKangXi\t部首序列号[.]余下偏旁的笔画数
    #       field_1 还有别的 值，但 相应的 field_2 相当复杂，没看明白
    # U+4091    kRSKangXi   111.5
    #
    # 要求 整字笔画数 就需要先知道 几百个 部首 的 笔画数
    # 我猜 C[+]\d+[+]\d+[.]部首的笔画数[.]余下偏旁的笔画数
    # 由此 可计算出 部首的笔画数！
    # ====
    [[
    # ====
    #
    #   /^U+\([0-9A-F]\{4}\)\t.*\nU+\1
    #
    # \.2\.
    # 亗[山-二] 3+2
    # U+4E97    kRSAdobe_Japan1_6   C+21081+7.2.3 C+21081+46.3.2
    # U+4E97    kRSKangXi   7.3

    # ====
    # \.8\.
    # 俳[亻|非] 2+8
    # U+4FF3    kRSAdobe_Japan1_6   C+3334+9.2.8 C+3334+175.8.2
    # U+4FF3    kRSKangXi   9.8
    # ====
    ]]

├── Unihan_Readings.txt
    # 阅读汉字所需的相关信息
    # 诸如：释义，词频，各种形式的注音(普通话/粤语/韩语/越南语) 等等
    #
    # 有用: 释义，词频，普通话拼音
    #   kDefinition
    #   kHanyuPinlu
    #   kHanyuPinyin
    #   kMandarin
    #   ----
    #   kTGHZ2013
    #   kXHC1983
    [[
    ====上:
    U+4E0A  kCantonese  soeng5 soeng6
    U+4E0A  kDefinition top; superior, highest; go up, send up
    U+4E0A  kHangul 상:0E
    U+4E0A  kHanyuPinlu shàng(12308) shang(392)
    U+4E0A  kHanyuPinyin    10005.040:shàng,shǎng
    U+4E0A  kJapaneseKun    UE KAMI NOBORU
    U+4E0A  kJapaneseOn JOU SHOU
    U+4E0A  kKorean SANG
    U+4E0A  kMandarin   shàng
    U+4E0A  kTGHZ2013   326.050:shǎng 326.090:shàng
    U+4E0A  kTang   *zhiɑ̀ng zhiɑ̀ng zhiɑ̌ng
    U+4E0A  kVietnamese thượng
    U+4E0A  kXHC1983    1002.050:shǎng 1002.100:shàng
    ]]


└── Unihan_Variants.txt
    # 汉字的各种变体
    # 诸如：简体，繁体，语义变体，专门语义变体，高相似变体，折笔变体
    #
    # 简繁变体，有用
    # 我猜:高相似变体，折笔变体，可用于 规范化
    #


    [[
    #   kSemanticVariant
    #   kSimplifiedVariant
    #   kSpecializedSemanticVariant
    #   kSpoofingVariant
    #   kTraditionalVariant
    #   kZVariant
    ######################
    # 见下面: reformat__Unihan_Variants_txt.py 及其 输出
    # kZVariant 异体字(同字 不同 形)
    # kSpoofingVariant 形近字(不同字，形相近)(似乎 只列出 常见混淆的形近字，无『未/末』，有『妹/妺』)
    # kSemanticVariant 同义字(不同字 但 同义)
    # kSpecializedSemanticVariant ？专用字？(某些 特定场合下 的 专用字？你您妳)
    # kSimplifiedVariant 简体字
    # kTraditionalVariant 繁体字
    #
    #
    #
    ######################
    ######################
    ###################### old; manually
    #
    # Z - ？折笔？
    # spoof 高仿？缺笔？避讳？错别字？极度相似？
    #   spoof n 诓骗/愚弄/戏弄 v 揶揄/嘲讽
    #   高仿 高仿 [gao1 fang3] /imitation/quality fake/


    #后0x540e/後0x5f8c
    U+540E  kSimplifiedVariant  U+540E
    U+540E  kTraditionalVariant U+540E U+5F8C
    U+5F8C  kSimplifiedVariant  U+540E

    #发0x53d1/發0x767c/髮0x9aee
    U+53D1  kTraditionalVariant U+767C U+9AEE
    U+767C  kSimplifiedVariant  U+53D1
    U+9AEE  kSimplifiedVariant  U+53D1

    髪0x9aea
    奇怪 [not 髪0x9aea <- 髮0x9aee.kSpoofingVariant]



    莫暮？
    北背？
    py -m nn_ns.app.char2name  莫暮北背
    莫暮？83AB 66AE
    北背？5317 80CC
    #无83AB 66AE 5317的变体

    絣背𰬔
    py -m nn_ns.app.char2name  絣背𰬔
    U+7D63  kSimplifiedVariant  U+30B14
    U+7D63  kSpecializedSemanticVariant U+80CC<kFenn
    U+80CC  kSpecializedSemanticVariant U+7D63<kFenn
    U+30B14 kTraditionalVariant U+7D63



    䄺稊
    U+413A  kSemanticVariant    U+7A0A<kMeyerWempe
    U+7A0A  kSemanticVariant    U+413A<kMeyerWempe

    䅉稏
    U+4149  kTraditionalVariant U+7A0F
    U+7A0F  kSimplifiedVariant  U+4149

    炫衒
    U+70AB  kSpecializedSemanticVariant U+8852
    U+8852  kSpecializedSemanticVariant U+70AB


    赿趆
    U+8D7F  kSpoofingVariant    U+8D86
    U+8D86  kSpoofingVariant    U+8D7F
    ====
    赿chí古同“迟”。
    笔顺：一丨一丨一丿丶丿乛一乛
    ====
    趆dī小步快跑。
    笔顺：一丨一丨一丿丶丿乛一乛丶
    ===难道kSpoofingVariant是『形似但无关』的意思？

    䚶訞𫍚
    U+46B6  kSpoofingVariant    U+8A1E
    U+8A1E  kSimplifiedVariant  U+2B35A
    U+8A1E  kSpoofingVariant    U+46B6
    U+2B35A kTraditionalVariant U+8A1E
    ===但『天夭』又不是kSpoofingVariant
    天0x5929/夭0x592d
    靝975D靔9754
    ===
    夭->[不存在]
    ===
    天->天靝
    U+5929  kSemanticVariant    U+975D<kMatthews
    U+975D  kSemanticVariant    U+5929<kMatthews
    ===
    靝tiān见“靔”。
    靔（靝）tiān古同“天”。
    ===有毛病:简繁 无『靝靔』
    ===有毛病:kSemanticVariant有『天靝』，无『天靔』
    ===看来 Unihan_Variants.txt 很不靠谱！


    入人曰日
    入5165人4eba曰66f0日65e5
    ===
    入->[不存在]
    曰->[不存在]
    日->[不存在]
    ===
    人->人亻  #偏旁 也算 字？
    U+4EBA	kSemanticVariant	U+4EBB<kMatthews
    U+4EBB	kSemanticVariant	U+4EBA<kMatthews
    ===入人曰日 非 kSpoofingVariant，说明什么？

凐51d0湮6e6e
U+51D0	kSpoofingVariant	U+6E6E
U+6E6E	kSpoofingVariant	U+51D0
===
凐yīn寒冷的样子。
笔顺：丶一一丨乛丨丨一一丨一
===
湮yān
    埋没：湮灭。湮没。
    淤塞，堵塞：“昔者禹之湮洪水，决江河。”
湮yīn同“洇”。
笔顺：丶丶一一丨乛丨丨一一丨一
===
洇yīn墨水着纸向周围散开：这种纸写字不洇。
===
===两者 确实 不是 同一个字


凑51d1湊6e4a
U+51D1	kSemanticVariant	U+6E4A<kMatthews,kMeyerWempe
U+51D1	kSpoofingVariant	U+6E4A
U+51D1	kTraditionalVariant	U+6E4A
U+6E4A	kSemanticVariant	U+51D1<kMatthews,kMeyerWempe
U+6E4A	kSimplifiedVariant	U+51D1
U+6E4A	kSpoofingVariant	U+51D1
===
凑còu
    聚合：凑钱。凑数。凑合。拼凑。紧凑。
    接近：凑近。往前凑。
    碰，赶，趁：凑巧（碰巧）。
笔顺：丶一一一一丿丶一一丿丶
===
湊còu同“凑”。
笔顺：丶丶一一一一丿丶一一丿丶
===
===两者 竟是 同一个字！？？？
===     身兼3种变体，所以，kSpoofingVariant到底是啥？『髪/髮』不是，『凑/湊』是？？？

view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__Unihan/Unihan_Variants.txt
    view  ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/unihan/parsed_result__of__Unihan_Variants_txt__of_ver13_0.py
    view  ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/unihan/reformat__Unihan_Variants_txt.py

view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropList.txt
    view ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/ucd/parse__PropList_txt.py
    view ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/ucd/parsed_result__of__PropList_txt__of_ver13_0.py

view ../../python3_src/seed/helper/IConfig4load_versioned_repr_txt_file.py
    view ../../python3_src/seed/types/view/RecurView.py
    view ../../python3_src/seed/func_tools/fmapT/TypeBasedFMapT__literal_rebuild.py






[[
发现 非对称！！
k0:㒚-349A->穩-7A69<s1,s10
k0:穩-7A69->㒚-349A<s10
    没有 s1!!!
k2:伷-4F37->胄-80C4<s12
k2:咮-54AE->胄-80C4<s12
k2:胄-80C4->伷-4F37<s12
    # 没有 胄-80C4->咮-54AE

发现 非顺序排列:
k0:㒋-348B->廝-5EDD<s10 厮-53AE<s10
    # 5EDD > 53AE
k2:折-6298->翼-7FFC<s1 拃-62C3<s1
    # 7FFC > 62C3
]]

[[unicode-13.0 版 Unihan_Variants.txt 的 重排版 实例 如下:
py -m nn_ns.CJK.unicode.ucd_unihan.unihan.reformat__Unihan_Variants_txt -i /storage/emulated/0/0my_files/unzip/e_book/unicode_13__Unihan/Unihan_Variants.txt -o $my_tmp/out4py/cjk.reformat__Unihan_Variants_txt.ver13_0.txt
view  ../../python3_src/nn_ns/CJK/unicode/ucd_unihan/unihan/reformat__Unihan_Variants_txt.py
view /storage/emulated/0/0my_files/tmp/out4py/cjk.reformat__Unihan_Variants_txt.ver13_0.txt
也没节省多少空间！
    du -h /storage/emulated/0/0my_files/tmp/out4py/cjk.reformat__Unihan_Variants_txt.ver13_0.txt
    404K
    du -h /storage/emulated/0/0my_files/unzip/e_book/unicode_13__Unihan/Unihan_Variants.txt
    604K
#{
#k0=kSemanticVariant
#k1=kSimplifiedVariant
#k2=kSpecializedSemanticVariant
#k3=kSpoofingVariant
#k4=kTraditionalVariant
#k5=kZVariant
#}
...
#k0=kSemanticVariant
#{
...
k0:一-4E00->弌-5F0C<s7,s10,s12 壹-58F9<s7,s10,s12
k0:七-4E03->柒-67D2<s7,s10,s12
k0:万-4E07->卍-534D<s1 萬-842C<s7,s10,s12
k0:三-4E09->叁-53C1<s7,s10,s12
k0:与-4E0E->與-8207<s10,s12
k0:丐-4E10->匃-5303<s10
... # 同义字？？
#}
...
#k2=kSpecializedSemanticVariant
#{
...
k2:一-4E00->壹-58F9
k2:七-4E03->柒-67D2<s1
k2:三-4E09->叁-53C1<s1
...
k2:二-4E8C->貳-8CB3
...
k2:你-4F60->妳-59B3 您-60A8 祢-7962 袮-88AE
... #某些 义项/用途/使用场景 等同？？专用字？
#}
...
#k3=kSpoofingVariant
#{
...
k3:䚶-46B6->訞-8A1E
k3:䱅-4C45->鮇-9B87
...
k3:妹-59B9->妺-59BA
k3:妺-59BA->妹-59B9
k3:幐-5E50->㬺-3B3A
k3:抹-62B9->抺-62BA
k3:抺-62BA->抹-62B9
...#但无『天夭』，无『未末』，所以是 不常见的 形近字(非-变体)？？
#}
...
#k5=kZVariant
#{
...
k5:䱍-4C4D->䱎-4C4E
k5:䱎-4C4E->䱍-4C4D
k5:併-4F75->倂-5002
k5:倂-5002->併-4F75
k5:値-5024->值-503C
k5:值-503C->値-5024
k5:吳-5433->吴-5434 呉-5449
k5:吴-5434->吳-5433 呉-5449
k5:呉-5449->吳-5433 吴-5434
k5:塡-5861->填-586B
k5:填-586B->塡-5861
... #应该是 异体字。
#}

]]






    跥跺
    U+8DE5  kSemanticVariant    U+8DFA<kMatthews
    U+8DE5  kZVariant   U+8DFA
    U+8DFA  kSemanticVariant    U+8DE5<kMatthews
    U+8DFA  kZVariant   U+8DE5


    䱍䱎
    U+4C4D  kZVariant   U+4C4E
    U+4C4E  kZVariant   U+4C4D

    䱍䱎 𬶊𱇥
    U+4C4D  kSimplifiedVariant  U+2CD8A
    U+4C4E  kSimplifiedVariant  U+311E5
    U+2CD8A kTraditionalVariant U+4C4D
    U+311E5 kTraditionalVariant U+4C4E




    䄍蜡蠟
    U+410D  kSemanticVariant    U+8721<kMeyerWempe
    U+410D  kSpecializedSemanticVariant U+8721
    U+8721  kSemanticVariant    U+410D<kMeyerWempe U+881F<kLau,kMatthews
    U+8721  kSimplifiedVariant  U+8721
    U+8721  kSpecializedSemanticVariant U+410D U+881F<kFenn
    U+8721  kTraditionalVariant U+8721 U+881F
    U+881F  kSemanticVariant    U+8721<kLau,kMatthews
    U+881F  kSimplifiedVariant  U+8721
    U+881F  kSpecializedSemanticVariant U+8721<kFenn


    䘑脈脉衇
    U+4611  kSemanticVariant    U+8109<kMeyerWempe
    U+8108  kSemanticVariant    U+8847<kLau,kMatthews U+8109<kLau,kMatthews,kMeyerWempe
    U+8108  kSimplifiedVariant  U+8109
    U+8108  kSpecializedSemanticVariant U+8847<kFenn
    U+8109  kSemanticVariant    U+4611<kMeyerWempe U+8108<kLau,kMatthews,kMeyerWempe U+8847<kLau,kMatthews
    U+8109  kSpecializedSemanticVariant U+8847<kFenn
    U+8109  kTraditionalVariant U+8108
    U+8847  kSemanticVariant    U+8108<kLau,kMatthews U+8109<kLau,kMatthews
    U+8847  kSpecializedSemanticVariant U+8108<kFenn U+8109<kFenn

    ]]


]]

]]]


[[[tree unicode_13__UCD

mkdir $my_tmp/out4tree/
cd /storage/emulated/0/0my_files/unzip/e_book/
tree unicode_13__UCD/ > $my_tmp/out4tree/unicode_13__UCD.tree.txt
view  /sdcard/0my_files/tmp/out4tree/unicode_13__UCD.tree.txt
[[
unicode_13__UCD/
├── ArabicShaping.txt
├── BidiBrackets.txt
├── BidiCharacterTest.txt
├── BidiMirroring.txt
├── BidiTest.txt
├── Blocks.txt
├── CJKRadicals.txt
├── CaseFolding.txt
├── CompositionExclusions.txt
├── DerivedAge.txt
├── DerivedCoreProperties.txt
├── DerivedNormalizationProps.txt
├── EastAsianWidth.txt
├── EmojiSources.txt
├── EquivalentUnifiedIdeograph.txt
├── HangulSyllableType.txt
├── Index.txt
├── IndicPositionalCategory.txt
├── IndicSyllabicCategory.txt
├── Jamo.txt
├── LineBreak.txt
├── NameAliases.txt
├── NamedSequences.txt
├── NamedSequencesProv.txt
├── NamesList.html
├── NamesList.txt
├── NormalizationCorrections.txt
├── NormalizationTest.txt
├── NushuSources.txt
├── PropList.txt
├── PropertyAliases.txt
├── PropertyValueAliases.txt
├── ReadMe.txt
├── ScriptExtensions.txt
├── Scripts.txt
├── SpecialCasing.txt
├── StandardizedVariants.txt
├── TangutSources.txt
├── USourceData.txt
├── USourceGlyphs.pdf
├── USourceRSChart.pdf
├── UnicodeData.txt
├── VerticalOrientation.txt
├── auxiliary
│   ├── GraphemeBreakProperty.txt
│   ├── GraphemeBreakTest.html
│   ├── GraphemeBreakTest.txt
│   ├── LineBreakTest.html
│   ├── LineBreakTest.txt
│   ├── SentenceBreakProperty.txt
│   ├── SentenceBreakTest.html
│   ├── SentenceBreakTest.txt
│   ├── WordBreakProperty.txt
│   ├── WordBreakTest.html
│   └── WordBreakTest.txt
├── emoji
│   ├── ReadMe.txt
│   ├── emoji-data.txt
│   └── emoji-variation-sequences.txt
└── extracted
    ├── DerivedBidiClass.txt
    ├── DerivedBinaryProperties.txt
    ├── DerivedCombiningClass.txt
    ├── DerivedDecompositionType.txt
    ├── DerivedEastAsianWidth.txt
    ├── DerivedGeneralCategory.txt
    ├── DerivedJoiningGroup.txt
    ├── DerivedJoiningType.txt
    ├── DerivedLineBreak.txt
    ├── DerivedName.txt
    ├── DerivedNumericType.txt
    └── DerivedNumericValues.txt

3 directories, 69 files
]]

添加注释:#见下面 感兴趣的、详细信息
[[
unicode_13__UCD/
├── ArabicShaping.txt
    #阿拉伯语相关的
├── BidiBrackets.txt
    #括号/引号【】《》『』
├── BidiCharacterTest.txt
    #测试用的数据
├── BidiMirroring.txt
    #镜像字形
    #3类:精确镜像、[BEST FIT]、不存在镜像字符但系统须提供镜像字形
├── BidiTest.txt
    #测试用的数据
├── Blocks.txt
    #编码空间区域命名
├── CJKRadicals.txt
    #汉字简繁部首及对应汉字
├── CaseFolding.txt
    #大小写规范化
├── CompositionExclusions.txt
    #字符列表#起某种辅助作用
    #见-完全导出的结果: Full_Composition_Exclusion in DerivedNormalizationProps.txt
├── DerivedAge.txt
    #编码点被赋值其时的Unicode版本
    #从 预留区 被赋值 为 字符/非字符/私用
├── DerivedCoreProperties.txt
    #派生的核心属性
├── DerivedNormalizationProps.txt
    #派生的规范属性
    #一堆过气弃用属性
├── EastAsianWidth.txt
    #东亚字符宽度种类
    #"A", "F", "H", "N", "Na", "W"
├── EmojiSources.txt
    #表情符号来源于哪些手机商字符集的哪些编码点？日本Shift-JIS中手机带来的符号
├── EquivalentUnifiedIdeograph.txt
    #偏旁部首笔画的近似等价的汉字
    #[1..] -> [0..1] #即：主表 多对一，没有近似等价汉字的 则 列在 最后
├── HangulSyllableType.txt
    #韩文音节类型
    #对 韩文字母 进行归类，大概是：声母/元音字母/尾音字母/声母元音字母/声母元音尾音字母
├── Index.txt
    #索引？似乎是 名/别名 映射到 字符 或 编码区首字符
├── IndicPositionalCategory.txt
    #印度语相关的
├── IndicSyllabicCategory.txt
    #印度语相关的
├── Jamo.txt
    #定义韩文音节字母的简称(ASCII)
├── LineBreak.txt
    #辅助属性，用于某个规范里定义的算法
├── NameAliases.txt
    #字符的别名(多个，并且 标注:更正/简称/常见名/...)
├── NamedSequences.txt
    # 已命名的组合成标志符号的字符串
    # 比如：手机井号键标志-->井号+外接圆
├── NamedSequencesProv.txt
    # 暂定部分NamedSequences-provisional
├── NamesList.html
├── NamesList.txt
    #字符的正式名称以及部分别名
    #仅作资讯参考用，供人阅读，不应当用程序解析提取信息！
├── NormalizationCorrections.txt
    #小小的更正表
├── NormalizationTest.txt
    #测试用的数据
├── NushuSources.txt
    # 某编码区字符的来源
    # 不知道是啥
    1B170..1B2FF; Nushu
├── PropList.txt
    #各个属性名的拥有者字符列表
    # 属性名 -> [编码区]
    # 全都是 真值属性！
    #   列出 即为 Yes!!!
├── PropertyAliases.txt
    #属性名的别名
    #第一个是 短名/简称/花名，第二个是 长名/正式名，后续其他别名
├── PropertyValueAliases.txt
    #各个属性的属性值的别名
    #第一个是 属性名的短名，第二个是 属性值的短名/简称/花名，第三个是 属性值的长名/正式名，后续其他属性值的别名
    #例外:Canonical_Combining_Class 在 属性名的短名 之后 多插入了个 整数(似乎 唯一)
├── ReadMe.txt
├── ScriptExtensions.txt
    #字符到所有使用它的手写体的映射
    #char.Script_Extensions :: {语言名}#集合<手写体名>
├── Scripts.txt
    #字符到它的最主要手写体的映射
    #   至少有3个特殊值: Unknown/Common/Inherited
├── SpecialCasing.txt
    #长度增加或上下文敏感的大小写转换
├── StandardizedVariants.txt
    #变体转义序列
    #俩字符: 本原字符+变体选择符(fe0[0-2]|180[b-d])
    #不含 ideographic variation sequences(Unihan)、emoji-variation-sequences.txt
├── TangutSources.txt
    # 某编码区字符的来源
    # 西夏文？
    17000..187FF; Tangut
    18800..18AFF; Tangut Components
    18D00..18D8F; Tangut Supplement
├── USourceData.txt
    #汉字U源(UTC/UCI/UK)的数据
    #U源编码点;Unicode编码状态;Unicode编码点;?奇怪好像不是:部首序号-偏旁笔画数?;虚拟康熙字典位置;可选IDS分解序列;来源;注释
├── USourceGlyphs.pdf
    #U来源 汉字字形
├── USourceRSChart.pdf
    #U来源 汉字 的 部首偏旁笔画数索引
    #表一 列出 1~17笔 的 所有214个 部首，并 一一编号
    #表二 部首 依编号排序，下列 所属汉字 按 偏旁 的 笔画数 归类，并 一一编号。
├── UnicodeData.txt
    #并无注释
    #？似乎是自动生成的？
    #见下面./extracted/... 各自说明自己派生自哪个field
├── VerticalOrientation.txt
    #竖排字形与横排字形的关系
    #反正 汉字 不变 (U-Upright)
├── auxiliary
│   ├── GraphemeBreakProperty.txt
        #字素相关，没多少东西，应该不重要
        #比如：音节分解类型...
│   ├── GraphemeBreakTest.html
│   ├── GraphemeBreakTest.txt
│   ├── LineBreakTest.html
│   ├── LineBreakTest.txt
│   ├── SentenceBreakProperty.txt
        #诸如：换行，分隔，空格，大写，小写 等等
│   ├── SentenceBreakTest.html
│   ├── SentenceBreakTest.txt
│   ├── WordBreakProperty.txt
        #诸如：引号，中间字母，中间数字 等等
│   ├── WordBreakTest.html
│   └── WordBreakTest.txt
├── emoji
│   ├── ReadMe.txt
│   ├── emoji-data.txt
        #6个表情符号相关的真值属性
│   └── emoji-variation-sequences.txt
        #表情符号的变体转义序列
        #俩字符: 本原字符+变体选择符(fe0[e-f])
        # FE0E-text style
        # FE0F-emoji style
└── extracted
    #以下 皆 先按 属性值 归类，同属性值内部再按 编码区 排序
    #   例外: DerivedName.txt 并非如此，而是 全局直接按 编码区 排序
    #   边缘: DerivedBinaryProperties 也算，列出来 就是，若有多个属性名，则 各属性名 各排各的，多个真值属性 与 单属性名多属性值 相比，区别 在于 前者 各聚集地 编码区 交叠，而 后者 互斥。
    #
    #0-based field
    #
    ├── DerivedBidiClass.txt
        #双向
        #基本都是 L (从左向右)，不少1属性值才1字符，多一点的10个字符以下...
        # Bidi_Class
        〪〪〪# <<==UCD::UnicodeData.txt::field_4
    ├── DerivedBinaryProperties.txt
        #只有1个属性:Bidi_Mirrored，545字符
        #镜像
        # Bidi_Mirrored
        〪〪〪# <<==UCD::UnicodeData.txt::field_9
    ├── DerivedCombiningClass.txt
        #组合
        # 诸如：交叠，在上方，在右下方，在下方两次...
        # Canonical_Combining_Class
        〪〪〪# <<==UCD::UnicodeData.txt::field_3
    ├── DerivedDecompositionType.txt
        #分解
        # 诸如：带圆圈的，带方圈的，上角标...
        # Decomposition_Type
        〪〪〪# <<==UCD::UnicodeData.txt::field_5
    ├── DerivedEastAsianWidth.txt
        #宽度
        # 诸如：中立，歧义，全角，半角，宽的，窄的
        #按 属性值 归类
        # default=Neutral (N)
        # East_Asian_Width
        〪〪〪# <<==UCD::EastAsianWidth.txt::field_1
        〪〪〪# xxx没有对应的<-->UCD::UnicodeData.txt::field_?
    ├── DerivedGeneralCategory.txt
        #分类
        #按 属性值 归类
        # General_Category
        〪〪〪# <-->UCD::UnicodeData.txt::field_2
    ├── DerivedJoiningGroup.txt
        #阿拉伯语相关的
        # Joining_Group
        〪〪〪# <<==UCD::ArabicShaping.txt::field_3
    ├── DerivedJoiningType.txt
        #阿拉伯语相关的
        # Joining_Type
        〪〪〪# <<==UCD::ArabicShaping.txt::描述
    ├── DerivedLineBreak.txt
        # Line_Break
        〪〪〪# <<==无说明
        〪〪〪# 并非提取自 UCD::UnicodeData.txt
        #   因 U+0028.Line_Break=Open_Punctuation(OP)
        #   而 OP不在『0028;LEFT PARENTHESIS;Ps;0;ON;;;;;Y;OPENING PARENTHESIS;;;;』中
    ├── DerivedName.txt
        # Name
        〪〪〪# <<== 来源有多个
        # 行格式: 编码点/编码区 ; 正式名的模版
        # 正式名 := 正式名.replace('*', 补零至长度为四或六(hex(编码点).upper()))
    ├── DerivedNumericType.txt
        # Numeric_Type
        〪〪〪# <<== 来源有多个
        #
        # Decimal, Digit, Numeric, None
        # 如何区别这些属性值？
        #   见下面 推测
    └── DerivedNumericValues.txt
        # 诸如：-1/2，万亿(兆)，...
        # Numeric_Value
        〪〪〪# <<== 来源有多个
        #
        #按 数值大小 归类 排序
        #格式: 编码点; 浮点数; ; 分数
        #  浮点数 当真 毫无意义！

3 directories, 69 files
]]

感兴趣的
[[
├── Blocks.txt
    # 搜索编码区的区名？CJK/Ideographic/Radicals/Strokes/Bopomofo
    # 但有很多 未赋值 字符
    #   检查 字符的正式名？
├── ScriptExtensions.txt
    # Set 中文相关字符 #<<== [Han <- char.Script_Extensions]
├── Scripts.txt
    # Set 中文相关字符 #<<== [Han == char.Script]

├── PropertyAliases.txt
    # (Map 属性任意名 属性花名, Map 属性花名 属性正式名)
├── PropertyValueAliases.txt
    # Map 属性正式名 (Map 属性值任意名 属性值花名, Map 属性值花名 属性值正式名)
├── PropList.txt
    # Map 真值属性的正式名 [编码区]
    #   哪些编码区 赋值 Yes
    #   比如：真值属性:Unified_Ideograph
    #   例外：真值属性:Bidi_Mirrored@DerivedBinaryProperties.txt
    #   view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropList.txt
    #   view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropertyValueAliases.txt

├── EastAsianWidth.txt
        #
        # 可用以下2文件 实现: __THIS__.py -i east_asian_width category
    ├── DerivedEastAsianWidth.txt
    ├── DerivedGeneralCategory.txt
        # Map 属性值 [编码区]
        # 或<==> [(编码区, 属性值)]

├── CJKRadicals.txt
├── EquivalentUnifiedIdeograph.txt
    #Map 偏旁部首 (Maybe 笔画的近似等价的汉字)
    #或<==> (Set 偏旁部首, Map 笔画的近似等价的汉字 Set 偏旁部首)


├── BidiBrackets.txt
    # (Map 起字符 讫字符, Map 讫字符 起字符)
├── BidiMirroring.txt
    # (Map 字符 镜像字符, Map 字符 近似镜像字符)

├── NamedSequences.txt
    #组合！
├── StandardizedVariants.txt
    #看看有无汉字变体序列化


    ├── DerivedNumericType.txt
    └── DerivedNumericValues.txt
        #Map 字符 有理数 #正负分数
        #或 Map 字符 (整数分子, 正整数分母)
]]

详细信息
[[
├── BidiBrackets.txt
    #括号【】《》『』
    #gc=Ps/Pe 不包含 Pi/Pf #py::unicodedata::category
    #且bc=ON #py::unicodedata::bidirectional
    #且Bidi_Mirrored=Y #py::unicodedata::mirrored=1
    #且...#镜像字符...
    ====
    py -m nn_ns.app.char2name  【】《》『』
    ====common
    ,'category': Ps/Pe
        #Punctuation open/close
    ,'east_asian_width': 'W'
    ,'mirrored': 1
    ,'bidirectional': 'ON'
    ====diff
    ,'name': 'LEFT/RIGHT BLACK LENTICULAR BRACKET'
        【】3010..3011
    ,'name': 'LEFT/RIGHT DOUBLE ANGLE BRACKET'
        《》300a..300b
    ,'name': 'LEFT/RIGHT WHITE CORNER BRACKET'
        『』300e..300f
    ====

├── CJKRadicals.txt
    #汉字简繁部首及对应汉字
    # 2F00..2FDF; Kangxi Radicals
    # 2E80..2EFF; CJK Radicals Supplement
    # vim: i^v u hhhh
    1; 2F00; 4E00
    2; 2F01; 4E28
    ...
    ...
    90; 2F59; 723F
        #⽙/爿:
        #部首/对应汉字
        #不带 单引号 的是 Kangxi Radicals
        #这是 主次序
        # 繁体部首/康熙字典
    90'; 2EA6; 4E2C
        #⺦/丬:
        # 带单引号 的是 CJK Radicals Supplement
        # 简体部首
        # 这是 附加的，对应于 繁体部首
    120; 2F77; 7CF8
        #⽷/糸:si
    120'; 2EB0; 7E9F
        #⺰/纟:si
        ??糹7CF9
    121; 2F78; 7F36
        #⽸
    ...
    ...
    214; 2FD5; 9FA0
    # EOF

├── CaseFolding.txt
    #大小写规范化
    #C/S/F/T
    #C类/common 的 规范化 是 通用的
    #S类/simple 虽然 也是 单字符变换，但似乎是 输出的字符 属于F类
    #F类/full 输出 字符串/长度增加
    #T类/土耳其？ 特定语言 不用管

├── DerivedCoreProperties.txt
    #派生的核心属性
    ====
    #数学/字母(含汉字)
    #可作标识首字母ID_Start/可作标识后续字母ID_Continue
    #NFKx不变的可作标识首字母XID_Start/NFKx不变的可作标识后续字母XID_Continue
    #默认可忽略的
    #小写/大写/带大小写的Cased/大小写可忽略/小写化会改变/大写化会改变/首字母大写化会改变/规范值的大小写规范化会改变/大小写规范化会改变/
    #字素！#图形字符？/记号/标志？Grapheme_Base/Grapheme_Extend/Grapheme_Link(deprecated)
    #

├── PropList.txt
[[list property_name
py -m nn_ns.CJK.unicode.ucd_unihan.ucd.parse__PropList_txt   -i /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/PropList.txt  --show_property_names_only

ASCII_Hex_Digit
Bidi_Control
Dash
Deprecated
Diacritic
Extender
Hex_Digit
Hyphen
IDS_Binary_Operator
IDS_Trinary_Operator
Ideographic
Join_Control
Logical_Order_Exception
Noncharacter_Code_Point
Other_Alphabetic
Other_Default_Ignorable_Code_Point
Other_Grapheme_Extend
Other_ID_Continue
Other_ID_Start
Other_Lowercase
Other_Math
Other_Uppercase
Pattern_Syntax
Pattern_White_Space
Prepended_Concatenation_Mark
Quotation_Mark
Radical
Regional_Indicator
Sentence_Terminal
Soft_Dotted
Terminal_Punctuation
Unified_Ideograph
Variation_Selector
White_Space

]]
感兴趣的:
    IDS_Binary_Operator
    IDS_Trinary_Operator
    Ideographic
    Radical
    Sentence_Terminal
    Terminal_Punctuation
    Unified_Ideograph
    White_Space


├── EastAsianWidth.txt
    #东亚字符宽度种类
    #"A", "F", "H", "N", "Na", "W"
    ====
    #见下面:UCD::PropertyValueAliases.txt
        A-Ambiguous
        F-Fullwidth
        H-Halfwidth
        N-Neutral #缺省值
        Na-Narrow
        W-Wide
    #见下面:UCD::EastAsianWidth.txt
    #见下面:UCD::DerivedEastAsianWidth-13.0.0.txt
    ====

├── NamedSequences.txt
    # 已命名的组合成标志符号的字符串
    # 比如：手机井号键标志-->井号+外接圆
    #
    # KEYCAP NUMBER SIGN;0023 FE0F 20E3
    # 0023 === '#'
    # FE0F <- (0xfe00, 0xfe10) gc=Mn
    #   Mn = Mark, nonspacing
    #️⃣ 20E3 <- (0x20e2, 0x20e5) gc=Me
    #   Me = Mark, enclosing
    #

├── Scripts.txt
    #字符到它的最主要手写体的映射
    #   至少有3个特殊值: Unknown/Common/Inherited
    #
    #  不知成立与否:???[[char.Script =!= Unknown/Common/Inherited]-->>[char.Script <- char.Script_Extensions]]???
    #  似乎成立: [[char.Script_Extensions not default][1==len char.Script_Extensions]-->>[char.Script==Common/Inherited]]
    ====对比
    char.Script default = Unknown (Zzzz)
    char.Script_Extensions default = char.Script
    --
    Scripts.txt vs ScriptExtensions.txt
        长名 vs 短名
            Han vs Hani #短名 反而更长
            Bopomofo vs Bopo

    ---Scripts.txt
    302A..302D    ; Inherited # Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
    0300..036F    ; Inherited # Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
    ---ScriptExtensions.txt
    302A..302D    ; Bopo Hani # Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
    0363..036F    ; Latn # Mn  [13] COMBINING LATIN SMALL LETTER A..COMBINING LATIN SMALL LETTER X
    0300..0362 #无显式定义

    ---Scripts.txt
    3006          ; Common # Lo       IDEOGRAPHIC CLOSING MARK
    1CF7          ; Common # Mc       VEDIC SIGN ATIKRAMA
    3001..3003    ; Common # Po   [3] IDEOGRAPHIC COMMA..DITTO MARK
    ---ScriptExtensions.txt
    3006          ; Hani # Lo       IDEOGRAPHIC CLOSING MARK
    1CF7          ; Beng # Mc       VEDIC SIGN ATIKRAMA
    3001..3002    ; Bopo Hang Hani Hira Kana Yiii # Po   [2] IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP
        #顿号,句号:、。
        #『，』:FF0C # Po         FULLWIDTH COMMA
        # 比 3003 多个 Yiii
    3003          ; Bopo Hang Hani Hira Kana # Po       DITTO MARK
        #『同前符号』:〃#重复书写？

    ---Scripts.txt
    02EA..02EB    ; Bopomofo # Sk   [2] MODIFIER LETTER YIN DEPARTING TONE MARK..MODIFIER LETTER YANG DEPARTING TONE MARK
    3105..312F    ; Bopomofo # Lo  [43] BOPOMOFO LETTER B..BOPOMOFO LETTER NN
    31A0..31BF    ; Bopomofo # Lo  [32] BOPOMOFO LETTER BU..BOPOMOFO LETTER AH
    ---ScriptExtensions.txt
    02EA..02EB #无显式定义
    3105..312F #无显式定义
    31A0..31BF #无显式定义
    ====

├── DerivedNumericType.txt
    # Numeric_Type
    〪〪〪# <<== 来源有多个
    #
    [[
    # Decimal, Digit, Numeric, None
    # 如何区别这些属性值？
    # Decimal: 用作10进制记数系统，我猜至少有2个要求:
    #   1. 编码区 10字符-连续-不多不少10个 #适合编程？
    #       离散的，像『零一二...』不行
    #   2. 10字符 相应的 数值是 [0..9]
    #       从1开始的，像多数的序号『⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽』不行
    #   查了一下，只有一处 符合这两点，但 却不是 Decimal，下标字符:
    #       2080..2089    ; Digit # No  [10] SUBSCRIPT ZERO..SUBSCRIPT NINE
    #
    # 相应的，Digit 只需 值<-[0..9]
    对比 同一编码区 分裂成 两部分:
        U+2468 vs U+2469
        Digit vs Numeric
        9 vs 10
    ---UnicodeData.txt
    2468;CIRCLED DIGIT NINE;No;0;ON;<circle> 0039;;9;9;N;;;;;
    2469;CIRCLED NUMBER TEN;No;0;ON;<circle> 0031 0030;;;10;N;;;;;
    ---DerivedNumericType.txt
    2460..2468    ; Digit # No   [9] CIRCLED DIGIT ONE..CIRCLED DIGIT NINE
    2469..2473    ; Numeric # No  [11] CIRCLED NUMBER TEN..CIRCLED NUMBER TWENTY
    ]]



]]

]]]

[[[UCD::Blocks.txt
源自于问题:
    有没有 UCD::各区域名称？即：{block_name:[first..last]}
    命名区域+按属性值次级分类
    比: 直接 全局按属性值分类 要更适合 人工手动操作。

view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/Blocks.txt
    for CJK:
        see:UCD::Scripts.txt::Han

# Blocks-13.0.0.txt
#
# Format:
# Start Code..End Code; Block Name
#
# Property: Block
# @missing: 0000..10FFFF; No_Block
#
4E00..9FFF; CJK Unified Ideographs
3400..4DBF; CJK Unified Ideographs Extension A
20000..2A6DF; CJK Unified Ideographs Extension B
2A700..2B73F; CJK Unified Ideographs Extension C
2B740..2B81F; CJK Unified Ideographs Extension D
2B820..2CEAF; CJK Unified Ideographs Extension E
2CEB0..2EBEF; CJK Unified Ideographs Extension F
30000..3134F; CJK Unified Ideographs Extension G


3000..303F; CJK Symbols and Punctuation
31C0..31EF; CJK Strokes
2F00..2FDF; Kangxi Radicals
2E80..2EFF; CJK Radicals Supplement
3100..312F; Bopomofo
31A0..31BF; Bopomofo Extended
4DC0..4DFF; Yijing Hexagram Symbols
2FF0..2FFF; Ideographic Description Characters
3200..32FF; Enclosed CJK Letters and Months
1F200..1F2FF; Enclosed Ideographic Supplement
??10080..100FF; Linear B Ideograms

16FE0..16FFF; Ideographic Symbols and Punctuation
    #16FF0..16FF1  ; Han # Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY

3300..33FF; CJK Compatibility
F900..FAFF; CJK Compatibility Ideographs
FE30..FE4F; CJK Compatibility Forms
2F800..2FA1F; CJK Compatibility Ideographs Supplement



D800..DB7F; High Surrogates
DB80..DBFF; High Private Use Surrogates
DC00..DFFF; Low Surrogates
E000..F8FF; Private Use Area

F0000..FFFFF; Supplementary Private Use Area-A
100000..10FFFF; Supplementary Private Use Area-B
# EOF


]]]


[[[UCD::Scripts.txt::Han
版本不同！见上面

汉字相关 手写字符 共94204 #9万

view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/Scripts.txt

# Scripts-13.0.0.txt

# Property: Script

#  All code points not explicitly listed for Script
#  have the value Unknown (Zzzz).

# @missing: 0000..10FFFF; Unknown

# ================================================


# ================================================

2E80..2E99    ; Han # So  [26] CJK RADICAL REPEAT..CJK RADICAL RAP
2E9B..2EF3    ; Han # So  [89] CJK RADICAL CHOKE..CJK RADICAL C-SIMPLIFIED TURTLE
2F00..2FD5    ; Han # So [214] KANGXI RADICAL ONE..KANGXI RADICAL FLUTE
3005          ; Han # Lm       IDEOGRAPHIC ITERATION MARK
3007          ; Han # Nl       IDEOGRAPHIC NUMBER ZERO
3021..3029    ; Han # Nl   [9] HANGZHOU NUMERAL ONE..HANGZHOU NUMERAL NINE
3038..303A    ; Han # Nl   [3] HANGZHOU NUMERAL TEN..HANGZHOU NUMERAL THIRTY
303B          ; Han # Lm       VERTICAL IDEOGRAPHIC ITERATION MARK
3400..4DBF    ; Han # Lo [6592] CJK UNIFIED IDEOGRAPH-3400..CJK UNIFIED IDEOGRAPH-4DBF
4E00..9FFC    ; Han # Lo [20989] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FFC
F900..FA6D    ; Han # Lo [366] CJK COMPATIBILITY IDEOGRAPH-F900..CJK COMPATIBILITY IDEOGRAPH-FA6D
FA70..FAD9    ; Han # Lo [106] CJK COMPATIBILITY IDEOGRAPH-FA70..CJK COMPATIBILITY IDEOGRAPH-FAD9
16FF0..16FF1  ; Han # Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY
20000..2A6DD  ; Han # Lo [42718] CJK UNIFIED IDEOGRAPH-20000..CJK UNIFIED IDEOGRAPH-2A6DD
2A700..2B734  ; Han # Lo [4149] CJK UNIFIED IDEOGRAPH-2A700..CJK UNIFIED IDEOGRAPH-2B734
2B740..2B81D  ; Han # Lo [222] CJK UNIFIED IDEOGRAPH-2B740..CJK UNIFIED IDEOGRAPH-2B81D
2B820..2CEA1  ; Han # Lo [5762] CJK UNIFIED IDEOGRAPH-2B820..CJK UNIFIED IDEOGRAPH-2CEA1
2CEB0..2EBE0  ; Han # Lo [7473] CJK UNIFIED IDEOGRAPH-2CEB0..CJK UNIFIED IDEOGRAPH-2EBE0
2F800..2FA1D  ; Han # Lo [542] CJK COMPATIBILITY IDEOGRAPH-2F800..CJK COMPATIBILITY IDEOGRAPH-2FA1D
30000..3134A  ; Han # Lo [4939] CJK UNIFIED IDEOGRAPH-30000..CJK UNIFIED IDEOGRAPH-3134A

# Total code points: 94204

# ================================================
]]]


[[[UCD::EastAsianWidth.txt
版本不同！见上面
view /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/EastAsianWidth.txt
[[
# EastAsianWidth-13.0.0.txt
# East_Asian_Width Property
# @missing: 0000..10FFFF; N
# The format is two fields separated by a semicolon.
# Field 0: Unicode code point value or range of code point values
# Field 1: East_Asian_Width property, consisting of one of the following values:
#         "A", "F", "H", "N", "Na", "W"
#  - All code points, assigned or unassigned, that are not listed
#      explicitly are given the value "N".
#  - The unassigned code points in the following blocks default to "W":
#         CJK Unified Ideographs Extension A: U+3400..U+4DBF
#         CJK Unified Ideographs:             U+4E00..U+9FFF
#         CJK Compatibility Ideographs:       U+F900..U+FAFF
#  - All undesignated code points in Planes 2 and 3, whether inside or
#      outside of allocated blocks, default to "W":
#         Plane 2:                            U+20000..U+2FFFD
#         Plane 3:                            U+30000..U+3FFFD
#
]]


grep<H>
    # only U+20A9 except (U+FF00–U+FFEF)
    #
grep<Na>
    # only U+2985 U+2986 except (U+0000–U+00EF)(U+27E6–U+27ED)
    #
grep<F>
    # only U+3000 except (U+FF00–U+FFEF)
    # 奇怪！这里 <128个，然而 搜出 83万多个！py._count__list_all_values_of_:('F', 836706)
    #
grep<>
    # only U+ except (U+–U+)
    #

grep ';F' /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/EastAsianWidth.txt > $my_tmp/out4grep/EastAsianWidth-F.txt
view  /sdcard/0my_files/tmp/out4grep/EastAsianWidth-F.txt
3000;F           # Zs         IDEOGRAPHIC SPACE
FF01..FF03;F     # Po     [3] FULLWIDTH EXCLAMATION MARK..FULLWIDTH NUMBER SIGN
FF04;F           # Sc         FULLWIDTH DOLLAR SIGN
FF05..FF07;F     # Po     [3] FULLWIDTH PERCENT SIGN..FULLWIDTH APOSTROPHE
FF08;F           # Ps         FULLWIDTH LEFT PARENTHESIS
FF09;F           # Pe         FULLWIDTH RIGHT PARENTHESIS
FF0A;F           # Po         FULLWIDTH ASTERISK
FF0B;F           # Sm         FULLWIDTH PLUS SIGN
FF0C;F           # Po         FULLWIDTH COMMA
FF0D;F           # Pd         FULLWIDTH HYPHEN-MINUS
FF0E..FF0F;F     # Po     [2] FULLWIDTH FULL STOP..FULLWIDTH SOLIDUS
FF10..FF19;F     # Nd    [10] FULLWIDTH DIGIT ZERO..FULLWIDTH DIGIT NINE
FF1A..FF1B;F     # Po     [2] FULLWIDTH COLON..FULLWIDTH SEMICOLON
FF1C..FF1E;F     # Sm     [3] FULLWIDTH LESS-THAN SIGN..FULLWIDTH GREATER-THAN SIGN
FF1F..FF20;F     # Po     [2] FULLWIDTH QUESTION MARK..FULLWIDTH COMMERCIAL AT
FF21..FF3A;F     # Lu    [26] FULLWIDTH LATIN CAPITAL LETTER A..FULLWIDTH LATIN CAPITAL LETTER Z
FF3B;F           # Ps         FULLWIDTH LEFT SQUARE BRACKET
FF3C;F           # Po         FULLWIDTH REVERSE SOLIDUS
FF3D;F           # Pe         FULLWIDTH RIGHT SQUARE BRACKET
FF3E;F           # Sk         FULLWIDTH CIRCUMFLEX ACCENT
FF3F;F           # Pc         FULLWIDTH LOW LINE
FF40;F           # Sk         FULLWIDTH GRAVE ACCENT
FF41..FF5A;F     # Ll    [26] FULLWIDTH LATIN SMALL LETTER A..FULLWIDTH LATIN SMALL LETTER Z
FF5B;F           # Ps         FULLWIDTH LEFT CURLY BRACKET
FF5C;F           # Sm         FULLWIDTH VERTICAL LINE
FF5D;F           # Pe         FULLWIDTH RIGHT CURLY BRACKET
FF5E;F           # Sm         FULLWIDTH TILDE
FF5F;F           # Ps         FULLWIDTH LEFT WHITE PARENTHESIS
FF60;F           # Pe         FULLWIDTH RIGHT WHITE PARENTHESIS
FFE0..FFE1;F     # Sc     [2] FULLWIDTH CENT SIGN..FULLWIDTH POUND SIGN
FFE2;F           # Sm         FULLWIDTH NOT SIGN
FFE3;F           # Sk         FULLWIDTH MACRON
FFE4;F           # So         FULLWIDTH BROKEN BAR
FFE5..FFE6;F     # Sc     [2] FULLWIDTH YEN SIGN..FULLWIDTH WON SIGN



grep ';Na' /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/EastAsianWidth.txt
0020;Na          # Zs         SPACE
0021..0023;Na    # Po     [3] EXCLAMATION MARK..NUMBER SIGN
0024;Na          # Sc         DOLLAR SIGN
0025..0027;Na    # Po     [3] PERCENT SIGN..APOSTROPHE
0028;Na          # Ps         LEFT PARENTHESIS
0029;Na          # Pe         RIGHT PARENTHESIS
002A;Na          # Po         ASTERISK
002B;Na          # Sm         PLUS SIGN
002C;Na          # Po         COMMA
002D;Na          # Pd         HYPHEN-MINUS
002E..002F;Na    # Po     [2] FULL STOP..SOLIDUS
0030..0039;Na    # Nd    [10] DIGIT ZERO..DIGIT NINE
003A..003B;Na    # Po     [2] COLON..SEMICOLON
003C..003E;Na    # Sm     [3] LESS-THAN SIGN..GREATER-THAN SIGN
003F..0040;Na    # Po     [2] QUESTION MARK..COMMERCIAL AT
0041..005A;Na    # Lu    [26] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER Z
005B;Na          # Ps         LEFT SQUARE BRACKET
005C;Na          # Po         REVERSE SOLIDUS
005D;Na          # Pe         RIGHT SQUARE BRACKET
005E;Na          # Sk         CIRCUMFLEX ACCENT
005F;Na          # Pc         LOW LINE
0060;Na          # Sk         GRAVE ACCENT
0061..007A;Na    # Ll    [26] LATIN SMALL LETTER A..LATIN SMALL LETTER Z
007B;Na          # Ps         LEFT CURLY BRACKET
007C;Na          # Sm         VERTICAL LINE
007D;Na          # Pe         RIGHT CURLY BRACKET
007E;Na          # Sm         TILDE
00A2..00A3;Na    # Sc     [2] CENT SIGN..POUND SIGN
00A5;Na          # Sc         YEN SIGN
00A6;Na          # So         BROKEN BAR
00AC;Na          # Sm         NOT SIGN
00AF;Na          # Sk         MACRON
27E6;Na          # Ps         MATHEMATICAL LEFT WHITE SQUARE BRACKET
27E7;Na          # Pe         MATHEMATICAL RIGHT WHITE SQUARE BRACKET
27E8;Na          # Ps         MATHEMATICAL LEFT ANGLE BRACKET
27E9;Na          # Pe         MATHEMATICAL RIGHT ANGLE BRACKET
27EA;Na          # Ps         MATHEMATICAL LEFT DOUBLE ANGLE BRACKET
27EB;Na          # Pe         MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET
27EC;Na          # Ps         MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET
27ED;Na          # Pe         MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET
2985;Na          # Ps         LEFT WHITE PARENTHESIS
2986;Na          # Pe         RIGHT WHITE PARENTHESIS


grep ';H' /storage/emulated/0/0my_files/unzip/e_book/unicode_13__UCD/EastAsianWidth.txt
20A9;H           # Sc         WON SIGN
FF61;H           # Po         HALFWIDTH IDEOGRAPHIC FULL STOP
FF62;H           # Ps         HALFWIDTH LEFT CORNER BRACKET
FF63;H           # Pe         HALFWIDTH RIGHT CORNER BRACKET
FF64..FF65;H     # Po     [2] HALFWIDTH IDEOGRAPHIC COMMA..HALFWIDTH KATAKANA MIDDLE DOT
FF66..FF6F;H     # Lo    [10] HALFWIDTH KATAKANA LETTER WO..HALFWIDTH KATAKANA LETTER SMALL TU
FF70;H           # Lm         HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK
FF71..FF9D;H     # Lo    [45] HALFWIDTH KATAKANA LETTER A..HALFWIDTH KATAKANA LETTER N
FF9E..FF9F;H     # Lm     [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
FFA0..FFBE;H     # Lo    [31] HALFWIDTH HANGUL FILLER..HALFWIDTH HANGUL LETTER HIEUH
FFC2..FFC7;H     # Lo     [6] HALFWIDTH HANGUL LETTER A..HALFWIDTH HANGUL LETTER E
FFCA..FFCF;H     # Lo     [6] HALFWIDTH HANGUL LETTER YEO..HALFWIDTH HANGUL LETTER OE
FFD2..FFD7;H     # Lo     [6] HALFWIDTH HANGUL LETTER YO..HALFWIDTH HANGUL LETTER YU
FFDA..FFDC;H     # Lo     [3] HALFWIDTH HANGUL LETTER EU..HALFWIDTH HANGUL LETTER I
FFE8;H           # So         HALFWIDTH FORMS LIGHT VERTICAL
FFE9..FFEC;H     # Sm     [4] HALFWIDTH LEFTWARDS ARROW..HALFWIDTH DOWNWARDS ARROW
FFED..FFEE;H     # So     [2] HALFWIDTH BLACK SQUARE..HALFWIDTH WHITE CIRCLE
]]]



#]]]]]'''
#__doc__:end

import unicodedata as U
from seed.data_funcs.rngs import StackStyleSimpleIntSet
from collections import defaultdict
from seed.tiny_.HexReprInt import HexReprInt
from seed.tiny import HexReprInt

def _key__list_all_values_of_(f, /):
    s = set()
    for ch in map(chr, range(0x11_00_00)):
        x = f(ch)
        s.add(x)
    return sorted(s)

def _count__list_all_values_of_(f, /):
    d = defaultdict(int)
    for ch in map(chr, range(0x11_00_00)):
        x = f(ch)
        d[x] += 1
    return sorted(d.items())

def int2HexReprInt(i, /):
    return HexReprInt(i)

r'''
class HexReprInt(int):
    __slots__ = ()
    def __repr__(sf, /):
        return hex(sf)
        i = int(sf)
        if i < 0:
            i = -i
            sign = '-'
        else:
            sign = ''
        hex(i).upper()
        return f'{sign}0x{i:X}'
#'''

def _convert_rngs(rngs, /):
    f = int2HexReprInt
    return [(f(a), f(b)) for a, b in rngs]

def _rngs__list_all_values_of_(f, /):
    d = defaultdict(StackStyleSimpleIntSet)
    for ch in map(chr, range(0x11_00_00)):
        x = f(ch)
        d[x].add(ord(ch))
    ps = sorted(d.items())
    ps = [(value4property, (len(stack), len(stack.rngs), _convert_rngs(stack.rngs))) for value4property, stack in ps]
    return ps
def _rng2prop__list_all_values_of_(f, /):
    ps = _rngs__list_all_values_of_(f)
    rng2prop = sorted((rng, value4property) for value4property, (num_chars, num_rngs, rngs) in ps for rng in rngs)
    assert len(rng2prop) == sum(num_rngs for value4property, (num_chars, num_rngs, rngs) in ps)
    assert len(rng2prop) == len(dict(rng2prop))
    assert all(end == begin for ((_, end), _), ((begin, _),_) in zip(rng2prop, rng2prop[1:]))
    assert rng2prop[0][0][0] == 0
    assert rng2prop[-1][0][1] == 0x11_00_00
    return (len(rng2prop), rng2prop)

class Globals:
    cases = ('key', 'count', 'rngs', 'rng2prop')
def list_all_values_of_(f, /, *, case):
    if not case in Globals.cases: raise ValueError(case)
    if case == 'key':
        h = _key__list_all_values_of_
    elif case == 'count':
        h = _count__list_all_values_of_
    elif case == 'rngs':
        h = _rngs__list_all_values_of_
    elif case == 'rng2prop':
        h = _rng2prop__list_all_values_of_
    else:
        raise ValueError(case)
    return h(f)

def show_all_values_of_(nm, /, *, fout=None, **kwargs4list_all_values_of_):
    f = getattr(U, nm)
    print(nm, file=fout)
    result = list_all_values_of_(f, **kwargs4list_all_values_of_)
    #print(len(result), file=fout)
    print(result, file=fout)

#category = U.category(ch)
#east_asian_width = U.east_asian_width(ch)
if 0:
    show_all_values_of_('category')
    ['Cc', 'Cf', 'Cn', 'Co', 'Cs', 'Ll', 'Lm', 'Lo', 'Lt', 'Lu', 'Mc', 'Me', 'Mn', 'Nd', 'Nl', 'No', 'Pc', 'Pd', 'Pe', 'Pf', 'Pi', 'Po', 'Ps', 'Sc', 'Sk', 'Sm', 'So', 'Zl', 'Zp', 'Zs']
if 0:
    show_all_values_of_('east_asian_width')
    ['A', 'F', 'H', 'N', 'Na', 'W']

def main(args=None, /):
    import argparse
    from seed.io.may_open import may_open_stdin, may_open_stdout

    property_names = sorted((U.__dict__))
    #print(property_names)
    ['UCD', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'bidirectional', 'category', 'combining', 'decimal', 'decomposition', 'digit', 'east_asian_width', 'is_normalized', 'lookup', 'mirrored', 'name', 'normalize', 'numeric', 'ucd_3_2_0', 'ucnhash_CAPI', 'unidata_version']

    property_names = sorted(dir(U))
    property_names = [nm for nm in property_names if callable(getattr(U, nm))]
    ['UCD', 'bidirectional', 'category', 'combining', 'decimal', 'decomposition', 'digit', 'east_asian_width', 'is_normalized', 'lookup', 'mirrored', 'name', 'normalize', 'numeric']
    #UCD: class
    #lookup/is_normalized/normalize
    bads = 'lookup/is_normalized/normalize'.split('/')
    property_names = sorted({*property_names} - {*bads})
    #help(U.UCD)
    #help(U.lookup)
        #lookup(name, /) Look up character by name.
    if 0:
        for nm in property_names:
            print(nm)
            print(help(getattr(U, nm)))

    parser = argparse.ArgumentParser(
        description='list all values of property of char'
        , epilog=fr'''
py::unicodedata.unidata_version = {U.unidata_version!r}

property names: {property_names}
#''' + r'''

$ py -m script.try_python.unicodedata.list_all_values_of_property -i east_asian_width category
    east_asian_width
    ['A', 'F', 'H', 'N', 'Na', 'W']
    category
    ['Cc', 'Cf', 'Cn', 'Co', 'Cs', 'Ll', 'Lm', 'Lo', 'Lt', 'Lu', 'Mc', 'Me', 'Mn', 'Nd', 'Nl', 'No', 'Pc', 'Pd', 'Pe', 'Pf', 'Pi', 'Po', 'Ps', 'Sc', 'Sk', 'Sm', 'So', 'Zl', 'Zp', 'Zs']

$ py -m script.try_python.unicodedata.list_all_values_of_property -c count -i east_asian_width category
east_asian_width
[('A', 138739), ('F', 836706), ('H', 123), ('N', 26925), ('Na', 111), ('W', 111508)]
category
[('Cc', 65), ('Cf', 161), ('Cn', 836602), ('Co', 137468), ('Cs', 2048), ('Ll', 2151), ('Lm', 259), ('Lo', 121414), ('Lt', 31), ('Lu', 1788), ('Mc', 429), ('Me', 13), ('Mn', 1826), ('Nd', 630), ('Nl', 236), ('No', 888), ('Pc', 10), ('Pd', 24), ('Pe', 73), ('Pf', 10), ('Pi', 12), ('Po', 588), ('Ps', 75), ('Sc', 62), ('Sk', 121), ('Sm', 948), ('So', 6161), ('Zl', 1), ('Zp', 1), ('Zs', 17)]

    #'''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-c', '--case', choices=Globals.cases
                        , default = Globals.cases[0]
                        , help='case for output control/format: key(default)-[value], count-[(value, count)]')
    parser.add_argument('-i', '--input', type=str, default=[], nargs='*'
                        , help='input property names: category, east_asian_width, ...')
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-e', '--encoding', type=str
                        , default='utf8'
                        , help='input/output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    encoding = args.encoding
    omode = 'wt' if args.force else 'xt'

    _names = args.input
    case = args.case

    may_ofname = args.output
    with may_open_stdout(may_ofname, omode, encoding=encoding) as fout:
        for nm in _names:
            show_all_values_of_(nm, fout=fout, case=case)
if __name__ == "__main__":
    main()



#-c rngs
#east_asian_width
[('A', (138739, 179, [
    (0xa1, 0xa2), (0xa4, 0xa5), (0xa7, 0xa9), (0xaa, 0xab), (0xad, 0xaf), (0xb0, 0xb5), (0xb6, 0xbb), (0xbc, 0xc0), (0xc6, 0xc7), (0xd0, 0xd1)
    , (0xd7, 0xd9), (0xde, 0xe2), (0xe6, 0xe7), (0xe8, 0xeb), (0xec, 0xee), (0xf0, 0xf1), (0xf2, 0xf4), (0xf7, 0xfb), (0xfc, 0xfd), (0xfe, 0xff)
    , (0x101, 0x102), (0x111, 0x112), (0x113, 0x114), (0x11b, 0x11c), (0x126, 0x128), (0x12b, 0x12c), (0x131, 0x134), (0x138, 0x139), (0x13f, 0x143), (0x144, 0x145)
    , (0x148, 0x14c), (0x14d, 0x14e), (0x152, 0x154), (0x166, 0x168), (0x16b, 0x16c), (0x1ce, 0x1cf), (0x1d0, 0x1d1), (0x1d2, 0x1d3), (0x1d4, 0x1d5), (0x1d6, 0x1d7)
    , (0x1d8, 0x1d9), (0x1da, 0x1db), (0x1dc, 0x1dd), (0x251, 0x252), (0x261, 0x262), (0x2c4, 0x2c5), (0x2c7, 0x2c8), (0x2c9, 0x2cc), (0x2cd, 0x2ce), (0x2d0, 0x2d1)
    , (0x2d8, 0x2dc), (0x2dd, 0x2de), (0x2df, 0x2e0), (0x300, 0x370), (0x391, 0x3a2), (0x3a3, 0x3aa), (0x3b1, 0x3c2), (0x3c3, 0x3ca), (0x401, 0x402), (0x410, 0x450)
    , (0x451, 0x452), (0x2010, 0x2011), (0x2013, 0x2017), (0x2018, 0x201a), (0x201c, 0x201e), (0x2020, 0x2023), (0x2024, 0x2028), (0x2030, 0x2031), (0x2032, 0x2034), (0x2035, 0x2036)
    , (0x203b, 0x203c), (0x203e, 0x203f), (0x2074, 0x2075), (0x207f, 0x2080), (0x2081, 0x2085), (0x20ac, 0x20ad), (0x2103, 0x2104), (0x2105, 0x2106), (0x2109, 0x210a), (0x2113, 0x2114)
    , (0x2116, 0x2117), (0x2121, 0x2123), (0x2126, 0x2127), (0x212b, 0x212c), (0x2153, 0x2155), (0x215b, 0x215f), (0x2160, 0x216c), (0x2170, 0x217a), (0x2189, 0x218a), (0x2190, 0x219a)
    , (0x21b8, 0x21ba), (0x21d2, 0x21d3), (0x21d4, 0x21d5), (0x21e7, 0x21e8), (0x2200, 0x2201), (0x2202, 0x2204), (0x2207, 0x2209), (0x220b, 0x220c), (0x220f, 0x2210), (0x2211, 0x2212)
    , (0x2215, 0x2216), (0x221a, 0x221b), (0x221d, 0x2221), (0x2223, 0x2224), (0x2225, 0x2226), (0x2227, 0x222d), (0x222e, 0x222f), (0x2234, 0x2238), (0x223c, 0x223e), (0x2248, 0x2249)
    , (0x224c, 0x224d), (0x2252, 0x2253), (0x2260, 0x2262), (0x2264, 0x2268), (0x226a, 0x226c), (0x226e, 0x2270), (0x2282, 0x2284), (0x2286, 0x2288), (0x2295, 0x2296), (0x2299, 0x229a)
    , (0x22a5, 0x22a6), (0x22bf, 0x22c0), (0x2312, 0x2313), (0x2460, 0x24ea), (0x24eb, 0x254c), (0x2550, 0x2574), (0x2580, 0x2590), (0x2592, 0x2596), (0x25a0, 0x25a2), (0x25a3, 0x25aa)
    , (0x25b2, 0x25b4), (0x25b6, 0x25b8), (0x25bc, 0x25be), (0x25c0, 0x25c2), (0x25c6, 0x25c9), (0x25cb, 0x25cc), (0x25ce, 0x25d2), (0x25e2, 0x25e6), (0x25ef, 0x25f0), (0x2605, 0x2607)
    , (0x2609, 0x260a), (0x260e, 0x2610), (0x261c, 0x261d), (0x261e, 0x261f), (0x2640, 0x2641), (0x2642, 0x2643), (0x2660, 0x2662), (0x2663, 0x2666), (0x2667, 0x266b), (0x266c, 0x266e)
    , (0x266f, 0x2670), (0x269e, 0x26a0), (0x26bf, 0x26c0), (0x26c6, 0x26ce), (0x26cf, 0x26d4), (0x26d5, 0x26e2), (0x26e3, 0x26e4), (0x26e8, 0x26ea), (0x26eb, 0x26f2), (0x26f4, 0x26f5)
    , (0x26f6, 0x26fa), (0x26fb, 0x26fd), (0x26fe, 0x2700), (0x273d, 0x273e), (0x2776, 0x2780), (0x2b56, 0x2b5a), (0x3248, 0x3250), (0xe000, 0xf900), (0xfe00, 0xfe10), (0xfffd, 0xfffe)
    , (0x1f100, 0x1f10b), (0x1f110, 0x1f12e), (0x1f130, 0x1f16a), (0x1f170, 0x1f18e), (0x1f18f, 0x1f191), (0x1f19b, 0x1f1ad), (0xe0100, 0xe01f0), (0xf0000, 0xffffe), (0x100000, 0x10fffe)
    ]))
, ('F', (836706, 665, [
    (0x378, 0x37a), (0x380, 0x384), (0x38b, 0x38c), (0x38d, 0x38e), (0x3a2, 0x3a3), (0x530, 0x531), (0x557, 0x559), (0x58b, 0x58d), (0x590, 0x591), (0x5c8, 0x5d0)
    , (0x5eb, 0x5ef), (0x5f5, 0x600), (0x61d, 0x61e), (0x70e, 0x70f), (0x74b, 0x74d), (0x7b2, 0x7c0), (0x7fb, 0x7fd), (0x82e, 0x830), (0x83f, 0x840), (0x85c, 0x85e)
    , (0x85f, 0x860), (0x86b, 0x8a0), (0x8b5, 0x8b6), (0x8be, 0x8d3), (0x984, 0x985), (0x98d, 0x98f), (0x991, 0x993), (0x9a9, 0x9aa), (0x9b1, 0x9b2), (0x9b3, 0x9b6)
    , (0x9ba, 0x9bc), (0x9c5, 0x9c7), (0x9c9, 0x9cb), (0x9cf, 0x9d7), (0x9d8, 0x9dc), (0x9de, 0x9df), (0x9e4, 0x9e6), (0x9ff, 0xa01), (0xa04, 0xa05), (0xa0b, 0xa0f)
    , (0xa11, 0xa13), (0xa29, 0xa2a), (0xa31, 0xa32), (0xa34, 0xa35), (0xa37, 0xa38), (0xa3a, 0xa3c), (0xa3d, 0xa3e), (0xa43, 0xa47), (0xa49, 0xa4b), (0xa4e, 0xa51)
    , (0xa52, 0xa59), (0xa5d, 0xa5e), (0xa5f, 0xa66), (0xa77, 0xa81), (0xa84, 0xa85), (0xa8e, 0xa8f), (0xa92, 0xa93), (0xaa9, 0xaaa), (0xab1, 0xab2), (0xab4, 0xab5)
    , (0xaba, 0xabc), (0xac6, 0xac7), (0xaca, 0xacb), (0xace, 0xad0), (0xad1, 0xae0), (0xae4, 0xae6), (0xaf2, 0xaf9), (0xb00, 0xb01), (0xb04, 0xb05), (0xb0d, 0xb0f)
    , (0xb11, 0xb13), (0xb29, 0xb2a), (0xb31, 0xb32), (0xb34, 0xb35), (0xb3a, 0xb3c), (0xb45, 0xb47), (0xb49, 0xb4b), (0xb4e, 0xb56), (0xb58, 0xb5c), (0xb5e, 0xb5f)
    , (0xb64, 0xb66), (0xb78, 0xb82), (0xb84, 0xb85), (0xb8b, 0xb8e), (0xb91, 0xb92), (0xb96, 0xb99), (0xb9b, 0xb9c), (0xb9d, 0xb9e), (0xba0, 0xba3), (0xba5, 0xba8)
    , (0xbab, 0xbae), (0xbba, 0xbbe), (0xbc3, 0xbc6), (0xbc9, 0xbca), (0xbce, 0xbd0), (0xbd1, 0xbd7), (0xbd8, 0xbe6), (0xbfb, 0xc00), (0xc0d, 0xc0e), (0xc11, 0xc12)
    , (0xc29, 0xc2a), (0xc3a, 0xc3d), (0xc45, 0xc46), (0xc49, 0xc4a), (0xc4e, 0xc55), (0xc57, 0xc58), (0xc5b, 0xc60), (0xc64, 0xc66), (0xc70, 0xc77), (0xc8d, 0xc8e)
    , (0xc91, 0xc92), (0xca9, 0xcaa), (0xcb4, 0xcb5), (0xcba, 0xcbc), (0xcc5, 0xcc6), (0xcc9, 0xcca), (0xcce, 0xcd5), (0xcd7, 0xcde), (0xcdf, 0xce0), (0xce4, 0xce6)
    , (0xcf0, 0xcf1), (0xcf3, 0xd00), (0xd04, 0xd05), (0xd0d, 0xd0e), (0xd11, 0xd12), (0xd45, 0xd46), (0xd49, 0xd4a), (0xd50, 0xd54), (0xd64, 0xd66), (0xd80, 0xd82)
    , (0xd84, 0xd85), (0xd97, 0xd9a), (0xdb2, 0xdb3), (0xdbc, 0xdbd), (0xdbe, 0xdc0), (0xdc7, 0xdca), (0xdcb, 0xdcf), (0xdd5, 0xdd6), (0xdd7, 0xdd8), (0xde0, 0xde6)
    , (0xdf0, 0xdf2), (0xdf5, 0xe01), (0xe3b, 0xe3f), (0xe5c, 0xe81), (0xe83, 0xe84), (0xe85, 0xe86), (0xe8b, 0xe8c), (0xea4, 0xea5), (0xea6, 0xea7), (0xebe, 0xec0)
    , (0xec5, 0xec6), (0xec7, 0xec8), (0xece, 0xed0), (0xeda, 0xedc), (0xee0, 0xf00), (0xf48, 0xf49), (0xf6d, 0xf71), (0xf98, 0xf99), (0xfbd, 0xfbe), (0xfcd, 0xfce)
    , (0xfdb, 0x1000), (0x10c6, 0x10c7), (0x10c8, 0x10cd), (0x10ce, 0x10d0), (0x1249, 0x124a), (0x124e, 0x1250), (0x1257, 0x1258), (0x1259, 0x125a), (0x125e, 0x1260), (0x1289, 0x128a)
    , (0x128e, 0x1290), (0x12b1, 0x12b2), (0x12b6, 0x12b8), (0x12bf, 0x12c0), (0x12c1, 0x12c2), (0x12c6, 0x12c8), (0x12d7, 0x12d8), (0x1311, 0x1312), (0x1316, 0x1318), (0x135b, 0x135d)
    , (0x137d, 0x1380), (0x139a, 0x13a0), (0x13f6, 0x13f8), (0x13fe, 0x1400), (0x169d, 0x16a0), (0x16f9, 0x1700), (0x170d, 0x170e), (0x1715, 0x1720), (0x1737, 0x1740), (0x1754, 0x1760)
    , (0x176d, 0x176e), (0x1771, 0x1772), (0x1774, 0x1780), (0x17de, 0x17e0), (0x17ea, 0x17f0), (0x17fa, 0x1800), (0x180f, 0x1810), (0x181a, 0x1820), (0x1879, 0x1880), (0x18ab, 0x18b0)
    , (0x18f6, 0x1900), (0x191f, 0x1920), (0x192c, 0x1930), (0x193c, 0x1940), (0x1941, 0x1944), (0x196e, 0x1970), (0x1975, 0x1980), (0x19ac, 0x19b0), (0x19ca, 0x19d0), (0x19db, 0x19de)
    , (0x1a1c, 0x1a1e), (0x1a5f, 0x1a60), (0x1a7d, 0x1a7f), (0x1a8a, 0x1a90), (0x1a9a, 0x1aa0), (0x1aae, 0x1ab0), (0x1abf, 0x1b00), (0x1b4c, 0x1b50), (0x1b7d, 0x1b80), (0x1bf4, 0x1bfc)
    , (0x1c38, 0x1c3b), (0x1c4a, 0x1c4d), (0x1c89, 0x1c90), (0x1cbb, 0x1cbd), (0x1cc8, 0x1cd0), (0x1cfb, 0x1d00), (0x1dfa, 0x1dfb), (0x1f16, 0x1f18), (0x1f1e, 0x1f20), (0x1f46, 0x1f48)
    , (0x1f4e, 0x1f50), (0x1f58, 0x1f59), (0x1f5a, 0x1f5b), (0x1f5c, 0x1f5d), (0x1f5e, 0x1f5f), (0x1f7e, 0x1f80), (0x1fb5, 0x1fb6), (0x1fc5, 0x1fc6), (0x1fd4, 0x1fd6), (0x1fdc, 0x1fdd)
    , (0x1ff0, 0x1ff2), (0x1ff5, 0x1ff6), (0x1fff, 0x2000), (0x2065, 0x2066), (0x2072, 0x2074), (0x208f, 0x2090), (0x209d, 0x20a0), (0x20c0, 0x20d0), (0x20f1, 0x2100), (0x218c, 0x2190)
    , (0x2427, 0x2440), (0x244b, 0x2460), (0x2b74, 0x2b76), (0x2b96, 0x2b98), (0x2c2f, 0x2c30), (0x2c5f, 0x2c60), (0x2cf4, 0x2cf9), (0x2d26, 0x2d27), (0x2d28, 0x2d2d), (0x2d2e, 0x2d30)
    , (0x2d68, 0x2d6f), (0x2d71, 0x2d7f), (0x2d97, 0x2da0), (0x2da7, 0x2da8), (0x2daf, 0x2db0), (0x2db7, 0x2db8), (0x2dbf, 0x2dc0), (0x2dc7, 0x2dc8), (0x2dcf, 0x2dd0), (0x2dd7, 0x2dd8)
    , (0x2ddf, 0x2de0), (0x2e50, 0x2e80), (0x2e9a, 0x2e9b), (0x2ef4, 0x2f00), (0x2fd6, 0x2ff0), (0x2ffc, 0x3001), (0x3040, 0x3041), (0x3097, 0x3099), (0x3100, 0x3105), (0x3130, 0x3131)
    , (0x318f, 0x3190), (0x31bb, 0x31c0), (0x31e4, 0x31f0), (0x321f, 0x3220), (0x4db6, 0x4dc0), (0x9ff0, 0xa000), (0xa48d, 0xa490), (0xa4c7, 0xa4d0), (0xa62c, 0xa640), (0xa6f8, 0xa700)
    , (0xa7c0, 0xa7c2), (0xa7c7, 0xa7f7), (0xa82c, 0xa830), (0xa83a, 0xa840), (0xa878, 0xa880), (0xa8c6, 0xa8ce), (0xa8da, 0xa8e0), (0xa954, 0xa95f), (0xa97d, 0xa980), (0xa9ce, 0xa9cf)
    , (0xa9da, 0xa9de), (0xa9ff, 0xaa00), (0xaa37, 0xaa40), (0xaa4e, 0xaa50), (0xaa5a, 0xaa5c), (0xaac3, 0xaadb), (0xaaf7, 0xab01), (0xab07, 0xab09), (0xab0f, 0xab11), (0xab17, 0xab20)
    , (0xab27, 0xab28), (0xab2f, 0xab30), (0xab68, 0xab70), (0xabee, 0xabf0), (0xabfa, 0xac00), (0xd7a4, 0xd7b0), (0xd7c7, 0xd7cb), (0xd7fc, 0xd800), (0xfa6e, 0xfa70), (0xfada, 0xfb00)
    , (0xfb07, 0xfb13), (0xfb18, 0xfb1d), (0xfb37, 0xfb38), (0xfb3d, 0xfb3e), (0xfb3f, 0xfb40), (0xfb42, 0xfb43), (0xfb45, 0xfb46), (0xfbc2, 0xfbd3), (0xfd40, 0xfd50), (0xfd90, 0xfd92)
    , (0xfdc8, 0xfdf0), (0xfdfe, 0xfe00), (0xfe1a, 0xfe20), (0xfe53, 0xfe54), (0xfe67, 0xfe68), (0xfe6c, 0xfe70), (0xfe75, 0xfe76), (0xfefd, 0xfeff), (0xff00, 0xff61), (0xffbf, 0xffc2)
    , (0xffc8, 0xffca), (0xffd0, 0xffd2), (0xffd8, 0xffda), (0xffdd, 0xffe8), (0xffef, 0xfff9), (0xfffe, 0x10000), (0x1000c, 0x1000d), (0x10027, 0x10028), (0x1003b, 0x1003c), (0x1003e, 0x1003f)
    , (0x1004e, 0x10050), (0x1005e, 0x10080), (0x100fb, 0x10100), (0x10103, 0x10107), (0x10134, 0x10137), (0x1018f, 0x10190), (0x1019c, 0x101a0), (0x101a1, 0x101d0), (0x101fe, 0x10280), (0x1029d, 0x102a0)
    , (0x102d1, 0x102e0), (0x102fc, 0x10300), (0x10324, 0x1032d), (0x1034b, 0x10350), (0x1037b, 0x10380), (0x1039e, 0x1039f), (0x103c4, 0x103c8), (0x103d6, 0x10400), (0x1049e, 0x104a0), (0x104aa, 0x104b0)
    , (0x104d4, 0x104d8), (0x104fc, 0x10500), (0x10528, 0x10530), (0x10564, 0x1056f), (0x10570, 0x10600), (0x10737, 0x10740), (0x10756, 0x10760), (0x10768, 0x10800), (0x10806, 0x10808), (0x10809, 0x1080a)
    , (0x10836, 0x10837), (0x10839, 0x1083c), (0x1083d, 0x1083f), (0x10856, 0x10857), (0x1089f, 0x108a7), (0x108b0, 0x108e0), (0x108f3, 0x108f4), (0x108f6, 0x108fb), (0x1091c, 0x1091f), (0x1093a, 0x1093f)
    , (0x10940, 0x10980), (0x109b8, 0x109bc), (0x109d0, 0x109d2), (0x10a04, 0x10a05), (0x10a07, 0x10a0c), (0x10a14, 0x10a15), (0x10a18, 0x10a19), (0x10a36, 0x10a38), (0x10a3b, 0x10a3f), (0x10a49, 0x10a50)
    , (0x10a59, 0x10a60), (0x10aa0, 0x10ac0), (0x10ae7, 0x10aeb), (0x10af7, 0x10b00), (0x10b36, 0x10b39), (0x10b56, 0x10b58), (0x10b73, 0x10b78), (0x10b92, 0x10b99), (0x10b9d, 0x10ba9), (0x10bb0, 0x10c00)
    , (0x10c49, 0x10c80), (0x10cb3, 0x10cc0), (0x10cf3, 0x10cfa), (0x10d28, 0x10d30), (0x10d3a, 0x10e60), (0x10e7f, 0x10f00), (0x10f28, 0x10f30), (0x10f5a, 0x10fe0), (0x10ff7, 0x11000), (0x1104e, 0x11052)
    , (0x11070, 0x1107f), (0x110c2, 0x110cd), (0x110ce, 0x110d0), (0x110e9, 0x110f0), (0x110fa, 0x11100), (0x11135, 0x11136), (0x11147, 0x11150), (0x11177, 0x11180), (0x111ce, 0x111d0), (0x111e0, 0x111e1)
    , (0x111f5, 0x11200), (0x11212, 0x11213), (0x1123f, 0x11280), (0x11287, 0x11288), (0x11289, 0x1128a), (0x1128e, 0x1128f), (0x1129e, 0x1129f), (0x112aa, 0x112b0), (0x112eb, 0x112f0), (0x112fa, 0x11300)
    , (0x11304, 0x11305), (0x1130d, 0x1130f), (0x11311, 0x11313), (0x11329, 0x1132a), (0x11331, 0x11332), (0x11334, 0x11335), (0x1133a, 0x1133b), (0x11345, 0x11347), (0x11349, 0x1134b), (0x1134e, 0x11350)
    , (0x11351, 0x11357), (0x11358, 0x1135d), (0x11364, 0x11366), (0x1136d, 0x11370), (0x11375, 0x11400), (0x1145a, 0x1145b), (0x1145c, 0x1145d), (0x11460, 0x11480), (0x114c8, 0x114d0), (0x114da, 0x11580)
    , (0x115b6, 0x115b8), (0x115de, 0x11600), (0x11645, 0x11650), (0x1165a, 0x11660), (0x1166d, 0x11680), (0x116b9, 0x116c0), (0x116ca, 0x11700), (0x1171b, 0x1171d), (0x1172c, 0x11730), (0x11740, 0x11800)
    , (0x1183c, 0x118a0), (0x118f3, 0x118ff), (0x11900, 0x119a0), (0x119a8, 0x119aa), (0x119d8, 0x119da), (0x119e5, 0x11a00), (0x11a48, 0x11a50), (0x11aa3, 0x11ac0), (0x11af9, 0x11c00), (0x11c09, 0x11c0a)
    , (0x11c37, 0x11c38), (0x11c46, 0x11c50), (0x11c6d, 0x11c70), (0x11c90, 0x11c92), (0x11ca8, 0x11ca9), (0x11cb7, 0x11d00), (0x11d07, 0x11d08), (0x11d0a, 0x11d0b), (0x11d37, 0x11d3a), (0x11d3b, 0x11d3c)
    , (0x11d3e, 0x11d3f), (0x11d48, 0x11d50), (0x11d5a, 0x11d60), (0x11d66, 0x11d67), (0x11d69, 0x11d6a), (0x11d8f, 0x11d90), (0x11d92, 0x11d93), (0x11d99, 0x11da0), (0x11daa, 0x11ee0), (0x11ef9, 0x11fc0)
    , (0x11ff2, 0x11fff), (0x1239a, 0x12400), (0x1246f, 0x12470), (0x12475, 0x12480), (0x12544, 0x13000), (0x1342f, 0x13430), (0x13439, 0x14400), (0x14647, 0x16800), (0x16a39, 0x16a40), (0x16a5f, 0x16a60)
    , (0x16a6a, 0x16a6e), (0x16a70, 0x16ad0), (0x16aee, 0x16af0), (0x16af6, 0x16b00), (0x16b46, 0x16b50), (0x16b5a, 0x16b5b), (0x16b62, 0x16b63), (0x16b78, 0x16b7d), (0x16b90, 0x16e40), (0x16e9b, 0x16f00)
    , (0x16f4b, 0x16f4f), (0x16f88, 0x16f8f), (0x16fa0, 0x16fe0), (0x16fe4, 0x17000), (0x187f8, 0x18800), (0x18af3, 0x1b000), (0x1b11f, 0x1b150), (0x1b153, 0x1b164), (0x1b168, 0x1b170), (0x1b2fc, 0x1bc00)
    , (0x1bc6b, 0x1bc70), (0x1bc7d, 0x1bc80), (0x1bc89, 0x1bc90), (0x1bc9a, 0x1bc9c), (0x1bca4, 0x1d000), (0x1d0f6, 0x1d100), (0x1d127, 0x1d129), (0x1d1e9, 0x1d200), (0x1d246, 0x1d2e0), (0x1d2f4, 0x1d300)
    , (0x1d357, 0x1d360), (0x1d379, 0x1d400), (0x1d455, 0x1d456), (0x1d49d, 0x1d49e), (0x1d4a0, 0x1d4a2), (0x1d4a3, 0x1d4a5), (0x1d4a7, 0x1d4a9), (0x1d4ad, 0x1d4ae), (0x1d4ba, 0x1d4bb), (0x1d4bc, 0x1d4bd)
    , (0x1d4c4, 0x1d4c5), (0x1d506, 0x1d507), (0x1d50b, 0x1d50d), (0x1d515, 0x1d516), (0x1d51d, 0x1d51e), (0x1d53a, 0x1d53b), (0x1d53f, 0x1d540), (0x1d545, 0x1d546), (0x1d547, 0x1d54a), (0x1d551, 0x1d552)
    , (0x1d6a6, 0x1d6a8), (0x1d7cc, 0x1d7ce), (0x1da8c, 0x1da9b), (0x1daa0, 0x1daa1), (0x1dab0, 0x1e000), (0x1e007, 0x1e008), (0x1e019, 0x1e01b), (0x1e022, 0x1e023), (0x1e025, 0x1e026), (0x1e02b, 0x1e100)
    , (0x1e12d, 0x1e130), (0x1e13e, 0x1e140), (0x1e14a, 0x1e14e), (0x1e150, 0x1e2c0), (0x1e2fa, 0x1e2ff), (0x1e300, 0x1e800), (0x1e8c5, 0x1e8c7), (0x1e8d7, 0x1e900), (0x1e94c, 0x1e950), (0x1e95a, 0x1e95e)
    , (0x1e960, 0x1ec71), (0x1ecb5, 0x1ed01), (0x1ed3e, 0x1ee00), (0x1ee04, 0x1ee05), (0x1ee20, 0x1ee21), (0x1ee23, 0x1ee24), (0x1ee25, 0x1ee27), (0x1ee28, 0x1ee29), (0x1ee33, 0x1ee34), (0x1ee38, 0x1ee39)
    , (0x1ee3a, 0x1ee3b), (0x1ee3c, 0x1ee42), (0x1ee43, 0x1ee47), (0x1ee48, 0x1ee49), (0x1ee4a, 0x1ee4b), (0x1ee4c, 0x1ee4d), (0x1ee50, 0x1ee51), (0x1ee53, 0x1ee54), (0x1ee55, 0x1ee57), (0x1ee58, 0x1ee59)
    , (0x1ee5a, 0x1ee5b), (0x1ee5c, 0x1ee5d), (0x1ee5e, 0x1ee5f), (0x1ee60, 0x1ee61), (0x1ee63, 0x1ee64), (0x1ee65, 0x1ee67), (0x1ee6b, 0x1ee6c), (0x1ee73, 0x1ee74), (0x1ee78, 0x1ee79), (0x1ee7d, 0x1ee7e)
    , (0x1ee7f, 0x1ee80), (0x1ee8a, 0x1ee8b), (0x1ee9c, 0x1eea1), (0x1eea4, 0x1eea5), (0x1eeaa, 0x1eeab), (0x1eebc, 0x1eef0), (0x1eef2, 0x1f000), (0x1f02c, 0x1f030), (0x1f094, 0x1f0a0), (0x1f0af, 0x1f0b1)
    , (0x1f0c0, 0x1f0c1), (0x1f0d0, 0x1f0d1), (0x1f0f6, 0x1f100), (0x1f10d, 0x1f110), (0x1f16d, 0x1f170), (0x1f1ad, 0x1f1e6), (0x1f203, 0x1f210), (0x1f23c, 0x1f240), (0x1f249, 0x1f250), (0x1f252, 0x1f260)
    , (0x1f266, 0x1f300), (0x1f6d6, 0x1f6e0), (0x1f6ed, 0x1f6f0), (0x1f6fb, 0x1f700), (0x1f774, 0x1f780), (0x1f7d9, 0x1f7e0), (0x1f7ec, 0x1f800), (0x1f80c, 0x1f810), (0x1f848, 0x1f850), (0x1f85a, 0x1f860)
    , (0x1f888, 0x1f890), (0x1f8ae, 0x1f900), (0x1f90c, 0x1f90d), (0x1f972, 0x1f973), (0x1f977, 0x1f97a), (0x1f9a3, 0x1f9a5), (0x1f9ab, 0x1f9ae), (0x1f9cb, 0x1f9cd), (0x1fa54, 0x1fa60), (0x1fa6e, 0x1fa70)
    , (0x1fa74, 0x1fa78), (0x1fa7b, 0x1fa80), (0x1fa83, 0x1fa90), (0x1fa96, 0x20000), (0x2a6d7, 0x2a700), (0x2b735, 0x2b740), (0x2b81e, 0x2b820), (0x2cea2, 0x2ceb0), (0x2ebe1, 0x2f800), (0x2fa1e, 0xe0001)
    , (0xe0002, 0xe0020), (0xe0080, 0xe0100), (0xe01f0, 0xf0000), (0xffffe, 0x100000), (0x10fffe, 0x110000)
    ]))
, ('H', (123, 7, [
    (0x20a9, 0x20aa), (0xff61, 0xffbf), (0xffc2, 0xffc8), (0xffca, 0xffd0), (0xffd2, 0xffd8), (0xffda, 0xffdd), (0xffe8, 0xffef)
    ]))
, ('N', (26925, 811, [
    (0x0, 0x20), (0x7f, 0xa1), (0xa9, 0xaa), (0xab, 0xac), (0xb5, 0xb6), (0xbb, 0xbc), (0xc0, 0xc6), (0xc7, 0xd0), (0xd1, 0xd7), (0xd9, 0xde)
    , (0xe2, 0xe6), (0xe7, 0xe8), (0xeb, 0xec), (0xee, 0xf0), (0xf1, 0xf2), (0xf4, 0xf7), (0xfb, 0xfc), (0xfd, 0xfe), (0xff, 0x101), (0x102, 0x111)
    , (0x112, 0x113), (0x114, 0x11b), (0x11c, 0x126), (0x128, 0x12b), (0x12c, 0x131), (0x134, 0x138), (0x139, 0x13f), (0x143, 0x144), (0x145, 0x148), (0x14c, 0x14d)
    , (0x14e, 0x152), (0x154, 0x166), (0x168, 0x16b), (0x16c, 0x1ce), (0x1cf, 0x1d0), (0x1d1, 0x1d2), (0x1d3, 0x1d4), (0x1d5, 0x1d6), (0x1d7, 0x1d8), (0x1d9, 0x1da)
    , (0x1db, 0x1dc), (0x1dd, 0x251), (0x252, 0x261), (0x262, 0x2c4), (0x2c5, 0x2c7), (0x2c8, 0x2c9), (0x2cc, 0x2cd), (0x2ce, 0x2d0), (0x2d1, 0x2d8), (0x2dc, 0x2dd)
    , (0x2de, 0x2df), (0x2e0, 0x300), (0x370, 0x378), (0x37a, 0x380), (0x384, 0x38b), (0x38c, 0x38d), (0x38e, 0x391), (0x3aa, 0x3b1), (0x3c2, 0x3c3), (0x3ca, 0x401)
    , (0x402, 0x410), (0x450, 0x451), (0x452, 0x530), (0x531, 0x557), (0x559, 0x58b), (0x58d, 0x590), (0x591, 0x5c8), (0x5d0, 0x5eb), (0x5ef, 0x5f5), (0x600, 0x61d)
    , (0x61e, 0x70e), (0x70f, 0x74b), (0x74d, 0x7b2), (0x7c0, 0x7fb), (0x7fd, 0x82e), (0x830, 0x83f), (0x840, 0x85c), (0x85e, 0x85f), (0x860, 0x86b), (0x8a0, 0x8b5)
    , (0x8b6, 0x8be), (0x8d3, 0x984), (0x985, 0x98d), (0x98f, 0x991), (0x993, 0x9a9), (0x9aa, 0x9b1), (0x9b2, 0x9b3), (0x9b6, 0x9ba), (0x9bc, 0x9c5), (0x9c7, 0x9c9)
    , (0x9cb, 0x9cf), (0x9d7, 0x9d8), (0x9dc, 0x9de), (0x9df, 0x9e4), (0x9e6, 0x9ff), (0xa01, 0xa04), (0xa05, 0xa0b), (0xa0f, 0xa11), (0xa13, 0xa29), (0xa2a, 0xa31)
    , (0xa32, 0xa34), (0xa35, 0xa37), (0xa38, 0xa3a), (0xa3c, 0xa3d), (0xa3e, 0xa43), (0xa47, 0xa49), (0xa4b, 0xa4e), (0xa51, 0xa52), (0xa59, 0xa5d), (0xa5e, 0xa5f)
    , (0xa66, 0xa77), (0xa81, 0xa84), (0xa85, 0xa8e), (0xa8f, 0xa92), (0xa93, 0xaa9), (0xaaa, 0xab1), (0xab2, 0xab4), (0xab5, 0xaba), (0xabc, 0xac6), (0xac7, 0xaca)
    , (0xacb, 0xace), (0xad0, 0xad1), (0xae0, 0xae4), (0xae6, 0xaf2), (0xaf9, 0xb00), (0xb01, 0xb04), (0xb05, 0xb0d), (0xb0f, 0xb11), (0xb13, 0xb29), (0xb2a, 0xb31)
    , (0xb32, 0xb34), (0xb35, 0xb3a), (0xb3c, 0xb45), (0xb47, 0xb49), (0xb4b, 0xb4e), (0xb56, 0xb58), (0xb5c, 0xb5e), (0xb5f, 0xb64), (0xb66, 0xb78), (0xb82, 0xb84)
    , (0xb85, 0xb8b), (0xb8e, 0xb91), (0xb92, 0xb96), (0xb99, 0xb9b), (0xb9c, 0xb9d), (0xb9e, 0xba0), (0xba3, 0xba5), (0xba8, 0xbab), (0xbae, 0xbba), (0xbbe, 0xbc3)
    , (0xbc6, 0xbc9), (0xbca, 0xbce), (0xbd0, 0xbd1), (0xbd7, 0xbd8), (0xbe6, 0xbfb), (0xc00, 0xc0d), (0xc0e, 0xc11), (0xc12, 0xc29), (0xc2a, 0xc3a), (0xc3d, 0xc45)
    , (0xc46, 0xc49), (0xc4a, 0xc4e), (0xc55, 0xc57), (0xc58, 0xc5b), (0xc60, 0xc64), (0xc66, 0xc70), (0xc77, 0xc8d), (0xc8e, 0xc91), (0xc92, 0xca9), (0xcaa, 0xcb4)
    , (0xcb5, 0xcba), (0xcbc, 0xcc5), (0xcc6, 0xcc9), (0xcca, 0xcce), (0xcd5, 0xcd7), (0xcde, 0xcdf), (0xce0, 0xce4), (0xce6, 0xcf0), (0xcf1, 0xcf3), (0xd00, 0xd04)
    , (0xd05, 0xd0d), (0xd0e, 0xd11), (0xd12, 0xd45), (0xd46, 0xd49), (0xd4a, 0xd50), (0xd54, 0xd64), (0xd66, 0xd80), (0xd82, 0xd84), (0xd85, 0xd97), (0xd9a, 0xdb2)
    , (0xdb3, 0xdbc), (0xdbd, 0xdbe), (0xdc0, 0xdc7), (0xdca, 0xdcb), (0xdcf, 0xdd5), (0xdd6, 0xdd7), (0xdd8, 0xde0), (0xde6, 0xdf0), (0xdf2, 0xdf5), (0xe01, 0xe3b)
    , (0xe3f, 0xe5c), (0xe81, 0xe83), (0xe84, 0xe85), (0xe86, 0xe8b), (0xe8c, 0xea4), (0xea5, 0xea6), (0xea7, 0xebe), (0xec0, 0xec5), (0xec6, 0xec7), (0xec8, 0xece)
    , (0xed0, 0xeda), (0xedc, 0xee0), (0xf00, 0xf48), (0xf49, 0xf6d), (0xf71, 0xf98), (0xf99, 0xfbd), (0xfbe, 0xfcd), (0xfce, 0xfdb), (0x1000, 0x10c6), (0x10c7, 0x10c8)
    , (0x10cd, 0x10ce), (0x10d0, 0x1100), (0x1160, 0x1249), (0x124a, 0x124e), (0x1250, 0x1257), (0x1258, 0x1259), (0x125a, 0x125e), (0x1260, 0x1289), (0x128a, 0x128e), (0x1290, 0x12b1)
    , (0x12b2, 0x12b6), (0x12b8, 0x12bf), (0x12c0, 0x12c1), (0x12c2, 0x12c6), (0x12c8, 0x12d7), (0x12d8, 0x1311), (0x1312, 0x1316), (0x1318, 0x135b), (0x135d, 0x137d), (0x1380, 0x139a)
    , (0x13a0, 0x13f6), (0x13f8, 0x13fe), (0x1400, 0x169d), (0x16a0, 0x16f9), (0x1700, 0x170d), (0x170e, 0x1715), (0x1720, 0x1737), (0x1740, 0x1754), (0x1760, 0x176d), (0x176e, 0x1771)
    , (0x1772, 0x1774), (0x1780, 0x17de), (0x17e0, 0x17ea), (0x17f0, 0x17fa), (0x1800, 0x180f), (0x1810, 0x181a), (0x1820, 0x1879), (0x1880, 0x18ab), (0x18b0, 0x18f6), (0x1900, 0x191f)
    , (0x1920, 0x192c), (0x1930, 0x193c), (0x1940, 0x1941), (0x1944, 0x196e), (0x1970, 0x1975), (0x1980, 0x19ac), (0x19b0, 0x19ca), (0x19d0, 0x19db), (0x19de, 0x1a1c), (0x1a1e, 0x1a5f)
    , (0x1a60, 0x1a7d), (0x1a7f, 0x1a8a), (0x1a90, 0x1a9a), (0x1aa0, 0x1aae), (0x1ab0, 0x1abf), (0x1b00, 0x1b4c), (0x1b50, 0x1b7d), (0x1b80, 0x1bf4), (0x1bfc, 0x1c38), (0x1c3b, 0x1c4a)
    , (0x1c4d, 0x1c89), (0x1c90, 0x1cbb), (0x1cbd, 0x1cc8), (0x1cd0, 0x1cfb), (0x1d00, 0x1dfa), (0x1dfb, 0x1f16), (0x1f18, 0x1f1e), (0x1f20, 0x1f46), (0x1f48, 0x1f4e), (0x1f50, 0x1f58)
    , (0x1f59, 0x1f5a), (0x1f5b, 0x1f5c), (0x1f5d, 0x1f5e), (0x1f5f, 0x1f7e), (0x1f80, 0x1fb5), (0x1fb6, 0x1fc5), (0x1fc6, 0x1fd4), (0x1fd6, 0x1fdc), (0x1fdd, 0x1ff0), (0x1ff2, 0x1ff5)
    , (0x1ff6, 0x1fff), (0x2000, 0x2010), (0x2011, 0x2013), (0x2017, 0x2018), (0x201a, 0x201c), (0x201e, 0x2020), (0x2023, 0x2024), (0x2028, 0x2030), (0x2031, 0x2032), (0x2034, 0x2035)
    , (0x2036, 0x203b), (0x203c, 0x203e), (0x203f, 0x2065), (0x2066, 0x2072), (0x2075, 0x207f), (0x2080, 0x2081), (0x2085, 0x208f), (0x2090, 0x209d), (0x20a0, 0x20a9), (0x20aa, 0x20ac)
    , (0x20ad, 0x20c0), (0x20d0, 0x20f1), (0x2100, 0x2103), (0x2104, 0x2105), (0x2106, 0x2109), (0x210a, 0x2113), (0x2114, 0x2116), (0x2117, 0x2121), (0x2123, 0x2126), (0x2127, 0x212b)
    , (0x212c, 0x2153), (0x2155, 0x215b), (0x215f, 0x2160), (0x216c, 0x2170), (0x217a, 0x2189), (0x218a, 0x218c), (0x219a, 0x21b8), (0x21ba, 0x21d2), (0x21d3, 0x21d4), (0x21d5, 0x21e7)
    , (0x21e8, 0x2200), (0x2201, 0x2202), (0x2204, 0x2207), (0x2209, 0x220b), (0x220c, 0x220f), (0x2210, 0x2211), (0x2212, 0x2215), (0x2216, 0x221a), (0x221b, 0x221d), (0x2221, 0x2223)
    , (0x2224, 0x2225), (0x2226, 0x2227), (0x222d, 0x222e), (0x222f, 0x2234), (0x2238, 0x223c), (0x223e, 0x2248), (0x2249, 0x224c), (0x224d, 0x2252), (0x2253, 0x2260), (0x2262, 0x2264)
    , (0x2268, 0x226a), (0x226c, 0x226e), (0x2270, 0x2282), (0x2284, 0x2286), (0x2288, 0x2295), (0x2296, 0x2299), (0x229a, 0x22a5), (0x22a6, 0x22bf), (0x22c0, 0x2312), (0x2313, 0x231a)
    , (0x231c, 0x2329), (0x232b, 0x23e9), (0x23ed, 0x23f0), (0x23f1, 0x23f3), (0x23f4, 0x2427), (0x2440, 0x244b), (0x24ea, 0x24eb), (0x254c, 0x2550), (0x2574, 0x2580), (0x2590, 0x2592)
    , (0x2596, 0x25a0), (0x25a2, 0x25a3), (0x25aa, 0x25b2), (0x25b4, 0x25b6), (0x25b8, 0x25bc), (0x25be, 0x25c0), (0x25c2, 0x25c6), (0x25c9, 0x25cb), (0x25cc, 0x25ce), (0x25d2, 0x25e2)
    , (0x25e6, 0x25ef), (0x25f0, 0x25fd), (0x25ff, 0x2605), (0x2607, 0x2609), (0x260a, 0x260e), (0x2610, 0x2614), (0x2616, 0x261c), (0x261d, 0x261e), (0x261f, 0x2640), (0x2641, 0x2642)
    , (0x2643, 0x2648), (0x2654, 0x2660), (0x2662, 0x2663), (0x2666, 0x2667), (0x266b, 0x266c), (0x266e, 0x266f), (0x2670, 0x267f), (0x2680, 0x2693), (0x2694, 0x269e), (0x26a0, 0x26a1)
    , (0x26a2, 0x26aa), (0x26ac, 0x26bd), (0x26c0, 0x26c4), (0x26e2, 0x26e3), (0x26e4, 0x26e8), (0x2700, 0x2705), (0x2706, 0x270a), (0x270c, 0x2728), (0x2729, 0x273d), (0x273e, 0x274c)
    , (0x274d, 0x274e), (0x274f, 0x2753), (0x2756, 0x2757), (0x2758, 0x2776), (0x2780, 0x2795), (0x2798, 0x27b0), (0x27b1, 0x27bf), (0x27c0, 0x27e6), (0x27ee, 0x2985), (0x2987, 0x2b1b)
    , (0x2b1d, 0x2b50), (0x2b51, 0x2b55), (0x2b5a, 0x2b74), (0x2b76, 0x2b96), (0x2b98, 0x2c2f), (0x2c30, 0x2c5f), (0x2c60, 0x2cf4), (0x2cf9, 0x2d26), (0x2d27, 0x2d28), (0x2d2d, 0x2d2e)
    , (0x2d30, 0x2d68), (0x2d6f, 0x2d71), (0x2d7f, 0x2d97), (0x2da0, 0x2da7), (0x2da8, 0x2daf), (0x2db0, 0x2db7), (0x2db8, 0x2dbf), (0x2dc0, 0x2dc7), (0x2dc8, 0x2dcf), (0x2dd0, 0x2dd7)
    , (0x2dd8, 0x2ddf), (0x2de0, 0x2e50), (0x303f, 0x3040), (0x4dc0, 0x4e00), (0xa4d0, 0xa62c), (0xa640, 0xa6f8), (0xa700, 0xa7c0), (0xa7c2, 0xa7c7), (0xa7f7, 0xa82c), (0xa830, 0xa83a)
    , (0xa840, 0xa878), (0xa880, 0xa8c6), (0xa8ce, 0xa8da), (0xa8e0, 0xa954), (0xa95f, 0xa960), (0xa980, 0xa9ce), (0xa9cf, 0xa9da), (0xa9de, 0xa9ff), (0xaa00, 0xaa37), (0xaa40, 0xaa4e)
    , (0xaa50, 0xaa5a), (0xaa5c, 0xaac3), (0xaadb, 0xaaf7), (0xab01, 0xab07), (0xab09, 0xab0f), (0xab11, 0xab17), (0xab20, 0xab27), (0xab28, 0xab2f), (0xab30, 0xab68), (0xab70, 0xabee)
    , (0xabf0, 0xabfa), (0xd7b0, 0xd7c7), (0xd7cb, 0xd7fc), (0xd800, 0xe000), (0xfb00, 0xfb07), (0xfb13, 0xfb18), (0xfb1d, 0xfb37), (0xfb38, 0xfb3d), (0xfb3e, 0xfb3f), (0xfb40, 0xfb42)
    , (0xfb43, 0xfb45), (0xfb46, 0xfbc2), (0xfbd3, 0xfd40), (0xfd50, 0xfd90), (0xfd92, 0xfdc8), (0xfdf0, 0xfdfe), (0xfe20, 0xfe30), (0xfe70, 0xfe75), (0xfe76, 0xfefd), (0xfeff, 0xff00)
    , (0xfff9, 0xfffd), (0x10000, 0x1000c), (0x1000d, 0x10027), (0x10028, 0x1003b), (0x1003c, 0x1003e), (0x1003f, 0x1004e), (0x10050, 0x1005e), (0x10080, 0x100fb), (0x10100, 0x10103), (0x10107, 0x10134)
    , (0x10137, 0x1018f), (0x10190, 0x1019c), (0x101a0, 0x101a1), (0x101d0, 0x101fe), (0x10280, 0x1029d), (0x102a0, 0x102d1), (0x102e0, 0x102fc), (0x10300, 0x10324), (0x1032d, 0x1034b), (0x10350, 0x1037b)
    , (0x10380, 0x1039e), (0x1039f, 0x103c4), (0x103c8, 0x103d6), (0x10400, 0x1049e), (0x104a0, 0x104aa), (0x104b0, 0x104d4), (0x104d8, 0x104fc), (0x10500, 0x10528), (0x10530, 0x10564), (0x1056f, 0x10570)
    , (0x10600, 0x10737), (0x10740, 0x10756), (0x10760, 0x10768), (0x10800, 0x10806), (0x10808, 0x10809), (0x1080a, 0x10836), (0x10837, 0x10839), (0x1083c, 0x1083d), (0x1083f, 0x10856), (0x10857, 0x1089f)
    , (0x108a7, 0x108b0), (0x108e0, 0x108f3), (0x108f4, 0x108f6), (0x108fb, 0x1091c), (0x1091f, 0x1093a), (0x1093f, 0x10940), (0x10980, 0x109b8), (0x109bc, 0x109d0), (0x109d2, 0x10a04), (0x10a05, 0x10a07)
    , (0x10a0c, 0x10a14), (0x10a15, 0x10a18), (0x10a19, 0x10a36), (0x10a38, 0x10a3b), (0x10a3f, 0x10a49), (0x10a50, 0x10a59), (0x10a60, 0x10aa0), (0x10ac0, 0x10ae7), (0x10aeb, 0x10af7), (0x10b00, 0x10b36)
    , (0x10b39, 0x10b56), (0x10b58, 0x10b73), (0x10b78, 0x10b92), (0x10b99, 0x10b9d), (0x10ba9, 0x10bb0), (0x10c00, 0x10c49), (0x10c80, 0x10cb3), (0x10cc0, 0x10cf3), (0x10cfa, 0x10d28), (0x10d30, 0x10d3a)
    , (0x10e60, 0x10e7f), (0x10f00, 0x10f28), (0x10f30, 0x10f5a), (0x10fe0, 0x10ff7), (0x11000, 0x1104e), (0x11052, 0x11070), (0x1107f, 0x110c2), (0x110cd, 0x110ce), (0x110d0, 0x110e9), (0x110f0, 0x110fa)
    , (0x11100, 0x11135), (0x11136, 0x11147), (0x11150, 0x11177), (0x11180, 0x111ce), (0x111d0, 0x111e0), (0x111e1, 0x111f5), (0x11200, 0x11212), (0x11213, 0x1123f), (0x11280, 0x11287), (0x11288, 0x11289)
    , (0x1128a, 0x1128e), (0x1128f, 0x1129e), (0x1129f, 0x112aa), (0x112b0, 0x112eb), (0x112f0, 0x112fa), (0x11300, 0x11304), (0x11305, 0x1130d), (0x1130f, 0x11311), (0x11313, 0x11329), (0x1132a, 0x11331)
    , (0x11332, 0x11334), (0x11335, 0x1133a), (0x1133b, 0x11345), (0x11347, 0x11349), (0x1134b, 0x1134e), (0x11350, 0x11351), (0x11357, 0x11358), (0x1135d, 0x11364), (0x11366, 0x1136d), (0x11370, 0x11375)
    , (0x11400, 0x1145a), (0x1145b, 0x1145c), (0x1145d, 0x11460), (0x11480, 0x114c8), (0x114d0, 0x114da), (0x11580, 0x115b6), (0x115b8, 0x115de), (0x11600, 0x11645), (0x11650, 0x1165a), (0x11660, 0x1166d)
    , (0x11680, 0x116b9), (0x116c0, 0x116ca), (0x11700, 0x1171b), (0x1171d, 0x1172c), (0x11730, 0x11740), (0x11800, 0x1183c), (0x118a0, 0x118f3), (0x118ff, 0x11900), (0x119a0, 0x119a8), (0x119aa, 0x119d8)
    , (0x119da, 0x119e5), (0x11a00, 0x11a48), (0x11a50, 0x11aa3), (0x11ac0, 0x11af9), (0x11c00, 0x11c09), (0x11c0a, 0x11c37), (0x11c38, 0x11c46), (0x11c50, 0x11c6d), (0x11c70, 0x11c90), (0x11c92, 0x11ca8)
    , (0x11ca9, 0x11cb7), (0x11d00, 0x11d07), (0x11d08, 0x11d0a), (0x11d0b, 0x11d37), (0x11d3a, 0x11d3b), (0x11d3c, 0x11d3e), (0x11d3f, 0x11d48), (0x11d50, 0x11d5a), (0x11d60, 0x11d66), (0x11d67, 0x11d69)
    , (0x11d6a, 0x11d8f), (0x11d90, 0x11d92), (0x11d93, 0x11d99), (0x11da0, 0x11daa), (0x11ee0, 0x11ef9), (0x11fc0, 0x11ff2), (0x11fff, 0x1239a), (0x12400, 0x1246f), (0x12470, 0x12475), (0x12480, 0x12544)
    , (0x13000, 0x1342f), (0x13430, 0x13439), (0x14400, 0x14647), (0x16800, 0x16a39), (0x16a40, 0x16a5f), (0x16a60, 0x16a6a), (0x16a6e, 0x16a70), (0x16ad0, 0x16aee), (0x16af0, 0x16af6), (0x16b00, 0x16b46)
    , (0x16b50, 0x16b5a), (0x16b5b, 0x16b62), (0x16b63, 0x16b78), (0x16b7d, 0x16b90), (0x16e40, 0x16e9b), (0x16f00, 0x16f4b), (0x16f4f, 0x16f88), (0x16f8f, 0x16fa0), (0x1bc00, 0x1bc6b), (0x1bc70, 0x1bc7d)
    , (0x1bc80, 0x1bc89), (0x1bc90, 0x1bc9a), (0x1bc9c, 0x1bca4), (0x1d000, 0x1d0f6), (0x1d100, 0x1d127), (0x1d129, 0x1d1e9), (0x1d200, 0x1d246), (0x1d2e0, 0x1d2f4), (0x1d300, 0x1d357), (0x1d360, 0x1d379)
    , (0x1d400, 0x1d455), (0x1d456, 0x1d49d), (0x1d49e, 0x1d4a0), (0x1d4a2, 0x1d4a3), (0x1d4a5, 0x1d4a7), (0x1d4a9, 0x1d4ad), (0x1d4ae, 0x1d4ba), (0x1d4bb, 0x1d4bc), (0x1d4bd, 0x1d4c4), (0x1d4c5, 0x1d506)
    , (0x1d507, 0x1d50b), (0x1d50d, 0x1d515), (0x1d516, 0x1d51d), (0x1d51e, 0x1d53a), (0x1d53b, 0x1d53f), (0x1d540, 0x1d545), (0x1d546, 0x1d547), (0x1d54a, 0x1d551), (0x1d552, 0x1d6a6), (0x1d6a8, 0x1d7cc)
    , (0x1d7ce, 0x1da8c), (0x1da9b, 0x1daa0), (0x1daa1, 0x1dab0), (0x1e000, 0x1e007), (0x1e008, 0x1e019), (0x1e01b, 0x1e022), (0x1e023, 0x1e025), (0x1e026, 0x1e02b), (0x1e100, 0x1e12d), (0x1e130, 0x1e13e)
    , (0x1e140, 0x1e14a), (0x1e14e, 0x1e150), (0x1e2c0, 0x1e2fa), (0x1e2ff, 0x1e300), (0x1e800, 0x1e8c5), (0x1e8c7, 0x1e8d7), (0x1e900, 0x1e94c), (0x1e950, 0x1e95a), (0x1e95e, 0x1e960), (0x1ec71, 0x1ecb5)
    , (0x1ed01, 0x1ed3e), (0x1ee00, 0x1ee04), (0x1ee05, 0x1ee20), (0x1ee21, 0x1ee23), (0x1ee24, 0x1ee25), (0x1ee27, 0x1ee28), (0x1ee29, 0x1ee33), (0x1ee34, 0x1ee38), (0x1ee39, 0x1ee3a), (0x1ee3b, 0x1ee3c)
    , (0x1ee42, 0x1ee43), (0x1ee47, 0x1ee48), (0x1ee49, 0x1ee4a), (0x1ee4b, 0x1ee4c), (0x1ee4d, 0x1ee50), (0x1ee51, 0x1ee53), (0x1ee54, 0x1ee55), (0x1ee57, 0x1ee58), (0x1ee59, 0x1ee5a), (0x1ee5b, 0x1ee5c)
    , (0x1ee5d, 0x1ee5e), (0x1ee5f, 0x1ee60), (0x1ee61, 0x1ee63), (0x1ee64, 0x1ee65), (0x1ee67, 0x1ee6b), (0x1ee6c, 0x1ee73), (0x1ee74, 0x1ee78), (0x1ee79, 0x1ee7d), (0x1ee7e, 0x1ee7f), (0x1ee80, 0x1ee8a)
    , (0x1ee8b, 0x1ee9c), (0x1eea1, 0x1eea4), (0x1eea5, 0x1eeaa), (0x1eeab, 0x1eebc), (0x1eef0, 0x1eef2), (0x1f000, 0x1f004), (0x1f005, 0x1f02c), (0x1f030, 0x1f094), (0x1f0a0, 0x1f0af), (0x1f0b1, 0x1f0c0)
    , (0x1f0c1, 0x1f0cf), (0x1f0d1, 0x1f0f6), (0x1f10b, 0x1f10d), (0x1f12e, 0x1f130), (0x1f16a, 0x1f16d), (0x1f1e6, 0x1f200), (0x1f321, 0x1f32d), (0x1f336, 0x1f337), (0x1f37d, 0x1f37e), (0x1f394, 0x1f3a0)
    , (0x1f3cb, 0x1f3cf), (0x1f3d4, 0x1f3e0), (0x1f3f1, 0x1f3f4), (0x1f3f5, 0x1f3f8), (0x1f43f, 0x1f440), (0x1f441, 0x1f442), (0x1f4fd, 0x1f4ff), (0x1f53e, 0x1f54b), (0x1f54f, 0x1f550), (0x1f568, 0x1f57a)
    , (0x1f57b, 0x1f595), (0x1f597, 0x1f5a4), (0x1f5a5, 0x1f5fb), (0x1f650, 0x1f680), (0x1f6c6, 0x1f6cc), (0x1f6cd, 0x1f6d0), (0x1f6d3, 0x1f6d5), (0x1f6e0, 0x1f6eb), (0x1f6f0, 0x1f6f4), (0x1f700, 0x1f774)
    , (0x1f780, 0x1f7d9), (0x1f800, 0x1f80c), (0x1f810, 0x1f848), (0x1f850, 0x1f85a), (0x1f860, 0x1f888), (0x1f890, 0x1f8ae), (0x1f900, 0x1f90c), (0x1fa00, 0x1fa54), (0x1fa60, 0x1fa6e), (0xe0001, 0xe0002)
    , (0xe0020, 0xe0080)
    ]))
, ('Na', (111, 7, [
    (0x20, 0x7f), (0xa2, 0xa4), (0xa5, 0xa7), (0xac, 0xad), (0xaf, 0xb0), (0x27e6, 0x27ee), (0x2985, 0x2987)
    ]))
, ('W', (111508, 117, [
    (0x1100, 0x1160), (0x231a, 0x231c), (0x2329, 0x232b), (0x23e9, 0x23ed), (0x23f0, 0x23f1), (0x23f3, 0x23f4), (0x25fd, 0x25ff), (0x2614, 0x2616), (0x2648, 0x2654), (0x267f, 0x2680)
    , (0x2693, 0x2694), (0x26a1, 0x26a2), (0x26aa, 0x26ac), (0x26bd, 0x26bf), (0x26c4, 0x26c6), (0x26ce, 0x26cf), (0x26d4, 0x26d5), (0x26ea, 0x26eb), (0x26f2, 0x26f4), (0x26f5, 0x26f6)
    , (0x26fa, 0x26fb), (0x26fd, 0x26fe), (0x2705, 0x2706), (0x270a, 0x270c), (0x2728, 0x2729), (0x274c, 0x274d), (0x274e, 0x274f), (0x2753, 0x2756), (0x2757, 0x2758), (0x2795, 0x2798)
    , (0x27b0, 0x27b1), (0x27bf, 0x27c0), (0x2b1b, 0x2b1d), (0x2b50, 0x2b51), (0x2b55, 0x2b56), (0x2e80, 0x2e9a), (0x2e9b, 0x2ef4), (0x2f00, 0x2fd6), (0x2ff0, 0x2ffc), (0x3001, 0x303f)
    , (0x3041, 0x3097), (0x3099, 0x3100), (0x3105, 0x3130), (0x3131, 0x318f), (0x3190, 0x31bb), (0x31c0, 0x31e4), (0x31f0, 0x321f), (0x3220, 0x3248), (0x3250, 0x4db6), (0x4e00, 0x9ff0)
    , (0xa000, 0xa48d), (0xa490, 0xa4c7), (0xa960, 0xa97d), (0xac00, 0xd7a4), (0xf900, 0xfa6e), (0xfa70, 0xfada), (0xfe10, 0xfe1a), (0xfe30, 0xfe53), (0xfe54, 0xfe67), (0xfe68, 0xfe6c)
    , (0x16fe0, 0x16fe4), (0x17000, 0x187f8), (0x18800, 0x18af3), (0x1b000, 0x1b11f), (0x1b150, 0x1b153), (0x1b164, 0x1b168), (0x1b170, 0x1b2fc), (0x1f004, 0x1f005), (0x1f0cf, 0x1f0d0), (0x1f18e, 0x1f18f)
    , (0x1f191, 0x1f19b), (0x1f200, 0x1f203), (0x1f210, 0x1f23c), (0x1f240, 0x1f249), (0x1f250, 0x1f252), (0x1f260, 0x1f266), (0x1f300, 0x1f321), (0x1f32d, 0x1f336), (0x1f337, 0x1f37d), (0x1f37e, 0x1f394)
    , (0x1f3a0, 0x1f3cb), (0x1f3cf, 0x1f3d4), (0x1f3e0, 0x1f3f1), (0x1f3f4, 0x1f3f5), (0x1f3f8, 0x1f43f), (0x1f440, 0x1f441), (0x1f442, 0x1f4fd), (0x1f4ff, 0x1f53e), (0x1f54b, 0x1f54f), (0x1f550, 0x1f568)
    , (0x1f57a, 0x1f57b), (0x1f595, 0x1f597), (0x1f5a4, 0x1f5a5), (0x1f5fb, 0x1f650), (0x1f680, 0x1f6c6), (0x1f6cc, 0x1f6cd), (0x1f6d0, 0x1f6d3), (0x1f6d5, 0x1f6d6), (0x1f6eb, 0x1f6ed), (0x1f6f4, 0x1f6fb)
    , (0x1f7e0, 0x1f7ec), (0x1f90d, 0x1f972), (0x1f973, 0x1f977), (0x1f97a, 0x1f9a3), (0x1f9a5, 0x1f9ab), (0x1f9ae, 0x1f9cb), (0x1f9cd, 0x1fa00), (0x1fa70, 0x1fa74), (0x1fa78, 0x1fa7b), (0x1fa80, 0x1fa83)
    , (0x1fa90, 0x1fa96), (0x20000, 0x2a6d7), (0x2a700, 0x2b735), (0x2b740, 0x2b81e), (0x2b820, 0x2cea2), (0x2ceb0, 0x2ebe1), (0x2f800, 0x2fa1e)
    ]))
]
#category
[('Cc', (65, 2, [
    (0x0, 0x20), (0x7f, 0xa0)
    ]))
, ('Cf', (161, 20, [
    (0xad, 0xae), (0x600, 0x606), (0x61c, 0x61d), (0x6dd, 0x6de), (0x70f, 0x710), (0x8e2, 0x8e3), (0x180e, 0x180f), (0x200b, 0x2010), (0x202a, 0x202f), (0x2060, 0x2065)
    , (0x2066, 0x2070), (0xfeff, 0xff00), (0xfff9, 0xfffc), (0x110bd, 0x110be), (0x110cd, 0x110ce), (0x13430, 0x13439), (0x1bca0, 0x1bca4), (0x1d173, 0x1d17b), (0xe0001, 0xe0002), (0xe0020, 0xe0080)
    ]))
, ('Cn', (836602, 666, [
    (0x378, 0x37a), (0x380, 0x384), (0x38b, 0x38c), (0x38d, 0x38e), (0x3a2, 0x3a3), (0x530, 0x531), (0x557, 0x559), (0x58b, 0x58d), (0x590, 0x591), (0x5c8, 0x5d0)
    , (0x5eb, 0x5ef), (0x5f5, 0x600), (0x61d, 0x61e), (0x70e, 0x70f), (0x74b, 0x74d), (0x7b2, 0x7c0), (0x7fb, 0x7fd), (0x82e, 0x830), (0x83f, 0x840), (0x85c, 0x85e)
    , (0x85f, 0x860), (0x86b, 0x8a0), (0x8b5, 0x8b6), (0x8be, 0x8d3), (0x984, 0x985), (0x98d, 0x98f), (0x991, 0x993), (0x9a9, 0x9aa), (0x9b1, 0x9b2), (0x9b3, 0x9b6)
    , (0x9ba, 0x9bc), (0x9c5, 0x9c7), (0x9c9, 0x9cb), (0x9cf, 0x9d7), (0x9d8, 0x9dc), (0x9de, 0x9df), (0x9e4, 0x9e6), (0x9ff, 0xa01), (0xa04, 0xa05), (0xa0b, 0xa0f)
    , (0xa11, 0xa13), (0xa29, 0xa2a), (0xa31, 0xa32), (0xa34, 0xa35), (0xa37, 0xa38), (0xa3a, 0xa3c), (0xa3d, 0xa3e), (0xa43, 0xa47), (0xa49, 0xa4b), (0xa4e, 0xa51)
    , (0xa52, 0xa59), (0xa5d, 0xa5e), (0xa5f, 0xa66), (0xa77, 0xa81), (0xa84, 0xa85), (0xa8e, 0xa8f), (0xa92, 0xa93), (0xaa9, 0xaaa), (0xab1, 0xab2), (0xab4, 0xab5)
    , (0xaba, 0xabc), (0xac6, 0xac7), (0xaca, 0xacb), (0xace, 0xad0), (0xad1, 0xae0), (0xae4, 0xae6), (0xaf2, 0xaf9), (0xb00, 0xb01), (0xb04, 0xb05), (0xb0d, 0xb0f)
    , (0xb11, 0xb13), (0xb29, 0xb2a), (0xb31, 0xb32), (0xb34, 0xb35), (0xb3a, 0xb3c), (0xb45, 0xb47), (0xb49, 0xb4b), (0xb4e, 0xb56), (0xb58, 0xb5c), (0xb5e, 0xb5f)
    , (0xb64, 0xb66), (0xb78, 0xb82), (0xb84, 0xb85), (0xb8b, 0xb8e), (0xb91, 0xb92), (0xb96, 0xb99), (0xb9b, 0xb9c), (0xb9d, 0xb9e), (0xba0, 0xba3), (0xba5, 0xba8)
    , (0xbab, 0xbae), (0xbba, 0xbbe), (0xbc3, 0xbc6), (0xbc9, 0xbca), (0xbce, 0xbd0), (0xbd1, 0xbd7), (0xbd8, 0xbe6), (0xbfb, 0xc00), (0xc0d, 0xc0e), (0xc11, 0xc12)
    , (0xc29, 0xc2a), (0xc3a, 0xc3d), (0xc45, 0xc46), (0xc49, 0xc4a), (0xc4e, 0xc55), (0xc57, 0xc58), (0xc5b, 0xc60), (0xc64, 0xc66), (0xc70, 0xc77), (0xc8d, 0xc8e)
    , (0xc91, 0xc92), (0xca9, 0xcaa), (0xcb4, 0xcb5), (0xcba, 0xcbc), (0xcc5, 0xcc6), (0xcc9, 0xcca), (0xcce, 0xcd5), (0xcd7, 0xcde), (0xcdf, 0xce0), (0xce4, 0xce6)
    , (0xcf0, 0xcf1), (0xcf3, 0xd00), (0xd04, 0xd05), (0xd0d, 0xd0e), (0xd11, 0xd12), (0xd45, 0xd46), (0xd49, 0xd4a), (0xd50, 0xd54), (0xd64, 0xd66), (0xd80, 0xd82)
    , (0xd84, 0xd85), (0xd97, 0xd9a), (0xdb2, 0xdb3), (0xdbc, 0xdbd), (0xdbe, 0xdc0), (0xdc7, 0xdca), (0xdcb, 0xdcf), (0xdd5, 0xdd6), (0xdd7, 0xdd8), (0xde0, 0xde6)
    , (0xdf0, 0xdf2), (0xdf5, 0xe01), (0xe3b, 0xe3f), (0xe5c, 0xe81), (0xe83, 0xe84), (0xe85, 0xe86), (0xe8b, 0xe8c), (0xea4, 0xea5), (0xea6, 0xea7), (0xebe, 0xec0)
    , (0xec5, 0xec6), (0xec7, 0xec8), (0xece, 0xed0), (0xeda, 0xedc), (0xee0, 0xf00), (0xf48, 0xf49), (0xf6d, 0xf71), (0xf98, 0xf99), (0xfbd, 0xfbe), (0xfcd, 0xfce)
    , (0xfdb, 0x1000), (0x10c6, 0x10c7), (0x10c8, 0x10cd), (0x10ce, 0x10d0), (0x1249, 0x124a), (0x124e, 0x1250), (0x1257, 0x1258), (0x1259, 0x125a), (0x125e, 0x1260), (0x1289, 0x128a)
    , (0x128e, 0x1290), (0x12b1, 0x12b2), (0x12b6, 0x12b8), (0x12bf, 0x12c0), (0x12c1, 0x12c2), (0x12c6, 0x12c8), (0x12d7, 0x12d8), (0x1311, 0x1312), (0x1316, 0x1318), (0x135b, 0x135d)
    , (0x137d, 0x1380), (0x139a, 0x13a0), (0x13f6, 0x13f8), (0x13fe, 0x1400), (0x169d, 0x16a0), (0x16f9, 0x1700), (0x170d, 0x170e), (0x1715, 0x1720), (0x1737, 0x1740), (0x1754, 0x1760)
    , (0x176d, 0x176e), (0x1771, 0x1772), (0x1774, 0x1780), (0x17de, 0x17e0), (0x17ea, 0x17f0), (0x17fa, 0x1800), (0x180f, 0x1810), (0x181a, 0x1820), (0x1879, 0x1880), (0x18ab, 0x18b0)
    , (0x18f6, 0x1900), (0x191f, 0x1920), (0x192c, 0x1930), (0x193c, 0x1940), (0x1941, 0x1944), (0x196e, 0x1970), (0x1975, 0x1980), (0x19ac, 0x19b0), (0x19ca, 0x19d0), (0x19db, 0x19de)
    , (0x1a1c, 0x1a1e), (0x1a5f, 0x1a60), (0x1a7d, 0x1a7f), (0x1a8a, 0x1a90), (0x1a9a, 0x1aa0), (0x1aae, 0x1ab0), (0x1abf, 0x1b00), (0x1b4c, 0x1b50), (0x1b7d, 0x1b80), (0x1bf4, 0x1bfc)
    , (0x1c38, 0x1c3b), (0x1c4a, 0x1c4d), (0x1c89, 0x1c90), (0x1cbb, 0x1cbd), (0x1cc8, 0x1cd0), (0x1cfb, 0x1d00), (0x1dfa, 0x1dfb), (0x1f16, 0x1f18), (0x1f1e, 0x1f20), (0x1f46, 0x1f48)
    , (0x1f4e, 0x1f50), (0x1f58, 0x1f59), (0x1f5a, 0x1f5b), (0x1f5c, 0x1f5d), (0x1f5e, 0x1f5f), (0x1f7e, 0x1f80), (0x1fb5, 0x1fb6), (0x1fc5, 0x1fc6), (0x1fd4, 0x1fd6), (0x1fdc, 0x1fdd)
    , (0x1ff0, 0x1ff2), (0x1ff5, 0x1ff6), (0x1fff, 0x2000), (0x2065, 0x2066), (0x2072, 0x2074), (0x208f, 0x2090), (0x209d, 0x20a0), (0x20c0, 0x20d0), (0x20f1, 0x2100), (0x218c, 0x2190)
    , (0x2427, 0x2440), (0x244b, 0x2460), (0x2b74, 0x2b76), (0x2b96, 0x2b98), (0x2c2f, 0x2c30), (0x2c5f, 0x2c60), (0x2cf4, 0x2cf9), (0x2d26, 0x2d27), (0x2d28, 0x2d2d), (0x2d2e, 0x2d30)
    , (0x2d68, 0x2d6f), (0x2d71, 0x2d7f), (0x2d97, 0x2da0), (0x2da7, 0x2da8), (0x2daf, 0x2db0), (0x2db7, 0x2db8), (0x2dbf, 0x2dc0), (0x2dc7, 0x2dc8), (0x2dcf, 0x2dd0), (0x2dd7, 0x2dd8)
    , (0x2ddf, 0x2de0), (0x2e50, 0x2e80), (0x2e9a, 0x2e9b), (0x2ef4, 0x2f00), (0x2fd6, 0x2ff0), (0x2ffc, 0x3000), (0x3040, 0x3041), (0x3097, 0x3099), (0x3100, 0x3105), (0x3130, 0x3131)
    , (0x318f, 0x3190), (0x31bb, 0x31c0), (0x31e4, 0x31f0), (0x321f, 0x3220), (0x4db6, 0x4dc0), (0x9ff0, 0xa000), (0xa48d, 0xa490), (0xa4c7, 0xa4d0), (0xa62c, 0xa640), (0xa6f8, 0xa700)
    , (0xa7c0, 0xa7c2), (0xa7c7, 0xa7f7), (0xa82c, 0xa830), (0xa83a, 0xa840), (0xa878, 0xa880), (0xa8c6, 0xa8ce), (0xa8da, 0xa8e0), (0xa954, 0xa95f), (0xa97d, 0xa980), (0xa9ce, 0xa9cf)
    , (0xa9da, 0xa9de), (0xa9ff, 0xaa00), (0xaa37, 0xaa40), (0xaa4e, 0xaa50), (0xaa5a, 0xaa5c), (0xaac3, 0xaadb), (0xaaf7, 0xab01), (0xab07, 0xab09), (0xab0f, 0xab11), (0xab17, 0xab20)
    , (0xab27, 0xab28), (0xab2f, 0xab30), (0xab68, 0xab70), (0xabee, 0xabf0), (0xabfa, 0xac00), (0xd7a4, 0xd7b0), (0xd7c7, 0xd7cb), (0xd7fc, 0xd800), (0xfa6e, 0xfa70), (0xfada, 0xfb00)
    , (0xfb07, 0xfb13), (0xfb18, 0xfb1d), (0xfb37, 0xfb38), (0xfb3d, 0xfb3e), (0xfb3f, 0xfb40), (0xfb42, 0xfb43), (0xfb45, 0xfb46), (0xfbc2, 0xfbd3), (0xfd40, 0xfd50), (0xfd90, 0xfd92)
    , (0xfdc8, 0xfdf0), (0xfdfe, 0xfe00), (0xfe1a, 0xfe20), (0xfe53, 0xfe54), (0xfe67, 0xfe68), (0xfe6c, 0xfe70), (0xfe75, 0xfe76), (0xfefd, 0xfeff), (0xff00, 0xff01), (0xffbf, 0xffc2)
    , (0xffc8, 0xffca), (0xffd0, 0xffd2), (0xffd8, 0xffda), (0xffdd, 0xffe0), (0xffe7, 0xffe8), (0xffef, 0xfff9), (0xfffe, 0x10000), (0x1000c, 0x1000d), (0x10027, 0x10028), (0x1003b, 0x1003c)
    , (0x1003e, 0x1003f), (0x1004e, 0x10050), (0x1005e, 0x10080), (0x100fb, 0x10100), (0x10103, 0x10107), (0x10134, 0x10137), (0x1018f, 0x10190), (0x1019c, 0x101a0), (0x101a1, 0x101d0), (0x101fe, 0x10280)
    , (0x1029d, 0x102a0), (0x102d1, 0x102e0), (0x102fc, 0x10300), (0x10324, 0x1032d), (0x1034b, 0x10350), (0x1037b, 0x10380), (0x1039e, 0x1039f), (0x103c4, 0x103c8), (0x103d6, 0x10400), (0x1049e, 0x104a0)
    , (0x104aa, 0x104b0), (0x104d4, 0x104d8), (0x104fc, 0x10500), (0x10528, 0x10530), (0x10564, 0x1056f), (0x10570, 0x10600), (0x10737, 0x10740), (0x10756, 0x10760), (0x10768, 0x10800), (0x10806, 0x10808)
    , (0x10809, 0x1080a), (0x10836, 0x10837), (0x10839, 0x1083c), (0x1083d, 0x1083f), (0x10856, 0x10857), (0x1089f, 0x108a7), (0x108b0, 0x108e0), (0x108f3, 0x108f4), (0x108f6, 0x108fb), (0x1091c, 0x1091f)
    , (0x1093a, 0x1093f), (0x10940, 0x10980), (0x109b8, 0x109bc), (0x109d0, 0x109d2), (0x10a04, 0x10a05), (0x10a07, 0x10a0c), (0x10a14, 0x10a15), (0x10a18, 0x10a19), (0x10a36, 0x10a38), (0x10a3b, 0x10a3f)
    , (0x10a49, 0x10a50), (0x10a59, 0x10a60), (0x10aa0, 0x10ac0), (0x10ae7, 0x10aeb), (0x10af7, 0x10b00), (0x10b36, 0x10b39), (0x10b56, 0x10b58), (0x10b73, 0x10b78), (0x10b92, 0x10b99), (0x10b9d, 0x10ba9)
    , (0x10bb0, 0x10c00), (0x10c49, 0x10c80), (0x10cb3, 0x10cc0), (0x10cf3, 0x10cfa), (0x10d28, 0x10d30), (0x10d3a, 0x10e60), (0x10e7f, 0x10f00), (0x10f28, 0x10f30), (0x10f5a, 0x10fe0), (0x10ff7, 0x11000)
    , (0x1104e, 0x11052), (0x11070, 0x1107f), (0x110c2, 0x110cd), (0x110ce, 0x110d0), (0x110e9, 0x110f0), (0x110fa, 0x11100), (0x11135, 0x11136), (0x11147, 0x11150), (0x11177, 0x11180), (0x111ce, 0x111d0)
    , (0x111e0, 0x111e1), (0x111f5, 0x11200), (0x11212, 0x11213), (0x1123f, 0x11280), (0x11287, 0x11288), (0x11289, 0x1128a), (0x1128e, 0x1128f), (0x1129e, 0x1129f), (0x112aa, 0x112b0), (0x112eb, 0x112f0)
    , (0x112fa, 0x11300), (0x11304, 0x11305), (0x1130d, 0x1130f), (0x11311, 0x11313), (0x11329, 0x1132a), (0x11331, 0x11332), (0x11334, 0x11335), (0x1133a, 0x1133b), (0x11345, 0x11347), (0x11349, 0x1134b)
    , (0x1134e, 0x11350), (0x11351, 0x11357), (0x11358, 0x1135d), (0x11364, 0x11366), (0x1136d, 0x11370), (0x11375, 0x11400), (0x1145a, 0x1145b), (0x1145c, 0x1145d), (0x11460, 0x11480), (0x114c8, 0x114d0)
    , (0x114da, 0x11580), (0x115b6, 0x115b8), (0x115de, 0x11600), (0x11645, 0x11650), (0x1165a, 0x11660), (0x1166d, 0x11680), (0x116b9, 0x116c0), (0x116ca, 0x11700), (0x1171b, 0x1171d), (0x1172c, 0x11730)
    , (0x11740, 0x11800), (0x1183c, 0x118a0), (0x118f3, 0x118ff), (0x11900, 0x119a0), (0x119a8, 0x119aa), (0x119d8, 0x119da), (0x119e5, 0x11a00), (0x11a48, 0x11a50), (0x11aa3, 0x11ac0), (0x11af9, 0x11c00)
    , (0x11c09, 0x11c0a), (0x11c37, 0x11c38), (0x11c46, 0x11c50), (0x11c6d, 0x11c70), (0x11c90, 0x11c92), (0x11ca8, 0x11ca9), (0x11cb7, 0x11d00), (0x11d07, 0x11d08), (0x11d0a, 0x11d0b), (0x11d37, 0x11d3a)
    , (0x11d3b, 0x11d3c), (0x11d3e, 0x11d3f), (0x11d48, 0x11d50), (0x11d5a, 0x11d60), (0x11d66, 0x11d67), (0x11d69, 0x11d6a), (0x11d8f, 0x11d90), (0x11d92, 0x11d93), (0x11d99, 0x11da0), (0x11daa, 0x11ee0)
    , (0x11ef9, 0x11fc0), (0x11ff2, 0x11fff), (0x1239a, 0x12400), (0x1246f, 0x12470), (0x12475, 0x12480), (0x12544, 0x13000), (0x1342f, 0x13430), (0x13439, 0x14400), (0x14647, 0x16800), (0x16a39, 0x16a40)
    , (0x16a5f, 0x16a60), (0x16a6a, 0x16a6e), (0x16a70, 0x16ad0), (0x16aee, 0x16af0), (0x16af6, 0x16b00), (0x16b46, 0x16b50), (0x16b5a, 0x16b5b), (0x16b62, 0x16b63), (0x16b78, 0x16b7d), (0x16b90, 0x16e40)
    , (0x16e9b, 0x16f00), (0x16f4b, 0x16f4f), (0x16f88, 0x16f8f), (0x16fa0, 0x16fe0), (0x16fe4, 0x17000), (0x187f8, 0x18800), (0x18af3, 0x1b000), (0x1b11f, 0x1b150), (0x1b153, 0x1b164), (0x1b168, 0x1b170)
    , (0x1b2fc, 0x1bc00), (0x1bc6b, 0x1bc70), (0x1bc7d, 0x1bc80), (0x1bc89, 0x1bc90), (0x1bc9a, 0x1bc9c), (0x1bca4, 0x1d000), (0x1d0f6, 0x1d100), (0x1d127, 0x1d129), (0x1d1e9, 0x1d200), (0x1d246, 0x1d2e0)
    , (0x1d2f4, 0x1d300), (0x1d357, 0x1d360), (0x1d379, 0x1d400), (0x1d455, 0x1d456), (0x1d49d, 0x1d49e), (0x1d4a0, 0x1d4a2), (0x1d4a3, 0x1d4a5), (0x1d4a7, 0x1d4a9), (0x1d4ad, 0x1d4ae), (0x1d4ba, 0x1d4bb)
    , (0x1d4bc, 0x1d4bd), (0x1d4c4, 0x1d4c5), (0x1d506, 0x1d507), (0x1d50b, 0x1d50d), (0x1d515, 0x1d516), (0x1d51d, 0x1d51e), (0x1d53a, 0x1d53b), (0x1d53f, 0x1d540), (0x1d545, 0x1d546), (0x1d547, 0x1d54a)
    , (0x1d551, 0x1d552), (0x1d6a6, 0x1d6a8), (0x1d7cc, 0x1d7ce), (0x1da8c, 0x1da9b), (0x1daa0, 0x1daa1), (0x1dab0, 0x1e000), (0x1e007, 0x1e008), (0x1e019, 0x1e01b), (0x1e022, 0x1e023), (0x1e025, 0x1e026)
    , (0x1e02b, 0x1e100), (0x1e12d, 0x1e130), (0x1e13e, 0x1e140), (0x1e14a, 0x1e14e), (0x1e150, 0x1e2c0), (0x1e2fa, 0x1e2ff), (0x1e300, 0x1e800), (0x1e8c5, 0x1e8c7), (0x1e8d7, 0x1e900), (0x1e94c, 0x1e950)
    , (0x1e95a, 0x1e95e), (0x1e960, 0x1ec71), (0x1ecb5, 0x1ed01), (0x1ed3e, 0x1ee00), (0x1ee04, 0x1ee05), (0x1ee20, 0x1ee21), (0x1ee23, 0x1ee24), (0x1ee25, 0x1ee27), (0x1ee28, 0x1ee29), (0x1ee33, 0x1ee34)
    , (0x1ee38, 0x1ee39), (0x1ee3a, 0x1ee3b), (0x1ee3c, 0x1ee42), (0x1ee43, 0x1ee47), (0x1ee48, 0x1ee49), (0x1ee4a, 0x1ee4b), (0x1ee4c, 0x1ee4d), (0x1ee50, 0x1ee51), (0x1ee53, 0x1ee54), (0x1ee55, 0x1ee57)
    , (0x1ee58, 0x1ee59), (0x1ee5a, 0x1ee5b), (0x1ee5c, 0x1ee5d), (0x1ee5e, 0x1ee5f), (0x1ee60, 0x1ee61), (0x1ee63, 0x1ee64), (0x1ee65, 0x1ee67), (0x1ee6b, 0x1ee6c), (0x1ee73, 0x1ee74), (0x1ee78, 0x1ee79)
    , (0x1ee7d, 0x1ee7e), (0x1ee7f, 0x1ee80), (0x1ee8a, 0x1ee8b), (0x1ee9c, 0x1eea1), (0x1eea4, 0x1eea5), (0x1eeaa, 0x1eeab), (0x1eebc, 0x1eef0), (0x1eef2, 0x1f000), (0x1f02c, 0x1f030), (0x1f094, 0x1f0a0)
    , (0x1f0af, 0x1f0b1), (0x1f0c0, 0x1f0c1), (0x1f0d0, 0x1f0d1), (0x1f0f6, 0x1f100), (0x1f10d, 0x1f110), (0x1f16d, 0x1f170), (0x1f1ad, 0x1f1e6), (0x1f203, 0x1f210), (0x1f23c, 0x1f240), (0x1f249, 0x1f250)
    , (0x1f252, 0x1f260), (0x1f266, 0x1f300), (0x1f6d6, 0x1f6e0), (0x1f6ed, 0x1f6f0), (0x1f6fb, 0x1f700), (0x1f774, 0x1f780), (0x1f7d9, 0x1f7e0), (0x1f7ec, 0x1f800), (0x1f80c, 0x1f810), (0x1f848, 0x1f850)
    , (0x1f85a, 0x1f860), (0x1f888, 0x1f890), (0x1f8ae, 0x1f900), (0x1f90c, 0x1f90d), (0x1f972, 0x1f973), (0x1f977, 0x1f97a), (0x1f9a3, 0x1f9a5), (0x1f9ab, 0x1f9ae), (0x1f9cb, 0x1f9cd), (0x1fa54, 0x1fa60)
    , (0x1fa6e, 0x1fa70), (0x1fa74, 0x1fa78), (0x1fa7b, 0x1fa80), (0x1fa83, 0x1fa90), (0x1fa96, 0x20000), (0x2a6d7, 0x2a700), (0x2b735, 0x2b740), (0x2b81e, 0x2b820), (0x2cea2, 0x2ceb0), (0x2ebe1, 0x2f800)
    , (0x2fa1e, 0xe0001), (0xe0002, 0xe0020), (0xe0080, 0xe0100), (0xe01f0, 0xf0000), (0xffffe, 0x100000), (0x10fffe, 0x110000)
    ]))
, ('Co', (137468, 3, [
    (0xe000, 0xf900), (0xf0000, 0xffffe), (0x100000, 0x10fffe)
    ]))
, ('Cs', (2048, 1, [
    (0xd800, 0xe000)
    ]))
, ('Ll', (2151, 642, [
    (0x61, 0x7b), (0xb5, 0xb6), (0xdf, 0xf7), (0xf8, 0x100), (0x101, 0x102), (0x103, 0x104), (0x105, 0x106), (0x107, 0x108), (0x109, 0x10a), (0x10b, 0x10c)
    , (0x10d, 0x10e), (0x10f, 0x110), (0x111, 0x112), (0x113, 0x114), (0x115, 0x116), (0x117, 0x118), (0x119, 0x11a), (0x11b, 0x11c), (0x11d, 0x11e), (0x11f, 0x120)
    , (0x121, 0x122), (0x123, 0x124), (0x125, 0x126), (0x127, 0x128), (0x129, 0x12a), (0x12b, 0x12c), (0x12d, 0x12e), (0x12f, 0x130), (0x131, 0x132), (0x133, 0x134)
    , (0x135, 0x136), (0x137, 0x139), (0x13a, 0x13b), (0x13c, 0x13d), (0x13e, 0x13f), (0x140, 0x141), (0x142, 0x143), (0x144, 0x145), (0x146, 0x147), (0x148, 0x14a)
    , (0x14b, 0x14c), (0x14d, 0x14e), (0x14f, 0x150), (0x151, 0x152), (0x153, 0x154), (0x155, 0x156), (0x157, 0x158), (0x159, 0x15a), (0x15b, 0x15c), (0x15d, 0x15e)
    , (0x15f, 0x160), (0x161, 0x162), (0x163, 0x164), (0x165, 0x166), (0x167, 0x168), (0x169, 0x16a), (0x16b, 0x16c), (0x16d, 0x16e), (0x16f, 0x170), (0x171, 0x172)
    , (0x173, 0x174), (0x175, 0x176), (0x177, 0x178), (0x17a, 0x17b), (0x17c, 0x17d), (0x17e, 0x181), (0x183, 0x184), (0x185, 0x186), (0x188, 0x189), (0x18c, 0x18e)
    , (0x192, 0x193), (0x195, 0x196), (0x199, 0x19c), (0x19e, 0x19f), (0x1a1, 0x1a2), (0x1a3, 0x1a4), (0x1a5, 0x1a6), (0x1a8, 0x1a9), (0x1aa, 0x1ac), (0x1ad, 0x1ae)
    , (0x1b0, 0x1b1), (0x1b4, 0x1b5), (0x1b6, 0x1b7), (0x1b9, 0x1bb), (0x1bd, 0x1c0), (0x1c6, 0x1c7), (0x1c9, 0x1ca), (0x1cc, 0x1cd), (0x1ce, 0x1cf), (0x1d0, 0x1d1)
    , (0x1d2, 0x1d3), (0x1d4, 0x1d5), (0x1d6, 0x1d7), (0x1d8, 0x1d9), (0x1da, 0x1db), (0x1dc, 0x1de), (0x1df, 0x1e0), (0x1e1, 0x1e2), (0x1e3, 0x1e4), (0x1e5, 0x1e6)
    , (0x1e7, 0x1e8), (0x1e9, 0x1ea), (0x1eb, 0x1ec), (0x1ed, 0x1ee), (0x1ef, 0x1f1), (0x1f3, 0x1f4), (0x1f5, 0x1f6), (0x1f9, 0x1fa), (0x1fb, 0x1fc), (0x1fd, 0x1fe)
    , (0x1ff, 0x200), (0x201, 0x202), (0x203, 0x204), (0x205, 0x206), (0x207, 0x208), (0x209, 0x20a), (0x20b, 0x20c), (0x20d, 0x20e), (0x20f, 0x210), (0x211, 0x212)
    , (0x213, 0x214), (0x215, 0x216), (0x217, 0x218), (0x219, 0x21a), (0x21b, 0x21c), (0x21d, 0x21e), (0x21f, 0x220), (0x221, 0x222), (0x223, 0x224), (0x225, 0x226)
    , (0x227, 0x228), (0x229, 0x22a), (0x22b, 0x22c), (0x22d, 0x22e), (0x22f, 0x230), (0x231, 0x232), (0x233, 0x23a), (0x23c, 0x23d), (0x23f, 0x241), (0x242, 0x243)
    , (0x247, 0x248), (0x249, 0x24a), (0x24b, 0x24c), (0x24d, 0x24e), (0x24f, 0x294), (0x295, 0x2b0), (0x371, 0x372), (0x373, 0x374), (0x377, 0x378), (0x37b, 0x37e)
    , (0x390, 0x391), (0x3ac, 0x3cf), (0x3d0, 0x3d2), (0x3d5, 0x3d8), (0x3d9, 0x3da), (0x3db, 0x3dc), (0x3dd, 0x3de), (0x3df, 0x3e0), (0x3e1, 0x3e2), (0x3e3, 0x3e4)
    , (0x3e5, 0x3e6), (0x3e7, 0x3e8), (0x3e9, 0x3ea), (0x3eb, 0x3ec), (0x3ed, 0x3ee), (0x3ef, 0x3f4), (0x3f5, 0x3f6), (0x3f8, 0x3f9), (0x3fb, 0x3fd), (0x430, 0x460)
    , (0x461, 0x462), (0x463, 0x464), (0x465, 0x466), (0x467, 0x468), (0x469, 0x46a), (0x46b, 0x46c), (0x46d, 0x46e), (0x46f, 0x470), (0x471, 0x472), (0x473, 0x474)
    , (0x475, 0x476), (0x477, 0x478), (0x479, 0x47a), (0x47b, 0x47c), (0x47d, 0x47e), (0x47f, 0x480), (0x481, 0x482), (0x48b, 0x48c), (0x48d, 0x48e), (0x48f, 0x490)
    , (0x491, 0x492), (0x493, 0x494), (0x495, 0x496), (0x497, 0x498), (0x499, 0x49a), (0x49b, 0x49c), (0x49d, 0x49e), (0x49f, 0x4a0), (0x4a1, 0x4a2), (0x4a3, 0x4a4)
    , (0x4a5, 0x4a6), (0x4a7, 0x4a8), (0x4a9, 0x4aa), (0x4ab, 0x4ac), (0x4ad, 0x4ae), (0x4af, 0x4b0), (0x4b1, 0x4b2), (0x4b3, 0x4b4), (0x4b5, 0x4b6), (0x4b7, 0x4b8)
    , (0x4b9, 0x4ba), (0x4bb, 0x4bc), (0x4bd, 0x4be), (0x4bf, 0x4c0), (0x4c2, 0x4c3), (0x4c4, 0x4c5), (0x4c6, 0x4c7), (0x4c8, 0x4c9), (0x4ca, 0x4cb), (0x4cc, 0x4cd)
    , (0x4ce, 0x4d0), (0x4d1, 0x4d2), (0x4d3, 0x4d4), (0x4d5, 0x4d6), (0x4d7, 0x4d8), (0x4d9, 0x4da), (0x4db, 0x4dc), (0x4dd, 0x4de), (0x4df, 0x4e0), (0x4e1, 0x4e2)
    , (0x4e3, 0x4e4), (0x4e5, 0x4e6), (0x4e7, 0x4e8), (0x4e9, 0x4ea), (0x4eb, 0x4ec), (0x4ed, 0x4ee), (0x4ef, 0x4f0), (0x4f1, 0x4f2), (0x4f3, 0x4f4), (0x4f5, 0x4f6)
    , (0x4f7, 0x4f8), (0x4f9, 0x4fa), (0x4fb, 0x4fc), (0x4fd, 0x4fe), (0x4ff, 0x500), (0x501, 0x502), (0x503, 0x504), (0x505, 0x506), (0x507, 0x508), (0x509, 0x50a)
    , (0x50b, 0x50c), (0x50d, 0x50e), (0x50f, 0x510), (0x511, 0x512), (0x513, 0x514), (0x515, 0x516), (0x517, 0x518), (0x519, 0x51a), (0x51b, 0x51c), (0x51d, 0x51e)
    , (0x51f, 0x520), (0x521, 0x522), (0x523, 0x524), (0x525, 0x526), (0x527, 0x528), (0x529, 0x52a), (0x52b, 0x52c), (0x52d, 0x52e), (0x52f, 0x530), (0x560, 0x589)
    , (0x10d0, 0x10fb), (0x10fd, 0x1100), (0x13f8, 0x13fe), (0x1c80, 0x1c89), (0x1d00, 0x1d2c), (0x1d6b, 0x1d78), (0x1d79, 0x1d9b), (0x1e01, 0x1e02), (0x1e03, 0x1e04), (0x1e05, 0x1e06)
    , (0x1e07, 0x1e08), (0x1e09, 0x1e0a), (0x1e0b, 0x1e0c), (0x1e0d, 0x1e0e), (0x1e0f, 0x1e10), (0x1e11, 0x1e12), (0x1e13, 0x1e14), (0x1e15, 0x1e16), (0x1e17, 0x1e18), (0x1e19, 0x1e1a)
    , (0x1e1b, 0x1e1c), (0x1e1d, 0x1e1e), (0x1e1f, 0x1e20), (0x1e21, 0x1e22), (0x1e23, 0x1e24), (0x1e25, 0x1e26), (0x1e27, 0x1e28), (0x1e29, 0x1e2a), (0x1e2b, 0x1e2c), (0x1e2d, 0x1e2e)
    , (0x1e2f, 0x1e30), (0x1e31, 0x1e32), (0x1e33, 0x1e34), (0x1e35, 0x1e36), (0x1e37, 0x1e38), (0x1e39, 0x1e3a), (0x1e3b, 0x1e3c), (0x1e3d, 0x1e3e), (0x1e3f, 0x1e40), (0x1e41, 0x1e42)
    , (0x1e43, 0x1e44), (0x1e45, 0x1e46), (0x1e47, 0x1e48), (0x1e49, 0x1e4a), (0x1e4b, 0x1e4c), (0x1e4d, 0x1e4e), (0x1e4f, 0x1e50), (0x1e51, 0x1e52), (0x1e53, 0x1e54), (0x1e55, 0x1e56)
    , (0x1e57, 0x1e58), (0x1e59, 0x1e5a), (0x1e5b, 0x1e5c), (0x1e5d, 0x1e5e), (0x1e5f, 0x1e60), (0x1e61, 0x1e62), (0x1e63, 0x1e64), (0x1e65, 0x1e66), (0x1e67, 0x1e68), (0x1e69, 0x1e6a)
    , (0x1e6b, 0x1e6c), (0x1e6d, 0x1e6e), (0x1e6f, 0x1e70), (0x1e71, 0x1e72), (0x1e73, 0x1e74), (0x1e75, 0x1e76), (0x1e77, 0x1e78), (0x1e79, 0x1e7a), (0x1e7b, 0x1e7c), (0x1e7d, 0x1e7e)
    , (0x1e7f, 0x1e80), (0x1e81, 0x1e82), (0x1e83, 0x1e84), (0x1e85, 0x1e86), (0x1e87, 0x1e88), (0x1e89, 0x1e8a), (0x1e8b, 0x1e8c), (0x1e8d, 0x1e8e), (0x1e8f, 0x1e90), (0x1e91, 0x1e92)
    , (0x1e93, 0x1e94), (0x1e95, 0x1e9e), (0x1e9f, 0x1ea0), (0x1ea1, 0x1ea2), (0x1ea3, 0x1ea4), (0x1ea5, 0x1ea6), (0x1ea7, 0x1ea8), (0x1ea9, 0x1eaa), (0x1eab, 0x1eac), (0x1ead, 0x1eae)
    , (0x1eaf, 0x1eb0), (0x1eb1, 0x1eb2), (0x1eb3, 0x1eb4), (0x1eb5, 0x1eb6), (0x1eb7, 0x1eb8), (0x1eb9, 0x1eba), (0x1ebb, 0x1ebc), (0x1ebd, 0x1ebe), (0x1ebf, 0x1ec0), (0x1ec1, 0x1ec2)
    , (0x1ec3, 0x1ec4), (0x1ec5, 0x1ec6), (0x1ec7, 0x1ec8), (0x1ec9, 0x1eca), (0x1ecb, 0x1ecc), (0x1ecd, 0x1ece), (0x1ecf, 0x1ed0), (0x1ed1, 0x1ed2), (0x1ed3, 0x1ed4), (0x1ed5, 0x1ed6)
    , (0x1ed7, 0x1ed8), (0x1ed9, 0x1eda), (0x1edb, 0x1edc), (0x1edd, 0x1ede), (0x1edf, 0x1ee0), (0x1ee1, 0x1ee2), (0x1ee3, 0x1ee4), (0x1ee5, 0x1ee6), (0x1ee7, 0x1ee8), (0x1ee9, 0x1eea)
    , (0x1eeb, 0x1eec), (0x1eed, 0x1eee), (0x1eef, 0x1ef0), (0x1ef1, 0x1ef2), (0x1ef3, 0x1ef4), (0x1ef5, 0x1ef6), (0x1ef7, 0x1ef8), (0x1ef9, 0x1efa), (0x1efb, 0x1efc), (0x1efd, 0x1efe)
    , (0x1eff, 0x1f08), (0x1f10, 0x1f16), (0x1f20, 0x1f28), (0x1f30, 0x1f38), (0x1f40, 0x1f46), (0x1f50, 0x1f58), (0x1f60, 0x1f68), (0x1f70, 0x1f7e), (0x1f80, 0x1f88), (0x1f90, 0x1f98)
    , (0x1fa0, 0x1fa8), (0x1fb0, 0x1fb5), (0x1fb6, 0x1fb8), (0x1fbe, 0x1fbf), (0x1fc2, 0x1fc5), (0x1fc6, 0x1fc8), (0x1fd0, 0x1fd4), (0x1fd6, 0x1fd8), (0x1fe0, 0x1fe8), (0x1ff2, 0x1ff5)
    , (0x1ff6, 0x1ff8), (0x210a, 0x210b), (0x210e, 0x2110), (0x2113, 0x2114), (0x212f, 0x2130), (0x2134, 0x2135), (0x2139, 0x213a), (0x213c, 0x213e), (0x2146, 0x214a), (0x214e, 0x214f)
    , (0x2184, 0x2185), (0x2c30, 0x2c5f), (0x2c61, 0x2c62), (0x2c65, 0x2c67), (0x2c68, 0x2c69), (0x2c6a, 0x2c6b), (0x2c6c, 0x2c6d), (0x2c71, 0x2c72), (0x2c73, 0x2c75), (0x2c76, 0x2c7c)
    , (0x2c81, 0x2c82), (0x2c83, 0x2c84), (0x2c85, 0x2c86), (0x2c87, 0x2c88), (0x2c89, 0x2c8a), (0x2c8b, 0x2c8c), (0x2c8d, 0x2c8e), (0x2c8f, 0x2c90), (0x2c91, 0x2c92), (0x2c93, 0x2c94)
    , (0x2c95, 0x2c96), (0x2c97, 0x2c98), (0x2c99, 0x2c9a), (0x2c9b, 0x2c9c), (0x2c9d, 0x2c9e), (0x2c9f, 0x2ca0), (0x2ca1, 0x2ca2), (0x2ca3, 0x2ca4), (0x2ca5, 0x2ca6), (0x2ca7, 0x2ca8)
    , (0x2ca9, 0x2caa), (0x2cab, 0x2cac), (0x2cad, 0x2cae), (0x2caf, 0x2cb0), (0x2cb1, 0x2cb2), (0x2cb3, 0x2cb4), (0x2cb5, 0x2cb6), (0x2cb7, 0x2cb8), (0x2cb9, 0x2cba), (0x2cbb, 0x2cbc)
    , (0x2cbd, 0x2cbe), (0x2cbf, 0x2cc0), (0x2cc1, 0x2cc2), (0x2cc3, 0x2cc4), (0x2cc5, 0x2cc6), (0x2cc7, 0x2cc8), (0x2cc9, 0x2cca), (0x2ccb, 0x2ccc), (0x2ccd, 0x2cce), (0x2ccf, 0x2cd0)
    , (0x2cd1, 0x2cd2), (0x2cd3, 0x2cd4), (0x2cd5, 0x2cd6), (0x2cd7, 0x2cd8), (0x2cd9, 0x2cda), (0x2cdb, 0x2cdc), (0x2cdd, 0x2cde), (0x2cdf, 0x2ce0), (0x2ce1, 0x2ce2), (0x2ce3, 0x2ce5)
    , (0x2cec, 0x2ced), (0x2cee, 0x2cef), (0x2cf3, 0x2cf4), (0x2d00, 0x2d26), (0x2d27, 0x2d28), (0x2d2d, 0x2d2e), (0xa641, 0xa642), (0xa643, 0xa644), (0xa645, 0xa646), (0xa647, 0xa648)
    , (0xa649, 0xa64a), (0xa64b, 0xa64c), (0xa64d, 0xa64e), (0xa64f, 0xa650), (0xa651, 0xa652), (0xa653, 0xa654), (0xa655, 0xa656), (0xa657, 0xa658), (0xa659, 0xa65a), (0xa65b, 0xa65c)
    , (0xa65d, 0xa65e), (0xa65f, 0xa660), (0xa661, 0xa662), (0xa663, 0xa664), (0xa665, 0xa666), (0xa667, 0xa668), (0xa669, 0xa66a), (0xa66b, 0xa66c), (0xa66d, 0xa66e), (0xa681, 0xa682)
    , (0xa683, 0xa684), (0xa685, 0xa686), (0xa687, 0xa688), (0xa689, 0xa68a), (0xa68b, 0xa68c), (0xa68d, 0xa68e), (0xa68f, 0xa690), (0xa691, 0xa692), (0xa693, 0xa694), (0xa695, 0xa696)
    , (0xa697, 0xa698), (0xa699, 0xa69a), (0xa69b, 0xa69c), (0xa723, 0xa724), (0xa725, 0xa726), (0xa727, 0xa728), (0xa729, 0xa72a), (0xa72b, 0xa72c), (0xa72d, 0xa72e), (0xa72f, 0xa732)
    , (0xa733, 0xa734), (0xa735, 0xa736), (0xa737, 0xa738), (0xa739, 0xa73a), (0xa73b, 0xa73c), (0xa73d, 0xa73e), (0xa73f, 0xa740), (0xa741, 0xa742), (0xa743, 0xa744), (0xa745, 0xa746)
    , (0xa747, 0xa748), (0xa749, 0xa74a), (0xa74b, 0xa74c), (0xa74d, 0xa74e), (0xa74f, 0xa750), (0xa751, 0xa752), (0xa753, 0xa754), (0xa755, 0xa756), (0xa757, 0xa758), (0xa759, 0xa75a)
    , (0xa75b, 0xa75c), (0xa75d, 0xa75e), (0xa75f, 0xa760), (0xa761, 0xa762), (0xa763, 0xa764), (0xa765, 0xa766), (0xa767, 0xa768), (0xa769, 0xa76a), (0xa76b, 0xa76c), (0xa76d, 0xa76e)
    , (0xa76f, 0xa770), (0xa771, 0xa779), (0xa77a, 0xa77b), (0xa77c, 0xa77d), (0xa77f, 0xa780), (0xa781, 0xa782), (0xa783, 0xa784), (0xa785, 0xa786), (0xa787, 0xa788), (0xa78c, 0xa78d)
    , (0xa78e, 0xa78f), (0xa791, 0xa792), (0xa793, 0xa796), (0xa797, 0xa798), (0xa799, 0xa79a), (0xa79b, 0xa79c), (0xa79d, 0xa79e), (0xa79f, 0xa7a0), (0xa7a1, 0xa7a2), (0xa7a3, 0xa7a4)
    , (0xa7a5, 0xa7a6), (0xa7a7, 0xa7a8), (0xa7a9, 0xa7aa), (0xa7af, 0xa7b0), (0xa7b5, 0xa7b6), (0xa7b7, 0xa7b8), (0xa7b9, 0xa7ba), (0xa7bb, 0xa7bc), (0xa7bd, 0xa7be), (0xa7bf, 0xa7c0)
    , (0xa7c3, 0xa7c4), (0xa7fa, 0xa7fb), (0xab30, 0xab5b), (0xab60, 0xab68), (0xab70, 0xabc0), (0xfb00, 0xfb07), (0xfb13, 0xfb18), (0xff41, 0xff5b), (0x10428, 0x10450), (0x104d8, 0x104fc)
    , (0x10cc0, 0x10cf3), (0x118c0, 0x118e0), (0x16e60, 0x16e80), (0x1d41a, 0x1d434), (0x1d44e, 0x1d455), (0x1d456, 0x1d468), (0x1d482, 0x1d49c), (0x1d4b6, 0x1d4ba), (0x1d4bb, 0x1d4bc), (0x1d4bd, 0x1d4c4)
    , (0x1d4c5, 0x1d4d0), (0x1d4ea, 0x1d504), (0x1d51e, 0x1d538), (0x1d552, 0x1d56c), (0x1d586, 0x1d5a0), (0x1d5ba, 0x1d5d4), (0x1d5ee, 0x1d608), (0x1d622, 0x1d63c), (0x1d656, 0x1d670), (0x1d68a, 0x1d6a6)
    , (0x1d6c2, 0x1d6db), (0x1d6dc, 0x1d6e2), (0x1d6fc, 0x1d715), (0x1d716, 0x1d71c), (0x1d736, 0x1d74f), (0x1d750, 0x1d756), (0x1d770, 0x1d789), (0x1d78a, 0x1d790), (0x1d7aa, 0x1d7c3), (0x1d7c4, 0x1d7ca)
    , (0x1d7cb, 0x1d7cc), (0x1e922, 0x1e944)
    ]))
, ('Lm', (259, 60, [
    (0x2b0, 0x2c2), (0x2c6, 0x2d2), (0x2e0, 0x2e5), (0x2ec, 0x2ed), (0x2ee, 0x2ef), (0x374, 0x375), (0x37a, 0x37b), (0x559, 0x55a), (0x640, 0x641), (0x6e5, 0x6e7)
    , (0x7f4, 0x7f6), (0x7fa, 0x7fb), (0x81a, 0x81b), (0x824, 0x825), (0x828, 0x829), (0x971, 0x972), (0xe46, 0xe47), (0xec6, 0xec7), (0x10fc, 0x10fd), (0x17d7, 0x17d8)
    , (0x1843, 0x1844), (0x1aa7, 0x1aa8), (0x1c78, 0x1c7e), (0x1d2c, 0x1d6b), (0x1d78, 0x1d79), (0x1d9b, 0x1dc0), (0x2071, 0x2072), (0x207f, 0x2080), (0x2090, 0x209d), (0x2c7c, 0x2c7e)
    , (0x2d6f, 0x2d70), (0x2e2f, 0x2e30), (0x3005, 0x3006), (0x3031, 0x3036), (0x303b, 0x303c), (0x309d, 0x309f), (0x30fc, 0x30ff), (0xa015, 0xa016), (0xa4f8, 0xa4fe), (0xa60c, 0xa60d)
    , (0xa67f, 0xa680), (0xa69c, 0xa69e), (0xa717, 0xa720), (0xa770, 0xa771), (0xa788, 0xa789), (0xa7f8, 0xa7fa), (0xa9cf, 0xa9d0), (0xa9e6, 0xa9e7), (0xaa70, 0xaa71), (0xaadd, 0xaade)
    , (0xaaf3, 0xaaf5), (0xab5c, 0xab60), (0xff70, 0xff71), (0xff9e, 0xffa0), (0x16b40, 0x16b44), (0x16f93, 0x16fa0), (0x16fe0, 0x16fe2), (0x16fe3, 0x16fe4), (0x1e137, 0x1e13e), (0x1e94b, 0x1e94c)
    ]))
, ('Lo', (121414, 476, [
    (0xaa, 0xab), (0xba, 0xbb), (0x1bb, 0x1bc), (0x1c0, 0x1c4), (0x294, 0x295), (0x5d0, 0x5eb), (0x5ef, 0x5f3), (0x620, 0x640), (0x641, 0x64b), (0x66e, 0x670)
    , (0x671, 0x6d4), (0x6d5, 0x6d6), (0x6ee, 0x6f0), (0x6fa, 0x6fd), (0x6ff, 0x700), (0x710, 0x711), (0x712, 0x730), (0x74d, 0x7a6), (0x7b1, 0x7b2), (0x7ca, 0x7eb)
    , (0x800, 0x816), (0x840, 0x859), (0x860, 0x86b), (0x8a0, 0x8b5), (0x8b6, 0x8be), (0x904, 0x93a), (0x93d, 0x93e), (0x950, 0x951), (0x958, 0x962), (0x972, 0x981)
    , (0x985, 0x98d), (0x98f, 0x991), (0x993, 0x9a9), (0x9aa, 0x9b1), (0x9b2, 0x9b3), (0x9b6, 0x9ba), (0x9bd, 0x9be), (0x9ce, 0x9cf), (0x9dc, 0x9de), (0x9df, 0x9e2)
    , (0x9f0, 0x9f2), (0x9fc, 0x9fd), (0xa05, 0xa0b), (0xa0f, 0xa11), (0xa13, 0xa29), (0xa2a, 0xa31), (0xa32, 0xa34), (0xa35, 0xa37), (0xa38, 0xa3a), (0xa59, 0xa5d)
    , (0xa5e, 0xa5f), (0xa72, 0xa75), (0xa85, 0xa8e), (0xa8f, 0xa92), (0xa93, 0xaa9), (0xaaa, 0xab1), (0xab2, 0xab4), (0xab5, 0xaba), (0xabd, 0xabe), (0xad0, 0xad1)
    , (0xae0, 0xae2), (0xaf9, 0xafa), (0xb05, 0xb0d), (0xb0f, 0xb11), (0xb13, 0xb29), (0xb2a, 0xb31), (0xb32, 0xb34), (0xb35, 0xb3a), (0xb3d, 0xb3e), (0xb5c, 0xb5e)
    , (0xb5f, 0xb62), (0xb71, 0xb72), (0xb83, 0xb84), (0xb85, 0xb8b), (0xb8e, 0xb91), (0xb92, 0xb96), (0xb99, 0xb9b), (0xb9c, 0xb9d), (0xb9e, 0xba0), (0xba3, 0xba5)
    , (0xba8, 0xbab), (0xbae, 0xbba), (0xbd0, 0xbd1), (0xc05, 0xc0d), (0xc0e, 0xc11), (0xc12, 0xc29), (0xc2a, 0xc3a), (0xc3d, 0xc3e), (0xc58, 0xc5b), (0xc60, 0xc62)
    , (0xc80, 0xc81), (0xc85, 0xc8d), (0xc8e, 0xc91), (0xc92, 0xca9), (0xcaa, 0xcb4), (0xcb5, 0xcba), (0xcbd, 0xcbe), (0xcde, 0xcdf), (0xce0, 0xce2), (0xcf1, 0xcf3)
    , (0xd05, 0xd0d), (0xd0e, 0xd11), (0xd12, 0xd3b), (0xd3d, 0xd3e), (0xd4e, 0xd4f), (0xd54, 0xd57), (0xd5f, 0xd62), (0xd7a, 0xd80), (0xd85, 0xd97), (0xd9a, 0xdb2)
    , (0xdb3, 0xdbc), (0xdbd, 0xdbe), (0xdc0, 0xdc7), (0xe01, 0xe31), (0xe32, 0xe34), (0xe40, 0xe46), (0xe81, 0xe83), (0xe84, 0xe85), (0xe86, 0xe8b), (0xe8c, 0xea4)
    , (0xea5, 0xea6), (0xea7, 0xeb1), (0xeb2, 0xeb4), (0xebd, 0xebe), (0xec0, 0xec5), (0xedc, 0xee0), (0xf00, 0xf01), (0xf40, 0xf48), (0xf49, 0xf6d), (0xf88, 0xf8d)
    , (0x1000, 0x102b), (0x103f, 0x1040), (0x1050, 0x1056), (0x105a, 0x105e), (0x1061, 0x1062), (0x1065, 0x1067), (0x106e, 0x1071), (0x1075, 0x1082), (0x108e, 0x108f), (0x1100, 0x1249)
    , (0x124a, 0x124e), (0x1250, 0x1257), (0x1258, 0x1259), (0x125a, 0x125e), (0x1260, 0x1289), (0x128a, 0x128e), (0x1290, 0x12b1), (0x12b2, 0x12b6), (0x12b8, 0x12bf), (0x12c0, 0x12c1)
    , (0x12c2, 0x12c6), (0x12c8, 0x12d7), (0x12d8, 0x1311), (0x1312, 0x1316), (0x1318, 0x135b), (0x1380, 0x1390), (0x1401, 0x166d), (0x166f, 0x1680), (0x1681, 0x169b), (0x16a0, 0x16eb)
    , (0x16f1, 0x16f9), (0x1700, 0x170d), (0x170e, 0x1712), (0x1720, 0x1732), (0x1740, 0x1752), (0x1760, 0x176d), (0x176e, 0x1771), (0x1780, 0x17b4), (0x17dc, 0x17dd), (0x1820, 0x1843)
    , (0x1844, 0x1879), (0x1880, 0x1885), (0x1887, 0x18a9), (0x18aa, 0x18ab), (0x18b0, 0x18f6), (0x1900, 0x191f), (0x1950, 0x196e), (0x1970, 0x1975), (0x1980, 0x19ac), (0x19b0, 0x19ca)
    , (0x1a00, 0x1a17), (0x1a20, 0x1a55), (0x1b05, 0x1b34), (0x1b45, 0x1b4c), (0x1b83, 0x1ba1), (0x1bae, 0x1bb0), (0x1bba, 0x1be6), (0x1c00, 0x1c24), (0x1c4d, 0x1c50), (0x1c5a, 0x1c78)
    , (0x1ce9, 0x1ced), (0x1cee, 0x1cf4), (0x1cf5, 0x1cf7), (0x1cfa, 0x1cfb), (0x2135, 0x2139), (0x2d30, 0x2d68), (0x2d80, 0x2d97), (0x2da0, 0x2da7), (0x2da8, 0x2daf), (0x2db0, 0x2db7)
    , (0x2db8, 0x2dbf), (0x2dc0, 0x2dc7), (0x2dc8, 0x2dcf), (0x2dd0, 0x2dd7), (0x2dd8, 0x2ddf), (0x3006, 0x3007), (0x303c, 0x303d), (0x3041, 0x3097), (0x309f, 0x30a0), (0x30a1, 0x30fb)
    , (0x30ff, 0x3100), (0x3105, 0x3130), (0x3131, 0x318f), (0x31a0, 0x31bb), (0x31f0, 0x3200), (0x3400, 0x4db6), (0x4e00, 0x9ff0), (0xa000, 0xa015), (0xa016, 0xa48d), (0xa4d0, 0xa4f8)
    , (0xa500, 0xa60c), (0xa610, 0xa620), (0xa62a, 0xa62c), (0xa66e, 0xa66f), (0xa6a0, 0xa6e6), (0xa78f, 0xa790), (0xa7f7, 0xa7f8), (0xa7fb, 0xa802), (0xa803, 0xa806), (0xa807, 0xa80b)
    , (0xa80c, 0xa823), (0xa840, 0xa874), (0xa882, 0xa8b4), (0xa8f2, 0xa8f8), (0xa8fb, 0xa8fc), (0xa8fd, 0xa8ff), (0xa90a, 0xa926), (0xa930, 0xa947), (0xa960, 0xa97d), (0xa984, 0xa9b3)
    , (0xa9e0, 0xa9e5), (0xa9e7, 0xa9f0), (0xa9fa, 0xa9ff), (0xaa00, 0xaa29), (0xaa40, 0xaa43), (0xaa44, 0xaa4c), (0xaa60, 0xaa70), (0xaa71, 0xaa77), (0xaa7a, 0xaa7b), (0xaa7e, 0xaab0)
    , (0xaab1, 0xaab2), (0xaab5, 0xaab7), (0xaab9, 0xaabe), (0xaac0, 0xaac1), (0xaac2, 0xaac3), (0xaadb, 0xaadd), (0xaae0, 0xaaeb), (0xaaf2, 0xaaf3), (0xab01, 0xab07), (0xab09, 0xab0f)
    , (0xab11, 0xab17), (0xab20, 0xab27), (0xab28, 0xab2f), (0xabc0, 0xabe3), (0xac00, 0xd7a4), (0xd7b0, 0xd7c7), (0xd7cb, 0xd7fc), (0xf900, 0xfa6e), (0xfa70, 0xfada), (0xfb1d, 0xfb1e)
    , (0xfb1f, 0xfb29), (0xfb2a, 0xfb37), (0xfb38, 0xfb3d), (0xfb3e, 0xfb3f), (0xfb40, 0xfb42), (0xfb43, 0xfb45), (0xfb46, 0xfbb2), (0xfbd3, 0xfd3e), (0xfd50, 0xfd90), (0xfd92, 0xfdc8)
    , (0xfdf0, 0xfdfc), (0xfe70, 0xfe75), (0xfe76, 0xfefd), (0xff66, 0xff70), (0xff71, 0xff9e), (0xffa0, 0xffbf), (0xffc2, 0xffc8), (0xffca, 0xffd0), (0xffd2, 0xffd8), (0xffda, 0xffdd)
    , (0x10000, 0x1000c), (0x1000d, 0x10027), (0x10028, 0x1003b), (0x1003c, 0x1003e), (0x1003f, 0x1004e), (0x10050, 0x1005e), (0x10080, 0x100fb), (0x10280, 0x1029d), (0x102a0, 0x102d1), (0x10300, 0x10320)
    , (0x1032d, 0x10341), (0x10342, 0x1034a), (0x10350, 0x10376), (0x10380, 0x1039e), (0x103a0, 0x103c4), (0x103c8, 0x103d0), (0x10450, 0x1049e), (0x10500, 0x10528), (0x10530, 0x10564), (0x10600, 0x10737)
    , (0x10740, 0x10756), (0x10760, 0x10768), (0x10800, 0x10806), (0x10808, 0x10809), (0x1080a, 0x10836), (0x10837, 0x10839), (0x1083c, 0x1083d), (0x1083f, 0x10856), (0x10860, 0x10877), (0x10880, 0x1089f)
    , (0x108e0, 0x108f3), (0x108f4, 0x108f6), (0x10900, 0x10916), (0x10920, 0x1093a), (0x10980, 0x109b8), (0x109be, 0x109c0), (0x10a00, 0x10a01), (0x10a10, 0x10a14), (0x10a15, 0x10a18), (0x10a19, 0x10a36)
    , (0x10a60, 0x10a7d), (0x10a80, 0x10a9d), (0x10ac0, 0x10ac8), (0x10ac9, 0x10ae5), (0x10b00, 0x10b36), (0x10b40, 0x10b56), (0x10b60, 0x10b73), (0x10b80, 0x10b92), (0x10c00, 0x10c49), (0x10d00, 0x10d24)
    , (0x10f00, 0x10f1d), (0x10f27, 0x10f28), (0x10f30, 0x10f46), (0x10fe0, 0x10ff7), (0x11003, 0x11038), (0x11083, 0x110b0), (0x110d0, 0x110e9), (0x11103, 0x11127), (0x11144, 0x11145), (0x11150, 0x11173)
    , (0x11176, 0x11177), (0x11183, 0x111b3), (0x111c1, 0x111c5), (0x111da, 0x111db), (0x111dc, 0x111dd), (0x11200, 0x11212), (0x11213, 0x1122c), (0x11280, 0x11287), (0x11288, 0x11289), (0x1128a, 0x1128e)
    , (0x1128f, 0x1129e), (0x1129f, 0x112a9), (0x112b0, 0x112df), (0x11305, 0x1130d), (0x1130f, 0x11311), (0x11313, 0x11329), (0x1132a, 0x11331), (0x11332, 0x11334), (0x11335, 0x1133a), (0x1133d, 0x1133e)
    , (0x11350, 0x11351), (0x1135d, 0x11362), (0x11400, 0x11435), (0x11447, 0x1144b), (0x1145f, 0x11460), (0x11480, 0x114b0), (0x114c4, 0x114c6), (0x114c7, 0x114c8), (0x11580, 0x115af), (0x115d8, 0x115dc)
    , (0x11600, 0x11630), (0x11644, 0x11645), (0x11680, 0x116ab), (0x116b8, 0x116b9), (0x11700, 0x1171b), (0x11800, 0x1182c), (0x118ff, 0x11900), (0x119a0, 0x119a8), (0x119aa, 0x119d1), (0x119e1, 0x119e2)
    , (0x119e3, 0x119e4), (0x11a00, 0x11a01), (0x11a0b, 0x11a33), (0x11a3a, 0x11a3b), (0x11a50, 0x11a51), (0x11a5c, 0x11a8a), (0x11a9d, 0x11a9e), (0x11ac0, 0x11af9), (0x11c00, 0x11c09), (0x11c0a, 0x11c2f)
    , (0x11c40, 0x11c41), (0x11c72, 0x11c90), (0x11d00, 0x11d07), (0x11d08, 0x11d0a), (0x11d0b, 0x11d31), (0x11d46, 0x11d47), (0x11d60, 0x11d66), (0x11d67, 0x11d69), (0x11d6a, 0x11d8a), (0x11d98, 0x11d99)
    , (0x11ee0, 0x11ef3), (0x12000, 0x1239a), (0x12480, 0x12544), (0x13000, 0x1342f), (0x14400, 0x14647), (0x16800, 0x16a39), (0x16a40, 0x16a5f), (0x16ad0, 0x16aee), (0x16b00, 0x16b30), (0x16b63, 0x16b78)
    , (0x16b7d, 0x16b90), (0x16f00, 0x16f4b), (0x16f50, 0x16f51), (0x17000, 0x187f8), (0x18800, 0x18af3), (0x1b000, 0x1b11f), (0x1b150, 0x1b153), (0x1b164, 0x1b168), (0x1b170, 0x1b2fc), (0x1bc00, 0x1bc6b)
    , (0x1bc70, 0x1bc7d), (0x1bc80, 0x1bc89), (0x1bc90, 0x1bc9a), (0x1e100, 0x1e12d), (0x1e14e, 0x1e14f), (0x1e2c0, 0x1e2ec), (0x1e800, 0x1e8c5), (0x1ee00, 0x1ee04), (0x1ee05, 0x1ee20), (0x1ee21, 0x1ee23)
    , (0x1ee24, 0x1ee25), (0x1ee27, 0x1ee28), (0x1ee29, 0x1ee33), (0x1ee34, 0x1ee38), (0x1ee39, 0x1ee3a), (0x1ee3b, 0x1ee3c), (0x1ee42, 0x1ee43), (0x1ee47, 0x1ee48), (0x1ee49, 0x1ee4a), (0x1ee4b, 0x1ee4c)
    , (0x1ee4d, 0x1ee50), (0x1ee51, 0x1ee53), (0x1ee54, 0x1ee55), (0x1ee57, 0x1ee58), (0x1ee59, 0x1ee5a), (0x1ee5b, 0x1ee5c), (0x1ee5d, 0x1ee5e), (0x1ee5f, 0x1ee60), (0x1ee61, 0x1ee63), (0x1ee64, 0x1ee65)
    , (0x1ee67, 0x1ee6b), (0x1ee6c, 0x1ee73), (0x1ee74, 0x1ee78), (0x1ee79, 0x1ee7d), (0x1ee7e, 0x1ee7f), (0x1ee80, 0x1ee8a), (0x1ee8b, 0x1ee9c), (0x1eea1, 0x1eea4), (0x1eea5, 0x1eeaa), (0x1eeab, 0x1eebc)
    , (0x20000, 0x2a6d7), (0x2a700, 0x2b735), (0x2b740, 0x2b81e), (0x2b820, 0x2cea2), (0x2ceb0, 0x2ebe1), (0x2f800, 0x2fa1e)
    ]))
, ('Lt', (31, 10, [
    (0x1c5, 0x1c6), (0x1c8, 0x1c9), (0x1cb, 0x1cc), (0x1f2, 0x1f3), (0x1f88, 0x1f90), (0x1f98, 0x1fa0), (0x1fa8, 0x1fb0), (0x1fbc, 0x1fbd), (0x1fcc, 0x1fcd), (0x1ffc, 0x1ffd)
    ]))
, ('Lu', (1788, 636, [
    (0x41, 0x5b), (0xc0, 0xd7), (0xd8, 0xdf), (0x100, 0x101), (0x102, 0x103), (0x104, 0x105), (0x106, 0x107), (0x108, 0x109), (0x10a, 0x10b), (0x10c, 0x10d)
    , (0x10e, 0x10f), (0x110, 0x111), (0x112, 0x113), (0x114, 0x115), (0x116, 0x117), (0x118, 0x119), (0x11a, 0x11b), (0x11c, 0x11d), (0x11e, 0x11f), (0x120, 0x121)
    , (0x122, 0x123), (0x124, 0x125), (0x126, 0x127), (0x128, 0x129), (0x12a, 0x12b), (0x12c, 0x12d), (0x12e, 0x12f), (0x130, 0x131), (0x132, 0x133), (0x134, 0x135)
    , (0x136, 0x137), (0x139, 0x13a), (0x13b, 0x13c), (0x13d, 0x13e), (0x13f, 0x140), (0x141, 0x142), (0x143, 0x144), (0x145, 0x146), (0x147, 0x148), (0x14a, 0x14b)
    , (0x14c, 0x14d), (0x14e, 0x14f), (0x150, 0x151), (0x152, 0x153), (0x154, 0x155), (0x156, 0x157), (0x158, 0x159), (0x15a, 0x15b), (0x15c, 0x15d), (0x15e, 0x15f)
    , (0x160, 0x161), (0x162, 0x163), (0x164, 0x165), (0x166, 0x167), (0x168, 0x169), (0x16a, 0x16b), (0x16c, 0x16d), (0x16e, 0x16f), (0x170, 0x171), (0x172, 0x173)
    , (0x174, 0x175), (0x176, 0x177), (0x178, 0x17a), (0x17b, 0x17c), (0x17d, 0x17e), (0x181, 0x183), (0x184, 0x185), (0x186, 0x188), (0x189, 0x18c), (0x18e, 0x192)
    , (0x193, 0x195), (0x196, 0x199), (0x19c, 0x19e), (0x19f, 0x1a1), (0x1a2, 0x1a3), (0x1a4, 0x1a5), (0x1a6, 0x1a8), (0x1a9, 0x1aa), (0x1ac, 0x1ad), (0x1ae, 0x1b0)
    , (0x1b1, 0x1b4), (0x1b5, 0x1b6), (0x1b7, 0x1b9), (0x1bc, 0x1bd), (0x1c4, 0x1c5), (0x1c7, 0x1c8), (0x1ca, 0x1cb), (0x1cd, 0x1ce), (0x1cf, 0x1d0), (0x1d1, 0x1d2)
    , (0x1d3, 0x1d4), (0x1d5, 0x1d6), (0x1d7, 0x1d8), (0x1d9, 0x1da), (0x1db, 0x1dc), (0x1de, 0x1df), (0x1e0, 0x1e1), (0x1e2, 0x1e3), (0x1e4, 0x1e5), (0x1e6, 0x1e7)
    , (0x1e8, 0x1e9), (0x1ea, 0x1eb), (0x1ec, 0x1ed), (0x1ee, 0x1ef), (0x1f1, 0x1f2), (0x1f4, 0x1f5), (0x1f6, 0x1f9), (0x1fa, 0x1fb), (0x1fc, 0x1fd), (0x1fe, 0x1ff)
    , (0x200, 0x201), (0x202, 0x203), (0x204, 0x205), (0x206, 0x207), (0x208, 0x209), (0x20a, 0x20b), (0x20c, 0x20d), (0x20e, 0x20f), (0x210, 0x211), (0x212, 0x213)
    , (0x214, 0x215), (0x216, 0x217), (0x218, 0x219), (0x21a, 0x21b), (0x21c, 0x21d), (0x21e, 0x21f), (0x220, 0x221), (0x222, 0x223), (0x224, 0x225), (0x226, 0x227)
    , (0x228, 0x229), (0x22a, 0x22b), (0x22c, 0x22d), (0x22e, 0x22f), (0x230, 0x231), (0x232, 0x233), (0x23a, 0x23c), (0x23d, 0x23f), (0x241, 0x242), (0x243, 0x247)
    , (0x248, 0x249), (0x24a, 0x24b), (0x24c, 0x24d), (0x24e, 0x24f), (0x370, 0x371), (0x372, 0x373), (0x376, 0x377), (0x37f, 0x380), (0x386, 0x387), (0x388, 0x38b)
    , (0x38c, 0x38d), (0x38e, 0x390), (0x391, 0x3a2), (0x3a3, 0x3ac), (0x3cf, 0x3d0), (0x3d2, 0x3d5), (0x3d8, 0x3d9), (0x3da, 0x3db), (0x3dc, 0x3dd), (0x3de, 0x3df)
    , (0x3e0, 0x3e1), (0x3e2, 0x3e3), (0x3e4, 0x3e5), (0x3e6, 0x3e7), (0x3e8, 0x3e9), (0x3ea, 0x3eb), (0x3ec, 0x3ed), (0x3ee, 0x3ef), (0x3f4, 0x3f5), (0x3f7, 0x3f8)
    , (0x3f9, 0x3fb), (0x3fd, 0x430), (0x460, 0x461), (0x462, 0x463), (0x464, 0x465), (0x466, 0x467), (0x468, 0x469), (0x46a, 0x46b), (0x46c, 0x46d), (0x46e, 0x46f)
    , (0x470, 0x471), (0x472, 0x473), (0x474, 0x475), (0x476, 0x477), (0x478, 0x479), (0x47a, 0x47b), (0x47c, 0x47d), (0x47e, 0x47f), (0x480, 0x481), (0x48a, 0x48b)
    , (0x48c, 0x48d), (0x48e, 0x48f), (0x490, 0x491), (0x492, 0x493), (0x494, 0x495), (0x496, 0x497), (0x498, 0x499), (0x49a, 0x49b), (0x49c, 0x49d), (0x49e, 0x49f)
    , (0x4a0, 0x4a1), (0x4a2, 0x4a3), (0x4a4, 0x4a5), (0x4a6, 0x4a7), (0x4a8, 0x4a9), (0x4aa, 0x4ab), (0x4ac, 0x4ad), (0x4ae, 0x4af), (0x4b0, 0x4b1), (0x4b2, 0x4b3)
    , (0x4b4, 0x4b5), (0x4b6, 0x4b7), (0x4b8, 0x4b9), (0x4ba, 0x4bb), (0x4bc, 0x4bd), (0x4be, 0x4bf), (0x4c0, 0x4c2), (0x4c3, 0x4c4), (0x4c5, 0x4c6), (0x4c7, 0x4c8)
    , (0x4c9, 0x4ca), (0x4cb, 0x4cc), (0x4cd, 0x4ce), (0x4d0, 0x4d1), (0x4d2, 0x4d3), (0x4d4, 0x4d5), (0x4d6, 0x4d7), (0x4d8, 0x4d9), (0x4da, 0x4db), (0x4dc, 0x4dd)
    , (0x4de, 0x4df), (0x4e0, 0x4e1), (0x4e2, 0x4e3), (0x4e4, 0x4e5), (0x4e6, 0x4e7), (0x4e8, 0x4e9), (0x4ea, 0x4eb), (0x4ec, 0x4ed), (0x4ee, 0x4ef), (0x4f0, 0x4f1)
    , (0x4f2, 0x4f3), (0x4f4, 0x4f5), (0x4f6, 0x4f7), (0x4f8, 0x4f9), (0x4fa, 0x4fb), (0x4fc, 0x4fd), (0x4fe, 0x4ff), (0x500, 0x501), (0x502, 0x503), (0x504, 0x505)
    , (0x506, 0x507), (0x508, 0x509), (0x50a, 0x50b), (0x50c, 0x50d), (0x50e, 0x50f), (0x510, 0x511), (0x512, 0x513), (0x514, 0x515), (0x516, 0x517), (0x518, 0x519)
    , (0x51a, 0x51b), (0x51c, 0x51d), (0x51e, 0x51f), (0x520, 0x521), (0x522, 0x523), (0x524, 0x525), (0x526, 0x527), (0x528, 0x529), (0x52a, 0x52b), (0x52c, 0x52d)
    , (0x52e, 0x52f), (0x531, 0x557), (0x10a0, 0x10c6), (0x10c7, 0x10c8), (0x10cd, 0x10ce), (0x13a0, 0x13f6), (0x1c90, 0x1cbb), (0x1cbd, 0x1cc0), (0x1e00, 0x1e01), (0x1e02, 0x1e03)
    , (0x1e04, 0x1e05), (0x1e06, 0x1e07), (0x1e08, 0x1e09), (0x1e0a, 0x1e0b), (0x1e0c, 0x1e0d), (0x1e0e, 0x1e0f), (0x1e10, 0x1e11), (0x1e12, 0x1e13), (0x1e14, 0x1e15), (0x1e16, 0x1e17)
    , (0x1e18, 0x1e19), (0x1e1a, 0x1e1b), (0x1e1c, 0x1e1d), (0x1e1e, 0x1e1f), (0x1e20, 0x1e21), (0x1e22, 0x1e23), (0x1e24, 0x1e25), (0x1e26, 0x1e27), (0x1e28, 0x1e29), (0x1e2a, 0x1e2b)
    , (0x1e2c, 0x1e2d), (0x1e2e, 0x1e2f), (0x1e30, 0x1e31), (0x1e32, 0x1e33), (0x1e34, 0x1e35), (0x1e36, 0x1e37), (0x1e38, 0x1e39), (0x1e3a, 0x1e3b), (0x1e3c, 0x1e3d), (0x1e3e, 0x1e3f)
    , (0x1e40, 0x1e41), (0x1e42, 0x1e43), (0x1e44, 0x1e45), (0x1e46, 0x1e47), (0x1e48, 0x1e49), (0x1e4a, 0x1e4b), (0x1e4c, 0x1e4d), (0x1e4e, 0x1e4f), (0x1e50, 0x1e51), (0x1e52, 0x1e53)
    , (0x1e54, 0x1e55), (0x1e56, 0x1e57), (0x1e58, 0x1e59), (0x1e5a, 0x1e5b), (0x1e5c, 0x1e5d), (0x1e5e, 0x1e5f), (0x1e60, 0x1e61), (0x1e62, 0x1e63), (0x1e64, 0x1e65), (0x1e66, 0x1e67)
    , (0x1e68, 0x1e69), (0x1e6a, 0x1e6b), (0x1e6c, 0x1e6d), (0x1e6e, 0x1e6f), (0x1e70, 0x1e71), (0x1e72, 0x1e73), (0x1e74, 0x1e75), (0x1e76, 0x1e77), (0x1e78, 0x1e79), (0x1e7a, 0x1e7b)
    , (0x1e7c, 0x1e7d), (0x1e7e, 0x1e7f), (0x1e80, 0x1e81), (0x1e82, 0x1e83), (0x1e84, 0x1e85), (0x1e86, 0x1e87), (0x1e88, 0x1e89), (0x1e8a, 0x1e8b), (0x1e8c, 0x1e8d), (0x1e8e, 0x1e8f)
    , (0x1e90, 0x1e91), (0x1e92, 0x1e93), (0x1e94, 0x1e95), (0x1e9e, 0x1e9f), (0x1ea0, 0x1ea1), (0x1ea2, 0x1ea3), (0x1ea4, 0x1ea5), (0x1ea6, 0x1ea7), (0x1ea8, 0x1ea9), (0x1eaa, 0x1eab)
    , (0x1eac, 0x1ead), (0x1eae, 0x1eaf), (0x1eb0, 0x1eb1), (0x1eb2, 0x1eb3), (0x1eb4, 0x1eb5), (0x1eb6, 0x1eb7), (0x1eb8, 0x1eb9), (0x1eba, 0x1ebb), (0x1ebc, 0x1ebd), (0x1ebe, 0x1ebf)
    , (0x1ec0, 0x1ec1), (0x1ec2, 0x1ec3), (0x1ec4, 0x1ec5), (0x1ec6, 0x1ec7), (0x1ec8, 0x1ec9), (0x1eca, 0x1ecb), (0x1ecc, 0x1ecd), (0x1ece, 0x1ecf), (0x1ed0, 0x1ed1), (0x1ed2, 0x1ed3)
    , (0x1ed4, 0x1ed5), (0x1ed6, 0x1ed7), (0x1ed8, 0x1ed9), (0x1eda, 0x1edb), (0x1edc, 0x1edd), (0x1ede, 0x1edf), (0x1ee0, 0x1ee1), (0x1ee2, 0x1ee3), (0x1ee4, 0x1ee5), (0x1ee6, 0x1ee7)
    , (0x1ee8, 0x1ee9), (0x1eea, 0x1eeb), (0x1eec, 0x1eed), (0x1eee, 0x1eef), (0x1ef0, 0x1ef1), (0x1ef2, 0x1ef3), (0x1ef4, 0x1ef5), (0x1ef6, 0x1ef7), (0x1ef8, 0x1ef9), (0x1efa, 0x1efb)
    , (0x1efc, 0x1efd), (0x1efe, 0x1eff), (0x1f08, 0x1f10), (0x1f18, 0x1f1e), (0x1f28, 0x1f30), (0x1f38, 0x1f40), (0x1f48, 0x1f4e), (0x1f59, 0x1f5a), (0x1f5b, 0x1f5c), (0x1f5d, 0x1f5e)
    , (0x1f5f, 0x1f60), (0x1f68, 0x1f70), (0x1fb8, 0x1fbc), (0x1fc8, 0x1fcc), (0x1fd8, 0x1fdc), (0x1fe8, 0x1fed), (0x1ff8, 0x1ffc), (0x2102, 0x2103), (0x2107, 0x2108), (0x210b, 0x210e)
    , (0x2110, 0x2113), (0x2115, 0x2116), (0x2119, 0x211e), (0x2124, 0x2125), (0x2126, 0x2127), (0x2128, 0x2129), (0x212a, 0x212e), (0x2130, 0x2134), (0x213e, 0x2140), (0x2145, 0x2146)
    , (0x2183, 0x2184), (0x2c00, 0x2c2f), (0x2c60, 0x2c61), (0x2c62, 0x2c65), (0x2c67, 0x2c68), (0x2c69, 0x2c6a), (0x2c6b, 0x2c6c), (0x2c6d, 0x2c71), (0x2c72, 0x2c73), (0x2c75, 0x2c76)
    , (0x2c7e, 0x2c81), (0x2c82, 0x2c83), (0x2c84, 0x2c85), (0x2c86, 0x2c87), (0x2c88, 0x2c89), (0x2c8a, 0x2c8b), (0x2c8c, 0x2c8d), (0x2c8e, 0x2c8f), (0x2c90, 0x2c91), (0x2c92, 0x2c93)
    , (0x2c94, 0x2c95), (0x2c96, 0x2c97), (0x2c98, 0x2c99), (0x2c9a, 0x2c9b), (0x2c9c, 0x2c9d), (0x2c9e, 0x2c9f), (0x2ca0, 0x2ca1), (0x2ca2, 0x2ca3), (0x2ca4, 0x2ca5), (0x2ca6, 0x2ca7)
    , (0x2ca8, 0x2ca9), (0x2caa, 0x2cab), (0x2cac, 0x2cad), (0x2cae, 0x2caf), (0x2cb0, 0x2cb1), (0x2cb2, 0x2cb3), (0x2cb4, 0x2cb5), (0x2cb6, 0x2cb7), (0x2cb8, 0x2cb9), (0x2cba, 0x2cbb)
    , (0x2cbc, 0x2cbd), (0x2cbe, 0x2cbf), (0x2cc0, 0x2cc1), (0x2cc2, 0x2cc3), (0x2cc4, 0x2cc5), (0x2cc6, 0x2cc7), (0x2cc8, 0x2cc9), (0x2cca, 0x2ccb), (0x2ccc, 0x2ccd), (0x2cce, 0x2ccf)
    , (0x2cd0, 0x2cd1), (0x2cd2, 0x2cd3), (0x2cd4, 0x2cd5), (0x2cd6, 0x2cd7), (0x2cd8, 0x2cd9), (0x2cda, 0x2cdb), (0x2cdc, 0x2cdd), (0x2cde, 0x2cdf), (0x2ce0, 0x2ce1), (0x2ce2, 0x2ce3)
    , (0x2ceb, 0x2cec), (0x2ced, 0x2cee), (0x2cf2, 0x2cf3), (0xa640, 0xa641), (0xa642, 0xa643), (0xa644, 0xa645), (0xa646, 0xa647), (0xa648, 0xa649), (0xa64a, 0xa64b), (0xa64c, 0xa64d)
    , (0xa64e, 0xa64f), (0xa650, 0xa651), (0xa652, 0xa653), (0xa654, 0xa655), (0xa656, 0xa657), (0xa658, 0xa659), (0xa65a, 0xa65b), (0xa65c, 0xa65d), (0xa65e, 0xa65f), (0xa660, 0xa661)
    , (0xa662, 0xa663), (0xa664, 0xa665), (0xa666, 0xa667), (0xa668, 0xa669), (0xa66a, 0xa66b), (0xa66c, 0xa66d), (0xa680, 0xa681), (0xa682, 0xa683), (0xa684, 0xa685), (0xa686, 0xa687)
    , (0xa688, 0xa689), (0xa68a, 0xa68b), (0xa68c, 0xa68d), (0xa68e, 0xa68f), (0xa690, 0xa691), (0xa692, 0xa693), (0xa694, 0xa695), (0xa696, 0xa697), (0xa698, 0xa699), (0xa69a, 0xa69b)
    , (0xa722, 0xa723), (0xa724, 0xa725), (0xa726, 0xa727), (0xa728, 0xa729), (0xa72a, 0xa72b), (0xa72c, 0xa72d), (0xa72e, 0xa72f), (0xa732, 0xa733), (0xa734, 0xa735), (0xa736, 0xa737)
    , (0xa738, 0xa739), (0xa73a, 0xa73b), (0xa73c, 0xa73d), (0xa73e, 0xa73f), (0xa740, 0xa741), (0xa742, 0xa743), (0xa744, 0xa745), (0xa746, 0xa747), (0xa748, 0xa749), (0xa74a, 0xa74b)
    , (0xa74c, 0xa74d), (0xa74e, 0xa74f), (0xa750, 0xa751), (0xa752, 0xa753), (0xa754, 0xa755), (0xa756, 0xa757), (0xa758, 0xa759), (0xa75a, 0xa75b), (0xa75c, 0xa75d), (0xa75e, 0xa75f)
    , (0xa760, 0xa761), (0xa762, 0xa763), (0xa764, 0xa765), (0xa766, 0xa767), (0xa768, 0xa769), (0xa76a, 0xa76b), (0xa76c, 0xa76d), (0xa76e, 0xa76f), (0xa779, 0xa77a), (0xa77b, 0xa77c)
    , (0xa77d, 0xa77f), (0xa780, 0xa781), (0xa782, 0xa783), (0xa784, 0xa785), (0xa786, 0xa787), (0xa78b, 0xa78c), (0xa78d, 0xa78e), (0xa790, 0xa791), (0xa792, 0xa793), (0xa796, 0xa797)
    , (0xa798, 0xa799), (0xa79a, 0xa79b), (0xa79c, 0xa79d), (0xa79e, 0xa79f), (0xa7a0, 0xa7a1), (0xa7a2, 0xa7a3), (0xa7a4, 0xa7a5), (0xa7a6, 0xa7a7), (0xa7a8, 0xa7a9), (0xa7aa, 0xa7af)
    , (0xa7b0, 0xa7b5), (0xa7b6, 0xa7b7), (0xa7b8, 0xa7b9), (0xa7ba, 0xa7bb), (0xa7bc, 0xa7bd), (0xa7be, 0xa7bf), (0xa7c2, 0xa7c3), (0xa7c4, 0xa7c7), (0xff21, 0xff3b), (0x10400, 0x10428)
    , (0x104b0, 0x104d4), (0x10c80, 0x10cb3), (0x118a0, 0x118c0), (0x16e40, 0x16e60), (0x1d400, 0x1d41a), (0x1d434, 0x1d44e), (0x1d468, 0x1d482), (0x1d49c, 0x1d49d), (0x1d49e, 0x1d4a0), (0x1d4a2, 0x1d4a3)
    , (0x1d4a5, 0x1d4a7), (0x1d4a9, 0x1d4ad), (0x1d4ae, 0x1d4b6), (0x1d4d0, 0x1d4ea), (0x1d504, 0x1d506), (0x1d507, 0x1d50b), (0x1d50d, 0x1d515), (0x1d516, 0x1d51d), (0x1d538, 0x1d53a), (0x1d53b, 0x1d53f)
    , (0x1d540, 0x1d545), (0x1d546, 0x1d547), (0x1d54a, 0x1d551), (0x1d56c, 0x1d586), (0x1d5a0, 0x1d5ba), (0x1d5d4, 0x1d5ee), (0x1d608, 0x1d622), (0x1d63c, 0x1d656), (0x1d670, 0x1d68a), (0x1d6a8, 0x1d6c1)
    , (0x1d6e2, 0x1d6fb), (0x1d71c, 0x1d735), (0x1d756, 0x1d76f), (0x1d790, 0x1d7a9), (0x1d7ca, 0x1d7cb), (0x1e900, 0x1e922)
    ]))
, ('Mc', (429, 168, [
    (0x903, 0x904), (0x93b, 0x93c), (0x93e, 0x941), (0x949, 0x94d), (0x94e, 0x950), (0x982, 0x984), (0x9be, 0x9c1), (0x9c7, 0x9c9), (0x9cb, 0x9cd), (0x9d7, 0x9d8)
    , (0xa03, 0xa04), (0xa3e, 0xa41), (0xa83, 0xa84), (0xabe, 0xac1), (0xac9, 0xaca), (0xacb, 0xacd), (0xb02, 0xb04), (0xb3e, 0xb3f), (0xb40, 0xb41), (0xb47, 0xb49)
    , (0xb4b, 0xb4d), (0xb57, 0xb58), (0xbbe, 0xbc0), (0xbc1, 0xbc3), (0xbc6, 0xbc9), (0xbca, 0xbcd), (0xbd7, 0xbd8), (0xc01, 0xc04), (0xc41, 0xc45), (0xc82, 0xc84)
    , (0xcbe, 0xcbf), (0xcc0, 0xcc5), (0xcc7, 0xcc9), (0xcca, 0xccc), (0xcd5, 0xcd7), (0xd02, 0xd04), (0xd3e, 0xd41), (0xd46, 0xd49), (0xd4a, 0xd4d), (0xd57, 0xd58)
    , (0xd82, 0xd84), (0xdcf, 0xdd2), (0xdd8, 0xde0), (0xdf2, 0xdf4), (0xf3e, 0xf40), (0xf7f, 0xf80), (0x102b, 0x102d), (0x1031, 0x1032), (0x1038, 0x1039), (0x103b, 0x103d)
    , (0x1056, 0x1058), (0x1062, 0x1065), (0x1067, 0x106e), (0x1083, 0x1085), (0x1087, 0x108d), (0x108f, 0x1090), (0x109a, 0x109d), (0x17b6, 0x17b7), (0x17be, 0x17c6), (0x17c7, 0x17c9)
    , (0x1923, 0x1927), (0x1929, 0x192c), (0x1930, 0x1932), (0x1933, 0x1939), (0x1a19, 0x1a1b), (0x1a55, 0x1a56), (0x1a57, 0x1a58), (0x1a61, 0x1a62), (0x1a63, 0x1a65), (0x1a6d, 0x1a73)
    , (0x1b04, 0x1b05), (0x1b35, 0x1b36), (0x1b3b, 0x1b3c), (0x1b3d, 0x1b42), (0x1b43, 0x1b45), (0x1b82, 0x1b83), (0x1ba1, 0x1ba2), (0x1ba6, 0x1ba8), (0x1baa, 0x1bab), (0x1be7, 0x1be8)
    , (0x1bea, 0x1bed), (0x1bee, 0x1bef), (0x1bf2, 0x1bf4), (0x1c24, 0x1c2c), (0x1c34, 0x1c36), (0x1ce1, 0x1ce2), (0x1cf7, 0x1cf8), (0x302e, 0x3030), (0xa823, 0xa825), (0xa827, 0xa828)
    , (0xa880, 0xa882), (0xa8b4, 0xa8c4), (0xa952, 0xa954), (0xa983, 0xa984), (0xa9b4, 0xa9b6), (0xa9ba, 0xa9bc), (0xa9be, 0xa9c1), (0xaa2f, 0xaa31), (0xaa33, 0xaa35), (0xaa4d, 0xaa4e)
    , (0xaa7b, 0xaa7c), (0xaa7d, 0xaa7e), (0xaaeb, 0xaaec), (0xaaee, 0xaaf0), (0xaaf5, 0xaaf6), (0xabe3, 0xabe5), (0xabe6, 0xabe8), (0xabe9, 0xabeb), (0xabec, 0xabed), (0x11000, 0x11001)
    , (0x11002, 0x11003), (0x11082, 0x11083), (0x110b0, 0x110b3), (0x110b7, 0x110b9), (0x1112c, 0x1112d), (0x11145, 0x11147), (0x11182, 0x11183), (0x111b3, 0x111b6), (0x111bf, 0x111c1), (0x1122c, 0x1122f)
    , (0x11232, 0x11234), (0x11235, 0x11236), (0x112e0, 0x112e3), (0x11302, 0x11304), (0x1133e, 0x11340), (0x11341, 0x11345), (0x11347, 0x11349), (0x1134b, 0x1134e), (0x11357, 0x11358), (0x11362, 0x11364)
    , (0x11435, 0x11438), (0x11440, 0x11442), (0x11445, 0x11446), (0x114b0, 0x114b3), (0x114b9, 0x114ba), (0x114bb, 0x114bf), (0x114c1, 0x114c2), (0x115af, 0x115b2), (0x115b8, 0x115bc), (0x115be, 0x115bf)
    , (0x11630, 0x11633), (0x1163b, 0x1163d), (0x1163e, 0x1163f), (0x116ac, 0x116ad), (0x116ae, 0x116b0), (0x116b6, 0x116b7), (0x11720, 0x11722), (0x11726, 0x11727), (0x1182c, 0x1182f), (0x11838, 0x11839)
    , (0x119d1, 0x119d4), (0x119dc, 0x119e0), (0x119e4, 0x119e5), (0x11a39, 0x11a3a), (0x11a57, 0x11a59), (0x11a97, 0x11a98), (0x11c2f, 0x11c30), (0x11c3e, 0x11c3f), (0x11ca9, 0x11caa), (0x11cb1, 0x11cb2)
    , (0x11cb4, 0x11cb5), (0x11d8a, 0x11d8f), (0x11d93, 0x11d95), (0x11d96, 0x11d97), (0x11ef5, 0x11ef7), (0x16f51, 0x16f88), (0x1d165, 0x1d167), (0x1d16d, 0x1d173)
    ]))
, ('Me', (13, 5, [
    (0x488, 0x48a), (0x1abe, 0x1abf), (0x20dd, 0x20e1), (0x20e2, 0x20e5), (0xa670, 0xa673)
    ]))
, ('Mn', (1826, 318, [
    (0x300, 0x370), (0x483, 0x488), (0x591, 0x5be), (0x5bf, 0x5c0), (0x5c1, 0x5c3), (0x5c4, 0x5c6), (0x5c7, 0x5c8), (0x610, 0x61b), (0x64b, 0x660), (0x670, 0x671)
    , (0x6d6, 0x6dd), (0x6df, 0x6e5), (0x6e7, 0x6e9), (0x6ea, 0x6ee), (0x711, 0x712), (0x730, 0x74b), (0x7a6, 0x7b1), (0x7eb, 0x7f4), (0x7fd, 0x7fe), (0x816, 0x81a)
    , (0x81b, 0x824), (0x825, 0x828), (0x829, 0x82e), (0x859, 0x85c), (0x8d3, 0x8e2), (0x8e3, 0x903), (0x93a, 0x93b), (0x93c, 0x93d), (0x941, 0x949), (0x94d, 0x94e)
    , (0x951, 0x958), (0x962, 0x964), (0x981, 0x982), (0x9bc, 0x9bd), (0x9c1, 0x9c5), (0x9cd, 0x9ce), (0x9e2, 0x9e4), (0x9fe, 0x9ff), (0xa01, 0xa03), (0xa3c, 0xa3d)
    , (0xa41, 0xa43), (0xa47, 0xa49), (0xa4b, 0xa4e), (0xa51, 0xa52), (0xa70, 0xa72), (0xa75, 0xa76), (0xa81, 0xa83), (0xabc, 0xabd), (0xac1, 0xac6), (0xac7, 0xac9)
    , (0xacd, 0xace), (0xae2, 0xae4), (0xafa, 0xb00), (0xb01, 0xb02), (0xb3c, 0xb3d), (0xb3f, 0xb40), (0xb41, 0xb45), (0xb4d, 0xb4e), (0xb56, 0xb57), (0xb62, 0xb64)
    , (0xb82, 0xb83), (0xbc0, 0xbc1), (0xbcd, 0xbce), (0xc00, 0xc01), (0xc04, 0xc05), (0xc3e, 0xc41), (0xc46, 0xc49), (0xc4a, 0xc4e), (0xc55, 0xc57), (0xc62, 0xc64)
    , (0xc81, 0xc82), (0xcbc, 0xcbd), (0xcbf, 0xcc0), (0xcc6, 0xcc7), (0xccc, 0xcce), (0xce2, 0xce4), (0xd00, 0xd02), (0xd3b, 0xd3d), (0xd41, 0xd45), (0xd4d, 0xd4e)
    , (0xd62, 0xd64), (0xdca, 0xdcb), (0xdd2, 0xdd5), (0xdd6, 0xdd7), (0xe31, 0xe32), (0xe34, 0xe3b), (0xe47, 0xe4f), (0xeb1, 0xeb2), (0xeb4, 0xebd), (0xec8, 0xece)
    , (0xf18, 0xf1a), (0xf35, 0xf36), (0xf37, 0xf38), (0xf39, 0xf3a), (0xf71, 0xf7f), (0xf80, 0xf85), (0xf86, 0xf88), (0xf8d, 0xf98), (0xf99, 0xfbd), (0xfc6, 0xfc7)
    , (0x102d, 0x1031), (0x1032, 0x1038), (0x1039, 0x103b), (0x103d, 0x103f), (0x1058, 0x105a), (0x105e, 0x1061), (0x1071, 0x1075), (0x1082, 0x1083), (0x1085, 0x1087), (0x108d, 0x108e)
    , (0x109d, 0x109e), (0x135d, 0x1360), (0x1712, 0x1715), (0x1732, 0x1735), (0x1752, 0x1754), (0x1772, 0x1774), (0x17b4, 0x17b6), (0x17b7, 0x17be), (0x17c6, 0x17c7), (0x17c9, 0x17d4)
    , (0x17dd, 0x17de), (0x180b, 0x180e), (0x1885, 0x1887), (0x18a9, 0x18aa), (0x1920, 0x1923), (0x1927, 0x1929), (0x1932, 0x1933), (0x1939, 0x193c), (0x1a17, 0x1a19), (0x1a1b, 0x1a1c)
    , (0x1a56, 0x1a57), (0x1a58, 0x1a5f), (0x1a60, 0x1a61), (0x1a62, 0x1a63), (0x1a65, 0x1a6d), (0x1a73, 0x1a7d), (0x1a7f, 0x1a80), (0x1ab0, 0x1abe), (0x1b00, 0x1b04), (0x1b34, 0x1b35)
    , (0x1b36, 0x1b3b), (0x1b3c, 0x1b3d), (0x1b42, 0x1b43), (0x1b6b, 0x1b74), (0x1b80, 0x1b82), (0x1ba2, 0x1ba6), (0x1ba8, 0x1baa), (0x1bab, 0x1bae), (0x1be6, 0x1be7), (0x1be8, 0x1bea)
    , (0x1bed, 0x1bee), (0x1bef, 0x1bf2), (0x1c2c, 0x1c34), (0x1c36, 0x1c38), (0x1cd0, 0x1cd3), (0x1cd4, 0x1ce1), (0x1ce2, 0x1ce9), (0x1ced, 0x1cee), (0x1cf4, 0x1cf5), (0x1cf8, 0x1cfa)
    , (0x1dc0, 0x1dfa), (0x1dfb, 0x1e00), (0x20d0, 0x20dd), (0x20e1, 0x20e2), (0x20e5, 0x20f1), (0x2cef, 0x2cf2), (0x2d7f, 0x2d80), (0x2de0, 0x2e00), (0x302a, 0x302e), (0x3099, 0x309b)
    , (0xa66f, 0xa670), (0xa674, 0xa67e), (0xa69e, 0xa6a0), (0xa6f0, 0xa6f2), (0xa802, 0xa803), (0xa806, 0xa807), (0xa80b, 0xa80c), (0xa825, 0xa827), (0xa8c4, 0xa8c6), (0xa8e0, 0xa8f2)
    , (0xa8ff, 0xa900), (0xa926, 0xa92e), (0xa947, 0xa952), (0xa980, 0xa983), (0xa9b3, 0xa9b4), (0xa9b6, 0xa9ba), (0xa9bc, 0xa9be), (0xa9e5, 0xa9e6), (0xaa29, 0xaa2f), (0xaa31, 0xaa33)
    , (0xaa35, 0xaa37), (0xaa43, 0xaa44), (0xaa4c, 0xaa4d), (0xaa7c, 0xaa7d), (0xaab0, 0xaab1), (0xaab2, 0xaab5), (0xaab7, 0xaab9), (0xaabe, 0xaac0), (0xaac1, 0xaac2), (0xaaec, 0xaaee)
    , (0xaaf6, 0xaaf7), (0xabe5, 0xabe6), (0xabe8, 0xabe9), (0xabed, 0xabee), (0xfb1e, 0xfb1f), (0xfe00, 0xfe10), (0xfe20, 0xfe30), (0x101fd, 0x101fe), (0x102e0, 0x102e1), (0x10376, 0x1037b)
    , (0x10a01, 0x10a04), (0x10a05, 0x10a07), (0x10a0c, 0x10a10), (0x10a38, 0x10a3b), (0x10a3f, 0x10a40), (0x10ae5, 0x10ae7), (0x10d24, 0x10d28), (0x10f46, 0x10f51), (0x11001, 0x11002), (0x11038, 0x11047)
    , (0x1107f, 0x11082), (0x110b3, 0x110b7), (0x110b9, 0x110bb), (0x11100, 0x11103), (0x11127, 0x1112c), (0x1112d, 0x11135), (0x11173, 0x11174), (0x11180, 0x11182), (0x111b6, 0x111bf), (0x111c9, 0x111cd)
    , (0x1122f, 0x11232), (0x11234, 0x11235), (0x11236, 0x11238), (0x1123e, 0x1123f), (0x112df, 0x112e0), (0x112e3, 0x112eb), (0x11300, 0x11302), (0x1133b, 0x1133d), (0x11340, 0x11341), (0x11366, 0x1136d)
    , (0x11370, 0x11375), (0x11438, 0x11440), (0x11442, 0x11445), (0x11446, 0x11447), (0x1145e, 0x1145f), (0x114b3, 0x114b9), (0x114ba, 0x114bb), (0x114bf, 0x114c1), (0x114c2, 0x114c4), (0x115b2, 0x115b6)
    , (0x115bc, 0x115be), (0x115bf, 0x115c1), (0x115dc, 0x115de), (0x11633, 0x1163b), (0x1163d, 0x1163e), (0x1163f, 0x11641), (0x116ab, 0x116ac), (0x116ad, 0x116ae), (0x116b0, 0x116b6), (0x116b7, 0x116b8)
    , (0x1171d, 0x11720), (0x11722, 0x11726), (0x11727, 0x1172c), (0x1182f, 0x11838), (0x11839, 0x1183b), (0x119d4, 0x119d8), (0x119da, 0x119dc), (0x119e0, 0x119e1), (0x11a01, 0x11a0b), (0x11a33, 0x11a39)
    , (0x11a3b, 0x11a3f), (0x11a47, 0x11a48), (0x11a51, 0x11a57), (0x11a59, 0x11a5c), (0x11a8a, 0x11a97), (0x11a98, 0x11a9a), (0x11c30, 0x11c37), (0x11c38, 0x11c3e), (0x11c3f, 0x11c40), (0x11c92, 0x11ca8)
    , (0x11caa, 0x11cb1), (0x11cb2, 0x11cb4), (0x11cb5, 0x11cb7), (0x11d31, 0x11d37), (0x11d3a, 0x11d3b), (0x11d3c, 0x11d3e), (0x11d3f, 0x11d46), (0x11d47, 0x11d48), (0x11d90, 0x11d92), (0x11d95, 0x11d96)
    , (0x11d97, 0x11d98), (0x11ef3, 0x11ef5), (0x16af0, 0x16af5), (0x16b30, 0x16b37), (0x16f4f, 0x16f50), (0x16f8f, 0x16f93), (0x1bc9d, 0x1bc9f), (0x1d167, 0x1d16a), (0x1d17b, 0x1d183), (0x1d185, 0x1d18c)
    , (0x1d1aa, 0x1d1ae), (0x1d242, 0x1d245), (0x1da00, 0x1da37), (0x1da3b, 0x1da6d), (0x1da75, 0x1da76), (0x1da84, 0x1da85), (0x1da9b, 0x1daa0), (0x1daa1, 0x1dab0), (0x1e000, 0x1e007), (0x1e008, 0x1e019)
    , (0x1e01b, 0x1e022), (0x1e023, 0x1e025), (0x1e026, 0x1e02b), (0x1e130, 0x1e137), (0x1e2ec, 0x1e2f0), (0x1e8d0, 0x1e8d7), (0x1e944, 0x1e94b), (0xe0100, 0xe01f0)
    ]))
, ('Nd', (630, 59, [
    (0x30, 0x3a), (0x660, 0x66a), (0x6f0, 0x6fa), (0x7c0, 0x7ca), (0x966, 0x970), (0x9e6, 0x9f0), (0xa66, 0xa70), (0xae6, 0xaf0), (0xb66, 0xb70), (0xbe6, 0xbf0)
    , (0xc66, 0xc70), (0xce6, 0xcf0), (0xd66, 0xd70), (0xde6, 0xdf0), (0xe50, 0xe5a), (0xed0, 0xeda), (0xf20, 0xf2a), (0x1040, 0x104a), (0x1090, 0x109a), (0x17e0, 0x17ea)
    , (0x1810, 0x181a), (0x1946, 0x1950), (0x19d0, 0x19da), (0x1a80, 0x1a8a), (0x1a90, 0x1a9a), (0x1b50, 0x1b5a), (0x1bb0, 0x1bba), (0x1c40, 0x1c4a), (0x1c50, 0x1c5a), (0xa620, 0xa62a)
    , (0xa8d0, 0xa8da), (0xa900, 0xa90a), (0xa9d0, 0xa9da), (0xa9f0, 0xa9fa), (0xaa50, 0xaa5a), (0xabf0, 0xabfa), (0xff10, 0xff1a), (0x104a0, 0x104aa), (0x10d30, 0x10d3a), (0x11066, 0x11070)
    , (0x110f0, 0x110fa), (0x11136, 0x11140), (0x111d0, 0x111da), (0x112f0, 0x112fa), (0x11450, 0x1145a), (0x114d0, 0x114da), (0x11650, 0x1165a), (0x116c0, 0x116ca), (0x11730, 0x1173a), (0x118e0, 0x118ea)
    , (0x11c50, 0x11c5a), (0x11d50, 0x11d5a), (0x11da0, 0x11daa), (0x16a60, 0x16a6a), (0x16b50, 0x16b5a), (0x1d7ce, 0x1d800), (0x1e140, 0x1e14a), (0x1e2f0, 0x1e2fa), (0x1e950, 0x1e95a)
    ]))
, ('Nl', (236, 12, [
    (0x16ee, 0x16f1), (0x2160, 0x2183), (0x2185, 0x2189), (0x3007, 0x3008), (0x3021, 0x302a), (0x3038, 0x303b), (0xa6e6, 0xa6f0), (0x10140, 0x10175), (0x10341, 0x10342), (0x1034a, 0x1034b)
    , (0x103d1, 0x103d6), (0x12400, 0x1246f)
    ]))
, ('No', (888, 70, [
    (0xb2, 0xb4), (0xb9, 0xba), (0xbc, 0xbf), (0x9f4, 0x9fa), (0xb72, 0xb78), (0xbf0, 0xbf3), (0xc78, 0xc7f), (0xd58, 0xd5f), (0xd70, 0xd79), (0xf2a, 0xf34)
    , (0x1369, 0x137d), (0x17f0, 0x17fa), (0x19da, 0x19db), (0x2070, 0x2071), (0x2074, 0x207a), (0x2080, 0x208a), (0x2150, 0x2160), (0x2189, 0x218a), (0x2460, 0x249c), (0x24ea, 0x2500)
    , (0x2776, 0x2794), (0x2cfd, 0x2cfe), (0x3192, 0x3196), (0x3220, 0x322a), (0x3248, 0x3250), (0x3251, 0x3260), (0x3280, 0x328a), (0x32b1, 0x32c0), (0xa830, 0xa836), (0x10107, 0x10134)
    , (0x10175, 0x10179), (0x1018a, 0x1018c), (0x102e1, 0x102fc), (0x10320, 0x10324), (0x10858, 0x10860), (0x10879, 0x10880), (0x108a7, 0x108b0), (0x108fb, 0x10900), (0x10916, 0x1091c), (0x109bc, 0x109be)
    , (0x109c0, 0x109d0), (0x109d2, 0x10a00), (0x10a40, 0x10a49), (0x10a7d, 0x10a7f), (0x10a9d, 0x10aa0), (0x10aeb, 0x10af0), (0x10b58, 0x10b60), (0x10b78, 0x10b80), (0x10ba9, 0x10bb0), (0x10cfa, 0x10d00)
    , (0x10e60, 0x10e7f), (0x10f1d, 0x10f27), (0x10f51, 0x10f55), (0x11052, 0x11066), (0x111e1, 0x111f5), (0x1173a, 0x1173c), (0x118ea, 0x118f3), (0x11c5a, 0x11c6d), (0x11fc0, 0x11fd5), (0x16b5b, 0x16b62)
    , (0x16e80, 0x16e97), (0x1d2e0, 0x1d2f4), (0x1d360, 0x1d379), (0x1e8c7, 0x1e8d0), (0x1ec71, 0x1ecac), (0x1ecad, 0x1ecb0), (0x1ecb1, 0x1ecb5), (0x1ed01, 0x1ed2e), (0x1ed2f, 0x1ed3e), (0x1f100, 0x1f10d)
    ]))
, ('Pc', (10, 6, [
    (0x5f, 0x60), (0x203f, 0x2041), (0x2054, 0x2055), (0xfe33, 0xfe35), (0xfe4d, 0xfe50), (0xff3f, 0xff40)
    ]))
, ('Pd', (24, 17, [
    (0x2d, 0x2e), (0x58a, 0x58b), (0x5be, 0x5bf), (0x1400, 0x1401), (0x1806, 0x1807), (0x2010, 0x2016), (0x2e17, 0x2e18), (0x2e1a, 0x2e1b), (0x2e3a, 0x2e3c), (0x2e40, 0x2e41)
    , (0x301c, 0x301d), (0x3030, 0x3031), (0x30a0, 0x30a1), (0xfe31, 0xfe33), (0xfe58, 0xfe59), (0xfe63, 0xfe64), (0xff0d, 0xff0e)
    ]))
, ('Pe', (73, 72, [
    (0x29, 0x2a), (0x5d, 0x5e), (0x7d, 0x7e), (0xf3b, 0xf3c), (0xf3d, 0xf3e), (0x169c, 0x169d), (0x2046, 0x2047), (0x207e, 0x207f), (0x208e, 0x208f), (0x2309, 0x230a)
    , (0x230b, 0x230c), (0x232a, 0x232b), (0x2769, 0x276a), (0x276b, 0x276c), (0x276d, 0x276e), (0x276f, 0x2770), (0x2771, 0x2772), (0x2773, 0x2774), (0x2775, 0x2776), (0x27c6, 0x27c7)
    , (0x27e7, 0x27e8), (0x27e9, 0x27ea), (0x27eb, 0x27ec), (0x27ed, 0x27ee), (0x27ef, 0x27f0), (0x2984, 0x2985), (0x2986, 0x2987), (0x2988, 0x2989), (0x298a, 0x298b), (0x298c, 0x298d)
    , (0x298e, 0x298f), (0x2990, 0x2991), (0x2992, 0x2993), (0x2994, 0x2995), (0x2996, 0x2997), (0x2998, 0x2999), (0x29d9, 0x29da), (0x29db, 0x29dc), (0x29fd, 0x29fe), (0x2e23, 0x2e24)
    , (0x2e25, 0x2e26), (0x2e27, 0x2e28), (0x2e29, 0x2e2a), (0x3009, 0x300a), (0x300b, 0x300c), (0x300d, 0x300e), (0x300f, 0x3010), (0x3011, 0x3012), (0x3015, 0x3016), (0x3017, 0x3018)
    , (0x3019, 0x301a), (0x301b, 0x301c), (0x301e, 0x3020), (0xfd3e, 0xfd3f), (0xfe18, 0xfe19), (0xfe36, 0xfe37), (0xfe38, 0xfe39), (0xfe3a, 0xfe3b), (0xfe3c, 0xfe3d), (0xfe3e, 0xfe3f)
    , (0xfe40, 0xfe41), (0xfe42, 0xfe43), (0xfe44, 0xfe45), (0xfe48, 0xfe49), (0xfe5a, 0xfe5b), (0xfe5c, 0xfe5d), (0xfe5e, 0xfe5f), (0xff09, 0xff0a), (0xff3d, 0xff3e), (0xff5d, 0xff5e)
    , (0xff60, 0xff61), (0xff63, 0xff64)
    ]))
, ('Pf', (10, 10, [
    (0xbb, 0xbc), (0x2019, 0x201a), (0x201d, 0x201e), (0x203a, 0x203b), (0x2e03, 0x2e04), (0x2e05, 0x2e06), (0x2e0a, 0x2e0b), (0x2e0d, 0x2e0e), (0x2e1d, 0x2e1e), (0x2e21, 0x2e22)
    ]))
, ('Pi', (12, 11, [
    (0xab, 0xac), (0x2018, 0x2019), (0x201b, 0x201d), (0x201f, 0x2020), (0x2039, 0x203a), (0x2e02, 0x2e03), (0x2e04, 0x2e05), (0x2e09, 0x2e0a), (0x2e0c, 0x2e0d), (0x2e1c, 0x2e1d)
    , (0x2e20, 0x2e21)
    ]))
, ('Po', (588, 179, [
    (0x21, 0x24), (0x25, 0x28), (0x2a, 0x2b), (0x2c, 0x2d), (0x2e, 0x30), (0x3a, 0x3c), (0x3f, 0x41), (0x5c, 0x5d), (0xa1, 0xa2), (0xa7, 0xa8)
    , (0xb6, 0xb8), (0xbf, 0xc0), (0x37e, 0x37f), (0x387, 0x388), (0x55a, 0x560), (0x589, 0x58a), (0x5c0, 0x5c1), (0x5c3, 0x5c4), (0x5c6, 0x5c7), (0x5f3, 0x5f5)
    , (0x609, 0x60b), (0x60c, 0x60e), (0x61b, 0x61c), (0x61e, 0x620), (0x66a, 0x66e), (0x6d4, 0x6d5), (0x700, 0x70e), (0x7f7, 0x7fa), (0x830, 0x83f), (0x85e, 0x85f)
    , (0x964, 0x966), (0x970, 0x971), (0x9fd, 0x9fe), (0xa76, 0xa77), (0xaf0, 0xaf1), (0xc77, 0xc78), (0xc84, 0xc85), (0xdf4, 0xdf5), (0xe4f, 0xe50), (0xe5a, 0xe5c)
    , (0xf04, 0xf13), (0xf14, 0xf15), (0xf85, 0xf86), (0xfd0, 0xfd5), (0xfd9, 0xfdb), (0x104a, 0x1050), (0x10fb, 0x10fc), (0x1360, 0x1369), (0x166e, 0x166f), (0x16eb, 0x16ee)
    , (0x1735, 0x1737), (0x17d4, 0x17d7), (0x17d8, 0x17db), (0x1800, 0x1806), (0x1807, 0x180b), (0x1944, 0x1946), (0x1a1e, 0x1a20), (0x1aa0, 0x1aa7), (0x1aa8, 0x1aae), (0x1b5a, 0x1b61)
    , (0x1bfc, 0x1c00), (0x1c3b, 0x1c40), (0x1c7e, 0x1c80), (0x1cc0, 0x1cc8), (0x1cd3, 0x1cd4), (0x2016, 0x2018), (0x2020, 0x2028), (0x2030, 0x2039), (0x203b, 0x203f), (0x2041, 0x2044)
    , (0x2047, 0x2052), (0x2053, 0x2054), (0x2055, 0x205f), (0x2cf9, 0x2cfd), (0x2cfe, 0x2d00), (0x2d70, 0x2d71), (0x2e00, 0x2e02), (0x2e06, 0x2e09), (0x2e0b, 0x2e0c), (0x2e0e, 0x2e17)
    , (0x2e18, 0x2e1a), (0x2e1b, 0x2e1c), (0x2e1e, 0x2e20), (0x2e2a, 0x2e2f), (0x2e30, 0x2e3a), (0x2e3c, 0x2e40), (0x2e41, 0x2e42), (0x2e43, 0x2e50), (0x3001, 0x3004), (0x303d, 0x303e)
    , (0x30fb, 0x30fc), (0xa4fe, 0xa500), (0xa60d, 0xa610), (0xa673, 0xa674), (0xa67e, 0xa67f), (0xa6f2, 0xa6f8), (0xa874, 0xa878), (0xa8ce, 0xa8d0), (0xa8f8, 0xa8fb), (0xa8fc, 0xa8fd)
    , (0xa92e, 0xa930), (0xa95f, 0xa960), (0xa9c1, 0xa9ce), (0xa9de, 0xa9e0), (0xaa5c, 0xaa60), (0xaade, 0xaae0), (0xaaf0, 0xaaf2), (0xabeb, 0xabec), (0xfe10, 0xfe17), (0xfe19, 0xfe1a)
    , (0xfe30, 0xfe31), (0xfe45, 0xfe47), (0xfe49, 0xfe4d), (0xfe50, 0xfe53), (0xfe54, 0xfe58), (0xfe5f, 0xfe62), (0xfe68, 0xfe69), (0xfe6a, 0xfe6c), (0xff01, 0xff04), (0xff05, 0xff08)
    , (0xff0a, 0xff0b), (0xff0c, 0xff0d), (0xff0e, 0xff10), (0xff1a, 0xff1c), (0xff1f, 0xff21), (0xff3c, 0xff3d), (0xff61, 0xff62), (0xff64, 0xff66), (0x10100, 0x10103), (0x1039f, 0x103a0)
    , (0x103d0, 0x103d1), (0x1056f, 0x10570), (0x10857, 0x10858), (0x1091f, 0x10920), (0x1093f, 0x10940), (0x10a50, 0x10a59), (0x10a7f, 0x10a80), (0x10af0, 0x10af7), (0x10b39, 0x10b40), (0x10b99, 0x10b9d)
    , (0x10f55, 0x10f5a), (0x11047, 0x1104e), (0x110bb, 0x110bd), (0x110be, 0x110c2), (0x11140, 0x11144), (0x11174, 0x11176), (0x111c5, 0x111c9), (0x111cd, 0x111ce), (0x111db, 0x111dc), (0x111dd, 0x111e0)
    , (0x11238, 0x1123e), (0x112a9, 0x112aa), (0x1144b, 0x11450), (0x1145b, 0x1145c), (0x1145d, 0x1145e), (0x114c6, 0x114c7), (0x115c1, 0x115d8), (0x11641, 0x11644), (0x11660, 0x1166d), (0x1173c, 0x1173f)
    , (0x1183b, 0x1183c), (0x119e2, 0x119e3), (0x11a3f, 0x11a47), (0x11a9a, 0x11a9d), (0x11a9e, 0x11aa3), (0x11c41, 0x11c46), (0x11c70, 0x11c72), (0x11ef7, 0x11ef9), (0x11fff, 0x12000), (0x12470, 0x12475)
    , (0x16a6e, 0x16a70), (0x16af5, 0x16af6), (0x16b37, 0x16b3c), (0x16b44, 0x16b45), (0x16e97, 0x16e9b), (0x16fe2, 0x16fe3), (0x1bc9f, 0x1bca0), (0x1da87, 0x1da8c), (0x1e95e, 0x1e960)
    ]))
, ('Ps', (75, 75, [
    (0x28, 0x29), (0x5b, 0x5c), (0x7b, 0x7c), (0xf3a, 0xf3b), (0xf3c, 0xf3d), (0x169b, 0x169c), (0x201a, 0x201b), (0x201e, 0x201f), (0x2045, 0x2046), (0x207d, 0x207e)
    , (0x208d, 0x208e), (0x2308, 0x2309), (0x230a, 0x230b), (0x2329, 0x232a), (0x2768, 0x2769), (0x276a, 0x276b), (0x276c, 0x276d), (0x276e, 0x276f), (0x2770, 0x2771), (0x2772, 0x2773)
    , (0x2774, 0x2775), (0x27c5, 0x27c6), (0x27e6, 0x27e7), (0x27e8, 0x27e9), (0x27ea, 0x27eb), (0x27ec, 0x27ed), (0x27ee, 0x27ef), (0x2983, 0x2984), (0x2985, 0x2986), (0x2987, 0x2988)
    , (0x2989, 0x298a), (0x298b, 0x298c), (0x298d, 0x298e), (0x298f, 0x2990), (0x2991, 0x2992), (0x2993, 0x2994), (0x2995, 0x2996), (0x2997, 0x2998), (0x29d8, 0x29d9), (0x29da, 0x29db)
    , (0x29fc, 0x29fd), (0x2e22, 0x2e23), (0x2e24, 0x2e25), (0x2e26, 0x2e27), (0x2e28, 0x2e29), (0x2e42, 0x2e43), (0x3008, 0x3009), (0x300a, 0x300b), (0x300c, 0x300d), (0x300e, 0x300f)
    , (0x3010, 0x3011), (0x3014, 0x3015), (0x3016, 0x3017), (0x3018, 0x3019), (0x301a, 0x301b), (0x301d, 0x301e), (0xfd3f, 0xfd40), (0xfe17, 0xfe18), (0xfe35, 0xfe36), (0xfe37, 0xfe38)
    , (0xfe39, 0xfe3a), (0xfe3b, 0xfe3c), (0xfe3d, 0xfe3e), (0xfe3f, 0xfe40), (0xfe41, 0xfe42), (0xfe43, 0xfe44), (0xfe47, 0xfe48), (0xfe59, 0xfe5a), (0xfe5b, 0xfe5c), (0xfe5d, 0xfe5e)
    , (0xff08, 0xff09), (0xff3b, 0xff3c), (0xff5b, 0xff5c), (0xff5f, 0xff60), (0xff62, 0xff63)
    ]))
, ('Sc', (62, 21, [
    (0x24, 0x25), (0xa2, 0xa6), (0x58f, 0x590), (0x60b, 0x60c), (0x7fe, 0x800), (0x9f2, 0x9f4), (0x9fb, 0x9fc), (0xaf1, 0xaf2), (0xbf9, 0xbfa), (0xe3f, 0xe40)
    , (0x17db, 0x17dc), (0x20a0, 0x20c0), (0xa838, 0xa839), (0xfdfc, 0xfdfd), (0xfe69, 0xfe6a), (0xff04, 0xff05), (0xffe0, 0xffe2), (0xffe5, 0xffe7), (0x11fdd, 0x11fe1), (0x1e2ff, 0x1e300)
    , (0x1ecb0, 0x1ecb1)
    ]))
, ('Sk', (121, 29, [
    (0x5e, 0x5f), (0x60, 0x61), (0xa8, 0xa9), (0xaf, 0xb0), (0xb4, 0xb5), (0xb8, 0xb9), (0x2c2, 0x2c6), (0x2d2, 0x2e0), (0x2e5, 0x2ec), (0x2ed, 0x2ee)
    , (0x2ef, 0x300), (0x375, 0x376), (0x384, 0x386), (0x1fbd, 0x1fbe), (0x1fbf, 0x1fc2), (0x1fcd, 0x1fd0), (0x1fdd, 0x1fe0), (0x1fed, 0x1ff0), (0x1ffd, 0x1fff), (0x309b, 0x309d)
    , (0xa700, 0xa717), (0xa720, 0xa722), (0xa789, 0xa78b), (0xab5b, 0xab5c), (0xfbb2, 0xfbc2), (0xff3e, 0xff3f), (0xff40, 0xff41), (0xffe3, 0xffe4), (0x1f3fb, 0x1f400)
    ]))
, ('Sm', (948, 64, [
    (0x2b, 0x2c), (0x3c, 0x3f), (0x7c, 0x7d), (0x7e, 0x7f), (0xac, 0xad), (0xb1, 0xb2), (0xd7, 0xd8), (0xf7, 0xf8), (0x3f6, 0x3f7), (0x606, 0x609)
    , (0x2044, 0x2045), (0x2052, 0x2053), (0x207a, 0x207d), (0x208a, 0x208d), (0x2118, 0x2119), (0x2140, 0x2145), (0x214b, 0x214c), (0x2190, 0x2195), (0x219a, 0x219c), (0x21a0, 0x21a1)
    , (0x21a3, 0x21a4), (0x21a6, 0x21a7), (0x21ae, 0x21af), (0x21ce, 0x21d0), (0x21d2, 0x21d3), (0x21d4, 0x21d5), (0x21f4, 0x2300), (0x2320, 0x2322), (0x237c, 0x237d), (0x239b, 0x23b4)
    , (0x23dc, 0x23e2), (0x25b7, 0x25b8), (0x25c1, 0x25c2), (0x25f8, 0x2600), (0x266f, 0x2670), (0x27c0, 0x27c5), (0x27c7, 0x27e6), (0x27f0, 0x2800), (0x2900, 0x2983), (0x2999, 0x29d8)
    , (0x29dc, 0x29fc), (0x29fe, 0x2b00), (0x2b30, 0x2b45), (0x2b47, 0x2b4d), (0xfb29, 0xfb2a), (0xfe62, 0xfe63), (0xfe64, 0xfe67), (0xff0b, 0xff0c), (0xff1c, 0xff1f), (0xff5c, 0xff5d)
    , (0xff5e, 0xff5f), (0xffe2, 0xffe3), (0xffe9, 0xffed), (0x1d6c1, 0x1d6c2), (0x1d6db, 0x1d6dc), (0x1d6fb, 0x1d6fc), (0x1d715, 0x1d716), (0x1d735, 0x1d736), (0x1d74f, 0x1d750), (0x1d76f, 0x1d770)
    , (0x1d789, 0x1d78a), (0x1d7a9, 0x1d7aa), (0x1d7c3, 0x1d7c4), (0x1eef0, 0x1eef2)
    ]))
, ('So', (6161, 180, [
    (0xa6, 0xa7), (0xa9, 0xaa), (0xae, 0xaf), (0xb0, 0xb1), (0x482, 0x483), (0x58d, 0x58f), (0x60e, 0x610), (0x6de, 0x6df), (0x6e9, 0x6ea), (0x6fd, 0x6ff)
    , (0x7f6, 0x7f7), (0x9fa, 0x9fb), (0xb70, 0xb71), (0xbf3, 0xbf9), (0xbfa, 0xbfb), (0xc7f, 0xc80), (0xd4f, 0xd50), (0xd79, 0xd7a), (0xf01, 0xf04), (0xf13, 0xf14)
    , (0xf15, 0xf18), (0xf1a, 0xf20), (0xf34, 0xf35), (0xf36, 0xf37), (0xf38, 0xf39), (0xfbe, 0xfc6), (0xfc7, 0xfcd), (0xfce, 0xfd0), (0xfd5, 0xfd9), (0x109e, 0x10a0)
    , (0x1390, 0x139a), (0x166d, 0x166e), (0x1940, 0x1941), (0x19de, 0x1a00), (0x1b61, 0x1b6b), (0x1b74, 0x1b7d), (0x2100, 0x2102), (0x2103, 0x2107), (0x2108, 0x210a), (0x2114, 0x2115)
    , (0x2116, 0x2118), (0x211e, 0x2124), (0x2125, 0x2126), (0x2127, 0x2128), (0x2129, 0x212a), (0x212e, 0x212f), (0x213a, 0x213c), (0x214a, 0x214b), (0x214c, 0x214e), (0x214f, 0x2150)
    , (0x218a, 0x218c), (0x2195, 0x219a), (0x219c, 0x21a0), (0x21a1, 0x21a3), (0x21a4, 0x21a6), (0x21a7, 0x21ae), (0x21af, 0x21ce), (0x21d0, 0x21d2), (0x21d3, 0x21d4), (0x21d5, 0x21f4)
    , (0x2300, 0x2308), (0x230c, 0x2320), (0x2322, 0x2329), (0x232b, 0x237c), (0x237d, 0x239b), (0x23b4, 0x23dc), (0x23e2, 0x2427), (0x2440, 0x244b), (0x249c, 0x24ea), (0x2500, 0x25b7)
    , (0x25b8, 0x25c1), (0x25c2, 0x25f8), (0x2600, 0x266f), (0x2670, 0x2768), (0x2794, 0x27c0), (0x2800, 0x2900), (0x2b00, 0x2b30), (0x2b45, 0x2b47), (0x2b4d, 0x2b74), (0x2b76, 0x2b96)
    , (0x2b98, 0x2c00), (0x2ce5, 0x2ceb), (0x2e80, 0x2e9a), (0x2e9b, 0x2ef4), (0x2f00, 0x2fd6), (0x2ff0, 0x2ffc), (0x3004, 0x3005), (0x3012, 0x3014), (0x3020, 0x3021), (0x3036, 0x3038)
    , (0x303e, 0x3040), (0x3190, 0x3192), (0x3196, 0x31a0), (0x31c0, 0x31e4), (0x3200, 0x321f), (0x322a, 0x3248), (0x3250, 0x3251), (0x3260, 0x3280), (0x328a, 0x32b1), (0x32c0, 0x3400)
    , (0x4dc0, 0x4e00), (0xa490, 0xa4c7), (0xa828, 0xa82c), (0xa836, 0xa838), (0xa839, 0xa83a), (0xaa77, 0xaa7a), (0xfdfd, 0xfdfe), (0xffe4, 0xffe5), (0xffe8, 0xffe9), (0xffed, 0xffef)
    , (0xfffc, 0xfffe), (0x10137, 0x10140), (0x10179, 0x1018a), (0x1018c, 0x1018f), (0x10190, 0x1019c), (0x101a0, 0x101a1), (0x101d0, 0x101fd), (0x10877, 0x10879), (0x10ac8, 0x10ac9), (0x1173f, 0x11740)
    , (0x11fd5, 0x11fdd), (0x11fe1, 0x11ff2), (0x16b3c, 0x16b40), (0x16b45, 0x16b46), (0x1bc9c, 0x1bc9d), (0x1d000, 0x1d0f6), (0x1d100, 0x1d127), (0x1d129, 0x1d165), (0x1d16a, 0x1d16d), (0x1d183, 0x1d185)
    , (0x1d18c, 0x1d1aa), (0x1d1ae, 0x1d1e9), (0x1d200, 0x1d242), (0x1d245, 0x1d246), (0x1d300, 0x1d357), (0x1d800, 0x1da00), (0x1da37, 0x1da3b), (0x1da6d, 0x1da75), (0x1da76, 0x1da84), (0x1da85, 0x1da87)
    , (0x1e14f, 0x1e150), (0x1ecac, 0x1ecad), (0x1ed2e, 0x1ed2f), (0x1f000, 0x1f02c), (0x1f030, 0x1f094), (0x1f0a0, 0x1f0af), (0x1f0b1, 0x1f0c0), (0x1f0c1, 0x1f0d0), (0x1f0d1, 0x1f0f6), (0x1f110, 0x1f16d)
    , (0x1f170, 0x1f1ad), (0x1f1e6, 0x1f203), (0x1f210, 0x1f23c), (0x1f240, 0x1f249), (0x1f250, 0x1f252), (0x1f260, 0x1f266), (0x1f300, 0x1f3fb), (0x1f400, 0x1f6d6), (0x1f6e0, 0x1f6ed), (0x1f6f0, 0x1f6fb)
    , (0x1f700, 0x1f774), (0x1f780, 0x1f7d9), (0x1f7e0, 0x1f7ec), (0x1f800, 0x1f80c), (0x1f810, 0x1f848), (0x1f850, 0x1f85a), (0x1f860, 0x1f888), (0x1f890, 0x1f8ae), (0x1f900, 0x1f90c), (0x1f90d, 0x1f972)
    , (0x1f973, 0x1f977), (0x1f97a, 0x1f9a3), (0x1f9a5, 0x1f9ab), (0x1f9ae, 0x1f9cb), (0x1f9cd, 0x1fa54), (0x1fa60, 0x1fa6e), (0x1fa70, 0x1fa74), (0x1fa78, 0x1fa7b), (0x1fa80, 0x1fa83), (0x1fa90, 0x1fa96)
    ]))
, ('Zl', (1, 1, [
    (0x2028, 0x2029)
    ]))
, ('Zp', (1, 1, [
    (0x2029, 0x202a)
    ]))
, ('Zs', (17, 7, [
    (0x20, 0x21), (0xa0, 0xa1), (0x1680, 0x1681), (0x2000, 0x200b), (0x202f, 0x2030), (0x205f, 0x2060), (0x3000, 0x3001)
    ]))
]



#-c rng2prop
#east_asian_width
(1786
,[((0x0, 0x20), 'N')
, ((0x20, 0x7f), 'Na')
, ((0x7f, 0xa1), 'N')
, ((0xa1, 0xa2), 'A')
, ((0xa2, 0xa4), 'Na')
, ((0xa4, 0xa5), 'A')
, ((0xa5, 0xa7), 'Na')
, ((0xa7, 0xa9), 'A')
, ((0xa9, 0xaa), 'N')
, ((0xaa, 0xab), 'A')
, ((0xab, 0xac), 'N')
, ((0xac, 0xad), 'Na')
, ((0xad, 0xaf), 'A')
, ((0xaf, 0xb0), 'Na')
, ((0xb0, 0xb5), 'A')
, ((0xb5, 0xb6), 'N')
, ((0xb6, 0xbb), 'A')
, ((0xbb, 0xbc), 'N')
, ((0xbc, 0xc0), 'A')
, ((0xc0, 0xc6), 'N')
, ((0xc6, 0xc7), 'A')
, ((0xc7, 0xd0), 'N')
, ((0xd0, 0xd1), 'A')
, ((0xd1, 0xd7), 'N')
, ((0xd7, 0xd9), 'A')
, ((0xd9, 0xde), 'N')
, ((0xde, 0xe2), 'A')
, ((0xe2, 0xe6), 'N')
, ((0xe6, 0xe7), 'A')
, ((0xe7, 0xe8), 'N')
, ((0xe8, 0xeb), 'A')
, ((0xeb, 0xec), 'N')
, ((0xec, 0xee), 'A')
, ((0xee, 0xf0), 'N')
, ((0xf0, 0xf1), 'A')
, ((0xf1, 0xf2), 'N')
, ((0xf2, 0xf4), 'A')
, ((0xf4, 0xf7), 'N')
, ((0xf7, 0xfb), 'A')
, ((0xfb, 0xfc), 'N')
, ((0xfc, 0xfd), 'A')
, ((0xfd, 0xfe), 'N')
, ((0xfe, 0xff), 'A')
, ((0xff, 0x101), 'N')
, ((0x101, 0x102), 'A')
, ((0x102, 0x111), 'N')
, ((0x111, 0x112), 'A')
, ((0x112, 0x113), 'N')
, ((0x113, 0x114), 'A')
, ((0x114, 0x11b), 'N')
, ((0x11b, 0x11c), 'A')
, ((0x11c, 0x126), 'N')
, ((0x126, 0x128), 'A')
, ((0x128, 0x12b), 'N')
, ((0x12b, 0x12c), 'A')
, ((0x12c, 0x131), 'N')
, ((0x131, 0x134), 'A')
, ((0x134, 0x138), 'N')
, ((0x138, 0x139), 'A')
, ((0x139, 0x13f), 'N')
, ((0x13f, 0x143), 'A')
, ((0x143, 0x144), 'N')
, ((0x144, 0x145), 'A')
, ((0x145, 0x148), 'N')
, ((0x148, 0x14c), 'A')
, ((0x14c, 0x14d), 'N')
, ((0x14d, 0x14e), 'A')
, ((0x14e, 0x152), 'N')
, ((0x152, 0x154), 'A')
, ((0x154, 0x166), 'N')
, ((0x166, 0x168), 'A')
, ((0x168, 0x16b), 'N')
, ((0x16b, 0x16c), 'A')
, ((0x16c, 0x1ce), 'N')
, ((0x1ce, 0x1cf), 'A')
, ((0x1cf, 0x1d0), 'N')
, ((0x1d0, 0x1d1), 'A')
, ((0x1d1, 0x1d2), 'N')
, ((0x1d2, 0x1d3), 'A')
, ((0x1d3, 0x1d4), 'N')
, ((0x1d4, 0x1d5), 'A')
, ((0x1d5, 0x1d6), 'N')
, ((0x1d6, 0x1d7), 'A')
, ((0x1d7, 0x1d8), 'N')
, ((0x1d8, 0x1d9), 'A')
, ((0x1d9, 0x1da), 'N')
, ((0x1da, 0x1db), 'A')
, ((0x1db, 0x1dc), 'N')
, ((0x1dc, 0x1dd), 'A')
, ((0x1dd, 0x251), 'N')
, ((0x251, 0x252), 'A')
, ((0x252, 0x261), 'N')
, ((0x261, 0x262), 'A')
, ((0x262, 0x2c4), 'N')
, ((0x2c4, 0x2c5), 'A')
, ((0x2c5, 0x2c7), 'N')
, ((0x2c7, 0x2c8), 'A')
, ((0x2c8, 0x2c9), 'N')
, ((0x2c9, 0x2cc), 'A')
, ((0x2cc, 0x2cd), 'N')
, ((0x2cd, 0x2ce), 'A')
, ((0x2ce, 0x2d0), 'N')
, ((0x2d0, 0x2d1), 'A')
, ((0x2d1, 0x2d8), 'N')
, ((0x2d8, 0x2dc), 'A')
, ((0x2dc, 0x2dd), 'N')
, ((0x2dd, 0x2de), 'A')
, ((0x2de, 0x2df), 'N')
, ((0x2df, 0x2e0), 'A')
, ((0x2e0, 0x300), 'N')
, ((0x300, 0x370), 'A')
, ((0x370, 0x378), 'N')
, ((0x378, 0x37a), 'F')
, ((0x37a, 0x380), 'N')
, ((0x380, 0x384), 'F')
, ((0x384, 0x38b), 'N')
, ((0x38b, 0x38c), 'F')
, ((0x38c, 0x38d), 'N')
, ((0x38d, 0x38e), 'F')
, ((0x38e, 0x391), 'N')
, ((0x391, 0x3a2), 'A')
, ((0x3a2, 0x3a3), 'F')
, ((0x3a3, 0x3aa), 'A')
, ((0x3aa, 0x3b1), 'N')
, ((0x3b1, 0x3c2), 'A')
, ((0x3c2, 0x3c3), 'N')
, ((0x3c3, 0x3ca), 'A')
, ((0x3ca, 0x401), 'N')
, ((0x401, 0x402), 'A')
, ((0x402, 0x410), 'N')
, ((0x410, 0x450), 'A')
, ((0x450, 0x451), 'N')
, ((0x451, 0x452), 'A')
, ((0x452, 0x530), 'N')
, ((0x530, 0x531), 'F')
, ((0x531, 0x557), 'N')
, ((0x557, 0x559), 'F')
, ((0x559, 0x58b), 'N')
, ((0x58b, 0x58d), 'F')
, ((0x58d, 0x590), 'N')
, ((0x590, 0x591), 'F')
, ((0x591, 0x5c8), 'N')
, ((0x5c8, 0x5d0), 'F')
, ((0x5d0, 0x5eb), 'N')
, ((0x5eb, 0x5ef), 'F')
, ((0x5ef, 0x5f5), 'N')
, ((0x5f5, 0x600), 'F')
, ((0x600, 0x61d), 'N')
, ((0x61d, 0x61e), 'F')
, ((0x61e, 0x70e), 'N')
, ((0x70e, 0x70f), 'F')
, ((0x70f, 0x74b), 'N')
, ((0x74b, 0x74d), 'F')
, ((0x74d, 0x7b2), 'N')
, ((0x7b2, 0x7c0), 'F')
, ((0x7c0, 0x7fb), 'N')
, ((0x7fb, 0x7fd), 'F')
, ((0x7fd, 0x82e), 'N')
, ((0x82e, 0x830), 'F')
, ((0x830, 0x83f), 'N')
, ((0x83f, 0x840), 'F')
, ((0x840, 0x85c), 'N')
, ((0x85c, 0x85e), 'F')
, ((0x85e, 0x85f), 'N')
, ((0x85f, 0x860), 'F')
, ((0x860, 0x86b), 'N')
, ((0x86b, 0x8a0), 'F')
, ((0x8a0, 0x8b5), 'N')
, ((0x8b5, 0x8b6), 'F')
, ((0x8b6, 0x8be), 'N')
, ((0x8be, 0x8d3), 'F')
, ((0x8d3, 0x984), 'N')
, ((0x984, 0x985), 'F')
, ((0x985, 0x98d), 'N')
, ((0x98d, 0x98f), 'F')
, ((0x98f, 0x991), 'N')
, ((0x991, 0x993), 'F')
, ((0x993, 0x9a9), 'N')
, ((0x9a9, 0x9aa), 'F')
, ((0x9aa, 0x9b1), 'N')
, ((0x9b1, 0x9b2), 'F')
, ((0x9b2, 0x9b3), 'N')
, ((0x9b3, 0x9b6), 'F')
, ((0x9b6, 0x9ba), 'N')
, ((0x9ba, 0x9bc), 'F')
, ((0x9bc, 0x9c5), 'N')
, ((0x9c5, 0x9c7), 'F')
, ((0x9c7, 0x9c9), 'N')
, ((0x9c9, 0x9cb), 'F')
, ((0x9cb, 0x9cf), 'N')
, ((0x9cf, 0x9d7), 'F')
, ((0x9d7, 0x9d8), 'N')
, ((0x9d8, 0x9dc), 'F')
, ((0x9dc, 0x9de), 'N')
, ((0x9de, 0x9df), 'F')
, ((0x9df, 0x9e4), 'N')
, ((0x9e4, 0x9e6), 'F')
, ((0x9e6, 0x9ff), 'N')
, ((0x9ff, 0xa01), 'F')
, ((0xa01, 0xa04), 'N')
, ((0xa04, 0xa05), 'F')
, ((0xa05, 0xa0b), 'N')
, ((0xa0b, 0xa0f), 'F')
, ((0xa0f, 0xa11), 'N')
, ((0xa11, 0xa13), 'F')
, ((0xa13, 0xa29), 'N')
, ((0xa29, 0xa2a), 'F')
, ((0xa2a, 0xa31), 'N')
, ((0xa31, 0xa32), 'F')
, ((0xa32, 0xa34), 'N')
, ((0xa34, 0xa35), 'F')
, ((0xa35, 0xa37), 'N')
, ((0xa37, 0xa38), 'F')
, ((0xa38, 0xa3a), 'N')
, ((0xa3a, 0xa3c), 'F')
, ((0xa3c, 0xa3d), 'N')
, ((0xa3d, 0xa3e), 'F')
, ((0xa3e, 0xa43), 'N')
, ((0xa43, 0xa47), 'F')
, ((0xa47, 0xa49), 'N')
, ((0xa49, 0xa4b), 'F')
, ((0xa4b, 0xa4e), 'N')
, ((0xa4e, 0xa51), 'F')
, ((0xa51, 0xa52), 'N')
, ((0xa52, 0xa59), 'F')
, ((0xa59, 0xa5d), 'N')
, ((0xa5d, 0xa5e), 'F')
, ((0xa5e, 0xa5f), 'N')
, ((0xa5f, 0xa66), 'F')
, ((0xa66, 0xa77), 'N')
, ((0xa77, 0xa81), 'F')
, ((0xa81, 0xa84), 'N')
, ((0xa84, 0xa85), 'F')
, ((0xa85, 0xa8e), 'N')
, ((0xa8e, 0xa8f), 'F')
, ((0xa8f, 0xa92), 'N')
, ((0xa92, 0xa93), 'F')
, ((0xa93, 0xaa9), 'N')
, ((0xaa9, 0xaaa), 'F')
, ((0xaaa, 0xab1), 'N')
, ((0xab1, 0xab2), 'F')
, ((0xab2, 0xab4), 'N')
, ((0xab4, 0xab5), 'F')
, ((0xab5, 0xaba), 'N')
, ((0xaba, 0xabc), 'F')
, ((0xabc, 0xac6), 'N')
, ((0xac6, 0xac7), 'F')
, ((0xac7, 0xaca), 'N')
, ((0xaca, 0xacb), 'F')
, ((0xacb, 0xace), 'N')
, ((0xace, 0xad0), 'F')
, ((0xad0, 0xad1), 'N')
, ((0xad1, 0xae0), 'F')
, ((0xae0, 0xae4), 'N')
, ((0xae4, 0xae6), 'F')
, ((0xae6, 0xaf2), 'N')
, ((0xaf2, 0xaf9), 'F')
, ((0xaf9, 0xb00), 'N')
, ((0xb00, 0xb01), 'F')
, ((0xb01, 0xb04), 'N')
, ((0xb04, 0xb05), 'F')
, ((0xb05, 0xb0d), 'N')
, ((0xb0d, 0xb0f), 'F')
, ((0xb0f, 0xb11), 'N')
, ((0xb11, 0xb13), 'F')
, ((0xb13, 0xb29), 'N')
, ((0xb29, 0xb2a), 'F')
, ((0xb2a, 0xb31), 'N')
, ((0xb31, 0xb32), 'F')
, ((0xb32, 0xb34), 'N')
, ((0xb34, 0xb35), 'F')
, ((0xb35, 0xb3a), 'N')
, ((0xb3a, 0xb3c), 'F')
, ((0xb3c, 0xb45), 'N')
, ((0xb45, 0xb47), 'F')
, ((0xb47, 0xb49), 'N')
, ((0xb49, 0xb4b), 'F')
, ((0xb4b, 0xb4e), 'N')
, ((0xb4e, 0xb56), 'F')
, ((0xb56, 0xb58), 'N')
, ((0xb58, 0xb5c), 'F')
, ((0xb5c, 0xb5e), 'N')
, ((0xb5e, 0xb5f), 'F')
, ((0xb5f, 0xb64), 'N')
, ((0xb64, 0xb66), 'F')
, ((0xb66, 0xb78), 'N')
, ((0xb78, 0xb82), 'F')
, ((0xb82, 0xb84), 'N')
, ((0xb84, 0xb85), 'F')
, ((0xb85, 0xb8b), 'N')
, ((0xb8b, 0xb8e), 'F')
, ((0xb8e, 0xb91), 'N')
, ((0xb91, 0xb92), 'F')
, ((0xb92, 0xb96), 'N')
, ((0xb96, 0xb99), 'F')
, ((0xb99, 0xb9b), 'N')
, ((0xb9b, 0xb9c), 'F')
, ((0xb9c, 0xb9d), 'N')
, ((0xb9d, 0xb9e), 'F')
, ((0xb9e, 0xba0), 'N')
, ((0xba0, 0xba3), 'F')
, ((0xba3, 0xba5), 'N')
, ((0xba5, 0xba8), 'F')
, ((0xba8, 0xbab), 'N')
, ((0xbab, 0xbae), 'F')
, ((0xbae, 0xbba), 'N')
, ((0xbba, 0xbbe), 'F')
, ((0xbbe, 0xbc3), 'N')
, ((0xbc3, 0xbc6), 'F')
, ((0xbc6, 0xbc9), 'N')
, ((0xbc9, 0xbca), 'F')
, ((0xbca, 0xbce), 'N')
, ((0xbce, 0xbd0), 'F')
, ((0xbd0, 0xbd1), 'N')
, ((0xbd1, 0xbd7), 'F')
, ((0xbd7, 0xbd8), 'N')
, ((0xbd8, 0xbe6), 'F')
, ((0xbe6, 0xbfb), 'N')
, ((0xbfb, 0xc00), 'F')
, ((0xc00, 0xc0d), 'N')
, ((0xc0d, 0xc0e), 'F')
, ((0xc0e, 0xc11), 'N')
, ((0xc11, 0xc12), 'F')
, ((0xc12, 0xc29), 'N')
, ((0xc29, 0xc2a), 'F')
, ((0xc2a, 0xc3a), 'N')
, ((0xc3a, 0xc3d), 'F')
, ((0xc3d, 0xc45), 'N')
, ((0xc45, 0xc46), 'F')
, ((0xc46, 0xc49), 'N')
, ((0xc49, 0xc4a), 'F')
, ((0xc4a, 0xc4e), 'N')
, ((0xc4e, 0xc55), 'F')
, ((0xc55, 0xc57), 'N')
, ((0xc57, 0xc58), 'F')
, ((0xc58, 0xc5b), 'N')
, ((0xc5b, 0xc60), 'F')
, ((0xc60, 0xc64), 'N')
, ((0xc64, 0xc66), 'F')
, ((0xc66, 0xc70), 'N')
, ((0xc70, 0xc77), 'F')
, ((0xc77, 0xc8d), 'N')
, ((0xc8d, 0xc8e), 'F')
, ((0xc8e, 0xc91), 'N')
, ((0xc91, 0xc92), 'F')
, ((0xc92, 0xca9), 'N')
, ((0xca9, 0xcaa), 'F')
, ((0xcaa, 0xcb4), 'N')
, ((0xcb4, 0xcb5), 'F')
, ((0xcb5, 0xcba), 'N')
, ((0xcba, 0xcbc), 'F')
, ((0xcbc, 0xcc5), 'N')
, ((0xcc5, 0xcc6), 'F')
, ((0xcc6, 0xcc9), 'N')
, ((0xcc9, 0xcca), 'F')
, ((0xcca, 0xcce), 'N')
, ((0xcce, 0xcd5), 'F')
, ((0xcd5, 0xcd7), 'N')
, ((0xcd7, 0xcde), 'F')
, ((0xcde, 0xcdf), 'N')
, ((0xcdf, 0xce0), 'F')
, ((0xce0, 0xce4), 'N')
, ((0xce4, 0xce6), 'F')
, ((0xce6, 0xcf0), 'N')
, ((0xcf0, 0xcf1), 'F')
, ((0xcf1, 0xcf3), 'N')
, ((0xcf3, 0xd00), 'F')
, ((0xd00, 0xd04), 'N')
, ((0xd04, 0xd05), 'F')
, ((0xd05, 0xd0d), 'N')
, ((0xd0d, 0xd0e), 'F')
, ((0xd0e, 0xd11), 'N')
, ((0xd11, 0xd12), 'F')
, ((0xd12, 0xd45), 'N')
, ((0xd45, 0xd46), 'F')
, ((0xd46, 0xd49), 'N')
, ((0xd49, 0xd4a), 'F')
, ((0xd4a, 0xd50), 'N')
, ((0xd50, 0xd54), 'F')
, ((0xd54, 0xd64), 'N')
, ((0xd64, 0xd66), 'F')
, ((0xd66, 0xd80), 'N')
, ((0xd80, 0xd82), 'F')
, ((0xd82, 0xd84), 'N')
, ((0xd84, 0xd85), 'F')
, ((0xd85, 0xd97), 'N')
, ((0xd97, 0xd9a), 'F')
, ((0xd9a, 0xdb2), 'N')
, ((0xdb2, 0xdb3), 'F')
, ((0xdb3, 0xdbc), 'N')
, ((0xdbc, 0xdbd), 'F')
, ((0xdbd, 0xdbe), 'N')
, ((0xdbe, 0xdc0), 'F')
, ((0xdc0, 0xdc7), 'N')
, ((0xdc7, 0xdca), 'F')
, ((0xdca, 0xdcb), 'N')
, ((0xdcb, 0xdcf), 'F')
, ((0xdcf, 0xdd5), 'N')
, ((0xdd5, 0xdd6), 'F')
, ((0xdd6, 0xdd7), 'N')
, ((0xdd7, 0xdd8), 'F')
, ((0xdd8, 0xde0), 'N')
, ((0xde0, 0xde6), 'F')
, ((0xde6, 0xdf0), 'N')
, ((0xdf0, 0xdf2), 'F')
, ((0xdf2, 0xdf5), 'N')
, ((0xdf5, 0xe01), 'F')
, ((0xe01, 0xe3b), 'N')
, ((0xe3b, 0xe3f), 'F')
, ((0xe3f, 0xe5c), 'N')
, ((0xe5c, 0xe81), 'F')
, ((0xe81, 0xe83), 'N')
, ((0xe83, 0xe84), 'F')
, ((0xe84, 0xe85), 'N')
, ((0xe85, 0xe86), 'F')
, ((0xe86, 0xe8b), 'N')
, ((0xe8b, 0xe8c), 'F')
, ((0xe8c, 0xea4), 'N')
, ((0xea4, 0xea5), 'F')
, ((0xea5, 0xea6), 'N')
, ((0xea6, 0xea7), 'F')
, ((0xea7, 0xebe), 'N')
, ((0xebe, 0xec0), 'F')
, ((0xec0, 0xec5), 'N')
, ((0xec5, 0xec6), 'F')
, ((0xec6, 0xec7), 'N')
, ((0xec7, 0xec8), 'F')
, ((0xec8, 0xece), 'N')
, ((0xece, 0xed0), 'F')
, ((0xed0, 0xeda), 'N')
, ((0xeda, 0xedc), 'F')
, ((0xedc, 0xee0), 'N')
, ((0xee0, 0xf00), 'F')
, ((0xf00, 0xf48), 'N')
, ((0xf48, 0xf49), 'F')
, ((0xf49, 0xf6d), 'N')
, ((0xf6d, 0xf71), 'F')
, ((0xf71, 0xf98), 'N')
, ((0xf98, 0xf99), 'F')
, ((0xf99, 0xfbd), 'N')
, ((0xfbd, 0xfbe), 'F')
, ((0xfbe, 0xfcd), 'N')
, ((0xfcd, 0xfce), 'F')
, ((0xfce, 0xfdb), 'N')
, ((0xfdb, 0x1000), 'F')
, ((0x1000, 0x10c6), 'N')
, ((0x10c6, 0x10c7), 'F')
, ((0x10c7, 0x10c8), 'N')
, ((0x10c8, 0x10cd), 'F')
, ((0x10cd, 0x10ce), 'N')
, ((0x10ce, 0x10d0), 'F')
, ((0x10d0, 0x1100), 'N')
, ((0x1100, 0x1160), 'W')
, ((0x1160, 0x1249), 'N')
, ((0x1249, 0x124a), 'F')
, ((0x124a, 0x124e), 'N')
, ((0x124e, 0x1250), 'F')
, ((0x1250, 0x1257), 'N')
, ((0x1257, 0x1258), 'F')
, ((0x1258, 0x1259), 'N')
, ((0x1259, 0x125a), 'F')
, ((0x125a, 0x125e), 'N')
, ((0x125e, 0x1260), 'F')
, ((0x1260, 0x1289), 'N')
, ((0x1289, 0x128a), 'F')
, ((0x128a, 0x128e), 'N')
, ((0x128e, 0x1290), 'F')
, ((0x1290, 0x12b1), 'N')
, ((0x12b1, 0x12b2), 'F')
, ((0x12b2, 0x12b6), 'N')
, ((0x12b6, 0x12b8), 'F')
, ((0x12b8, 0x12bf), 'N')
, ((0x12bf, 0x12c0), 'F')
, ((0x12c0, 0x12c1), 'N')
, ((0x12c1, 0x12c2), 'F')
, ((0x12c2, 0x12c6), 'N')
, ((0x12c6, 0x12c8), 'F')
, ((0x12c8, 0x12d7), 'N')
, ((0x12d7, 0x12d8), 'F')
, ((0x12d8, 0x1311), 'N')
, ((0x1311, 0x1312), 'F')
, ((0x1312, 0x1316), 'N')
, ((0x1316, 0x1318), 'F')
, ((0x1318, 0x135b), 'N')
, ((0x135b, 0x135d), 'F')
, ((0x135d, 0x137d), 'N')
, ((0x137d, 0x1380), 'F')
, ((0x1380, 0x139a), 'N')
, ((0x139a, 0x13a0), 'F')
, ((0x13a0, 0x13f6), 'N')
, ((0x13f6, 0x13f8), 'F')
, ((0x13f8, 0x13fe), 'N')
, ((0x13fe, 0x1400), 'F')
, ((0x1400, 0x169d), 'N')
, ((0x169d, 0x16a0), 'F')
, ((0x16a0, 0x16f9), 'N')
, ((0x16f9, 0x1700), 'F')
, ((0x1700, 0x170d), 'N')
, ((0x170d, 0x170e), 'F')
, ((0x170e, 0x1715), 'N')
, ((0x1715, 0x1720), 'F')
, ((0x1720, 0x1737), 'N')
, ((0x1737, 0x1740), 'F')
, ((0x1740, 0x1754), 'N')
, ((0x1754, 0x1760), 'F')
, ((0x1760, 0x176d), 'N')
, ((0x176d, 0x176e), 'F')
, ((0x176e, 0x1771), 'N')
, ((0x1771, 0x1772), 'F')
, ((0x1772, 0x1774), 'N')
, ((0x1774, 0x1780), 'F')
, ((0x1780, 0x17de), 'N')
, ((0x17de, 0x17e0), 'F')
, ((0x17e0, 0x17ea), 'N')
, ((0x17ea, 0x17f0), 'F')
, ((0x17f0, 0x17fa), 'N')
, ((0x17fa, 0x1800), 'F')
, ((0x1800, 0x180f), 'N')
, ((0x180f, 0x1810), 'F')
, ((0x1810, 0x181a), 'N')
, ((0x181a, 0x1820), 'F')
, ((0x1820, 0x1879), 'N')
, ((0x1879, 0x1880), 'F')
, ((0x1880, 0x18ab), 'N')
, ((0x18ab, 0x18b0), 'F')
, ((0x18b0, 0x18f6), 'N')
, ((0x18f6, 0x1900), 'F')
, ((0x1900, 0x191f), 'N')
, ((0x191f, 0x1920), 'F')
, ((0x1920, 0x192c), 'N')
, ((0x192c, 0x1930), 'F')
, ((0x1930, 0x193c), 'N')
, ((0x193c, 0x1940), 'F')
, ((0x1940, 0x1941), 'N')
, ((0x1941, 0x1944), 'F')
, ((0x1944, 0x196e), 'N')
, ((0x196e, 0x1970), 'F')
, ((0x1970, 0x1975), 'N')
, ((0x1975, 0x1980), 'F')
, ((0x1980, 0x19ac), 'N')
, ((0x19ac, 0x19b0), 'F')
, ((0x19b0, 0x19ca), 'N')
, ((0x19ca, 0x19d0), 'F')
, ((0x19d0, 0x19db), 'N')
, ((0x19db, 0x19de), 'F')
, ((0x19de, 0x1a1c), 'N')
, ((0x1a1c, 0x1a1e), 'F')
, ((0x1a1e, 0x1a5f), 'N')
, ((0x1a5f, 0x1a60), 'F')
, ((0x1a60, 0x1a7d), 'N')
, ((0x1a7d, 0x1a7f), 'F')
, ((0x1a7f, 0x1a8a), 'N')
, ((0x1a8a, 0x1a90), 'F')
, ((0x1a90, 0x1a9a), 'N')
, ((0x1a9a, 0x1aa0), 'F')
, ((0x1aa0, 0x1aae), 'N')
, ((0x1aae, 0x1ab0), 'F')
, ((0x1ab0, 0x1abf), 'N')
, ((0x1abf, 0x1b00), 'F')
, ((0x1b00, 0x1b4c), 'N')
, ((0x1b4c, 0x1b50), 'F')
, ((0x1b50, 0x1b7d), 'N')
, ((0x1b7d, 0x1b80), 'F')
, ((0x1b80, 0x1bf4), 'N')
, ((0x1bf4, 0x1bfc), 'F')
, ((0x1bfc, 0x1c38), 'N')
, ((0x1c38, 0x1c3b), 'F')
, ((0x1c3b, 0x1c4a), 'N')
, ((0x1c4a, 0x1c4d), 'F')
, ((0x1c4d, 0x1c89), 'N')
, ((0x1c89, 0x1c90), 'F')
, ((0x1c90, 0x1cbb), 'N')
, ((0x1cbb, 0x1cbd), 'F')
, ((0x1cbd, 0x1cc8), 'N')
, ((0x1cc8, 0x1cd0), 'F')
, ((0x1cd0, 0x1cfb), 'N')
, ((0x1cfb, 0x1d00), 'F')
, ((0x1d00, 0x1dfa), 'N')
, ((0x1dfa, 0x1dfb), 'F')
, ((0x1dfb, 0x1f16), 'N')
, ((0x1f16, 0x1f18), 'F')
, ((0x1f18, 0x1f1e), 'N')
, ((0x1f1e, 0x1f20), 'F')
, ((0x1f20, 0x1f46), 'N')
, ((0x1f46, 0x1f48), 'F')
, ((0x1f48, 0x1f4e), 'N')
, ((0x1f4e, 0x1f50), 'F')
, ((0x1f50, 0x1f58), 'N')
, ((0x1f58, 0x1f59), 'F')
, ((0x1f59, 0x1f5a), 'N')
, ((0x1f5a, 0x1f5b), 'F')
, ((0x1f5b, 0x1f5c), 'N')
, ((0x1f5c, 0x1f5d), 'F')
, ((0x1f5d, 0x1f5e), 'N')
, ((0x1f5e, 0x1f5f), 'F')
, ((0x1f5f, 0x1f7e), 'N')
, ((0x1f7e, 0x1f80), 'F')
, ((0x1f80, 0x1fb5), 'N')
, ((0x1fb5, 0x1fb6), 'F')
, ((0x1fb6, 0x1fc5), 'N')
, ((0x1fc5, 0x1fc6), 'F')
, ((0x1fc6, 0x1fd4), 'N')
, ((0x1fd4, 0x1fd6), 'F')
, ((0x1fd6, 0x1fdc), 'N')
, ((0x1fdc, 0x1fdd), 'F')
, ((0x1fdd, 0x1ff0), 'N')
, ((0x1ff0, 0x1ff2), 'F')
, ((0x1ff2, 0x1ff5), 'N')
, ((0x1ff5, 0x1ff6), 'F')
, ((0x1ff6, 0x1fff), 'N')
, ((0x1fff, 0x2000), 'F')
, ((0x2000, 0x2010), 'N')
, ((0x2010, 0x2011), 'A')
, ((0x2011, 0x2013), 'N')
, ((0x2013, 0x2017), 'A')
, ((0x2017, 0x2018), 'N')
, ((0x2018, 0x201a), 'A')
, ((0x201a, 0x201c), 'N')
, ((0x201c, 0x201e), 'A')
, ((0x201e, 0x2020), 'N')
, ((0x2020, 0x2023), 'A')
, ((0x2023, 0x2024), 'N')
, ((0x2024, 0x2028), 'A')
, ((0x2028, 0x2030), 'N')
, ((0x2030, 0x2031), 'A')
, ((0x2031, 0x2032), 'N')
, ((0x2032, 0x2034), 'A')
, ((0x2034, 0x2035), 'N')
, ((0x2035, 0x2036), 'A')
, ((0x2036, 0x203b), 'N')
, ((0x203b, 0x203c), 'A')
, ((0x203c, 0x203e), 'N')
, ((0x203e, 0x203f), 'A')
, ((0x203f, 0x2065), 'N')
, ((0x2065, 0x2066), 'F')
, ((0x2066, 0x2072), 'N')
, ((0x2072, 0x2074), 'F')
, ((0x2074, 0x2075), 'A')
, ((0x2075, 0x207f), 'N')
, ((0x207f, 0x2080), 'A')
, ((0x2080, 0x2081), 'N')
, ((0x2081, 0x2085), 'A')
, ((0x2085, 0x208f), 'N')
, ((0x208f, 0x2090), 'F')
, ((0x2090, 0x209d), 'N')
, ((0x209d, 0x20a0), 'F')
, ((0x20a0, 0x20a9), 'N')
, ((0x20a9, 0x20aa), 'H')
, ((0x20aa, 0x20ac), 'N')
, ((0x20ac, 0x20ad), 'A')
, ((0x20ad, 0x20c0), 'N')
, ((0x20c0, 0x20d0), 'F')
, ((0x20d0, 0x20f1), 'N')
, ((0x20f1, 0x2100), 'F')
, ((0x2100, 0x2103), 'N')
, ((0x2103, 0x2104), 'A')
, ((0x2104, 0x2105), 'N')
, ((0x2105, 0x2106), 'A')
, ((0x2106, 0x2109), 'N')
, ((0x2109, 0x210a), 'A')
, ((0x210a, 0x2113), 'N')
, ((0x2113, 0x2114), 'A')
, ((0x2114, 0x2116), 'N')
, ((0x2116, 0x2117), 'A')
, ((0x2117, 0x2121), 'N')
, ((0x2121, 0x2123), 'A')
, ((0x2123, 0x2126), 'N')
, ((0x2126, 0x2127), 'A')
, ((0x2127, 0x212b), 'N')
, ((0x212b, 0x212c), 'A')
, ((0x212c, 0x2153), 'N')
, ((0x2153, 0x2155), 'A')
, ((0x2155, 0x215b), 'N')
, ((0x215b, 0x215f), 'A')
, ((0x215f, 0x2160), 'N')
, ((0x2160, 0x216c), 'A')
, ((0x216c, 0x2170), 'N')
, ((0x2170, 0x217a), 'A')
, ((0x217a, 0x2189), 'N')
, ((0x2189, 0x218a), 'A')
, ((0x218a, 0x218c), 'N')
, ((0x218c, 0x2190), 'F')
, ((0x2190, 0x219a), 'A')
, ((0x219a, 0x21b8), 'N')
, ((0x21b8, 0x21ba), 'A')
, ((0x21ba, 0x21d2), 'N')
, ((0x21d2, 0x21d3), 'A')
, ((0x21d3, 0x21d4), 'N')
, ((0x21d4, 0x21d5), 'A')
, ((0x21d5, 0x21e7), 'N')
, ((0x21e7, 0x21e8), 'A')
, ((0x21e8, 0x2200), 'N')
, ((0x2200, 0x2201), 'A')
, ((0x2201, 0x2202), 'N')
, ((0x2202, 0x2204), 'A')
, ((0x2204, 0x2207), 'N')
, ((0x2207, 0x2209), 'A')
, ((0x2209, 0x220b), 'N')
, ((0x220b, 0x220c), 'A')
, ((0x220c, 0x220f), 'N')
, ((0x220f, 0x2210), 'A')
, ((0x2210, 0x2211), 'N')
, ((0x2211, 0x2212), 'A')
, ((0x2212, 0x2215), 'N')
, ((0x2215, 0x2216), 'A')
, ((0x2216, 0x221a), 'N')
, ((0x221a, 0x221b), 'A')
, ((0x221b, 0x221d), 'N')
, ((0x221d, 0x2221), 'A')
, ((0x2221, 0x2223), 'N')
, ((0x2223, 0x2224), 'A')
, ((0x2224, 0x2225), 'N')
, ((0x2225, 0x2226), 'A')
, ((0x2226, 0x2227), 'N')
, ((0x2227, 0x222d), 'A')
, ((0x222d, 0x222e), 'N')
, ((0x222e, 0x222f), 'A')
, ((0x222f, 0x2234), 'N')
, ((0x2234, 0x2238), 'A')
, ((0x2238, 0x223c), 'N')
, ((0x223c, 0x223e), 'A')
, ((0x223e, 0x2248), 'N')
, ((0x2248, 0x2249), 'A')
, ((0x2249, 0x224c), 'N')
, ((0x224c, 0x224d), 'A')
, ((0x224d, 0x2252), 'N')
, ((0x2252, 0x2253), 'A')
, ((0x2253, 0x2260), 'N')
, ((0x2260, 0x2262), 'A')
, ((0x2262, 0x2264), 'N')
, ((0x2264, 0x2268), 'A')
, ((0x2268, 0x226a), 'N')
, ((0x226a, 0x226c), 'A')
, ((0x226c, 0x226e), 'N')
, ((0x226e, 0x2270), 'A')
, ((0x2270, 0x2282), 'N')
, ((0x2282, 0x2284), 'A')
, ((0x2284, 0x2286), 'N')
, ((0x2286, 0x2288), 'A')
, ((0x2288, 0x2295), 'N')
, ((0x2295, 0x2296), 'A')
, ((0x2296, 0x2299), 'N')
, ((0x2299, 0x229a), 'A')
, ((0x229a, 0x22a5), 'N')
, ((0x22a5, 0x22a6), 'A')
, ((0x22a6, 0x22bf), 'N')
, ((0x22bf, 0x22c0), 'A')
, ((0x22c0, 0x2312), 'N')
, ((0x2312, 0x2313), 'A')
, ((0x2313, 0x231a), 'N')
, ((0x231a, 0x231c), 'W')
, ((0x231c, 0x2329), 'N')
, ((0x2329, 0x232b), 'W')
, ((0x232b, 0x23e9), 'N')
, ((0x23e9, 0x23ed), 'W')
, ((0x23ed, 0x23f0), 'N')
, ((0x23f0, 0x23f1), 'W')
, ((0x23f1, 0x23f3), 'N')
, ((0x23f3, 0x23f4), 'W')
, ((0x23f4, 0x2427), 'N')
, ((0x2427, 0x2440), 'F')
, ((0x2440, 0x244b), 'N')
, ((0x244b, 0x2460), 'F')
, ((0x2460, 0x24ea), 'A')
, ((0x24ea, 0x24eb), 'N')
, ((0x24eb, 0x254c), 'A')
, ((0x254c, 0x2550), 'N')
, ((0x2550, 0x2574), 'A')
, ((0x2574, 0x2580), 'N')
, ((0x2580, 0x2590), 'A')
, ((0x2590, 0x2592), 'N')
, ((0x2592, 0x2596), 'A')
, ((0x2596, 0x25a0), 'N')
, ((0x25a0, 0x25a2), 'A')
, ((0x25a2, 0x25a3), 'N')
, ((0x25a3, 0x25aa), 'A')
, ((0x25aa, 0x25b2), 'N')
, ((0x25b2, 0x25b4), 'A')
, ((0x25b4, 0x25b6), 'N')
, ((0x25b6, 0x25b8), 'A')
, ((0x25b8, 0x25bc), 'N')
, ((0x25bc, 0x25be), 'A')
, ((0x25be, 0x25c0), 'N')
, ((0x25c0, 0x25c2), 'A')
, ((0x25c2, 0x25c6), 'N')
, ((0x25c6, 0x25c9), 'A')
, ((0x25c9, 0x25cb), 'N')
, ((0x25cb, 0x25cc), 'A')
, ((0x25cc, 0x25ce), 'N')
, ((0x25ce, 0x25d2), 'A')
, ((0x25d2, 0x25e2), 'N')
, ((0x25e2, 0x25e6), 'A')
, ((0x25e6, 0x25ef), 'N')
, ((0x25ef, 0x25f0), 'A')
, ((0x25f0, 0x25fd), 'N')
, ((0x25fd, 0x25ff), 'W')
, ((0x25ff, 0x2605), 'N')
, ((0x2605, 0x2607), 'A')
, ((0x2607, 0x2609), 'N')
, ((0x2609, 0x260a), 'A')
, ((0x260a, 0x260e), 'N')
, ((0x260e, 0x2610), 'A')
, ((0x2610, 0x2614), 'N')
, ((0x2614, 0x2616), 'W')
, ((0x2616, 0x261c), 'N')
, ((0x261c, 0x261d), 'A')
, ((0x261d, 0x261e), 'N')
, ((0x261e, 0x261f), 'A')
, ((0x261f, 0x2640), 'N')
, ((0x2640, 0x2641), 'A')
, ((0x2641, 0x2642), 'N')
, ((0x2642, 0x2643), 'A')
, ((0x2643, 0x2648), 'N')
, ((0x2648, 0x2654), 'W')
, ((0x2654, 0x2660), 'N')
, ((0x2660, 0x2662), 'A')
, ((0x2662, 0x2663), 'N')
, ((0x2663, 0x2666), 'A')
, ((0x2666, 0x2667), 'N')
, ((0x2667, 0x266b), 'A')
, ((0x266b, 0x266c), 'N')
, ((0x266c, 0x266e), 'A')
, ((0x266e, 0x266f), 'N')
, ((0x266f, 0x2670), 'A')
, ((0x2670, 0x267f), 'N')
, ((0x267f, 0x2680), 'W')
, ((0x2680, 0x2693), 'N')
, ((0x2693, 0x2694), 'W')
, ((0x2694, 0x269e), 'N')
, ((0x269e, 0x26a0), 'A')
, ((0x26a0, 0x26a1), 'N')
, ((0x26a1, 0x26a2), 'W')
, ((0x26a2, 0x26aa), 'N')
, ((0x26aa, 0x26ac), 'W')
, ((0x26ac, 0x26bd), 'N')
, ((0x26bd, 0x26bf), 'W')
, ((0x26bf, 0x26c0), 'A')
, ((0x26c0, 0x26c4), 'N')
, ((0x26c4, 0x26c6), 'W')
, ((0x26c6, 0x26ce), 'A')
, ((0x26ce, 0x26cf), 'W')
, ((0x26cf, 0x26d4), 'A')
, ((0x26d4, 0x26d5), 'W')
, ((0x26d5, 0x26e2), 'A')
, ((0x26e2, 0x26e3), 'N')
, ((0x26e3, 0x26e4), 'A')
, ((0x26e4, 0x26e8), 'N')
, ((0x26e8, 0x26ea), 'A')
, ((0x26ea, 0x26eb), 'W')
, ((0x26eb, 0x26f2), 'A')
, ((0x26f2, 0x26f4), 'W')
, ((0x26f4, 0x26f5), 'A')
, ((0x26f5, 0x26f6), 'W')
, ((0x26f6, 0x26fa), 'A')
, ((0x26fa, 0x26fb), 'W')
, ((0x26fb, 0x26fd), 'A')
, ((0x26fd, 0x26fe), 'W')
, ((0x26fe, 0x2700), 'A')
, ((0x2700, 0x2705), 'N')
, ((0x2705, 0x2706), 'W')
, ((0x2706, 0x270a), 'N')
, ((0x270a, 0x270c), 'W')
, ((0x270c, 0x2728), 'N')
, ((0x2728, 0x2729), 'W')
, ((0x2729, 0x273d), 'N')
, ((0x273d, 0x273e), 'A')
, ((0x273e, 0x274c), 'N')
, ((0x274c, 0x274d), 'W')
, ((0x274d, 0x274e), 'N')
, ((0x274e, 0x274f), 'W')
, ((0x274f, 0x2753), 'N')
, ((0x2753, 0x2756), 'W')
, ((0x2756, 0x2757), 'N')
, ((0x2757, 0x2758), 'W')
, ((0x2758, 0x2776), 'N')
, ((0x2776, 0x2780), 'A')
, ((0x2780, 0x2795), 'N')
, ((0x2795, 0x2798), 'W')
, ((0x2798, 0x27b0), 'N')
, ((0x27b0, 0x27b1), 'W')
, ((0x27b1, 0x27bf), 'N')
, ((0x27bf, 0x27c0), 'W')
, ((0x27c0, 0x27e6), 'N')
, ((0x27e6, 0x27ee), 'Na')
, ((0x27ee, 0x2985), 'N')
, ((0x2985, 0x2987), 'Na')
, ((0x2987, 0x2b1b), 'N')
, ((0x2b1b, 0x2b1d), 'W')
, ((0x2b1d, 0x2b50), 'N')
, ((0x2b50, 0x2b51), 'W')
, ((0x2b51, 0x2b55), 'N')
, ((0x2b55, 0x2b56), 'W')
, ((0x2b56, 0x2b5a), 'A')
, ((0x2b5a, 0x2b74), 'N')
, ((0x2b74, 0x2b76), 'F')
, ((0x2b76, 0x2b96), 'N')
, ((0x2b96, 0x2b98), 'F')
, ((0x2b98, 0x2c2f), 'N')
, ((0x2c2f, 0x2c30), 'F')
, ((0x2c30, 0x2c5f), 'N')
, ((0x2c5f, 0x2c60), 'F')
, ((0x2c60, 0x2cf4), 'N')
, ((0x2cf4, 0x2cf9), 'F')
, ((0x2cf9, 0x2d26), 'N')
, ((0x2d26, 0x2d27), 'F')
, ((0x2d27, 0x2d28), 'N')
, ((0x2d28, 0x2d2d), 'F')
, ((0x2d2d, 0x2d2e), 'N')
, ((0x2d2e, 0x2d30), 'F')
, ((0x2d30, 0x2d68), 'N')
, ((0x2d68, 0x2d6f), 'F')
, ((0x2d6f, 0x2d71), 'N')
, ((0x2d71, 0x2d7f), 'F')
, ((0x2d7f, 0x2d97), 'N')
, ((0x2d97, 0x2da0), 'F')
, ((0x2da0, 0x2da7), 'N')
, ((0x2da7, 0x2da8), 'F')
, ((0x2da8, 0x2daf), 'N')
, ((0x2daf, 0x2db0), 'F')
, ((0x2db0, 0x2db7), 'N')
, ((0x2db7, 0x2db8), 'F')
, ((0x2db8, 0x2dbf), 'N')
, ((0x2dbf, 0x2dc0), 'F')
, ((0x2dc0, 0x2dc7), 'N')
, ((0x2dc7, 0x2dc8), 'F')
, ((0x2dc8, 0x2dcf), 'N')
, ((0x2dcf, 0x2dd0), 'F')
, ((0x2dd0, 0x2dd7), 'N')
, ((0x2dd7, 0x2dd8), 'F')
, ((0x2dd8, 0x2ddf), 'N')
, ((0x2ddf, 0x2de0), 'F')
, ((0x2de0, 0x2e50), 'N')
, ((0x2e50, 0x2e80), 'F')
, ((0x2e80, 0x2e9a), 'W')
, ((0x2e9a, 0x2e9b), 'F')
, ((0x2e9b, 0x2ef4), 'W')
, ((0x2ef4, 0x2f00), 'F')
, ((0x2f00, 0x2fd6), 'W')
, ((0x2fd6, 0x2ff0), 'F')
, ((0x2ff0, 0x2ffc), 'W')
, ((0x2ffc, 0x3001), 'F')
, ((0x3001, 0x303f), 'W')
, ((0x303f, 0x3040), 'N')
, ((0x3040, 0x3041), 'F')
, ((0x3041, 0x3097), 'W')
, ((0x3097, 0x3099), 'F')
, ((0x3099, 0x3100), 'W')
, ((0x3100, 0x3105), 'F')
, ((0x3105, 0x3130), 'W')
, ((0x3130, 0x3131), 'F')
, ((0x3131, 0x318f), 'W')
, ((0x318f, 0x3190), 'F')
, ((0x3190, 0x31bb), 'W')
, ((0x31bb, 0x31c0), 'F')
, ((0x31c0, 0x31e4), 'W')
, ((0x31e4, 0x31f0), 'F')
, ((0x31f0, 0x321f), 'W')
, ((0x321f, 0x3220), 'F')
, ((0x3220, 0x3248), 'W')
, ((0x3248, 0x3250), 'A')
, ((0x3250, 0x4db6), 'W')
, ((0x4db6, 0x4dc0), 'F')
, ((0x4dc0, 0x4e00), 'N')
, ((0x4e00, 0x9ff0), 'W')
, ((0x9ff0, 0xa000), 'F')
, ((0xa000, 0xa48d), 'W')
, ((0xa48d, 0xa490), 'F')
, ((0xa490, 0xa4c7), 'W')
, ((0xa4c7, 0xa4d0), 'F')
, ((0xa4d0, 0xa62c), 'N')
, ((0xa62c, 0xa640), 'F')
, ((0xa640, 0xa6f8), 'N')
, ((0xa6f8, 0xa700), 'F')
, ((0xa700, 0xa7c0), 'N')
, ((0xa7c0, 0xa7c2), 'F')
, ((0xa7c2, 0xa7c7), 'N')
, ((0xa7c7, 0xa7f7), 'F')
, ((0xa7f7, 0xa82c), 'N')
, ((0xa82c, 0xa830), 'F')
, ((0xa830, 0xa83a), 'N')
, ((0xa83a, 0xa840), 'F')
, ((0xa840, 0xa878), 'N')
, ((0xa878, 0xa880), 'F')
, ((0xa880, 0xa8c6), 'N')
, ((0xa8c6, 0xa8ce), 'F')
, ((0xa8ce, 0xa8da), 'N')
, ((0xa8da, 0xa8e0), 'F')
, ((0xa8e0, 0xa954), 'N')
, ((0xa954, 0xa95f), 'F')
, ((0xa95f, 0xa960), 'N')
, ((0xa960, 0xa97d), 'W')
, ((0xa97d, 0xa980), 'F')
, ((0xa980, 0xa9ce), 'N')
, ((0xa9ce, 0xa9cf), 'F')
, ((0xa9cf, 0xa9da), 'N')
, ((0xa9da, 0xa9de), 'F')
, ((0xa9de, 0xa9ff), 'N')
, ((0xa9ff, 0xaa00), 'F')
, ((0xaa00, 0xaa37), 'N')
, ((0xaa37, 0xaa40), 'F')
, ((0xaa40, 0xaa4e), 'N')
, ((0xaa4e, 0xaa50), 'F')
, ((0xaa50, 0xaa5a), 'N')
, ((0xaa5a, 0xaa5c), 'F')
, ((0xaa5c, 0xaac3), 'N')
, ((0xaac3, 0xaadb), 'F')
, ((0xaadb, 0xaaf7), 'N')
, ((0xaaf7, 0xab01), 'F')
, ((0xab01, 0xab07), 'N')
, ((0xab07, 0xab09), 'F')
, ((0xab09, 0xab0f), 'N')
, ((0xab0f, 0xab11), 'F')
, ((0xab11, 0xab17), 'N')
, ((0xab17, 0xab20), 'F')
, ((0xab20, 0xab27), 'N')
, ((0xab27, 0xab28), 'F')
, ((0xab28, 0xab2f), 'N')
, ((0xab2f, 0xab30), 'F')
, ((0xab30, 0xab68), 'N')
, ((0xab68, 0xab70), 'F')
, ((0xab70, 0xabee), 'N')
, ((0xabee, 0xabf0), 'F')
, ((0xabf0, 0xabfa), 'N')
, ((0xabfa, 0xac00), 'F')
, ((0xac00, 0xd7a4), 'W')
, ((0xd7a4, 0xd7b0), 'F')
, ((0xd7b0, 0xd7c7), 'N')
, ((0xd7c7, 0xd7cb), 'F')
, ((0xd7cb, 0xd7fc), 'N')
, ((0xd7fc, 0xd800), 'F')
, ((0xd800, 0xe000), 'N')
, ((0xe000, 0xf900), 'A')
, ((0xf900, 0xfa6e), 'W')
, ((0xfa6e, 0xfa70), 'F')
, ((0xfa70, 0xfada), 'W')
, ((0xfada, 0xfb00), 'F')
, ((0xfb00, 0xfb07), 'N')
, ((0xfb07, 0xfb13), 'F')
, ((0xfb13, 0xfb18), 'N')
, ((0xfb18, 0xfb1d), 'F')
, ((0xfb1d, 0xfb37), 'N')
, ((0xfb37, 0xfb38), 'F')
, ((0xfb38, 0xfb3d), 'N')
, ((0xfb3d, 0xfb3e), 'F')
, ((0xfb3e, 0xfb3f), 'N')
, ((0xfb3f, 0xfb40), 'F')
, ((0xfb40, 0xfb42), 'N')
, ((0xfb42, 0xfb43), 'F')
, ((0xfb43, 0xfb45), 'N')
, ((0xfb45, 0xfb46), 'F')
, ((0xfb46, 0xfbc2), 'N')
, ((0xfbc2, 0xfbd3), 'F')
, ((0xfbd3, 0xfd40), 'N')
, ((0xfd40, 0xfd50), 'F')
, ((0xfd50, 0xfd90), 'N')
, ((0xfd90, 0xfd92), 'F')
, ((0xfd92, 0xfdc8), 'N')
, ((0xfdc8, 0xfdf0), 'F')
, ((0xfdf0, 0xfdfe), 'N')
, ((0xfdfe, 0xfe00), 'F')
, ((0xfe00, 0xfe10), 'A')
, ((0xfe10, 0xfe1a), 'W')
, ((0xfe1a, 0xfe20), 'F')
, ((0xfe20, 0xfe30), 'N')
, ((0xfe30, 0xfe53), 'W')
, ((0xfe53, 0xfe54), 'F')
, ((0xfe54, 0xfe67), 'W')
, ((0xfe67, 0xfe68), 'F')
, ((0xfe68, 0xfe6c), 'W')
, ((0xfe6c, 0xfe70), 'F')
, ((0xfe70, 0xfe75), 'N')
, ((0xfe75, 0xfe76), 'F')
, ((0xfe76, 0xfefd), 'N')
, ((0xfefd, 0xfeff), 'F')
, ((0xfeff, 0xff00), 'N')
, ((0xff00, 0xff61), 'F')
, ((0xff61, 0xffbf), 'H')
, ((0xffbf, 0xffc2), 'F')
, ((0xffc2, 0xffc8), 'H')
, ((0xffc8, 0xffca), 'F')
, ((0xffca, 0xffd0), 'H')
, ((0xffd0, 0xffd2), 'F')
, ((0xffd2, 0xffd8), 'H')
, ((0xffd8, 0xffda), 'F')
, ((0xffda, 0xffdd), 'H')
, ((0xffdd, 0xffe8), 'F')
, ((0xffe8, 0xffef), 'H')
, ((0xffef, 0xfff9), 'F')
, ((0xfff9, 0xfffd), 'N')
, ((0xfffd, 0xfffe), 'A')
, ((0xfffe, 0x10000), 'F')
, ((0x10000, 0x1000c), 'N')
, ((0x1000c, 0x1000d), 'F')
, ((0x1000d, 0x10027), 'N')
, ((0x10027, 0x10028), 'F')
, ((0x10028, 0x1003b), 'N')
, ((0x1003b, 0x1003c), 'F')
, ((0x1003c, 0x1003e), 'N')
, ((0x1003e, 0x1003f), 'F')
, ((0x1003f, 0x1004e), 'N')
, ((0x1004e, 0x10050), 'F')
, ((0x10050, 0x1005e), 'N')
, ((0x1005e, 0x10080), 'F')
, ((0x10080, 0x100fb), 'N')
, ((0x100fb, 0x10100), 'F')
, ((0x10100, 0x10103), 'N')
, ((0x10103, 0x10107), 'F')
, ((0x10107, 0x10134), 'N')
, ((0x10134, 0x10137), 'F')
, ((0x10137, 0x1018f), 'N')
, ((0x1018f, 0x10190), 'F')
, ((0x10190, 0x1019c), 'N')
, ((0x1019c, 0x101a0), 'F')
, ((0x101a0, 0x101a1), 'N')
, ((0x101a1, 0x101d0), 'F')
, ((0x101d0, 0x101fe), 'N')
, ((0x101fe, 0x10280), 'F')
, ((0x10280, 0x1029d), 'N')
, ((0x1029d, 0x102a0), 'F')
, ((0x102a0, 0x102d1), 'N')
, ((0x102d1, 0x102e0), 'F')
, ((0x102e0, 0x102fc), 'N')
, ((0x102fc, 0x10300), 'F')
, ((0x10300, 0x10324), 'N')
, ((0x10324, 0x1032d), 'F')
, ((0x1032d, 0x1034b), 'N')
, ((0x1034b, 0x10350), 'F')
, ((0x10350, 0x1037b), 'N')
, ((0x1037b, 0x10380), 'F')
, ((0x10380, 0x1039e), 'N')
, ((0x1039e, 0x1039f), 'F')
, ((0x1039f, 0x103c4), 'N')
, ((0x103c4, 0x103c8), 'F')
, ((0x103c8, 0x103d6), 'N')
, ((0x103d6, 0x10400), 'F')
, ((0x10400, 0x1049e), 'N')
, ((0x1049e, 0x104a0), 'F')
, ((0x104a0, 0x104aa), 'N')
, ((0x104aa, 0x104b0), 'F')
, ((0x104b0, 0x104d4), 'N')
, ((0x104d4, 0x104d8), 'F')
, ((0x104d8, 0x104fc), 'N')
, ((0x104fc, 0x10500), 'F')
, ((0x10500, 0x10528), 'N')
, ((0x10528, 0x10530), 'F')
, ((0x10530, 0x10564), 'N')
, ((0x10564, 0x1056f), 'F')
, ((0x1056f, 0x10570), 'N')
, ((0x10570, 0x10600), 'F')
, ((0x10600, 0x10737), 'N')
, ((0x10737, 0x10740), 'F')
, ((0x10740, 0x10756), 'N')
, ((0x10756, 0x10760), 'F')
, ((0x10760, 0x10768), 'N')
, ((0x10768, 0x10800), 'F')
, ((0x10800, 0x10806), 'N')
, ((0x10806, 0x10808), 'F')
, ((0x10808, 0x10809), 'N')
, ((0x10809, 0x1080a), 'F')
, ((0x1080a, 0x10836), 'N')
, ((0x10836, 0x10837), 'F')
, ((0x10837, 0x10839), 'N')
, ((0x10839, 0x1083c), 'F')
, ((0x1083c, 0x1083d), 'N')
, ((0x1083d, 0x1083f), 'F')
, ((0x1083f, 0x10856), 'N')
, ((0x10856, 0x10857), 'F')
, ((0x10857, 0x1089f), 'N')
, ((0x1089f, 0x108a7), 'F')
, ((0x108a7, 0x108b0), 'N')
, ((0x108b0, 0x108e0), 'F')
, ((0x108e0, 0x108f3), 'N')
, ((0x108f3, 0x108f4), 'F')
, ((0x108f4, 0x108f6), 'N')
, ((0x108f6, 0x108fb), 'F')
, ((0x108fb, 0x1091c), 'N')
, ((0x1091c, 0x1091f), 'F')
, ((0x1091f, 0x1093a), 'N')
, ((0x1093a, 0x1093f), 'F')
, ((0x1093f, 0x10940), 'N')
, ((0x10940, 0x10980), 'F')
, ((0x10980, 0x109b8), 'N')
, ((0x109b8, 0x109bc), 'F')
, ((0x109bc, 0x109d0), 'N')
, ((0x109d0, 0x109d2), 'F')
, ((0x109d2, 0x10a04), 'N')
, ((0x10a04, 0x10a05), 'F')
, ((0x10a05, 0x10a07), 'N')
, ((0x10a07, 0x10a0c), 'F')
, ((0x10a0c, 0x10a14), 'N')
, ((0x10a14, 0x10a15), 'F')
, ((0x10a15, 0x10a18), 'N')
, ((0x10a18, 0x10a19), 'F')
, ((0x10a19, 0x10a36), 'N')
, ((0x10a36, 0x10a38), 'F')
, ((0x10a38, 0x10a3b), 'N')
, ((0x10a3b, 0x10a3f), 'F')
, ((0x10a3f, 0x10a49), 'N')
, ((0x10a49, 0x10a50), 'F')
, ((0x10a50, 0x10a59), 'N')
, ((0x10a59, 0x10a60), 'F')
, ((0x10a60, 0x10aa0), 'N')
, ((0x10aa0, 0x10ac0), 'F')
, ((0x10ac0, 0x10ae7), 'N')
, ((0x10ae7, 0x10aeb), 'F')
, ((0x10aeb, 0x10af7), 'N')
, ((0x10af7, 0x10b00), 'F')
, ((0x10b00, 0x10b36), 'N')
, ((0x10b36, 0x10b39), 'F')
, ((0x10b39, 0x10b56), 'N')
, ((0x10b56, 0x10b58), 'F')
, ((0x10b58, 0x10b73), 'N')
, ((0x10b73, 0x10b78), 'F')
, ((0x10b78, 0x10b92), 'N')
, ((0x10b92, 0x10b99), 'F')
, ((0x10b99, 0x10b9d), 'N')
, ((0x10b9d, 0x10ba9), 'F')
, ((0x10ba9, 0x10bb0), 'N')
, ((0x10bb0, 0x10c00), 'F')
, ((0x10c00, 0x10c49), 'N')
, ((0x10c49, 0x10c80), 'F')
, ((0x10c80, 0x10cb3), 'N')
, ((0x10cb3, 0x10cc0), 'F')
, ((0x10cc0, 0x10cf3), 'N')
, ((0x10cf3, 0x10cfa), 'F')
, ((0x10cfa, 0x10d28), 'N')
, ((0x10d28, 0x10d30), 'F')
, ((0x10d30, 0x10d3a), 'N')
, ((0x10d3a, 0x10e60), 'F')
, ((0x10e60, 0x10e7f), 'N')
, ((0x10e7f, 0x10f00), 'F')
, ((0x10f00, 0x10f28), 'N')
, ((0x10f28, 0x10f30), 'F')
, ((0x10f30, 0x10f5a), 'N')
, ((0x10f5a, 0x10fe0), 'F')
, ((0x10fe0, 0x10ff7), 'N')
, ((0x10ff7, 0x11000), 'F')
, ((0x11000, 0x1104e), 'N')
, ((0x1104e, 0x11052), 'F')
, ((0x11052, 0x11070), 'N')
, ((0x11070, 0x1107f), 'F')
, ((0x1107f, 0x110c2), 'N')
, ((0x110c2, 0x110cd), 'F')
, ((0x110cd, 0x110ce), 'N')
, ((0x110ce, 0x110d0), 'F')
, ((0x110d0, 0x110e9), 'N')
, ((0x110e9, 0x110f0), 'F')
, ((0x110f0, 0x110fa), 'N')
, ((0x110fa, 0x11100), 'F')
, ((0x11100, 0x11135), 'N')
, ((0x11135, 0x11136), 'F')
, ((0x11136, 0x11147), 'N')
, ((0x11147, 0x11150), 'F')
, ((0x11150, 0x11177), 'N')
, ((0x11177, 0x11180), 'F')
, ((0x11180, 0x111ce), 'N')
, ((0x111ce, 0x111d0), 'F')
, ((0x111d0, 0x111e0), 'N')
, ((0x111e0, 0x111e1), 'F')
, ((0x111e1, 0x111f5), 'N')
, ((0x111f5, 0x11200), 'F')
, ((0x11200, 0x11212), 'N')
, ((0x11212, 0x11213), 'F')
, ((0x11213, 0x1123f), 'N')
, ((0x1123f, 0x11280), 'F')
, ((0x11280, 0x11287), 'N')
, ((0x11287, 0x11288), 'F')
, ((0x11288, 0x11289), 'N')
, ((0x11289, 0x1128a), 'F')
, ((0x1128a, 0x1128e), 'N')
, ((0x1128e, 0x1128f), 'F')
, ((0x1128f, 0x1129e), 'N')
, ((0x1129e, 0x1129f), 'F')
, ((0x1129f, 0x112aa), 'N')
, ((0x112aa, 0x112b0), 'F')
, ((0x112b0, 0x112eb), 'N')
, ((0x112eb, 0x112f0), 'F')
, ((0x112f0, 0x112fa), 'N')
, ((0x112fa, 0x11300), 'F')
, ((0x11300, 0x11304), 'N')
, ((0x11304, 0x11305), 'F')
, ((0x11305, 0x1130d), 'N')
, ((0x1130d, 0x1130f), 'F')
, ((0x1130f, 0x11311), 'N')
, ((0x11311, 0x11313), 'F')
, ((0x11313, 0x11329), 'N')
, ((0x11329, 0x1132a), 'F')
, ((0x1132a, 0x11331), 'N')
, ((0x11331, 0x11332), 'F')
, ((0x11332, 0x11334), 'N')
, ((0x11334, 0x11335), 'F')
, ((0x11335, 0x1133a), 'N')
, ((0x1133a, 0x1133b), 'F')
, ((0x1133b, 0x11345), 'N')
, ((0x11345, 0x11347), 'F')
, ((0x11347, 0x11349), 'N')
, ((0x11349, 0x1134b), 'F')
, ((0x1134b, 0x1134e), 'N')
, ((0x1134e, 0x11350), 'F')
, ((0x11350, 0x11351), 'N')
, ((0x11351, 0x11357), 'F')
, ((0x11357, 0x11358), 'N')
, ((0x11358, 0x1135d), 'F')
, ((0x1135d, 0x11364), 'N')
, ((0x11364, 0x11366), 'F')
, ((0x11366, 0x1136d), 'N')
, ((0x1136d, 0x11370), 'F')
, ((0x11370, 0x11375), 'N')
, ((0x11375, 0x11400), 'F')
, ((0x11400, 0x1145a), 'N')
, ((0x1145a, 0x1145b), 'F')
, ((0x1145b, 0x1145c), 'N')
, ((0x1145c, 0x1145d), 'F')
, ((0x1145d, 0x11460), 'N')
, ((0x11460, 0x11480), 'F')
, ((0x11480, 0x114c8), 'N')
, ((0x114c8, 0x114d0), 'F')
, ((0x114d0, 0x114da), 'N')
, ((0x114da, 0x11580), 'F')
, ((0x11580, 0x115b6), 'N')
, ((0x115b6, 0x115b8), 'F')
, ((0x115b8, 0x115de), 'N')
, ((0x115de, 0x11600), 'F')
, ((0x11600, 0x11645), 'N')
, ((0x11645, 0x11650), 'F')
, ((0x11650, 0x1165a), 'N')
, ((0x1165a, 0x11660), 'F')
, ((0x11660, 0x1166d), 'N')
, ((0x1166d, 0x11680), 'F')
, ((0x11680, 0x116b9), 'N')
, ((0x116b9, 0x116c0), 'F')
, ((0x116c0, 0x116ca), 'N')
, ((0x116ca, 0x11700), 'F')
, ((0x11700, 0x1171b), 'N')
, ((0x1171b, 0x1171d), 'F')
, ((0x1171d, 0x1172c), 'N')
, ((0x1172c, 0x11730), 'F')
, ((0x11730, 0x11740), 'N')
, ((0x11740, 0x11800), 'F')
, ((0x11800, 0x1183c), 'N')
, ((0x1183c, 0x118a0), 'F')
, ((0x118a0, 0x118f3), 'N')
, ((0x118f3, 0x118ff), 'F')
, ((0x118ff, 0x11900), 'N')
, ((0x11900, 0x119a0), 'F')
, ((0x119a0, 0x119a8), 'N')
, ((0x119a8, 0x119aa), 'F')
, ((0x119aa, 0x119d8), 'N')
, ((0x119d8, 0x119da), 'F')
, ((0x119da, 0x119e5), 'N')
, ((0x119e5, 0x11a00), 'F')
, ((0x11a00, 0x11a48), 'N')
, ((0x11a48, 0x11a50), 'F')
, ((0x11a50, 0x11aa3), 'N')
, ((0x11aa3, 0x11ac0), 'F')
, ((0x11ac0, 0x11af9), 'N')
, ((0x11af9, 0x11c00), 'F')
, ((0x11c00, 0x11c09), 'N')
, ((0x11c09, 0x11c0a), 'F')
, ((0x11c0a, 0x11c37), 'N')
, ((0x11c37, 0x11c38), 'F')
, ((0x11c38, 0x11c46), 'N')
, ((0x11c46, 0x11c50), 'F')
, ((0x11c50, 0x11c6d), 'N')
, ((0x11c6d, 0x11c70), 'F')
, ((0x11c70, 0x11c90), 'N')
, ((0x11c90, 0x11c92), 'F')
, ((0x11c92, 0x11ca8), 'N')
, ((0x11ca8, 0x11ca9), 'F')
, ((0x11ca9, 0x11cb7), 'N')
, ((0x11cb7, 0x11d00), 'F')
, ((0x11d00, 0x11d07), 'N')
, ((0x11d07, 0x11d08), 'F')
, ((0x11d08, 0x11d0a), 'N')
, ((0x11d0a, 0x11d0b), 'F')
, ((0x11d0b, 0x11d37), 'N')
, ((0x11d37, 0x11d3a), 'F')
, ((0x11d3a, 0x11d3b), 'N')
, ((0x11d3b, 0x11d3c), 'F')
, ((0x11d3c, 0x11d3e), 'N')
, ((0x11d3e, 0x11d3f), 'F')
, ((0x11d3f, 0x11d48), 'N')
, ((0x11d48, 0x11d50), 'F')
, ((0x11d50, 0x11d5a), 'N')
, ((0x11d5a, 0x11d60), 'F')
, ((0x11d60, 0x11d66), 'N')
, ((0x11d66, 0x11d67), 'F')
, ((0x11d67, 0x11d69), 'N')
, ((0x11d69, 0x11d6a), 'F')
, ((0x11d6a, 0x11d8f), 'N')
, ((0x11d8f, 0x11d90), 'F')
, ((0x11d90, 0x11d92), 'N')
, ((0x11d92, 0x11d93), 'F')
, ((0x11d93, 0x11d99), 'N')
, ((0x11d99, 0x11da0), 'F')
, ((0x11da0, 0x11daa), 'N')
, ((0x11daa, 0x11ee0), 'F')
, ((0x11ee0, 0x11ef9), 'N')
, ((0x11ef9, 0x11fc0), 'F')
, ((0x11fc0, 0x11ff2), 'N')
, ((0x11ff2, 0x11fff), 'F')
, ((0x11fff, 0x1239a), 'N')
, ((0x1239a, 0x12400), 'F')
, ((0x12400, 0x1246f), 'N')
, ((0x1246f, 0x12470), 'F')
, ((0x12470, 0x12475), 'N')
, ((0x12475, 0x12480), 'F')
, ((0x12480, 0x12544), 'N')
, ((0x12544, 0x13000), 'F')
, ((0x13000, 0x1342f), 'N')
, ((0x1342f, 0x13430), 'F')
, ((0x13430, 0x13439), 'N')
, ((0x13439, 0x14400), 'F')
, ((0x14400, 0x14647), 'N')
, ((0x14647, 0x16800), 'F')
, ((0x16800, 0x16a39), 'N')
, ((0x16a39, 0x16a40), 'F')
, ((0x16a40, 0x16a5f), 'N')
, ((0x16a5f, 0x16a60), 'F')
, ((0x16a60, 0x16a6a), 'N')
, ((0x16a6a, 0x16a6e), 'F')
, ((0x16a6e, 0x16a70), 'N')
, ((0x16a70, 0x16ad0), 'F')
, ((0x16ad0, 0x16aee), 'N')
, ((0x16aee, 0x16af0), 'F')
, ((0x16af0, 0x16af6), 'N')
, ((0x16af6, 0x16b00), 'F')
, ((0x16b00, 0x16b46), 'N')
, ((0x16b46, 0x16b50), 'F')
, ((0x16b50, 0x16b5a), 'N')
, ((0x16b5a, 0x16b5b), 'F')
, ((0x16b5b, 0x16b62), 'N')
, ((0x16b62, 0x16b63), 'F')
, ((0x16b63, 0x16b78), 'N')
, ((0x16b78, 0x16b7d), 'F')
, ((0x16b7d, 0x16b90), 'N')
, ((0x16b90, 0x16e40), 'F')
, ((0x16e40, 0x16e9b), 'N')
, ((0x16e9b, 0x16f00), 'F')
, ((0x16f00, 0x16f4b), 'N')
, ((0x16f4b, 0x16f4f), 'F')
, ((0x16f4f, 0x16f88), 'N')
, ((0x16f88, 0x16f8f), 'F')
, ((0x16f8f, 0x16fa0), 'N')
, ((0x16fa0, 0x16fe0), 'F')
, ((0x16fe0, 0x16fe4), 'W')
, ((0x16fe4, 0x17000), 'F')
, ((0x17000, 0x187f8), 'W')
, ((0x187f8, 0x18800), 'F')
, ((0x18800, 0x18af3), 'W')
, ((0x18af3, 0x1b000), 'F')
, ((0x1b000, 0x1b11f), 'W')
, ((0x1b11f, 0x1b150), 'F')
, ((0x1b150, 0x1b153), 'W')
, ((0x1b153, 0x1b164), 'F')
, ((0x1b164, 0x1b168), 'W')
, ((0x1b168, 0x1b170), 'F')
, ((0x1b170, 0x1b2fc), 'W')
, ((0x1b2fc, 0x1bc00), 'F')
, ((0x1bc00, 0x1bc6b), 'N')
, ((0x1bc6b, 0x1bc70), 'F')
, ((0x1bc70, 0x1bc7d), 'N')
, ((0x1bc7d, 0x1bc80), 'F')
, ((0x1bc80, 0x1bc89), 'N')
, ((0x1bc89, 0x1bc90), 'F')
, ((0x1bc90, 0x1bc9a), 'N')
, ((0x1bc9a, 0x1bc9c), 'F')
, ((0x1bc9c, 0x1bca4), 'N')
, ((0x1bca4, 0x1d000), 'F')
, ((0x1d000, 0x1d0f6), 'N')
, ((0x1d0f6, 0x1d100), 'F')
, ((0x1d100, 0x1d127), 'N')
, ((0x1d127, 0x1d129), 'F')
, ((0x1d129, 0x1d1e9), 'N')
, ((0x1d1e9, 0x1d200), 'F')
, ((0x1d200, 0x1d246), 'N')
, ((0x1d246, 0x1d2e0), 'F')
, ((0x1d2e0, 0x1d2f4), 'N')
, ((0x1d2f4, 0x1d300), 'F')
, ((0x1d300, 0x1d357), 'N')
, ((0x1d357, 0x1d360), 'F')
, ((0x1d360, 0x1d379), 'N')
, ((0x1d379, 0x1d400), 'F')
, ((0x1d400, 0x1d455), 'N')
, ((0x1d455, 0x1d456), 'F')
, ((0x1d456, 0x1d49d), 'N')
, ((0x1d49d, 0x1d49e), 'F')
, ((0x1d49e, 0x1d4a0), 'N')
, ((0x1d4a0, 0x1d4a2), 'F')
, ((0x1d4a2, 0x1d4a3), 'N')
, ((0x1d4a3, 0x1d4a5), 'F')
, ((0x1d4a5, 0x1d4a7), 'N')
, ((0x1d4a7, 0x1d4a9), 'F')
, ((0x1d4a9, 0x1d4ad), 'N')
, ((0x1d4ad, 0x1d4ae), 'F')
, ((0x1d4ae, 0x1d4ba), 'N')
, ((0x1d4ba, 0x1d4bb), 'F')
, ((0x1d4bb, 0x1d4bc), 'N')
, ((0x1d4bc, 0x1d4bd), 'F')
, ((0x1d4bd, 0x1d4c4), 'N')
, ((0x1d4c4, 0x1d4c5), 'F')
, ((0x1d4c5, 0x1d506), 'N')
, ((0x1d506, 0x1d507), 'F')
, ((0x1d507, 0x1d50b), 'N')
, ((0x1d50b, 0x1d50d), 'F')
, ((0x1d50d, 0x1d515), 'N')
, ((0x1d515, 0x1d516), 'F')
, ((0x1d516, 0x1d51d), 'N')
, ((0x1d51d, 0x1d51e), 'F')
, ((0x1d51e, 0x1d53a), 'N')
, ((0x1d53a, 0x1d53b), 'F')
, ((0x1d53b, 0x1d53f), 'N')
, ((0x1d53f, 0x1d540), 'F')
, ((0x1d540, 0x1d545), 'N')
, ((0x1d545, 0x1d546), 'F')
, ((0x1d546, 0x1d547), 'N')
, ((0x1d547, 0x1d54a), 'F')
, ((0x1d54a, 0x1d551), 'N')
, ((0x1d551, 0x1d552), 'F')
, ((0x1d552, 0x1d6a6), 'N')
, ((0x1d6a6, 0x1d6a8), 'F')
, ((0x1d6a8, 0x1d7cc), 'N')
, ((0x1d7cc, 0x1d7ce), 'F')
, ((0x1d7ce, 0x1da8c), 'N')
, ((0x1da8c, 0x1da9b), 'F')
, ((0x1da9b, 0x1daa0), 'N')
, ((0x1daa0, 0x1daa1), 'F')
, ((0x1daa1, 0x1dab0), 'N')
, ((0x1dab0, 0x1e000), 'F')
, ((0x1e000, 0x1e007), 'N')
, ((0x1e007, 0x1e008), 'F')
, ((0x1e008, 0x1e019), 'N')
, ((0x1e019, 0x1e01b), 'F')
, ((0x1e01b, 0x1e022), 'N')
, ((0x1e022, 0x1e023), 'F')
, ((0x1e023, 0x1e025), 'N')
, ((0x1e025, 0x1e026), 'F')
, ((0x1e026, 0x1e02b), 'N')
, ((0x1e02b, 0x1e100), 'F')
, ((0x1e100, 0x1e12d), 'N')
, ((0x1e12d, 0x1e130), 'F')
, ((0x1e130, 0x1e13e), 'N')
, ((0x1e13e, 0x1e140), 'F')
, ((0x1e140, 0x1e14a), 'N')
, ((0x1e14a, 0x1e14e), 'F')
, ((0x1e14e, 0x1e150), 'N')
, ((0x1e150, 0x1e2c0), 'F')
, ((0x1e2c0, 0x1e2fa), 'N')
, ((0x1e2fa, 0x1e2ff), 'F')
, ((0x1e2ff, 0x1e300), 'N')
, ((0x1e300, 0x1e800), 'F')
, ((0x1e800, 0x1e8c5), 'N')
, ((0x1e8c5, 0x1e8c7), 'F')
, ((0x1e8c7, 0x1e8d7), 'N')
, ((0x1e8d7, 0x1e900), 'F')
, ((0x1e900, 0x1e94c), 'N')
, ((0x1e94c, 0x1e950), 'F')
, ((0x1e950, 0x1e95a), 'N')
, ((0x1e95a, 0x1e95e), 'F')
, ((0x1e95e, 0x1e960), 'N')
, ((0x1e960, 0x1ec71), 'F')
, ((0x1ec71, 0x1ecb5), 'N')
, ((0x1ecb5, 0x1ed01), 'F')
, ((0x1ed01, 0x1ed3e), 'N')
, ((0x1ed3e, 0x1ee00), 'F')
, ((0x1ee00, 0x1ee04), 'N')
, ((0x1ee04, 0x1ee05), 'F')
, ((0x1ee05, 0x1ee20), 'N')
, ((0x1ee20, 0x1ee21), 'F')
, ((0x1ee21, 0x1ee23), 'N')
, ((0x1ee23, 0x1ee24), 'F')
, ((0x1ee24, 0x1ee25), 'N')
, ((0x1ee25, 0x1ee27), 'F')
, ((0x1ee27, 0x1ee28), 'N')
, ((0x1ee28, 0x1ee29), 'F')
, ((0x1ee29, 0x1ee33), 'N')
, ((0x1ee33, 0x1ee34), 'F')
, ((0x1ee34, 0x1ee38), 'N')
, ((0x1ee38, 0x1ee39), 'F')
, ((0x1ee39, 0x1ee3a), 'N')
, ((0x1ee3a, 0x1ee3b), 'F')
, ((0x1ee3b, 0x1ee3c), 'N')
, ((0x1ee3c, 0x1ee42), 'F')
, ((0x1ee42, 0x1ee43), 'N')
, ((0x1ee43, 0x1ee47), 'F')
, ((0x1ee47, 0x1ee48), 'N')
, ((0x1ee48, 0x1ee49), 'F')
, ((0x1ee49, 0x1ee4a), 'N')
, ((0x1ee4a, 0x1ee4b), 'F')
, ((0x1ee4b, 0x1ee4c), 'N')
, ((0x1ee4c, 0x1ee4d), 'F')
, ((0x1ee4d, 0x1ee50), 'N')
, ((0x1ee50, 0x1ee51), 'F')
, ((0x1ee51, 0x1ee53), 'N')
, ((0x1ee53, 0x1ee54), 'F')
, ((0x1ee54, 0x1ee55), 'N')
, ((0x1ee55, 0x1ee57), 'F')
, ((0x1ee57, 0x1ee58), 'N')
, ((0x1ee58, 0x1ee59), 'F')
, ((0x1ee59, 0x1ee5a), 'N')
, ((0x1ee5a, 0x1ee5b), 'F')
, ((0x1ee5b, 0x1ee5c), 'N')
, ((0x1ee5c, 0x1ee5d), 'F')
, ((0x1ee5d, 0x1ee5e), 'N')
, ((0x1ee5e, 0x1ee5f), 'F')
, ((0x1ee5f, 0x1ee60), 'N')
, ((0x1ee60, 0x1ee61), 'F')
, ((0x1ee61, 0x1ee63), 'N')
, ((0x1ee63, 0x1ee64), 'F')
, ((0x1ee64, 0x1ee65), 'N')
, ((0x1ee65, 0x1ee67), 'F')
, ((0x1ee67, 0x1ee6b), 'N')
, ((0x1ee6b, 0x1ee6c), 'F')
, ((0x1ee6c, 0x1ee73), 'N')
, ((0x1ee73, 0x1ee74), 'F')
, ((0x1ee74, 0x1ee78), 'N')
, ((0x1ee78, 0x1ee79), 'F')
, ((0x1ee79, 0x1ee7d), 'N')
, ((0x1ee7d, 0x1ee7e), 'F')
, ((0x1ee7e, 0x1ee7f), 'N')
, ((0x1ee7f, 0x1ee80), 'F')
, ((0x1ee80, 0x1ee8a), 'N')
, ((0x1ee8a, 0x1ee8b), 'F')
, ((0x1ee8b, 0x1ee9c), 'N')
, ((0x1ee9c, 0x1eea1), 'F')
, ((0x1eea1, 0x1eea4), 'N')
, ((0x1eea4, 0x1eea5), 'F')
, ((0x1eea5, 0x1eeaa), 'N')
, ((0x1eeaa, 0x1eeab), 'F')
, ((0x1eeab, 0x1eebc), 'N')
, ((0x1eebc, 0x1eef0), 'F')
, ((0x1eef0, 0x1eef2), 'N')
, ((0x1eef2, 0x1f000), 'F')
, ((0x1f000, 0x1f004), 'N')
, ((0x1f004, 0x1f005), 'W')
, ((0x1f005, 0x1f02c), 'N')
, ((0x1f02c, 0x1f030), 'F')
, ((0x1f030, 0x1f094), 'N')
, ((0x1f094, 0x1f0a0), 'F')
, ((0x1f0a0, 0x1f0af), 'N')
, ((0x1f0af, 0x1f0b1), 'F')
, ((0x1f0b1, 0x1f0c0), 'N')
, ((0x1f0c0, 0x1f0c1), 'F')
, ((0x1f0c1, 0x1f0cf), 'N')
, ((0x1f0cf, 0x1f0d0), 'W')
, ((0x1f0d0, 0x1f0d1), 'F')
, ((0x1f0d1, 0x1f0f6), 'N')
, ((0x1f0f6, 0x1f100), 'F')
, ((0x1f100, 0x1f10b), 'A')
, ((0x1f10b, 0x1f10d), 'N')
, ((0x1f10d, 0x1f110), 'F')
, ((0x1f110, 0x1f12e), 'A')
, ((0x1f12e, 0x1f130), 'N')
, ((0x1f130, 0x1f16a), 'A')
, ((0x1f16a, 0x1f16d), 'N')
, ((0x1f16d, 0x1f170), 'F')
, ((0x1f170, 0x1f18e), 'A')
, ((0x1f18e, 0x1f18f), 'W')
, ((0x1f18f, 0x1f191), 'A')
, ((0x1f191, 0x1f19b), 'W')
, ((0x1f19b, 0x1f1ad), 'A')
, ((0x1f1ad, 0x1f1e6), 'F')
, ((0x1f1e6, 0x1f200), 'N')
, ((0x1f200, 0x1f203), 'W')
, ((0x1f203, 0x1f210), 'F')
, ((0x1f210, 0x1f23c), 'W')
, ((0x1f23c, 0x1f240), 'F')
, ((0x1f240, 0x1f249), 'W')
, ((0x1f249, 0x1f250), 'F')
, ((0x1f250, 0x1f252), 'W')
, ((0x1f252, 0x1f260), 'F')
, ((0x1f260, 0x1f266), 'W')
, ((0x1f266, 0x1f300), 'F')
, ((0x1f300, 0x1f321), 'W')
, ((0x1f321, 0x1f32d), 'N')
, ((0x1f32d, 0x1f336), 'W')
, ((0x1f336, 0x1f337), 'N')
, ((0x1f337, 0x1f37d), 'W')
, ((0x1f37d, 0x1f37e), 'N')
, ((0x1f37e, 0x1f394), 'W')
, ((0x1f394, 0x1f3a0), 'N')
, ((0x1f3a0, 0x1f3cb), 'W')
, ((0x1f3cb, 0x1f3cf), 'N')
, ((0x1f3cf, 0x1f3d4), 'W')
, ((0x1f3d4, 0x1f3e0), 'N')
, ((0x1f3e0, 0x1f3f1), 'W')
, ((0x1f3f1, 0x1f3f4), 'N')
, ((0x1f3f4, 0x1f3f5), 'W')
, ((0x1f3f5, 0x1f3f8), 'N')
, ((0x1f3f8, 0x1f43f), 'W')
, ((0x1f43f, 0x1f440), 'N')
, ((0x1f440, 0x1f441), 'W')
, ((0x1f441, 0x1f442), 'N')
, ((0x1f442, 0x1f4fd), 'W')
, ((0x1f4fd, 0x1f4ff), 'N')
, ((0x1f4ff, 0x1f53e), 'W')
, ((0x1f53e, 0x1f54b), 'N')
, ((0x1f54b, 0x1f54f), 'W')
, ((0x1f54f, 0x1f550), 'N')
, ((0x1f550, 0x1f568), 'W')
, ((0x1f568, 0x1f57a), 'N')
, ((0x1f57a, 0x1f57b), 'W')
, ((0x1f57b, 0x1f595), 'N')
, ((0x1f595, 0x1f597), 'W')
, ((0x1f597, 0x1f5a4), 'N')
, ((0x1f5a4, 0x1f5a5), 'W')
, ((0x1f5a5, 0x1f5fb), 'N')
, ((0x1f5fb, 0x1f650), 'W')
, ((0x1f650, 0x1f680), 'N')
, ((0x1f680, 0x1f6c6), 'W')
, ((0x1f6c6, 0x1f6cc), 'N')
, ((0x1f6cc, 0x1f6cd), 'W')
, ((0x1f6cd, 0x1f6d0), 'N')
, ((0x1f6d0, 0x1f6d3), 'W')
, ((0x1f6d3, 0x1f6d5), 'N')
, ((0x1f6d5, 0x1f6d6), 'W')
, ((0x1f6d6, 0x1f6e0), 'F')
, ((0x1f6e0, 0x1f6eb), 'N')
, ((0x1f6eb, 0x1f6ed), 'W')
, ((0x1f6ed, 0x1f6f0), 'F')
, ((0x1f6f0, 0x1f6f4), 'N')
, ((0x1f6f4, 0x1f6fb), 'W')
, ((0x1f6fb, 0x1f700), 'F')
, ((0x1f700, 0x1f774), 'N')
, ((0x1f774, 0x1f780), 'F')
, ((0x1f780, 0x1f7d9), 'N')
, ((0x1f7d9, 0x1f7e0), 'F')
, ((0x1f7e0, 0x1f7ec), 'W')
, ((0x1f7ec, 0x1f800), 'F')
, ((0x1f800, 0x1f80c), 'N')
, ((0x1f80c, 0x1f810), 'F')
, ((0x1f810, 0x1f848), 'N')
, ((0x1f848, 0x1f850), 'F')
, ((0x1f850, 0x1f85a), 'N')
, ((0x1f85a, 0x1f860), 'F')
, ((0x1f860, 0x1f888), 'N')
, ((0x1f888, 0x1f890), 'F')
, ((0x1f890, 0x1f8ae), 'N')
, ((0x1f8ae, 0x1f900), 'F')
, ((0x1f900, 0x1f90c), 'N')
, ((0x1f90c, 0x1f90d), 'F')
, ((0x1f90d, 0x1f972), 'W')
, ((0x1f972, 0x1f973), 'F')
, ((0x1f973, 0x1f977), 'W')
, ((0x1f977, 0x1f97a), 'F')
, ((0x1f97a, 0x1f9a3), 'W')
, ((0x1f9a3, 0x1f9a5), 'F')
, ((0x1f9a5, 0x1f9ab), 'W')
, ((0x1f9ab, 0x1f9ae), 'F')
, ((0x1f9ae, 0x1f9cb), 'W')
, ((0x1f9cb, 0x1f9cd), 'F')
, ((0x1f9cd, 0x1fa00), 'W')
, ((0x1fa00, 0x1fa54), 'N')
, ((0x1fa54, 0x1fa60), 'F')
, ((0x1fa60, 0x1fa6e), 'N')
, ((0x1fa6e, 0x1fa70), 'F')
, ((0x1fa70, 0x1fa74), 'W')
, ((0x1fa74, 0x1fa78), 'F')
, ((0x1fa78, 0x1fa7b), 'W')
, ((0x1fa7b, 0x1fa80), 'F')
, ((0x1fa80, 0x1fa83), 'W')
, ((0x1fa83, 0x1fa90), 'F')
, ((0x1fa90, 0x1fa96), 'W')
, ((0x1fa96, 0x20000), 'F')
, ((0x20000, 0x2a6d7), 'W')
, ((0x2a6d7, 0x2a700), 'F')
, ((0x2a700, 0x2b735), 'W')
, ((0x2b735, 0x2b740), 'F')
, ((0x2b740, 0x2b81e), 'W')
, ((0x2b81e, 0x2b820), 'F')
, ((0x2b820, 0x2cea2), 'W')
, ((0x2cea2, 0x2ceb0), 'F')
, ((0x2ceb0, 0x2ebe1), 'W')
, ((0x2ebe1, 0x2f800), 'F')
, ((0x2f800, 0x2fa1e), 'W')
, ((0x2fa1e, 0xe0001), 'F')
, ((0xe0001, 0xe0002), 'N')
, ((0xe0002, 0xe0020), 'F')
, ((0xe0020, 0xe0080), 'N')
, ((0xe0080, 0xe0100), 'F')
, ((0xe0100, 0xe01f0), 'A')
, ((0xe01f0, 0xf0000), 'F')
, ((0xf0000, 0xffffe), 'A')
, ((0xffffe, 0x100000), 'F')
, ((0x100000, 0x10fffe), 'A')
, ((0x10fffe, 0x110000), 'F')
])
#category
(3821
,[((0x0, 0x20), 'Cc')
, ((0x20, 0x21), 'Zs')
, ((0x21, 0x24), 'Po')
, ((0x24, 0x25), 'Sc')
, ((0x25, 0x28), 'Po')
, ((0x28, 0x29), 'Ps')
, ((0x29, 0x2a), 'Pe')
, ((0x2a, 0x2b), 'Po')
, ((0x2b, 0x2c), 'Sm')
, ((0x2c, 0x2d), 'Po')
, ((0x2d, 0x2e), 'Pd')
, ((0x2e, 0x30), 'Po')
, ((0x30, 0x3a), 'Nd')
, ((0x3a, 0x3c), 'Po')
, ((0x3c, 0x3f), 'Sm')
, ((0x3f, 0x41), 'Po')
, ((0x41, 0x5b), 'Lu')
, ((0x5b, 0x5c), 'Ps')
, ((0x5c, 0x5d), 'Po')
, ((0x5d, 0x5e), 'Pe')
, ((0x5e, 0x5f), 'Sk')
, ((0x5f, 0x60), 'Pc')
, ((0x60, 0x61), 'Sk')
, ((0x61, 0x7b), 'Ll')
, ((0x7b, 0x7c), 'Ps')
, ((0x7c, 0x7d), 'Sm')
, ((0x7d, 0x7e), 'Pe')
, ((0x7e, 0x7f), 'Sm')
, ((0x7f, 0xa0), 'Cc')
, ((0xa0, 0xa1), 'Zs')
, ((0xa1, 0xa2), 'Po')
, ((0xa2, 0xa6), 'Sc')
, ((0xa6, 0xa7), 'So')
, ((0xa7, 0xa8), 'Po')
, ((0xa8, 0xa9), 'Sk')
, ((0xa9, 0xaa), 'So')
, ((0xaa, 0xab), 'Lo')
, ((0xab, 0xac), 'Pi')
, ((0xac, 0xad), 'Sm')
, ((0xad, 0xae), 'Cf')
, ((0xae, 0xaf), 'So')
, ((0xaf, 0xb0), 'Sk')
, ((0xb0, 0xb1), 'So')
, ((0xb1, 0xb2), 'Sm')
, ((0xb2, 0xb4), 'No')
, ((0xb4, 0xb5), 'Sk')
, ((0xb5, 0xb6), 'Ll')
, ((0xb6, 0xb8), 'Po')
, ((0xb8, 0xb9), 'Sk')
, ((0xb9, 0xba), 'No')
, ((0xba, 0xbb), 'Lo')
, ((0xbb, 0xbc), 'Pf')
, ((0xbc, 0xbf), 'No')
, ((0xbf, 0xc0), 'Po')
, ((0xc0, 0xd7), 'Lu')
, ((0xd7, 0xd8), 'Sm')
, ((0xd8, 0xdf), 'Lu')
, ((0xdf, 0xf7), 'Ll')
, ((0xf7, 0xf8), 'Sm')
, ((0xf8, 0x100), 'Ll')
, ((0x100, 0x101), 'Lu')
, ((0x101, 0x102), 'Ll')
, ((0x102, 0x103), 'Lu')
, ((0x103, 0x104), 'Ll')
, ((0x104, 0x105), 'Lu')
, ((0x105, 0x106), 'Ll')
, ((0x106, 0x107), 'Lu')
, ((0x107, 0x108), 'Ll')
, ((0x108, 0x109), 'Lu')
, ((0x109, 0x10a), 'Ll')
, ((0x10a, 0x10b), 'Lu')
, ((0x10b, 0x10c), 'Ll')
, ((0x10c, 0x10d), 'Lu')
, ((0x10d, 0x10e), 'Ll')
, ((0x10e, 0x10f), 'Lu')
, ((0x10f, 0x110), 'Ll')
, ((0x110, 0x111), 'Lu')
, ((0x111, 0x112), 'Ll')
, ((0x112, 0x113), 'Lu')
, ((0x113, 0x114), 'Ll')
, ((0x114, 0x115), 'Lu')
, ((0x115, 0x116), 'Ll')
, ((0x116, 0x117), 'Lu')
, ((0x117, 0x118), 'Ll')
, ((0x118, 0x119), 'Lu')
, ((0x119, 0x11a), 'Ll')
, ((0x11a, 0x11b), 'Lu')
, ((0x11b, 0x11c), 'Ll')
, ((0x11c, 0x11d), 'Lu')
, ((0x11d, 0x11e), 'Ll')
, ((0x11e, 0x11f), 'Lu')
, ((0x11f, 0x120), 'Ll')
, ((0x120, 0x121), 'Lu')
, ((0x121, 0x122), 'Ll')
, ((0x122, 0x123), 'Lu')
, ((0x123, 0x124), 'Ll')
, ((0x124, 0x125), 'Lu')
, ((0x125, 0x126), 'Ll')
, ((0x126, 0x127), 'Lu')
, ((0x127, 0x128), 'Ll')
, ((0x128, 0x129), 'Lu')
, ((0x129, 0x12a), 'Ll')
, ((0x12a, 0x12b), 'Lu')
, ((0x12b, 0x12c), 'Ll')
, ((0x12c, 0x12d), 'Lu')
, ((0x12d, 0x12e), 'Ll')
, ((0x12e, 0x12f), 'Lu')
, ((0x12f, 0x130), 'Ll')
, ((0x130, 0x131), 'Lu')
, ((0x131, 0x132), 'Ll')
, ((0x132, 0x133), 'Lu')
, ((0x133, 0x134), 'Ll')
, ((0x134, 0x135), 'Lu')
, ((0x135, 0x136), 'Ll')
, ((0x136, 0x137), 'Lu')
, ((0x137, 0x139), 'Ll')
, ((0x139, 0x13a), 'Lu')
, ((0x13a, 0x13b), 'Ll')
, ((0x13b, 0x13c), 'Lu')
, ((0x13c, 0x13d), 'Ll')
, ((0x13d, 0x13e), 'Lu')
, ((0x13e, 0x13f), 'Ll')
, ((0x13f, 0x140), 'Lu')
, ((0x140, 0x141), 'Ll')
, ((0x141, 0x142), 'Lu')
, ((0x142, 0x143), 'Ll')
, ((0x143, 0x144), 'Lu')
, ((0x144, 0x145), 'Ll')
, ((0x145, 0x146), 'Lu')
, ((0x146, 0x147), 'Ll')
, ((0x147, 0x148), 'Lu')
, ((0x148, 0x14a), 'Ll')
, ((0x14a, 0x14b), 'Lu')
, ((0x14b, 0x14c), 'Ll')
, ((0x14c, 0x14d), 'Lu')
, ((0x14d, 0x14e), 'Ll')
, ((0x14e, 0x14f), 'Lu')
, ((0x14f, 0x150), 'Ll')
, ((0x150, 0x151), 'Lu')
, ((0x151, 0x152), 'Ll')
, ((0x152, 0x153), 'Lu')
, ((0x153, 0x154), 'Ll')
, ((0x154, 0x155), 'Lu')
, ((0x155, 0x156), 'Ll')
, ((0x156, 0x157), 'Lu')
, ((0x157, 0x158), 'Ll')
, ((0x158, 0x159), 'Lu')
, ((0x159, 0x15a), 'Ll')
, ((0x15a, 0x15b), 'Lu')
, ((0x15b, 0x15c), 'Ll')
, ((0x15c, 0x15d), 'Lu')
, ((0x15d, 0x15e), 'Ll')
, ((0x15e, 0x15f), 'Lu')
, ((0x15f, 0x160), 'Ll')
, ((0x160, 0x161), 'Lu')
, ((0x161, 0x162), 'Ll')
, ((0x162, 0x163), 'Lu')
, ((0x163, 0x164), 'Ll')
, ((0x164, 0x165), 'Lu')
, ((0x165, 0x166), 'Ll')
, ((0x166, 0x167), 'Lu')
, ((0x167, 0x168), 'Ll')
, ((0x168, 0x169), 'Lu')
, ((0x169, 0x16a), 'Ll')
, ((0x16a, 0x16b), 'Lu')
, ((0x16b, 0x16c), 'Ll')
, ((0x16c, 0x16d), 'Lu')
, ((0x16d, 0x16e), 'Ll')
, ((0x16e, 0x16f), 'Lu')
, ((0x16f, 0x170), 'Ll')
, ((0x170, 0x171), 'Lu')
, ((0x171, 0x172), 'Ll')
, ((0x172, 0x173), 'Lu')
, ((0x173, 0x174), 'Ll')
, ((0x174, 0x175), 'Lu')
, ((0x175, 0x176), 'Ll')
, ((0x176, 0x177), 'Lu')
, ((0x177, 0x178), 'Ll')
, ((0x178, 0x17a), 'Lu')
, ((0x17a, 0x17b), 'Ll')
, ((0x17b, 0x17c), 'Lu')
, ((0x17c, 0x17d), 'Ll')
, ((0x17d, 0x17e), 'Lu')
, ((0x17e, 0x181), 'Ll')
, ((0x181, 0x183), 'Lu')
, ((0x183, 0x184), 'Ll')
, ((0x184, 0x185), 'Lu')
, ((0x185, 0x186), 'Ll')
, ((0x186, 0x188), 'Lu')
, ((0x188, 0x189), 'Ll')
, ((0x189, 0x18c), 'Lu')
, ((0x18c, 0x18e), 'Ll')
, ((0x18e, 0x192), 'Lu')
, ((0x192, 0x193), 'Ll')
, ((0x193, 0x195), 'Lu')
, ((0x195, 0x196), 'Ll')
, ((0x196, 0x199), 'Lu')
, ((0x199, 0x19c), 'Ll')
, ((0x19c, 0x19e), 'Lu')
, ((0x19e, 0x19f), 'Ll')
, ((0x19f, 0x1a1), 'Lu')
, ((0x1a1, 0x1a2), 'Ll')
, ((0x1a2, 0x1a3), 'Lu')
, ((0x1a3, 0x1a4), 'Ll')
, ((0x1a4, 0x1a5), 'Lu')
, ((0x1a5, 0x1a6), 'Ll')
, ((0x1a6, 0x1a8), 'Lu')
, ((0x1a8, 0x1a9), 'Ll')
, ((0x1a9, 0x1aa), 'Lu')
, ((0x1aa, 0x1ac), 'Ll')
, ((0x1ac, 0x1ad), 'Lu')
, ((0x1ad, 0x1ae), 'Ll')
, ((0x1ae, 0x1b0), 'Lu')
, ((0x1b0, 0x1b1), 'Ll')
, ((0x1b1, 0x1b4), 'Lu')
, ((0x1b4, 0x1b5), 'Ll')
, ((0x1b5, 0x1b6), 'Lu')
, ((0x1b6, 0x1b7), 'Ll')
, ((0x1b7, 0x1b9), 'Lu')
, ((0x1b9, 0x1bb), 'Ll')
, ((0x1bb, 0x1bc), 'Lo')
, ((0x1bc, 0x1bd), 'Lu')
, ((0x1bd, 0x1c0), 'Ll')
, ((0x1c0, 0x1c4), 'Lo')
, ((0x1c4, 0x1c5), 'Lu')
, ((0x1c5, 0x1c6), 'Lt')
, ((0x1c6, 0x1c7), 'Ll')
, ((0x1c7, 0x1c8), 'Lu')
, ((0x1c8, 0x1c9), 'Lt')
, ((0x1c9, 0x1ca), 'Ll')
, ((0x1ca, 0x1cb), 'Lu')
, ((0x1cb, 0x1cc), 'Lt')
, ((0x1cc, 0x1cd), 'Ll')
, ((0x1cd, 0x1ce), 'Lu')
, ((0x1ce, 0x1cf), 'Ll')
, ((0x1cf, 0x1d0), 'Lu')
, ((0x1d0, 0x1d1), 'Ll')
, ((0x1d1, 0x1d2), 'Lu')
, ((0x1d2, 0x1d3), 'Ll')
, ((0x1d3, 0x1d4), 'Lu')
, ((0x1d4, 0x1d5), 'Ll')
, ((0x1d5, 0x1d6), 'Lu')
, ((0x1d6, 0x1d7), 'Ll')
, ((0x1d7, 0x1d8), 'Lu')
, ((0x1d8, 0x1d9), 'Ll')
, ((0x1d9, 0x1da), 'Lu')
, ((0x1da, 0x1db), 'Ll')
, ((0x1db, 0x1dc), 'Lu')
, ((0x1dc, 0x1de), 'Ll')
, ((0x1de, 0x1df), 'Lu')
, ((0x1df, 0x1e0), 'Ll')
, ((0x1e0, 0x1e1), 'Lu')
, ((0x1e1, 0x1e2), 'Ll')
, ((0x1e2, 0x1e3), 'Lu')
, ((0x1e3, 0x1e4), 'Ll')
, ((0x1e4, 0x1e5), 'Lu')
, ((0x1e5, 0x1e6), 'Ll')
, ((0x1e6, 0x1e7), 'Lu')
, ((0x1e7, 0x1e8), 'Ll')
, ((0x1e8, 0x1e9), 'Lu')
, ((0x1e9, 0x1ea), 'Ll')
, ((0x1ea, 0x1eb), 'Lu')
, ((0x1eb, 0x1ec), 'Ll')
, ((0x1ec, 0x1ed), 'Lu')
, ((0x1ed, 0x1ee), 'Ll')
, ((0x1ee, 0x1ef), 'Lu')
, ((0x1ef, 0x1f1), 'Ll')
, ((0x1f1, 0x1f2), 'Lu')
, ((0x1f2, 0x1f3), 'Lt')
, ((0x1f3, 0x1f4), 'Ll')
, ((0x1f4, 0x1f5), 'Lu')
, ((0x1f5, 0x1f6), 'Ll')
, ((0x1f6, 0x1f9), 'Lu')
, ((0x1f9, 0x1fa), 'Ll')
, ((0x1fa, 0x1fb), 'Lu')
, ((0x1fb, 0x1fc), 'Ll')
, ((0x1fc, 0x1fd), 'Lu')
, ((0x1fd, 0x1fe), 'Ll')
, ((0x1fe, 0x1ff), 'Lu')
, ((0x1ff, 0x200), 'Ll')
, ((0x200, 0x201), 'Lu')
, ((0x201, 0x202), 'Ll')
, ((0x202, 0x203), 'Lu')
, ((0x203, 0x204), 'Ll')
, ((0x204, 0x205), 'Lu')
, ((0x205, 0x206), 'Ll')
, ((0x206, 0x207), 'Lu')
, ((0x207, 0x208), 'Ll')
, ((0x208, 0x209), 'Lu')
, ((0x209, 0x20a), 'Ll')
, ((0x20a, 0x20b), 'Lu')
, ((0x20b, 0x20c), 'Ll')
, ((0x20c, 0x20d), 'Lu')
, ((0x20d, 0x20e), 'Ll')
, ((0x20e, 0x20f), 'Lu')
, ((0x20f, 0x210), 'Ll')
, ((0x210, 0x211), 'Lu')
, ((0x211, 0x212), 'Ll')
, ((0x212, 0x213), 'Lu')
, ((0x213, 0x214), 'Ll')
, ((0x214, 0x215), 'Lu')
, ((0x215, 0x216), 'Ll')
, ((0x216, 0x217), 'Lu')
, ((0x217, 0x218), 'Ll')
, ((0x218, 0x219), 'Lu')
, ((0x219, 0x21a), 'Ll')
, ((0x21a, 0x21b), 'Lu')
, ((0x21b, 0x21c), 'Ll')
, ((0x21c, 0x21d), 'Lu')
, ((0x21d, 0x21e), 'Ll')
, ((0x21e, 0x21f), 'Lu')
, ((0x21f, 0x220), 'Ll')
, ((0x220, 0x221), 'Lu')
, ((0x221, 0x222), 'Ll')
, ((0x222, 0x223), 'Lu')
, ((0x223, 0x224), 'Ll')
, ((0x224, 0x225), 'Lu')
, ((0x225, 0x226), 'Ll')
, ((0x226, 0x227), 'Lu')
, ((0x227, 0x228), 'Ll')
, ((0x228, 0x229), 'Lu')
, ((0x229, 0x22a), 'Ll')
, ((0x22a, 0x22b), 'Lu')
, ((0x22b, 0x22c), 'Ll')
, ((0x22c, 0x22d), 'Lu')
, ((0x22d, 0x22e), 'Ll')
, ((0x22e, 0x22f), 'Lu')
, ((0x22f, 0x230), 'Ll')
, ((0x230, 0x231), 'Lu')
, ((0x231, 0x232), 'Ll')
, ((0x232, 0x233), 'Lu')
, ((0x233, 0x23a), 'Ll')
, ((0x23a, 0x23c), 'Lu')
, ((0x23c, 0x23d), 'Ll')
, ((0x23d, 0x23f), 'Lu')
, ((0x23f, 0x241), 'Ll')
, ((0x241, 0x242), 'Lu')
, ((0x242, 0x243), 'Ll')
, ((0x243, 0x247), 'Lu')
, ((0x247, 0x248), 'Ll')
, ((0x248, 0x249), 'Lu')
, ((0x249, 0x24a), 'Ll')
, ((0x24a, 0x24b), 'Lu')
, ((0x24b, 0x24c), 'Ll')
, ((0x24c, 0x24d), 'Lu')
, ((0x24d, 0x24e), 'Ll')
, ((0x24e, 0x24f), 'Lu')
, ((0x24f, 0x294), 'Ll')
, ((0x294, 0x295), 'Lo')
, ((0x295, 0x2b0), 'Ll')
, ((0x2b0, 0x2c2), 'Lm')
, ((0x2c2, 0x2c6), 'Sk')
, ((0x2c6, 0x2d2), 'Lm')
, ((0x2d2, 0x2e0), 'Sk')
, ((0x2e0, 0x2e5), 'Lm')
, ((0x2e5, 0x2ec), 'Sk')
, ((0x2ec, 0x2ed), 'Lm')
, ((0x2ed, 0x2ee), 'Sk')
, ((0x2ee, 0x2ef), 'Lm')
, ((0x2ef, 0x300), 'Sk')
, ((0x300, 0x370), 'Mn')
, ((0x370, 0x371), 'Lu')
, ((0x371, 0x372), 'Ll')
, ((0x372, 0x373), 'Lu')
, ((0x373, 0x374), 'Ll')
, ((0x374, 0x375), 'Lm')
, ((0x375, 0x376), 'Sk')
, ((0x376, 0x377), 'Lu')
, ((0x377, 0x378), 'Ll')
, ((0x378, 0x37a), 'Cn')
, ((0x37a, 0x37b), 'Lm')
, ((0x37b, 0x37e), 'Ll')
, ((0x37e, 0x37f), 'Po')
, ((0x37f, 0x380), 'Lu')
, ((0x380, 0x384), 'Cn')
, ((0x384, 0x386), 'Sk')
, ((0x386, 0x387), 'Lu')
, ((0x387, 0x388), 'Po')
, ((0x388, 0x38b), 'Lu')
, ((0x38b, 0x38c), 'Cn')
, ((0x38c, 0x38d), 'Lu')
, ((0x38d, 0x38e), 'Cn')
, ((0x38e, 0x390), 'Lu')
, ((0x390, 0x391), 'Ll')
, ((0x391, 0x3a2), 'Lu')
, ((0x3a2, 0x3a3), 'Cn')
, ((0x3a3, 0x3ac), 'Lu')
, ((0x3ac, 0x3cf), 'Ll')
, ((0x3cf, 0x3d0), 'Lu')
, ((0x3d0, 0x3d2), 'Ll')
, ((0x3d2, 0x3d5), 'Lu')
, ((0x3d5, 0x3d8), 'Ll')
, ((0x3d8, 0x3d9), 'Lu')
, ((0x3d9, 0x3da), 'Ll')
, ((0x3da, 0x3db), 'Lu')
, ((0x3db, 0x3dc), 'Ll')
, ((0x3dc, 0x3dd), 'Lu')
, ((0x3dd, 0x3de), 'Ll')
, ((0x3de, 0x3df), 'Lu')
, ((0x3df, 0x3e0), 'Ll')
, ((0x3e0, 0x3e1), 'Lu')
, ((0x3e1, 0x3e2), 'Ll')
, ((0x3e2, 0x3e3), 'Lu')
, ((0x3e3, 0x3e4), 'Ll')
, ((0x3e4, 0x3e5), 'Lu')
, ((0x3e5, 0x3e6), 'Ll')
, ((0x3e6, 0x3e7), 'Lu')
, ((0x3e7, 0x3e8), 'Ll')
, ((0x3e8, 0x3e9), 'Lu')
, ((0x3e9, 0x3ea), 'Ll')
, ((0x3ea, 0x3eb), 'Lu')
, ((0x3eb, 0x3ec), 'Ll')
, ((0x3ec, 0x3ed), 'Lu')
, ((0x3ed, 0x3ee), 'Ll')
, ((0x3ee, 0x3ef), 'Lu')
, ((0x3ef, 0x3f4), 'Ll')
, ((0x3f4, 0x3f5), 'Lu')
, ((0x3f5, 0x3f6), 'Ll')
, ((0x3f6, 0x3f7), 'Sm')
, ((0x3f7, 0x3f8), 'Lu')
, ((0x3f8, 0x3f9), 'Ll')
, ((0x3f9, 0x3fb), 'Lu')
, ((0x3fb, 0x3fd), 'Ll')
, ((0x3fd, 0x430), 'Lu')
, ((0x430, 0x460), 'Ll')
, ((0x460, 0x461), 'Lu')
, ((0x461, 0x462), 'Ll')
, ((0x462, 0x463), 'Lu')
, ((0x463, 0x464), 'Ll')
, ((0x464, 0x465), 'Lu')
, ((0x465, 0x466), 'Ll')
, ((0x466, 0x467), 'Lu')
, ((0x467, 0x468), 'Ll')
, ((0x468, 0x469), 'Lu')
, ((0x469, 0x46a), 'Ll')
, ((0x46a, 0x46b), 'Lu')
, ((0x46b, 0x46c), 'Ll')
, ((0x46c, 0x46d), 'Lu')
, ((0x46d, 0x46e), 'Ll')
, ((0x46e, 0x46f), 'Lu')
, ((0x46f, 0x470), 'Ll')
, ((0x470, 0x471), 'Lu')
, ((0x471, 0x472), 'Ll')
, ((0x472, 0x473), 'Lu')
, ((0x473, 0x474), 'Ll')
, ((0x474, 0x475), 'Lu')
, ((0x475, 0x476), 'Ll')
, ((0x476, 0x477), 'Lu')
, ((0x477, 0x478), 'Ll')
, ((0x478, 0x479), 'Lu')
, ((0x479, 0x47a), 'Ll')
, ((0x47a, 0x47b), 'Lu')
, ((0x47b, 0x47c), 'Ll')
, ((0x47c, 0x47d), 'Lu')
, ((0x47d, 0x47e), 'Ll')
, ((0x47e, 0x47f), 'Lu')
, ((0x47f, 0x480), 'Ll')
, ((0x480, 0x481), 'Lu')
, ((0x481, 0x482), 'Ll')
, ((0x482, 0x483), 'So')
, ((0x483, 0x488), 'Mn')
, ((0x488, 0x48a), 'Me')
, ((0x48a, 0x48b), 'Lu')
, ((0x48b, 0x48c), 'Ll')
, ((0x48c, 0x48d), 'Lu')
, ((0x48d, 0x48e), 'Ll')
, ((0x48e, 0x48f), 'Lu')
, ((0x48f, 0x490), 'Ll')
, ((0x490, 0x491), 'Lu')
, ((0x491, 0x492), 'Ll')
, ((0x492, 0x493), 'Lu')
, ((0x493, 0x494), 'Ll')
, ((0x494, 0x495), 'Lu')
, ((0x495, 0x496), 'Ll')
, ((0x496, 0x497), 'Lu')
, ((0x497, 0x498), 'Ll')
, ((0x498, 0x499), 'Lu')
, ((0x499, 0x49a), 'Ll')
, ((0x49a, 0x49b), 'Lu')
, ((0x49b, 0x49c), 'Ll')
, ((0x49c, 0x49d), 'Lu')
, ((0x49d, 0x49e), 'Ll')
, ((0x49e, 0x49f), 'Lu')
, ((0x49f, 0x4a0), 'Ll')
, ((0x4a0, 0x4a1), 'Lu')
, ((0x4a1, 0x4a2), 'Ll')
, ((0x4a2, 0x4a3), 'Lu')
, ((0x4a3, 0x4a4), 'Ll')
, ((0x4a4, 0x4a5), 'Lu')
, ((0x4a5, 0x4a6), 'Ll')
, ((0x4a6, 0x4a7), 'Lu')
, ((0x4a7, 0x4a8), 'Ll')
, ((0x4a8, 0x4a9), 'Lu')
, ((0x4a9, 0x4aa), 'Ll')
, ((0x4aa, 0x4ab), 'Lu')
, ((0x4ab, 0x4ac), 'Ll')
, ((0x4ac, 0x4ad), 'Lu')
, ((0x4ad, 0x4ae), 'Ll')
, ((0x4ae, 0x4af), 'Lu')
, ((0x4af, 0x4b0), 'Ll')
, ((0x4b0, 0x4b1), 'Lu')
, ((0x4b1, 0x4b2), 'Ll')
, ((0x4b2, 0x4b3), 'Lu')
, ((0x4b3, 0x4b4), 'Ll')
, ((0x4b4, 0x4b5), 'Lu')
, ((0x4b5, 0x4b6), 'Ll')
, ((0x4b6, 0x4b7), 'Lu')
, ((0x4b7, 0x4b8), 'Ll')
, ((0x4b8, 0x4b9), 'Lu')
, ((0x4b9, 0x4ba), 'Ll')
, ((0x4ba, 0x4bb), 'Lu')
, ((0x4bb, 0x4bc), 'Ll')
, ((0x4bc, 0x4bd), 'Lu')
, ((0x4bd, 0x4be), 'Ll')
, ((0x4be, 0x4bf), 'Lu')
, ((0x4bf, 0x4c0), 'Ll')
, ((0x4c0, 0x4c2), 'Lu')
, ((0x4c2, 0x4c3), 'Ll')
, ((0x4c3, 0x4c4), 'Lu')
, ((0x4c4, 0x4c5), 'Ll')
, ((0x4c5, 0x4c6), 'Lu')
, ((0x4c6, 0x4c7), 'Ll')
, ((0x4c7, 0x4c8), 'Lu')
, ((0x4c8, 0x4c9), 'Ll')
, ((0x4c9, 0x4ca), 'Lu')
, ((0x4ca, 0x4cb), 'Ll')
, ((0x4cb, 0x4cc), 'Lu')
, ((0x4cc, 0x4cd), 'Ll')
, ((0x4cd, 0x4ce), 'Lu')
, ((0x4ce, 0x4d0), 'Ll')
, ((0x4d0, 0x4d1), 'Lu')
, ((0x4d1, 0x4d2), 'Ll')
, ((0x4d2, 0x4d3), 'Lu')
, ((0x4d3, 0x4d4), 'Ll')
, ((0x4d4, 0x4d5), 'Lu')
, ((0x4d5, 0x4d6), 'Ll')
, ((0x4d6, 0x4d7), 'Lu')
, ((0x4d7, 0x4d8), 'Ll')
, ((0x4d8, 0x4d9), 'Lu')
, ((0x4d9, 0x4da), 'Ll')
, ((0x4da, 0x4db), 'Lu')
, ((0x4db, 0x4dc), 'Ll')
, ((0x4dc, 0x4dd), 'Lu')
, ((0x4dd, 0x4de), 'Ll')
, ((0x4de, 0x4df), 'Lu')
, ((0x4df, 0x4e0), 'Ll')
, ((0x4e0, 0x4e1), 'Lu')
, ((0x4e1, 0x4e2), 'Ll')
, ((0x4e2, 0x4e3), 'Lu')
, ((0x4e3, 0x4e4), 'Ll')
, ((0x4e4, 0x4e5), 'Lu')
, ((0x4e5, 0x4e6), 'Ll')
, ((0x4e6, 0x4e7), 'Lu')
, ((0x4e7, 0x4e8), 'Ll')
, ((0x4e8, 0x4e9), 'Lu')
, ((0x4e9, 0x4ea), 'Ll')
, ((0x4ea, 0x4eb), 'Lu')
, ((0x4eb, 0x4ec), 'Ll')
, ((0x4ec, 0x4ed), 'Lu')
, ((0x4ed, 0x4ee), 'Ll')
, ((0x4ee, 0x4ef), 'Lu')
, ((0x4ef, 0x4f0), 'Ll')
, ((0x4f0, 0x4f1), 'Lu')
, ((0x4f1, 0x4f2), 'Ll')
, ((0x4f2, 0x4f3), 'Lu')
, ((0x4f3, 0x4f4), 'Ll')
, ((0x4f4, 0x4f5), 'Lu')
, ((0x4f5, 0x4f6), 'Ll')
, ((0x4f6, 0x4f7), 'Lu')
, ((0x4f7, 0x4f8), 'Ll')
, ((0x4f8, 0x4f9), 'Lu')
, ((0x4f9, 0x4fa), 'Ll')
, ((0x4fa, 0x4fb), 'Lu')
, ((0x4fb, 0x4fc), 'Ll')
, ((0x4fc, 0x4fd), 'Lu')
, ((0x4fd, 0x4fe), 'Ll')
, ((0x4fe, 0x4ff), 'Lu')
, ((0x4ff, 0x500), 'Ll')
, ((0x500, 0x501), 'Lu')
, ((0x501, 0x502), 'Ll')
, ((0x502, 0x503), 'Lu')
, ((0x503, 0x504), 'Ll')
, ((0x504, 0x505), 'Lu')
, ((0x505, 0x506), 'Ll')
, ((0x506, 0x507), 'Lu')
, ((0x507, 0x508), 'Ll')
, ((0x508, 0x509), 'Lu')
, ((0x509, 0x50a), 'Ll')
, ((0x50a, 0x50b), 'Lu')
, ((0x50b, 0x50c), 'Ll')
, ((0x50c, 0x50d), 'Lu')
, ((0x50d, 0x50e), 'Ll')
, ((0x50e, 0x50f), 'Lu')
, ((0x50f, 0x510), 'Ll')
, ((0x510, 0x511), 'Lu')
, ((0x511, 0x512), 'Ll')
, ((0x512, 0x513), 'Lu')
, ((0x513, 0x514), 'Ll')
, ((0x514, 0x515), 'Lu')
, ((0x515, 0x516), 'Ll')
, ((0x516, 0x517), 'Lu')
, ((0x517, 0x518), 'Ll')
, ((0x518, 0x519), 'Lu')
, ((0x519, 0x51a), 'Ll')
, ((0x51a, 0x51b), 'Lu')
, ((0x51b, 0x51c), 'Ll')
, ((0x51c, 0x51d), 'Lu')
, ((0x51d, 0x51e), 'Ll')
, ((0x51e, 0x51f), 'Lu')
, ((0x51f, 0x520), 'Ll')
, ((0x520, 0x521), 'Lu')
, ((0x521, 0x522), 'Ll')
, ((0x522, 0x523), 'Lu')
, ((0x523, 0x524), 'Ll')
, ((0x524, 0x525), 'Lu')
, ((0x525, 0x526), 'Ll')
, ((0x526, 0x527), 'Lu')
, ((0x527, 0x528), 'Ll')
, ((0x528, 0x529), 'Lu')
, ((0x529, 0x52a), 'Ll')
, ((0x52a, 0x52b), 'Lu')
, ((0x52b, 0x52c), 'Ll')
, ((0x52c, 0x52d), 'Lu')
, ((0x52d, 0x52e), 'Ll')
, ((0x52e, 0x52f), 'Lu')
, ((0x52f, 0x530), 'Ll')
, ((0x530, 0x531), 'Cn')
, ((0x531, 0x557), 'Lu')
, ((0x557, 0x559), 'Cn')
, ((0x559, 0x55a), 'Lm')
, ((0x55a, 0x560), 'Po')
, ((0x560, 0x589), 'Ll')
, ((0x589, 0x58a), 'Po')
, ((0x58a, 0x58b), 'Pd')
, ((0x58b, 0x58d), 'Cn')
, ((0x58d, 0x58f), 'So')
, ((0x58f, 0x590), 'Sc')
, ((0x590, 0x591), 'Cn')
, ((0x591, 0x5be), 'Mn')
, ((0x5be, 0x5bf), 'Pd')
, ((0x5bf, 0x5c0), 'Mn')
, ((0x5c0, 0x5c1), 'Po')
, ((0x5c1, 0x5c3), 'Mn')
, ((0x5c3, 0x5c4), 'Po')
, ((0x5c4, 0x5c6), 'Mn')
, ((0x5c6, 0x5c7), 'Po')
, ((0x5c7, 0x5c8), 'Mn')
, ((0x5c8, 0x5d0), 'Cn')
, ((0x5d0, 0x5eb), 'Lo')
, ((0x5eb, 0x5ef), 'Cn')
, ((0x5ef, 0x5f3), 'Lo')
, ((0x5f3, 0x5f5), 'Po')
, ((0x5f5, 0x600), 'Cn')
, ((0x600, 0x606), 'Cf')
, ((0x606, 0x609), 'Sm')
, ((0x609, 0x60b), 'Po')
, ((0x60b, 0x60c), 'Sc')
, ((0x60c, 0x60e), 'Po')
, ((0x60e, 0x610), 'So')
, ((0x610, 0x61b), 'Mn')
, ((0x61b, 0x61c), 'Po')
, ((0x61c, 0x61d), 'Cf')
, ((0x61d, 0x61e), 'Cn')
, ((0x61e, 0x620), 'Po')
, ((0x620, 0x640), 'Lo')
, ((0x640, 0x641), 'Lm')
, ((0x641, 0x64b), 'Lo')
, ((0x64b, 0x660), 'Mn')
, ((0x660, 0x66a), 'Nd')
, ((0x66a, 0x66e), 'Po')
, ((0x66e, 0x670), 'Lo')
, ((0x670, 0x671), 'Mn')
, ((0x671, 0x6d4), 'Lo')
, ((0x6d4, 0x6d5), 'Po')
, ((0x6d5, 0x6d6), 'Lo')
, ((0x6d6, 0x6dd), 'Mn')
, ((0x6dd, 0x6de), 'Cf')
, ((0x6de, 0x6df), 'So')
, ((0x6df, 0x6e5), 'Mn')
, ((0x6e5, 0x6e7), 'Lm')
, ((0x6e7, 0x6e9), 'Mn')
, ((0x6e9, 0x6ea), 'So')
, ((0x6ea, 0x6ee), 'Mn')
, ((0x6ee, 0x6f0), 'Lo')
, ((0x6f0, 0x6fa), 'Nd')
, ((0x6fa, 0x6fd), 'Lo')
, ((0x6fd, 0x6ff), 'So')
, ((0x6ff, 0x700), 'Lo')
, ((0x700, 0x70e), 'Po')
, ((0x70e, 0x70f), 'Cn')
, ((0x70f, 0x710), 'Cf')
, ((0x710, 0x711), 'Lo')
, ((0x711, 0x712), 'Mn')
, ((0x712, 0x730), 'Lo')
, ((0x730, 0x74b), 'Mn')
, ((0x74b, 0x74d), 'Cn')
, ((0x74d, 0x7a6), 'Lo')
, ((0x7a6, 0x7b1), 'Mn')
, ((0x7b1, 0x7b2), 'Lo')
, ((0x7b2, 0x7c0), 'Cn')
, ((0x7c0, 0x7ca), 'Nd')
, ((0x7ca, 0x7eb), 'Lo')
, ((0x7eb, 0x7f4), 'Mn')
, ((0x7f4, 0x7f6), 'Lm')
, ((0x7f6, 0x7f7), 'So')
, ((0x7f7, 0x7fa), 'Po')
, ((0x7fa, 0x7fb), 'Lm')
, ((0x7fb, 0x7fd), 'Cn')
, ((0x7fd, 0x7fe), 'Mn')
, ((0x7fe, 0x800), 'Sc')
, ((0x800, 0x816), 'Lo')
, ((0x816, 0x81a), 'Mn')
, ((0x81a, 0x81b), 'Lm')
, ((0x81b, 0x824), 'Mn')
, ((0x824, 0x825), 'Lm')
, ((0x825, 0x828), 'Mn')
, ((0x828, 0x829), 'Lm')
, ((0x829, 0x82e), 'Mn')
, ((0x82e, 0x830), 'Cn')
, ((0x830, 0x83f), 'Po')
, ((0x83f, 0x840), 'Cn')
, ((0x840, 0x859), 'Lo')
, ((0x859, 0x85c), 'Mn')
, ((0x85c, 0x85e), 'Cn')
, ((0x85e, 0x85f), 'Po')
, ((0x85f, 0x860), 'Cn')
, ((0x860, 0x86b), 'Lo')
, ((0x86b, 0x8a0), 'Cn')
, ((0x8a0, 0x8b5), 'Lo')
, ((0x8b5, 0x8b6), 'Cn')
, ((0x8b6, 0x8be), 'Lo')
, ((0x8be, 0x8d3), 'Cn')
, ((0x8d3, 0x8e2), 'Mn')
, ((0x8e2, 0x8e3), 'Cf')
, ((0x8e3, 0x903), 'Mn')
, ((0x903, 0x904), 'Mc')
, ((0x904, 0x93a), 'Lo')
, ((0x93a, 0x93b), 'Mn')
, ((0x93b, 0x93c), 'Mc')
, ((0x93c, 0x93d), 'Mn')
, ((0x93d, 0x93e), 'Lo')
, ((0x93e, 0x941), 'Mc')
, ((0x941, 0x949), 'Mn')
, ((0x949, 0x94d), 'Mc')
, ((0x94d, 0x94e), 'Mn')
, ((0x94e, 0x950), 'Mc')
, ((0x950, 0x951), 'Lo')
, ((0x951, 0x958), 'Mn')
, ((0x958, 0x962), 'Lo')
, ((0x962, 0x964), 'Mn')
, ((0x964, 0x966), 'Po')
, ((0x966, 0x970), 'Nd')
, ((0x970, 0x971), 'Po')
, ((0x971, 0x972), 'Lm')
, ((0x972, 0x981), 'Lo')
, ((0x981, 0x982), 'Mn')
, ((0x982, 0x984), 'Mc')
, ((0x984, 0x985), 'Cn')
, ((0x985, 0x98d), 'Lo')
, ((0x98d, 0x98f), 'Cn')
, ((0x98f, 0x991), 'Lo')
, ((0x991, 0x993), 'Cn')
, ((0x993, 0x9a9), 'Lo')
, ((0x9a9, 0x9aa), 'Cn')
, ((0x9aa, 0x9b1), 'Lo')
, ((0x9b1, 0x9b2), 'Cn')
, ((0x9b2, 0x9b3), 'Lo')
, ((0x9b3, 0x9b6), 'Cn')
, ((0x9b6, 0x9ba), 'Lo')
, ((0x9ba, 0x9bc), 'Cn')
, ((0x9bc, 0x9bd), 'Mn')
, ((0x9bd, 0x9be), 'Lo')
, ((0x9be, 0x9c1), 'Mc')
, ((0x9c1, 0x9c5), 'Mn')
, ((0x9c5, 0x9c7), 'Cn')
, ((0x9c7, 0x9c9), 'Mc')
, ((0x9c9, 0x9cb), 'Cn')
, ((0x9cb, 0x9cd), 'Mc')
, ((0x9cd, 0x9ce), 'Mn')
, ((0x9ce, 0x9cf), 'Lo')
, ((0x9cf, 0x9d7), 'Cn')
, ((0x9d7, 0x9d8), 'Mc')
, ((0x9d8, 0x9dc), 'Cn')
, ((0x9dc, 0x9de), 'Lo')
, ((0x9de, 0x9df), 'Cn')
, ((0x9df, 0x9e2), 'Lo')
, ((0x9e2, 0x9e4), 'Mn')
, ((0x9e4, 0x9e6), 'Cn')
, ((0x9e6, 0x9f0), 'Nd')
, ((0x9f0, 0x9f2), 'Lo')
, ((0x9f2, 0x9f4), 'Sc')
, ((0x9f4, 0x9fa), 'No')
, ((0x9fa, 0x9fb), 'So')
, ((0x9fb, 0x9fc), 'Sc')
, ((0x9fc, 0x9fd), 'Lo')
, ((0x9fd, 0x9fe), 'Po')
, ((0x9fe, 0x9ff), 'Mn')
, ((0x9ff, 0xa01), 'Cn')
, ((0xa01, 0xa03), 'Mn')
, ((0xa03, 0xa04), 'Mc')
, ((0xa04, 0xa05), 'Cn')
, ((0xa05, 0xa0b), 'Lo')
, ((0xa0b, 0xa0f), 'Cn')
, ((0xa0f, 0xa11), 'Lo')
, ((0xa11, 0xa13), 'Cn')
, ((0xa13, 0xa29), 'Lo')
, ((0xa29, 0xa2a), 'Cn')
, ((0xa2a, 0xa31), 'Lo')
, ((0xa31, 0xa32), 'Cn')
, ((0xa32, 0xa34), 'Lo')
, ((0xa34, 0xa35), 'Cn')
, ((0xa35, 0xa37), 'Lo')
, ((0xa37, 0xa38), 'Cn')
, ((0xa38, 0xa3a), 'Lo')
, ((0xa3a, 0xa3c), 'Cn')
, ((0xa3c, 0xa3d), 'Mn')
, ((0xa3d, 0xa3e), 'Cn')
, ((0xa3e, 0xa41), 'Mc')
, ((0xa41, 0xa43), 'Mn')
, ((0xa43, 0xa47), 'Cn')
, ((0xa47, 0xa49), 'Mn')
, ((0xa49, 0xa4b), 'Cn')
, ((0xa4b, 0xa4e), 'Mn')
, ((0xa4e, 0xa51), 'Cn')
, ((0xa51, 0xa52), 'Mn')
, ((0xa52, 0xa59), 'Cn')
, ((0xa59, 0xa5d), 'Lo')
, ((0xa5d, 0xa5e), 'Cn')
, ((0xa5e, 0xa5f), 'Lo')
, ((0xa5f, 0xa66), 'Cn')
, ((0xa66, 0xa70), 'Nd')
, ((0xa70, 0xa72), 'Mn')
, ((0xa72, 0xa75), 'Lo')
, ((0xa75, 0xa76), 'Mn')
, ((0xa76, 0xa77), 'Po')
, ((0xa77, 0xa81), 'Cn')
, ((0xa81, 0xa83), 'Mn')
, ((0xa83, 0xa84), 'Mc')
, ((0xa84, 0xa85), 'Cn')
, ((0xa85, 0xa8e), 'Lo')
, ((0xa8e, 0xa8f), 'Cn')
, ((0xa8f, 0xa92), 'Lo')
, ((0xa92, 0xa93), 'Cn')
, ((0xa93, 0xaa9), 'Lo')
, ((0xaa9, 0xaaa), 'Cn')
, ((0xaaa, 0xab1), 'Lo')
, ((0xab1, 0xab2), 'Cn')
, ((0xab2, 0xab4), 'Lo')
, ((0xab4, 0xab5), 'Cn')
, ((0xab5, 0xaba), 'Lo')
, ((0xaba, 0xabc), 'Cn')
, ((0xabc, 0xabd), 'Mn')
, ((0xabd, 0xabe), 'Lo')
, ((0xabe, 0xac1), 'Mc')
, ((0xac1, 0xac6), 'Mn')
, ((0xac6, 0xac7), 'Cn')
, ((0xac7, 0xac9), 'Mn')
, ((0xac9, 0xaca), 'Mc')
, ((0xaca, 0xacb), 'Cn')
, ((0xacb, 0xacd), 'Mc')
, ((0xacd, 0xace), 'Mn')
, ((0xace, 0xad0), 'Cn')
, ((0xad0, 0xad1), 'Lo')
, ((0xad1, 0xae0), 'Cn')
, ((0xae0, 0xae2), 'Lo')
, ((0xae2, 0xae4), 'Mn')
, ((0xae4, 0xae6), 'Cn')
, ((0xae6, 0xaf0), 'Nd')
, ((0xaf0, 0xaf1), 'Po')
, ((0xaf1, 0xaf2), 'Sc')
, ((0xaf2, 0xaf9), 'Cn')
, ((0xaf9, 0xafa), 'Lo')
, ((0xafa, 0xb00), 'Mn')
, ((0xb00, 0xb01), 'Cn')
, ((0xb01, 0xb02), 'Mn')
, ((0xb02, 0xb04), 'Mc')
, ((0xb04, 0xb05), 'Cn')
, ((0xb05, 0xb0d), 'Lo')
, ((0xb0d, 0xb0f), 'Cn')
, ((0xb0f, 0xb11), 'Lo')
, ((0xb11, 0xb13), 'Cn')
, ((0xb13, 0xb29), 'Lo')
, ((0xb29, 0xb2a), 'Cn')
, ((0xb2a, 0xb31), 'Lo')
, ((0xb31, 0xb32), 'Cn')
, ((0xb32, 0xb34), 'Lo')
, ((0xb34, 0xb35), 'Cn')
, ((0xb35, 0xb3a), 'Lo')
, ((0xb3a, 0xb3c), 'Cn')
, ((0xb3c, 0xb3d), 'Mn')
, ((0xb3d, 0xb3e), 'Lo')
, ((0xb3e, 0xb3f), 'Mc')
, ((0xb3f, 0xb40), 'Mn')
, ((0xb40, 0xb41), 'Mc')
, ((0xb41, 0xb45), 'Mn')
, ((0xb45, 0xb47), 'Cn')
, ((0xb47, 0xb49), 'Mc')
, ((0xb49, 0xb4b), 'Cn')
, ((0xb4b, 0xb4d), 'Mc')
, ((0xb4d, 0xb4e), 'Mn')
, ((0xb4e, 0xb56), 'Cn')
, ((0xb56, 0xb57), 'Mn')
, ((0xb57, 0xb58), 'Mc')
, ((0xb58, 0xb5c), 'Cn')
, ((0xb5c, 0xb5e), 'Lo')
, ((0xb5e, 0xb5f), 'Cn')
, ((0xb5f, 0xb62), 'Lo')
, ((0xb62, 0xb64), 'Mn')
, ((0xb64, 0xb66), 'Cn')
, ((0xb66, 0xb70), 'Nd')
, ((0xb70, 0xb71), 'So')
, ((0xb71, 0xb72), 'Lo')
, ((0xb72, 0xb78), 'No')
, ((0xb78, 0xb82), 'Cn')
, ((0xb82, 0xb83), 'Mn')
, ((0xb83, 0xb84), 'Lo')
, ((0xb84, 0xb85), 'Cn')
, ((0xb85, 0xb8b), 'Lo')
, ((0xb8b, 0xb8e), 'Cn')
, ((0xb8e, 0xb91), 'Lo')
, ((0xb91, 0xb92), 'Cn')
, ((0xb92, 0xb96), 'Lo')
, ((0xb96, 0xb99), 'Cn')
, ((0xb99, 0xb9b), 'Lo')
, ((0xb9b, 0xb9c), 'Cn')
, ((0xb9c, 0xb9d), 'Lo')
, ((0xb9d, 0xb9e), 'Cn')
, ((0xb9e, 0xba0), 'Lo')
, ((0xba0, 0xba3), 'Cn')
, ((0xba3, 0xba5), 'Lo')
, ((0xba5, 0xba8), 'Cn')
, ((0xba8, 0xbab), 'Lo')
, ((0xbab, 0xbae), 'Cn')
, ((0xbae, 0xbba), 'Lo')
, ((0xbba, 0xbbe), 'Cn')
, ((0xbbe, 0xbc0), 'Mc')
, ((0xbc0, 0xbc1), 'Mn')
, ((0xbc1, 0xbc3), 'Mc')
, ((0xbc3, 0xbc6), 'Cn')
, ((0xbc6, 0xbc9), 'Mc')
, ((0xbc9, 0xbca), 'Cn')
, ((0xbca, 0xbcd), 'Mc')
, ((0xbcd, 0xbce), 'Mn')
, ((0xbce, 0xbd0), 'Cn')
, ((0xbd0, 0xbd1), 'Lo')
, ((0xbd1, 0xbd7), 'Cn')
, ((0xbd7, 0xbd8), 'Mc')
, ((0xbd8, 0xbe6), 'Cn')
, ((0xbe6, 0xbf0), 'Nd')
, ((0xbf0, 0xbf3), 'No')
, ((0xbf3, 0xbf9), 'So')
, ((0xbf9, 0xbfa), 'Sc')
, ((0xbfa, 0xbfb), 'So')
, ((0xbfb, 0xc00), 'Cn')
, ((0xc00, 0xc01), 'Mn')
, ((0xc01, 0xc04), 'Mc')
, ((0xc04, 0xc05), 'Mn')
, ((0xc05, 0xc0d), 'Lo')
, ((0xc0d, 0xc0e), 'Cn')
, ((0xc0e, 0xc11), 'Lo')
, ((0xc11, 0xc12), 'Cn')
, ((0xc12, 0xc29), 'Lo')
, ((0xc29, 0xc2a), 'Cn')
, ((0xc2a, 0xc3a), 'Lo')
, ((0xc3a, 0xc3d), 'Cn')
, ((0xc3d, 0xc3e), 'Lo')
, ((0xc3e, 0xc41), 'Mn')
, ((0xc41, 0xc45), 'Mc')
, ((0xc45, 0xc46), 'Cn')
, ((0xc46, 0xc49), 'Mn')
, ((0xc49, 0xc4a), 'Cn')
, ((0xc4a, 0xc4e), 'Mn')
, ((0xc4e, 0xc55), 'Cn')
, ((0xc55, 0xc57), 'Mn')
, ((0xc57, 0xc58), 'Cn')
, ((0xc58, 0xc5b), 'Lo')
, ((0xc5b, 0xc60), 'Cn')
, ((0xc60, 0xc62), 'Lo')
, ((0xc62, 0xc64), 'Mn')
, ((0xc64, 0xc66), 'Cn')
, ((0xc66, 0xc70), 'Nd')
, ((0xc70, 0xc77), 'Cn')
, ((0xc77, 0xc78), 'Po')
, ((0xc78, 0xc7f), 'No')
, ((0xc7f, 0xc80), 'So')
, ((0xc80, 0xc81), 'Lo')
, ((0xc81, 0xc82), 'Mn')
, ((0xc82, 0xc84), 'Mc')
, ((0xc84, 0xc85), 'Po')
, ((0xc85, 0xc8d), 'Lo')
, ((0xc8d, 0xc8e), 'Cn')
, ((0xc8e, 0xc91), 'Lo')
, ((0xc91, 0xc92), 'Cn')
, ((0xc92, 0xca9), 'Lo')
, ((0xca9, 0xcaa), 'Cn')
, ((0xcaa, 0xcb4), 'Lo')
, ((0xcb4, 0xcb5), 'Cn')
, ((0xcb5, 0xcba), 'Lo')
, ((0xcba, 0xcbc), 'Cn')
, ((0xcbc, 0xcbd), 'Mn')
, ((0xcbd, 0xcbe), 'Lo')
, ((0xcbe, 0xcbf), 'Mc')
, ((0xcbf, 0xcc0), 'Mn')
, ((0xcc0, 0xcc5), 'Mc')
, ((0xcc5, 0xcc6), 'Cn')
, ((0xcc6, 0xcc7), 'Mn')
, ((0xcc7, 0xcc9), 'Mc')
, ((0xcc9, 0xcca), 'Cn')
, ((0xcca, 0xccc), 'Mc')
, ((0xccc, 0xcce), 'Mn')
, ((0xcce, 0xcd5), 'Cn')
, ((0xcd5, 0xcd7), 'Mc')
, ((0xcd7, 0xcde), 'Cn')
, ((0xcde, 0xcdf), 'Lo')
, ((0xcdf, 0xce0), 'Cn')
, ((0xce0, 0xce2), 'Lo')
, ((0xce2, 0xce4), 'Mn')
, ((0xce4, 0xce6), 'Cn')
, ((0xce6, 0xcf0), 'Nd')
, ((0xcf0, 0xcf1), 'Cn')
, ((0xcf1, 0xcf3), 'Lo')
, ((0xcf3, 0xd00), 'Cn')
, ((0xd00, 0xd02), 'Mn')
, ((0xd02, 0xd04), 'Mc')
, ((0xd04, 0xd05), 'Cn')
, ((0xd05, 0xd0d), 'Lo')
, ((0xd0d, 0xd0e), 'Cn')
, ((0xd0e, 0xd11), 'Lo')
, ((0xd11, 0xd12), 'Cn')
, ((0xd12, 0xd3b), 'Lo')
, ((0xd3b, 0xd3d), 'Mn')
, ((0xd3d, 0xd3e), 'Lo')
, ((0xd3e, 0xd41), 'Mc')
, ((0xd41, 0xd45), 'Mn')
, ((0xd45, 0xd46), 'Cn')
, ((0xd46, 0xd49), 'Mc')
, ((0xd49, 0xd4a), 'Cn')
, ((0xd4a, 0xd4d), 'Mc')
, ((0xd4d, 0xd4e), 'Mn')
, ((0xd4e, 0xd4f), 'Lo')
, ((0xd4f, 0xd50), 'So')
, ((0xd50, 0xd54), 'Cn')
, ((0xd54, 0xd57), 'Lo')
, ((0xd57, 0xd58), 'Mc')
, ((0xd58, 0xd5f), 'No')
, ((0xd5f, 0xd62), 'Lo')
, ((0xd62, 0xd64), 'Mn')
, ((0xd64, 0xd66), 'Cn')
, ((0xd66, 0xd70), 'Nd')
, ((0xd70, 0xd79), 'No')
, ((0xd79, 0xd7a), 'So')
, ((0xd7a, 0xd80), 'Lo')
, ((0xd80, 0xd82), 'Cn')
, ((0xd82, 0xd84), 'Mc')
, ((0xd84, 0xd85), 'Cn')
, ((0xd85, 0xd97), 'Lo')
, ((0xd97, 0xd9a), 'Cn')
, ((0xd9a, 0xdb2), 'Lo')
, ((0xdb2, 0xdb3), 'Cn')
, ((0xdb3, 0xdbc), 'Lo')
, ((0xdbc, 0xdbd), 'Cn')
, ((0xdbd, 0xdbe), 'Lo')
, ((0xdbe, 0xdc0), 'Cn')
, ((0xdc0, 0xdc7), 'Lo')
, ((0xdc7, 0xdca), 'Cn')
, ((0xdca, 0xdcb), 'Mn')
, ((0xdcb, 0xdcf), 'Cn')
, ((0xdcf, 0xdd2), 'Mc')
, ((0xdd2, 0xdd5), 'Mn')
, ((0xdd5, 0xdd6), 'Cn')
, ((0xdd6, 0xdd7), 'Mn')
, ((0xdd7, 0xdd8), 'Cn')
, ((0xdd8, 0xde0), 'Mc')
, ((0xde0, 0xde6), 'Cn')
, ((0xde6, 0xdf0), 'Nd')
, ((0xdf0, 0xdf2), 'Cn')
, ((0xdf2, 0xdf4), 'Mc')
, ((0xdf4, 0xdf5), 'Po')
, ((0xdf5, 0xe01), 'Cn')
, ((0xe01, 0xe31), 'Lo')
, ((0xe31, 0xe32), 'Mn')
, ((0xe32, 0xe34), 'Lo')
, ((0xe34, 0xe3b), 'Mn')
, ((0xe3b, 0xe3f), 'Cn')
, ((0xe3f, 0xe40), 'Sc')
, ((0xe40, 0xe46), 'Lo')
, ((0xe46, 0xe47), 'Lm')
, ((0xe47, 0xe4f), 'Mn')
, ((0xe4f, 0xe50), 'Po')
, ((0xe50, 0xe5a), 'Nd')
, ((0xe5a, 0xe5c), 'Po')
, ((0xe5c, 0xe81), 'Cn')
, ((0xe81, 0xe83), 'Lo')
, ((0xe83, 0xe84), 'Cn')
, ((0xe84, 0xe85), 'Lo')
, ((0xe85, 0xe86), 'Cn')
, ((0xe86, 0xe8b), 'Lo')
, ((0xe8b, 0xe8c), 'Cn')
, ((0xe8c, 0xea4), 'Lo')
, ((0xea4, 0xea5), 'Cn')
, ((0xea5, 0xea6), 'Lo')
, ((0xea6, 0xea7), 'Cn')
, ((0xea7, 0xeb1), 'Lo')
, ((0xeb1, 0xeb2), 'Mn')
, ((0xeb2, 0xeb4), 'Lo')
, ((0xeb4, 0xebd), 'Mn')
, ((0xebd, 0xebe), 'Lo')
, ((0xebe, 0xec0), 'Cn')
, ((0xec0, 0xec5), 'Lo')
, ((0xec5, 0xec6), 'Cn')
, ((0xec6, 0xec7), 'Lm')
, ((0xec7, 0xec8), 'Cn')
, ((0xec8, 0xece), 'Mn')
, ((0xece, 0xed0), 'Cn')
, ((0xed0, 0xeda), 'Nd')
, ((0xeda, 0xedc), 'Cn')
, ((0xedc, 0xee0), 'Lo')
, ((0xee0, 0xf00), 'Cn')
, ((0xf00, 0xf01), 'Lo')
, ((0xf01, 0xf04), 'So')
, ((0xf04, 0xf13), 'Po')
, ((0xf13, 0xf14), 'So')
, ((0xf14, 0xf15), 'Po')
, ((0xf15, 0xf18), 'So')
, ((0xf18, 0xf1a), 'Mn')
, ((0xf1a, 0xf20), 'So')
, ((0xf20, 0xf2a), 'Nd')
, ((0xf2a, 0xf34), 'No')
, ((0xf34, 0xf35), 'So')
, ((0xf35, 0xf36), 'Mn')
, ((0xf36, 0xf37), 'So')
, ((0xf37, 0xf38), 'Mn')
, ((0xf38, 0xf39), 'So')
, ((0xf39, 0xf3a), 'Mn')
, ((0xf3a, 0xf3b), 'Ps')
, ((0xf3b, 0xf3c), 'Pe')
, ((0xf3c, 0xf3d), 'Ps')
, ((0xf3d, 0xf3e), 'Pe')
, ((0xf3e, 0xf40), 'Mc')
, ((0xf40, 0xf48), 'Lo')
, ((0xf48, 0xf49), 'Cn')
, ((0xf49, 0xf6d), 'Lo')
, ((0xf6d, 0xf71), 'Cn')
, ((0xf71, 0xf7f), 'Mn')
, ((0xf7f, 0xf80), 'Mc')
, ((0xf80, 0xf85), 'Mn')
, ((0xf85, 0xf86), 'Po')
, ((0xf86, 0xf88), 'Mn')
, ((0xf88, 0xf8d), 'Lo')
, ((0xf8d, 0xf98), 'Mn')
, ((0xf98, 0xf99), 'Cn')
, ((0xf99, 0xfbd), 'Mn')
, ((0xfbd, 0xfbe), 'Cn')
, ((0xfbe, 0xfc6), 'So')
, ((0xfc6, 0xfc7), 'Mn')
, ((0xfc7, 0xfcd), 'So')
, ((0xfcd, 0xfce), 'Cn')
, ((0xfce, 0xfd0), 'So')
, ((0xfd0, 0xfd5), 'Po')
, ((0xfd5, 0xfd9), 'So')
, ((0xfd9, 0xfdb), 'Po')
, ((0xfdb, 0x1000), 'Cn')
, ((0x1000, 0x102b), 'Lo')
, ((0x102b, 0x102d), 'Mc')
, ((0x102d, 0x1031), 'Mn')
, ((0x1031, 0x1032), 'Mc')
, ((0x1032, 0x1038), 'Mn')
, ((0x1038, 0x1039), 'Mc')
, ((0x1039, 0x103b), 'Mn')
, ((0x103b, 0x103d), 'Mc')
, ((0x103d, 0x103f), 'Mn')
, ((0x103f, 0x1040), 'Lo')
, ((0x1040, 0x104a), 'Nd')
, ((0x104a, 0x1050), 'Po')
, ((0x1050, 0x1056), 'Lo')
, ((0x1056, 0x1058), 'Mc')
, ((0x1058, 0x105a), 'Mn')
, ((0x105a, 0x105e), 'Lo')
, ((0x105e, 0x1061), 'Mn')
, ((0x1061, 0x1062), 'Lo')
, ((0x1062, 0x1065), 'Mc')
, ((0x1065, 0x1067), 'Lo')
, ((0x1067, 0x106e), 'Mc')
, ((0x106e, 0x1071), 'Lo')
, ((0x1071, 0x1075), 'Mn')
, ((0x1075, 0x1082), 'Lo')
, ((0x1082, 0x1083), 'Mn')
, ((0x1083, 0x1085), 'Mc')
, ((0x1085, 0x1087), 'Mn')
, ((0x1087, 0x108d), 'Mc')
, ((0x108d, 0x108e), 'Mn')
, ((0x108e, 0x108f), 'Lo')
, ((0x108f, 0x1090), 'Mc')
, ((0x1090, 0x109a), 'Nd')
, ((0x109a, 0x109d), 'Mc')
, ((0x109d, 0x109e), 'Mn')
, ((0x109e, 0x10a0), 'So')
, ((0x10a0, 0x10c6), 'Lu')
, ((0x10c6, 0x10c7), 'Cn')
, ((0x10c7, 0x10c8), 'Lu')
, ((0x10c8, 0x10cd), 'Cn')
, ((0x10cd, 0x10ce), 'Lu')
, ((0x10ce, 0x10d0), 'Cn')
, ((0x10d0, 0x10fb), 'Ll')
, ((0x10fb, 0x10fc), 'Po')
, ((0x10fc, 0x10fd), 'Lm')
, ((0x10fd, 0x1100), 'Ll')
, ((0x1100, 0x1249), 'Lo')
, ((0x1249, 0x124a), 'Cn')
, ((0x124a, 0x124e), 'Lo')
, ((0x124e, 0x1250), 'Cn')
, ((0x1250, 0x1257), 'Lo')
, ((0x1257, 0x1258), 'Cn')
, ((0x1258, 0x1259), 'Lo')
, ((0x1259, 0x125a), 'Cn')
, ((0x125a, 0x125e), 'Lo')
, ((0x125e, 0x1260), 'Cn')
, ((0x1260, 0x1289), 'Lo')
, ((0x1289, 0x128a), 'Cn')
, ((0x128a, 0x128e), 'Lo')
, ((0x128e, 0x1290), 'Cn')
, ((0x1290, 0x12b1), 'Lo')
, ((0x12b1, 0x12b2), 'Cn')
, ((0x12b2, 0x12b6), 'Lo')
, ((0x12b6, 0x12b8), 'Cn')
, ((0x12b8, 0x12bf), 'Lo')
, ((0x12bf, 0x12c0), 'Cn')
, ((0x12c0, 0x12c1), 'Lo')
, ((0x12c1, 0x12c2), 'Cn')
, ((0x12c2, 0x12c6), 'Lo')
, ((0x12c6, 0x12c8), 'Cn')
, ((0x12c8, 0x12d7), 'Lo')
, ((0x12d7, 0x12d8), 'Cn')
, ((0x12d8, 0x1311), 'Lo')
, ((0x1311, 0x1312), 'Cn')
, ((0x1312, 0x1316), 'Lo')
, ((0x1316, 0x1318), 'Cn')
, ((0x1318, 0x135b), 'Lo')
, ((0x135b, 0x135d), 'Cn')
, ((0x135d, 0x1360), 'Mn')
, ((0x1360, 0x1369), 'Po')
, ((0x1369, 0x137d), 'No')
, ((0x137d, 0x1380), 'Cn')
, ((0x1380, 0x1390), 'Lo')
, ((0x1390, 0x139a), 'So')
, ((0x139a, 0x13a0), 'Cn')
, ((0x13a0, 0x13f6), 'Lu')
, ((0x13f6, 0x13f8), 'Cn')
, ((0x13f8, 0x13fe), 'Ll')
, ((0x13fe, 0x1400), 'Cn')
, ((0x1400, 0x1401), 'Pd')
, ((0x1401, 0x166d), 'Lo')
, ((0x166d, 0x166e), 'So')
, ((0x166e, 0x166f), 'Po')
, ((0x166f, 0x1680), 'Lo')
, ((0x1680, 0x1681), 'Zs')
, ((0x1681, 0x169b), 'Lo')
, ((0x169b, 0x169c), 'Ps')
, ((0x169c, 0x169d), 'Pe')
, ((0x169d, 0x16a0), 'Cn')
, ((0x16a0, 0x16eb), 'Lo')
, ((0x16eb, 0x16ee), 'Po')
, ((0x16ee, 0x16f1), 'Nl')
, ((0x16f1, 0x16f9), 'Lo')
, ((0x16f9, 0x1700), 'Cn')
, ((0x1700, 0x170d), 'Lo')
, ((0x170d, 0x170e), 'Cn')
, ((0x170e, 0x1712), 'Lo')
, ((0x1712, 0x1715), 'Mn')
, ((0x1715, 0x1720), 'Cn')
, ((0x1720, 0x1732), 'Lo')
, ((0x1732, 0x1735), 'Mn')
, ((0x1735, 0x1737), 'Po')
, ((0x1737, 0x1740), 'Cn')
, ((0x1740, 0x1752), 'Lo')
, ((0x1752, 0x1754), 'Mn')
, ((0x1754, 0x1760), 'Cn')
, ((0x1760, 0x176d), 'Lo')
, ((0x176d, 0x176e), 'Cn')
, ((0x176e, 0x1771), 'Lo')
, ((0x1771, 0x1772), 'Cn')
, ((0x1772, 0x1774), 'Mn')
, ((0x1774, 0x1780), 'Cn')
, ((0x1780, 0x17b4), 'Lo')
, ((0x17b4, 0x17b6), 'Mn')
, ((0x17b6, 0x17b7), 'Mc')
, ((0x17b7, 0x17be), 'Mn')
, ((0x17be, 0x17c6), 'Mc')
, ((0x17c6, 0x17c7), 'Mn')
, ((0x17c7, 0x17c9), 'Mc')
, ((0x17c9, 0x17d4), 'Mn')
, ((0x17d4, 0x17d7), 'Po')
, ((0x17d7, 0x17d8), 'Lm')
, ((0x17d8, 0x17db), 'Po')
, ((0x17db, 0x17dc), 'Sc')
, ((0x17dc, 0x17dd), 'Lo')
, ((0x17dd, 0x17de), 'Mn')
, ((0x17de, 0x17e0), 'Cn')
, ((0x17e0, 0x17ea), 'Nd')
, ((0x17ea, 0x17f0), 'Cn')
, ((0x17f0, 0x17fa), 'No')
, ((0x17fa, 0x1800), 'Cn')
, ((0x1800, 0x1806), 'Po')
, ((0x1806, 0x1807), 'Pd')
, ((0x1807, 0x180b), 'Po')
, ((0x180b, 0x180e), 'Mn')
, ((0x180e, 0x180f), 'Cf')
, ((0x180f, 0x1810), 'Cn')
, ((0x1810, 0x181a), 'Nd')
, ((0x181a, 0x1820), 'Cn')
, ((0x1820, 0x1843), 'Lo')
, ((0x1843, 0x1844), 'Lm')
, ((0x1844, 0x1879), 'Lo')
, ((0x1879, 0x1880), 'Cn')
, ((0x1880, 0x1885), 'Lo')
, ((0x1885, 0x1887), 'Mn')
, ((0x1887, 0x18a9), 'Lo')
, ((0x18a9, 0x18aa), 'Mn')
, ((0x18aa, 0x18ab), 'Lo')
, ((0x18ab, 0x18b0), 'Cn')
, ((0x18b0, 0x18f6), 'Lo')
, ((0x18f6, 0x1900), 'Cn')
, ((0x1900, 0x191f), 'Lo')
, ((0x191f, 0x1920), 'Cn')
, ((0x1920, 0x1923), 'Mn')
, ((0x1923, 0x1927), 'Mc')
, ((0x1927, 0x1929), 'Mn')
, ((0x1929, 0x192c), 'Mc')
, ((0x192c, 0x1930), 'Cn')
, ((0x1930, 0x1932), 'Mc')
, ((0x1932, 0x1933), 'Mn')
, ((0x1933, 0x1939), 'Mc')
, ((0x1939, 0x193c), 'Mn')
, ((0x193c, 0x1940), 'Cn')
, ((0x1940, 0x1941), 'So')
, ((0x1941, 0x1944), 'Cn')
, ((0x1944, 0x1946), 'Po')
, ((0x1946, 0x1950), 'Nd')
, ((0x1950, 0x196e), 'Lo')
, ((0x196e, 0x1970), 'Cn')
, ((0x1970, 0x1975), 'Lo')
, ((0x1975, 0x1980), 'Cn')
, ((0x1980, 0x19ac), 'Lo')
, ((0x19ac, 0x19b0), 'Cn')
, ((0x19b0, 0x19ca), 'Lo')
, ((0x19ca, 0x19d0), 'Cn')
, ((0x19d0, 0x19da), 'Nd')
, ((0x19da, 0x19db), 'No')
, ((0x19db, 0x19de), 'Cn')
, ((0x19de, 0x1a00), 'So')
, ((0x1a00, 0x1a17), 'Lo')
, ((0x1a17, 0x1a19), 'Mn')
, ((0x1a19, 0x1a1b), 'Mc')
, ((0x1a1b, 0x1a1c), 'Mn')
, ((0x1a1c, 0x1a1e), 'Cn')
, ((0x1a1e, 0x1a20), 'Po')
, ((0x1a20, 0x1a55), 'Lo')
, ((0x1a55, 0x1a56), 'Mc')
, ((0x1a56, 0x1a57), 'Mn')
, ((0x1a57, 0x1a58), 'Mc')
, ((0x1a58, 0x1a5f), 'Mn')
, ((0x1a5f, 0x1a60), 'Cn')
, ((0x1a60, 0x1a61), 'Mn')
, ((0x1a61, 0x1a62), 'Mc')
, ((0x1a62, 0x1a63), 'Mn')
, ((0x1a63, 0x1a65), 'Mc')
, ((0x1a65, 0x1a6d), 'Mn')
, ((0x1a6d, 0x1a73), 'Mc')
, ((0x1a73, 0x1a7d), 'Mn')
, ((0x1a7d, 0x1a7f), 'Cn')
, ((0x1a7f, 0x1a80), 'Mn')
, ((0x1a80, 0x1a8a), 'Nd')
, ((0x1a8a, 0x1a90), 'Cn')
, ((0x1a90, 0x1a9a), 'Nd')
, ((0x1a9a, 0x1aa0), 'Cn')
, ((0x1aa0, 0x1aa7), 'Po')
, ((0x1aa7, 0x1aa8), 'Lm')
, ((0x1aa8, 0x1aae), 'Po')
, ((0x1aae, 0x1ab0), 'Cn')
, ((0x1ab0, 0x1abe), 'Mn')
, ((0x1abe, 0x1abf), 'Me')
, ((0x1abf, 0x1b00), 'Cn')
, ((0x1b00, 0x1b04), 'Mn')
, ((0x1b04, 0x1b05), 'Mc')
, ((0x1b05, 0x1b34), 'Lo')
, ((0x1b34, 0x1b35), 'Mn')
, ((0x1b35, 0x1b36), 'Mc')
, ((0x1b36, 0x1b3b), 'Mn')
, ((0x1b3b, 0x1b3c), 'Mc')
, ((0x1b3c, 0x1b3d), 'Mn')
, ((0x1b3d, 0x1b42), 'Mc')
, ((0x1b42, 0x1b43), 'Mn')
, ((0x1b43, 0x1b45), 'Mc')
, ((0x1b45, 0x1b4c), 'Lo')
, ((0x1b4c, 0x1b50), 'Cn')
, ((0x1b50, 0x1b5a), 'Nd')
, ((0x1b5a, 0x1b61), 'Po')
, ((0x1b61, 0x1b6b), 'So')
, ((0x1b6b, 0x1b74), 'Mn')
, ((0x1b74, 0x1b7d), 'So')
, ((0x1b7d, 0x1b80), 'Cn')
, ((0x1b80, 0x1b82), 'Mn')
, ((0x1b82, 0x1b83), 'Mc')
, ((0x1b83, 0x1ba1), 'Lo')
, ((0x1ba1, 0x1ba2), 'Mc')
, ((0x1ba2, 0x1ba6), 'Mn')
, ((0x1ba6, 0x1ba8), 'Mc')
, ((0x1ba8, 0x1baa), 'Mn')
, ((0x1baa, 0x1bab), 'Mc')
, ((0x1bab, 0x1bae), 'Mn')
, ((0x1bae, 0x1bb0), 'Lo')
, ((0x1bb0, 0x1bba), 'Nd')
, ((0x1bba, 0x1be6), 'Lo')
, ((0x1be6, 0x1be7), 'Mn')
, ((0x1be7, 0x1be8), 'Mc')
, ((0x1be8, 0x1bea), 'Mn')
, ((0x1bea, 0x1bed), 'Mc')
, ((0x1bed, 0x1bee), 'Mn')
, ((0x1bee, 0x1bef), 'Mc')
, ((0x1bef, 0x1bf2), 'Mn')
, ((0x1bf2, 0x1bf4), 'Mc')
, ((0x1bf4, 0x1bfc), 'Cn')
, ((0x1bfc, 0x1c00), 'Po')
, ((0x1c00, 0x1c24), 'Lo')
, ((0x1c24, 0x1c2c), 'Mc')
, ((0x1c2c, 0x1c34), 'Mn')
, ((0x1c34, 0x1c36), 'Mc')
, ((0x1c36, 0x1c38), 'Mn')
, ((0x1c38, 0x1c3b), 'Cn')
, ((0x1c3b, 0x1c40), 'Po')
, ((0x1c40, 0x1c4a), 'Nd')
, ((0x1c4a, 0x1c4d), 'Cn')
, ((0x1c4d, 0x1c50), 'Lo')
, ((0x1c50, 0x1c5a), 'Nd')
, ((0x1c5a, 0x1c78), 'Lo')
, ((0x1c78, 0x1c7e), 'Lm')
, ((0x1c7e, 0x1c80), 'Po')
, ((0x1c80, 0x1c89), 'Ll')
, ((0x1c89, 0x1c90), 'Cn')
, ((0x1c90, 0x1cbb), 'Lu')
, ((0x1cbb, 0x1cbd), 'Cn')
, ((0x1cbd, 0x1cc0), 'Lu')
, ((0x1cc0, 0x1cc8), 'Po')
, ((0x1cc8, 0x1cd0), 'Cn')
, ((0x1cd0, 0x1cd3), 'Mn')
, ((0x1cd3, 0x1cd4), 'Po')
, ((0x1cd4, 0x1ce1), 'Mn')
, ((0x1ce1, 0x1ce2), 'Mc')
, ((0x1ce2, 0x1ce9), 'Mn')
, ((0x1ce9, 0x1ced), 'Lo')
, ((0x1ced, 0x1cee), 'Mn')
, ((0x1cee, 0x1cf4), 'Lo')
, ((0x1cf4, 0x1cf5), 'Mn')
, ((0x1cf5, 0x1cf7), 'Lo')
, ((0x1cf7, 0x1cf8), 'Mc')
, ((0x1cf8, 0x1cfa), 'Mn')
, ((0x1cfa, 0x1cfb), 'Lo')
, ((0x1cfb, 0x1d00), 'Cn')
, ((0x1d00, 0x1d2c), 'Ll')
, ((0x1d2c, 0x1d6b), 'Lm')
, ((0x1d6b, 0x1d78), 'Ll')
, ((0x1d78, 0x1d79), 'Lm')
, ((0x1d79, 0x1d9b), 'Ll')
, ((0x1d9b, 0x1dc0), 'Lm')
, ((0x1dc0, 0x1dfa), 'Mn')
, ((0x1dfa, 0x1dfb), 'Cn')
, ((0x1dfb, 0x1e00), 'Mn')
, ((0x1e00, 0x1e01), 'Lu')
, ((0x1e01, 0x1e02), 'Ll')
, ((0x1e02, 0x1e03), 'Lu')
, ((0x1e03, 0x1e04), 'Ll')
, ((0x1e04, 0x1e05), 'Lu')
, ((0x1e05, 0x1e06), 'Ll')
, ((0x1e06, 0x1e07), 'Lu')
, ((0x1e07, 0x1e08), 'Ll')
, ((0x1e08, 0x1e09), 'Lu')
, ((0x1e09, 0x1e0a), 'Ll')
, ((0x1e0a, 0x1e0b), 'Lu')
, ((0x1e0b, 0x1e0c), 'Ll')
, ((0x1e0c, 0x1e0d), 'Lu')
, ((0x1e0d, 0x1e0e), 'Ll')
, ((0x1e0e, 0x1e0f), 'Lu')
, ((0x1e0f, 0x1e10), 'Ll')
, ((0x1e10, 0x1e11), 'Lu')
, ((0x1e11, 0x1e12), 'Ll')
, ((0x1e12, 0x1e13), 'Lu')
, ((0x1e13, 0x1e14), 'Ll')
, ((0x1e14, 0x1e15), 'Lu')
, ((0x1e15, 0x1e16), 'Ll')
, ((0x1e16, 0x1e17), 'Lu')
, ((0x1e17, 0x1e18), 'Ll')
, ((0x1e18, 0x1e19), 'Lu')
, ((0x1e19, 0x1e1a), 'Ll')
, ((0x1e1a, 0x1e1b), 'Lu')
, ((0x1e1b, 0x1e1c), 'Ll')
, ((0x1e1c, 0x1e1d), 'Lu')
, ((0x1e1d, 0x1e1e), 'Ll')
, ((0x1e1e, 0x1e1f), 'Lu')
, ((0x1e1f, 0x1e20), 'Ll')
, ((0x1e20, 0x1e21), 'Lu')
, ((0x1e21, 0x1e22), 'Ll')
, ((0x1e22, 0x1e23), 'Lu')
, ((0x1e23, 0x1e24), 'Ll')
, ((0x1e24, 0x1e25), 'Lu')
, ((0x1e25, 0x1e26), 'Ll')
, ((0x1e26, 0x1e27), 'Lu')
, ((0x1e27, 0x1e28), 'Ll')
, ((0x1e28, 0x1e29), 'Lu')
, ((0x1e29, 0x1e2a), 'Ll')
, ((0x1e2a, 0x1e2b), 'Lu')
, ((0x1e2b, 0x1e2c), 'Ll')
, ((0x1e2c, 0x1e2d), 'Lu')
, ((0x1e2d, 0x1e2e), 'Ll')
, ((0x1e2e, 0x1e2f), 'Lu')
, ((0x1e2f, 0x1e30), 'Ll')
, ((0x1e30, 0x1e31), 'Lu')
, ((0x1e31, 0x1e32), 'Ll')
, ((0x1e32, 0x1e33), 'Lu')
, ((0x1e33, 0x1e34), 'Ll')
, ((0x1e34, 0x1e35), 'Lu')
, ((0x1e35, 0x1e36), 'Ll')
, ((0x1e36, 0x1e37), 'Lu')
, ((0x1e37, 0x1e38), 'Ll')
, ((0x1e38, 0x1e39), 'Lu')
, ((0x1e39, 0x1e3a), 'Ll')
, ((0x1e3a, 0x1e3b), 'Lu')
, ((0x1e3b, 0x1e3c), 'Ll')
, ((0x1e3c, 0x1e3d), 'Lu')
, ((0x1e3d, 0x1e3e), 'Ll')
, ((0x1e3e, 0x1e3f), 'Lu')
, ((0x1e3f, 0x1e40), 'Ll')
, ((0x1e40, 0x1e41), 'Lu')
, ((0x1e41, 0x1e42), 'Ll')
, ((0x1e42, 0x1e43), 'Lu')
, ((0x1e43, 0x1e44), 'Ll')
, ((0x1e44, 0x1e45), 'Lu')
, ((0x1e45, 0x1e46), 'Ll')
, ((0x1e46, 0x1e47), 'Lu')
, ((0x1e47, 0x1e48), 'Ll')
, ((0x1e48, 0x1e49), 'Lu')
, ((0x1e49, 0x1e4a), 'Ll')
, ((0x1e4a, 0x1e4b), 'Lu')
, ((0x1e4b, 0x1e4c), 'Ll')
, ((0x1e4c, 0x1e4d), 'Lu')
, ((0x1e4d, 0x1e4e), 'Ll')
, ((0x1e4e, 0x1e4f), 'Lu')
, ((0x1e4f, 0x1e50), 'Ll')
, ((0x1e50, 0x1e51), 'Lu')
, ((0x1e51, 0x1e52), 'Ll')
, ((0x1e52, 0x1e53), 'Lu')
, ((0x1e53, 0x1e54), 'Ll')
, ((0x1e54, 0x1e55), 'Lu')
, ((0x1e55, 0x1e56), 'Ll')
, ((0x1e56, 0x1e57), 'Lu')
, ((0x1e57, 0x1e58), 'Ll')
, ((0x1e58, 0x1e59), 'Lu')
, ((0x1e59, 0x1e5a), 'Ll')
, ((0x1e5a, 0x1e5b), 'Lu')
, ((0x1e5b, 0x1e5c), 'Ll')
, ((0x1e5c, 0x1e5d), 'Lu')
, ((0x1e5d, 0x1e5e), 'Ll')
, ((0x1e5e, 0x1e5f), 'Lu')
, ((0x1e5f, 0x1e60), 'Ll')
, ((0x1e60, 0x1e61), 'Lu')
, ((0x1e61, 0x1e62), 'Ll')
, ((0x1e62, 0x1e63), 'Lu')
, ((0x1e63, 0x1e64), 'Ll')
, ((0x1e64, 0x1e65), 'Lu')
, ((0x1e65, 0x1e66), 'Ll')
, ((0x1e66, 0x1e67), 'Lu')
, ((0x1e67, 0x1e68), 'Ll')
, ((0x1e68, 0x1e69), 'Lu')
, ((0x1e69, 0x1e6a), 'Ll')
, ((0x1e6a, 0x1e6b), 'Lu')
, ((0x1e6b, 0x1e6c), 'Ll')
, ((0x1e6c, 0x1e6d), 'Lu')
, ((0x1e6d, 0x1e6e), 'Ll')
, ((0x1e6e, 0x1e6f), 'Lu')
, ((0x1e6f, 0x1e70), 'Ll')
, ((0x1e70, 0x1e71), 'Lu')
, ((0x1e71, 0x1e72), 'Ll')
, ((0x1e72, 0x1e73), 'Lu')
, ((0x1e73, 0x1e74), 'Ll')
, ((0x1e74, 0x1e75), 'Lu')
, ((0x1e75, 0x1e76), 'Ll')
, ((0x1e76, 0x1e77), 'Lu')
, ((0x1e77, 0x1e78), 'Ll')
, ((0x1e78, 0x1e79), 'Lu')
, ((0x1e79, 0x1e7a), 'Ll')
, ((0x1e7a, 0x1e7b), 'Lu')
, ((0x1e7b, 0x1e7c), 'Ll')
, ((0x1e7c, 0x1e7d), 'Lu')
, ((0x1e7d, 0x1e7e), 'Ll')
, ((0x1e7e, 0x1e7f), 'Lu')
, ((0x1e7f, 0x1e80), 'Ll')
, ((0x1e80, 0x1e81), 'Lu')
, ((0x1e81, 0x1e82), 'Ll')
, ((0x1e82, 0x1e83), 'Lu')
, ((0x1e83, 0x1e84), 'Ll')
, ((0x1e84, 0x1e85), 'Lu')
, ((0x1e85, 0x1e86), 'Ll')
, ((0x1e86, 0x1e87), 'Lu')
, ((0x1e87, 0x1e88), 'Ll')
, ((0x1e88, 0x1e89), 'Lu')
, ((0x1e89, 0x1e8a), 'Ll')
, ((0x1e8a, 0x1e8b), 'Lu')
, ((0x1e8b, 0x1e8c), 'Ll')
, ((0x1e8c, 0x1e8d), 'Lu')
, ((0x1e8d, 0x1e8e), 'Ll')
, ((0x1e8e, 0x1e8f), 'Lu')
, ((0x1e8f, 0x1e90), 'Ll')
, ((0x1e90, 0x1e91), 'Lu')
, ((0x1e91, 0x1e92), 'Ll')
, ((0x1e92, 0x1e93), 'Lu')
, ((0x1e93, 0x1e94), 'Ll')
, ((0x1e94, 0x1e95), 'Lu')
, ((0x1e95, 0x1e9e), 'Ll')
, ((0x1e9e, 0x1e9f), 'Lu')
, ((0x1e9f, 0x1ea0), 'Ll')
, ((0x1ea0, 0x1ea1), 'Lu')
, ((0x1ea1, 0x1ea2), 'Ll')
, ((0x1ea2, 0x1ea3), 'Lu')
, ((0x1ea3, 0x1ea4), 'Ll')
, ((0x1ea4, 0x1ea5), 'Lu')
, ((0x1ea5, 0x1ea6), 'Ll')
, ((0x1ea6, 0x1ea7), 'Lu')
, ((0x1ea7, 0x1ea8), 'Ll')
, ((0x1ea8, 0x1ea9), 'Lu')
, ((0x1ea9, 0x1eaa), 'Ll')
, ((0x1eaa, 0x1eab), 'Lu')
, ((0x1eab, 0x1eac), 'Ll')
, ((0x1eac, 0x1ead), 'Lu')
, ((0x1ead, 0x1eae), 'Ll')
, ((0x1eae, 0x1eaf), 'Lu')
, ((0x1eaf, 0x1eb0), 'Ll')
, ((0x1eb0, 0x1eb1), 'Lu')
, ((0x1eb1, 0x1eb2), 'Ll')
, ((0x1eb2, 0x1eb3), 'Lu')
, ((0x1eb3, 0x1eb4), 'Ll')
, ((0x1eb4, 0x1eb5), 'Lu')
, ((0x1eb5, 0x1eb6), 'Ll')
, ((0x1eb6, 0x1eb7), 'Lu')
, ((0x1eb7, 0x1eb8), 'Ll')
, ((0x1eb8, 0x1eb9), 'Lu')
, ((0x1eb9, 0x1eba), 'Ll')
, ((0x1eba, 0x1ebb), 'Lu')
, ((0x1ebb, 0x1ebc), 'Ll')
, ((0x1ebc, 0x1ebd), 'Lu')
, ((0x1ebd, 0x1ebe), 'Ll')
, ((0x1ebe, 0x1ebf), 'Lu')
, ((0x1ebf, 0x1ec0), 'Ll')
, ((0x1ec0, 0x1ec1), 'Lu')
, ((0x1ec1, 0x1ec2), 'Ll')
, ((0x1ec2, 0x1ec3), 'Lu')
, ((0x1ec3, 0x1ec4), 'Ll')
, ((0x1ec4, 0x1ec5), 'Lu')
, ((0x1ec5, 0x1ec6), 'Ll')
, ((0x1ec6, 0x1ec7), 'Lu')
, ((0x1ec7, 0x1ec8), 'Ll')
, ((0x1ec8, 0x1ec9), 'Lu')
, ((0x1ec9, 0x1eca), 'Ll')
, ((0x1eca, 0x1ecb), 'Lu')
, ((0x1ecb, 0x1ecc), 'Ll')
, ((0x1ecc, 0x1ecd), 'Lu')
, ((0x1ecd, 0x1ece), 'Ll')
, ((0x1ece, 0x1ecf), 'Lu')
, ((0x1ecf, 0x1ed0), 'Ll')
, ((0x1ed0, 0x1ed1), 'Lu')
, ((0x1ed1, 0x1ed2), 'Ll')
, ((0x1ed2, 0x1ed3), 'Lu')
, ((0x1ed3, 0x1ed4), 'Ll')
, ((0x1ed4, 0x1ed5), 'Lu')
, ((0x1ed5, 0x1ed6), 'Ll')
, ((0x1ed6, 0x1ed7), 'Lu')
, ((0x1ed7, 0x1ed8), 'Ll')
, ((0x1ed8, 0x1ed9), 'Lu')
, ((0x1ed9, 0x1eda), 'Ll')
, ((0x1eda, 0x1edb), 'Lu')
, ((0x1edb, 0x1edc), 'Ll')
, ((0x1edc, 0x1edd), 'Lu')
, ((0x1edd, 0x1ede), 'Ll')
, ((0x1ede, 0x1edf), 'Lu')
, ((0x1edf, 0x1ee0), 'Ll')
, ((0x1ee0, 0x1ee1), 'Lu')
, ((0x1ee1, 0x1ee2), 'Ll')
, ((0x1ee2, 0x1ee3), 'Lu')
, ((0x1ee3, 0x1ee4), 'Ll')
, ((0x1ee4, 0x1ee5), 'Lu')
, ((0x1ee5, 0x1ee6), 'Ll')
, ((0x1ee6, 0x1ee7), 'Lu')
, ((0x1ee7, 0x1ee8), 'Ll')
, ((0x1ee8, 0x1ee9), 'Lu')
, ((0x1ee9, 0x1eea), 'Ll')
, ((0x1eea, 0x1eeb), 'Lu')
, ((0x1eeb, 0x1eec), 'Ll')
, ((0x1eec, 0x1eed), 'Lu')
, ((0x1eed, 0x1eee), 'Ll')
, ((0x1eee, 0x1eef), 'Lu')
, ((0x1eef, 0x1ef0), 'Ll')
, ((0x1ef0, 0x1ef1), 'Lu')
, ((0x1ef1, 0x1ef2), 'Ll')
, ((0x1ef2, 0x1ef3), 'Lu')
, ((0x1ef3, 0x1ef4), 'Ll')
, ((0x1ef4, 0x1ef5), 'Lu')
, ((0x1ef5, 0x1ef6), 'Ll')
, ((0x1ef6, 0x1ef7), 'Lu')
, ((0x1ef7, 0x1ef8), 'Ll')
, ((0x1ef8, 0x1ef9), 'Lu')
, ((0x1ef9, 0x1efa), 'Ll')
, ((0x1efa, 0x1efb), 'Lu')
, ((0x1efb, 0x1efc), 'Ll')
, ((0x1efc, 0x1efd), 'Lu')
, ((0x1efd, 0x1efe), 'Ll')
, ((0x1efe, 0x1eff), 'Lu')
, ((0x1eff, 0x1f08), 'Ll')
, ((0x1f08, 0x1f10), 'Lu')
, ((0x1f10, 0x1f16), 'Ll')
, ((0x1f16, 0x1f18), 'Cn')
, ((0x1f18, 0x1f1e), 'Lu')
, ((0x1f1e, 0x1f20), 'Cn')
, ((0x1f20, 0x1f28), 'Ll')
, ((0x1f28, 0x1f30), 'Lu')
, ((0x1f30, 0x1f38), 'Ll')
, ((0x1f38, 0x1f40), 'Lu')
, ((0x1f40, 0x1f46), 'Ll')
, ((0x1f46, 0x1f48), 'Cn')
, ((0x1f48, 0x1f4e), 'Lu')
, ((0x1f4e, 0x1f50), 'Cn')
, ((0x1f50, 0x1f58), 'Ll')
, ((0x1f58, 0x1f59), 'Cn')
, ((0x1f59, 0x1f5a), 'Lu')
, ((0x1f5a, 0x1f5b), 'Cn')
, ((0x1f5b, 0x1f5c), 'Lu')
, ((0x1f5c, 0x1f5d), 'Cn')
, ((0x1f5d, 0x1f5e), 'Lu')
, ((0x1f5e, 0x1f5f), 'Cn')
, ((0x1f5f, 0x1f60), 'Lu')
, ((0x1f60, 0x1f68), 'Ll')
, ((0x1f68, 0x1f70), 'Lu')
, ((0x1f70, 0x1f7e), 'Ll')
, ((0x1f7e, 0x1f80), 'Cn')
, ((0x1f80, 0x1f88), 'Ll')
, ((0x1f88, 0x1f90), 'Lt')
, ((0x1f90, 0x1f98), 'Ll')
, ((0x1f98, 0x1fa0), 'Lt')
, ((0x1fa0, 0x1fa8), 'Ll')
, ((0x1fa8, 0x1fb0), 'Lt')
, ((0x1fb0, 0x1fb5), 'Ll')
, ((0x1fb5, 0x1fb6), 'Cn')
, ((0x1fb6, 0x1fb8), 'Ll')
, ((0x1fb8, 0x1fbc), 'Lu')
, ((0x1fbc, 0x1fbd), 'Lt')
, ((0x1fbd, 0x1fbe), 'Sk')
, ((0x1fbe, 0x1fbf), 'Ll')
, ((0x1fbf, 0x1fc2), 'Sk')
, ((0x1fc2, 0x1fc5), 'Ll')
, ((0x1fc5, 0x1fc6), 'Cn')
, ((0x1fc6, 0x1fc8), 'Ll')
, ((0x1fc8, 0x1fcc), 'Lu')
, ((0x1fcc, 0x1fcd), 'Lt')
, ((0x1fcd, 0x1fd0), 'Sk')
, ((0x1fd0, 0x1fd4), 'Ll')
, ((0x1fd4, 0x1fd6), 'Cn')
, ((0x1fd6, 0x1fd8), 'Ll')
, ((0x1fd8, 0x1fdc), 'Lu')
, ((0x1fdc, 0x1fdd), 'Cn')
, ((0x1fdd, 0x1fe0), 'Sk')
, ((0x1fe0, 0x1fe8), 'Ll')
, ((0x1fe8, 0x1fed), 'Lu')
, ((0x1fed, 0x1ff0), 'Sk')
, ((0x1ff0, 0x1ff2), 'Cn')
, ((0x1ff2, 0x1ff5), 'Ll')
, ((0x1ff5, 0x1ff6), 'Cn')
, ((0x1ff6, 0x1ff8), 'Ll')
, ((0x1ff8, 0x1ffc), 'Lu')
, ((0x1ffc, 0x1ffd), 'Lt')
, ((0x1ffd, 0x1fff), 'Sk')
, ((0x1fff, 0x2000), 'Cn')
, ((0x2000, 0x200b), 'Zs')
, ((0x200b, 0x2010), 'Cf')
, ((0x2010, 0x2016), 'Pd')
, ((0x2016, 0x2018), 'Po')
, ((0x2018, 0x2019), 'Pi')
, ((0x2019, 0x201a), 'Pf')
, ((0x201a, 0x201b), 'Ps')
, ((0x201b, 0x201d), 'Pi')
, ((0x201d, 0x201e), 'Pf')
, ((0x201e, 0x201f), 'Ps')
, ((0x201f, 0x2020), 'Pi')
, ((0x2020, 0x2028), 'Po')
, ((0x2028, 0x2029), 'Zl')
, ((0x2029, 0x202a), 'Zp')
, ((0x202a, 0x202f), 'Cf')
, ((0x202f, 0x2030), 'Zs')
, ((0x2030, 0x2039), 'Po')
, ((0x2039, 0x203a), 'Pi')
, ((0x203a, 0x203b), 'Pf')
, ((0x203b, 0x203f), 'Po')
, ((0x203f, 0x2041), 'Pc')
, ((0x2041, 0x2044), 'Po')
, ((0x2044, 0x2045), 'Sm')
, ((0x2045, 0x2046), 'Ps')
, ((0x2046, 0x2047), 'Pe')
, ((0x2047, 0x2052), 'Po')
, ((0x2052, 0x2053), 'Sm')
, ((0x2053, 0x2054), 'Po')
, ((0x2054, 0x2055), 'Pc')
, ((0x2055, 0x205f), 'Po')
, ((0x205f, 0x2060), 'Zs')
, ((0x2060, 0x2065), 'Cf')
, ((0x2065, 0x2066), 'Cn')
, ((0x2066, 0x2070), 'Cf')
, ((0x2070, 0x2071), 'No')
, ((0x2071, 0x2072), 'Lm')
, ((0x2072, 0x2074), 'Cn')
, ((0x2074, 0x207a), 'No')
, ((0x207a, 0x207d), 'Sm')
, ((0x207d, 0x207e), 'Ps')
, ((0x207e, 0x207f), 'Pe')
, ((0x207f, 0x2080), 'Lm')
, ((0x2080, 0x208a), 'No')
, ((0x208a, 0x208d), 'Sm')
, ((0x208d, 0x208e), 'Ps')
, ((0x208e, 0x208f), 'Pe')
, ((0x208f, 0x2090), 'Cn')
, ((0x2090, 0x209d), 'Lm')
, ((0x209d, 0x20a0), 'Cn')
, ((0x20a0, 0x20c0), 'Sc')
, ((0x20c0, 0x20d0), 'Cn')
, ((0x20d0, 0x20dd), 'Mn')
, ((0x20dd, 0x20e1), 'Me')
, ((0x20e1, 0x20e2), 'Mn')
, ((0x20e2, 0x20e5), 'Me')
, ((0x20e5, 0x20f1), 'Mn')
, ((0x20f1, 0x2100), 'Cn')
, ((0x2100, 0x2102), 'So')
, ((0x2102, 0x2103), 'Lu')
, ((0x2103, 0x2107), 'So')
, ((0x2107, 0x2108), 'Lu')
, ((0x2108, 0x210a), 'So')
, ((0x210a, 0x210b), 'Ll')
, ((0x210b, 0x210e), 'Lu')
, ((0x210e, 0x2110), 'Ll')
, ((0x2110, 0x2113), 'Lu')
, ((0x2113, 0x2114), 'Ll')
, ((0x2114, 0x2115), 'So')
, ((0x2115, 0x2116), 'Lu')
, ((0x2116, 0x2118), 'So')
, ((0x2118, 0x2119), 'Sm')
, ((0x2119, 0x211e), 'Lu')
, ((0x211e, 0x2124), 'So')
, ((0x2124, 0x2125), 'Lu')
, ((0x2125, 0x2126), 'So')
, ((0x2126, 0x2127), 'Lu')
, ((0x2127, 0x2128), 'So')
, ((0x2128, 0x2129), 'Lu')
, ((0x2129, 0x212a), 'So')
, ((0x212a, 0x212e), 'Lu')
, ((0x212e, 0x212f), 'So')
, ((0x212f, 0x2130), 'Ll')
, ((0x2130, 0x2134), 'Lu')
, ((0x2134, 0x2135), 'Ll')
, ((0x2135, 0x2139), 'Lo')
, ((0x2139, 0x213a), 'Ll')
, ((0x213a, 0x213c), 'So')
, ((0x213c, 0x213e), 'Ll')
, ((0x213e, 0x2140), 'Lu')
, ((0x2140, 0x2145), 'Sm')
, ((0x2145, 0x2146), 'Lu')
, ((0x2146, 0x214a), 'Ll')
, ((0x214a, 0x214b), 'So')
, ((0x214b, 0x214c), 'Sm')
, ((0x214c, 0x214e), 'So')
, ((0x214e, 0x214f), 'Ll')
, ((0x214f, 0x2150), 'So')
, ((0x2150, 0x2160), 'No')
, ((0x2160, 0x2183), 'Nl')
, ((0x2183, 0x2184), 'Lu')
, ((0x2184, 0x2185), 'Ll')
, ((0x2185, 0x2189), 'Nl')
, ((0x2189, 0x218a), 'No')
, ((0x218a, 0x218c), 'So')
, ((0x218c, 0x2190), 'Cn')
, ((0x2190, 0x2195), 'Sm')
, ((0x2195, 0x219a), 'So')
, ((0x219a, 0x219c), 'Sm')
, ((0x219c, 0x21a0), 'So')
, ((0x21a0, 0x21a1), 'Sm')
, ((0x21a1, 0x21a3), 'So')
, ((0x21a3, 0x21a4), 'Sm')
, ((0x21a4, 0x21a6), 'So')
, ((0x21a6, 0x21a7), 'Sm')
, ((0x21a7, 0x21ae), 'So')
, ((0x21ae, 0x21af), 'Sm')
, ((0x21af, 0x21ce), 'So')
, ((0x21ce, 0x21d0), 'Sm')
, ((0x21d0, 0x21d2), 'So')
, ((0x21d2, 0x21d3), 'Sm')
, ((0x21d3, 0x21d4), 'So')
, ((0x21d4, 0x21d5), 'Sm')
, ((0x21d5, 0x21f4), 'So')
, ((0x21f4, 0x2300), 'Sm')
, ((0x2300, 0x2308), 'So')
, ((0x2308, 0x2309), 'Ps')
, ((0x2309, 0x230a), 'Pe')
, ((0x230a, 0x230b), 'Ps')
, ((0x230b, 0x230c), 'Pe')
, ((0x230c, 0x2320), 'So')
, ((0x2320, 0x2322), 'Sm')
, ((0x2322, 0x2329), 'So')
, ((0x2329, 0x232a), 'Ps')
, ((0x232a, 0x232b), 'Pe')
, ((0x232b, 0x237c), 'So')
, ((0x237c, 0x237d), 'Sm')
, ((0x237d, 0x239b), 'So')
, ((0x239b, 0x23b4), 'Sm')
, ((0x23b4, 0x23dc), 'So')
, ((0x23dc, 0x23e2), 'Sm')
, ((0x23e2, 0x2427), 'So')
, ((0x2427, 0x2440), 'Cn')
, ((0x2440, 0x244b), 'So')
, ((0x244b, 0x2460), 'Cn')
, ((0x2460, 0x249c), 'No')
, ((0x249c, 0x24ea), 'So')
, ((0x24ea, 0x2500), 'No')
, ((0x2500, 0x25b7), 'So')
, ((0x25b7, 0x25b8), 'Sm')
, ((0x25b8, 0x25c1), 'So')
, ((0x25c1, 0x25c2), 'Sm')
, ((0x25c2, 0x25f8), 'So')
, ((0x25f8, 0x2600), 'Sm')
, ((0x2600, 0x266f), 'So')
, ((0x266f, 0x2670), 'Sm')
, ((0x2670, 0x2768), 'So')
, ((0x2768, 0x2769), 'Ps')
, ((0x2769, 0x276a), 'Pe')
, ((0x276a, 0x276b), 'Ps')
, ((0x276b, 0x276c), 'Pe')
, ((0x276c, 0x276d), 'Ps')
, ((0x276d, 0x276e), 'Pe')
, ((0x276e, 0x276f), 'Ps')
, ((0x276f, 0x2770), 'Pe')
, ((0x2770, 0x2771), 'Ps')
, ((0x2771, 0x2772), 'Pe')
, ((0x2772, 0x2773), 'Ps')
, ((0x2773, 0x2774), 'Pe')
, ((0x2774, 0x2775), 'Ps')
, ((0x2775, 0x2776), 'Pe')
, ((0x2776, 0x2794), 'No')
, ((0x2794, 0x27c0), 'So')
, ((0x27c0, 0x27c5), 'Sm')
, ((0x27c5, 0x27c6), 'Ps')
, ((0x27c6, 0x27c7), 'Pe')
, ((0x27c7, 0x27e6), 'Sm')
, ((0x27e6, 0x27e7), 'Ps')
, ((0x27e7, 0x27e8), 'Pe')
, ((0x27e8, 0x27e9), 'Ps')
, ((0x27e9, 0x27ea), 'Pe')
, ((0x27ea, 0x27eb), 'Ps')
, ((0x27eb, 0x27ec), 'Pe')
, ((0x27ec, 0x27ed), 'Ps')
, ((0x27ed, 0x27ee), 'Pe')
, ((0x27ee, 0x27ef), 'Ps')
, ((0x27ef, 0x27f0), 'Pe')
, ((0x27f0, 0x2800), 'Sm')
, ((0x2800, 0x2900), 'So')
, ((0x2900, 0x2983), 'Sm')
, ((0x2983, 0x2984), 'Ps')
, ((0x2984, 0x2985), 'Pe')
, ((0x2985, 0x2986), 'Ps')
, ((0x2986, 0x2987), 'Pe')
, ((0x2987, 0x2988), 'Ps')
, ((0x2988, 0x2989), 'Pe')
, ((0x2989, 0x298a), 'Ps')
, ((0x298a, 0x298b), 'Pe')
, ((0x298b, 0x298c), 'Ps')
, ((0x298c, 0x298d), 'Pe')
, ((0x298d, 0x298e), 'Ps')
, ((0x298e, 0x298f), 'Pe')
, ((0x298f, 0x2990), 'Ps')
, ((0x2990, 0x2991), 'Pe')
, ((0x2991, 0x2992), 'Ps')
, ((0x2992, 0x2993), 'Pe')
, ((0x2993, 0x2994), 'Ps')
, ((0x2994, 0x2995), 'Pe')
, ((0x2995, 0x2996), 'Ps')
, ((0x2996, 0x2997), 'Pe')
, ((0x2997, 0x2998), 'Ps')
, ((0x2998, 0x2999), 'Pe')
, ((0x2999, 0x29d8), 'Sm')
, ((0x29d8, 0x29d9), 'Ps')
, ((0x29d9, 0x29da), 'Pe')
, ((0x29da, 0x29db), 'Ps')
, ((0x29db, 0x29dc), 'Pe')
, ((0x29dc, 0x29fc), 'Sm')
, ((0x29fc, 0x29fd), 'Ps')
, ((0x29fd, 0x29fe), 'Pe')
, ((0x29fe, 0x2b00), 'Sm')
, ((0x2b00, 0x2b30), 'So')
, ((0x2b30, 0x2b45), 'Sm')
, ((0x2b45, 0x2b47), 'So')
, ((0x2b47, 0x2b4d), 'Sm')
, ((0x2b4d, 0x2b74), 'So')
, ((0x2b74, 0x2b76), 'Cn')
, ((0x2b76, 0x2b96), 'So')
, ((0x2b96, 0x2b98), 'Cn')
, ((0x2b98, 0x2c00), 'So')
, ((0x2c00, 0x2c2f), 'Lu')
, ((0x2c2f, 0x2c30), 'Cn')
, ((0x2c30, 0x2c5f), 'Ll')
, ((0x2c5f, 0x2c60), 'Cn')
, ((0x2c60, 0x2c61), 'Lu')
, ((0x2c61, 0x2c62), 'Ll')
, ((0x2c62, 0x2c65), 'Lu')
, ((0x2c65, 0x2c67), 'Ll')
, ((0x2c67, 0x2c68), 'Lu')
, ((0x2c68, 0x2c69), 'Ll')
, ((0x2c69, 0x2c6a), 'Lu')
, ((0x2c6a, 0x2c6b), 'Ll')
, ((0x2c6b, 0x2c6c), 'Lu')
, ((0x2c6c, 0x2c6d), 'Ll')
, ((0x2c6d, 0x2c71), 'Lu')
, ((0x2c71, 0x2c72), 'Ll')
, ((0x2c72, 0x2c73), 'Lu')
, ((0x2c73, 0x2c75), 'Ll')
, ((0x2c75, 0x2c76), 'Lu')
, ((0x2c76, 0x2c7c), 'Ll')
, ((0x2c7c, 0x2c7e), 'Lm')
, ((0x2c7e, 0x2c81), 'Lu')
, ((0x2c81, 0x2c82), 'Ll')
, ((0x2c82, 0x2c83), 'Lu')
, ((0x2c83, 0x2c84), 'Ll')
, ((0x2c84, 0x2c85), 'Lu')
, ((0x2c85, 0x2c86), 'Ll')
, ((0x2c86, 0x2c87), 'Lu')
, ((0x2c87, 0x2c88), 'Ll')
, ((0x2c88, 0x2c89), 'Lu')
, ((0x2c89, 0x2c8a), 'Ll')
, ((0x2c8a, 0x2c8b), 'Lu')
, ((0x2c8b, 0x2c8c), 'Ll')
, ((0x2c8c, 0x2c8d), 'Lu')
, ((0x2c8d, 0x2c8e), 'Ll')
, ((0x2c8e, 0x2c8f), 'Lu')
, ((0x2c8f, 0x2c90), 'Ll')
, ((0x2c90, 0x2c91), 'Lu')
, ((0x2c91, 0x2c92), 'Ll')
, ((0x2c92, 0x2c93), 'Lu')
, ((0x2c93, 0x2c94), 'Ll')
, ((0x2c94, 0x2c95), 'Lu')
, ((0x2c95, 0x2c96), 'Ll')
, ((0x2c96, 0x2c97), 'Lu')
, ((0x2c97, 0x2c98), 'Ll')
, ((0x2c98, 0x2c99), 'Lu')
, ((0x2c99, 0x2c9a), 'Ll')
, ((0x2c9a, 0x2c9b), 'Lu')
, ((0x2c9b, 0x2c9c), 'Ll')
, ((0x2c9c, 0x2c9d), 'Lu')
, ((0x2c9d, 0x2c9e), 'Ll')
, ((0x2c9e, 0x2c9f), 'Lu')
, ((0x2c9f, 0x2ca0), 'Ll')
, ((0x2ca0, 0x2ca1), 'Lu')
, ((0x2ca1, 0x2ca2), 'Ll')
, ((0x2ca2, 0x2ca3), 'Lu')
, ((0x2ca3, 0x2ca4), 'Ll')
, ((0x2ca4, 0x2ca5), 'Lu')
, ((0x2ca5, 0x2ca6), 'Ll')
, ((0x2ca6, 0x2ca7), 'Lu')
, ((0x2ca7, 0x2ca8), 'Ll')
, ((0x2ca8, 0x2ca9), 'Lu')
, ((0x2ca9, 0x2caa), 'Ll')
, ((0x2caa, 0x2cab), 'Lu')
, ((0x2cab, 0x2cac), 'Ll')
, ((0x2cac, 0x2cad), 'Lu')
, ((0x2cad, 0x2cae), 'Ll')
, ((0x2cae, 0x2caf), 'Lu')
, ((0x2caf, 0x2cb0), 'Ll')
, ((0x2cb0, 0x2cb1), 'Lu')
, ((0x2cb1, 0x2cb2), 'Ll')
, ((0x2cb2, 0x2cb3), 'Lu')
, ((0x2cb3, 0x2cb4), 'Ll')
, ((0x2cb4, 0x2cb5), 'Lu')
, ((0x2cb5, 0x2cb6), 'Ll')
, ((0x2cb6, 0x2cb7), 'Lu')
, ((0x2cb7, 0x2cb8), 'Ll')
, ((0x2cb8, 0x2cb9), 'Lu')
, ((0x2cb9, 0x2cba), 'Ll')
, ((0x2cba, 0x2cbb), 'Lu')
, ((0x2cbb, 0x2cbc), 'Ll')
, ((0x2cbc, 0x2cbd), 'Lu')
, ((0x2cbd, 0x2cbe), 'Ll')
, ((0x2cbe, 0x2cbf), 'Lu')
, ((0x2cbf, 0x2cc0), 'Ll')
, ((0x2cc0, 0x2cc1), 'Lu')
, ((0x2cc1, 0x2cc2), 'Ll')
, ((0x2cc2, 0x2cc3), 'Lu')
, ((0x2cc3, 0x2cc4), 'Ll')
, ((0x2cc4, 0x2cc5), 'Lu')
, ((0x2cc5, 0x2cc6), 'Ll')
, ((0x2cc6, 0x2cc7), 'Lu')
, ((0x2cc7, 0x2cc8), 'Ll')
, ((0x2cc8, 0x2cc9), 'Lu')
, ((0x2cc9, 0x2cca), 'Ll')
, ((0x2cca, 0x2ccb), 'Lu')
, ((0x2ccb, 0x2ccc), 'Ll')
, ((0x2ccc, 0x2ccd), 'Lu')
, ((0x2ccd, 0x2cce), 'Ll')
, ((0x2cce, 0x2ccf), 'Lu')
, ((0x2ccf, 0x2cd0), 'Ll')
, ((0x2cd0, 0x2cd1), 'Lu')
, ((0x2cd1, 0x2cd2), 'Ll')
, ((0x2cd2, 0x2cd3), 'Lu')
, ((0x2cd3, 0x2cd4), 'Ll')
, ((0x2cd4, 0x2cd5), 'Lu')
, ((0x2cd5, 0x2cd6), 'Ll')
, ((0x2cd6, 0x2cd7), 'Lu')
, ((0x2cd7, 0x2cd8), 'Ll')
, ((0x2cd8, 0x2cd9), 'Lu')
, ((0x2cd9, 0x2cda), 'Ll')
, ((0x2cda, 0x2cdb), 'Lu')
, ((0x2cdb, 0x2cdc), 'Ll')
, ((0x2cdc, 0x2cdd), 'Lu')
, ((0x2cdd, 0x2cde), 'Ll')
, ((0x2cde, 0x2cdf), 'Lu')
, ((0x2cdf, 0x2ce0), 'Ll')
, ((0x2ce0, 0x2ce1), 'Lu')
, ((0x2ce1, 0x2ce2), 'Ll')
, ((0x2ce2, 0x2ce3), 'Lu')
, ((0x2ce3, 0x2ce5), 'Ll')
, ((0x2ce5, 0x2ceb), 'So')
, ((0x2ceb, 0x2cec), 'Lu')
, ((0x2cec, 0x2ced), 'Ll')
, ((0x2ced, 0x2cee), 'Lu')
, ((0x2cee, 0x2cef), 'Ll')
, ((0x2cef, 0x2cf2), 'Mn')
, ((0x2cf2, 0x2cf3), 'Lu')
, ((0x2cf3, 0x2cf4), 'Ll')
, ((0x2cf4, 0x2cf9), 'Cn')
, ((0x2cf9, 0x2cfd), 'Po')
, ((0x2cfd, 0x2cfe), 'No')
, ((0x2cfe, 0x2d00), 'Po')
, ((0x2d00, 0x2d26), 'Ll')
, ((0x2d26, 0x2d27), 'Cn')
, ((0x2d27, 0x2d28), 'Ll')
, ((0x2d28, 0x2d2d), 'Cn')
, ((0x2d2d, 0x2d2e), 'Ll')
, ((0x2d2e, 0x2d30), 'Cn')
, ((0x2d30, 0x2d68), 'Lo')
, ((0x2d68, 0x2d6f), 'Cn')
, ((0x2d6f, 0x2d70), 'Lm')
, ((0x2d70, 0x2d71), 'Po')
, ((0x2d71, 0x2d7f), 'Cn')
, ((0x2d7f, 0x2d80), 'Mn')
, ((0x2d80, 0x2d97), 'Lo')
, ((0x2d97, 0x2da0), 'Cn')
, ((0x2da0, 0x2da7), 'Lo')
, ((0x2da7, 0x2da8), 'Cn')
, ((0x2da8, 0x2daf), 'Lo')
, ((0x2daf, 0x2db0), 'Cn')
, ((0x2db0, 0x2db7), 'Lo')
, ((0x2db7, 0x2db8), 'Cn')
, ((0x2db8, 0x2dbf), 'Lo')
, ((0x2dbf, 0x2dc0), 'Cn')
, ((0x2dc0, 0x2dc7), 'Lo')
, ((0x2dc7, 0x2dc8), 'Cn')
, ((0x2dc8, 0x2dcf), 'Lo')
, ((0x2dcf, 0x2dd0), 'Cn')
, ((0x2dd0, 0x2dd7), 'Lo')
, ((0x2dd7, 0x2dd8), 'Cn')
, ((0x2dd8, 0x2ddf), 'Lo')
, ((0x2ddf, 0x2de0), 'Cn')
, ((0x2de0, 0x2e00), 'Mn')
, ((0x2e00, 0x2e02), 'Po')
, ((0x2e02, 0x2e03), 'Pi')
, ((0x2e03, 0x2e04), 'Pf')
, ((0x2e04, 0x2e05), 'Pi')
, ((0x2e05, 0x2e06), 'Pf')
, ((0x2e06, 0x2e09), 'Po')
, ((0x2e09, 0x2e0a), 'Pi')
, ((0x2e0a, 0x2e0b), 'Pf')
, ((0x2e0b, 0x2e0c), 'Po')
, ((0x2e0c, 0x2e0d), 'Pi')
, ((0x2e0d, 0x2e0e), 'Pf')
, ((0x2e0e, 0x2e17), 'Po')
, ((0x2e17, 0x2e18), 'Pd')
, ((0x2e18, 0x2e1a), 'Po')
, ((0x2e1a, 0x2e1b), 'Pd')
, ((0x2e1b, 0x2e1c), 'Po')
, ((0x2e1c, 0x2e1d), 'Pi')
, ((0x2e1d, 0x2e1e), 'Pf')
, ((0x2e1e, 0x2e20), 'Po')
, ((0x2e20, 0x2e21), 'Pi')
, ((0x2e21, 0x2e22), 'Pf')
, ((0x2e22, 0x2e23), 'Ps')
, ((0x2e23, 0x2e24), 'Pe')
, ((0x2e24, 0x2e25), 'Ps')
, ((0x2e25, 0x2e26), 'Pe')
, ((0x2e26, 0x2e27), 'Ps')
, ((0x2e27, 0x2e28), 'Pe')
, ((0x2e28, 0x2e29), 'Ps')
, ((0x2e29, 0x2e2a), 'Pe')
, ((0x2e2a, 0x2e2f), 'Po')
, ((0x2e2f, 0x2e30), 'Lm')
, ((0x2e30, 0x2e3a), 'Po')
, ((0x2e3a, 0x2e3c), 'Pd')
, ((0x2e3c, 0x2e40), 'Po')
, ((0x2e40, 0x2e41), 'Pd')
, ((0x2e41, 0x2e42), 'Po')
, ((0x2e42, 0x2e43), 'Ps')
, ((0x2e43, 0x2e50), 'Po')
, ((0x2e50, 0x2e80), 'Cn')
, ((0x2e80, 0x2e9a), 'So')
, ((0x2e9a, 0x2e9b), 'Cn')
, ((0x2e9b, 0x2ef4), 'So')
, ((0x2ef4, 0x2f00), 'Cn')
, ((0x2f00, 0x2fd6), 'So')
, ((0x2fd6, 0x2ff0), 'Cn')
, ((0x2ff0, 0x2ffc), 'So')
, ((0x2ffc, 0x3000), 'Cn')
, ((0x3000, 0x3001), 'Zs')
, ((0x3001, 0x3004), 'Po')
, ((0x3004, 0x3005), 'So')
, ((0x3005, 0x3006), 'Lm')
, ((0x3006, 0x3007), 'Lo')
, ((0x3007, 0x3008), 'Nl')
, ((0x3008, 0x3009), 'Ps')
, ((0x3009, 0x300a), 'Pe')
, ((0x300a, 0x300b), 'Ps')
, ((0x300b, 0x300c), 'Pe')
, ((0x300c, 0x300d), 'Ps')
, ((0x300d, 0x300e), 'Pe')
, ((0x300e, 0x300f), 'Ps')
, ((0x300f, 0x3010), 'Pe')
, ((0x3010, 0x3011), 'Ps')
, ((0x3011, 0x3012), 'Pe')
, ((0x3012, 0x3014), 'So')
, ((0x3014, 0x3015), 'Ps')
, ((0x3015, 0x3016), 'Pe')
, ((0x3016, 0x3017), 'Ps')
, ((0x3017, 0x3018), 'Pe')
, ((0x3018, 0x3019), 'Ps')
, ((0x3019, 0x301a), 'Pe')
, ((0x301a, 0x301b), 'Ps')
, ((0x301b, 0x301c), 'Pe')
, ((0x301c, 0x301d), 'Pd')
, ((0x301d, 0x301e), 'Ps')
, ((0x301e, 0x3020), 'Pe')
, ((0x3020, 0x3021), 'So')
, ((0x3021, 0x302a), 'Nl')
, ((0x302a, 0x302e), 'Mn')
, ((0x302e, 0x3030), 'Mc')
, ((0x3030, 0x3031), 'Pd')
, ((0x3031, 0x3036), 'Lm')
, ((0x3036, 0x3038), 'So')
, ((0x3038, 0x303b), 'Nl')
, ((0x303b, 0x303c), 'Lm')
, ((0x303c, 0x303d), 'Lo')
, ((0x303d, 0x303e), 'Po')
, ((0x303e, 0x3040), 'So')
, ((0x3040, 0x3041), 'Cn')
, ((0x3041, 0x3097), 'Lo')
, ((0x3097, 0x3099), 'Cn')
, ((0x3099, 0x309b), 'Mn')
, ((0x309b, 0x309d), 'Sk')
, ((0x309d, 0x309f), 'Lm')
, ((0x309f, 0x30a0), 'Lo')
, ((0x30a0, 0x30a1), 'Pd')
, ((0x30a1, 0x30fb), 'Lo')
, ((0x30fb, 0x30fc), 'Po')
, ((0x30fc, 0x30ff), 'Lm')
, ((0x30ff, 0x3100), 'Lo')
, ((0x3100, 0x3105), 'Cn')
, ((0x3105, 0x3130), 'Lo')
, ((0x3130, 0x3131), 'Cn')
, ((0x3131, 0x318f), 'Lo')
, ((0x318f, 0x3190), 'Cn')
, ((0x3190, 0x3192), 'So')
, ((0x3192, 0x3196), 'No')
, ((0x3196, 0x31a0), 'So')
, ((0x31a0, 0x31bb), 'Lo')
, ((0x31bb, 0x31c0), 'Cn')
, ((0x31c0, 0x31e4), 'So')
, ((0x31e4, 0x31f0), 'Cn')
, ((0x31f0, 0x3200), 'Lo')
, ((0x3200, 0x321f), 'So')
, ((0x321f, 0x3220), 'Cn')
, ((0x3220, 0x322a), 'No')
, ((0x322a, 0x3248), 'So')
, ((0x3248, 0x3250), 'No')
, ((0x3250, 0x3251), 'So')
, ((0x3251, 0x3260), 'No')
, ((0x3260, 0x3280), 'So')
, ((0x3280, 0x328a), 'No')
, ((0x328a, 0x32b1), 'So')
, ((0x32b1, 0x32c0), 'No')
, ((0x32c0, 0x3400), 'So')
, ((0x3400, 0x4db6), 'Lo')
, ((0x4db6, 0x4dc0), 'Cn')
, ((0x4dc0, 0x4e00), 'So')
, ((0x4e00, 0x9ff0), 'Lo')
, ((0x9ff0, 0xa000), 'Cn')
, ((0xa000, 0xa015), 'Lo')
, ((0xa015, 0xa016), 'Lm')
, ((0xa016, 0xa48d), 'Lo')
, ((0xa48d, 0xa490), 'Cn')
, ((0xa490, 0xa4c7), 'So')
, ((0xa4c7, 0xa4d0), 'Cn')
, ((0xa4d0, 0xa4f8), 'Lo')
, ((0xa4f8, 0xa4fe), 'Lm')
, ((0xa4fe, 0xa500), 'Po')
, ((0xa500, 0xa60c), 'Lo')
, ((0xa60c, 0xa60d), 'Lm')
, ((0xa60d, 0xa610), 'Po')
, ((0xa610, 0xa620), 'Lo')
, ((0xa620, 0xa62a), 'Nd')
, ((0xa62a, 0xa62c), 'Lo')
, ((0xa62c, 0xa640), 'Cn')
, ((0xa640, 0xa641), 'Lu')
, ((0xa641, 0xa642), 'Ll')
, ((0xa642, 0xa643), 'Lu')
, ((0xa643, 0xa644), 'Ll')
, ((0xa644, 0xa645), 'Lu')
, ((0xa645, 0xa646), 'Ll')
, ((0xa646, 0xa647), 'Lu')
, ((0xa647, 0xa648), 'Ll')
, ((0xa648, 0xa649), 'Lu')
, ((0xa649, 0xa64a), 'Ll')
, ((0xa64a, 0xa64b), 'Lu')
, ((0xa64b, 0xa64c), 'Ll')
, ((0xa64c, 0xa64d), 'Lu')
, ((0xa64d, 0xa64e), 'Ll')
, ((0xa64e, 0xa64f), 'Lu')
, ((0xa64f, 0xa650), 'Ll')
, ((0xa650, 0xa651), 'Lu')
, ((0xa651, 0xa652), 'Ll')
, ((0xa652, 0xa653), 'Lu')
, ((0xa653, 0xa654), 'Ll')
, ((0xa654, 0xa655), 'Lu')
, ((0xa655, 0xa656), 'Ll')
, ((0xa656, 0xa657), 'Lu')
, ((0xa657, 0xa658), 'Ll')
, ((0xa658, 0xa659), 'Lu')
, ((0xa659, 0xa65a), 'Ll')
, ((0xa65a, 0xa65b), 'Lu')
, ((0xa65b, 0xa65c), 'Ll')
, ((0xa65c, 0xa65d), 'Lu')
, ((0xa65d, 0xa65e), 'Ll')
, ((0xa65e, 0xa65f), 'Lu')
, ((0xa65f, 0xa660), 'Ll')
, ((0xa660, 0xa661), 'Lu')
, ((0xa661, 0xa662), 'Ll')
, ((0xa662, 0xa663), 'Lu')
, ((0xa663, 0xa664), 'Ll')
, ((0xa664, 0xa665), 'Lu')
, ((0xa665, 0xa666), 'Ll')
, ((0xa666, 0xa667), 'Lu')
, ((0xa667, 0xa668), 'Ll')
, ((0xa668, 0xa669), 'Lu')
, ((0xa669, 0xa66a), 'Ll')
, ((0xa66a, 0xa66b), 'Lu')
, ((0xa66b, 0xa66c), 'Ll')
, ((0xa66c, 0xa66d), 'Lu')
, ((0xa66d, 0xa66e), 'Ll')
, ((0xa66e, 0xa66f), 'Lo')
, ((0xa66f, 0xa670), 'Mn')
, ((0xa670, 0xa673), 'Me')
, ((0xa673, 0xa674), 'Po')
, ((0xa674, 0xa67e), 'Mn')
, ((0xa67e, 0xa67f), 'Po')
, ((0xa67f, 0xa680), 'Lm')
, ((0xa680, 0xa681), 'Lu')
, ((0xa681, 0xa682), 'Ll')
, ((0xa682, 0xa683), 'Lu')
, ((0xa683, 0xa684), 'Ll')
, ((0xa684, 0xa685), 'Lu')
, ((0xa685, 0xa686), 'Ll')
, ((0xa686, 0xa687), 'Lu')
, ((0xa687, 0xa688), 'Ll')
, ((0xa688, 0xa689), 'Lu')
, ((0xa689, 0xa68a), 'Ll')
, ((0xa68a, 0xa68b), 'Lu')
, ((0xa68b, 0xa68c), 'Ll')
, ((0xa68c, 0xa68d), 'Lu')
, ((0xa68d, 0xa68e), 'Ll')
, ((0xa68e, 0xa68f), 'Lu')
, ((0xa68f, 0xa690), 'Ll')
, ((0xa690, 0xa691), 'Lu')
, ((0xa691, 0xa692), 'Ll')
, ((0xa692, 0xa693), 'Lu')
, ((0xa693, 0xa694), 'Ll')
, ((0xa694, 0xa695), 'Lu')
, ((0xa695, 0xa696), 'Ll')
, ((0xa696, 0xa697), 'Lu')
, ((0xa697, 0xa698), 'Ll')
, ((0xa698, 0xa699), 'Lu')
, ((0xa699, 0xa69a), 'Ll')
, ((0xa69a, 0xa69b), 'Lu')
, ((0xa69b, 0xa69c), 'Ll')
, ((0xa69c, 0xa69e), 'Lm')
, ((0xa69e, 0xa6a0), 'Mn')
, ((0xa6a0, 0xa6e6), 'Lo')
, ((0xa6e6, 0xa6f0), 'Nl')
, ((0xa6f0, 0xa6f2), 'Mn')
, ((0xa6f2, 0xa6f8), 'Po')
, ((0xa6f8, 0xa700), 'Cn')
, ((0xa700, 0xa717), 'Sk')
, ((0xa717, 0xa720), 'Lm')
, ((0xa720, 0xa722), 'Sk')
, ((0xa722, 0xa723), 'Lu')
, ((0xa723, 0xa724), 'Ll')
, ((0xa724, 0xa725), 'Lu')
, ((0xa725, 0xa726), 'Ll')
, ((0xa726, 0xa727), 'Lu')
, ((0xa727, 0xa728), 'Ll')
, ((0xa728, 0xa729), 'Lu')
, ((0xa729, 0xa72a), 'Ll')
, ((0xa72a, 0xa72b), 'Lu')
, ((0xa72b, 0xa72c), 'Ll')
, ((0xa72c, 0xa72d), 'Lu')
, ((0xa72d, 0xa72e), 'Ll')
, ((0xa72e, 0xa72f), 'Lu')
, ((0xa72f, 0xa732), 'Ll')
, ((0xa732, 0xa733), 'Lu')
, ((0xa733, 0xa734), 'Ll')
, ((0xa734, 0xa735), 'Lu')
, ((0xa735, 0xa736), 'Ll')
, ((0xa736, 0xa737), 'Lu')
, ((0xa737, 0xa738), 'Ll')
, ((0xa738, 0xa739), 'Lu')
, ((0xa739, 0xa73a), 'Ll')
, ((0xa73a, 0xa73b), 'Lu')
, ((0xa73b, 0xa73c), 'Ll')
, ((0xa73c, 0xa73d), 'Lu')
, ((0xa73d, 0xa73e), 'Ll')
, ((0xa73e, 0xa73f), 'Lu')
, ((0xa73f, 0xa740), 'Ll')
, ((0xa740, 0xa741), 'Lu')
, ((0xa741, 0xa742), 'Ll')
, ((0xa742, 0xa743), 'Lu')
, ((0xa743, 0xa744), 'Ll')
, ((0xa744, 0xa745), 'Lu')
, ((0xa745, 0xa746), 'Ll')
, ((0xa746, 0xa747), 'Lu')
, ((0xa747, 0xa748), 'Ll')
, ((0xa748, 0xa749), 'Lu')
, ((0xa749, 0xa74a), 'Ll')
, ((0xa74a, 0xa74b), 'Lu')
, ((0xa74b, 0xa74c), 'Ll')
, ((0xa74c, 0xa74d), 'Lu')
, ((0xa74d, 0xa74e), 'Ll')
, ((0xa74e, 0xa74f), 'Lu')
, ((0xa74f, 0xa750), 'Ll')
, ((0xa750, 0xa751), 'Lu')
, ((0xa751, 0xa752), 'Ll')
, ((0xa752, 0xa753), 'Lu')
, ((0xa753, 0xa754), 'Ll')
, ((0xa754, 0xa755), 'Lu')
, ((0xa755, 0xa756), 'Ll')
, ((0xa756, 0xa757), 'Lu')
, ((0xa757, 0xa758), 'Ll')
, ((0xa758, 0xa759), 'Lu')
, ((0xa759, 0xa75a), 'Ll')
, ((0xa75a, 0xa75b), 'Lu')
, ((0xa75b, 0xa75c), 'Ll')
, ((0xa75c, 0xa75d), 'Lu')
, ((0xa75d, 0xa75e), 'Ll')
, ((0xa75e, 0xa75f), 'Lu')
, ((0xa75f, 0xa760), 'Ll')
, ((0xa760, 0xa761), 'Lu')
, ((0xa761, 0xa762), 'Ll')
, ((0xa762, 0xa763), 'Lu')
, ((0xa763, 0xa764), 'Ll')
, ((0xa764, 0xa765), 'Lu')
, ((0xa765, 0xa766), 'Ll')
, ((0xa766, 0xa767), 'Lu')
, ((0xa767, 0xa768), 'Ll')
, ((0xa768, 0xa769), 'Lu')
, ((0xa769, 0xa76a), 'Ll')
, ((0xa76a, 0xa76b), 'Lu')
, ((0xa76b, 0xa76c), 'Ll')
, ((0xa76c, 0xa76d), 'Lu')
, ((0xa76d, 0xa76e), 'Ll')
, ((0xa76e, 0xa76f), 'Lu')
, ((0xa76f, 0xa770), 'Ll')
, ((0xa770, 0xa771), 'Lm')
, ((0xa771, 0xa779), 'Ll')
, ((0xa779, 0xa77a), 'Lu')
, ((0xa77a, 0xa77b), 'Ll')
, ((0xa77b, 0xa77c), 'Lu')
, ((0xa77c, 0xa77d), 'Ll')
, ((0xa77d, 0xa77f), 'Lu')
, ((0xa77f, 0xa780), 'Ll')
, ((0xa780, 0xa781), 'Lu')
, ((0xa781, 0xa782), 'Ll')
, ((0xa782, 0xa783), 'Lu')
, ((0xa783, 0xa784), 'Ll')
, ((0xa784, 0xa785), 'Lu')
, ((0xa785, 0xa786), 'Ll')
, ((0xa786, 0xa787), 'Lu')
, ((0xa787, 0xa788), 'Ll')
, ((0xa788, 0xa789), 'Lm')
, ((0xa789, 0xa78b), 'Sk')
, ((0xa78b, 0xa78c), 'Lu')
, ((0xa78c, 0xa78d), 'Ll')
, ((0xa78d, 0xa78e), 'Lu')
, ((0xa78e, 0xa78f), 'Ll')
, ((0xa78f, 0xa790), 'Lo')
, ((0xa790, 0xa791), 'Lu')
, ((0xa791, 0xa792), 'Ll')
, ((0xa792, 0xa793), 'Lu')
, ((0xa793, 0xa796), 'Ll')
, ((0xa796, 0xa797), 'Lu')
, ((0xa797, 0xa798), 'Ll')
, ((0xa798, 0xa799), 'Lu')
, ((0xa799, 0xa79a), 'Ll')
, ((0xa79a, 0xa79b), 'Lu')
, ((0xa79b, 0xa79c), 'Ll')
, ((0xa79c, 0xa79d), 'Lu')
, ((0xa79d, 0xa79e), 'Ll')
, ((0xa79e, 0xa79f), 'Lu')
, ((0xa79f, 0xa7a0), 'Ll')
, ((0xa7a0, 0xa7a1), 'Lu')
, ((0xa7a1, 0xa7a2), 'Ll')
, ((0xa7a2, 0xa7a3), 'Lu')
, ((0xa7a3, 0xa7a4), 'Ll')
, ((0xa7a4, 0xa7a5), 'Lu')
, ((0xa7a5, 0xa7a6), 'Ll')
, ((0xa7a6, 0xa7a7), 'Lu')
, ((0xa7a7, 0xa7a8), 'Ll')
, ((0xa7a8, 0xa7a9), 'Lu')
, ((0xa7a9, 0xa7aa), 'Ll')
, ((0xa7aa, 0xa7af), 'Lu')
, ((0xa7af, 0xa7b0), 'Ll')
, ((0xa7b0, 0xa7b5), 'Lu')
, ((0xa7b5, 0xa7b6), 'Ll')
, ((0xa7b6, 0xa7b7), 'Lu')
, ((0xa7b7, 0xa7b8), 'Ll')
, ((0xa7b8, 0xa7b9), 'Lu')
, ((0xa7b9, 0xa7ba), 'Ll')
, ((0xa7ba, 0xa7bb), 'Lu')
, ((0xa7bb, 0xa7bc), 'Ll')
, ((0xa7bc, 0xa7bd), 'Lu')
, ((0xa7bd, 0xa7be), 'Ll')
, ((0xa7be, 0xa7bf), 'Lu')
, ((0xa7bf, 0xa7c0), 'Ll')
, ((0xa7c0, 0xa7c2), 'Cn')
, ((0xa7c2, 0xa7c3), 'Lu')
, ((0xa7c3, 0xa7c4), 'Ll')
, ((0xa7c4, 0xa7c7), 'Lu')
, ((0xa7c7, 0xa7f7), 'Cn')
, ((0xa7f7, 0xa7f8), 'Lo')
, ((0xa7f8, 0xa7fa), 'Lm')
, ((0xa7fa, 0xa7fb), 'Ll')
, ((0xa7fb, 0xa802), 'Lo')
, ((0xa802, 0xa803), 'Mn')
, ((0xa803, 0xa806), 'Lo')
, ((0xa806, 0xa807), 'Mn')
, ((0xa807, 0xa80b), 'Lo')
, ((0xa80b, 0xa80c), 'Mn')
, ((0xa80c, 0xa823), 'Lo')
, ((0xa823, 0xa825), 'Mc')
, ((0xa825, 0xa827), 'Mn')
, ((0xa827, 0xa828), 'Mc')
, ((0xa828, 0xa82c), 'So')
, ((0xa82c, 0xa830), 'Cn')
, ((0xa830, 0xa836), 'No')
, ((0xa836, 0xa838), 'So')
, ((0xa838, 0xa839), 'Sc')
, ((0xa839, 0xa83a), 'So')
, ((0xa83a, 0xa840), 'Cn')
, ((0xa840, 0xa874), 'Lo')
, ((0xa874, 0xa878), 'Po')
, ((0xa878, 0xa880), 'Cn')
, ((0xa880, 0xa882), 'Mc')
, ((0xa882, 0xa8b4), 'Lo')
, ((0xa8b4, 0xa8c4), 'Mc')
, ((0xa8c4, 0xa8c6), 'Mn')
, ((0xa8c6, 0xa8ce), 'Cn')
, ((0xa8ce, 0xa8d0), 'Po')
, ((0xa8d0, 0xa8da), 'Nd')
, ((0xa8da, 0xa8e0), 'Cn')
, ((0xa8e0, 0xa8f2), 'Mn')
, ((0xa8f2, 0xa8f8), 'Lo')
, ((0xa8f8, 0xa8fb), 'Po')
, ((0xa8fb, 0xa8fc), 'Lo')
, ((0xa8fc, 0xa8fd), 'Po')
, ((0xa8fd, 0xa8ff), 'Lo')
, ((0xa8ff, 0xa900), 'Mn')
, ((0xa900, 0xa90a), 'Nd')
, ((0xa90a, 0xa926), 'Lo')
, ((0xa926, 0xa92e), 'Mn')
, ((0xa92e, 0xa930), 'Po')
, ((0xa930, 0xa947), 'Lo')
, ((0xa947, 0xa952), 'Mn')
, ((0xa952, 0xa954), 'Mc')
, ((0xa954, 0xa95f), 'Cn')
, ((0xa95f, 0xa960), 'Po')
, ((0xa960, 0xa97d), 'Lo')
, ((0xa97d, 0xa980), 'Cn')
, ((0xa980, 0xa983), 'Mn')
, ((0xa983, 0xa984), 'Mc')
, ((0xa984, 0xa9b3), 'Lo')
, ((0xa9b3, 0xa9b4), 'Mn')
, ((0xa9b4, 0xa9b6), 'Mc')
, ((0xa9b6, 0xa9ba), 'Mn')
, ((0xa9ba, 0xa9bc), 'Mc')
, ((0xa9bc, 0xa9be), 'Mn')
, ((0xa9be, 0xa9c1), 'Mc')
, ((0xa9c1, 0xa9ce), 'Po')
, ((0xa9ce, 0xa9cf), 'Cn')
, ((0xa9cf, 0xa9d0), 'Lm')
, ((0xa9d0, 0xa9da), 'Nd')
, ((0xa9da, 0xa9de), 'Cn')
, ((0xa9de, 0xa9e0), 'Po')
, ((0xa9e0, 0xa9e5), 'Lo')
, ((0xa9e5, 0xa9e6), 'Mn')
, ((0xa9e6, 0xa9e7), 'Lm')
, ((0xa9e7, 0xa9f0), 'Lo')
, ((0xa9f0, 0xa9fa), 'Nd')
, ((0xa9fa, 0xa9ff), 'Lo')
, ((0xa9ff, 0xaa00), 'Cn')
, ((0xaa00, 0xaa29), 'Lo')
, ((0xaa29, 0xaa2f), 'Mn')
, ((0xaa2f, 0xaa31), 'Mc')
, ((0xaa31, 0xaa33), 'Mn')
, ((0xaa33, 0xaa35), 'Mc')
, ((0xaa35, 0xaa37), 'Mn')
, ((0xaa37, 0xaa40), 'Cn')
, ((0xaa40, 0xaa43), 'Lo')
, ((0xaa43, 0xaa44), 'Mn')
, ((0xaa44, 0xaa4c), 'Lo')
, ((0xaa4c, 0xaa4d), 'Mn')
, ((0xaa4d, 0xaa4e), 'Mc')
, ((0xaa4e, 0xaa50), 'Cn')
, ((0xaa50, 0xaa5a), 'Nd')
, ((0xaa5a, 0xaa5c), 'Cn')
, ((0xaa5c, 0xaa60), 'Po')
, ((0xaa60, 0xaa70), 'Lo')
, ((0xaa70, 0xaa71), 'Lm')
, ((0xaa71, 0xaa77), 'Lo')
, ((0xaa77, 0xaa7a), 'So')
, ((0xaa7a, 0xaa7b), 'Lo')
, ((0xaa7b, 0xaa7c), 'Mc')
, ((0xaa7c, 0xaa7d), 'Mn')
, ((0xaa7d, 0xaa7e), 'Mc')
, ((0xaa7e, 0xaab0), 'Lo')
, ((0xaab0, 0xaab1), 'Mn')
, ((0xaab1, 0xaab2), 'Lo')
, ((0xaab2, 0xaab5), 'Mn')
, ((0xaab5, 0xaab7), 'Lo')
, ((0xaab7, 0xaab9), 'Mn')
, ((0xaab9, 0xaabe), 'Lo')
, ((0xaabe, 0xaac0), 'Mn')
, ((0xaac0, 0xaac1), 'Lo')
, ((0xaac1, 0xaac2), 'Mn')
, ((0xaac2, 0xaac3), 'Lo')
, ((0xaac3, 0xaadb), 'Cn')
, ((0xaadb, 0xaadd), 'Lo')
, ((0xaadd, 0xaade), 'Lm')
, ((0xaade, 0xaae0), 'Po')
, ((0xaae0, 0xaaeb), 'Lo')
, ((0xaaeb, 0xaaec), 'Mc')
, ((0xaaec, 0xaaee), 'Mn')
, ((0xaaee, 0xaaf0), 'Mc')
, ((0xaaf0, 0xaaf2), 'Po')
, ((0xaaf2, 0xaaf3), 'Lo')
, ((0xaaf3, 0xaaf5), 'Lm')
, ((0xaaf5, 0xaaf6), 'Mc')
, ((0xaaf6, 0xaaf7), 'Mn')
, ((0xaaf7, 0xab01), 'Cn')
, ((0xab01, 0xab07), 'Lo')
, ((0xab07, 0xab09), 'Cn')
, ((0xab09, 0xab0f), 'Lo')
, ((0xab0f, 0xab11), 'Cn')
, ((0xab11, 0xab17), 'Lo')
, ((0xab17, 0xab20), 'Cn')
, ((0xab20, 0xab27), 'Lo')
, ((0xab27, 0xab28), 'Cn')
, ((0xab28, 0xab2f), 'Lo')
, ((0xab2f, 0xab30), 'Cn')
, ((0xab30, 0xab5b), 'Ll')
, ((0xab5b, 0xab5c), 'Sk')
, ((0xab5c, 0xab60), 'Lm')
, ((0xab60, 0xab68), 'Ll')
, ((0xab68, 0xab70), 'Cn')
, ((0xab70, 0xabc0), 'Ll')
, ((0xabc0, 0xabe3), 'Lo')
, ((0xabe3, 0xabe5), 'Mc')
, ((0xabe5, 0xabe6), 'Mn')
, ((0xabe6, 0xabe8), 'Mc')
, ((0xabe8, 0xabe9), 'Mn')
, ((0xabe9, 0xabeb), 'Mc')
, ((0xabeb, 0xabec), 'Po')
, ((0xabec, 0xabed), 'Mc')
, ((0xabed, 0xabee), 'Mn')
, ((0xabee, 0xabf0), 'Cn')
, ((0xabf0, 0xabfa), 'Nd')
, ((0xabfa, 0xac00), 'Cn')
, ((0xac00, 0xd7a4), 'Lo')
, ((0xd7a4, 0xd7b0), 'Cn')
, ((0xd7b0, 0xd7c7), 'Lo')
, ((0xd7c7, 0xd7cb), 'Cn')
, ((0xd7cb, 0xd7fc), 'Lo')
, ((0xd7fc, 0xd800), 'Cn')
, ((0xd800, 0xe000), 'Cs')
, ((0xe000, 0xf900), 'Co')
, ((0xf900, 0xfa6e), 'Lo')
, ((0xfa6e, 0xfa70), 'Cn')
, ((0xfa70, 0xfada), 'Lo')
, ((0xfada, 0xfb00), 'Cn')
, ((0xfb00, 0xfb07), 'Ll')
, ((0xfb07, 0xfb13), 'Cn')
, ((0xfb13, 0xfb18), 'Ll')
, ((0xfb18, 0xfb1d), 'Cn')
, ((0xfb1d, 0xfb1e), 'Lo')
, ((0xfb1e, 0xfb1f), 'Mn')
, ((0xfb1f, 0xfb29), 'Lo')
, ((0xfb29, 0xfb2a), 'Sm')
, ((0xfb2a, 0xfb37), 'Lo')
, ((0xfb37, 0xfb38), 'Cn')
, ((0xfb38, 0xfb3d), 'Lo')
, ((0xfb3d, 0xfb3e), 'Cn')
, ((0xfb3e, 0xfb3f), 'Lo')
, ((0xfb3f, 0xfb40), 'Cn')
, ((0xfb40, 0xfb42), 'Lo')
, ((0xfb42, 0xfb43), 'Cn')
, ((0xfb43, 0xfb45), 'Lo')
, ((0xfb45, 0xfb46), 'Cn')
, ((0xfb46, 0xfbb2), 'Lo')
, ((0xfbb2, 0xfbc2), 'Sk')
, ((0xfbc2, 0xfbd3), 'Cn')
, ((0xfbd3, 0xfd3e), 'Lo')
, ((0xfd3e, 0xfd3f), 'Pe')
, ((0xfd3f, 0xfd40), 'Ps')
, ((0xfd40, 0xfd50), 'Cn')
, ((0xfd50, 0xfd90), 'Lo')
, ((0xfd90, 0xfd92), 'Cn')
, ((0xfd92, 0xfdc8), 'Lo')
, ((0xfdc8, 0xfdf0), 'Cn')
, ((0xfdf0, 0xfdfc), 'Lo')
, ((0xfdfc, 0xfdfd), 'Sc')
, ((0xfdfd, 0xfdfe), 'So')
, ((0xfdfe, 0xfe00), 'Cn')
, ((0xfe00, 0xfe10), 'Mn')
, ((0xfe10, 0xfe17), 'Po')
, ((0xfe17, 0xfe18), 'Ps')
, ((0xfe18, 0xfe19), 'Pe')
, ((0xfe19, 0xfe1a), 'Po')
, ((0xfe1a, 0xfe20), 'Cn')
, ((0xfe20, 0xfe30), 'Mn')
, ((0xfe30, 0xfe31), 'Po')
, ((0xfe31, 0xfe33), 'Pd')
, ((0xfe33, 0xfe35), 'Pc')
, ((0xfe35, 0xfe36), 'Ps')
, ((0xfe36, 0xfe37), 'Pe')
, ((0xfe37, 0xfe38), 'Ps')
, ((0xfe38, 0xfe39), 'Pe')
, ((0xfe39, 0xfe3a), 'Ps')
, ((0xfe3a, 0xfe3b), 'Pe')
, ((0xfe3b, 0xfe3c), 'Ps')
, ((0xfe3c, 0xfe3d), 'Pe')
, ((0xfe3d, 0xfe3e), 'Ps')
, ((0xfe3e, 0xfe3f), 'Pe')
, ((0xfe3f, 0xfe40), 'Ps')
, ((0xfe40, 0xfe41), 'Pe')
, ((0xfe41, 0xfe42), 'Ps')
, ((0xfe42, 0xfe43), 'Pe')
, ((0xfe43, 0xfe44), 'Ps')
, ((0xfe44, 0xfe45), 'Pe')
, ((0xfe45, 0xfe47), 'Po')
, ((0xfe47, 0xfe48), 'Ps')
, ((0xfe48, 0xfe49), 'Pe')
, ((0xfe49, 0xfe4d), 'Po')
, ((0xfe4d, 0xfe50), 'Pc')
, ((0xfe50, 0xfe53), 'Po')
, ((0xfe53, 0xfe54), 'Cn')
, ((0xfe54, 0xfe58), 'Po')
, ((0xfe58, 0xfe59), 'Pd')
, ((0xfe59, 0xfe5a), 'Ps')
, ((0xfe5a, 0xfe5b), 'Pe')
, ((0xfe5b, 0xfe5c), 'Ps')
, ((0xfe5c, 0xfe5d), 'Pe')
, ((0xfe5d, 0xfe5e), 'Ps')
, ((0xfe5e, 0xfe5f), 'Pe')
, ((0xfe5f, 0xfe62), 'Po')
, ((0xfe62, 0xfe63), 'Sm')
, ((0xfe63, 0xfe64), 'Pd')
, ((0xfe64, 0xfe67), 'Sm')
, ((0xfe67, 0xfe68), 'Cn')
, ((0xfe68, 0xfe69), 'Po')
, ((0xfe69, 0xfe6a), 'Sc')
, ((0xfe6a, 0xfe6c), 'Po')
, ((0xfe6c, 0xfe70), 'Cn')
, ((0xfe70, 0xfe75), 'Lo')
, ((0xfe75, 0xfe76), 'Cn')
, ((0xfe76, 0xfefd), 'Lo')
, ((0xfefd, 0xfeff), 'Cn')
, ((0xfeff, 0xff00), 'Cf')
, ((0xff00, 0xff01), 'Cn')
, ((0xff01, 0xff04), 'Po')
, ((0xff04, 0xff05), 'Sc')
, ((0xff05, 0xff08), 'Po')
, ((0xff08, 0xff09), 'Ps')
, ((0xff09, 0xff0a), 'Pe')
, ((0xff0a, 0xff0b), 'Po')
, ((0xff0b, 0xff0c), 'Sm')
, ((0xff0c, 0xff0d), 'Po')
, ((0xff0d, 0xff0e), 'Pd')
, ((0xff0e, 0xff10), 'Po')
, ((0xff10, 0xff1a), 'Nd')
, ((0xff1a, 0xff1c), 'Po')
, ((0xff1c, 0xff1f), 'Sm')
, ((0xff1f, 0xff21), 'Po')
, ((0xff21, 0xff3b), 'Lu')
, ((0xff3b, 0xff3c), 'Ps')
, ((0xff3c, 0xff3d), 'Po')
, ((0xff3d, 0xff3e), 'Pe')
, ((0xff3e, 0xff3f), 'Sk')
, ((0xff3f, 0xff40), 'Pc')
, ((0xff40, 0xff41), 'Sk')
, ((0xff41, 0xff5b), 'Ll')
, ((0xff5b, 0xff5c), 'Ps')
, ((0xff5c, 0xff5d), 'Sm')
, ((0xff5d, 0xff5e), 'Pe')
, ((0xff5e, 0xff5f), 'Sm')
, ((0xff5f, 0xff60), 'Ps')
, ((0xff60, 0xff61), 'Pe')
, ((0xff61, 0xff62), 'Po')
, ((0xff62, 0xff63), 'Ps')
, ((0xff63, 0xff64), 'Pe')
, ((0xff64, 0xff66), 'Po')
, ((0xff66, 0xff70), 'Lo')
, ((0xff70, 0xff71), 'Lm')
, ((0xff71, 0xff9e), 'Lo')
, ((0xff9e, 0xffa0), 'Lm')
, ((0xffa0, 0xffbf), 'Lo')
, ((0xffbf, 0xffc2), 'Cn')
, ((0xffc2, 0xffc8), 'Lo')
, ((0xffc8, 0xffca), 'Cn')
, ((0xffca, 0xffd0), 'Lo')
, ((0xffd0, 0xffd2), 'Cn')
, ((0xffd2, 0xffd8), 'Lo')
, ((0xffd8, 0xffda), 'Cn')
, ((0xffda, 0xffdd), 'Lo')
, ((0xffdd, 0xffe0), 'Cn')
, ((0xffe0, 0xffe2), 'Sc')
, ((0xffe2, 0xffe3), 'Sm')
, ((0xffe3, 0xffe4), 'Sk')
, ((0xffe4, 0xffe5), 'So')
, ((0xffe5, 0xffe7), 'Sc')
, ((0xffe7, 0xffe8), 'Cn')
, ((0xffe8, 0xffe9), 'So')
, ((0xffe9, 0xffed), 'Sm')
, ((0xffed, 0xffef), 'So')
, ((0xffef, 0xfff9), 'Cn')
, ((0xfff9, 0xfffc), 'Cf')
, ((0xfffc, 0xfffe), 'So')
, ((0xfffe, 0x10000), 'Cn')
, ((0x10000, 0x1000c), 'Lo')
, ((0x1000c, 0x1000d), 'Cn')
, ((0x1000d, 0x10027), 'Lo')
, ((0x10027, 0x10028), 'Cn')
, ((0x10028, 0x1003b), 'Lo')
, ((0x1003b, 0x1003c), 'Cn')
, ((0x1003c, 0x1003e), 'Lo')
, ((0x1003e, 0x1003f), 'Cn')
, ((0x1003f, 0x1004e), 'Lo')
, ((0x1004e, 0x10050), 'Cn')
, ((0x10050, 0x1005e), 'Lo')
, ((0x1005e, 0x10080), 'Cn')
, ((0x10080, 0x100fb), 'Lo')
, ((0x100fb, 0x10100), 'Cn')
, ((0x10100, 0x10103), 'Po')
, ((0x10103, 0x10107), 'Cn')
, ((0x10107, 0x10134), 'No')
, ((0x10134, 0x10137), 'Cn')
, ((0x10137, 0x10140), 'So')
, ((0x10140, 0x10175), 'Nl')
, ((0x10175, 0x10179), 'No')
, ((0x10179, 0x1018a), 'So')
, ((0x1018a, 0x1018c), 'No')
, ((0x1018c, 0x1018f), 'So')
, ((0x1018f, 0x10190), 'Cn')
, ((0x10190, 0x1019c), 'So')
, ((0x1019c, 0x101a0), 'Cn')
, ((0x101a0, 0x101a1), 'So')
, ((0x101a1, 0x101d0), 'Cn')
, ((0x101d0, 0x101fd), 'So')
, ((0x101fd, 0x101fe), 'Mn')
, ((0x101fe, 0x10280), 'Cn')
, ((0x10280, 0x1029d), 'Lo')
, ((0x1029d, 0x102a0), 'Cn')
, ((0x102a0, 0x102d1), 'Lo')
, ((0x102d1, 0x102e0), 'Cn')
, ((0x102e0, 0x102e1), 'Mn')
, ((0x102e1, 0x102fc), 'No')
, ((0x102fc, 0x10300), 'Cn')
, ((0x10300, 0x10320), 'Lo')
, ((0x10320, 0x10324), 'No')
, ((0x10324, 0x1032d), 'Cn')
, ((0x1032d, 0x10341), 'Lo')
, ((0x10341, 0x10342), 'Nl')
, ((0x10342, 0x1034a), 'Lo')
, ((0x1034a, 0x1034b), 'Nl')
, ((0x1034b, 0x10350), 'Cn')
, ((0x10350, 0x10376), 'Lo')
, ((0x10376, 0x1037b), 'Mn')
, ((0x1037b, 0x10380), 'Cn')
, ((0x10380, 0x1039e), 'Lo')
, ((0x1039e, 0x1039f), 'Cn')
, ((0x1039f, 0x103a0), 'Po')
, ((0x103a0, 0x103c4), 'Lo')
, ((0x103c4, 0x103c8), 'Cn')
, ((0x103c8, 0x103d0), 'Lo')
, ((0x103d0, 0x103d1), 'Po')
, ((0x103d1, 0x103d6), 'Nl')
, ((0x103d6, 0x10400), 'Cn')
, ((0x10400, 0x10428), 'Lu')
, ((0x10428, 0x10450), 'Ll')
, ((0x10450, 0x1049e), 'Lo')
, ((0x1049e, 0x104a0), 'Cn')
, ((0x104a0, 0x104aa), 'Nd')
, ((0x104aa, 0x104b0), 'Cn')
, ((0x104b0, 0x104d4), 'Lu')
, ((0x104d4, 0x104d8), 'Cn')
, ((0x104d8, 0x104fc), 'Ll')
, ((0x104fc, 0x10500), 'Cn')
, ((0x10500, 0x10528), 'Lo')
, ((0x10528, 0x10530), 'Cn')
, ((0x10530, 0x10564), 'Lo')
, ((0x10564, 0x1056f), 'Cn')
, ((0x1056f, 0x10570), 'Po')
, ((0x10570, 0x10600), 'Cn')
, ((0x10600, 0x10737), 'Lo')
, ((0x10737, 0x10740), 'Cn')
, ((0x10740, 0x10756), 'Lo')
, ((0x10756, 0x10760), 'Cn')
, ((0x10760, 0x10768), 'Lo')
, ((0x10768, 0x10800), 'Cn')
, ((0x10800, 0x10806), 'Lo')
, ((0x10806, 0x10808), 'Cn')
, ((0x10808, 0x10809), 'Lo')
, ((0x10809, 0x1080a), 'Cn')
, ((0x1080a, 0x10836), 'Lo')
, ((0x10836, 0x10837), 'Cn')
, ((0x10837, 0x10839), 'Lo')
, ((0x10839, 0x1083c), 'Cn')
, ((0x1083c, 0x1083d), 'Lo')
, ((0x1083d, 0x1083f), 'Cn')
, ((0x1083f, 0x10856), 'Lo')
, ((0x10856, 0x10857), 'Cn')
, ((0x10857, 0x10858), 'Po')
, ((0x10858, 0x10860), 'No')
, ((0x10860, 0x10877), 'Lo')
, ((0x10877, 0x10879), 'So')
, ((0x10879, 0x10880), 'No')
, ((0x10880, 0x1089f), 'Lo')
, ((0x1089f, 0x108a7), 'Cn')
, ((0x108a7, 0x108b0), 'No')
, ((0x108b0, 0x108e0), 'Cn')
, ((0x108e0, 0x108f3), 'Lo')
, ((0x108f3, 0x108f4), 'Cn')
, ((0x108f4, 0x108f6), 'Lo')
, ((0x108f6, 0x108fb), 'Cn')
, ((0x108fb, 0x10900), 'No')
, ((0x10900, 0x10916), 'Lo')
, ((0x10916, 0x1091c), 'No')
, ((0x1091c, 0x1091f), 'Cn')
, ((0x1091f, 0x10920), 'Po')
, ((0x10920, 0x1093a), 'Lo')
, ((0x1093a, 0x1093f), 'Cn')
, ((0x1093f, 0x10940), 'Po')
, ((0x10940, 0x10980), 'Cn')
, ((0x10980, 0x109b8), 'Lo')
, ((0x109b8, 0x109bc), 'Cn')
, ((0x109bc, 0x109be), 'No')
, ((0x109be, 0x109c0), 'Lo')
, ((0x109c0, 0x109d0), 'No')
, ((0x109d0, 0x109d2), 'Cn')
, ((0x109d2, 0x10a00), 'No')
, ((0x10a00, 0x10a01), 'Lo')
, ((0x10a01, 0x10a04), 'Mn')
, ((0x10a04, 0x10a05), 'Cn')
, ((0x10a05, 0x10a07), 'Mn')
, ((0x10a07, 0x10a0c), 'Cn')
, ((0x10a0c, 0x10a10), 'Mn')
, ((0x10a10, 0x10a14), 'Lo')
, ((0x10a14, 0x10a15), 'Cn')
, ((0x10a15, 0x10a18), 'Lo')
, ((0x10a18, 0x10a19), 'Cn')
, ((0x10a19, 0x10a36), 'Lo')
, ((0x10a36, 0x10a38), 'Cn')
, ((0x10a38, 0x10a3b), 'Mn')
, ((0x10a3b, 0x10a3f), 'Cn')
, ((0x10a3f, 0x10a40), 'Mn')
, ((0x10a40, 0x10a49), 'No')
, ((0x10a49, 0x10a50), 'Cn')
, ((0x10a50, 0x10a59), 'Po')
, ((0x10a59, 0x10a60), 'Cn')
, ((0x10a60, 0x10a7d), 'Lo')
, ((0x10a7d, 0x10a7f), 'No')
, ((0x10a7f, 0x10a80), 'Po')
, ((0x10a80, 0x10a9d), 'Lo')
, ((0x10a9d, 0x10aa0), 'No')
, ((0x10aa0, 0x10ac0), 'Cn')
, ((0x10ac0, 0x10ac8), 'Lo')
, ((0x10ac8, 0x10ac9), 'So')
, ((0x10ac9, 0x10ae5), 'Lo')
, ((0x10ae5, 0x10ae7), 'Mn')
, ((0x10ae7, 0x10aeb), 'Cn')
, ((0x10aeb, 0x10af0), 'No')
, ((0x10af0, 0x10af7), 'Po')
, ((0x10af7, 0x10b00), 'Cn')
, ((0x10b00, 0x10b36), 'Lo')
, ((0x10b36, 0x10b39), 'Cn')
, ((0x10b39, 0x10b40), 'Po')
, ((0x10b40, 0x10b56), 'Lo')
, ((0x10b56, 0x10b58), 'Cn')
, ((0x10b58, 0x10b60), 'No')
, ((0x10b60, 0x10b73), 'Lo')
, ((0x10b73, 0x10b78), 'Cn')
, ((0x10b78, 0x10b80), 'No')
, ((0x10b80, 0x10b92), 'Lo')
, ((0x10b92, 0x10b99), 'Cn')
, ((0x10b99, 0x10b9d), 'Po')
, ((0x10b9d, 0x10ba9), 'Cn')
, ((0x10ba9, 0x10bb0), 'No')
, ((0x10bb0, 0x10c00), 'Cn')
, ((0x10c00, 0x10c49), 'Lo')
, ((0x10c49, 0x10c80), 'Cn')
, ((0x10c80, 0x10cb3), 'Lu')
, ((0x10cb3, 0x10cc0), 'Cn')
, ((0x10cc0, 0x10cf3), 'Ll')
, ((0x10cf3, 0x10cfa), 'Cn')
, ((0x10cfa, 0x10d00), 'No')
, ((0x10d00, 0x10d24), 'Lo')
, ((0x10d24, 0x10d28), 'Mn')
, ((0x10d28, 0x10d30), 'Cn')
, ((0x10d30, 0x10d3a), 'Nd')
, ((0x10d3a, 0x10e60), 'Cn')
, ((0x10e60, 0x10e7f), 'No')
, ((0x10e7f, 0x10f00), 'Cn')
, ((0x10f00, 0x10f1d), 'Lo')
, ((0x10f1d, 0x10f27), 'No')
, ((0x10f27, 0x10f28), 'Lo')
, ((0x10f28, 0x10f30), 'Cn')
, ((0x10f30, 0x10f46), 'Lo')
, ((0x10f46, 0x10f51), 'Mn')
, ((0x10f51, 0x10f55), 'No')
, ((0x10f55, 0x10f5a), 'Po')
, ((0x10f5a, 0x10fe0), 'Cn')
, ((0x10fe0, 0x10ff7), 'Lo')
, ((0x10ff7, 0x11000), 'Cn')
, ((0x11000, 0x11001), 'Mc')
, ((0x11001, 0x11002), 'Mn')
, ((0x11002, 0x11003), 'Mc')
, ((0x11003, 0x11038), 'Lo')
, ((0x11038, 0x11047), 'Mn')
, ((0x11047, 0x1104e), 'Po')
, ((0x1104e, 0x11052), 'Cn')
, ((0x11052, 0x11066), 'No')
, ((0x11066, 0x11070), 'Nd')
, ((0x11070, 0x1107f), 'Cn')
, ((0x1107f, 0x11082), 'Mn')
, ((0x11082, 0x11083), 'Mc')
, ((0x11083, 0x110b0), 'Lo')
, ((0x110b0, 0x110b3), 'Mc')
, ((0x110b3, 0x110b7), 'Mn')
, ((0x110b7, 0x110b9), 'Mc')
, ((0x110b9, 0x110bb), 'Mn')
, ((0x110bb, 0x110bd), 'Po')
, ((0x110bd, 0x110be), 'Cf')
, ((0x110be, 0x110c2), 'Po')
, ((0x110c2, 0x110cd), 'Cn')
, ((0x110cd, 0x110ce), 'Cf')
, ((0x110ce, 0x110d0), 'Cn')
, ((0x110d0, 0x110e9), 'Lo')
, ((0x110e9, 0x110f0), 'Cn')
, ((0x110f0, 0x110fa), 'Nd')
, ((0x110fa, 0x11100), 'Cn')
, ((0x11100, 0x11103), 'Mn')
, ((0x11103, 0x11127), 'Lo')
, ((0x11127, 0x1112c), 'Mn')
, ((0x1112c, 0x1112d), 'Mc')
, ((0x1112d, 0x11135), 'Mn')
, ((0x11135, 0x11136), 'Cn')
, ((0x11136, 0x11140), 'Nd')
, ((0x11140, 0x11144), 'Po')
, ((0x11144, 0x11145), 'Lo')
, ((0x11145, 0x11147), 'Mc')
, ((0x11147, 0x11150), 'Cn')
, ((0x11150, 0x11173), 'Lo')
, ((0x11173, 0x11174), 'Mn')
, ((0x11174, 0x11176), 'Po')
, ((0x11176, 0x11177), 'Lo')
, ((0x11177, 0x11180), 'Cn')
, ((0x11180, 0x11182), 'Mn')
, ((0x11182, 0x11183), 'Mc')
, ((0x11183, 0x111b3), 'Lo')
, ((0x111b3, 0x111b6), 'Mc')
, ((0x111b6, 0x111bf), 'Mn')
, ((0x111bf, 0x111c1), 'Mc')
, ((0x111c1, 0x111c5), 'Lo')
, ((0x111c5, 0x111c9), 'Po')
, ((0x111c9, 0x111cd), 'Mn')
, ((0x111cd, 0x111ce), 'Po')
, ((0x111ce, 0x111d0), 'Cn')
, ((0x111d0, 0x111da), 'Nd')
, ((0x111da, 0x111db), 'Lo')
, ((0x111db, 0x111dc), 'Po')
, ((0x111dc, 0x111dd), 'Lo')
, ((0x111dd, 0x111e0), 'Po')
, ((0x111e0, 0x111e1), 'Cn')
, ((0x111e1, 0x111f5), 'No')
, ((0x111f5, 0x11200), 'Cn')
, ((0x11200, 0x11212), 'Lo')
, ((0x11212, 0x11213), 'Cn')
, ((0x11213, 0x1122c), 'Lo')
, ((0x1122c, 0x1122f), 'Mc')
, ((0x1122f, 0x11232), 'Mn')
, ((0x11232, 0x11234), 'Mc')
, ((0x11234, 0x11235), 'Mn')
, ((0x11235, 0x11236), 'Mc')
, ((0x11236, 0x11238), 'Mn')
, ((0x11238, 0x1123e), 'Po')
, ((0x1123e, 0x1123f), 'Mn')
, ((0x1123f, 0x11280), 'Cn')
, ((0x11280, 0x11287), 'Lo')
, ((0x11287, 0x11288), 'Cn')
, ((0x11288, 0x11289), 'Lo')
, ((0x11289, 0x1128a), 'Cn')
, ((0x1128a, 0x1128e), 'Lo')
, ((0x1128e, 0x1128f), 'Cn')
, ((0x1128f, 0x1129e), 'Lo')
, ((0x1129e, 0x1129f), 'Cn')
, ((0x1129f, 0x112a9), 'Lo')
, ((0x112a9, 0x112aa), 'Po')
, ((0x112aa, 0x112b0), 'Cn')
, ((0x112b0, 0x112df), 'Lo')
, ((0x112df, 0x112e0), 'Mn')
, ((0x112e0, 0x112e3), 'Mc')
, ((0x112e3, 0x112eb), 'Mn')
, ((0x112eb, 0x112f0), 'Cn')
, ((0x112f0, 0x112fa), 'Nd')
, ((0x112fa, 0x11300), 'Cn')
, ((0x11300, 0x11302), 'Mn')
, ((0x11302, 0x11304), 'Mc')
, ((0x11304, 0x11305), 'Cn')
, ((0x11305, 0x1130d), 'Lo')
, ((0x1130d, 0x1130f), 'Cn')
, ((0x1130f, 0x11311), 'Lo')
, ((0x11311, 0x11313), 'Cn')
, ((0x11313, 0x11329), 'Lo')
, ((0x11329, 0x1132a), 'Cn')
, ((0x1132a, 0x11331), 'Lo')
, ((0x11331, 0x11332), 'Cn')
, ((0x11332, 0x11334), 'Lo')
, ((0x11334, 0x11335), 'Cn')
, ((0x11335, 0x1133a), 'Lo')
, ((0x1133a, 0x1133b), 'Cn')
, ((0x1133b, 0x1133d), 'Mn')
, ((0x1133d, 0x1133e), 'Lo')
, ((0x1133e, 0x11340), 'Mc')
, ((0x11340, 0x11341), 'Mn')
, ((0x11341, 0x11345), 'Mc')
, ((0x11345, 0x11347), 'Cn')
, ((0x11347, 0x11349), 'Mc')
, ((0x11349, 0x1134b), 'Cn')
, ((0x1134b, 0x1134e), 'Mc')
, ((0x1134e, 0x11350), 'Cn')
, ((0x11350, 0x11351), 'Lo')
, ((0x11351, 0x11357), 'Cn')
, ((0x11357, 0x11358), 'Mc')
, ((0x11358, 0x1135d), 'Cn')
, ((0x1135d, 0x11362), 'Lo')
, ((0x11362, 0x11364), 'Mc')
, ((0x11364, 0x11366), 'Cn')
, ((0x11366, 0x1136d), 'Mn')
, ((0x1136d, 0x11370), 'Cn')
, ((0x11370, 0x11375), 'Mn')
, ((0x11375, 0x11400), 'Cn')
, ((0x11400, 0x11435), 'Lo')
, ((0x11435, 0x11438), 'Mc')
, ((0x11438, 0x11440), 'Mn')
, ((0x11440, 0x11442), 'Mc')
, ((0x11442, 0x11445), 'Mn')
, ((0x11445, 0x11446), 'Mc')
, ((0x11446, 0x11447), 'Mn')
, ((0x11447, 0x1144b), 'Lo')
, ((0x1144b, 0x11450), 'Po')
, ((0x11450, 0x1145a), 'Nd')
, ((0x1145a, 0x1145b), 'Cn')
, ((0x1145b, 0x1145c), 'Po')
, ((0x1145c, 0x1145d), 'Cn')
, ((0x1145d, 0x1145e), 'Po')
, ((0x1145e, 0x1145f), 'Mn')
, ((0x1145f, 0x11460), 'Lo')
, ((0x11460, 0x11480), 'Cn')
, ((0x11480, 0x114b0), 'Lo')
, ((0x114b0, 0x114b3), 'Mc')
, ((0x114b3, 0x114b9), 'Mn')
, ((0x114b9, 0x114ba), 'Mc')
, ((0x114ba, 0x114bb), 'Mn')
, ((0x114bb, 0x114bf), 'Mc')
, ((0x114bf, 0x114c1), 'Mn')
, ((0x114c1, 0x114c2), 'Mc')
, ((0x114c2, 0x114c4), 'Mn')
, ((0x114c4, 0x114c6), 'Lo')
, ((0x114c6, 0x114c7), 'Po')
, ((0x114c7, 0x114c8), 'Lo')
, ((0x114c8, 0x114d0), 'Cn')
, ((0x114d0, 0x114da), 'Nd')
, ((0x114da, 0x11580), 'Cn')
, ((0x11580, 0x115af), 'Lo')
, ((0x115af, 0x115b2), 'Mc')
, ((0x115b2, 0x115b6), 'Mn')
, ((0x115b6, 0x115b8), 'Cn')
, ((0x115b8, 0x115bc), 'Mc')
, ((0x115bc, 0x115be), 'Mn')
, ((0x115be, 0x115bf), 'Mc')
, ((0x115bf, 0x115c1), 'Mn')
, ((0x115c1, 0x115d8), 'Po')
, ((0x115d8, 0x115dc), 'Lo')
, ((0x115dc, 0x115de), 'Mn')
, ((0x115de, 0x11600), 'Cn')
, ((0x11600, 0x11630), 'Lo')
, ((0x11630, 0x11633), 'Mc')
, ((0x11633, 0x1163b), 'Mn')
, ((0x1163b, 0x1163d), 'Mc')
, ((0x1163d, 0x1163e), 'Mn')
, ((0x1163e, 0x1163f), 'Mc')
, ((0x1163f, 0x11641), 'Mn')
, ((0x11641, 0x11644), 'Po')
, ((0x11644, 0x11645), 'Lo')
, ((0x11645, 0x11650), 'Cn')
, ((0x11650, 0x1165a), 'Nd')
, ((0x1165a, 0x11660), 'Cn')
, ((0x11660, 0x1166d), 'Po')
, ((0x1166d, 0x11680), 'Cn')
, ((0x11680, 0x116ab), 'Lo')
, ((0x116ab, 0x116ac), 'Mn')
, ((0x116ac, 0x116ad), 'Mc')
, ((0x116ad, 0x116ae), 'Mn')
, ((0x116ae, 0x116b0), 'Mc')
, ((0x116b0, 0x116b6), 'Mn')
, ((0x116b6, 0x116b7), 'Mc')
, ((0x116b7, 0x116b8), 'Mn')
, ((0x116b8, 0x116b9), 'Lo')
, ((0x116b9, 0x116c0), 'Cn')
, ((0x116c0, 0x116ca), 'Nd')
, ((0x116ca, 0x11700), 'Cn')
, ((0x11700, 0x1171b), 'Lo')
, ((0x1171b, 0x1171d), 'Cn')
, ((0x1171d, 0x11720), 'Mn')
, ((0x11720, 0x11722), 'Mc')
, ((0x11722, 0x11726), 'Mn')
, ((0x11726, 0x11727), 'Mc')
, ((0x11727, 0x1172c), 'Mn')
, ((0x1172c, 0x11730), 'Cn')
, ((0x11730, 0x1173a), 'Nd')
, ((0x1173a, 0x1173c), 'No')
, ((0x1173c, 0x1173f), 'Po')
, ((0x1173f, 0x11740), 'So')
, ((0x11740, 0x11800), 'Cn')
, ((0x11800, 0x1182c), 'Lo')
, ((0x1182c, 0x1182f), 'Mc')
, ((0x1182f, 0x11838), 'Mn')
, ((0x11838, 0x11839), 'Mc')
, ((0x11839, 0x1183b), 'Mn')
, ((0x1183b, 0x1183c), 'Po')
, ((0x1183c, 0x118a0), 'Cn')
, ((0x118a0, 0x118c0), 'Lu')
, ((0x118c0, 0x118e0), 'Ll')
, ((0x118e0, 0x118ea), 'Nd')
, ((0x118ea, 0x118f3), 'No')
, ((0x118f3, 0x118ff), 'Cn')
, ((0x118ff, 0x11900), 'Lo')
, ((0x11900, 0x119a0), 'Cn')
, ((0x119a0, 0x119a8), 'Lo')
, ((0x119a8, 0x119aa), 'Cn')
, ((0x119aa, 0x119d1), 'Lo')
, ((0x119d1, 0x119d4), 'Mc')
, ((0x119d4, 0x119d8), 'Mn')
, ((0x119d8, 0x119da), 'Cn')
, ((0x119da, 0x119dc), 'Mn')
, ((0x119dc, 0x119e0), 'Mc')
, ((0x119e0, 0x119e1), 'Mn')
, ((0x119e1, 0x119e2), 'Lo')
, ((0x119e2, 0x119e3), 'Po')
, ((0x119e3, 0x119e4), 'Lo')
, ((0x119e4, 0x119e5), 'Mc')
, ((0x119e5, 0x11a00), 'Cn')
, ((0x11a00, 0x11a01), 'Lo')
, ((0x11a01, 0x11a0b), 'Mn')
, ((0x11a0b, 0x11a33), 'Lo')
, ((0x11a33, 0x11a39), 'Mn')
, ((0x11a39, 0x11a3a), 'Mc')
, ((0x11a3a, 0x11a3b), 'Lo')
, ((0x11a3b, 0x11a3f), 'Mn')
, ((0x11a3f, 0x11a47), 'Po')
, ((0x11a47, 0x11a48), 'Mn')
, ((0x11a48, 0x11a50), 'Cn')
, ((0x11a50, 0x11a51), 'Lo')
, ((0x11a51, 0x11a57), 'Mn')
, ((0x11a57, 0x11a59), 'Mc')
, ((0x11a59, 0x11a5c), 'Mn')
, ((0x11a5c, 0x11a8a), 'Lo')
, ((0x11a8a, 0x11a97), 'Mn')
, ((0x11a97, 0x11a98), 'Mc')
, ((0x11a98, 0x11a9a), 'Mn')
, ((0x11a9a, 0x11a9d), 'Po')
, ((0x11a9d, 0x11a9e), 'Lo')
, ((0x11a9e, 0x11aa3), 'Po')
, ((0x11aa3, 0x11ac0), 'Cn')
, ((0x11ac0, 0x11af9), 'Lo')
, ((0x11af9, 0x11c00), 'Cn')
, ((0x11c00, 0x11c09), 'Lo')
, ((0x11c09, 0x11c0a), 'Cn')
, ((0x11c0a, 0x11c2f), 'Lo')
, ((0x11c2f, 0x11c30), 'Mc')
, ((0x11c30, 0x11c37), 'Mn')
, ((0x11c37, 0x11c38), 'Cn')
, ((0x11c38, 0x11c3e), 'Mn')
, ((0x11c3e, 0x11c3f), 'Mc')
, ((0x11c3f, 0x11c40), 'Mn')
, ((0x11c40, 0x11c41), 'Lo')
, ((0x11c41, 0x11c46), 'Po')
, ((0x11c46, 0x11c50), 'Cn')
, ((0x11c50, 0x11c5a), 'Nd')
, ((0x11c5a, 0x11c6d), 'No')
, ((0x11c6d, 0x11c70), 'Cn')
, ((0x11c70, 0x11c72), 'Po')
, ((0x11c72, 0x11c90), 'Lo')
, ((0x11c90, 0x11c92), 'Cn')
, ((0x11c92, 0x11ca8), 'Mn')
, ((0x11ca8, 0x11ca9), 'Cn')
, ((0x11ca9, 0x11caa), 'Mc')
, ((0x11caa, 0x11cb1), 'Mn')
, ((0x11cb1, 0x11cb2), 'Mc')
, ((0x11cb2, 0x11cb4), 'Mn')
, ((0x11cb4, 0x11cb5), 'Mc')
, ((0x11cb5, 0x11cb7), 'Mn')
, ((0x11cb7, 0x11d00), 'Cn')
, ((0x11d00, 0x11d07), 'Lo')
, ((0x11d07, 0x11d08), 'Cn')
, ((0x11d08, 0x11d0a), 'Lo')
, ((0x11d0a, 0x11d0b), 'Cn')
, ((0x11d0b, 0x11d31), 'Lo')
, ((0x11d31, 0x11d37), 'Mn')
, ((0x11d37, 0x11d3a), 'Cn')
, ((0x11d3a, 0x11d3b), 'Mn')
, ((0x11d3b, 0x11d3c), 'Cn')
, ((0x11d3c, 0x11d3e), 'Mn')
, ((0x11d3e, 0x11d3f), 'Cn')
, ((0x11d3f, 0x11d46), 'Mn')
, ((0x11d46, 0x11d47), 'Lo')
, ((0x11d47, 0x11d48), 'Mn')
, ((0x11d48, 0x11d50), 'Cn')
, ((0x11d50, 0x11d5a), 'Nd')
, ((0x11d5a, 0x11d60), 'Cn')
, ((0x11d60, 0x11d66), 'Lo')
, ((0x11d66, 0x11d67), 'Cn')
, ((0x11d67, 0x11d69), 'Lo')
, ((0x11d69, 0x11d6a), 'Cn')
, ((0x11d6a, 0x11d8a), 'Lo')
, ((0x11d8a, 0x11d8f), 'Mc')
, ((0x11d8f, 0x11d90), 'Cn')
, ((0x11d90, 0x11d92), 'Mn')
, ((0x11d92, 0x11d93), 'Cn')
, ((0x11d93, 0x11d95), 'Mc')
, ((0x11d95, 0x11d96), 'Mn')
, ((0x11d96, 0x11d97), 'Mc')
, ((0x11d97, 0x11d98), 'Mn')
, ((0x11d98, 0x11d99), 'Lo')
, ((0x11d99, 0x11da0), 'Cn')
, ((0x11da0, 0x11daa), 'Nd')
, ((0x11daa, 0x11ee0), 'Cn')
, ((0x11ee0, 0x11ef3), 'Lo')
, ((0x11ef3, 0x11ef5), 'Mn')
, ((0x11ef5, 0x11ef7), 'Mc')
, ((0x11ef7, 0x11ef9), 'Po')
, ((0x11ef9, 0x11fc0), 'Cn')
, ((0x11fc0, 0x11fd5), 'No')
, ((0x11fd5, 0x11fdd), 'So')
, ((0x11fdd, 0x11fe1), 'Sc')
, ((0x11fe1, 0x11ff2), 'So')
, ((0x11ff2, 0x11fff), 'Cn')
, ((0x11fff, 0x12000), 'Po')
, ((0x12000, 0x1239a), 'Lo')
, ((0x1239a, 0x12400), 'Cn')
, ((0x12400, 0x1246f), 'Nl')
, ((0x1246f, 0x12470), 'Cn')
, ((0x12470, 0x12475), 'Po')
, ((0x12475, 0x12480), 'Cn')
, ((0x12480, 0x12544), 'Lo')
, ((0x12544, 0x13000), 'Cn')
, ((0x13000, 0x1342f), 'Lo')
, ((0x1342f, 0x13430), 'Cn')
, ((0x13430, 0x13439), 'Cf')
, ((0x13439, 0x14400), 'Cn')
, ((0x14400, 0x14647), 'Lo')
, ((0x14647, 0x16800), 'Cn')
, ((0x16800, 0x16a39), 'Lo')
, ((0x16a39, 0x16a40), 'Cn')
, ((0x16a40, 0x16a5f), 'Lo')
, ((0x16a5f, 0x16a60), 'Cn')
, ((0x16a60, 0x16a6a), 'Nd')
, ((0x16a6a, 0x16a6e), 'Cn')
, ((0x16a6e, 0x16a70), 'Po')
, ((0x16a70, 0x16ad0), 'Cn')
, ((0x16ad0, 0x16aee), 'Lo')
, ((0x16aee, 0x16af0), 'Cn')
, ((0x16af0, 0x16af5), 'Mn')
, ((0x16af5, 0x16af6), 'Po')
, ((0x16af6, 0x16b00), 'Cn')
, ((0x16b00, 0x16b30), 'Lo')
, ((0x16b30, 0x16b37), 'Mn')
, ((0x16b37, 0x16b3c), 'Po')
, ((0x16b3c, 0x16b40), 'So')
, ((0x16b40, 0x16b44), 'Lm')
, ((0x16b44, 0x16b45), 'Po')
, ((0x16b45, 0x16b46), 'So')
, ((0x16b46, 0x16b50), 'Cn')
, ((0x16b50, 0x16b5a), 'Nd')
, ((0x16b5a, 0x16b5b), 'Cn')
, ((0x16b5b, 0x16b62), 'No')
, ((0x16b62, 0x16b63), 'Cn')
, ((0x16b63, 0x16b78), 'Lo')
, ((0x16b78, 0x16b7d), 'Cn')
, ((0x16b7d, 0x16b90), 'Lo')
, ((0x16b90, 0x16e40), 'Cn')
, ((0x16e40, 0x16e60), 'Lu')
, ((0x16e60, 0x16e80), 'Ll')
, ((0x16e80, 0x16e97), 'No')
, ((0x16e97, 0x16e9b), 'Po')
, ((0x16e9b, 0x16f00), 'Cn')
, ((0x16f00, 0x16f4b), 'Lo')
, ((0x16f4b, 0x16f4f), 'Cn')
, ((0x16f4f, 0x16f50), 'Mn')
, ((0x16f50, 0x16f51), 'Lo')
, ((0x16f51, 0x16f88), 'Mc')
, ((0x16f88, 0x16f8f), 'Cn')
, ((0x16f8f, 0x16f93), 'Mn')
, ((0x16f93, 0x16fa0), 'Lm')
, ((0x16fa0, 0x16fe0), 'Cn')
, ((0x16fe0, 0x16fe2), 'Lm')
, ((0x16fe2, 0x16fe3), 'Po')
, ((0x16fe3, 0x16fe4), 'Lm')
, ((0x16fe4, 0x17000), 'Cn')
, ((0x17000, 0x187f8), 'Lo')
, ((0x187f8, 0x18800), 'Cn')
, ((0x18800, 0x18af3), 'Lo')
, ((0x18af3, 0x1b000), 'Cn')
, ((0x1b000, 0x1b11f), 'Lo')
, ((0x1b11f, 0x1b150), 'Cn')
, ((0x1b150, 0x1b153), 'Lo')
, ((0x1b153, 0x1b164), 'Cn')
, ((0x1b164, 0x1b168), 'Lo')
, ((0x1b168, 0x1b170), 'Cn')
, ((0x1b170, 0x1b2fc), 'Lo')
, ((0x1b2fc, 0x1bc00), 'Cn')
, ((0x1bc00, 0x1bc6b), 'Lo')
, ((0x1bc6b, 0x1bc70), 'Cn')
, ((0x1bc70, 0x1bc7d), 'Lo')
, ((0x1bc7d, 0x1bc80), 'Cn')
, ((0x1bc80, 0x1bc89), 'Lo')
, ((0x1bc89, 0x1bc90), 'Cn')
, ((0x1bc90, 0x1bc9a), 'Lo')
, ((0x1bc9a, 0x1bc9c), 'Cn')
, ((0x1bc9c, 0x1bc9d), 'So')
, ((0x1bc9d, 0x1bc9f), 'Mn')
, ((0x1bc9f, 0x1bca0), 'Po')
, ((0x1bca0, 0x1bca4), 'Cf')
, ((0x1bca4, 0x1d000), 'Cn')
, ((0x1d000, 0x1d0f6), 'So')
, ((0x1d0f6, 0x1d100), 'Cn')
, ((0x1d100, 0x1d127), 'So')
, ((0x1d127, 0x1d129), 'Cn')
, ((0x1d129, 0x1d165), 'So')
, ((0x1d165, 0x1d167), 'Mc')
, ((0x1d167, 0x1d16a), 'Mn')
, ((0x1d16a, 0x1d16d), 'So')
, ((0x1d16d, 0x1d173), 'Mc')
, ((0x1d173, 0x1d17b), 'Cf')
, ((0x1d17b, 0x1d183), 'Mn')
, ((0x1d183, 0x1d185), 'So')
, ((0x1d185, 0x1d18c), 'Mn')
, ((0x1d18c, 0x1d1aa), 'So')
, ((0x1d1aa, 0x1d1ae), 'Mn')
, ((0x1d1ae, 0x1d1e9), 'So')
, ((0x1d1e9, 0x1d200), 'Cn')
, ((0x1d200, 0x1d242), 'So')
, ((0x1d242, 0x1d245), 'Mn')
, ((0x1d245, 0x1d246), 'So')
, ((0x1d246, 0x1d2e0), 'Cn')
, ((0x1d2e0, 0x1d2f4), 'No')
, ((0x1d2f4, 0x1d300), 'Cn')
, ((0x1d300, 0x1d357), 'So')
, ((0x1d357, 0x1d360), 'Cn')
, ((0x1d360, 0x1d379), 'No')
, ((0x1d379, 0x1d400), 'Cn')
, ((0x1d400, 0x1d41a), 'Lu')
, ((0x1d41a, 0x1d434), 'Ll')
, ((0x1d434, 0x1d44e), 'Lu')
, ((0x1d44e, 0x1d455), 'Ll')
, ((0x1d455, 0x1d456), 'Cn')
, ((0x1d456, 0x1d468), 'Ll')
, ((0x1d468, 0x1d482), 'Lu')
, ((0x1d482, 0x1d49c), 'Ll')
, ((0x1d49c, 0x1d49d), 'Lu')
, ((0x1d49d, 0x1d49e), 'Cn')
, ((0x1d49e, 0x1d4a0), 'Lu')
, ((0x1d4a0, 0x1d4a2), 'Cn')
, ((0x1d4a2, 0x1d4a3), 'Lu')
, ((0x1d4a3, 0x1d4a5), 'Cn')
, ((0x1d4a5, 0x1d4a7), 'Lu')
, ((0x1d4a7, 0x1d4a9), 'Cn')
, ((0x1d4a9, 0x1d4ad), 'Lu')
, ((0x1d4ad, 0x1d4ae), 'Cn')
, ((0x1d4ae, 0x1d4b6), 'Lu')
, ((0x1d4b6, 0x1d4ba), 'Ll')
, ((0x1d4ba, 0x1d4bb), 'Cn')
, ((0x1d4bb, 0x1d4bc), 'Ll')
, ((0x1d4bc, 0x1d4bd), 'Cn')
, ((0x1d4bd, 0x1d4c4), 'Ll')
, ((0x1d4c4, 0x1d4c5), 'Cn')
, ((0x1d4c5, 0x1d4d0), 'Ll')
, ((0x1d4d0, 0x1d4ea), 'Lu')
, ((0x1d4ea, 0x1d504), 'Ll')
, ((0x1d504, 0x1d506), 'Lu')
, ((0x1d506, 0x1d507), 'Cn')
, ((0x1d507, 0x1d50b), 'Lu')
, ((0x1d50b, 0x1d50d), 'Cn')
, ((0x1d50d, 0x1d515), 'Lu')
, ((0x1d515, 0x1d516), 'Cn')
, ((0x1d516, 0x1d51d), 'Lu')
, ((0x1d51d, 0x1d51e), 'Cn')
, ((0x1d51e, 0x1d538), 'Ll')
, ((0x1d538, 0x1d53a), 'Lu')
, ((0x1d53a, 0x1d53b), 'Cn')
, ((0x1d53b, 0x1d53f), 'Lu')
, ((0x1d53f, 0x1d540), 'Cn')
, ((0x1d540, 0x1d545), 'Lu')
, ((0x1d545, 0x1d546), 'Cn')
, ((0x1d546, 0x1d547), 'Lu')
, ((0x1d547, 0x1d54a), 'Cn')
, ((0x1d54a, 0x1d551), 'Lu')
, ((0x1d551, 0x1d552), 'Cn')
, ((0x1d552, 0x1d56c), 'Ll')
, ((0x1d56c, 0x1d586), 'Lu')
, ((0x1d586, 0x1d5a0), 'Ll')
, ((0x1d5a0, 0x1d5ba), 'Lu')
, ((0x1d5ba, 0x1d5d4), 'Ll')
, ((0x1d5d4, 0x1d5ee), 'Lu')
, ((0x1d5ee, 0x1d608), 'Ll')
, ((0x1d608, 0x1d622), 'Lu')
, ((0x1d622, 0x1d63c), 'Ll')
, ((0x1d63c, 0x1d656), 'Lu')
, ((0x1d656, 0x1d670), 'Ll')
, ((0x1d670, 0x1d68a), 'Lu')
, ((0x1d68a, 0x1d6a6), 'Ll')
, ((0x1d6a6, 0x1d6a8), 'Cn')
, ((0x1d6a8, 0x1d6c1), 'Lu')
, ((0x1d6c1, 0x1d6c2), 'Sm')
, ((0x1d6c2, 0x1d6db), 'Ll')
, ((0x1d6db, 0x1d6dc), 'Sm')
, ((0x1d6dc, 0x1d6e2), 'Ll')
, ((0x1d6e2, 0x1d6fb), 'Lu')
, ((0x1d6fb, 0x1d6fc), 'Sm')
, ((0x1d6fc, 0x1d715), 'Ll')
, ((0x1d715, 0x1d716), 'Sm')
, ((0x1d716, 0x1d71c), 'Ll')
, ((0x1d71c, 0x1d735), 'Lu')
, ((0x1d735, 0x1d736), 'Sm')
, ((0x1d736, 0x1d74f), 'Ll')
, ((0x1d74f, 0x1d750), 'Sm')
, ((0x1d750, 0x1d756), 'Ll')
, ((0x1d756, 0x1d76f), 'Lu')
, ((0x1d76f, 0x1d770), 'Sm')
, ((0x1d770, 0x1d789), 'Ll')
, ((0x1d789, 0x1d78a), 'Sm')
, ((0x1d78a, 0x1d790), 'Ll')
, ((0x1d790, 0x1d7a9), 'Lu')
, ((0x1d7a9, 0x1d7aa), 'Sm')
, ((0x1d7aa, 0x1d7c3), 'Ll')
, ((0x1d7c3, 0x1d7c4), 'Sm')
, ((0x1d7c4, 0x1d7ca), 'Ll')
, ((0x1d7ca, 0x1d7cb), 'Lu')
, ((0x1d7cb, 0x1d7cc), 'Ll')
, ((0x1d7cc, 0x1d7ce), 'Cn')
, ((0x1d7ce, 0x1d800), 'Nd')
, ((0x1d800, 0x1da00), 'So')
, ((0x1da00, 0x1da37), 'Mn')
, ((0x1da37, 0x1da3b), 'So')
, ((0x1da3b, 0x1da6d), 'Mn')
, ((0x1da6d, 0x1da75), 'So')
, ((0x1da75, 0x1da76), 'Mn')
, ((0x1da76, 0x1da84), 'So')
, ((0x1da84, 0x1da85), 'Mn')
, ((0x1da85, 0x1da87), 'So')
, ((0x1da87, 0x1da8c), 'Po')
, ((0x1da8c, 0x1da9b), 'Cn')
, ((0x1da9b, 0x1daa0), 'Mn')
, ((0x1daa0, 0x1daa1), 'Cn')
, ((0x1daa1, 0x1dab0), 'Mn')
, ((0x1dab0, 0x1e000), 'Cn')
, ((0x1e000, 0x1e007), 'Mn')
, ((0x1e007, 0x1e008), 'Cn')
, ((0x1e008, 0x1e019), 'Mn')
, ((0x1e019, 0x1e01b), 'Cn')
, ((0x1e01b, 0x1e022), 'Mn')
, ((0x1e022, 0x1e023), 'Cn')
, ((0x1e023, 0x1e025), 'Mn')
, ((0x1e025, 0x1e026), 'Cn')
, ((0x1e026, 0x1e02b), 'Mn')
, ((0x1e02b, 0x1e100), 'Cn')
, ((0x1e100, 0x1e12d), 'Lo')
, ((0x1e12d, 0x1e130), 'Cn')
, ((0x1e130, 0x1e137), 'Mn')
, ((0x1e137, 0x1e13e), 'Lm')
, ((0x1e13e, 0x1e140), 'Cn')
, ((0x1e140, 0x1e14a), 'Nd')
, ((0x1e14a, 0x1e14e), 'Cn')
, ((0x1e14e, 0x1e14f), 'Lo')
, ((0x1e14f, 0x1e150), 'So')
, ((0x1e150, 0x1e2c0), 'Cn')
, ((0x1e2c0, 0x1e2ec), 'Lo')
, ((0x1e2ec, 0x1e2f0), 'Mn')
, ((0x1e2f0, 0x1e2fa), 'Nd')
, ((0x1e2fa, 0x1e2ff), 'Cn')
, ((0x1e2ff, 0x1e300), 'Sc')
, ((0x1e300, 0x1e800), 'Cn')
, ((0x1e800, 0x1e8c5), 'Lo')
, ((0x1e8c5, 0x1e8c7), 'Cn')
, ((0x1e8c7, 0x1e8d0), 'No')
, ((0x1e8d0, 0x1e8d7), 'Mn')
, ((0x1e8d7, 0x1e900), 'Cn')
, ((0x1e900, 0x1e922), 'Lu')
, ((0x1e922, 0x1e944), 'Ll')
, ((0x1e944, 0x1e94b), 'Mn')
, ((0x1e94b, 0x1e94c), 'Lm')
, ((0x1e94c, 0x1e950), 'Cn')
, ((0x1e950, 0x1e95a), 'Nd')
, ((0x1e95a, 0x1e95e), 'Cn')
, ((0x1e95e, 0x1e960), 'Po')
, ((0x1e960, 0x1ec71), 'Cn')
, ((0x1ec71, 0x1ecac), 'No')
, ((0x1ecac, 0x1ecad), 'So')
, ((0x1ecad, 0x1ecb0), 'No')
, ((0x1ecb0, 0x1ecb1), 'Sc')
, ((0x1ecb1, 0x1ecb5), 'No')
, ((0x1ecb5, 0x1ed01), 'Cn')
, ((0x1ed01, 0x1ed2e), 'No')
, ((0x1ed2e, 0x1ed2f), 'So')
, ((0x1ed2f, 0x1ed3e), 'No')
, ((0x1ed3e, 0x1ee00), 'Cn')
, ((0x1ee00, 0x1ee04), 'Lo')
, ((0x1ee04, 0x1ee05), 'Cn')
, ((0x1ee05, 0x1ee20), 'Lo')
, ((0x1ee20, 0x1ee21), 'Cn')
, ((0x1ee21, 0x1ee23), 'Lo')
, ((0x1ee23, 0x1ee24), 'Cn')
, ((0x1ee24, 0x1ee25), 'Lo')
, ((0x1ee25, 0x1ee27), 'Cn')
, ((0x1ee27, 0x1ee28), 'Lo')
, ((0x1ee28, 0x1ee29), 'Cn')
, ((0x1ee29, 0x1ee33), 'Lo')
, ((0x1ee33, 0x1ee34), 'Cn')
, ((0x1ee34, 0x1ee38), 'Lo')
, ((0x1ee38, 0x1ee39), 'Cn')
, ((0x1ee39, 0x1ee3a), 'Lo')
, ((0x1ee3a, 0x1ee3b), 'Cn')
, ((0x1ee3b, 0x1ee3c), 'Lo')
, ((0x1ee3c, 0x1ee42), 'Cn')
, ((0x1ee42, 0x1ee43), 'Lo')
, ((0x1ee43, 0x1ee47), 'Cn')
, ((0x1ee47, 0x1ee48), 'Lo')
, ((0x1ee48, 0x1ee49), 'Cn')
, ((0x1ee49, 0x1ee4a), 'Lo')
, ((0x1ee4a, 0x1ee4b), 'Cn')
, ((0x1ee4b, 0x1ee4c), 'Lo')
, ((0x1ee4c, 0x1ee4d), 'Cn')
, ((0x1ee4d, 0x1ee50), 'Lo')
, ((0x1ee50, 0x1ee51), 'Cn')
, ((0x1ee51, 0x1ee53), 'Lo')
, ((0x1ee53, 0x1ee54), 'Cn')
, ((0x1ee54, 0x1ee55), 'Lo')
, ((0x1ee55, 0x1ee57), 'Cn')
, ((0x1ee57, 0x1ee58), 'Lo')
, ((0x1ee58, 0x1ee59), 'Cn')
, ((0x1ee59, 0x1ee5a), 'Lo')
, ((0x1ee5a, 0x1ee5b), 'Cn')
, ((0x1ee5b, 0x1ee5c), 'Lo')
, ((0x1ee5c, 0x1ee5d), 'Cn')
, ((0x1ee5d, 0x1ee5e), 'Lo')
, ((0x1ee5e, 0x1ee5f), 'Cn')
, ((0x1ee5f, 0x1ee60), 'Lo')
, ((0x1ee60, 0x1ee61), 'Cn')
, ((0x1ee61, 0x1ee63), 'Lo')
, ((0x1ee63, 0x1ee64), 'Cn')
, ((0x1ee64, 0x1ee65), 'Lo')
, ((0x1ee65, 0x1ee67), 'Cn')
, ((0x1ee67, 0x1ee6b), 'Lo')
, ((0x1ee6b, 0x1ee6c), 'Cn')
, ((0x1ee6c, 0x1ee73), 'Lo')
, ((0x1ee73, 0x1ee74), 'Cn')
, ((0x1ee74, 0x1ee78), 'Lo')
, ((0x1ee78, 0x1ee79), 'Cn')
, ((0x1ee79, 0x1ee7d), 'Lo')
, ((0x1ee7d, 0x1ee7e), 'Cn')
, ((0x1ee7e, 0x1ee7f), 'Lo')
, ((0x1ee7f, 0x1ee80), 'Cn')
, ((0x1ee80, 0x1ee8a), 'Lo')
, ((0x1ee8a, 0x1ee8b), 'Cn')
, ((0x1ee8b, 0x1ee9c), 'Lo')
, ((0x1ee9c, 0x1eea1), 'Cn')
, ((0x1eea1, 0x1eea4), 'Lo')
, ((0x1eea4, 0x1eea5), 'Cn')
, ((0x1eea5, 0x1eeaa), 'Lo')
, ((0x1eeaa, 0x1eeab), 'Cn')
, ((0x1eeab, 0x1eebc), 'Lo')
, ((0x1eebc, 0x1eef0), 'Cn')
, ((0x1eef0, 0x1eef2), 'Sm')
, ((0x1eef2, 0x1f000), 'Cn')
, ((0x1f000, 0x1f02c), 'So')
, ((0x1f02c, 0x1f030), 'Cn')
, ((0x1f030, 0x1f094), 'So')
, ((0x1f094, 0x1f0a0), 'Cn')
, ((0x1f0a0, 0x1f0af), 'So')
, ((0x1f0af, 0x1f0b1), 'Cn')
, ((0x1f0b1, 0x1f0c0), 'So')
, ((0x1f0c0, 0x1f0c1), 'Cn')
, ((0x1f0c1, 0x1f0d0), 'So')
, ((0x1f0d0, 0x1f0d1), 'Cn')
, ((0x1f0d1, 0x1f0f6), 'So')
, ((0x1f0f6, 0x1f100), 'Cn')
, ((0x1f100, 0x1f10d), 'No')
, ((0x1f10d, 0x1f110), 'Cn')
, ((0x1f110, 0x1f16d), 'So')
, ((0x1f16d, 0x1f170), 'Cn')
, ((0x1f170, 0x1f1ad), 'So')
, ((0x1f1ad, 0x1f1e6), 'Cn')
, ((0x1f1e6, 0x1f203), 'So')
, ((0x1f203, 0x1f210), 'Cn')
, ((0x1f210, 0x1f23c), 'So')
, ((0x1f23c, 0x1f240), 'Cn')
, ((0x1f240, 0x1f249), 'So')
, ((0x1f249, 0x1f250), 'Cn')
, ((0x1f250, 0x1f252), 'So')
, ((0x1f252, 0x1f260), 'Cn')
, ((0x1f260, 0x1f266), 'So')
, ((0x1f266, 0x1f300), 'Cn')
, ((0x1f300, 0x1f3fb), 'So')
, ((0x1f3fb, 0x1f400), 'Sk')
, ((0x1f400, 0x1f6d6), 'So')
, ((0x1f6d6, 0x1f6e0), 'Cn')
, ((0x1f6e0, 0x1f6ed), 'So')
, ((0x1f6ed, 0x1f6f0), 'Cn')
, ((0x1f6f0, 0x1f6fb), 'So')
, ((0x1f6fb, 0x1f700), 'Cn')
, ((0x1f700, 0x1f774), 'So')
, ((0x1f774, 0x1f780), 'Cn')
, ((0x1f780, 0x1f7d9), 'So')
, ((0x1f7d9, 0x1f7e0), 'Cn')
, ((0x1f7e0, 0x1f7ec), 'So')
, ((0x1f7ec, 0x1f800), 'Cn')
, ((0x1f800, 0x1f80c), 'So')
, ((0x1f80c, 0x1f810), 'Cn')
, ((0x1f810, 0x1f848), 'So')
, ((0x1f848, 0x1f850), 'Cn')
, ((0x1f850, 0x1f85a), 'So')
, ((0x1f85a, 0x1f860), 'Cn')
, ((0x1f860, 0x1f888), 'So')
, ((0x1f888, 0x1f890), 'Cn')
, ((0x1f890, 0x1f8ae), 'So')
, ((0x1f8ae, 0x1f900), 'Cn')
, ((0x1f900, 0x1f90c), 'So')
, ((0x1f90c, 0x1f90d), 'Cn')
, ((0x1f90d, 0x1f972), 'So')
, ((0x1f972, 0x1f973), 'Cn')
, ((0x1f973, 0x1f977), 'So')
, ((0x1f977, 0x1f97a), 'Cn')
, ((0x1f97a, 0x1f9a3), 'So')
, ((0x1f9a3, 0x1f9a5), 'Cn')
, ((0x1f9a5, 0x1f9ab), 'So')
, ((0x1f9ab, 0x1f9ae), 'Cn')
, ((0x1f9ae, 0x1f9cb), 'So')
, ((0x1f9cb, 0x1f9cd), 'Cn')
, ((0x1f9cd, 0x1fa54), 'So')
, ((0x1fa54, 0x1fa60), 'Cn')
, ((0x1fa60, 0x1fa6e), 'So')
, ((0x1fa6e, 0x1fa70), 'Cn')
, ((0x1fa70, 0x1fa74), 'So')
, ((0x1fa74, 0x1fa78), 'Cn')
, ((0x1fa78, 0x1fa7b), 'So')
, ((0x1fa7b, 0x1fa80), 'Cn')
, ((0x1fa80, 0x1fa83), 'So')
, ((0x1fa83, 0x1fa90), 'Cn')
, ((0x1fa90, 0x1fa96), 'So')
, ((0x1fa96, 0x20000), 'Cn')
, ((0x20000, 0x2a6d7), 'Lo')
, ((0x2a6d7, 0x2a700), 'Cn')
, ((0x2a700, 0x2b735), 'Lo')
, ((0x2b735, 0x2b740), 'Cn')
, ((0x2b740, 0x2b81e), 'Lo')
, ((0x2b81e, 0x2b820), 'Cn')
, ((0x2b820, 0x2cea2), 'Lo')
, ((0x2cea2, 0x2ceb0), 'Cn')
, ((0x2ceb0, 0x2ebe1), 'Lo')
, ((0x2ebe1, 0x2f800), 'Cn')
, ((0x2f800, 0x2fa1e), 'Lo')
, ((0x2fa1e, 0xe0001), 'Cn')
, ((0xe0001, 0xe0002), 'Cf')
, ((0xe0002, 0xe0020), 'Cn')
, ((0xe0020, 0xe0080), 'Cf')
, ((0xe0080, 0xe0100), 'Cn')
, ((0xe0100, 0xe01f0), 'Mn')
, ((0xe01f0, 0xf0000), 'Cn')
, ((0xf0000, 0xffffe), 'Co')
, ((0xffffe, 0x100000), 'Cn')
, ((0x100000, 0x10fffe), 'Co')
, ((0x10fffe, 0x110000), 'Cn')
])


