
e ../../txt_phone/lots/NOTE/unicode/note4UnicodeStandard_14_0_annex/unicode_ver14_0_UAX31_UAX38摘要.txt


[[[[[[[
UAX31
UAX38



UAX31
[[
file:///storage/emulated/0/0my_files/tmp/wget_/unicode/www.unicode.org/reports/tr31/tr31-35.html
Unicode® Standard Annex #31
Unicode Identifier and Pattern Syntax
Version 	Unicode 14.0.0

分类:
  #字集不再变:
    Pattern_Syntax Characters
    Pattern_White_Space Characters
  #字集可变:
    ID_Start Characters
      ++ from {ID_Nonstart Characters, Other Assigned Code Points, Unassigned Code Points}
    ID_Nonstart Characters
      ++ from {Other Assigned Code Points, Unassigned Code Points}
    Other Assigned Code Points
      ++ from {Unassigned Code Points}
    Unassigned Code Points

哪些字符集是推荐使用作『标识名』的？
Table 5. Recommended Scripts
Table 4. Excluded Scripts
  旧/弃用/体系还未清楚
]]

UAX38
[[[
file:///storage/emulated/0/0my_files/unicode/unicode14_0/www.unicode.org/reports/tr38/index.html

Unicode® Standard Annex #38
Unicode Han Database (Unihan)
Version 	Unicode 14.0.0


[[目录

文件名囗属性名
Property 	kDefinition
Property 	kFourCornerCode

Property 	kGradeLevel
Property 	kFrequency
Property 	kHanyuPinlu
Property 	kMandarin
Property 	kPhonetic

Property 	kPrimaryNumeric
Property 	kAccountingNumeric
Property 	kOtherNumeric

Property 	kRSUnicode
Property 	kRSKangXi
Property 	kTotalStrokes

Property 	kCompatibilityVariant
Property 	kSemanticVariant
Property 	kSpecializedSemanticVariant

Property 	kUnihanCore2020
Property 	kIICore
Property 	kStrange

[
3.6 Radical-Stroke Counts
3.7 Variants
3.7.1 Simplified and Traditional Chinese Variants
3.7.2 Semantic Variants
3.7.3 Spoofing Variants
]
]]


======================

[
文件名囗属性名
File Name 	Fields Within File
Unihan_DictionaryIndices.txt 	kCheungBauerIndex, kCowles, kDaeJaweon, kFennIndex, kGSR, kHanYu, kIRGDaeJaweon, kIRGDaiKanwaZiten, kIRGHanyuDaZidian, kIRGKangXi, kKangXi, kKarlgren, kLau, kMatthews, kMeyerWempe, kMorohashi, kNelson, kSBGY
Unihan_DictionaryLikeData.txt 	kCangjie, kCheungBauer, kCihaiT, kFenn, kFourCornerCode, kFrequency, kGradeLevel, kHDZRadBreak, kHKGlyph, kPhonetic, kStrange, kUnihanCore2020
Unihan_IRGSources.txt 	kCompatibilityVariant, kIICore, kIRG_GSource, kIRG_HSource, kIRG_JSource, kIRG_KPSource, kIRG_KSource, kIRG_MSource, kIRG_SSource, kIRG_TSource, kIRG_UKSource, kIRG_USource, kIRG_VSource, kRSUnicode, kTotalStrokes
Unihan_NumericValues.txt 	kAccountingNumeric, kOtherNumeric, kPrimaryNumeric
Unihan_OtherMappings.txt 	kBigFive, kCCCII, kCNS1986, kCNS1992, kEACC, kGB0, kGB1, kGB3, kGB5, kGB7, kGB8, kHKSCS, kIBMJapan, kJa, kJinmeiyoKanji, kJis0, kJis1, kJIS0213, kJoyoKanji, kKoreanEducationHanja, kKoreanName, kKPS0, kKPS1, kKSC0, kKSC1, kMainlandTelegraph, kPseudoGB1, kTaiwanTelegraph, kTGH, kXerox
Unihan_RadicalStrokeCounts.txt 	kRSAdobe_Japan1_6, kRSKangXi
Unihan_Readings.txt 	kCantonese, kDefinition, kHangul, kHanyuPinlu, kHanyuPinyin, kJapaneseKun, kJapaneseOn, kKorean, kMandarin, kTang, kTGHZ2013, kVietnamese, kXHC1983
Unihan_Variants.txt 	kSemanticVariant, kSimplifiedVariant, kSpecializedSemanticVariant, kSpoofingVariant, kTraditionalVariant, kZVariant

 
]

[[
[
Property 	kDefinition
Status 	Provisional
Category 	Readings
Introduced 	2.0
Delimiter 	N/A
Syntax 	[^\t"]+
Description 	An English definition for this character. Definitions are for modern written Chinese and are usually (but not always) the same as the definition in other Chinese dialects or non-Chinese languages. In some cases, synonyms are indicated. Fuller variant information can be found using the various variant fields.

Definitions specific to non-Chinese languages or Chinese dialects other than modern Mandarin are marked, for example, (Cant.) or (J).

Major definitions are separated by semicolons, and minor definitions by commas. Any valid Unicode character (except for tab, double-quote, and any line break character) may be used within the definition field.
]
[
Property 	kFourCornerCode
Status 	Provisional
Category 	Dictionary-like Data
Introduced 	5.0
Delimiter 	space
Syntax 	[0-9]{4}(\.[0-9])?
Description 	The four-corner code(s) for the character. This data is derived from data provided in the public domain by Hartmut Bohn, Urs App, and Christian Wittern.

The four-corner system assigns each character a four-digit code from 0 through 9. The digit is derived from the “shape” of the four corners of the character (upper-left, upper-right, lower-left, lower-right). An optional fifth digit can be used to further distinguish characters; the fifth digit is derived from the shape in the character’s center or region immediately to the left of the fourth corner.

The four-corner system is now used only rarely. Full descriptions are available online, for example, at http://en.wikipedia.org/wiki/Four_corner_input.

Values in this field consist of four decimal digits, optionally followed by a period and fifth digit for a five-digit form.
]
[
Property 	kGradeLevel
Status 	Provisional
Category 	Dictionary-like Data
Introduced 	3.2
Delimiter 	N/A
Syntax 	[1-6]
Description 	The primary grade in the Hong Kong school system by which a student is expected to know the character; this data is derived from 朗文初級中文詞典, Hong Kong: Longman, 2001.
]
[
Property 	kFrequency
Status 	Provisional
Category 	Dictionary-like Data
Introduced 	3.2
Delimiter 	N/A
Syntax 	[1-5]
Description 	A rough frequency measurement for the character based on analysis of traditional Chinese USENET postings; characters with a kFrequency of 1 are the most common, those with a kFrequency of 2 are less common, and so on, through a kFrequency of 5.
]
[
Property 	kHanyuPinlu
Status 	Provisional
Category 	Readings
Introduced 	4.0.1
Delimiter 	space
Syntax 	[a-z\x{300}-\x{302}\x{304}\x{308}\x{30C}]+\([0-9]+\)
Description 	The Pronunciations and Frequencies of this character, based in part on those appearing in 《現代漢語頻率詞典》 <Xiandai Hanyu Pinlu Cidian> (XDHYPLCD) [Modern Standard Beijing Chinese Frequency Dictionary] (complete bibliographic information below).

Data Format

This dataset contains a total of 3799 records. (The original data provided to Unihan 2003/02/04 contained a total of 3800 records, including 〇 [U+3007] líng ‘IDEOGRAPHIC NUMBER ZERO’, not included in Unihan since it is not a CJK UNIFIED IDEOGRAPH.)

Each entry is comprised of two pieces of data.

The Hanyu Pinyin (HYPY) pronunciation(s) of the character.

Immediately following the pronunciation, a numeric string appears in parentheses: for example, in “ā(392)” the numeric string “392” indicates the sum total of the frequencies of the pronunciations of the character as given in HYPLCD.

Where more than one pronunciation exists, these are sorted by descending frequency, and the list elements are “space” delimited.

Release Information

The XDHYPLCD data here for Modern Standard Chinese (Putonghua) cuts across 4 genres (“News,” “Scientific,” “Colloquial,” and “Literature”), and was derived from a 1,807,389 character corpus. See that text for additional information.

The 8548 entries (8586 with variant writings) from p. 491-656 of XDHYPLCD were input by hand and proof-read from 1994/08/04 to 1995/03/22 by Richard Cook.

Current Release Date above reflects date of last proofing.

HYPY transcription for the data in this release was semiautomated and hand-corrected in 1995, based in part on data provided by Ross Paterson (Department of Computing, Imperial College, London).

Tom Bishop http://www.wenlin.com is also due thanks for early assistance in proof-reading this data.

The character set used for this digitization of HYPLCD (a “simplified” mainland PRC text) was (Mac OS 7-9) GB/T 2312-1980 (plus 嗐).

These data were converted to Big5 (plus 腈), and both GB and Big5 versions were separately converted to Unicode 4.0, and then merged, resulting in the 3800 records in the original release. Frequency data for simplified polysyllabic words has been employed to generate both simplified and traditional character frequencies.

Bibliographic information for the primary print source

《現代漢語頻率詞典》，北京語言學院語言教學研究所編著。

<Xiandai Hanyu Pinlu Cidian> = XDHYPLCD First edition 1986/6, 2nd printing 1990/4. ISBN 7-5619-0094-5/H.67.
]
[
Property 	kMandarin
Status 	Informative
Category 	Readings
Introduced 	2.0
Delimiter 	space
Syntax 	[a-z\x{300}-\x{302}\x{304}\x{308}\x{30C}]+
Description 	The most customary pīnyīn reading for this character. When there are two values, then the first is preferred for zh-Hans (CN) and the second is preferred for zh-Hant (TW). When there is only one value, it is appropriate for both.

This field is targeted specifically for use by CLDR collation and transliteration. As such, it is subject to considerations that help keep pīnyīn-based Han collation (and its tailorings) and transliteration reasonably stable. The values may not in all cases track the preferred use in some dictionaries.
]
[
Property 	kPhonetic
Status 	Provisional
Category 	Dictionary-like Data
Introduced 	3.1
Delimiter 	space
Syntax 	[1-9][0-9]{0,3}[A-Dx]?[*+]?
Description 	The phonetic class for the character, as adopted from Ten Thousand Characters: An Analytic Dictionary, by G. Hugh Casey, S.J. Hong Kong: Kelly and Walsh, 1980.

Characters in the same phonetic class have a common phonetic element, such as 耕 (U+8015) and 阱 (U+9631), both assigned to the phonetic class 103. Most classes have a prototype character, which serves as the common phonetic element for the remaining members of the class. For example, 乍 (U+4E4D) is the prototype for characters of class 10.

Some classes are associated with one to four subsidiary classes, indicated by the letters A through D.

Some characters are assigned multiple classes. This can happen, for example, when a character belongs to one class but is also the prototype for a different class. For example, 國 (U+570B) is the prototype for class 748, but is also a member of class 1416, which has 或 (U+6216) as its prototype. Its kPhonetic value is therefore "748 1416."

Multiple values are always in ascending numerical order.

An asterisk is appended when a character has the given phonetic class but is not explicitly included in the character list for that class. For example, 蝓 (U+8753) belongs to the class 1611 but is not explicitly listed in that class. Its kPhonetic value is therefore "1611*".

Casey includes a radical-stroke index mapping characters to their phonetic class. In some cases, this mapping is in error; when this happens, a lowercase "x" is appended to the index. For example, 萑 (U+8411) is assigned to the classes 216 and 285, but the assignment to class 216 is clearly in error. Its kPhonetic value is therefore "216x 285". 
]
[
Property 	kPrimaryNumeric
Status 	Informative
Category 	Numeric Values
Introduced 	3.2
Delimiter 	space
Syntax 	[0-9]+
Description 	The value of the character when used in the writing of numbers in the standard fashion.

The three numeric-value fields should have no overlap; that is, characters with a kPrimaryNumeric value should not have a kAccountingNumeric or kOtherNumeric value as well.
]
[
Property 	kAccountingNumeric
Status 	Informative
Category 	Numeric Values
Introduced 	3.2
Delimiter 	space
Syntax 	[0-9]+
Description 	The value of the character when used in the writing of accounting numerals.

Accounting numerals are used in East Asia to prevent fraud. Because a number like ten (十) is easily turned into one thousand (千) with a stroke of a brush, monetary documents will often use an accounting form of the numeral ten (such as 拾) in their place.

The three numeric-value fields should have no overlap; that is, characters with a kAccountingNumeric value should not have a kPrimaryNumeric or kOtherNumeric value as well.
]
[
Property 	kOtherNumeric
Status 	Informative
Category 	Numeric Values
Introduced 	3.2
Delimiter 	space
Syntax 	[0-9]+
Description 	The numeric value for the character in certain unusual, specialized contexts.

The three numeric-value fields should have no overlap; that is, characters with a kOtherNumeric value should not have a kAccountingNumeric or kPrimaryNumeric value as well.
]
[
Property 	kRSUnicode
Status 	Informative
Category 	IRG Sources
Introduced 	2.0
Delimiter 	space
Syntax 	[1-9][0-9]{0,2}\'?\.-?[0-9]{1,2}
Description 	The standard radical-stroke count for this character in the form “radical.additional strokes”. The radical is indicated by a number in the range (1..214) inclusive. An apostrophe (') after the radical indicates a simplified version of the given radical. The “additional strokes” value is the residual stroke-count, the count of all strokes remaining after eliminating all strokes associated with the radical.

This field is also used for additional radical-stroke indices where either a character may be reasonably classified under more than one radical, or alternate stroke count algorithms may provide different stroke counts.

The residual stroke count may be negative. This is because some characters (for example, U+225A9, U+29C0A) are constructed by removing strokes from a standard radical.
]
[
Property 	kRSKangXi
Status 	Provisional
Category 	Radical-Stroke Counts
Introduced 	2.0
Delimiter 	space
Syntax 	[1-9][0-9]{0,2}\.-?[0-9]{1,2}
Description 	The Kangxi radical-stroke count for this character consistent with the value of the kKangXi field in the form “radical.additional strokes”.
]
[
Property 	kTotalStrokes
Status 	Informative
Category 	IRG Sources
Introduced 	3.1
Delimiter 	space
Syntax 	[1-9][0-9]{0,2}
Description 	The total number of strokes in the character (including the radical). When there are two values, then the first is preferred for zh-Hans (CN) and the second is preferred for zh-Hant (TW). When there is only one value, it is appropriate for both.

The preferred value is the one most commonly associated with the character in modern text using customary fonts.

This field is targeted specifically for use by CLDR collation and transliteration. As such, it is subject to considerations that help keep pīnyīn-based Han collation (and its tailorings) and transliteration reasonably stable.
]
[
Property 	kCompatibilityVariant
Status 	Normative
Category 	IRG Sources
Introduced 	3.2
Delimiter 	N/A
Syntax 	U\+[23]?[0-9A-F]{4}
Description 	The canonical Decomposition_Mapping value for the ideograph, derived from UnicodeData.txt. This field is derived by taking the non-null Decomposition_Mapping values from Field 5 of UnicodeData.txt, for characters contained within the CJK Compatibility Ideographs block and the CJK Compatibility Ideographs Supplement block.
]
[
Property 	kSemanticVariant
Status 	Provisional
Category 	Variants
Introduced 	2.0
Delimiter 	space
Syntax 	U\+[23]?[0-9A-F]{4}(<k[A-Za-z0-9]+(:[TBZFJ]+)?(,k[A-Za-z0-9]+(:[TBZFJ]+)?)*)?
Description 	The Unicode value for a semantic variant for this character. A semantic variant is an x- or y-variant with similar or identical meaning which can generally be used in place of the indicated character.

The basic syntax is a Unicode scalar value. It may optionally be followed by additional data. The additional data is separated from the Unicode scalar value by a less-than sign (<), and may be subdivided itself into substrings by commas, each of which may be divided into two pieces by a colon. The additional data consists of a series of field tags for another field in the Unihan database indicating the source of the information. If these field tags are themselves subdivided by a colon, the final piece is a string consisting of the letters T (for tòng, U+540C 同) B (for bù, U+4E0D 不), Z (for zhèng, U+6B63 正), F (for fán, U+7E41 繁), or J (for jiǎn U+7C21 簡/U+7B80 简).

T is used if the indicated source explicitly indicates the two are the same (for example, by saying that the one character is “the same as” the other).

B is used if the source explicitly indicates that the two are used improperly one for the other.

Z is used if the source explicitly indicates that the given character is the preferred form. Thus, kHanYu indicates that U+5231 刱 and U+5275 創 are semantic variants and that U+5275 創 is the preferred form.

F is used if the source explicitly indicates that the given character is the traditional form.

J is used if the source explicitly indicates that the given character is the simplified form.

Data on simplified and traditional variations can be included in this field to document cases where different sources disagree on the nature of the relationship between two characters. The kSemanticVariant and kSpecializedSemanticVariant fields need not be consulted when interconverting between traditional and simplified Chinese.

As an example, U+3A17 has the kSemanticVariant value "U+6377<kHanYu:TZ". This means that, according to the Hanyu Da Zidian, U+3A17 and U+6377 have identical meaning and that U+6377 is the preferred form.
]
[
Property 	kSpecializedSemanticVariant
Status 	Provisional
Category 	Variants
Introduced 	2.0
Delimiter 	space
Syntax 	U\+[23]?[0-9A-F]{4}(<k[A-Za-z0-9]+(:[TBZFJ]+)?(,k[A-Za-z0-9]+(:[TBZFJ]+)?)*)?
Description 	The Unicode value for a specialized semantic variant for this character. The syntax is the same as for the kSemanticVariant field.

A specialized semantic variant is an x- or y-variant with similar or identical meaning only in certain contexts.
]
[
Property 	kUnihanCore2020
Status 	Informative
Category 	Dictionary-like Data
Introduced 	13.0
Delimiter 	N/A
Syntax 	[GHJKMPT]{1,7}
Description 	Used for characters which are in the UnihanCore2020 set, the minimal set of required ideographs for East Asia. A character is in the UnihanCore2020 set if and only if it has a value for the kUnihanCore2020 property.

The property value consists of one or more letters (G, H, J, K, M, P, or T), indicating source. The source letters are the same as used for IRG sources, except that P is used instead of the two-letter sequence KP.
]
[
Property 	kIICore
Status 	Normative
Category 	IRG Sources
Introduced 	4.1
Delimiter 	space
Syntax 	[ABC][GHJKMPT]{1,7}
Description 	Used for characters which are in IICore, the IRG-produced minimal set of required ideographs for East Asian use. A character is in IICore if and only if it has a value for the kIICore field.

Each value consists of a letter (A, B, or C), indicating priority value, and one or more letters (G, H, J, K, M, P, or T), indicating source. The source letters are the same as used for IRG sources, except that "P" is used instead of "KP".
]
[
Property 	kStrange
Status 	Provisional
Category 	Dictionary-like Data
Introduced 	14.0
Delimiter 	space
Syntax 	[ACU]
| B:U\+31[0-2AB][0-9A-F]
| [FMOR](:U\+[23]?[0-9A-F]{4})?
| H:U\+31[3-8][0-9A-F]
| I(:U\+[23]?[0-9A-F]{4})*
| K(:U\+30[A-F][0-9A-F])+
| S:[4-9][0-9]
Description 	This property identifies CJK Unified Ideographs that are considered "strange" in one or more ways per the following 12 categories:

Category A = [A]symmetric (exhibits a structure that is asymmetric)
Category B = [B]opomofo (visually resembles a bopomofo character)
Category C = [C]ursive (is cursive or includes one or more cursive components that do not adhere to Han ideograph stroke conventions)
Category F = [F]ully-reflective (is fully-reflective or includes components that are fully-reflective, meaning that the mirrored and unmirrored components are arranged side-by-side or stacked top-and-bottom)
Category H = [H]angul Component (includes a hangul component)
Category I = [I]ncomplete (appears to be an incomplete version of an existing or possible ideograph, meaning that one or more components appear to be incomplete, without regard to semantics)
Category K = [K]atakana Component (includes one or more components that visually resemble a katakana syllable)
Category M = [M]irrored (is either mirrored or includes one or more components that are mirrored)
Category O = [O]dd Component (includes one or more components that are symbol-like or are otherwise considered odd)
Category R = [R]otated (is either rotated or includes one or more components that are rotated)
Category S = [S]troke-heavy (has 40 or more strokes)
Category U = [U]nusual Arrangment/Structure (has an unusual structure or component arrangement)

This property is fully documented in [UTN43], Unihan Database Property “kStrange”.
]
]]
[
3.6 Radical-Stroke Counts
3.7 Variants
3.7.1 Simplified and Traditional Chinese Variants
3.7.2 Semantic Variants
3.7.3 Spoofing Variants
]
[[
[
3.6 Radical-Stroke Counts

We include three radical-stroke counts for Unihan: kRSAdobe_Japan1_6, kRSKangXi, and kRSUnicode.

All the radical-stroke fields are based on the radical-system introduced by the 18th-century Kangxi Dictionary. Each ideograph is assigned one of 214 radicals. In most cases, the radical assigned is the natural radical, giving a clue as to the character’s meaning; in the rest, the radical is arbitrary, based on the character’s structure. One also counts the character’s residual strokes, that is, the number of brush strokes required to write everything in the character except the radical.

To find a character using the radical-stroke system, one determines its radical and the number of residual strokes, then looks through the list of characters with those characteristics. This is a clumsy system compared to alphabetical lookup, but is one of the most widespread systems throughout East Asia. Unfortunately, it is also ambiguous.

First of all, if a character does not have a natural radical, it can sometimes be hard to tell what the radical ought to be (for example, 井 being assigned arbitrarily the radical 二). Even if the character naturally falls into radical-like pieces, it can be hard to tell which is the radical and which the phonetic (for example, 和, which looks like it belongs to the radical 禾, actually belongs to the radical 口). Moreover, since Unicode encodes characters, not glyphs, two different glyphs for the same character may have different residual strokes (such as 者, which can be written either with or without a dot, altering its stroke count between nine and eight, respectively).

The primary use for the kRSUnicode field is to cover the normative radical-stroke value defined by ISO/IEC 10646. However, it is also used for cases where there is sufficient ambiguity that a reasonable person might look for a character in multiple places, particularly where one of our source dictionaries categorizes a character under a different radical or with a different stroke count.

The kRSUnicode field also uses an apostrophe after the radical number to indicate that the character uses a standard simplification. In simplified Chinese, many radicals have standard, simplified forms, such as 讠, which is the simplified form of the radical 言

There is, by the way, no standard way of ordering characters within a given radical-stroke group. Unicode’s radical-stroke charts order characters with the same radical-stroke count by the Unicode block in which they occur. If looking for a character with radical 64 (手) and ten residual strokes, one knows that of the hundreds of candidates in the Unicode Standard, the most common ones come towards the head of the list and the less common ones later.

The IRG is in the process of adopting a common system of assigning the first stroke of the phonetic element to one of five categories, and sorting by those categories. When this “first stroke” data is available for all of Unihan, it will be added to the Unihan database and simplify the process of finding a character within a particular radical-stroke block.
]

[
3.7 Variants

Although Unicode encodes characters and not glyphs, the line between the two can sometimes be hard to draw, particularly in East Asia. There, thousands of years worth of writing have produced thousands of pairs which can be used more-or-less interchangeably.

To deal with this situation, the Unicode Standard has adopted a three-dimensional model for determining the relationship between ideographs, and has formal rules for when two forms may be unified. Both are described in some detail in the Unicode Standard. Briefly, however, the three-dimensional model uses the x-axis to represent meaning, and the y-axis to represent abstract shape. The z-axis is used for stylistic variations.

To illustrate, 說 and 貓 have different positions along the x-axis, because they mean two entirely different things (to speak and cat, respectively). 貓 and 猫 mean the same thing and are pronounced the same way but have different abstract shapes, so they have the same position on the x-axis (semantics) but different positions on the y-axis (abstract shape). They are said to be y-variants of one another. On the other hand, 說 and 説 have the same meaning and pronunciation and the same abstract shape, and so have the same positions on both the x- and y-axes but different positions on the z-axis. They are z-variants of one another.

Ideally, there would be no pairs of z-variants in the Unicode Standard; however, the need to provide for round-trip compatibility with earlier standards, and some out-and-out mistakes along the way, mean that there are some. These are marked using the kZVariant field.

The remaining variant fields are used to mark different types of y-variation.
]

[
3.7.1 Simplified and Traditional Chinese Variants

The kTraditionalVariant and kSimplifiedVariant fields are used in character-by-character conversions between simplified and traditional Chinese (SC and TC, respectively). For any character X, when converting between SC and TC, there are four possible cases:

    X is used in both SC and TC and is unchanged when mapping between them. An example would be 井 U+4E95. This is the most common case, and is indicated by both the kSimplifiedVariant and kTraditionalVariant fields being empty.
    X is used in TC but not SC, that is, it is changed when converting from TC to SC, but not vice versa. In this case, the kSimplifiedVariant field lists the character(s) to which it is mapped and the kTraditionalVariant field is empty. An example would be 書 U+66F8 whose kSimplifiedVariant field is 书 U+4E66.
    X is used in SC but not TC, that is, it is changed when converting from SC to TC, but not vice versa. In this case, the kTraditionalVariant field lists the character(s) to which it is mapped and the kSimplifiedVariant field is empty. An example would be 学 U+5B66 whose kTraditionalVariant field is 學 U+5B78.
    X is used in both SC and TC and may be changed when mapping between them. This is the most complex case, because there are two distinct sub-cases:
        X may be mapped to itself or to another character when converting between SC and TC. In this case, the character is its own simplification as well as the simplification for other characters. An example would be 后 U+540E, which is the simplification for itself and for 後 U+5F8C. When mapping TC to SC, it is left alone, but when mapping SC to TC it may or may not be changed, depending on context. In this case, both kTraditionalVariant and kSimplifiedVariant fields are defined and X is included among the values for both.
        X is used for different words in SC and TC. When converting between the two, it is always changed. An example would be 苧 U+82E7. In traditional Chinese, it is pronounced zhù and refers to a kind of nettle. In simplified Chinese, it is pronounced níng and means limonene (a chemical found in the rinds of lemons and other citrus fruits). When converting TC to SC it is mapped to 苎 U+82CE, and when converting SC to TC it is mapped to 薴 U+85B4. In this case, both kTraditionalVariant and kSimplifiedVariant fields are defined but X is not included in the values for either.

In practice, conversion between simplified and traditional Chinese is complicated by three factors:

    The conversion is almost always one-to-one, but in some cases may be one-to-many, and context may need to be evaluated to determine which specific mapping to use. When converting SC to TC, 脏 U+810F is mapped to 臟 U+81DF when it means "viscera" and to 髒 U+9AD2 when it means "dirty."
    An SC character may be used in actual TC text and, more rarely, vice versa. This is particularly true in handwritten and ancient texts. Indeed, many SC forms originated as handwritten forms or ancient synonyms. It also occurs when one of a number of synonymous TC characters is identified as the preferred or correct character to use in SC. For example, both 猫 U+732B and 貓 U+8C93 are acceptable TC characters meaning "cat," but only 猫 U+732B should be used in SC.
    Political divisions within the Chinese-speaking community have resulted in different coinages in different locales for various modern terms, and so actual conversion between SC and TC is ideally done on a word-by-word basis, not a character-by-character basis. A hard disk, for example, is called 硬盘 in the PRC, and 硬碟 in Taiwan.
]

[
3.7.2 Semantic Variants

Two variation fields, kSemanticVariant and kSpecializedSemanticVariant, are used to mark cases where two characters have identical and overlapping meanings, respectively.

Thus U+514E 兎 and U+5154 兔 are y-variants of one another; both mean rabbit. U+4E3C 丼 and U+4E95 井 are not pure y-variants of one another. 井 means a well, and although 丼 can also mean a well and be used for 井, it can also mean a bowl of food. We use kSemanticVariant, then, for the former pair, and kSpecializedSemanticVariant for the latter. In many cases, data is provided listing the Unihan sources which indicate the variant relationship. The syntax is described in detail below, but as an example, U+792E 礮 has the kSemanticVariant value U+70AE<kMeyerWempe U+7832<kLau,kMatthews,kMeyerWempe U+791F<kLau,kMatthews. This means that the Mathews, Lau, and Meyer-Wempe dictionaries all say that it is a y-variant of U+7832 砲, whereas only Mathews and Lau identify it as a variant of U+791F 礟 and only Meyer-Wempe identifies it as a variant of U+70AE 炮.
]

[
3.7.3 Spoofing Variants

The kSpoofingVariant field is used to denote a special class of variant, a spoofing variant. Spoofing variants are potentially used in bad faith to direct users to unexpected URLs, evade email filters, or otherwise deceive end-users. Determining whether or not two characters are spoofing variants is based entirely on the glyph shape, without regard for semantics. Etymologically unrelated pairs such as U+571F 土 and U+58EB 士 or U+672A 未 and U+672B 末 are considered spoofing variants. A common source of spoofing variants is deliberate confusion between radicals moon (⽉) and meat (⾁). These two radicals, when used in Han characters, look very similar or identical (for example, in U+3B35 㬵 and U+80F6 胶). Similarly, even if the visual appearance of two radicals is distinct, they may be similar enough that a user might overlook the distinction (for example, ⼎ and ⺡), especially in a spoofing context such as https://凊水.org versus https://清水.org. Spoofing variants also include instances where two highly similar shapes are separately encoded because of source code separation, without regard to other considerations. Cases include the following pairs: U+672C 本 and U+5932 夲; U+520A 刊 and U+520B 刋.

Some spoofing variants might be sufficiently dissimilar in shape that they can be distinguished at large point sizes. Others are dissimilar in meaning so that they can be distinguished in running text. They might also be visually distinct in one font but not another, due to the language or region that the font supports. These considerations are irrelevant to their status; even dissimilar pairs can be used to misdirect users (particularly when URLs are displayed at small point sizes).

Because z-variant pairs are, by definition, either identical or unifiable, they should all be considered spoofing variants as well. The same is true of compatibility variants. Because of these considerations, the kSpoofingVariant field only includes spoofing variants which are ​not​ also z-variants or compatibility variants.

As with some other properties concerning CJK variants, the value of the kSpoofingVariant field is symmetric (if A is a spoofing variant of B, then B is a spoofing variant of A) and transitive (if A is a spoofing variant of B and B is a spoofing variant of C, then A is a spoofing variant of C).

The kSpoofingVariant field only covers CJK Unified Ideographs. Other CJK-related spoofing data is found in the EquivalentUnifiedIdeographs.txt file.
]
]]
]]]


]]]]]]]

