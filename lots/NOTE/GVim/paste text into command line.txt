paste text into command line
    * shift+INS
        !!!!!!!!!!!!!!!!!!!!! system clipboard as keyboard input!!!!!!!
    * ctrl+R, then '"'(vim register) or '*' (system clipboard)
    * (q: (normal mode)|ctrl+F (edit cmd)), then edit cmd history, Enter over cmd to exec, :q to exit editing.
    NOTE:
        !!!!!!!!!!!!!!! "\" may disappear after cmd exec !!!!!!!!!!!!!!!!
        !!!!! the text may need to escape "\" as "\\"


https://stackoverflow.com/questions/3997078/how-to-paste-yanked-text-into-vim-command-line
How to paste yanked text into Vim command line?

--------------------xxxxxxxxxx
For pasting something that is the system clipboard you can just use
    SHIFT - INS.
This actually feeds the pasteboard to Vim as keyboard input, so if you're in normal mode and paste :!rm -rf /<cr>, it'd execute that. Use registers instead!
--------------------xxxxxxxxxx
I prefer editing the command history.

In normal mode, type: q:. This will give you a list of recent commands, editable and searchable with normal vim commands. You'll start on a blank command line at the bottom.

For the exact thing that the article asks, pasting a yanked line (or yanked anything) into a command line, yank your text and then: q:p (get into command history edit mode, and then (p)ut your yanked text into a new command line. Edit at will, enter to execute.

To get out of command history mode, it's the opposite. In normal mode in command history, type: :q + enter

if you are already modifying an existing command and did not press 'q:' press ctrl+f and it'll pull up the ability to edit the command history.

--------------------xxxxxxxxxx
Hit Ctrl-R then ". If you have literal control characters in what you have yanked, use Ctrl-R, Ctrl-O, ".

Here is an explanation of what you can do with registers. What you can do with registers is extraordinary, and once you know how to use them you cannot live without them.

Registers are basically storage locations for strings. Vim has many registers that work in different ways:

    0 (yank register: when you use y in normal mode, without specifying a register, yanked text goes there and also to the default register),
    1 to 9 (shifting delete registers, when you use commands such as c or d, what has been deleted goes to register 1, what was in register 1 goes to register 2, etc.),
    " (default register, also known as unnamed register. This is where the " comes in Ctrl-R, "),
    a to z for your own use (capitalized A to Z are for appending to corresponding registers).
    _ (acts like /dev/null (Unix) or NUL (Windows), you can write to it but it's discarded and when you read from it, it is always empty),
    - (small delete register),
    / (search pattern register, updated when you look for text with /, ?, * or # for instance; you can also write to it to dynamically change the search pattern),
    : (stores last VimL typed command via Q or :, readonly),
    + and * (system clipboard registers, you can write to them to set the clipboard and read the clipboard contents from them)

See :help registers for the full reference.
--------------------xxxxxxxxxx
--------------------xxxxxxxxxx
--------------------xxxxxxxxxx
