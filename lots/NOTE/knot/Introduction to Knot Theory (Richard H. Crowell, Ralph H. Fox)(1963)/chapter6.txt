

[group of knot]
    knot K
    point v in R^3 - K
    pi(R^3-K, v) or pi(R^3-K) - the group of K
    

[the over and under presentations]
    K - a polygonal knot in regular position
    P - the projection P(x,y,z) = (x,y,0)
    
    exists n, Q, s.t.
        n in N, Q <= K
        card(Q) = 2*n
        overcrossing not in Q
        undercrossing not in Q
        
        Q divides K into {closed, connected segmented arcs}
            = {overpasses} + {underpasses}
            where {overpasses} ^ {underpasses} = {}
                  card{overpasses} = card{underpasses} = n
                  v in Q ==>> exists only one overpass O and one underpass U, s.t. v in O, v in U
                  overcrossing not in underpass
                  undercrossing not in overpass
    
    
    let A = union{overpasses} = union{A[i]}
    let B = union{underpasses} = union{B[i]}
    assume Q <= O_xy; (A-Q) above O_xy; B-Q below O_xy
        // O_xy is plane z=0
    
    [orientation of knot] - draw a arrow on knot
        one orientation ==>> one presentation
        
        ?? refer orientations to a left-handed screw ??
            bottom to top 
                - the z-axis arrow 
                - hence the z'-axis arrow on every point
            on O_xy plane:
                prev exist orientation 
                    - defines an arrow on each point v on knot
                    - the new y'-axis arrow on v
                    ==>> new x'-axis arrow on v
                new arrow cross v - compare it to the x'-axis arrow on v
                    same ==>> +1
                    else ==>> -1

    let z0 > max |z| for x,y,z in K
    ==>> z=-z0 below K; z=z0 above K
    
    p0 = (0, 0, z0)
    p0' = (0, 0, -z0)
    q0 in O_xy - P(K)
    
    
    [over presentation]
        pi(R^3-K, p0) // NOTE: p0 above K
        circle _L one overpass is a generator
            [p0 above K][circle is p0-based]
                ==>> can move circle cross overcrossing
                ==>> cannot move circle cross undercrossing
        
        Cs - set of all above circles is a generating set of pi(...)
            proof:
                factor each loop through p0 into circles each of which connects two faces
                ==>> factor each circle above into circles each connects each original connected face and the external face
                    by a diameter whose ends are ends of a path which interset P(K) only on P(overpasses)
                ==>> factor each circle above into circles each connects two faces having an P(overpass) as common edge
                Done 
        
        Kx = connect all underpasses to p0' // NOTE: p0' below K
        knot is formed by [overpass, underpass, o, u,..., o, u]
            ==>> Kx is n-leafed rose
            ==>> pi(R^3-Kx) = (Cs:) = F[rank n]
        cut each foot (the connection of one underpass and p0') of Kx
            ==>> add circle _L the foot to the relators of pi(R^3-Kx) by van Kampen theorem
                and by van Kampen theorem such circle should be translated to be p0-based loop
            choose q0 as a basepoint on O_xy
                we translate the circle to a q0-based loop then p0-based 
                    p0-based-loop = p0->q0 + q0-based-loop + (p0->q0)^-1
            map the circle to O_xy be a loop contain the P(underpass) and cross any P(overpasses) connected by P(underpass).
            draw a path q0->loop(underpass) on O_xy which interset P(K) only on P(overpasses) from q0 the above loop
            q0-based-loop = q0->loop(underpass) + loop(underpass) + (q0->loop(underpass))^-1
            
        ==>> pi(R^3-K, p0) = (Cs : p0<->q0<->loop(underpass) for each underpass)
        NOTE: need not cut the last foot 
            ==>> pi(R^3-K, p0) = (Cs : p0<->q0<->loop(underpass) for each underpass except one)
            this is the [over presentation]
        ==>> pi(R^3-K, p0) = (Cs : loop(underpass) for each underpass [except one])
            [Wirtinger presentation] ::= [each underpass constains exactly one crossing]
            in form: (Cs : x*y = z*x for underpass between {y,z} except one)
            in form: (Cs : y = x^e*z*x^-e (e=+/-1) for underpass between y->z except one)


[clover-leaf knot]
    (x,y,z : x^-1 y z y^-1, y^-1 z x z^-1)
        (x,y,z : x y = y z, y z = z x)
        (x,y,z : z = y^-1 x y, y z = z x)
        (x,y,z : z = y^-1 x y, y y^-1 x y = y^-1 x y x)
        (x,y,z : z = y^-1 x y, x y = y^-1 x y x)
        (x,y,z : z = y^-1 x y, y x y = x y x)
        (x,y : xyx = yxy) // so, what it is?????????????
            1,  x, y,  xx, xy, yx, yy,  xxx, xxy, xyx=yxy, xyy, yxx, (yxy), yyx, yyy...
            
            reduced form??
            if forbidden xyx, x^m (|m|>1)
                x^m * yx = yx y^m ==>> x^m = yx y^m (yx)^-1
                // xy * x^n = y^n xy ==>> x^n = (xy)^-1 y^n xy
                x^1 = yx y^1 (yx)^-1 = yxyx^-1 y^-1
                x^-1 = yx y^-1 (yx)^-1 = yx y^-1 x^-1 y^-1
                
                1) x^m (|m|>1) ==>> yx y^m (yx)^-1
                    // no high order x
                2) (xy)^-1 y^m xy ==>> yx y^m (yx)^-1
                    x^-1 y^m x ==>> yyx y^m (yyx)^-1 = y^2 x y^m x^-1 y^-2
                    no x^-1 before x
                3) xyx^-1 ==>> y^-1 x y
                4) x y^-1 x^-1 ==>> y^-1 x^-1 y
                5) xyx ==>> yxy
                6) x y^-1 x??
                enough ??


[figure-eight knot]
    (x,y,z,w : x = z^-1 w z, y = w x w^-1, z = x^-1 y x)
    (x,y,z,w : x = (x^-1 y x)^-1 w x^-1 y x, y = w x w^-1, z = x^-1 y x)
    (x,y,w : x = (x^-1 y x)^-1 w x^-1 y x, y = w x w^-1)
    (x,y,w : 1 = (x^-1 y x)^-1 w x^-1 y, y = w x w^-1)
    (x,y,w : x^-1 y x = w x^-1 y, y = w x w^-1)
    (x,y,w : y x = x w x^-1 y, y = w x w^-1)
    (x,w : w x w^-1 x = x w x^-1 w x w^-1)
    (x,w : x^-1 w x w^-1 x = w x^-1 w x w^-1)


[knots of the same type have isomorphic groups]
    [exists homomorphism h: (x,y : xyx = yxy)->S3]
        ==>> (x,y : xyx = yxy) ~!~ (x:)
        ==>> clover-leaf knot cannot be untied
    
    for knots K1, K2
        K1 ~=~ K2 ::= of same knot type <==> of same equivalence class
        K1 ~=[isotopy]=~ K2 :: of same isotopy type
        [K1 ~=~ K2 -->> pi(R^3-K1) ~=~ pi(R^3-K2)]
        
        0) does K1 ~=[isotopy]=~ K2?? ==>> yes or noreturn by enumerating finite Reidemeister moves
        1) does pi(R^3-K1) ~=~ pi(R^3-K2)?? ==>> yes or noreturn by enumerating finite Tietze operations
            we can prove that pi(R^3-K1) ~=~ pi(R^3-K2) 
                but we can not conclude K1 ~=~ K2
            we can assert K1 ~!~ K2 if pi(R^3-K1) ~!~ pi(R^3-K2)
                but we have no general method to prove pi(R^3-K1) ~!~ pi(R^3-K2)
            WTF!

        2) does pi(R^3-K1) ~=~ pi(R^3-K2)?? ==>> no or unknown by group invariants
            we can prove pi(R^3-K1) ~!~ pi(R^3-K2) for some special (K1, K2)
                hence prove K1 ~!~ K2
            [group invariants]

        0) + 2) ==>> does K1 ~=~ K2?? ==>> yes or no or noreturn
            parallel:
                ->if K1 ~=[isotopy]=~ K2: return yes
                ->if K1 ~=[isotopy]=~ mirror(K2): return yes
                ->if invariants(pi(R^3-K1)) != invariants(pi(R^3-K2)): return no
            // noreturn if K1 ~!~ K2 and no invariants can distinguish them
            
            




































