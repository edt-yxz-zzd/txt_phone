CHAPTER IV Presentation of Groups

defining a group by generators and relations
Tietze theorem
    recognizing when two sets of generators and relations actually presentthe same group. 

[defining equations] or [defining relations]
    group G = {g[i]}
    f[i](g[0], g[1], ...) = 1
[relators]
    free group F[A] 
        where 
            card(A) = card(G)
            A={a[0], a[1], ...}
            h(a[i]) = g[i]
    f[i](a[0], a[1], ...)
    h(f[i](a[0], a[1], ...)) = f[i](h(a[0]), h(a[1]), ...) = 1[G]
    
[consequence]
    // 这里要讲的是“正规生成集”
    // 因为kernel即F[A]的子群通常是无限大，直接当作“关系”不合适
    // 可用kernel的“生成集”作替代，又因kernel是正规子群，可用更小的“正规生成集”
    // see also: 现代数学手册(1)・经典数学卷::3.2.1 生成与关系::[page 893]
    
    
    g is a consequence of set B <= set G <==> 
        g in N for any normal subgroup N of group G if set B <= set N

    consequence[G](B) ::=
        the consequence in G of set B is the set of all consequences of set B
        <==> Interset N {normal subgroup N of G and set B <= set N}
        <==> smallest normal subgroup N of G s.t. set B <= set N
        <==> {II g[j]*b(j)^n(j)*g[j]^-1 {j=0..L} | for any L for any b: [0..L]->B for any n: [0..L]->ZZ}
        
[page 40] Nielsen-Schreier theorem
    any subgroup of a free group is free.

[presentation of group]
    group_presentation(X : R)[f]
    X - the set of generators of the presentation
    R - the set of relators of the presentation
    RR ::= consequence[F[X]](R)
    |X:R|=F[X]/RR - the group of / defined by group_presentation(X:R)
    f - the homomorphism : F[X] -> G ; NOTE: RR is kernal(f)
    
    presentation : a known group (e.g. free group) -> G ; 
        onto ; 满同态 ; 演出
    representation : G -> a known group (e.g. a group of permutations) ; 
        into ; 同态 ; 代理
    
[relation]
    v.s. relator
    relators R = {a*b*a^-1*b^-1, (a*b)^2, ...} ==>> a^2*b^2 in RR
    i.e. relations {a*b*a^-1*b^-1 = 1, (a*b)^2 = 1} ==>> a^2*b^2 = 1
        a*b*a^-1*b^-1 = 1 ==>> a*b = b*a
        ==>> 1 = (a*b)^2 = a*(b*a)*b = a*(a*b)*b = a^2*b^2


[finitely generated presentation/group] ::= X is finite
[finitely related presentation/group] ::= R is finite
[finite presentation] <==> [finitely generated presentation] and [finitely related presentation]
[finitely presented group] <==> exists a finite presentation

Although nonfinite presentations are common enough and by no means pathological,we shall be primarily concerned with finite sets X and R.
    // so, why??

[isomorphism problem]
    determining whether or not two presentations determine isomorphic groups
        There are a numbers of problems which are known to have no general solution:
        deciding whether or not the group defined by a given presentation is trivival/finite/abelian/free, etc;
        deciding whether or not a given word is a consequence of a given set of words and many others.
        See M.O.Rabin, "Recursive Unsolvability of Group Theoretic Ploblems," ...
    It is not possible to give a general solution of this problem, but partial solutions can be found, and these are of great importance. 
        These are usually of the nature of conditions on presentations that must be fulfilled if the groups presented are to be isomorphic.
        Such conditions are of importance because they are the means of showing that certain groups are not isomorphic. 


[page 41]
[presentation mapping]
    presentation mapping f : group_presentation(X : R)[rx] -> group_presentation(Y : S)[ry]
    <==>
        //-2) homomorphism rx : F[X] -> |X:R|
        //-1) homomorphism ry : F[Y] -> |Y:S|
        1) homomorphism f : F[X] -> F[Y]
        2) homomorphism f^* : |X:R| -> |Y:S| s.t. f^* . rx == ry . f
    
    [homotopic]
        presentation mapping f1, f2
        f1 ~=h=~ f2 ::= [homotopic f1, f2] 
            <==> ry . f1 == ry . f2 
            <==> f1^* == f2^*
    any homomorphism h : |X:R| -> |Y:S|, exists presentation mapping f s.t. f^* == h
    ==>> homotopy classes of presentation maps are in one-one correspondence with the homomorphisms between the groups presented.
        [presentation mapping f] <--> (homomorphism f^* :|X:R| -> |Y:S|)
    
    [presentations of same type]
    group_presentation(X : R)[rx] and group_presentation(Y : S)[ry] are of the same type
    <==> 
        exists  presentation mapping f : group_presentation(X : R)[rx] -> group_presentation(Y : S)[ry]
                presentation mapping g : group_presentation(Y : S)[ry] -> group_presentation(X : R)[rx]
        g.f ~=h=~ 1
        f.g ~=h=~ 1
        [presentation / homotopy equivalence f, g]
    <==> |X:R| ~=~ |Y:S|
    
Tietze theorem
    Tietze equivalences I, I', II, II' 

    I  : group_presentation(X : R)[rx] -> group_presentation(X : R + S)[rx] where R+S <= set RR
    I' :             ...              <-      ...
    
    II : group_presentation(X : R)[rx] -> group_presentation(X+{y} : R + {y=y(X)})[rx+] where y not in X (or "+" is a disjoint_union), y(X) in F[X], rx+[X]=rx, rx+(y)=rx(y(X))
    II':             ...               <-      ...

[page 44] (3.2) TIETZE THEOREM
    1) finite presentation group_presentation(X : R)[rx] and group_presentation(Y : S)[ry] 
    2) [presentation equivalence f, g]
    ==>> exists a finite Tietze equivalence sequence T[i] 
        s.t. f = II T[i] {i}, g = II T'[i] {i} // (I)'->I', (I')'->I
    
    assume X ^ Y = {} // for F[X+Y]
    group_presentation(X : R)  
        -- II -->> group_presentation(X+Y : R+{y[i]=y[i](X)})
        -- I -->> group_presentation(X+Y : R+{y[i]=y[i](X)} + S)
        -- I -->> group_presentation(X+Y : R+{y[i]=y[i](X)} + S+{x[i]=x[i](Y)})
        -- I' -->> group_presentation(X+Y : S+{x[i]=x[i](Y)})
        -- II' -->> group_presentation(Y : S)



necessary conditions in the isomorphism problem
    ==>> some uniform method of simplifying groups

[word subgroup]
    a subset words[X] <= set F[X] // set of word
    OMEGA[X](G) = {homomorphism f | f: F[X]->G}
    [word subgroup]
        W(words[X], G) = generate{f(word) | f in OMEGA[X](G), word in words[X]}
        W(words[X], G) <= group G
            unaltered by any inner automorphism of G ==>> is normal
            endomorphism?? ==>> fully normal
        
        [commutator subgroup]
            [G, G] ::= W({ab=ba}, G) = W({ab(ba)^-1}, G)
        [commutator quotient group] or [abelianized group]
            G/[G, G]
        [nth power of group] n>=0
            G^n ::= W({x^n=1}, G) = W({x^n}, G)
            G^0 = {1}
            G^1 = G
            G^n = generate{g^n | g in G}
            G^(n*d) <= G^n // x^(n*d) = 1 ==>> (x^d)^n = 1
            [G, G] <= G^2 // ab=ba ==>> (ab)^2 = ba*ab = (ba)^2 ==>> (ab)^2*(ba)^-2 = 1 ==>> (ab*(ba)^-1)^2 = 1
                ==>> G/G^2 <= G/[G,G] is abelian

(4.1) 
    homomorphism h : G -> H
    h*OMEGA[X](G) <= OMEGA[X](H)
    h $ W(words[X], G) = h $ generate{f(word) | f in OMEGA[X](G), word in words[X]}
        = generate{h$f(word) | f in OMEGA[X](G), word in words[X]}
        = generate{f(word) | f in h*OMEGA[X](G), word in words[X]}
        <= generate{f(word) | f in OMEGA[X](H), word in words[X]}
        = W(words[X], H)
    
    exists h^* : G/W(words[X], G) -> H/W(words[X], H)
        s.t. h . (H->H/W...) = (G->G/W...) . h^*

    ==>>
    1) h = 1[G] ==>> h^* = 1[G/W...]
    2) (h1 . h2)^* = h1^* . h2^*
    3) h is onto ==>> h^* is onto
    4) h is isomorphism onto ==>> h^* is isomorphism onto

    
    F[X]/F[X]^2 = {II x^e(x) {x in X} | e:X->{0,1}}
        abelian ==>> card(F[X]/F[X]^2) = card(2^X)

    G ~=~ H ==>> G/[G,G] ~=~ H/[H,H]

[free abelian group]
    abelianized group of free group
    F[X]/[F[X], F[X]]
    // free abelian group is not free group







