

#########################################################
#########################################################
#########################################################
vbs _ <==> py \
    logical line continuation character
vbs ' <==> py # <==> hs -- <==> cpp --
    single line comment character
vbs & <==> py + <==> hs ++ <==> cpp +
    string concatenate operator
vbs <> <==> py !=
vbs Dim/Set <==> hs let <==> cpp auto <==> js var
    Dim x
    x = ...
    Set y = ...
    z = ... ????????????????? see below
vbs Sub/Function <==> py def
vbs Exit For <==> py break

#########################################################
#########################################################
#########################################################
#https://www.guru99.com/declaring-and-using-variables.html
Option Explicit Off
Option Explicit On
    <==> Option Explicit
variable name is not case sensitive, <= 128 characters
"string"
True/False
Dim x as Variant        # Boolean/Byte/Integer/String/Date/Empty/Null/Error/Long/Single/Double/Currency
Set x = Nothing         # Release object
Const C = &H00ff
# error: Dim x = 10000
Dim mx(3,3) as Integer
mx(0,0) = 0                # matrix

InputBox
MsgBox vs WScript.Echo
    WScript.Echo is dual mode
    cli ==>> print      # need not click "OK"
    gui ==>> MsgBox     # need click "OK"

#########################################################
#########################################################
#########################################################
why "Dim"?
    Option Explicit Off
    x = y
    <==>
        Option Explicit On
        Dim x as Variant
        x = y

    #https://stackoverflow.com/questions/24378383/why-should-i-use-the-dim-statement-in-vba-or-excel
        Any variable used without declaration is of type Variant.
        While variants can be useful in some circumstances, they should be avoided when not required, because they:
            * Are slower
            * Use more memory
            * Are more error prone, either through miss spelling or through assigning a value of the wrong data type


#########################################################
"Set x = y" vs "x = y"
    "sets the variable to an object reference" vs "sets the variable to a value/default_property"
    Set reference_variable = object
        <==> reference_variable := !get_object_reference!(object)
    value_variable = object
        <==> value_variable := !get_default_property!(object)

    #https://softwareengineering.stackexchange.com/questions/240688/why-does-vba-vbscript-require-set-prefix
    #https://stackoverflow.com/questions/3872339/what-is-the-difference-between-dim-and-set-in-vba
    #set a variable to a primitive or array value, omit the "Set"
    * "x = y" -- set x to be the "default property" of "object" y
        Dim x as Variant
        x = textBox1            # ? TypeName(x) ==>> String
        <==> x = textBox1.Text  # ".Text" is the default property
    * "Set x = y"               # Set variable = object
        Set x = textBox1        # ? TypeName(x) ==>> TextBox

#########################################################
#########################################################
#########################################################
# script structure
If ... Then # a=b; a<>b; And
    ...
ElseIf
    ...
Else
    ...
End If

Select Case ...
    Case ... # 1
        ...
    Case ... # "a"
        ...
End Select

Do Until ... # while not ...
    ...
Loop

For i = 0 To ...
    ...
Next
For Each ... in ...
    ...
    # Exit For # break
Next

Sub subroutine(...) # (x, y, z)
    # called as statement
    #   subroutine x, y, z
    # Dim, MsgBox are statements!
    ...
End Sub

Function x_func(...)
    # called as expr
    #   x_func(x, y, z)
    ...
    x_func = ... # return
End Function



