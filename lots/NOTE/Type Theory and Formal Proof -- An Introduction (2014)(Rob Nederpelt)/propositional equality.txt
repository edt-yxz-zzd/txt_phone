[Homotopy type theory (revised)(2012)(Egbert Rijke)]

propositional equality
The point here is that we might have an interpretation of type theory in which there is a type containing two functions for which the number of steps a function needs to compute the value at a certain point might be relevant, so we consider functions that involve different computations as different elements even if there is a proof that their values are always the same. The main topic of this thesis is the propositional equality which exactly addresses this point. The key distinction between definitional and propositional equality is that definitional equality is a syntactical notion while propositional equality is internal in the theory of types



----
minimality principle
Another way of looking at the minimality principle for dependent sums is via the equivalence
    ((?x:A. P)->B) <=> @x:A.(P->B)
in logic, which holds whenever the variable x does not occur in y . The minimality principle of (âˆ‘a:A. P a) ensures that we have an equivalence
    SUM x:A. P x === subtype(A,P) === ?x:A. P x
    (subtype(A,P) -> B) ~=~ (@x:A. P x -> B)
    # is that subtype v.s. ? : diff at induction?

