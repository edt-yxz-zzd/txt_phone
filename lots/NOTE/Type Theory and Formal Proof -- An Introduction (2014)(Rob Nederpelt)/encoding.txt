
### constructive logic
implication
a => b === a -> b === @_ : a : * . b

absurdity
_L === @a : * . a
negation
Not a === a -> _L
    Not = \a : * . a -> _L
conjunction
a /\ b === @r: * . (a -> b -> r) -> r
    And = \a : * . \b : * . @r: * . (a -> b -> r) -> r
disjunction
a \/ b === @r: * . (a -> r) -> (b -> r) -> r
    Or  = \a : * . \b : * . @r: * . (a -> r) -> (b -> r) -> r
biimplication
a <=> b === a=>b /\ b=>a === ...


### classical logic
    # add either ET (excluded third|excluded middle) or DN (double negation)
    Not (Not a) => a  ===  assume (DN : @a: * . ((a->_L)->_L)->a)
    a \/ Not a  ===  assume (ET : @a: * .@r: * . (a->r) -> ((a->_L)->r)->r)

### predicate logic
Forall a <- S . P a === @a : S . P a
    Any = \S : * . \P: S -> * . @a : S . P a
    Any S P : *
    @a : S. B === Any S (\a : S. B)
Exists a <- S . P a === ?a : S. P a === @r: * . (@a : S. P a -> r) -> r
    Some= \S : * . \P: S -> * . @r: * . (@a : S. P a -> r) -> r
    Some S P : *

