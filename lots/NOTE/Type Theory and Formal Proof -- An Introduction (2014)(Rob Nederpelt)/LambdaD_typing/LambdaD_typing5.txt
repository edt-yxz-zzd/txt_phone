

keywords:
    Term -- the universal term_set
    :  --  term : type
    <: --  subterm <: term; subtype <: type
    :: --  term :: term_set; term :: Term
    <# --  term_subset <# term_set
    #` --  type_of; #` term ::= type_of term
       --  [term :: Term] ==>> [term : #` term]
    ##` -- fmap type_of; ##` term_set ::= {#` term | term <- term_set}
        -- Type ::= ##` Term
        -- [term : type] ==>> [type :: Type]
        -- [term :: term_set |- #` term : ##` term_set]
    #-` -- #-` ##` set :: set
    ``
    -:
    -<:
    -::
    -> () , {}
    @@ ?? </ />
    fst snd
    cast


syntax
    TermSet = "Term"
            | ##` TermSet
            | TermSet <# TermSet
    Term    = term_id
            ;; type_of
            | #` Term
            ;; term
            | \term_id OfClass3, Term
            | </ Term OfClass3, Term />
            ;; type
            | (IdOfClass3_) -> Term
            | (IdOfClass3_, Term)
            ;; sort
            | @@ IdOfClass1, Term
            | ?? IdOfClass1, Term
            ;; App
            | Term Term
            | fst Term
            | snd Term
            | cast Term Term
            ;; assert
            | Term OfClass3

    IdOfClass1 = term_id :: TermSet
    IdOfClass3_ = term_id -:: TermSet
                | term_id -: Term | term_id -<: Term
    OfClass3 = :: TermSet | : Term | <: Term



[`op` = : | :: | <: | <#][a `op` b][b `op` c]
    ==>> a `op` (b `op` c)
    ;; Notation: a `op` b `op` c === a `op` (b `op` c)

let `op3_` = -: | -:: | -<:
let `op3` = : | :: | <:
let `op2` = : | <:
let `op2_` = -: | -<:
{-
[assumes |- conclusion][valid "assumes, assume"]
    ==>> [assumes, assume |- conclusion]
    ;; "assumes, assume" should form a valid "assumes"
    ;;      i.e. each id occur once, used after defined
-}


term_subset <# term_superset
    ;; TermSet = "Term" | ##` TermSet | TermSet <# TermSet

    Type ::= ##` Term
    Sort ::= ##` Type

    ;; Term
    [] |- Term <# Term
    [assumes |- Term <# set] |- Term <# (Term <# set)

    ;; set_id
    [assumes |- term_set <# Term][set_id not in assumes]
        assumes, set_id <# term_set |- set_id <# set_id
    [assumes |- term_set <# super][set_id not in assumes]
        assumes, set_id <# term_set |- set_id <# super
    [assumes, set_id <# term_set |- set_id <# set]
        assumes, set_id <# term_set |- set_id <# (set_id <# set)

    ;; ##`
    [assumes |- term_set <# Term]
        assumes |- ##` term_set <# Term
    [assumes |- term_set <# super]
        assumes |- ##` term_set <# ##` super ;; eval
    [assumes |- ##` term_set <# super <# set]
        assumes |- ##` term_set <# (super <# set)

    ;; <#
    [assumes |- term_set <# super][assumes |- term_set <# set]
        assumes |- (term_set <# super) <# set



term :: term_set
    ;; term_id
    [assumes |- term_set <# super][term_id not in assumes]
        assumes, term_id :: term_set |- term_id :: super

    ;; #`
    [assumes |- term :: term_set]
        assumes |- #` term :: Term
        assumes |- #` term :: ##` term_set
    [assumes |- #` term :: set <# super]
        assumes |- #` term :: (set <# super)

    ;; term
    [assumes, id `op3` cls |- term :: Term][assumes |- Term <# set]
        assumes |- (\id `op3` cls, term) :: set
    [assumes |- term1 `op3` cls][assumes |- term2 :: Term]
      [assumes |- Term <# set]
        assumes |- </ term1 `op3` cls, term2 /> :: set

    ;; type
    [assumes, id `op3` cls |- type :: Type][assumes |- Type <# set]
        assumes |- (id `op3_` cls) -> type :: set
        assumes |- (id `op3_` cls, type) :: set

    ;; sort
    [assumes |- set <# Sort][assumes, term_id :: cls |- sort :: set]
        assumes |- (@@ term_id :: cls, sort) :: set
        assumes |- (?? term_id :: cls, sort) :: set
    [assumes |- Type <# set][assumes, term_id :: cls |- sort :: Sort]
        assumes |- (@@ term_id :: cls, sort) :: set
        assumes |- (?? term_id :: cls, sort) :: set

    ;; app
    [assumes |- f : (id `op3_` cls) -> type][assumes |- a `op3` cls]
        [assumes, id `op3` cls |- type :: ##` set][assumes |- set <# Term]
            assumes |- f a :: set

    ;; assert
    [assumes |- term `op3` cls][assumes |- term :: set]
        assumes |- (term `op3` cls) :: set

-----------------
term : type
    ;; term_id
    [assumes |- type :: Type][term_id not in assumes]
        assumes, term_id : type |- term_id : type
    [assumes |- set <# Term][term_id not in assumes]
        assumes, term_id :: set |- term_id : #` term_id
    [assumes |- term :: Term][assumes |- term : type][term_id not in assumes]
        assumes, term_id <: term |- term_id : type

    ;; #`
    [assumes |- term : type]
        assumes |- #` term : #` type ;; eval

    ;; term
    [assumes, id `op3` cls |- term : type]
        assumes |- (\id `op3` cls, term) : (id `op3_` cls) -> type
    [assumes |- term1 `op3` cls][assumes, id `op3` cls |- term2 : type]
        assumes |- </ term1 `op3` cls, term2 /> : (id `op3_` cls, type)

    ;; type
    [assumes |- sort :: Sort][assumes, id `op2` cls |- type : sort]
        assumes |- (id `op2_` cls) -> type : sort
        assumes |- (id `op2_` cls, type) : sort
    [assumes, id :: cls |- type :: Type][assumes, id :: cls |- type : sort]
        assumes |- (id -:: cls) -> type : @@ id :: cls, sort
        assumes |- (id -:: cls, type) : @@ id :: cls, sort

    ;; sort
    [assumes, term_id :: cls |- sort :: Sort]
        assumes |- (@@ term_id :: cls, sort) : #` (@@ term_id :: cls, sort)
        assumes |- (?? term_id :: cls, sort) : #` (?? term_id :: cls, sort)

    ;; app
    [assumes |- f : (id `op3_` cls) -> type][assumes |- a `op3` cls]
            assumes |- f a : type[id := a]

    ;; assert
    [assumes |- term `op3` cls][assumes |- term : type]
        assumes |- (term `op3` cls) : type




----------------------

subterm <: term
    ;; term_id
    [assumes |- term :: Term][term_id not in assumes]
        assumes, term_id <: term |- term_id <: term_id
    [assumes |- term <: super][term_id not in assumes]
        assumes, term_id <: term |- term_id <: super

    ;; #`
    [assumes |- subterm <: term]
        assumes |- #` subterm <: #` term

    ;; term
    [assumes |- (\id1 `op2` cls1, term1) :: Term]
     [assumes |- (\id2 `op2` cls2, term2) :: Term]
      [assumes, id1 `op2` cls1, id2 `op2` cls2 |- term1 <: term2]
        [assumes |- cls2 <: cls1]
            assumes |- (\id1 `op2` cls1, term1) <: (\id2 `op2` cls2, term2)
    [assumes |- </ term11 `op2` cls1, term12 :: Term /> ]
     [assumes |- </ term21 `op2` cls2, term22 :: Term /> ]
      [assumes |- term11 <: term21][assumes |- term12 <: term22]
        [assumes |- cls1 <: cls2]
            assumes |- </ term11 `op2` cls1, term12 />
                    <: </ term21 `op2` cls2, term22 />

    [assumes |- (\id1 :: cls1, term1) :: Term]
     [assumes |- (\id2 :: cls2, term2) :: Term]
      [assumes, id1 :: cls1, id2 :: cls2 |- term1 <: term2]
        [assumes |- cls2 <# cls1]
            assumes |- (\id1 :: cls1, term1) <: (\id2 :: cls2, term2)
    [assumes |- </ term11 :: cls1, term12 /> :: Term]
     [assumes |- </ term21 :: cls2, term22 /> :: Term]
      [assumes |- term11 <: term21][assumes |- term12 <: term22]
        [assumes |- cls1 <# cls2]
            assumes |- </ term11 :: cls1, term12 />
                    <: </ term21 :: cls2, term22 />



;; TODO
    ;; type
    [assumes |- sort :: Sort][assumes, id `op2` cls |- type : sort]
        assumes |- (id `op2_` cls) -> type : sort
        assumes |- (id `op2_` cls, type) : sort
    [assumes, id :: cls |- type :: Type][assumes, id :: cls |- type : sort]
        assumes |- (id -:: cls) -> type : @@ id :: cls, sort
        assumes |- (id -:: cls, type) : @@ id :: cls, sort

    ;; sort
    [assumes, term_id :: cls |- sort :: Sort]
        assumes |- (@@ term_id :: cls, sort) : #` (@@ term_id :: cls, sort)
        assumes |- (?? term_id :: cls, sort) : #` (?? term_id :: cls, sort)

    ;; app
    [assumes |- f : (id `op3_` cls) -> type][assumes |- a `op3` cls]
            assumes |- f a : type[id := a]

    ;; assert
    [assumes |- term `op3` cls][assumes |- term : type]
        assumes |- (term `op3` cls) : type




