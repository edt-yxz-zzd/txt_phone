
term : type : sort : ...    ;    sort :: #
    abs: (\x.body) must be term; since it has no value, is not type.
    any: (@x.body) get input of it's value, must be type.
    any*: (@[n]x.body) get input of it's n-level below value.
    [S::#; T'::#; T:T'::#; R:T->S:#S::#; M:@x:T. (R x:S):#S::#]
        \x:T.(M x: R x: S :: #)   :   @x:T.(R x : S :: #)  :  S :: #
            x not affect S
    #[n] :: # --> # :: ##
        [s :: #] |- [#[1] s :: #; s : #[1] s; #[n] #[m] s === #[n+m] s]
    \x::#. \y::#. x :: # --> # --> #
    [S::# --> #; R:\x:#. S x; M:@x:#. R x : S x]
    [M:\@x::#. R x] not \x::#
    [R:\x::#. S x] or [R:\@x::#. S x]
    [S:# --> #] or [S:\@x::#. 
    \@x::#.(M x : R x : S x :: #)
        :   @@x::#.(R x : S x :: #)
        :   #@x::#.(S x :: #) :: #
        ;; #@x::#.(S x :: #) : #[1](...) === #@x::#. #[1](S x)
        ;; #[1] (#@x::#.M) === #@x::#. #[1]M
        ;; #[1] (M N) === ((#[1]M) N)
        ;; #[1] #[2] x === #[3] x === ###x
    @@s::#.@R:s.@_:R.R = @@s::#. (\@s::#. @R:s.@_:R.R) s
    \@s::#. @R:s.@_:R.R  :  @@s::#.s
    @@s::#.s  :  #s
    no [@@s::#.s  ::  #] !!
    \x:T.(M x: R x: S)   :   @x:T.(R x : S)  :  S
    \@x::#.(M x : R x : S x :: #)   :   @@x::#.(R x : S x :: #)
        :  @@@x::#. (S x :: #) :: ##  !!!!!!!!! new symbol ##
    \@x::#.(M x : R x : S x)   :   @@x::#.(R x : S x : #(S x))
        :  @@@x::#. S x : @@@@x. #(S x)
        : ... : @[n]@@@x::#. #[n](S x)
    \@s::#. (@R:s.@_:R.R : s : #s)  :  @@s::#. (s : #s)  : #s
name space of identity:
    virtual_id = solid_id '?'
    local_call_with_parameters = id '@' ;; id@ === id(auto insert args...)
    alphas = [:alpha:]+
    op = ([:punct:] \ [{}[\]_,;()'"`])+
    quantifier = '@' | '?' op?
        ;; ends with ('.' \s)
        ;; usr def:
        ;;  @x<- P. M x = @ x : predicator2domain(| P |). P x -> M x
        ;;  def @[]<-[P].[M] = @x:predicator2domain(| P |). P x -> M x
        ;;  ??x:T. P x = exists at most 1
        ;;  def ??[]:[T].[P] = @x,y:T. P x -> P y -> x == y
        ;;  def ?+[]:[T].[P] = ?x:T.P x = @@s. @R:s. (@x:T. P x -> R) -> R
        ;;  def ?/[]:[T].[P] = (??x:T.P x) /\ (?+x:T.P x)
    prime_op = op \ ([@?.#:] op? | op? [@?.#:] | quantifier | '\' | '@@' | '\@' | '#'+ | '.' | '..' | '...' | ':' | '::' | ':::' | '|')
        ;; not op \ (op '-' (?=alpha) | (?<=alpha) '-' op)
        ;;      since a->b, x<-P,
        ;;      use (op '_' alpha) instead of (op '-' alpha)
        ;; '|' used in '(| ... |)'
        ;; s::# => [s == #[0]s; #s == #[1]s; ##s == #[2]s; ##[n]s==#[n+1]s; #[n]s:#[n+1]s; #[n]s::#]
        ;;      cannot add / compare sorts
        ;;          ##s##s is syntax error
        ;;          s == #s is syntax error
        ;; xxx@yyy = yyy is module/record, xxx is field
        ;;      ++@Mod instead of Mod@++, or Mod.++
        ;;      Mod should be alphas.
        ;; a : @@s::#. @R:s. @_:R. R = \@s. \R. \r. r
        ;;      ::#. @ ==[prime_op not ends with [.#]]=>> ::#. @ ==>> :: # . @
        ;;      fatal: what type of type of a??
        ;;      !!!!!!!!!!!!!!!!!!!!!!
        ;; def T -> M = @_:T.M
        ;; def A \/[s] B = \/-call(| s, A, B |)
        ;; def \/-call(| s::#, A:?_s1::#, B:?_s2::# |) : s = \/-def(?_s1, ?_s2, s, A, B)
        ;; def \/-def(| s1,s2,s::#, A:s1, B:s2):s = @R:s. (A->R) -> (B->R) -> R



