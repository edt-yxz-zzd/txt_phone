
;; construct { :: : }
[context, (term_id : type = term; []) |- body :: set][context |- set <# Term]
    context |- (let term_id : type = term in body) :: set
    [context, (term_id : type = term; []) |- body : cls]
        context |- (let term_id : type = term in body)
                : (let term_id : type = term in cls)


[context, (set_id <# Term = set; []) |- body : cls]
    context |- (let set_id <# Term = set in body)
            : (let set_id <# Term = set in cls)
[context, (set_id <# Term = set; []) |- body :: cls]
    context |- (let set_id <# Term = set in body)
            :: (let set_id <# Term = set in cls)

;; <:
[context |- (let id of2 cls = def in body) ::<# Term]
    [context |- body[id := def] <: super]
        context |- (let id of2 cls = def in body) <: super
    {-
    ;; or
    [id' not in vars(super) + vars(let...) + vars(context)]
        [context, (id of2 cls = def; []) |- body <: super.replace(id := id')]
    -}
    [context |- sub <: body[id := def]][sub =/= let...]
        context |- sub <: (let id of2 cls = def in body)







;; =>
[context |- (let id of2 cls = def in body) ::<# Term]
 [context |- body[id := def] => body']
    context |- (let id of2 cls = def in body) => body'













;; 
