
(i-: I) -> (o-: O i : s) : s : #` s : #`#` s
(i-:: ##) -> (o-: O i : S i) : @@ i :: ##, S i : #` @@ i :: ##, S i
    ???   #` @@ i :: ##, S i == @@ i :: ##, #` (S i)
        @@ i :: ##, S i                         : @@ i :: ##, #` (S i)
        (i-:: ##) -> (o-: #` (O i) : #` (S i))  : @@ i :: ##, #` (S i)
        error!
    #` @@ i :: ##, S i == @@# i :: ##, #` (S i)
    #` #` @@ i :: ##, S i == @@## i :: ##, #` #` (S i)
;; error: (i-: I) -> (o-:: ##) : #` o : #` #` o
(i-: I) -> (o-:: ##) :: ###
(i-:: ##) -> (o-:: ##) :: ###


nat :  (s-:: ##) -> (R-: s)
    -> ((_ -: R) -> (_ -: R))
    -> (_ -: R)
    -> (_ -: R : s)
    :  @@ s :: ##, s
zero :  nat = \s R r2r r, r
succ :  (s-:: ##) -> (nat s -> nat s)
    = \s R_r2r_r_to_r, \R r2r r, r2r (R_r2r_r_to_r R r2r r)
nat_ind :  (s p -:: ##) -> (P-: nat s -> p)
        -> P (zero s)
        -> ((n-: nat s) -> P n -> P (succ s n))
        -> ((n-: nat s) -> P n)
        :  @@ s p :: ##, p
properties{nat_ind} :  (s p q -:: ##) -> (P-: nat s -> p)
                    -> (f0-: P (zero s))
                    -> (next-: (n-: nat s) -> P n -> P (succ s n))
                    -> ?? f -: (n-: nat s) -> P n,
                        f (zero s) ==[p, q] f0
                        /\ ((n-: nat s) -> f (succ s n) ==[p, q] next n (f n))
properties{nat_inv}
    :  (s p -:: ##) -> (m n -: nat s) -> (succ s m ==[s, p] succ s n) -> m ==[s, p] n
properties{nat_zero_unique}
    :  (s p -:: ##) -> (n -: nat s) -> not p (succ s m ==[s, p] zero s)


