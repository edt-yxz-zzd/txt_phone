
Nat = O | S Nat

inductive:
    every element is finite without recursion
    Nat === S* O

    ;; how to introduction "@a:XX. P a" by "finite" constructors???
    nat_ind:
        @P:O -> * . @R. P O -> (@n:Nat. P n -> P (S n))
        -> @n:Nat. P n
        ;; result is @x:XX. P x

co-inductive:
    infinite; allow recursion; ????? allow another constructor????
    Nat === S* O | S{oo} | ???



?x:A. P x = @R. (@x:A. P x -> R) -> R
    = Exists A P == Any A P == (A -[x]->, P x) == (A >- x, P x)
    Exists : @A : * . (A -> *) -> * = \A. \P. ?x:A. P x

    ;; the only constructor
    exists : @x:A. P x -> Exists A P
           = \x. \Px.  \R. \x2Px2R. x2Px2R x Px
    ;; NOTE: exists is a definition
    ;;  so that it can be used in proof of P (exists ...)

    exists_ind:
        @Q. @R. (@x:A. P x -> Q (exists A (P x)))
        -> @e:Exists A P. Q e

@x:A. P x = All A P = A -[x]-> P x = A>-x -> P x
    ;; to make it clearly that "@x:A. P x is an arrow!!!

    ;; the ??only?? constructor
    all : All A P -> All A P  ;; ERRRRRRRRRRROR!!!!!!!!!
    all = \x2Px.   \x. x2Px x
    all_ind:
        @Q. @R. (??????????) -> @a:All A P. Q a
    lambda-abstraction is the most basic constructor, which cannot be expressed by another constructors.

