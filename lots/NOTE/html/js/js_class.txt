
e ../lots/NOTE/html/js/js_class.txt


class User { 
  constructor(name) { this.name = name; } 
  sayHi() { alert(this.name); } 
  static staticMethod() { 
    alert(this === User); 
  }
  // Class properties
  yyy = 1;
  // Static properties are also possible, just like regular class properties:
  static xxx = 1;
  // Unlike protected ones, private fields are enforced by the language itself.
  #zzz = 1;
  #f(){}
} 

// Usage: 
let user = new User("John"); 
user.sayHi();





getter,setter:
class User { 
  constructor(name) { 
    // invokes the setter 
    this.name = name; 
  } 
  get name() { 
    return this._name; 
  } 
  set name(value) { 
    if (value.length < 4) { 
      alert("Name is too short."); 
      return; 
    } 
    this._name = value; 
  } 
}
Object.defineProperties(User.prototype, { 
  name: { 
    get() { 
      return this._name 
    }, 
    set(name) { 
      // ... 
    } 
  } 
});




class MyClass { 
  prop = value; // field 
  constructor(...) { // constructor 
    // ... 
  } 
  method(...) {} // method 
  get something() {} // getter method 
  set something(name) {} // setter method 
  [Symbol.iterator]() {} // method with computed name/symbol name 
  // ... 
}







类继承:
class Animal { 
  constructor(name) { 
    this.speed = 0; 
    this.name = name; 
  } 
  run(speed) { 
    this.speed += speed; 
    alert(`${this.name} runs with speed ${this.speed}.`); 
  } 
  stop() { 
    this.speed = 0; 
    alert(`${this.name} stopped.`); 
  } 
} 

class Rabbit extends Animal { 
  //override+super
  constructor(name, earLength) { 
    super(name) // 此句必须存在，且在this使用之前
    this.earLength = earLength; 
  } 
  // ...
  hide() { 
    alert(`${this.name} hides!`); 
  } 

  //override+super
  stop() { 
    super.stop(); // call parent stop 
    this.hide(); // and then hide 
  } 
} 
let rabbit = new Rabbit("White Rabbit");
rabbit.run(5); // White Rabbit runs with speed 5. 
rabbit.stop(); // White Rabbit stopped. White rabbit hides!
