
e ../lots/NOTE/html/js/js_len_hex_ord.txt

Arrow functions have no “this”
new function(xx){} //一次性构造函数
function Xxx(xx){}; new Xxx(xx); //构造函数

map.size
set.size
array.length
str.length
  py.len()
str.codePointAt(pos)
  py.ord()
String.fromCodePoint(code)
  py.chr()
Number(x).toString(16)
  py.hex()

'...' <==> "..."
  <==> py
`${expr}`
  <==> py: fr'{expr}'
    多行+格式化

str[0] <==> str.charAt(0)
str.indexOf("id")
  str.indexOf(substr, pos)
  str.lastIndexOf(substr, position)

includes, startsWith, endsWith 
  str.includes(substr, pos)

str.slice(start [, end])
str.substr(start [, length])


str.repeat(n)
str.trim()
  py.strip()

toLowerCase/toUpperCase

str.split(sep)
  sep不能省略
array.join(str)
  py: str.join(array)








Map is a collection of keyed data items, just like an Object . But the main difference is that Map allows keys of any type. 
The main methods are: 
new Map() – creates the map. 
map.set(key, value) – stores the value by the key. 
map.get(key) – returns the value by the key, undefined if key doesn’t exist in map. 
map.has(key) – returns true if the key exists, false otherwise. 
map.delete(key) – removes the value by the key. 
map.clear() – clears the map 
map.size – returns the current element count.

map.keys() – returns an iterable for keys, 
map.values() – returns an iterable for values, 
map.entries() – returns an iterable for entries [key, value] , exists for compatibility with Map .


new Map(k_v_pair_array)
  new Map([['a', 0], [1, 'b']])
  new Map(Object.entries(obj))


Set
new Set(iterable) – creates the set, and if an iterable object is provided (usually an array), copies values from it into the set. 
set.add(value) – adds a value, returns the set itself. 
set.delete(value) – removes the value, returns true if value existed at the moment of the call, otherwise false . 
set.has(value) – returns true if the value exists in the set, otherwise false . 
set.clear() – removes everything from the set. 
set.size – is the elements count.



set.keys() – returns an iterable object for values, 
set.values() – same as set.keys , for compatibility with Map , 
set.entries() – returns an iterable object for entries [value, value] , exists for compatibility with Map .


WeakMap/WeakSet



map/set/array:
  .keys() -> Iterable<k>
  .values() -> Iterable<v>
  .entries() -> Iterable<[k,v]>
vs:
Object.keys(x) -> Array<k>
Object.values(x) -> Array<v>
Object.entries(x) -> Array<[k,v]>

Object.getOwnPropertySymbols(x)
Reflect.ownKeys(obj)
Object.fromEntries

⚠Object.keys/values/entries ignore symbolic properties 
  Just like a for..in loop, these methods ignore properties that use Symbol(...) as keys. 
  Usually that’s convenient. But if we want symbolic keys too, then there’s a separate method 
  Object.getOwnPropertySymbols that returns an array of only symbolic keys. Also, there exist a method Reflect.ownKeys(obj) that returns all keys.





