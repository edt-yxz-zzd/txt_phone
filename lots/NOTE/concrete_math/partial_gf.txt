
__all__ = (R d pt ps z), (psum p q z n)


IIe z d = II z-2k {k=0..d-1}
IIo z d = II z-2k-1 {k=0..d-1} = IIe (z-1) d
ffx d s z = II z-s*k {k=0..d-1}/II z-s*k {k=d..-1}
ffx(d,s,z)/s**d = II z/s-k {k=0..d-1}/II z/s-k {k=d..-1}
    = fall(z/s,d)
ffx(d,s,z) = s**d fall(z/s,d)
IIe z d = ffx(d,2,z) = 2**d fall(z/2,d)

p d z = a polynomial of degree d about z, for [NN d][CC z]
    ie: 
        (p d z)    : z**d, fall(z,d), IIe(z,d), IIo(z,d)
        (p d z)/d! : z**d/d!, C(z,d), ...
        p(d, z+z0) : 

q n, for [NN n]
    ie:
        n!
        fall(n,m)     # C(n,m)=fall(n,m)/m!
        fall(m,n)     # C(m,n) # since p d z / d!
        n**m, 1/n
        H[n]
        Bernoulli[n]
        Fibonacci[n]
        Stirling[n,m]
        Stirling[m,n]
        Stirling{n,m}
        Stirling{m,n}
        Eulerian<> <<>>
        

pgf p q z = sum q(i) p(i,z) {~i}
TO CALC: psum p q z n = sum q(i) p(i,z) {~i=0->n}, for [NN n][CC z]


[ipgf p f = q] iff [f = pgf p q] # decompose f into p's # same f diff q
pgf pt (ipgf ps f) # same q diff f


mgf p r z0 z = sum r(i) p(d,z0+i*z) {i=0..d}

dgf p r z = sum r(i) p(d,z+i) {i=0..d}
[idgf p f = r] iff [f = dgf p r z][deg(f) = d]
sdgf r = dgf \d,x:x**d r
isdgf f = idgf \d,x:x**d f

V p d z = [p(d,z), p(d,z+1),..., p(d,z+d)]' = [p(d,z+i) for i=0..d]'
M d z = [[(z+row)**col for col=0..d]; for row=0..d]
M1 d z = [[(1+z*row)**col for col=0..d]; for row=0..d]
[1  1 ]   [1 0][1 0]TTT
[1 1+z] = [1 z][1 1]

[1   1        1    ]   [1 0     0   ] [1 0 0]TTT
[1 (1+z)   (1+z)**2] = [1 z    z**2 ] [1 1 0]
[1 (1+2z) (1+2z)**2]   [1 2z (2z)**2] [1 2 1]

M1 d z = [[(1+z*row)**col]] = [[(z*row)**col]]*[[C(row,col)]]'


def (R d pt ps z) if [V pt d z = (R d pt ps z) * V ps d z]
    R d is a (d+1)**2 matrix
def (SR d z) if [[z**i for i=0..d]' = (SR d z) V (\d,x:x**d) d z]
ISR d z = (SR d z)^-1 = [[C(row, col) for col=0..d]; for row=0..d]

def (COEFF d p) if [[z**i for i=0..d]*(COEFF d p) = p d z]
    p d z = sum c(k)z**k {k=0..d}
    V p d z = (M d z) (COEFF d p)
    p d (z+i) = sum c(k)(z+i)**k {k=0..d}
        = sum c(k) sum C(k,j) z**j i**(k-j) {j} {k=0..d}
        = sum sum c(k) C(k,j) i**(k-j) {k=0..d} z**j {j=0..d}
        = sum sum c(k) C(k,col) row**(k-col) {k=0..d} z**col {col=0..d}
    A(row, col) = row**-col sum c(k) C(k,col) row**k {k=0..d}
    V p d z = A [z**i for i=0..d]'
    B(row, col) = row**col
    A = [[row**-col]] .* ([[c(col) row**col]] [[C(row,col)]])
    A = [[row**-col]] .* ([[row**col]] diag(COEFF d p) [[C(row,col)]])

def CM d p = [[row**-col]] .* ([[row**col]] diag(COEFF d p) [[C(row,col)]])
    V p d z = (CM d p) [z**i for i=0..d]'
    V pt d z = (R d pt ps z) * V ps d z
    (CM d pt) [z**i for i=0..d]' = (R d pt ps z) * (CM d ps) [z**i for i=0..d]'
    (R d pt ps z) = (CM d pt) (CM d ps)^-1






























































