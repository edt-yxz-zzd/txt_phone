page 172 
20. Group Theory: Finding Symmetries with Sets 
state -> equivalent states -> equivalent state set 
    -> map from state to equivalent state -> inversable transform 
    -> self/closed bijection -> bijection set
    state | bijection | function composition
    {x, y} | {f, g} | {.}
    f(x) g(x)... (f.g), (g.f)...

symmetry ::== equivalent state set
group ::== bijection set








page 203
22. The Turing Machine 
Going Meta: The Machine That Imitates Machines
    // universal Turing machine
    The real genius of Turing was his realization that this kind of machine was enough to be able to imitate itself. Turing was able to design a Turing machine whose input tape contained a description of another Turing machine¡ªwhat we would now call a program. This single machine, known today as a universal Turing machine, could simulate any other Turing machine and therefore could be programmed to perform any computation!




page 225
24. Calculus: No, Not That Calculus¡ª¦Ë Calculus 
    Written formally,¦Â saysthis:
    ¦Ëx.Be = B[x / e] if free (e) is subset of free (B[x / e])
    That condition on the end is why we need ¦Á: we can only do ¦Â reduction if doing it doesn't create any collisions between bound identifiers and free identifiers. If the identifier z is free in e, then we need to be sure that the ¦Â reduction doesn't make z become bound. If there is a name collision between a variable that is bound in B and a variable that is free in e, then we need to use ¦Á to change the identifier names so that they're different.