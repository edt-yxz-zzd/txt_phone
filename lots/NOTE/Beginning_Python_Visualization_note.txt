Beginning_Python_Visualization
FINDING WHAT YOU¡¯RE LOOKING FOR IN COMPLEX MODULES
    So how did I figure out ?????????????????????????? holds the supported file types? Did I read the entire manual? Hardly. Some of the packages we work with are really large, and mastering all the intricacies of variables and objects that control their behavior is not a trivial task. So I use some quick-and-dirty tricks, and although they might not be the ¡°proper¡± way to do things, they help me get the job done, and that¡¯s what really counts. So let me show you what I¡¯ve done to figure out the available file types.
    To figure out the base file types, I issued ????????? with a bogus file format: ????????????????. The result was, of course, an exception (??????????) but I also received some useful information: ?????????????????????????????????????????????????????????????????? But that¡¯s not exactly what I wanted; I wanted an enumeration of the file formats so I can index them rather than parse a string returned by an exception. So I traced back the source of the error from the exception output: the error originated in file ????????????????????????????????????????????????????????? line 1290. Next, I opened up the file ????????????????, jumped to line 1290, and started reading the code. Python is a very readable language, and it didn¡¯t take me long to figure out that the formats are stored in variable ???????????????????. Since ???? points to the container object, I scrolled up some more and found that the calling method is named ???????????? and is part of the class ????????????????, hence ??????????????????????????.
    Reading the exceptions generated by matplotlib, along with exploring modules and their names, also helped me find the objects ???????????????????????? and ??????????????????????????????????????, both listing possible colors (see the section ¡°Colors¡± later in the chapter). That being said, reading the manual is also a very viable option.

-- LOL, MAKE EXCEPTION AND DEBUG! ANTI-MANUAL!!!