# simple graph
G = (V, E)
    type Set :: * -> *
    type UnorderedPair :: * -> *
    type Vertex :: *

    newtype SimpleGraph = (Set Vertex, Set Edge)
    newtype Edge = UnorderedPair Vertex

    V = vertices_of :: SimpleGraph -> Set Vertex
    E = edges_of :: SimpleGraph -> Set Edge
    endvertices_of = ends_of :: SimpleGraph -> Edge -> UnorderedPair Vertex

#graph = (vertices, edges)
graph_order_of = num_vertices_of :: SimpleGraph -> UInt
num_vertices_of = length . vertices_of

adjacent
    endvertices of an edge are adjacent in G.
    two edges with a common end are adjacent.
incident
    an edge and its endvertex are incident.
join/connect
    an edge join/connect its endvertices.
neighbor
    is_neighbor_of v u = exists an edge connect {v,u}


##############################
# multigraph
MG = (V, E, ends_of)
    type Set :: * -> *
    type UnorderedPair :: * -> *
    type Vertex :: *
    type Edge :: *

    newtype MultiGraph = (Set Vertex, Set Edge, Edge -> UnorderedPair Vertex)

    V = vertices_of :: MultiGraph -> Set Vertex
    E = edges_of :: MultiGraph -> Set Edge
    endvertices_of = ends_of :: MultiGraph -> Edge -> UnorderedPair Vertex

parallel/multiple edge
    [distinct edges to have the same pair of endvertices] ==>> [those edges are parallel]
    multiple edges are parallel.
loop
    edges with only one end.

Graph = SimpleGraph | MultiGraph
degree_of :: Graph -> Vertex -> UInt
    #each loop being counted twice

isolated vertex
    a vertex of degree 0 is an isolated vertex.

k-regular
    If all vertices of G have the same degree k, the graph is k-regular
cubic graph
    3-regular graphs are also called cubic.

