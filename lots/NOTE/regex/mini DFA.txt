Elemnts Of The Theory Of Computation (2ed)(1998)(Harry Lewis)
[page 98-99]

refine partition
    -- from bottom come up
    equivalence classes of ~M : [=st=]_(M) = {st} -- too refinement
    equivalence classes of ~L : [=st=]_(L) = {st' | L(st) = L(st')} -- what we finding
    equivalence classes of ===[n] : [=st=]_n == [=st=]_(L); n == len(M.states)
        -- why n??
        -- if not stop, then we cut at least (n+1) times
        -- num equivalence classes grows per cut ==>> more than n classes
        -- impossible
    .... go up
    equivalence classes of ===[i+1] : [=st=]_(i+1) = {st' | st' in [=st=]_i, all t: st'->t->[=x=]_i<-t<-st}
    equivalence classes of ===[0] : [=st=]_0 = {st' | [final st] == [final st']} -- there are at most two classes, finals ant nots
    

[page 330] Chapter 7: NP-COMPLETENESS
    Corollary: Unless P = NP, there is no algorithm which, given a regular expression or a nondeterministic finite automaton, constructs the minimum- state equivalent deterministic finite automaton in time that is polynomial in the input and the output. 