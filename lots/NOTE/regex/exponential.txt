Elemnts Of The Theory Of Computation (2ed)(1998)(Harry Lewis)
[page 100] -- NDFA -> DFA
    Recall that there is a nondeterministic finite automaton with n + 1 states that accepts the same language (Example 2.2.2). Although deterministic automata are exactly as powerful as nondeterministic ones in principle, determinism comes with a price in the number of states which is, at worst, exponential. To put it in a different way, and in fact a way that anticipates the important issues of computational complexity discussed in Chapters 6 and 7: When the number of states is taken into account, nondeterminism is exponentially more powerful than determinism in the domain of finite automata.

[page 103] -- NDFA -> regex
    -- K:States; H:Alphabet; A:transition function/goto table; s:initial state; F:finals
    Turning a given finite automaton M = (K,H,A,s,F) (deterministic or not) into a regular expression generating the same language (Theorem 2.3.2) involves computing |K|^3 regular expressions R(i,j,k). However, the length of these expressions is in the worst case exponential: During each iteration on the index k, the length of each regular expression is roughly tripled, as it is the concatenation of three regular expressions from the previous iteration. The resulting regular expressions may have length as large as 3^|K| -- an exponential function of the size of the automaton. 



[page 104] -- equivalent testing: NDFA or regex
    Given two language generators or two language acceptors, one natural and interesting question to ask is whether they are equivalent that is, whether they generate or accept the same language. If the two acceptors are deterministic finite automata, the state minimization algorithm also provides a solution to the equivalence problem: Two deterministic finite automata are equivalent if and only if their standard automata are identical. This is because the standard automaton only depends on the language accepted, and is therefore a useful standardization for testing equivalence. To check whether two deterministic automata are identical is not a difficult isomorphism problem, because states can be identified starting from the initial states, with the help of the labels on the transitions.
    In contrast, the only way we know how to tell whether two nondeterministic automata, or two regular expressions, are equivalent is by converting them into two deterministic finite automata, and then testing them for equivalence. The algorithm is, of course, exponential.

[page 104] Theorem 2.6.1:
exponential:
    NDFA -> DFA   -- since output is exponential
    NDFA -> regex -- since output is exponential
    --- below unsovled polynomial possible??
    ?? NDFA ~==~ NDFA
    ?? regex ~==~ regex
polynomial:
    regex -> NDFA
    DFA -> mini DFA
    DFA ~==~ DFA



[page 104-105] three important questions that remain unresolved
A) Is there a polynomial algorithm for determining whether two given nondeterministic finite automata are equivalent, or is the exponential complexity in (f) inherent?
B) Can we find in polynomial time the nondeterministic automaton with the fewest states that is equivalent to a given nondeterministic automaton? We can certainly do so in exponential time: Try all possible nondeterministic automata with fewer states than the given one, testing equivalence in each case using the exponential algorithm in (f). 
C) More intriguingly, suppose that we are given a nondeterministic finite automaton and we wish to find the equivalent deterministic finite automaton with the fewest states. This can be accomplished by combining the algorithms for (a) and (d) above. However, the number of steps may be exponential in the size of the given nondeterministic automaton, even though the end result may be small -- simply because the intermediate result, the unoptimized deterministic automaton produced by the subset construction, may have exponentially more states than necessary. Is there an algorithm that produces directly the minimum-state equivalent deterministic automaton in time which is bounded by a polynomial in the input and the final output?
A) polynomial ?? NDFA ~==~ NDFA
B) polynomial ?? NDFA -> mini NDFA
C) polynomial (input, output) ?? NDFA -> DFA  -- to avoid exponential intermediate to-be-merged states

-- negative
As we shall see in Chapter 7 on NP-completeness, we strongly suspect that all three of these questions have negative answers although at present nobody knows how to prove it.


