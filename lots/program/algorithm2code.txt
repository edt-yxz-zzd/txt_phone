
Does there exist a algorithm language rather than 
pseudo ones to avoid the human compiler?



May general metaprogramming get it?
imperative programming language ~ machine
source code                     ~ assembly code
algorithm description           ~ C code // portable

It seems a little strange to implement algorithms 
as these books: Algorithms in C/C++/Java, or
Numerical Recipes in Pascal/FORTRAN/C/C++.
What stuff do they really want to provide? 
Algorithms? Language styles? Bug-free codes?

Can we write an algorithm in more abstract way
to make it easy to port to many languages
(C/C++/Java/Python...) in their 'native' styles?

Since we human are such a compiler to port algorithms,
it is possible to let computer do the same job.
This can avoid to write a wrapper to 'nauoty', or
to implement AKS primality test.


There are many implements for the same algorithm.
So, I think we should configure the translation.
I like the use of 'concept' in boost library.
C++ Templates do a good job, but there are 
more details to be argued.


1) the access order in a container
2) the underly implement algorithm
...

I think the C++ concepts requires well-defined forms.
When adding a new categorypolicy/interface/property/mid-class
or just changing a name, there are maybe a few work.


'Make' is a general purpose tool. 'xxx.o : xxx.c' is not enough.
Any headers 'xxx.c' depended directly or indirectly should be included.
We can run another program to generate the Makefile.
But such program is non-trival! It has to know lots of the standard.
If we split source file such that names of the directly included headers
in a separate file, the task will much easier.
What if we keep the source code cleaner?
Why we need 'decltype', 'constexpr', or 'static_assert',
if we generate the source code using some tools like Python?
Instead of C++ TMP and marco, we can generate code from 
algorithm's language-independent representation.
 "language independent" software design notations












