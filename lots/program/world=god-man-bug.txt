past destroy info store read energe space/matter
lived in past
never dead man - lost memory; not himself or fully not change or bound chaos or diverge

I'm big one , not small bitch. Everything should be big. that was better.

world not exist
one world
world = god ->- man ->- bug

    math - man - machine
    integer - string - bytes
    set/tuple - dict/record - list/array
    tree/DAG/digraph/graph - modular/document - algorithm


i) input-output
    god man bug world
    source filter sink concept
    world does not exist!!
    world contains no bugs.
ii) left/right I/O
    parameter    share/side-effect/broatcast
    return       depend/condition/global/background/mutable/context-sensible

type static:god; dynamic:world


class C:B{} c;
a) static
    i) input-output:
        1) call 'class' : class('C', [B], ...); make a type named 'C'
        2) call define_object('c', C, ...); declare a object;
    ii) left/right I/O
        B is god-world
        'C:' depends on B, that 'C:' right-input is bound to B left-output;
        C is god-world
b) dynamic
    i) input-output:
        1) call B.__new__
        2) call C()
        3) call ~C()
        4) call B.__del__
    ii) left/right I/O
        # life time
        C is world, that world-world. not exist.
        C::B is man-man;
        C::C is man-world;
        C::B right-I/O is bound to C::C left-O/I
        c is god-man
        
        if 'const C c', then c is god-world
        

abstract
    1 or Nothing in Haskell
    function without signature in C++
    unbound member/property
    mutable object
    some_a type




static: # when bridge ~ inherit
world-?? = not-exist-at-all # comment
god-world = god
    builtin type in C++
    constant value
god-god = share
    concrete base class
god-bug = macro
    conexpr macro value
god-man = some a / abstract value
    function without signature in C++
    namespace # increase mutable
    mixin class # abstract??
bug-?? = bug
    i.e. not a valid C++ source at all
man-world = man
    template function/template final class
    pure-function
man-god = ??
    template concrete base class
man-bug = ??
    conexpr macro function
    conexpr method??
man-man = ??
    template mixin class
    # template abstract class??

dynamic:
world-world = world # not exist
world-god = concept
world-bug = listener / black hole
world-man = server # other thread
god-world = constant
    immutable object
god-god = ??
god-bug = sample input??
god-man = property
    unbound data member # "this" is the background
bug-world/bug = real bug does not exist
bug-god = exit/abort # noreturn
bug-man = ??
man-world = pure
    pure-function
man-god = output
man-bug = input
man-man
    unbound method

!!!!!! life time of object !!!!!!!!!!!!!!!!!!11



namespace
    # no bugs
    sharable, mutable # right I/O free
    god-man
    
    class-namespace inherit:
        public-sharable, immutable
        god-god
        
        final class:
            god-world
    
    but note the compile model, declaration is not definition
    class (type object) itself is mutable,
    depends on which definition is linked.
    class: god-man; final class: god-bug
    
    class instance (normal object) 
thread fork/join
    right I/O join/fork
    
executing data flow
    entity
        1) object / callable(template/function)
        2) executable(thread / process / script) / DLL / memory / I/O
        3) concept / human
    world-?? = other thread / other machine / unknown world
    god-world = threadlocal immutable object / ROM / private concept
    god-god = shared immutable object / physics address / public concept
    god-man = property|unbound data member / read-only shared memory / dead man|role|non-universal concept
    god-bug = const reference|abstract value(without signature) / input queue / Bible
    man-world = pure-callable / no I/O thread(daemon server) / human
    man-god = output / GUI DLL / writer??
    man-man = unbound method|decorator / wrapper(shell) / ??
    man-bug = const method / snipper / churchman
    bug-world|bug = there are no bugs in real world
    bug-god = exit|abort / ?? / ??
    bug-man = exit handle?? / ?? / ??
    
    
    
object life time/scope
    left Derived depends on right Base, con/destruct seq reverse the data flow seq.

the void type
    void a; is available
    &a == NULL
    *(T*)NULL -> (&T)(&void) fail
    but T(*(void*)NULL) = T(&void) is work
    set<a> is dict<a,void> more easier


what mutable which not??
    struct immutable # array
    reference immutalbe # const ptr
struct holded container # Functor
    general set required Eq
        if the result type is Eq too
    sorted set - lt
        if the result type holds the order
    hash set - hash
        if the result type holds the hash
    using reversible map
        fmap f set<a, g> -> set<f a, f . g>
        set<a,g> = (fmap (inv g) set<a, g>, g) = (set<inv g a, id>, g)
        set<f a, f . g> = (set<inv (f.g) (f a), id>, f.g) = (set<inv g a, id>, f.g)
    
    dict's keys make up the dict structure
    but the value are mutable
    set<a> is dict<a,void>
    
    tuple/C-struct and array has a immutable struct
    
    func signature union | Haskell data type = union | python return tuple = struct
vivi above Functor
    Framework : exec seq version Functor'
singleton obj vs atomic op/critical code
undoable static in exec seq # cons/des
    exec seq : next statement inherit prev static env    
        new name/address
        new layout/space
        new object <- inplace-new; // setup type constraints on the name
    
    refinement output field - exception
        no! completely different union/concate model
        but has some common pattern
    uninitialized ; lazy ; noreturn...
    
    generalize:
        using some structure to control other
        static-type-system ==> control exec call
        exception-system ==> RAII
        direct-graph ==> protocol/FSM
    static homo and dymanic homo and protocal(interpreter runtime) homo
        # homorphism
        source exec / binary exec / script exec


the left/right boundary
    # why useful??
    # if given two box and both man-god
    # then they shouldnot be the same object
    # because modify one will affect another, 
    # that fails the assumtion
    which box entity??
    which self?? # left
        statement
        scope # i.e. function
        namespace/class
        object
        function point object or function object # ptr or ref
        array ptr object or array ref
        
    which other/env?? # right
        # env includes: object to which sth bound; 
        # output env(where require the output)
        #     size of () : require a type
        #     ;T a = f(); require a T&&
        #     ; f(); (no assign)
        #     type deduce
        # locals is env
        #     a = xxx; // for assignment ; locals is the 'other'
        global
        thread local
        file scope
        local scope
        object to which be bound
        I/O env / OS / server
        debug env - it was turned on for every entity while debugging
        compiler
        hardware maker
        user
        coroutine
    what period?? # the preiod that self plays with box
        # shrinking the period will simpilify the box I/O
        function scope
        between fances
        atomic op
        object life time
        thread life time
        each load / process life time / interpreter life time # hash algorithm
        each link
        from excutable nearest modified time to next one??
        each DLL update
        each compile
        each version
        each time ROM fresh
        buffer fresh
        each hardware update
        each protocol version

    what kind of left-output??
        priviliage // read/write control / visiblity??
        sometimes only type info for deduce
        the std name?? no alias or typedef or ref??
        

link env control
    .lib or .dll
    better version control
    void f<link g>(){g()...}
    f<...>
a language should setup supper-virtual-concept graph and generate doc


override
    if base class wraps derived class, how to use original base class implement?? pass a base virtual function table??
    R f(args...) using override f(bargs...)
        do sth...
        bargs = ??(args...)
        br = call derivedmost override f(bargs...)
        r = ??(br)
        do sth...
        return r
    if this class not define override f(bargs...), then abstract





same style function/API, but diff implement/body:
    to support mini-lang/domain-languages at compile time
    

"I swear":
    user defined new/delete not be I/O?? no side-effect??
    so, at compile time constexpr use ::new/delete??
    stack is private, what about heap?? does new/delete is I/O??




unify concept - same size type
    i.e. pointer
    can memory remap ??
    if each block of memory shift and each ptr shift, yet
    so, even in union, ptr should alias to ptr
    these types are groupped by usage
    another type system!!
    
"as a":
    extend - "is a"/"homo to"
    mixin - "using implement"
    

























