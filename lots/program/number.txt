real_number_with_error
interval - [x,y], for x,y are both rational, x <= y
best_rational_within_an_interval: if 0<x<y, (x,y) => ans in {z1~z4, x,y}
minimal_interval_extension_with_denominator_bound: [x1,y1], x1.d|y1.d <= D, x1 <= x <= y <= y1
    for a.denominator <= D
    search_second_half_first([a,b],D) = let ad = a.denominator, assert ad <= D
                                        if b-a < 1/(ad*D), return a
                                        let k = best_rational_within_an_interval[a+(b-a)/2,b]
                                        let d = k.denominator
                                        if d == D, return k
                                        else if d < D, return search_second_half_first([k,b],D)
                                        else return search_second_half_first([a,a+(b-a)/2],D)

    x1 = search_second_half_first[floor(x*D)/D,x]
sqare_root_of_integer - continued fraction
sqare_root_of_integer_with_error_bound: 

连续函数
无穷阶可导 - 麦克劳林展式
初等函数