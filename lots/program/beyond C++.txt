
full_object = (type_ptr, layout_object) if of abstract type else (layout_object,)
    C++ vector<T> = collection of full_object of type T
    even worse, in some C++ implement (almost all main ~)
        C++ layout_object = object with sub-full_object
        so, for abstract class, there're dozens of type_ptr
        
    we can save space by:
        layout_object = object with sub-layout_object
        vector<T> = (type_ptr of T, collection of layout_object)


    optional for polymorphism:
        def EqSizeSubtype = subclass with same size of superclass
        i.e. object_ptr and buildin-reference are EqSizeSubtype
        vector_eqsize<T> = collection of full_object of subtype of T


