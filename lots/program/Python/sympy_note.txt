x, a, b, c, r1, r2 = symbols('x,a:c,r1:3')

--------------------------------- coeff
>>> (sqrt(5)*pi+pi+sqrt(x)*y+y*y).coeff(pi)
1 + sqrt(5)
>>> (sqrt(5)*pi+pi+sqrt(x)*y+y*y).coeff(y)
sqrt(x)

------------ as ------------
'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 
'as_coeff_exponent', 'as_coeff_factors', 'as_coeff_mul', 
'as_coeff_terms', 'as_coefficient', 'as_coefficients_dict', 
'as_content_primitive', 'as_expr', 'as_independent', 
'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 
'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 
'as_terms',
>>> (sqrt(x)*y*y).as_coeff_exponent(y)
(sqrt(x), 2)
>>> sqrt(x).as_base_exp()
(x, 1/2)

Poly(z**3 + z, z) ==>> 'as_dict': {(1,): 1, (3,): 1}
----------------------------
------------------------------
>>> (sqrt(x)).is_Pow, (sqrt(x)).base
(True, x)
>>> (sqrt(5)*pi*sqrt(x)*y).as_powers_dict()
defaultdict(<class 'list'>, {x: 1/2, y: 1, 5: 1/2, pi: 1})
>>> (sqrt(5)*pi+sqrt(x)*y).as_powers_dict()
defaultdict(<class 'int'>, {sqrt(x)*y + sqrt(5)*pi: 1})
------------------------------

-------------- sovler ----------------
ans = nsolve(f, x, 1)
ans = solve(f)
        ans = nsimplify(ans)
        ans = sympify(ans)
##        print(sympy.mpmath.mp.dps)
##        print(ans)
##        sympy.mpmath.mp.dps = 1
##        print(ans) # yield it changes!

------------ add mul -----------------
>>> a,b,c = map(Wild, "abc"); x, y, z = symbols("x y z")
>>> (a+sin(b)*c).matches(x+sin(y)*z)
{a_: x, b_: y, c_: z}
>>> (a+sin(b)*c)._matches_commutative(x+sin(y)*z)
{a_: x, b_: y, c_: z}

>>> type(2+sqrt(2))
<class 'sympy.core.add.Add'>
>>> type(2*sqrt(2))
<class 'sympy.core.mul.Mul'>

<class 'sympy.core.add.Add'>
    is_Add
    (1+4*pi).as_coeff_add(pi)
        (1, (4*pi,))
    (7 + 3*x).as_coeff_add()
        (7, (3*x,))
    (7*x).as_coeff_add()
        (0, (7*x,))  !!!! (const, (add_terms...))
    (3*a*x).as_coefficients_dict()
        {a*x: 3}
    (3 + 3*sqrt(2)).as_content_primitive()
        (3, 1 + sqrt(2))
    (7 + 9*I).as_real_imag()
        (7, 9)
<class 'sympy.core.mul.Mul'>
    is_Mul
    (4*pi).as_coeff_mul()
        (4, (pi,))
    (-3*sqrt(2)*(2 - 2*sqrt(2))).as_coeff_mul()
        (-3, sqrt(2)*(-2*sqrt(2) + 2))
    (-3*sqrt(2)*(2 - 2*sqrt(2))).as_content_primitive()
        (6, -sqrt(2)*(-sqrt(2) + 1))
    (-3*sqrt(2)*(2 - 2*sqrt(2))).as_ordered_factors()
        [-1, 3, sqrt(2), -2*sqrt(2) + 2]
    (-3*sqrt(2)*(2 - 2*sqrt(2))).as_two_terms()
        (-3, sqrt(2)*(-2*sqrt(2) + 2))

------------------------------


Univariate factoring over various domains
Computing reduced Grobner bases
Partial fraction decomposition # into 1/(z-1) + 3/(z-1)**2


sympy.polys.polytools.gcdex # Returns (s, t, h) such that h = gcd(f, g) and s*f + t*g = h
invert(f, M) # 1/f mod M
sympy.polys.polytools.cofactors # Returns polynomials (h, cff, cfg) such that h = gcd(f, g), and cff = quo(f, h) and cfg = quo(g, h) are, so called, cofactors of f and g.
gcd_list / lcm_list
sympy.polys.polytools.primitive # Compute content and the primitive form of f
LC # leading coeff
sympy.polys.polytools.sturm # sturm seq
sqf # square-free
roots / refine_root / count_roots / real_roots / all_roots
ground_roots(f) # Compute roots of f by factorization in the ground domain.
intervals # Compute isolating intervals for roots of f


reorder # set order of freesymbols
sympy.polys.polytools.reduced/groebner
all_coeffs(f) # Returns all coefficients from a univariate polynomial f.
all_terms
degree
diff # partial derivative 
integrate
eval
replace # subs...
shift
as_dict

exquo #  exact quotient of f by g
free_symbols
free_symbols_in_domain
get_domain/get_modulus / set...
unify(f, g) # Make f and g belong to the same domain.



sympy.polys.polyfuncs.symmetrize 
    Rewrite a polynomial in terms of elementary symmetric polynomials.

minpoly/minimal_polynomial # Computes the minimal polynomial of an algebraic number.









Univariate factoring over various domains
    factor(f, modulus=5)
    factor(f, modulus=65537, symmetric=False)
    factor(x**2 + 1, gaussian=True)
    
    alg = AlgebraicNumber((sqrt(5) - 1)/2, alias='alpha')
    factor(f, extension=alg)


Computing reduced Grobner bases
    groebner([f, c**2 + s**2 - 1])
    solve_poly_system







