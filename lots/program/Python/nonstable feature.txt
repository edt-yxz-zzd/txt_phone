--------------------
operation inplace (modifying self) and return the result

a = d[0]
a += b

# now, was d[0] modified??


--------------------
>>> bool(NotImplemented)
True

NotImplemented should not have .__bool__

--------------------
how can Tk be the standard GUI if it can show Non-BMP charactors????

-----------------


py -m xxx.yyy
    __main__ and xxx.yyy should be same module!!
    it seems __main__ is a builtin module
    and __main__ exec the input script

---------------

py bugs:
    bool(NotImplemented) == True
    should not define it !!!



------------------------------
f = set_intersetion(A,B) = B-(B-A)
set & set 
    A & B not implemented as f(A,B) or f(B,A)

------------------------------
dict.__repr__

------------------------------
a,b=c,d=...
not as:
c,d=...
a,b=c,d


-------------------------------
namedtuple is subclass of tuple
but not using __new__(iterable)

-------------------------------
'yy is not xx' <==> 'not (yy is xx) <==> 'not yy is xx'
    <=!=> 'yy is (not xx)'
>>> not 1 is False
True
>>> not 1 is True
True


assert True == not False
SyntaxError: invalid syntax
-------------------------------
>>> def f(a,*f,**k,):pass
SyntaxError: invalid syntax
>>> def f(a,*f,):pass
SyntaxError: invalid syntax
>>> def f(a,):pass # success!!


-------------------------------
from pkg import xxx
xxx may be a module or not

-------------------------------
attrgetter -> obj if len(args) else tuple<obj>



len(seq[-L:]) == L if L != 0 and L <= len(seq)
seq[len(seq)-L:] # to avoid L == 0



-------------------------------
double underscores:

>>> class xx:
	def __abc():pass
	def __abc__():pass
>>> xx.__abc
AttributeError: type object 'xx' has no attribute '__abc'
>>> xx.__abc__
<function xx.__abc__ at 0x0000000003799D90>
>>> xx._xx__abc
<function xx.__abc at 0x0000000003799C80>
>>> xx._xx__abc__
AttributeError: type object 'xx' has no attribute '_xx__abc__'

class ____xx:
    def __abc():pass
____xx._xx__abc

-------------------------------
class xx: pass
x = xx()
del x.__dict__
del x.__dict__

class xx:
	__slots__=()
x = xx()
del x.__dict__ # AttributeError: 'xx' object has no attribute '__dict__'


class xx: pass
x = xx()
x.__dict__ = {'__dict__':'haha'}
x.__len__ = 'oops'
assert x.__dict__ == vars(x) == {'__dict__': 'haha', '__len__': 'oops'}
assert x.__len__ == 'oops'
x.__dict__ = 'haha' # TypeError: __dict__ must be set to a dictionary, not a 'str'























