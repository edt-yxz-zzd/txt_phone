natural number = unsigned integer = uint
    assert( uint >= 0)

uint_fixed_length_byte<N> = byte[N] 
    # little-endian, == word_mod<2^(8*N)>, N > 0

uint_variable_length = {uint length, byte number[length]} 
    # number is of little-endian
    # type( .length) == uint_fixed_length_byte<N> or uint_variable_length
    #    or .length is out of struct....
    assert( .length == 0 or .number[.length-1] != 0)


uint_compact_word_mod<N> = {uint length, word_mod<N> number[length]}
    # = little_endian_uint( .number) + sum([ N^i for i in [0:.length] ])


positive_integer = uint + 1
integer = {bool is_negative, uint number} 
    = { .is_negative = uint%2, .number = (uint+1)//2}
    assert( .is_negative == false or .number != 0)


