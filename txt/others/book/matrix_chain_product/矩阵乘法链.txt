
[[[
古典的动态编程(保存中间变量):O(N**3) #表格规模为O(N**2)，其中每一项的计算(min{...})为O(N)

e others/book/matrix_chain_product/矩阵乘法链.txt
e others/book/matrix_chain_product/On-instances-of-the-matrix-chain-product-problem-solved-in-linear-time (2009)(Sana).pdf.txt
    论文 只考察 单调的 矩阵乘法链维数序列 及其循环移动变体
      O(N)

e others/book/matrix_chain_product/Computation of matrix chain products I,II(1984)(Hu)(Shing)[polygon partitioning].pdf.txt
      O(NlogN)

e script/matrix_chain_product.py


矩阵乘法链？结合律
  Matrix Chain Multiplication
  linear time algo Matrix Chain -Dynamic
  https://www.researchgate.net/publication/310951915_On_instances_of_the_matrix_chain_product_problem_solved_in_linear_time
    https://www.researchgate.net/profile/Sana-Ezouaoui-2/publication/310951915_On_instances_of_the_matrix_chain_product_problem_solved_in_linear_time/links/583b2bab08aef00f3bfd848f/On-instances-of-the-matrix-chain-product-problem-solved-in-linear-time.pdf
      wget 'https://www.researchgate.net/profile/Sana-Ezouaoui-2/publication/310951915_On_instances_of_the_matrix_chain_product_problem_solved_in_linear_time/links/583b2bab08aef00f3bfd848f/On-instances-of-the-matrix-chain-product-problem-solved-in-linear-time.pdf' -O 'On-instances-of-the-matrix-chain-product-problem-solved-in-linear-time (2009)(Sana).pdf'
      #特例而已
      [In this paper we characterize particular instances of the matrix chain product (MCP) problem, a combinatorial optimization problem, that can be solved in linear time i.e.  O(n), n being the chain length.  These instances correspond to the cases when the matrices dimensions constitute (i) an non decreasing sequence (NDS), (ii) a non increasing sequence (NIS) and (iii) any cyclic permutation of either an NDS or a NIS.  This optimal linear complexity may be considered enough interesting as solving general instances of the MCP problem needs either an O(n3) time by the classical 1973 Dynamic Programming algorithm or an O(nlogn) time by the 1984 polygon partitioning algorithm.]
      #1984 polygon partitioning algorithm
      O(NlogN):6.  Hu, T.  C.  and Shing, M.  T.  : Computation of matrix chain products.  Part II, SIAM Jr Computing, 13(2), 229-251,(1984).
      Computation of matrix chain products Hu Shing 1984 polygon partitioning
      http://infolab.stanford.edu/pub/cstr/reports/cs/tr/81/875/CS-TR-81-875.pdf
        wget 'http://infolab.stanford.edu/pub/cstr/reports/cs/tr/81/875/CS-TR-81-875.pdf' -O 'Computation of matrix chain products I,II(1984)(Hu)(Shing)[polygon partitioning].pdf'

  以下都是Dynamic Programming，没用！[[
  http://www.columbia.edu/~cs2035/courses/csor4231.F09/matrix-chain.pdf
    wget 'http://www.columbia.edu/~cs2035/courses/csor4231.F09/matrix-chain.pdf' -O '09-matrix-chain.pdf'
      O(n**3)动态编程
  https://people.csail.mit.edu/alinush/6.006-spring-2014/mat-chain-mult.pdf
    wget 'https://people.csail.mit.edu/alinush/6.006-spring-2014/mat-chain-mult.pdf' -O 'mat-chain-mult.pdf'
      O(n**3)动态编程
  https://www.scribd.com/document/557406521/3-MAZ-Matrix-Chain-Multiplication
      O(n**3)动态编程
    ]]
===
]]]

矩阵乘法链 vs merge_sort<初始化不等长分块/极长块>
  [TIME(merge_sort__2(lhs, rhs)) <= O(len(lhs++rhs))]
  [xs :: Ord a => [a]][L := len(xs)]
  [ls :: [pint]{.sum==L}] #xs成环，升降周期长度 #循环左移 等价
  最优打括号方案(循环左移囗(k,xs);ls)
  霍夫曼编码-贪婪算法？

矩阵乘法链:
  Ls=[L0,...,LN]
  matrix<L0,L1>*matrix<L1,L2>*...*matrix<Ls[-3],Ls[-2]>*matrix<Ls[-2],Ls[-1]>
  [TIME(matrix<x,y>*matrix<y,z>)==x*y*z]:
    [TIME(matrix<w,x>*matrix<x,y>*matrix<y,z>)==min{w*x*z+x*y*z,w*x*y+w*y*z}]
    [(w*x*z+x*y*z) - (w*x*y+w*y*z)
    == w*z*(x-y) + x*y*(z-w)
    == w*x*(z-y) + y*z*(x-w)
    ]
    [(w*x*z+x*y*z) < (w*x*y+w*y*z)]:
      # (a*(b*c)) 优于 ((a*b)*c)
      <==> [(w,x,y,z):右结合更优]
      <==> [w*x*(z-y) < y*z*(w-x)]
      <==> [(z-y)/(z*y) < (w-x)/(w*x)]
      <==> [(w-x)/(w*x) > (z-y)/(z*y)]
      <==> [(x-w)/(w*x) < (y-z)/(z*y)]
      <==> [(1/w-1/x) < (1/z-1/y)]

  (v,w)*(w,x)*(x,y)*(y,z)
  a*b*c*d:5种情形:
    (a*b)*(c*d)
    ((a*b)*c)*d
    (a*(b*c))*d
    a*((b*c)*d)
    a*(b*(c*d))
  view ../../python3_src/nn_ns/math_nn/numbers/ballot_number.py
    [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862]
  矩阵:     (... *A *B *C *D *...)
  矩阵边界:(...,za,ab,bc,cd,de,...)
  矩阵边界的升降区域==>>？局部抢夺区:由局部最小边界往外蔓延
    [za >= ab==bc==cd <= de]:
      ==>>? [最优为:(... *A *(B*C) *D *...)]
        不太对，(... *A)的 左边界 可能 非常小，只要 小于ab，就可以撕破(B*C)的优先结合


[[
[ls == [w,x,y,z]]:
    [(1/w - 1/x) < (1/z - 1/y)]:
        [(x-w)/w/x < (y-z)/z/y]
        [(x-w)*y*z < (y-z)*w*x]
        [(x*y*z-w*y*z) < (y*w*x-z*w*x)]
        [(x*y*z+z*w*x) < (y*w*x+w*y*z)]
        [右结合优先操作数 ==(x*y+w*x)*z < w*(x*y+y*z) == 左结合优先操作数]
        [左结合优先操作数 > 右结合优先操作数]
        [此时 3个矩阵 右结合 最优]
    # 比较:[(1/w + 1/y) <?> (1/z + 1/x)]
    [w < y][x < z][y < z]:
        * [w < y < x < z]:
            [1/w > 1/y > 1/x > 1/z]
            [1/w + 1/y > 1/x + 1/z]
            [1/w - 1/x > 1/z - 1/y]
            [此时 3个矩阵 左结合 最优]
        * [w < x < y < z]:
            [1/w > 1/x > 1/y > 1/z]
            [1/w + 1/y > 1/x + 1/z]
            [此时 3个矩阵 左结合 最优]
        * [x < w < y < z]:
            [(w,x,y,z) == (3,2,4,6)]:
                [1/w + 1/y = 7/12 < 8/12 = 2/3 = 1/x + 1/z]
                [此时 3个矩阵 右结合 最优]
            [(w,x,y,z) == (3,2,4,12)]:
                [1/w + 1/y = 7/12 = 1/x + 1/z]
                [此时 3个矩阵 左结合 右结合 等同计算量]
            [(w,x,y,z) == (3,2,4,24)]:
                [1/w + 1/y = 7/12 = 14/24 > 13/24 = 1/x + 1/z]
                [此时 3个矩阵 左结合 最优]
]]
