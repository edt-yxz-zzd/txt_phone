
[[[
范畴论 教科书
e others/book/category-theory.txt
  view /mnt/m_external_sd/000edt/0my_files/book/math/category\ theory/
  view /mnt/m_external_sd/000edt/0my_files/book/math/computability/

[[
ls /mnt/m_external_sd/000edt/0my_files/book/math/category\ theory/
'Abstract and concrete categories--the joy of cats(1990ed+2004update-web)(Adamek).pdf'
'Axiomatic Method and Category Theory (2014)(Andrei Rodin).pdf'
'Basic Category Theory (2014)(Leinster).pdf'
'Categorical Logic and Type Theory (1999)(Bart Jacobs).djvu'
'Categories for the Working Mathematician (2ed)(1998)(Mac Lane).pdf'
'Category Theory (2ed)(2010)(Steve Awodey).pdf'
'Category Theory for Computing Science (1995-rev20200423)(Michael Barr).pdf'
'Category Theory for Programmers (20181021)(v1.0.0-0-g41e0fc3)(Milewski).pdf'
'Category Theory for Programmers (20190812)(v1.3.0-0-g6bb0bc0)(Milewski).pdf'
'Category Theory for Scientists (dynamic-20130514).pdf'
'Category Theory for Scientists (static-20130205).pdf'
'Category Theory in Context (2014)(Emily).pdf'
'Conceptual Mathematics--A First Introduction to Categories (2ed)(2009)(Lawvere).pdf'
'Introduction to CATEGORY THEORY and CATEGORICAL LOGIC (Thomas Streicher).pdf'
'Introduction to Categories and Categorical Logic (Samson Abramsky)(2006-2011).pdf'
'Introduction to Categories and Categorical Logic (Samson Abramsky).pdf'
'Topoi--The Categorial Analysis of Logic (1983)(Robert Goldblatt).pdf'
'范畴论(2006)(贺伟)(书签+去水印).pdf'
]]
[[
ls /mnt/m_external_sd/000edt/0my_files/book/math/computability/
'Higher-Order Computability (2015)(Longley).pdf'
'Hilbert Tenth Problem--Intro to Logic,Number Theory,Computability (2019)(Murty).pdf'
'The Foundations of Computability Theory (2ed)(2020)(Borut).pdf'
'The Incomputable--Journeys Beyond the Turing Barrier (2017)(Cooper).pdf'
]]
]]]
[[[
范畴论 教科书
[[
范畴论 教科书

Conceptual Mathematics
  -Lawvere
  https://libgen.lc/edition.php?id=138240927
    http://library.lol/main/5296e1471bef8e2c6ab06986dd32b0ab
    Conceptual Mathematics--A First Introduction to Categories (2ed)(2009)(Lawvere).pdf

  ===
Topoi
  -Goldblatt
  https://libgen.lc/edition.php?id=138240897
    http://library.lol/main/a2def1cd12ed8c016d703a151c50f6e1
    Topoi--The Categorial Analysis of Logic (1983)(Robert Goldblatt).pdf
  ===
Introduction to category theory and categorical logic
  Thomas Streicher
  https://arxiv.org/abs/1102.1313
    https://arxiv.org/pdf/1102.1313
      7 Feb 2011
      Introduction to Categories and Categorical Logic (Samson Abramsky)(between2006-2011).pdf
    https://www.cs.ox.ac.uk/people/bob.coecke/AbrNikos.pdf
      Introduction to Categories and Categorical Logic (Samson Abramsky).pdf
  ===
  https://www2.mathematik.tu-darmstadt.de/~streicher/CTCL.pdf
    Introduction to CATEGORY THEORY and CATEGORICAL LOGIC (Thomas Streicher).pdf
  ===
Categorical logic and type theory
  https://libgen.lc/edition.php?id=136068266
    http://library.lol/main/7e4c14bb943cb615a914bcee42f9c7d5
      Categorical Logic and Type Theory (1999)(Bart Jacobs).djvu
Axiomatic method and category theory
https://libgen.lc/edition.php?id=137977924
  http://library.lol/main/aad82d6543ff2300da86c8b58e50f963
  Axiomatic Method and Category Theory (2014)(Andrei Rodin).pdf


Category Theory for Computing Science
  https://libgen.lc/edition.php?id=137227003
    http://www.tac.mta.ca/tac/reprints/articles/22/tr22abs.html
      http://www.tac.mta.ca/tac/reprints/articles/22/tr22.pdf
      Category Theory for Computing Science (1995-rev20200423)(Michael Barr).pdf
Category Theory
  Steve Awodey
  https://libgen.lc/edition.php?id=136634891
    http://library.lol/main/3f508030f2f6c10914f299379e5fdf26
    Category Theory (2ed)(2010)(Steve Awodey).pdf

Category Theory in Context
  Emily Riehl
  Category Theory in Context (2014)(Emily).pdf
  https://libgen.lc/edition.php?id=138235657
    http://library.lol/main/5158a9399d222af6e645992cf7d9a10a
Abstract and Concrete Categories The Joy of Cats
  https://libgen.lc/edition.php?id=135781017
    http://library.lol/main/5fa82be26689a4e6f4415ea068d35a9d
    Abstract and concrete categories--the joy of cats (1990ed+2004updated)(free web version)(Jiri Adamek).pdf
    Abstract and concrete categories--the joy of cats(1990ed+2004update-web)(Adamek).pdf
    Author(s): Jiri Adamek, Horst Herrlich, George E. Strecker

Categories for working mathematician
  https://libgen.lc/edition.php?id=136786727
    http://library.lol/main/65fb014e30f8dcd48374a045bd66d31f
      Categories for the Working Mathematician (2ed)(1998)(Mac Lane).pdf

Category Theory for Programmers: The Preface
  https://libgen.lc/edition.php?id=138229790
    http://library.lol/main/71994badb0f1ec2581ff3aab9d51aaa7
      Category Theory for Programmers (20190812)(v1.3.0-0-g6bb0bc0)(Milewski).pdf
  https://libgen.lc/edition.php?id=138751872
    http://library.lol/main/81d631c49d5c2fdfbad86c7d62a391d2
      Category Theory for Programmers (20181021)(v1.0.0-0-g41e0fc3)(Milewski).pdf

Category Theory for Scientists
  https://ocw.mit.edu/courses/mathematics/18-s996-category-theory-for-scientists-spring-2013/textbook/MIT18_S996S13_textbook.pdf
  ===
  https://math.mit.edu/~dspivak/teaching/sp13/
    Category Theory for Scientists (static-20130205).pdf
    Category Theory for Scientists (dynamic-20130514).pdf
    This static version will remain constant once the semester starts. (Dynamic version.)
    http://math.mit.edu/~dspivak/teaching/sp13/CT4S--static.pdf
    http://math.mit.edu/~dspivak/teaching/sp13/CT4S.pdf
https://m.douban.com/book/review/10338140/
  Basic Category Theory (2014)(Leinster).pdf
    https://arxiv.org/pdf/1612.09375.pdf


https://libgen.lc/edition.php?id=141506190
  http://library.lol/main/22b1d3558193ffc70b514b7e72478b8e
    范畴论(2006)(贺伟)(书签+去水印).pdf

===
https://www.zhihu.com/question/46755171

有哪些经典的范畴论入门书籍可以推荐？
数学
数理逻辑（Mathematical Logic）
范畴论
有哪些经典的范畴论入门书籍可以推荐？
关注者
466
被浏览
75,884
9 个回答
甄景贤
甄景贤
研究普适人工智能

    说入门，最好的当然是「中学生也能看懂的」《Conceptual Mathematics

》，作者之一是 Lawvere，此人将范畴论

    变成数理逻辑的基础功不可没

我是研究人工智能逻辑方面的

    Goldblatt 的《Topoi》也算是易懂的（很多部分），但也有难懂的地方《Categorical logic and type theory》重点在 fibrationThomas Streicher 的 notes 《Introduction to category theory and categorical logic

    》在网上可以下载，假设你已经掌握了一些范畴论，则 logic 那部份很有用，很精简Crole 《Categories for types》明白 type theory 和 cat 之间的最好教科书《Sets for mathematics》作者之一也是 Lawvere，这本书有讲及他的 "quantifiers are adjoints" 理论，亦即 ∀ 和 ∃，我费了很多时间才弄懂，迟些会将我的笔记和图发在知乎上。 

其他还有很多名字像 "introduction to category theory" 那样的书，在网上可以找到很多本。 互相参考也就行了。

PS： 最近看过一本《Axiomatic method and category theory》，比较哲学性的，但有讲及 homotopy type theory

，我觉得颇有趣。
发布于 2018-10-03 20:55
parker liu
parker liu
​
函数式编程话题下的优秀答主

谢邀，我看过的范畴论的书不多，都是
@rainoftime

有提到的，主要是如下两本：

《Category Theory for Computing Science

》

《Category Theory》Steve Awodey

我学习范畴论

是很散乱的，上面这两本书是不错，不过我也没有看完（觉得节奏太慢了，不好配合Haskell的学习进度）。后来主要是靠wikipedia
Category (mathematics)

和nlab
Yoneda lemma in nLab

这两个网站来学习范畴论，再结合Haskell的代码，bartosz的blog
Category Theory for Programmers: The Preface

，一些大学的论文。现在基本上Haskell用到的范畴论的东西都明白了。

现在回过头来看，多年前看的微分几何（陈省身著）确实对我学习范畴论帮助很大。
编辑于 2016-08-29 23:57
知乎用户
知乎用户

Emily Riehl 的 Category Theory in Context


本来我应该具体写一些东西说服你它比别的书都要好，但现在懒得具体解释原因了，简单说原因包含但不限于：里面有极其丰富的例子帮你把范畴论

内化为基础语言；很多地方的处理方式充满灵性……

如果你一定要什么东西来说服你，那么有人写过一个很长的文章来吹这本书，不过我没看完不知道它具体都说了什么https://tableschairsandbeermugsmathemagician.blogspot.com/2017/05/book-review-category-theory-in-context.html


PS：都 2018 年了，为什么还要读 Mac Lane，特别是入门的话。。。通常的范畴论部分这个就够了，monoidal category 不如去看 Etingof G..N..O.. 那个 tensor categories，abelian category 不如去看 stacks project 第 11-13 章，剩下的掺杂进来的东西等熟练掌握范畴论之后再用别的东西学显然要爽快得多，没必要和一坨基础内容混在一起
编辑于 2018-11-15 03:27
logo站酷网
广告​
知乎广告介绍
站酷网在广州招募设计师新用户，发布作品赢取奖励
站酷网！海量正版素材可用，还有超多设计师、潮流艺术家都在这里分享干货和作品查看详情
匿名用户
匿名用户

当然是ACC啦，Abstract and Concrete Categories The Joy of Cats ，带引用和索引，看起来很方便啊(虽然定位一如既往地迷哈哈)，而且插图也有趣。题目不会做，配合stake exchange就好啦。
发布于 2018-06-08 17:58
知乎用户
知乎用户

Categories for working mathematician
发布于 2016-08-29 19:52
jRONI
jRONI
https://zhuanlan.zhihu.com/ps-math

先学同调代数，范畴论就没有那么玄乎了。
发布于 2019-06-05 13:19
皮皮桌
皮皮桌

范畴论是由eilenberg等人为了将同调论公理化给出的一套语言。在格罗腾迪克（导出函子）等名家手上有很大的发展。配边论，广义同调论都可以用这套语言来叙述。所以“经典”的同调代数，广义同调论的书都是很好的。

kashiwara那套数学也很需要这些语言，他有本category and sheaves的书。在辛拓扑上比较火的fukaya范畴也需要这套语言可以看seidel的书。
发布于 2019-06-05 10:30
匿名用户
匿名用户

Bartosz Milewski正在写那本?
发布于 2017-03-01 23:08
Nemo
Nemo
只有无能之人才诉诸情绪

谢邀，这个问题我还真问过一位先生，他的建议是让我学法语然后直接看EGA。
编辑于 2018-06-07 23:14

]]
[[
https://m.douban.com/book/review/10338140/
  Basic Category Theory (2014)(Leinster).pdf
    https://arxiv.org/pdf/1612.09375.pdf
]]
[[
如何自学范畴论？
范畴论
如何自学范畴论？
需要什么预备知识？题主非数学专业，虽然学了很多奇奇怪怪的东西，不过还是请假定高中数学的水平 能推荐下书就更好了 题主Google了，不过看不懂QAQ
关注者
408
被浏览
109,442
13 个回答
jRONI
jRONI
菜场小学群主，学习数学物理请私信

简单说 你要学好线性代数，这样就可以理解模范畴中大量出现的各种态射和函子，特别是hom函子和张量函子，推荐Anderson的【环与模范畴】，这是目前我看到最好的可以衔接线性代数和同调代数的书。

然后需要上一套同调代数，比如Weibel的，他上手就会告诉你，矩阵的秩是古代的方法，正合和同调是现代方法。

同调代数中要讲各种函子，再看MacLane的GTM 5就知道范畴论体系的来龙去脉了。


以上是玄门正宗，能同时学一个代数拓扑也不错。顺便说一句，我知道题主关心为啥monad说白了就是自函子范畴上的monoid而已，不幸的是这么吊的黑话并不是编程界的Wadler的原创，这句话来自GTM5 的作者MacLane
发布于 2019-11-10 18:53
Yuhang Liu
Yuhang Liu
​
数学等 5 个话题下的优秀答主

谢邀。

我本科的时候尝试看这本书
范畴论 (豆瓣)​
book.douban.com/subject/1894611/

后来本校一个做代数的老师说这本书挺垃圾的，学数学的不要看，因为完全就是罗列定义，根本没讲数学上引入范畴论的动机和起到的作用。不过题主既然不是数学专业的，如果真的只想了解下“关于范畴的纯粹知识”的话，我觉得是可以看看。

真正数学系的么，有本书叫做 category theory for working mathematicians,不过我也没看过。其实大部分同调代数教材肯定会讲范畴论，直接看同调代数就差不多了。
发布于 2019-06-21 07:36
祖与占
祖与占
​
函数式编程等 2 个话题下的优秀答主

谢邀
Category Theory for Programmers: The Preface

顺带安利下阅读组, 最近在读上面那个系列, 已经读到第9章, 欢迎一起讨论
Issues · CNMDR3G/CNMDR3G · GitHub
编辑于 2015-10-16 12:50
logo站酷网
广告​
知乎广告介绍
站酷网在广州招募设计师新用户，发布作品赢取奖励
站酷网！海量正版素材可用，还有超多设计师、潮流艺术家都在这里分享干货和作品查看详情
夏梓耀
夏梓耀
硬核码农

CATEGORY THEORY FOR COMPUTING SCIENCE

不想看英文的话，我只能拿出古董

了
发布于 2015-10-16 10:27
知乎用户DMHN39
知乎用户DMHN39

题主你好，范畴论

是纯数学。不管你是什么专业、数学水平是啥样的。范畴论还是那么抽象，和你是不是想学Haskell，或者其他什么学科的知识没有任何关系。看书容易看不明白很正常，因为notation太乱了。

而且很多定理抽象到举例子都费劲。或者举出来又看不懂什么意思。(因为本渣不是数学系的，见得太少了。)

"学习范畴论是为了理解什么叫adjunction，然后adjuntion需要定义natural transformation，然后natural transformation 需要定义 Functor 和 Category。 " 这句话可以算是定下了目标吧，初学就奔着最终能理解adjunction就好？

MIT ocw的一个页面：没有视频，只有本书。感觉这本书比较适合入门，给了很多具体的例子。
Category Theory for Scientists

https://ocw.mit.edu/courses/mathematics/18-s996-category-theory-for-scientists-spring-2013/textbook/MIT18_S996S13_textbook.pdf

TheCatsters 视频：正在看这个，老师讲课风格非常棒，充满活力让人很难走神。10分钟一小节课，知识密度很大，非常适合反复刷。几乎没有前置知识要求。认真听讲肯定能听懂。听不懂就重放几遍。

这个课的板书质量非常高，全都当成笔记记下来绝对不亏。

https://www.youtube.com/channel/UC5Y9H2KDRHZZTWZJtlH4VbA

category theory summer school:老师是 category theory 2nd edition 的作者。听完课再看书有加成。这课比较侧重范畴论在类型和证明上的联系。缺点就是板书太简洁了(字还小),导致听漏一句，整段重看。要看这个就耐心记笔记吧。

https://www.youtube.com/watch?v=ZKmodCApZwk&t=6s
Oregon Summer School Notes

不推荐 Bartosz 的视频，因为比较啰嗦，用的 notation 也不太一样(虽然这并不是什么问题。)

当然他的视频肯定也是可以看的。还有配套的博客。

——————————————————————————————————————————

毫无用处的私货：

范畴论实在不适合没数学基础的人学，学了可得长生吗？从时间投入产出看上太不划算了。

范畴论和Haskell/函数式编程

没有关系。就算真有关系也是编程这边去倒贴的。不需要先学编程才能学范畴论。

想用通过写一些Haskell代码来理解范畴论中的概念是非常不明智的。因为会陷入到那门语言的繁文缛节当中，编程语言的表达力真的够完整描述范畴论在讨论的东西吗？我不觉得。能用代码写出来并不代表那个概念本来的意思。概念嘛，就是抽象一点才好玩。
编辑于 2017-07-03 16:56
QR Code of Downloading Zhihu App

]]
[[
https://zh.m.wikibooks.org/zh-cn/%E7%BA%AF%E7%B2%B9%E6%95%B0%E5%AD%A6/%E7%AF%84%E7%96%87%E8%AB%96


Wikibooks
纯粹数学/范畴论

    语言
    监视
    编辑

< 纯粹数学

范畴论是数学的一门学科，以抽象的方法来处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。数学中许多重要的领域可以形式化成范畴，并且使用范畴论，令在这些领域中许多难理解、难捉摸的数学结论可以比没有使用范畴还会更容易叙述及证明。

范畴最容易理解的一个例子为集合范畴，其物件为集合，态射为集合间的函数。但需注意，范畴的物件不一定要是集合，态射也不一定要是函数；一个数学概念若可以找到一种方法，以符合物件及态射的定义，则可形成一个有效的范畴，且所有在范畴论中导出的结论都可应用在这个数学概念之上。

范畴最简单的例子之一为群胚，其态射皆为可逆的。群胚的概念在拓扑学中很重要。范畴现在在大部分的数学分支中都有出现，在理论计算机科学的某些领域中用于对应资料型别，而在数学物理中被用来描述向量空间。

范畴论不只是对研究范畴论的人有意义，对其他数学家而言也有着其他的意思。一个可追溯至1940年代的述语“一般化的抽象废话”，即被用来指范畴论那相对于其他传统的数学分支更高阶的抽象化。
背景编辑

研究范畴就是试图以“公理化”的方法抓住在各种相关连的“数学结构”中的共同特性，并以结构间的“结构保持函数”将这些结构相关起来。因此，对范畴论系统化的研究将允许任何一个此类数学结构的普遍结论由范畴的公理中证出。

考虑下面的例子：由群组成的类Grp 包含了所有具有“群结构”的物件。要证明有关群的定理，即可由此套公理进行逻辑的推导。例如，由公理中可立即证明出，群的单位元素是唯一的。

不是只专注在有特定结构的个别物件（如群）上，范畴论会着重在这些物件的态射（结构保持映射）上；经由研究这些态射，可以学到更多关于这些物件的结构。以群为例，其态射为群同态。两个群间的群同态会严格地“保持群的结构”，这是个以将一个群中有关结构的讯息运到另一个群的方法，使这个群可以看做是另一个群的“过程”。因此，对群同态的研究提供了一个得以研究群的普遍特性及群公理的推论的工具。

类似的研究也出现在其他许多的数学理论中，如在拓扑学中对拓扑空间的连续映射的研究（相关范畴称为Top），及对流形的光滑函数的研究等。
Wyy065最后编辑于9年前
Wikibooks

    除非另有声明，本网站内容采用CC BY-SA 3.0授权。

]]
[[
https://zh.m.wikibooks.org/wiki/Haskell/%E8%8C%83%E7%95%B4%E8%AE%BA

Wikibooks
Haskell/范畴论

< Haskell

本文将概述 Haskell 里应用的一个概念，范畴论。因此 Haskell 代码的展示将会伴随其对应的数学定义，为了让读者可以直观地理解范畴论的概念以及它与 Haskell 的关系，这种对应可能不那么绝对的严谨。
范畴论是什么编辑
如图所示为一个简单的范畴，其包含三个对象，A，B，C， 三个单位态射 id A {\displaystyle \operatorname {id} _{A}} {\displaystyle \operatorname {id} _{A}}, id B {\displaystyle \operatorname {id} _{B}} {\displaystyle \operatorname {id} _{B}} 和 id C {\displaystyle \operatorname {id} _{C}} {\displaystyle \operatorname {id} _{C}}，其他的两个态射 f : C → B {\displaystyle f:C\to B} {\displaystyle f:C\to B} 和 g : A → B {\displaystyle g:A\to B} {\displaystyle g:A\to B}。图中没有展示范畴的第三个组成元素（即态射组合）。

范畴，本质上是一个简单的集合，包括三个组成元素：

    对象.
    态射，每个态射将两个对象（源对象和目标对象）连接在一起（它们有时被称为箭头（arrows），但本文避免使用该术语，因为它在 Haskell 中具有其他涵义。）如果 f 是源对象 A 到目标对象 B 的态射，写作 f : A → B {\displaystyle f:A\to B} {\displaystyle f:A\to B}。
    态射组合。例如：态射 g : A → B {\displaystyle g:A\to B} {\displaystyle g:A\to B} 和 态射 f : B → C {\displaystyle f:B\to C} {\displaystyle f:B\to C} 可以组合为态射 f ∘ g : A → C {\displaystyle f\circ g:A\to C} {\displaystyle f\circ g:A\to C}。

许多东西都可以称为范畴。例如，所有集合构成了范畴 Set，其态射为集合间的函数，而态射组合则为一般的函数复合（标粗的为范畴名）。全部的群构成了范畴 Grp，保持群结构的函数就是它的态射（群同态），比如任意两个群 G 和 H ，G 的操作符为 * ，H 的操作符是 · ，那么函数 f : G → H {\displaystyle f:G\to H} {\displaystyle f:G\to H} 只要满足如下条件就是一个态射： f ( u ∗ v ) = f ( u ) ⋅ f ( v ) {\displaystyle f(u*v)=f(u)\cdot f(v)} {\displaystyle f(u*v)=f(u)\cdot f(v)}






这么看来貌似态射就是函数，但是事实并非如此。例如，任何偏序结构 (P, ≤ {\displaystyle \leq } {\displaystyle \leq } ) 都构成范畴，P 中的元素构成了该范畴的对象，任意两个元素 a 和 b 只要满足 a ≤ {\displaystyle \leq } {\displaystyle \leq } b ，那么存在态射 a \to b。另外，在相同的源对象和目的对象之间可以存在多个态射；以 Set 范畴为例， sin {\displaystyle \sin } {\displaystyle \sin } 和 cos {\displaystyle \cos } \cos 都是从源对象 R {\displaystyle \mathbb {R} } {\displaystyle \mathbb {R} }（实数集） 到目标对象 [ − 1 , 1 ] {\displaystyle [-1,1]} {\displaystyle [-1,1]} 的函数，但是它们是不同的态射。
范畴公理编辑

范畴需要符合三条定律。第一条，也是最简单的一条，态射的组合操作需要满足结合律。

    f ∘ ( g ∘ h ) = ( f ∘ g ) ∘ h {\displaystyle f\circ (g\circ h)=(f\circ g)\circ h} {\displaystyle f\circ (g\circ h)=(f\circ g)\circ h}

态射在 Haskell 中从右到左执行，因此使用 f ∘ g {\displaystyle f\circ g} {\displaystyle f\circ g}时，g 先执行，然后 f。

第二条，态射在组合操作下是闭合的。因此，如果存在态射 f : B → C {\displaystyle f:B\to C} {\displaystyle f:B\to C} 和 g : A → B {\displaystyle g:A\to B} {\displaystyle g:A\to B}，那么范畴 h = f ∘ g {\displaystyle h=f\circ g} {\displaystyle h=f\circ g} 中一定会存在态射 h : A → C {\displaystyle h:A\to C} {\displaystyle h:A\to C}。以下面范畴为例。
Composition-ex.png

f 和 g 都是态射，所以我们一定能够通过组合他们在范畴中得到另一个态射。 那么哪一个是态射 f ∘ g {\displaystyle f\circ g} {\displaystyle f\circ g} 呢？唯一可能的答案就是 i d A {\displaystyle id_{A}} {\displaystyle id_{A}}。同样，我们可以得到 g ∘ f = i d B {\displaystyle g\circ f=id_{B}} {\displaystyle g\circ f=id_{B}}。

最后一条，在一个范畴 C 中，每一个对象 A 都会有一个单位态射， i d A : A → A {\displaystyle id_{A}:A\to A} {\displaystyle id_{A}:A\to A}，这个态射是组合操作的单位元。准确的说对于每一个态射 g : A → B {\displaystyle g:A\to B} {\displaystyle g:A\to B}：存在

    g ∘ id A = id B ∘ g = g {\displaystyle g\circ \operatorname {id} _{A}=\operatorname {id} _{B}\circ g=g} {\displaystyle g\circ \operatorname {id} _{A}=\operatorname {id} _{B}\circ g=g}

请注意，涉及组合操作的表达式 ( o ) {\displaystyle (o)} {\displaystyle (o)}可以彼此相等，但各个态射不能相等。例如有两个态射从对象 A 到对象 B，即 f : A → B {\displaystyle f:A\to B} {\displaystyle f:A\to B} 和 g : A → B {\displaystyle g:A\to B} {\displaystyle g:A\to B}，表达式 ( A → B ) {\displaystyle (A\to B)} {\displaystyle (A\to B)} 相同，但态射 f = g {\displaystyle f=g} {\displaystyle f=g} 永远为假。
Hask，Haskell 范畴编辑

本节我们主要讨论范畴 Hask，其对象为 Haskell 中的类型，态射为 Haskell 中的函数，态射组合操作为 (·)，在 Hask 中函数 f :: A -> B 为类型 A 到 B 的态射。范畴第一第二定律很容易验证，我们知道 (·) 是一个组合操作，显然，对于任何 f 和 g ，f . g是一个新的函数。在 Hask 中，单位态射是 id，所以很容易验证第三定律：id . f = f . id = f

[1]上面的定律并不是一个十分准确的转换，因为我们忽略了下标。在 Haskell 中函数 id 是 多态的 — 它的域和范围可以采用许多不同的类型，用范畴的概念解释就是可以存在许多不同的源对象和目标对象。但是范畴论中的态射是定义为 单态的 — 每个态射都有一个特定的源对象和一个特定的目标对象（注意：这里的 单态 不在范畴论上使用）。多态 Haskell 函数可以通过指定其类型（用单态类型 实例化）来实现单态，因此我们说 Hask 上类型 A 的单位态射是 (id :: A -> A) 会更精确。考虑到这一点，上述定律将被重新书写为： (id :: B -> B) . f = f . (id :: A -> A) = f 但是为简单起见，当含义明确时，我们将忽略这种区别。
练习

    如上所述，任何偏序 (P, ≤ {\displaystyle \leq } {\displaystyle \leq })都是一个范畴，其中对象为 P 的元素，任意两个元素 a 和 b 只要满足 a ≤ {\displaystyle \leq } {\displaystyle \leq } b ，那么存在态射 a → b {\displaystyle a\to b} {\displaystyle a\to b}。问上述哪些定律保证了 ≤ {\displaystyle \leq } {\displaystyle \leq } 的传递性？
    （难度增加。）如果我们在上面的例子中添加另一个态射 h，如下图所示，它就不能成为一个范畴了。为什么？提示：从态射组合方面去考虑。

Not-a-cat.png
函子编辑
A functor between two categories, C {\displaystyle \mathbf {C} } {\displaystyle \mathbf {C} } and D {\displaystyle \mathbf {D} } {\displaystyle \mathbf {D} }. Of note is that the objects A and B both get mapped to the same object in D {\displaystyle \mathbf {D} } {\displaystyle \mathbf {D} }, and that therefore g becomes a morphism with the same source and target object (but isn't necessarily an identity), and id A {\displaystyle \operatorname {id} _{A}} {\displaystyle \operatorname {id} _{A}} and id B {\displaystyle \operatorname {id} _{B}} {\displaystyle \operatorname {id} _{B}} become the same morphism. The arrows showing the mapping of objects are shown in a dotted, pale olive. The arrows showing the mapping of morphisms are shown in a dotted, pale blue.

所以我们有了一些范畴，其包含对象以及将这些对象联系在一起的态射。下一个在范畴论中非常重要的概念是functor，他们将范畴联系在了一起。functor 的实质是范畴之间的转换关系，因此对于范畴 C 和 D，有 functor F : C → D {\displaystyle F:C\to D} {\displaystyle F:C\to D}：

    映射范畴 C 中任一对象 A 到范畴 D 中的对象 F ( A ) {\displaystyle F(A)} {\displaystyle F(A)}。
    映射范畴 C 中任一态射 f : A → B {\displaystyle f:A\to B} {\displaystyle f:A\to B} 到范畴 D 中态射 F ( f ) : F ( A ) → F ( B ) {\displaystyle F(f):F(A)\to F(B)} {\displaystyle F(f):F(A)\to F(B)}。

// 未翻译完

    Actually, there is a subtlety here: because (.) is a lazy function, if f is undefined, we have that id . f = \_ -> ⊥. Now, while this may seem equivalent to ⊥ for all intents and purposes, you can actually tell them apart using the strictifying function seq, meaning that the last category law is broken. We can define a new strict composition function, f .! g = ((.) $! f) $! g, that makes Hask a category. We proceed by using the normal (.), though, and attribute any discrepancies to the fact that seq breaks an awful lot of the nice language properties anyway.

Songbinghui最后编辑于3年前
Wikibooks

    除非另有声明，本网站内容采用CC BY-SA 3.0授权。
]]
]]]
