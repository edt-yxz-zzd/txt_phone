
e others/book/lang-forth-20230726.txt

[[
VM language
  Forth
    #知道它，是源自:《Lua Programming Gems》
    vs:我的组合子: local router
      view ../../python3_src/seed/types/FreeLocalBatchRouter4py.py
===
cd /sdcard/Download/
http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm
wget http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm
  A Beginner_s Guide to Forth (J.V. Noble).html

wget https://library.nrao.edu/public/memos/comp/CDIR_11.pdf
  FORTH (An Application-oriented Language) PROGRAMMER'S GUIDE (Rather,Moore)
  FORTH Programmer_s Guide (Rather,Moore).pdf
wget http://www.dnd.utwente.nl/~tim/colorforth/Leo-Brodie/thinking-forth.pdf
  thinking-forth(2004)(Leo-Brodie).pdf
pkg show gforth
https://www.gnu.org/software/gforth/
pkg show pforth
http://www.softsynth.com/pforth/

pkg install gforth
pkg install pforth

https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/
https://www.complang.tuwien.ac.at/forth/gforth/
  wget https://ftp.gnu.org/gnu/gforth/gforth-0.7.3.tar.gz
  wget https://www.complang.tuwien.ac.at/forth/gforth/gforth-html-0.7.0.zip
  wget https://www.complang.tuwien.ac.at/forth/gforth/gforth-0.7.0.pdf


]]

[[[
http://www.softsynth.com/pforth/
===
pForth - Portable Forth in 'C'
Translations to Français by Antoine Billiau, or Chinese by Letoh

PForth is a public domain, portable ANS Forth based on a kernel written in ANSI 'C'. This makes it easy to port pForth to multiple platforms. So far, pForth has run on Macintosh, Windows, Linux, Beagle Board, Raspberry Pi, SUNs, Amigas, BeOS, Nokia Communicator, SGI Indys, 3DO ARM systems, 3DO PowerPC systems, WebTV systems, Hitachi SH4, OpenTV prototypes, Compaq Ipaq 3970, Sharp LH79520 ARM processor, Ciena Systems networking hardware, and some internal projects at Lucent. If you build pForth for an embedded system, please let me know and I will add your machine to the list of machines that pForth has run on.

PForth was developed by Phil Burk while working at 3DO. PForth is open source, and may be used for free.

PForth source is now on GitHub!

PForth Features
  ANS standard support for Core, Core Extensions, File-Access, Floating-Point, Locals, Programming-Tools, Strings word sets.
  Compiles from simple ANSI 'C' code with no special pre-processing needed. Also compiles under C++.
  INCLUDE reads source from normal files, not BLOCKs.
  Precompiled dictionaries can be saved and reloaded.
  Custom 'C' code can be easily linked with pForth.
  Handy words like ANEW  INCLUDE? SEE  WORDS.LIKE  FILE?
  Single Step Debugger
  Smart conditionals.  10 0 DO I . LOOP works in outer interpreter.
  Conditional compilation.  [IF]   [ELSE]   [THEN]
  Local variables using { }
  'C' like structure defining words.
  Vectored execution using DEFER
  Can be compiled without any stdlib calls for embedded systems. Only needs custom KEY and EMIT equivalents in 'C'.
]]]
[[[
cd /sdcard/Download/
wget https://github.com/philburk/pforth/archive/refs/tags/v2.0.1.tar.gz
===
https://github.com/philburk/pforth
  https://github.com/philburk/pforth/archive/refs/tags/v2.0.1.tar.gz
===
philburk / pforth
Public
Portable Forth in C

philburk
…
on Feb 12
Git stats
Files
README.md
PForth - a Portable ANS-like Forth written in ANSI 'C'
by Phil Burk with Larry Polansky, David Rosenboom and Darren Gibbs. Support for 64-bit cells by Aleksej Saushev.

Last updated: November 27, 2022

Portable Forth written in 'C' for most 32 and 64-bit platforms.

PForth is written in 'C' and can be easily ported to new 32 and 64-bit platforms. It only needs character input and output functions to operate and, therefore, does not require an operating system. This makes it handy for bringing up and testing embedded systems.

PForth also works on desktops including Windows, Mac and Linux and supports command line history. This lets you develop hardware tests on a desktop before trying them on your embedded system. But pForth is not a rich and friendly desktop programming environment. There are no GUI tools for developing desktop applications. PForth is lean and mean and optimized for portability.

PForth has a tool for compiling code on a desktop, then exporting the dictionary in big or little endian format as 'C' source code. This lets you compile tests for an embedded system that does not have file I/O.

PForth is based on ANSI-Forth but is not 100% compatible.

Code for pForth is maintained on GitHub at: https://github.com/philburk/pforth

Documentation for pForth at: http://www.softsynth.com/pforth/

To report bugs or request features please file a GitHub Issue.

For questions or general discussion please use the pForth forum at: http://groups.google.com/group/pforthdev

LEGAL NOTICE
Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Contents of SDK
platforms - tools for building pForth on various platforms
platforms/unix - Makefile for unix

csrc - pForth kernel in ANSI 'C'
csrc/pf_main.c - main() application for a standalone Forth
csrc/stdio - I/O code using basic stdio for generic platforms
csrc/posix - I/O code for Posix platform
csrc/win32 - I/O code for basic WIN32 platform
csrc/win32_console - I/O code for WIN32 console that supports command line history

fth - Forth code
fth/util - utility functions
How to Build pForth
Building pForth involves two steps:

building the C based Forth kernel
building the Forth dictionary file using: ./pforth -i system.fth
optional build of standalone executable with built-in dictionary
We have provided build scripts to simplify this process.

On Unix and MacOS using Makefile:

cd platforms/unix
make all
./pforth_standalone
For more details, see the Wiki

Using CMake:

cmake .
make
cd fth
./pforth_standalone
For embedded systems, see the pForth reference manual at:

http://www.softsynth.com/pforth/pf_ref.php

How to Run pForth
To run the all-in-one pForth enter:

./pforth_standalone
OR, to run using the dictionary file, enter:

./pforth
Quick check of Forth:

3 4 + .
words
bye
To compile source code files use:

INCLUDE filename
To create a custom dictionary enter in pForth:

c" newfilename.dic" SAVE-FORTH
The name must end in ".dic".

To run PForth with the new dictionary enter in the shell:

pforth -dnewfilename.dic
To run PForth and automatically include a forth file: pforth myprogram.fth

How to Test pForth
PForth comes with a small test suite. To test the Core words, you can use the coretest developed by John Hayes.

On Unix and MacOS using Makefile:

cd platforms/unix
make test
Using CMake:

cmake .
make
cd fth
./pforth
include tester.fth
include coretest.fth
To run the other tests, enter:

pforth t_corex.fth
pforth t_strings.fth
pforth t_locals.fth
pforth t_alloc.fth
They will report the number of tests that pass or fail.

You can also test pForth kernel without loading a dictionary using option "-i". Only the primitive words defined in C will be available. This might be necessary if the dictionary can't be built.

./pforth -i
3 4 + .
23 77 swap .s
loadsys
Releases 2
v2.0.1
Latest
on Jan 10
+ 1 release
Packages
No packages published
Contributors
13
@philburk
@ellerh
@linuxuser27
@letoh
@vuokko
@avysk
@robdaemon
@MaxBarraclough
@jpellegrini
@frankpolte
@stutonk
+ 2 contributors
Languages
C
51.6%
 
Forth
44.0%
 
Makefile
3.6%
 
CMake
0.8%
Footer
© 2023 GitHub, Inc.
]]]

