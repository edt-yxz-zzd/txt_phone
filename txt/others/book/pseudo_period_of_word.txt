
e others/book/pseudo_period_of_word.txt
  view script/bifix.py
  view others/数学/编程/永恒代码/原貌字符串.txt

[[
===20230722新增:
P. T. Nielsen. A Note on Bifix-Free Sequences. IEEE Transactions on Information Theory, vol. IT-29, 704-706, September 1973.
  https://www.semanticscholar.org/paper/A-Note-on-Bifix-Free-Sequences-Nielsen/748f2ba160314efd750671a74c85d54275f64d53
    http://orbit.dtu.dk/files/4640005/Tolstrup.pdf
      A Note on Bifix-Free Sequences(1973)(Tolstrup Nielsen)[good].pdf
]]




[[[下载文献 拟周期相关 pseudo_period_of_word
Combinatorial Algorithms on Words
    L. J. Guibas, Periodicities in Strings, Combinatorial Algorithms on Words 1985, NATO ASI Vol. F12, 257-269
    https://libgen.lc/edition.php?id=137907038
        Combinatorial Algorithms on Words(1985)(Guibas).djvu

Periods in Strings
    L. J. Guibas and A. M. Odlyzko, Periods in Strings, Journal of Combinatorial Theory A 30:1 (1981) 19-42.
    https://libgen.lc/edition.php?id=8965995
        Periods in strings(1981)(Leo J Guibas)(Andrew M Odlyzko).pdf
            下载失败！
            https://libgen.rocks/get.php?md5=477c34526634bf9d0a1a0f3d9b5450e2&key=L13IB4OGCGA199FL
            wget 'https://libgen.rocks/get.php?md5=477c34526634bf9d0a1a0f3d9b5450e2&key=L13IB4OGCGA199FL'  -O 'Periods in strings(1981)(Leo J Guibas)(Andrew M Odlyzko).pdf'
                ok!



String overlaps, pattern matching, and nontransitive games
    L.JGuibas  A.MOdlyzko
    https://www.sciencedirect.com/science/article/pii/0097316581900054?via%3Dihub
        下载失败！太慢？
String overlaps, pattern matching and nontransitive games
    Leo J. Guibas and Andrew M. Odlyzko, String overlaps, pattern matching and nontransitive games, Journal of Combinatorial Theory Series A, 30 (March 1981), 183-208.
    https://libgen.lc/edition.php?id=8965972
    String overlaps, pattern matching, and nontransitive games(1981)(L.J Guibas)(A.M Odlyzko).pdf
    wget 'https://libgen.rocks/get.php?md5=507d11a72b21825005c9b8264870f857&key=WNVNRZI3OG28PHAV' -O 'String overlaps, pattern matching, and nontransitive games(1981)(L.J Guibas)(A.M Odlyzko).pdf'

Combinatorics of Periods in Strings
    E. H. Rivals and S. Rahmann, Combinatorics of Periods in Strings, Journal of Combinatorial Theory - Series A, Vol. 104(1) (2003), pp. 95-113.
    https://libgen.lc/edition.php?id=10820925
        Combinatorics of periods in strings(2003)(Eric Rivals)(Sven Rahmann).pdf

ls -1hs /sdcard/0my_files/book/math/pseudo_period_of_word/
~/.../Download/wget_ $ ls -1hs /sdcard/0my_files/book/math/pseudo_period_of_word/
total 7.0M
4.3M 'Combinatorial Algorithms on Words(1985)(Guibas).djvu'
264K 'Combinatorics of periods in strings(2003)(Eric Rivals)(Sven Rahmann).pdf'
1.2M 'Periods in strings(1981)(Leo J Guibas)(Andrew M Odlyzko).pdf'
1.4M 'String overlaps, pattern matching, and nontransitive games(1981)(L.J Guibas)(A.M Odlyzko).pdf'
]]]



copy from script/bifix.py
[[[[[
OEIS 在线揭秘整数序列
    1 2 3 4 6 8 10 13 17 21 27 30 37 47 57 62
    https://oeis.org/A005434
        #A005434 Number of distinct autocorrelations of binary words of length n.
        #   为什么只是 二进制？是否 真的与任意大小字母表的字符串 拥有同样的 双缀长度可行配置？
        #   Yes!见下面:『Binary words give the same range as larger alphabets [Guibas, Odlyzko 1981, Thm 5.1].』@『https://www.math.uni-bielefeld.de/~sillke/SEQUENCES/autocorrelation-range.c』
        #A045690 (the number of binary strings sharing the same autocorrelation).

    [[[ https://oeis.org/A005434
The OEIS is supported by the many generous donors to the OEIS Foundation.
 

(Greetings from The On-Line Encyclopedia of Integer Sequences!)
A005434		Number of distinct autocorrelations of binary words of length n.
(Formerly M0555)		8
1, 2, 3, 4, 6, 8, 10, 13, 17, 21, 27, 30, 37, 47, 57, 62, 75, 87, 102, 116, 135, 155, 180, 194, 220, 254, 289, 312, 359, 392, 438, 479, 538, 595, 664, 701, 772, 863, 956, 1005, 1115, 1205, 1317, 1414, 1552, 1677, 1836, 1920, 2074, 2249, 2444 (list; graph; refs; listen; history; text; internal format)
OFFSET	
1,2

COMMENTS	
Conjecture: a(n + 1) - a(n) < a(n + 13) - a(n + 12) for all n >= 1. - Eric Rowland, Nov 24 2021

REFERENCES	
R. L. Graham, D. E. Knuth and O. Patashnik, Concrete Mathematics, Addison-Wesley Publ., 2nd Ed., 1994. Section 8.4: Flipping Coins

N. J. A. Sloane and Simon Plouffe, The Encyclopedia of Integer Sequences, Academic Press, 1995 (includes this sequence).

LINKS	
E-Hern Lee, Table of n, a(n) for n = 1..654
    #https://oeis.org/A005434/b005434.txt

L. J. Guibas, Periodicities in Strings, Combinatorial Algorithms on Words 1985, NATO ASI Vol. F12, 257-269

L. J. Guibas and A. M. Odlyzko, Periods in Strings, Journal of Combinatorial Theory A 30:1 (1981) 19-42.

Leo J. Guibas and Andrew M. Odlyzko, String overlaps, pattern matching and nontransitive games, Journal of Combinatorial Theory Series A, 30 (March 1981), 183-208.

H. Harborth, Endliche 0-1-Folgen mit gleichen Teilblöcken, Journal für Mathematik, 271 (1974) 139-154.

A. Kaseorg, Rust program used to compute values for n up to 500
    #https://codegolf.stackexchange.com/questions/126872/compute-oeis-a005434/127038#127038

E. H. Rivals and S. Rahmann, Combinatorics of Periods in Strings, Journal of Combinatorial Theory - Series A, Vol. 104(1) (2003), pp. 95-113.

E. H. Rivals, Autocorrelation of Strings.

E. H. Rivals and S. Rahmann Combinatorics of Periods in Strings

T. Sillke, Autocorrelation Range

T. Sillke, kappa sequence for words of length n

T. Sillke, The autocorrelation function

EXAMPLE	
From Eric Rowland, Nov 22 2021: (Start)

For n = 5 there are a(5) = 6 distinct autocorrelations of length-5 binary words:

  00000 can overlap itself in 1, 2, 3, 4, or 5 letters. Its autocorrelation is 11111.

  00100 can overlap itself in 1, 2, or 5 letters. Its autocorrelation is 10011.

  01010 can overlap itself in 1, 3, or 5 letters. Its autocorrelation is 10101.

  00010 can overlap itself in 1 or 5 letters. Its autocorrelation is 10001.

  01001 can overlap itself in 2 or 5 letters. Its autocorrelation is 10010.

  00001 can only overlap itself in 5 letters. Its autocorrelation is 10000.

(End)

MAPLE	
A005434 := proc( n :: posint )

    local    S := table();

    for local c in Iterator:-BinaryGrayCode( n ) do

        c := convert( c, 'list' );

        S[ [seq]( evalb( c[ 1 .. i + 1 ] = c[ n - i .. n ] ), i = 0 .. n - 1 ) ] := 0

    end do;

    numelems( S )

end proc: # James McCarron, Jun 21 2017

MATHEMATICA	
Table[Length[Union[Map[Flatten[Position[Table[Take[#, n-i]==Drop[#, i], {i, 0, n-1}], True]-1]&, Tuples[{0, 1}, n]]]], {n, 1, 15}] (* Geoffrey Critzer, Nov 29 2013 *)

CROSSREFS	
Cf. A018819 (related to a lower bound for autocorrelations), A045690 (the number of binary strings sharing the same autocorrelation).

Sequence in context: A325350 A027585 A123015 * A027589 A039851 A239100

Adjacent sequences:  A005431 A005432 A005433 * A005435 A005436 A005437

KEYWORD	
nonn,nice

AUTHOR	
Simon Plouffe, N. J. A. Sloane

EXTENSIONS	
More terms and additional references from torsten.sillke(at)lhsystems.com

Definition clarified by Eric Rowland, Nov 22 2021

STATUS	
approved

Lookup | Welcome | Wiki | Register | Music | Plot 2 | Demos | Index | Browse | More | WebCam
Contribute new seq. or comment | Format | Style Sheet | Transforms | Superseeker | Recents
The OEIS Community | Maintained by The OEIS Foundation Inc.
License Agreements, Terms of Use, Privacy Policy. .
Last modified June 16 08:57 EDT 2022. Contains 354568 sequences. (Running on oeis4.)
    ]]]
    [[[ https://oeis.org/A005434/b005434.txt
        #LINKS	E-Hern Lee, Table of n, a(n) for n = 1..654
1 1
2 2
3 3
4 4
5 6
6 8
7 10
8 13
9 17
10 21
11 27
12 30
13 37
14 47
15 57
16 62
17 75
18 87
19 102
20 116
21 135
22 155
23 180
24 194
25 220
26 254
27 289
28 312
29 359
30 392
31 438
32 479
33 538
34 595
35 664
36 701
37 772
38 863
39 956
40 1005
41 1115
42 1205
43 1317
44 1414
45 1552
46 1677
47 1836
48 1920
49 2074
50 2249
51 2444
52 2575
53 2811
54 2999
55 3226
56 3401
57 3676
58 3915
59 4238
60 4399
61 4712
62 5075
63 5430
64 5651
65 6088
66 6420
67 6846
68 7217
69 7729
70 8103
71 8680
72 8982
73 9537
74 10146
75 10798
76 11210
77 11927
78 12549
79 13269
80 13809
81 14654
82 15352
83 16319
84 16856
85 17787
86 18752
87 19852
88 20466
89 21731
90 22596
91 23742
92 24736
93 26147
94 27254
95 28798
96 29604
97 31072
98 32531
99 34211
100 35200
101 37116
102 38617
103 40430
104 41894
105 43949
106 45607
107 47965
108 49300
109 51576
110 53721
111 56311
112 57683
113 60607
114 62857
115 65574
116 67782
117 70874
118 73348
119 76749
120 78588
121 81828
122 85120
123 88923
124 91205
125 95457
126 98379
127 102367
128 105413
129 110011
130 113310
131 118312
132 121217
133 125869
134 130535
135 135842
136 138896
137 144905
138 149384
139 155024
140 159123
141 165569
142 170389
143 177320
144 181195
145 187831
146 194122
147 201482
148 205981
149 214289
150 220271
151 227989
152 233938
153 242727
154 248985
155 258754
156 264226
157 273314
158 282027
159 292274
160 297818
161 308828
162 317106
163 327619
164 336002
165 347810
166 356540
167 369500
168 376684
169 388855
170 399955
171 413510
172 421789
173 436886
174 448137
175 461915
176 472158
177 488115
178 499734
179 517021
180 526621
181 542770
182 557320
183 575642
184 586089
185 605942
186 620430
187 638616
188 653115
189 673636
190 688420
191 710867
192 723768
193 744983
194 764441
195 787951
196 801205
197 827004
198 845349
199 869448
200 887146
201 914009
202 933565
203 962232
204 979627
205 1007049
206 1031646
207 1061857
208 1079069
209 1112029
210 1134997
211 1165789
212 1189380
213 1224157
214 1249034
215 1286235
216 1307131
217 1341437
218 1372932
219 1411829
220 1433591
221 1475254
222 1506043
223 1545081
224 1573519
225 1617018
226 1647812
227 1694687
228 1722940
229 1766993
230 1805837
231 1853698
232 1881982
233 1934767
234 1972481
235 2021912
236 2058677
237 2113744
238 2151849
239 2210621
240 2243993
241 2298605
242 2347090
243 2407900
244 2444383
245 2509488
246 2556699
247 2617258
248 2663117
249 2731578
250 2778997
251 2851563
252 2893539
253 2961851
254 3022691
255 3097900
256 3140766
257 3221782
258 3280836
259 3355594
260 3411503
261 3494799
262 3554311
263 3644159
264 3696851
265 3781178
266 3852682
267 3945795
268 4000550
269 4100569
270 4170432
271 4262778
272 4331110
273 4433005
274 4505925
275 4615176
276 4680804
277 4783699
278 4873710
279 4986804
280 5049449
281 5170501
282 5257764
283 5370810
284 5456137
285 5581334
286 5666932
287 5799014
288 5877030
289 6002077
290 6109271
291 6245968
292 6327302
293 6474464
294 6578395
295 6715471
296 6815528
297 6965115
298 7071477
299 7231721
300 7327500
301 7476539
302 7606768
303 7772404
304 7867957
305 8045402
306 8168920
307 8333838
308 8453791
309 8636629
310 8761882
311 8953294
312 9068960
313 9249770
314 9405750
315 9601272
316 9717438
317 9928681
318 10080468
319 10276610
320 10419223
321 10635839
322 10784091
323 11013517
324 11152736
325 11368950
326 11552335
327 11788555
328 11926779
329 12176516
330 12352827
331 12586693
332 12760793
333 13019251
334 13198996
335 13472373
336 13630773
337 13886956
338 14104021
339 14384718
340 14548107
341 14843694
342 15055368
343 15331190
344 15536165
345 15841263
346 16050865
347 16372844
348 16570845
349 16874511
350 17126093
351 17453367
352 17644609
353 17996118
354 18247831
355 18575536
356 18816617
357 19172805
358 19422297
359 19801224
360 20025694
361 20379527
362 20680957
363 21068565
364 21295303
365 21708508
366 21999877
367 22383263
368 22664780
369 23085416
370 23374970
371 23813969
372 24087523
373 24505299
374 24854515
375 25310046
376 25574246
377 26054215
378 26391276
379 26842357
380 27170536
381 27662261
382 28002402
383 28519817
384 28836089
385 29318799
386 29724154
387 30251913
388 30568240
389 31129913
390 31523114
391 32043809
392 32422354
393 32996783
394 33391241
395 33994163
396 34357037
397 34924250
398 35399052
399 36009513
400 36367661
401 37014365
402 37477597
403 38084481
404 38534104
405 39197123
406 39644789
407 40339819
408 40767098
409 41423374
410 41967026
411 42676408
412 43101380
413 43849890
414 44381970
415 45086254
416 45590655
417 46358428
418 46881662
419 47687949
420 48174648
421 48929974
422 49559980
423 50379192
424 50867514
425 51733088
426 52343953
427 53148800
428 53745377
429 54627890
430 55230967
431 56152794
432 56716066
433 57589501
434 58305065
435 59249855
436 59810490
437 60802411
438 61511792
439 62442408
440 63113631
441 64115955
442 64807458
443 65870027
444 66532733
445 67536428
446 68356189
447 69437921
448 70070065
449 71210668
450 72007738
451 73067407
452 73853568
453 75016783
454 75813858
455 77020953
456 77764283
457 78906434
458 79849568
459 81083904
460 81819624
461 83118413
462 84027833
463 85248412
464 86133315
465 87460342
466 88360723
467 89743252
468 90602480
469 91905344
470 92973587
471 94378722
472 95218007
473 96696943
474 97750590
475 99140187
476 100136343
477 101645042
478 102677965
479 104252862
480 105218754
481 106695500
482 107913415
483 109509107
484 110470668
485 112158568
486 113335987
487 114913716
488 116063079
489 117777502
490 118930846
491 120710950
492 121830749
493 123516734
494 124894907
495 126707170
496 127783661
497 129681711
498 131034743
499 132823777
500 134123964
501 136060994
502 137384820
503 139408133
504 140648629
505 142562173
506 144100655
507 146155213
508 147398045
509 149557128
510 151076010
511 153081257
512 154546957
513 156734410
514 158233557
515 160520863
516 161945260
517 164098263
518 165842785
519 168167206
520 169544359
521 171967419
522 173682029
523 175966567
524 177638755
525 180101770
526 181777425
527 184343047
528 185944473
529 188376597
530 190344484
531 192946120
532 194509276
533 197247912
534 199188051
535 201760749
536 203615194
537 206392862
538 208290429
539 211168072
540 212969237
541 215697035
542 217913240
543 220853938
544 222613659
545 225693603
546 227832224
547 230719323
548 232828813
549 235950819
550 238063293
551 241294996
552 243332113
553 246386838
554 248873353
555 252172160
556 254151127
557 257599405
558 260029203
559 263266348
560 265581385
561 269060720
562 271444490
563 275078450
564 277382962
565 280827400
566 283587366
567 287250859
568 289478155
569 293333193
570 296040889
571 299654660
572 302278829
573 306205068
574 308851299
575 312915117
576 315435674
577 319273663
578 322372299
579 326496486
580 328990702
581 333263992
582 336311067
583 340350191
584 343289305
585 347648605
586 350600196
587 355129441
588 357977767
589 362271986
590 365713586
591 370295056
592 373068433
593 377867521
594 381238197
595 385742438
596 389009397
597 393875718
598 397180147
599 402229202
600 405393037
601 410154627
602 413967550
603 419080655
604 422201115
605 427543314
606 431295008
607 436311176
608 439943454
609 445337308
610 449006072
611 454590652
612 458138778
613 463462665
614 467730724
615 473422702
616 476805045
617 482730283
618 486923549
619 492505469
620 496554555
621 502536770
622 506627072
623 512831482
624 516759988
625 522664489
626 527359902
627 533658344
628 537515544
629 544096988
630 548676695
631 554855131
632 559335468
633 566000957
634 570534574
635 577443152
636 581809812
637 588321359
638 593541235
639 600527280
640 604748937
641 612009878
642 617146214
643 624008092
644 628964829
645 636356693
646 641321076
647 648951624
648 653784861
649 661014844
650 666775091
651 674456523
652 679185447
653 687244914
654 692932788
    ]]]
    [[[ https://codegolf.stackexchange.com/questions/126872/compute-oeis-a005434/127038#127038
        #A. Kaseorg, Rust program used to compute values for n up to 500

Compute OEIS A005434
Asked 5 years ago
Modified 5 years ago
Viewed 550 times

10


1
The task is to compute OEIS A005434 as quickly as possible.

Consider a binary string S of length n. Indexing from 1, we can determine if S[1..i+1] matches S[n-i..n] exactly for all i in order from 0 to n-1. For example,

S = 01010
gives

[Y, N, Y, N, Y].
This is because 0 matches 0, 01 does not match 10, 010 matches 010, 0101 does not match 1010 and finally 01010 matches itself.

Define f(n) to be the number of distinct arrays of Ys and Ns one gets when iterating over all 2^n different possible bit strings S of length n.

The observant will notice this question is a simpler variant of another recent question of mine. However, I expect that clever tricks can make this much faster and easier.

Task
For increasing n starting at 1, your code should output n, f(n).

Example answers
For n = 1..24, the correct answers are:

1, 2, 3, 4, 6, 8, 10, 13, 17, 21, 27, 30, 37, 47, 57, 62, 75, 87, 102, 116, 135, 155, 180, 194
Scoring
Your code should iterate up from n = 1 giving the answer for each n in turn. I will time the entire run, killing it after two minutes.

Your score is the highest n you get to in that time.

In the case of a tie, the first answer wins.

Where will my code be tested?
I will run your code under Virtualbox in a Lubuntu guest VM (on my Windows 7 host).

My laptop has 8GB of RAM and an Intel i7 5600U@2.6 GHz (Broadwell) CPU with 2 cores and 4 threads. The instruction set includes SSE4.2, AVX, AVX2, FMA3 and TSX.

Leading entries per language
n = 599 in Rust bu Anders Kaseorg.
n= 30 in C by Grimy. Parallel version gets to 32 when run natively in cygwin.
array
combinatorics
fastest-code
Share
Improve this question
Follow
edited Jun 17, 2017 at 15:56
asked Jun 16, 2017 at 11:38
user9206
math.uni-bielefeld.de/~sillke/SEQUENCES/autocorrelation-range.c (linked from the OEIS page) run with -O3 can calculate up to 100 in <.02 seconds on my machine – 
vroomfondel
 Jun 16, 2017 at 15:08
@rogaos Oh dear. I should delete the question but it already has an answer. – 
user9206
 Jun 16, 2017 at 15:10
I think it's still a cool problem – but maybe up to 1000 instead? Or ask answers to golf a sufficiently fast program – 
vroomfondel
 Jun 16, 2017 at 15:11
1
@rogaos I just removed the hard limit completely. – 
user9206
 Jun 16, 2017 at 15:19
Add a comment
2 Answers
Sorted by:

Highest score (default)

4

Rust, n ≈ 660
use std::collections::HashMap;
use std::iter::once;
use std::rc::Rc;

type Memo = HashMap<(u32, u32, Rc<Vec<u32>>), u64>;

fn f(memo: &mut Memo, mut n: u32, p: u32, mut s: Rc<Vec<u32>>) -> u64 {
    debug_assert!(p != 0);
    let d = n / p;
    debug_assert!(d >= 1);
    let r = n - p * if d >= 2 { d - 1 } else { 1 };

    let k = s.binary_search(&(n - r + 1)).unwrap_or_else(|i| i);
    for &i in &s[..k] {
        if i % p != 0 {
            return 0;
        }
    }

    if d >= 3 {
        let o = n - (p + r);
        n = p + r;
        s = Rc::new(s[k..].iter().map(|i| i - o).collect());
    } else if n == p {
        return 1;
    } else if k != 0 {
        s = Rc::new(s[k..].to_vec());
    }

    let query = (n, p, s);
    if let Some(&c) = memo.get(&query) {
        return c;
    }
    let (n, p, s) = query;

    let t = Rc::new(s.iter().map(|i| i - p).collect::<Vec<_>>());
    let c = if d < 2 {
        (1..r + 1).map(|q| f(memo, r, q, t.clone())).sum()
    } else if r == p {
        (1..p + 1)
            .filter(|&q| p % q != 0 || q == p)
            .map(|q| f(memo, r, q, t.clone()))
            .sum()
    } else {
        let t = match t.binary_search(&p) {
            Ok(_) => t,
            Err(k) => {
                Rc::new(t[..k]
                            .iter()
                            .cloned()
                            .chain(once(p))
                            .chain(t[k..].iter().cloned())
                            .collect::<Vec<_>>())
            }
        };
        (1..t.first().unwrap() + 1)
            .filter(|&q| p % q != 0 || q == p)
            .map(|q| f(memo, r, q, t.clone()))
            .sum()
    };
    memo.insert((n, p, s), c);
    c
}

fn main() {
    let mut memo = HashMap::new();
    let s = Rc::new(Vec::new());
    for n in 1.. {
        println!("{} {}",
                 n,
                 (1..n + 1)
                     .map(|p| f(&mut memo, n, p, s.clone()))
                     .sum::<u64>());
    }
}
Try it online!

How it works
This is a memoized implementation of the recursive predicate Ξ given in Leo Guibas, “Periods in strings” (1981). The function f(memo, n, p, s) finds the number of correlations of length n with smallest period p and also each of the periods in the set s.

Share
Improve this answer
Follow
answered Jun 17, 2017 at 11:33
user avatar
Anders Kaseorg
37.2k33 gold badges6666 silver badges134134 bronze badges
    ]]]
    [[[ https://www.math.uni-bielefeld.de/~sillke/SEQUENCES/kappa
        #T. Sillke, kappa sequence for words of length n
   1             1
   2             2
   3             3
   4             4
   5             6
   6             8
   7            10
   8            13
   9            17
  10            21
  11            27
  12            30
  13            37
  14            47
  15            57
  16            62
  17            75
  18            87
  19           102
  20           116
  21           135
  22           155
  23           180
  24           194
  25           220
  26           254
  27           289
  28           312
  29           359
  30           392
  31           438
  32           479
  33           538
  34           595
  35           664
  36           701
  37           772
  38           863
  39           956
  40          1005
  41          1115
  42          1205
  43          1317
  44          1414
  45          1552
  46          1677
  47          1836
  48          1920
  49          2074
  50          2249
  51          2444
  52          2575
  53          2811
  54          2999
  55          3226
  56          3401
  57          3676
  58          3915
  59          4238
  60          4399
  61          4712
  62          5075
  63          5430
  64          5651
  65          6088
  66          6420
  67          6846
  68          7217
  69          7729
  70          8103
  71          8680
  72          8982
  73          9537
  74         10146
  75         10798
  76         11210
  77         11927
  78         12549
  79         13269
  80         13809
  81         14654
  82         15352
  83         16319
  84         16856
  85         17787
  86         18752
  87         19852
  88         20466
  89         21731
  90         22596
  91         23742
  92         24736
  93         26147
  94         27254
  95         28798
  96         29604
  97         31072
  98         32531
  99         34211
 100         35200
 101         37116
 102         38617
 103         40430
 104         41894
 105         43949
 106         45607
 107         47965
 108         49300
 109         51576
 110         53721
 111         56311
 112         57683
 113         60607
 114         62857
 115         65574
 116         67782
 117         70874
 118         73348
 119         76749
 120         78588
 121         81828
 122         85120
 123         88923
 124         91205
 125         95457
 126         98379
 127        102367
 128        105413
 129        110011
 130        113310
 131        118312
 132        121217
 133        125869
 134        130535
 135        135842
 136        138896
 137        144905
 138        149384
 139        155024
 140        159123
 141        165569
 142        170389
 143        177320
 144        181195
 145        187831
 146        194122
 147        201482
 148        205981
 149        214289
 150        220271
 151        227989
 152        233938
 153        242727
 154        248985
 155        258754
 156        264226
 157        273314
 158        282027
 159        292274
 160        297818
 161        308828
 162        317106
 163        327619
 164        336002
 165        347810
 166        356540
 167        369500
 168        376684
 169        388855
 170        399955
 171        413510
 172        421789
 173        436886
 174        448137
 175        461915
 176        472158
 177        488115
 178        499734
 179        517021
 180        526621
 181        542770
 182        557320
 183        575642
 184        586089
 185        605942
 186        620430
 187        638616
 188        653115
 189        673636
 190        688420
 191        710867
 192        723768
 193        744983
 194        764441
 195        787951
 196        801205
 197        827004
 198        845349
 199        869448
 200        887146
 201        914009
 202        933565
 203        962232
 204        979627
 205       1007049
 206       1031646
 207       1061857
 208       1079069
 209       1112029
 210       1134997
 211       1165789
 212       1189380
 213       1224157
 214       1249034
 215       1286235
 216       1307131
 217       1341437
 218       1372932
 219       1411829
 220       1433591
 221       1475254
 222       1506043
 223       1545081
 224       1573519
 225       1617018
 226       1647812
 227       1694687
 228       1722940
 229       1766993
 230       1805837
 231       1853698
 232       1881982
 233       1934767
 234       1972481
 235       2021912
 236       2058677
 237       2113744
 238       2151849
 239       2210621
 240       2243993
 241       2298605
 242       2347090
 243       2407900
 244       2444383
 245       2509488
 246       2556699
 247       2617258
 248       2663117
 249       2731578
 250       2778997
 251       2851563
 252       2893539
 253       2961851
 254       3022691
 255       3097900
 256       3140766
 257       3221782
 258       3280836
 259       3355594
 260       3411503
 261       3494799
 262       3554311
 263       3644159
 264       3696851
 265       3781178
 266       3852682
 267       3945795
 268       4000550
 269       4100569
 270       4170432
 271       4262778
 272       4331110
 273       4433005
 274       4505925
 275       4615176
 276       4680804
 277       4783699
 278       4873710
 279       4986804
 280       5049449
 281       5170501
 282       5257764
 283       5370810
 284       5456137
 285       5581334
 286       5666932
 287       5799014
 288       5877030
 289       6002077
 290       6109271
 291       6245968
 292       6327302
 293       6474464
 294       6578395
 295       6715471
 296       6815528
 297       6965115
 298       7071477
 299       7231721
 300       7327500
 301       7476539
 302       7606768
 303       7772404
 304       7867957
 305       8045402
 306       8168920
 307       8333838
 308       8453791
 309       8636629
 310       8761882
 311       8953294
 312       9068960
 313       9249770
 314       9405750
 315       9601272
 316       9717438
 317       9928681
 318      10080468
 319      10276610
 320      10419223
 321      10635839
 322      10784091
 323      11013517
 324      11152736
 325      11368950
 326      11552335
 327      11788555
 328      11926779
 329      12176516
 330      12352827
 331      12586693
 332      12760793
 333      13019251
 334      13198996
 335      13472373
 336      13630773
 337      13886956
 338      14104021
 339      14384718
 340      14548107
 341      14843694
 342      15055368
 343      15331190
 344      15536165
 345      15841263
 346      16050865
 347      16372844
 348      16570845
 349      16874511
 350      17126093
 351      17453367
 352      17644609
 353      17996118
 354      18247831
 355      18575536
 356      18816617
 357      19172805
 358      19422297
 359      19801224
 360      20025694
 361      20379527
 362      20680957
 363      21068565
 364      21295303
 365      21708508
 366      21999877
 367      22383263
 368      22664780
 369      23085416
 370      23374970
 371      23813969
 372      24087523
 373      24505299
 374      24854515
 375      25310046
 376      25574246
 377      26054215
 378      26391276
 379      26842357
 380      27170536
 381      27662261
 382      28002402
 383      28519817
 384      28836089
 385      29318799
 386      29724154
 387      30251913
 388      30568240
 389      31129913
 390      31523114
 391      32043809
 392      32422354
 393      32996783
 394      33391241
 395      33994163
 396      34357037
 397      34924250
 398      35399052
 399      36009513
 400      36367661
 401      37014365
 402      37477597
 403      38084481
 404      38534104
 405      39197123
 406      39644789
 407      40339819
 408      40767098
 409      41423374
 410      41967026
 411      42676408
 412      43101380
 413      43849890
 414      44381970
 415      45086254
 416      45590655
 417      46358428
 418      46881662
 419      47687949
 420      48174648
 421      48929974
 422      49559980
 423      50379192
 424      50867514
 425      51733088
 426      52343953
 427      53148800
 428      53745377
 429      54627890
 430      55230967
 431      56152794
 432      56716066
 433      57589501
 434      58305065
 435      59249855
 436      59810490
 437      60802411
 438      61511792
 439      62442408
 440      63113631
 441      64115955
 442      64807458
 443      65870027
 444      66532733
 445      67536428
 446      68356189
 447      69437921
 448      70070065
 449      71210668
 450      72007738
 451      73067407
 452      73853568
 453      75016783
 454      75813858
 455      77020953
 456      77764283
 457      78906434
 458      79849568
 459      81083904
 460      81819624
 461      83118413
 462      84027833
 463      85248412
 464      86133315
 465      87460342
 466      88360723
 467      89743252
 468      90602480
 469      91905344
 470      92973587
 471      94378722
 472      95218007
 473      96696943
 474      97750590
 475      99140187
 476     100136343
 477     101645042
 478     102677965
 479     104252862
 480     105218754
 481     106695500
 482     107913415
 483     109509107
 484     110470668
 485     112158568
 486     113335987
 487     114913716
 488     116063079
 489     117777502
 490     118930846
 491     120710950
 492     121830749
 493     123516734
 494     124894907
 495     126707170
 496     127783661
 497     129681711
 498     131034743
 499     132823777
 500     134123964
 501     136060994
 502     137384820
 503     139408133
 504     140648629
 505     142562173
 506     144100655
 507     146155213
 508     147398045
 509     149557128
 510     151076010
 511     153081257
 512     154546957
 513     156734410
 514     158233557
 515     160520863
 516     161945260
 517     164098263
 518     165842785
 519     168167206
 520     169544359
 521     171967419
 522     173682029
 523     175966567
 524     177638755
 525     180101770
 526     181777425
 527     184343047
 528     185944473
 529     188376597
 530     190344484
 531     192946120
 532     194509276
 533     197247912
 534     199188051
 535     201760749
 536     203615194
 537     206392862
 538     208290429
 539     211168072
 540     212969237
 541     215697035
 542     217913240
 543     220853938
 544     222613659
 545     225693603
 546     227832224
 547     230719323
 548     232828813
 549     235950819
 550     238063293
 551     241294996
 552     243332113
 553     246386838
 554     248873353
 555     252172160
 556     254151127
 557     257599405
 558     260029203
 559     263266348
 560     265581385
 561     269060720
 562     271444490
 563     275078450
 564     277382962
 565     280827400
 566     283587366
 567     287250859
 568     289478155
 569     293333193
 570     296040889
 571     299654660
 572     302278829
 573     306205068
 574     308851299
 575     312915117
 576     315435674
 577     319273663
 578     322372299
 579     326496486
 580     328990702
 581     333263992
 582     336311067
 583     340350191
 584     343289305
 585     347648605
 586     350600196
 587     355129441
 588     357977767
 589     362271986
 590     365713586
 591     370295056
 592     373068433
 593     377867521
 594     381238197
 595     385742438
 596     389009397
 597     393875718
 598     397180147
 599     402229202
 600     405393037
 601     410154627
 602     413967550
 603     419080655
 604     422201115
 605     427543314
 606     431295008
 607     436311176
 608     439943454
 609     445337308
 610     449006072
 611     454590652
 612     458138778
 613     463462665
 614     467730724
 615     473422702
 616     476805045
 617     482730283
 618     486923549
 619     492505469
 620     496554555
 621     502536770
 622     506627072
 623     512831482
 624     516759988
 625     522664489
 626     527359902
 627     533658344
 628     537515544
 629     544096988
 630     548676695
 631     554855131
 632     559335468
 633     566000957
 634     570534574
 635     577443152
 636     581809812
 637     588321359
 638     593541235
 639     600527280
 640     604748937
 641     612009878
 642     617146214
 643     624008092
 644     628964829
 645     636356693
 646     641321076
 647     648951624
 648     653784861
 649     661014844
 650     666775091
 651     674456523
 652     679185447
 653     687244914
 654     692932788
 655     700528037
 656     705975365
 657     714114935
 658     719618359
 659     728058388
 660     733400057
 661     741381352
 662     747759541
 663     756292509
 664     761506544
 665     770371779
 666     776589226
 667     784960799
 668     791050827
 669     800066105
 670     806160189
 671     815424523
 672     821289595
 673     830121269
 674     837150758
 675     846558996
 676     852290727
 677     862090336
 678     869011040
 679     878220395
 680     884873261
 681     894759621
 682     901466701
 683     911726598
 684     918262464
 685     928020051
 686     935676083
 687     946044629
 688     952370667
 689     963149990
 690     970737371
 691     980878529
 692     988270142
 693     999136226
 694    1006556944
 695    1017847674
 696    1024984775
 697    1035676714
 698    1044177286
 699    1055600922
 700    1062531043
 701    1074369701
 702    1082693201
 703    1093882672
 704    1101956641
 705    1113967412
 706    1122068008
 707    1134412019
 708    1142368206
 709    1154143060
 710    1163454204
 711    1175940659
 712    1183607021
 713    1196628915
 714    1205756497
 715    1218049655
 716    1226915662
 717    1240094490
 718    1249040122
 719    1262636723
 720    1271252131
 721    1284090887
 722    1294307212
 723    1308064593
 724    1316533111
 725    1330834928
 726    1340833845
 727    1354308733
 728    1363990580
 729    1378421181
 730    1388199738
 731    1403048089
 732    1412624470
 733    1426794910
 734    1438009726
 735    1453040268
 736    1462206187
 737    1477820105
 738    1488830655
 739    1503612793
 740    1514300657
 741    1530067478
 742    1540739923
 743    1557055439
 744    1567510339
 745    1583023011
 746    1595213470
 747    1611680343
 748    1621823316
 749    1638914688
 750    1650941153
 751    1667051810
 752    1678714681
 753    1696024811
 754    1707742037
 755    1725608286
 756    1736919349
 757    1753881637
 758    1767274325
 759    1785282219
 760    1796336957
 761    1814975131
 762    1828163934
 763    1845783222
 764    1858601546
 765    1877502841
 766    1890255293
 767    1909716816
 768    1922204117
 769    1940733451
 770    1955216766
 771    1974861239
 772    1987015840
 773    2007440367
 774    2021812708
 775    2041116779
 776    2054990345
 777    2075538971
 778    2089533207
 779    2110775604
 780    2124420054
 781    2144579336
 782    2160484459
 783    2181947414
 784    2195093848
 785    2217379873
 786    2232982143
 787    2254004560
 788    2269269759
 789    2291780669
 790    2307002380
 791    2330034869
 792    2344851451
 793    2366878436
 794    2384222478
 795    2407643449
 796    2422040579
 797    2446283250
 798    2463290302
 799    2486209497
 800    2502703116
 801    2527098561
 802    2543704167
 803    2568898962
 804    2585212633
 805    2609175153
 806    2627922933
 807    2653384942
 808    2669098906
 809    2695484546
 810    2713985548
 811    2738878921
 812    2756851144
 813    2783530469
 814    2801564328
 815    2829010469
 816    2846563450
 817    2872626401
 818    2893143377
 819    2920727873
 820    2937870491
 821    2966477118
 822    2986677381
 823    3013809620
 824    3033404551
 825    3062353172
 826    3081797504
 827    3111578819
 828    3130808638
 829    3159206335
 830    3181439086
 831    3211433387
 832    3229989179
 833    3261039604
 834    3283000755
 835    3312498986
 836    3333683390
 837    3365099175
 838    3386421548
 839    3418767310
 840    3439468654
 841    3470166478
 842    3494283909
 843    3526948018
 844    3547243620
 845    3581059395
 846    3604718122
 847    3636569847
 848    3659656024
 849    3693755439
 850    3716804316
 851    3751778099
 852    3774514434
 853    3807944505
 854    3834017597
 855    3869400841
 856    3891216038
 857    3927796201
 858    3953542512
 859    3988231606
 860    4013291879
 861    4050089118
 862    4075137432
 863    4113119502
 864    4137609450
 865    4173858517
 866    4202045610
 867    4240361296
 868    4264121983
 869    4303770486
 870    4331655091
 871    4369084151
 872    4396194291
 873    4436175886
 874    4463293437
 875    4504370934
 876    4530936457
 877    4570125043
 878    4600769372
 879    4642287667
 880    4667910901
 881    4710713533
 882    4740745890
 883    4781407134
 884    4810800425
 885    4854142476
 886    4883362629
 887    4927801397
 888    4956642089
 889    4998919467
 890    5031999281
 891    5076684357
 892    5104640581
 893    5151044450
 894    5183734120
 895    5227727434
 896    5259126112
 897    5305870166
 898    5337587777
 899    5385634439
 900    5416770878
 901    5462484996
 902    5498203888
 903    5546599709
 904    5576768372
 905    5626883335
 906    5662021076
 907    5709473239
 908    5743838828
 909    5794382474
 910    5828431889
 911    5880193641
 912    5913798831
 913    5963244756
 914    6001857860
 915    6054244148
 916    6086765862
 917    6140700003
 918    6178710996
 919    6229973559
 920    6266892531
 921    6321286347
 922    6358218113
 923    6414190509
 924    6450456978
 925    6503953374
 926    6545380110
 927    6601765284
 928    6636921266
 929    6695215348
 930    6736214961
 931    6791219225
 932    6831206674
 933    6890050427
 934    6929907974
 935    6990264981
 936    7029190805
 937    7086741906
 938    7131420713
 939    7192303306
 940    7230274290
 941    7292952777
 942    7337228545
 943    7396784215
 944    7439781488
 945    7502964254
 946    7545662442
 947    7610636194
 948    7653045424
 949    7715098014
 950    7763276580
 951    7828686136
 952    7869349848
 953    7936998790
 954    7984580780
 955    8048818467
 956    8095055284
 957    8163198481
 958    8209463840
 959    8279272898
 960    8324680569
 961    8391256096
 962    8443088303
 963    8513609974
 964    8557802730
 965    8630686293
 966    8681525759
 967    8750541303
 968    8800313249
 969    8873653894
 970    8923344839
 971    8998396385
 972    9047453840
 973    9119199470
 974    9175021966
 975    9250875352
 976    9298019709
 977    9376201182
 978    9431339509
 979    9505571088
 980    9559020888
 981    9637699844
 982    9691123758
 983    9771984374
 984    9824720141
 985    9901983703
 986    9961649849
 987   10042977105
 988   10094030660
 989   10178135185
 990   10237109406
 991   10316748728
 992   10374249614
 993   10458994562
 994   10516245349
 995   10603165541
 996   10659732810
 997   10742647652
 998   10807033952
 999   10894491327
1000   10949207362
1001   11038967881
1002   11102518310
1003   11188199232
1004   11250171383
1005   11341270112
1006   11402636073
1007   11495778272
1008   11556268837
1009   11645332463
1010   11714277843
1011   11807991192
1012   11866877830
1013   11963741551
1014   12031946807
1015   12123786226
1016   12189851341
1017   12287279023
1018   12353413180
1019   12453410824
1020   12518710958
1021   12614064483
1022   12687812413
1023   12788510755
1024   12851613139
1025   12955469953
    ]]]
    [[[ https://www.math.uni-bielefeld.de/~sillke/SEQUENCES/autocorrelation-range.c
        #T. Sillke, Autocorrelation Range
/************************************************************************ 

Program: Autocorrelation-range 
  EIS entry: %N A005434 Correlations of length n. 

  This program computes the kappa sequence of [Guibas, Odlyzko 1981] 
  here called s(n), that is the range of the autocorrelation function
  for words of lenght n. Binary words give the same range as larger 
  alphabets [Guibas, Odlyzko 1981, Thm 5.1]. A lower bound (a partial 
  count) for s(n) is the sequence g(n) which has a simple recurrence.
    g(n) =   Sum_{0<=k<n/2} g(k)  for n>0 and g(0) = 1.
  An upper bound is given by the sequence h(n) 
    h(n) = 2 Sum_{0<=k<2n/3} h(k)  for n>0 and h(0) = 1.
  Achim Flammenkamp thinks G(n) is an upper bound.
    G(n) = 2 Sum_{0<=k<n/2} G(k)  for n>0 and G(0) = 1.


Theorem: [Guibas, Odlyzko 1981, Thm 6.1] 

  g(n) <= s(n) <= h(n) this means
  1/(2*ln(2)) * ln(n)^2 + O(ln(n)) <= ln(s(n)) <= 1/(2*ln(1.5)) * ln(n)^2 + O(ln(n)) 

  1/(2*ln(2)) = 0.72134752                        1/(2*ln(1.5)) = 1.23315173

Conjecture: [Flammenkamp 1984] 

  g(n) <= s(n) <= G(n) this means
  ln(s(n)) = 1/(2*ln(2)) * ln(n)^2 + O(ln(n)) 


Table: 
  n  1 2 3 4 5 6  7  8  9 10 11 12 13 14 15 16 17 18  19  20  21  22  23  24  25 
s(n) 1 2 3 4 6 8 10 13 17 21 27 30 37 47 57 62 75 87 102 116 135 155 180 194 220 
g(n) 1 1 3 3 5 5  7  7 10 10 13 13 18 18 23 23 30 30  37  37  47  47  57  57  70
G(n) 2 2 6 61010 22 22 34 34 54 54 74 74118118162162 230 230 298 298 406 406 514


Let c(k) = ln(s(k))/ln(k)^2

     k      SUM s(i)        s(k)         c(k)
     2     i<=k     3            2    1.442695
     4             10            4    0.721348
     8             47           13    0.593178
    16            345           62    0.536881
    32           4132          479    0.513823
    64          81137         5651    0.499505
   128        2581347       105413    0.491273
   256      134363131      3140766    0.486519
   512    11680244730    154546957    0.484522
  1024  1735856893587  12851613139    0.484475

    25           1609          220    0.520562
    50          26585         2249    0.504331
   100         712107        35200    0.493635
   200       31043203       887146    0.487877
   400     2242057514     36367661    0.484967
   800   274557525473   2502703116    0.484303

   125        2581347        95457    0.491855
   250      116394821      2778997    0.486694
   500     9938264716    134123964    0.484558
  1000  1449582463459  10949207362    0.484450

    96         579093        29604    0.494193
   192       24515676       723768    0.488119
   384     1717635518     28836089    0.485091
   768   203765388274   1922204117    0.484295

I computed s(n) for n=1..1025. For these values the relations

   c(k) >= c(2k)
   c(k) >= c(2k+1)

are valid. But this is far off the range of Guibas and Odlyzko.
!!! This is a effect of small numbers!!!

The sequence g(n)=g_1/2(n) as a lower bound of s(n).
For small values it seems that g(n)/s(n) will get 0 but actually
we conjecture it will get 1 in the limit.

Let c(k) = ln(g(k))/ln(k)^2

       k                              g(k)                            c(k)
       1                                                           1  --
       2                                                           1   0
       4                                                           2  0.360674
       8                                                           5  0.372204
      16                                                          18  0.375996
      32                                                         101  0.384231
      64                                                         914  0.394178
     128                                                       13669  0.404503
     256                                                      346002  0.414784
     512                                                    15125861  0.424803
    1024                                                  1160259474  0.434421
    2048                                                158179790181  0.443572
    4096                                              38738590246802  0.452233
    8192                                           17197434971491685  0.460408
   16384                                        13946948553384470418  0.468115
   32768                                     20801852501722154798437  0.475378
   65536                                  57394092679599617426401170  0.482227
  131072                              294440200461527865557589036389  0.488689
  262144                          2821322906713566368577851632986002  0.494791
  524288                      50696230714615530782170397980860222821  0.500560
 1048576                 1714436281238833563429247726066516726196114  0.506021
 2097152            109468016758840716037232125004455181509123771749  0.511195
 4194304       13235341870130346943270413920397922419167756292269970  0.516105
 8388608  3038154089380384403189378033688960310709428246395156303205  0.520770

Let c(k) = ln(G(k))/ln(k)^2

       k                              G(k)                            c(k)
       1                                                           2  --
       2                                                           2  1.442700
       4                                                           6  0.932328
       8                                                          22  0.714844
      16                                                         118  0.620597
      32                                                        1046  0.578848
      64                                                       15702  0.558590
     128                                                      399190  0.547833
     256                                                    17449814  0.542289
     512                                                  1336408406  0.539955
    1024                                                181971731798  0.539639
    2048                                              44543346365782  0.540597
    4096                                           19775048447292758  0.542358
    8192                                        16041676322957890902  0.544626
   16384                                     23933078568108290692438  0.547204
   32768                                  66046901446088494993855830  0.549966
   65536                              338861259594750332197920265558  0.552826
  131072                          3246951705295431411825013405865302  0.555726
  262144                      58340594755827510290776270175897736534  0.558625
  524288                 1972776438659273563037657824675546034165078  0.561497
 1048576            125952271100667647110015343508146950147805631830  0.564323
 2097152       15227345601001005831201353121509502093685898136081750  0.567090
 4194304  3495266605472441219429226674304715303240299252189429585238  0.569791
 8388608 1526923948378492639896463764987834122332457857439516072961463638 0.572420


Approximation of g(q,s,n):
  The sum g(q,s,n) = s Sum_{0<=k<qn} g(q,s,k) with g(q,s,0) = 1 can be 
  approximated by the integral equation f(x) = s Integral_0^qx f(t) dt.
  This gives the differential equation: f'(x) = s q f( q x ).
  This was considered by K. Mahler and N. G. de Bruijn. See also Kato.
  The major part of f(x) is 
     x^k (log x)^h exp( - 1/(2c) (log x - log log x)^2 )
  with c = log q < 0 and k = 1/2 - 1/c - log(-sqc)/c and h = -1 + log(-sqc)/c.

References: 

- A. Benczur, I. Katai;
  On the number of occurences of sequences patterns,
  Acta Math. Hungarica, 47 (1986) 371-382
  Zbl 625.68053 (not reviewed)

- N. G. de Bruijn;
  The Difference-Differential Equation F'(x) = exp(ax+b) F(x-1),
  Indagationes Mathematicae, Proc. of the Section of Sciences, 15 (1953) 449-464
  - solves Mahler's equation f'(y) = f(qy)

- N. J. Fine, H. S. Wilf;
  Uniqueness theorems for periodic functions,
  Proc. Amer. Math. Soc. 16 (1965) 109-114
  Zbl 131.30203
  - the GCD rule

- P. O. Frederickson (solver), L. Fox (comment)
  A differential Equation y'(t) = y(\lambda t), y(0) = 1.
  SIAM Review 22 (1980) 502-503, Problem 79-20*, by J D Love

- Martin Gardner; 
  On the Paradoxial Situations that Arise from Nontransitive Relations, 
  Scientific American, 231:4 (October 1974) 120-124. 
  Preprinted in his: Time Travel and Other Mathematical Bewilderments 
  Freeman (1988) New York, Chap 5: Nontransitive Paradoxes, 55-69 

- Ronald L. Graham, Donald E. Knuth, Oren Patashnik;
  Concrete mathematics: a foundation for computer science,
  Addison-Wesley Publ., Amsterdam, 2nd Ed., 1994.
  Zbl 668.00003 (1st Ed.)
  Zbl 836.00001 (2nd Ed.)
  Section 8.4: Flipping Coins

- Leo J. Guibas;
  Periodicities in Strings, 
  Combinatorial Algorithms on Words 1985, NATO ASI Vol. F12, 257-269 
  Zbl 568.68058

- Leo J. Guibas, Andrew M. Odlyzko;
  Periods in Strings, 
  Journal of Combinatorial Theory A 30:1 (1981) 19-42 
  Zbl 464.68070
  Section 3: The Propagation Rules
  - Thm 3.1 (The GCD Rule)
  Section 4: The Recursive Definition
  - Procedure Ksi 
    Test if a given bit vector can arise as the correlation of some string.
  Section 6: Counting the Correlations
  - The kappa sequence

- Leo J. Guibas, Andrew M. Odlyzko;
  String Overlaps, Patterns, Matching and Nontransitive Games, 
  Journal of Combinatorial Theory A 30 (1981) 183-208 
  Zbl 454.68109

- Tosio Kato, J. B. McLeod;
  The functional-differential equation y'(x) = a y(\lambda x)+b y(x),
  Bulletin of the American Mathematical Society 77 (1971) 891-937

- Douglas A. Leonard;
  A Prefix Problem,
  Ars Combinatoria 24 (1987) 51-55
  Zbl. 636.68085
  - construct the smallest word with a given autocorrelation

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  The correlation function: (notation from 'Concete Mathematics')

    Let W be a word of length L(W) the denote W^(k) and W_(k) respectively
    the last k charactern and the first k charecters of W.

    Then the correlation function between two word U and V is

    U:V = Sum_{1<=k<=min(L(U),L(V))} 2^(k-1) [ U^(k) = B_(k) ]

  The autocorrelation of a word W is then

    W:W

  Example (from 'Concete Mathematics')

    A  =  HTHTHHTHTH
  A:A  = (1000010101)_2 = 512 + 16 + 4 + 1 = 533
          HTHTHHTHTH       ok
           HTHTHHTHTH
            HTHTHHTHTH
             HTHTHHTHTH
              HTHTHHTHTH
               HTHTHHTHTH       ok
                HTHTHHTHTH
                 HTHTHHTHTH       ok
                  HTHTHHTHTH
                   HTHTHHTHTH       ok
-- 
mailto:Torsten.Sillke@uni-bielefeld.de 
http://www.mathematik.uni-bielefeld.de/~sillke/ 
************************************************************************/ 

#include <stdio.h> 
#define  M         1030 
#define  Unsigned  int 
Unsigned  d[M], j[M]; 
double    count[M]; 

#if 0
#define Put if(n<10){int i; for(i=1;i<=h;i++) putchar(d[i]+'0'); putchar('\n');}
/* the d[i] is the distance between two bits.                       */
/* Constructed(a): a = 0; for (i=1;i<=h;i++) a = (2*a+1)<<(d[i]-1); */
#else
#define Put
#endif

void number_of_different (Unsigned max) 
{ 
   Unsigned  h, n, k; 
#define  divisible   ( d[k+1] == 1 || !( d[k]%d[k+1] ) ) 

   for (k=max; k>=0; k--) count[k]=0; 
   n = 0; 
   h = 0; 
   j[0] = 0; 

   for (;;) 
   { 
      h++; 
      d[h] = 1; j[h] = ++n; 
      count[n] += 1; Put;
      while (n<max) 
      { 
         if (h>2) 
         {  k= h-2; 
            do { 
               if (j[k] == n  &&  divisible) 
                  goto valid; 
            } while (--k > 0); 
         } 
         j[h] += 2; d[h] += 1; 
         n++; 
         for (k=h-1; k>0; k--) 
            if (j[k] == n-2) 
               goto valid; 
         count[n] += 1; Put;
      } 
      valid: 
      do { 
         while (j[h] == n--) 
            if (--h == 0) return; 
         j[h] -= 2; d[h] -= 1; 
      } while (j[h-1] == n  &&  d[h] == 1); 
   } 
} 
#undef  divisible 

int main (int argc, char ** argv) 
{ 
  Unsigned  max, k; 
  double total = 0; 
  if (argc>1) 
  {  if (1 != sscanf(argv[1],"%u",&max)) 
        return  fprintf(stderr,"illegal parameter: no number %s\n", argv[1]), 2;
  } 
  else 
  { 
     printf("Autocorrelation range for binary words.\nHow many letters? "); 
     scanf("%u", &max); 
  } 
  if (max > M-1) 
     return  fprintf(stderr,"words too long. At most %u letters.\n", M-1), 1; 
  number_of_different (max); 
  for (k=1; k<=max; k++) 
  { 
     printf("%5d %12.0lf\n", k, count[k]); 
     total += count[k]; 
  } 
  printf("Total %.0lf\n", total); 
  return 0; 
} 
    ]]]
    [[[ https://www.math.uni-bielefeld.de/~sillke/SEQUENCES/series018
        #T. Sillke, The autocorrelation function
The autocorrelation function auto() is a mapping from
{0,1}^n to {0,1}^N for each n greater than zero.
(Let N be the set of positive integers.)

An old question is:

  What is the size of the range of auto().
  Let the size be s(n) = # auto({0,1}^n).


The Autocorrelation is defined as

  auto(s) = correlation(s,s)

where the Correlation-function is defined as

  correlation(s1, s2) = 

    indicator(length({ w in {0,1}^* | s1 = x.w, s2 = w.y, #w > 0 }))


Example:

   s1 = 10101, s2 = 10110,

   CS = { w in {0,1}^* | s1 = x.w, s2 = w.y, #w > 0 } = { 1, 101 }

   CL = length(CS) = length({ 1, 101 }) = { 1, 3 }

   C  = indicator(CL) = indicator({ 1, 3 })

      = f : N -> {0,1} with f(n) = 1 if n element { 1, 3 } else 0.


Theorem: (Guibas, Odlyzko 1981)

  1/(2*ln(2)) * ln(n)^2 + O(ln(n)) <= ln(s(n)) <= 1/(2*ln(1.5)) * ln(n)^2 + O(ln(n))


Conjecture: (Flammenkamp, Sillke 1984)

  ln(s(n)) = 1/(2*ln(2)) * ln(n)^2 + o(ln(n)^2)

Table:
  n  1 2 3 4 5 6  7  8  9 10 11 12 13 14 15 16 17 18  19  20  21  22  23  24  25
s(n) 1 2 3 4 6 8 10 13 17 21 27 30 37 47 57 62 75 87 102 116 135 155 180 194 220


EIS entry: %N A005434 Correlations of length n.


References:

- A. Benczur, I. Katai;
  On the number of occurences of sequences patterns,
  Acta Math. Hungarica, 47 (1986) 371-382

- Benveneto;
  The occurrence of sequence pattern in ergodic Markov chains,
  Stochastic Processes and their Applications, 17 (1984) 369-373

- Blom, Thorburn;
  How many random digits are required until given sequences are obtained,
  Journal of Applied Probability 19 (1982) 518-531.

- A. Flammenkamp, T. Sillke;
  Table of s() upto 800 and further refinements of s().

- M. Gardner;
  On the Paradoxial Situations that Arise from Nontransitive Relations,
  Scientific American, 231:4 (October 1974) 120-124.
  Preprinted in his: Time Travel and Other Mathematical Bewilderments
  Freeman (1988) New York, Chap 5: Nontransitive Paradoxes, 55-69

- H. U. Gerber, S. Y. R. Li;
  The Occurence of Sequence Patterns,
  Stochastic Processes and their Applications, 11 (1981) 101-108

- Ronald L. Graham, Donald E. Knuth, Oren Patashnik;
  Concrete mathematics: a foundation for computer science,
  Addison-Wesley Publ., Amsterdam, 2nd Ed., 1994.
  Zbl 668.00003 (1st Ed.)
  Zbl 836.00001 (2nd Ed.)
  Section 8.4: Flipping Coins

- L. J. Guibas;
  Periodicities in Strings,
  Combinatorial Algorithms on Words 1985, NATO ASI Vol. F12, 257-269

- L. J. Guibas, A. M. Odlyzko;
  Periods in Strings,
  Journal of Combinatorial Theory A 30:1 (1981) 19-42

- L. J. Guibas, A. M. Odlyzko;
  String Overlaps, Patterns, Matching and Nontransitive Games,
  Journal of Combinatorial Theory A 30 (1981) 183-208

- H. Harborth;
  Endliche 0-1-Folgen mit gleichen Teilbloecken,
  Journal fuer Mathematik, 271 (1974) 139-154,
  (als Habilitationsschrift der nat. Fakultaet der TU Braunschweig angenommen)

- D. M. Jackson, I. P. Goulden;
  Algebraic Methods for Permutations with Prescribed Patterns,
  Advances in Mathematics, 42:2 (Nov. 1981) 113-135

- N. L. Johnson, S. Kotz;
  Urn Models and Their Applications,
  Wiley, New York, 1977
  (p64 - 68)

- Shuo Yen R. Li;
  A Maringale Approach to the Study of Occurence,
  The Annals of Probability, 8 (1980) 1171-1176

- A. D. Solov'ev;
  A combinatorial identity and its application to the problem
  concerning the first occurence of a rare event,
  Theory of Probability and its Applications, 11 (1966) 276-282

- V. R. R. Uppuluri, S. A. Patli;
  Waiting Times and Generalized Fibonacci Sequences,
  The Fibonacci Quaterly, (Nov. 1983) 242-249

--
mailto:Torsten.Sillke@uni-bielefeld.de
http://www.mathematik.uni-bielefeld.de/~sillke/
    ]]]
    #https://www.lirmm.fr/~rivals/RESEARCH/PERIOD/Rivals-period-A005434.pdf





e others/book/pseudo_period_of_word.txt
[[[下载文献 拟周期相关 pseudo_period_of_word
Combinatorial Algorithms on Words
    L. J. Guibas, Periodicities in Strings, Combinatorial Algorithms on Words 1985, NATO ASI Vol. F12, 257-269
    https://libgen.lc/edition.php?id=137907038
        Combinatorial Algorithms on Words(1985)(Guibas).djvu

Periods in Strings
    L. J. Guibas and A. M. Odlyzko, Periods in Strings, Journal of Combinatorial Theory A 30:1 (1981) 19-42.
    https://libgen.lc/edition.php?id=8965995
        Periods in strings(1981)(Leo J Guibas)(Andrew M Odlyzko).pdf
            下载失败！
            https://libgen.rocks/get.php?md5=477c34526634bf9d0a1a0f3d9b5450e2&key=L13IB4OGCGA199FL
            wget 'https://libgen.rocks/get.php?md5=477c34526634bf9d0a1a0f3d9b5450e2&key=L13IB4OGCGA199FL'  -O 'Periods in strings(1981)(Leo J Guibas)(Andrew M Odlyzko).pdf'
                ok!



String overlaps, pattern matching, and nontransitive games
    L.JGuibas  A.MOdlyzko
    https://www.sciencedirect.com/science/article/pii/0097316581900054?via%3Dihub
        下载失败！太慢？
String overlaps, pattern matching and nontransitive games
    Leo J. Guibas and Andrew M. Odlyzko, String overlaps, pattern matching and nontransitive games, Journal of Combinatorial Theory Series A, 30 (March 1981), 183-208.
    https://libgen.lc/edition.php?id=8965972
    String overlaps, pattern matching, and nontransitive games(1981)(L.J Guibas)(A.M Odlyzko).pdf
    wget 'https://libgen.rocks/get.php?md5=507d11a72b21825005c9b8264870f857&key=WNVNRZI3OG28PHAV' -O 'String overlaps, pattern matching, and nontransitive games(1981)(L.J Guibas)(A.M Odlyzko).pdf'

Combinatorics of Periods in Strings
    E. H. Rivals and S. Rahmann, Combinatorics of Periods in Strings, Journal of Combinatorial Theory - Series A, Vol. 104(1) (2003), pp. 95-113.
    https://libgen.lc/edition.php?id=10820925
        Combinatorics of periods in strings(2003)(Eric Rivals)(Sven Rahmann).pdf

ls -1hs /sdcard/0my_files/book/math/pseudo_period_of_word/
~/.../Download/wget_ $ ls -1hs /sdcard/0my_files/book/math/pseudo_period_of_word/
total 7.0M
4.3M 'Combinatorial Algorithms on Words(1985)(Guibas).djvu'
264K 'Combinatorics of periods in strings(2003)(Eric Rivals)(Sven Rahmann).pdf'
1.2M 'Periods in strings(1981)(Leo J Guibas)(Andrew M Odlyzko).pdf'
1.4M 'String overlaps, pattern matching, and nontransitive games(1981)(L.J Guibas)(A.M Odlyzko).pdf'
]]]
]]]]]
