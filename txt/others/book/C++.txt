
download from libgen
  $ ls /sdcard/0my_files/book/lang/C++/
  'C Programming Pocket Primer(2019).pdf'
  'C++ All in one for dummies(4ed)(2021).pdf'
  'C++ Primer Plus(6ed)(2012).pdf'
  'C++ Primer(5ed)(2012).pdf'
  'C++ pocket reference(1ed)(2003).pdf'
  'C++20 QUICK SYNTAX REFERENCE(4ed)(2021).pdf'
  'C++_The Complete Reference(4ed)(2003).pdf'
  'Modern C++ Programming Cookbook(2ed)(2020)[C++20].pdf'
  'Modern C++ for Absolute Beginners(1ed)(2020)[C++11_20].pdf'
  'The C++ Programming Language(4ed)(2013).pdf'
  '[c++20201018]n4868.pdf'
  $




=====
下载 目标:
  ISO C++ standard library specification
  ISO C standard library specification
  C语言标准 draft
    http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf
  posix 标准
    http://www.open-std.org/JTC1/SC22/WG15/
  regex 标准？
  C++标准库 各库清单
  C标准库 各库清单
  C++标准 网页版
  C标准 网页版

实际 下载:
  The C Library Reference Guide(1997)(Eric Huss).pdf
  [libc]The GNU C Library Reference Manual(2021)(ver2.33).pdf

  27.4.2 Linearizing Class Hierarchies
  ‘‘Internal Program Representation’’ (IPR) [DosReis,2011] is a general and systematic representation of C++ code as typed abstract syntax trees.
    https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.212.9925&rep=rep1&type=pdf
        10.1.1.212.9925.pdf
          Representing C++ Directly Completely and Effciently(ge2004)[draft].pdf

    A Principled Complete and Effcient Representation of C++(2009).pdf
      https://www.stroustrup.com/gdr-bs-macis09.pdf
      www.stroustrup.com/macis09.pdf
      Abstract We present a systematic representation of C++, called IPR, for complete seman-tic analysis and semantics-based transformations. We describe the ideas and design principles that shaped the IPR. In particular, we describe how general type-based uniﬁcation is key to minimal compact representation, fast type-safe traversal, and scalability.



  expression template
    If this composition technique is used to delay execution of all operations, it is referred to as expression templates [Vandevoorde,2002] [Veldhuizen,1995].
      Expression templates systematically use function objects to represent expressions as abstract syntax trees (ASTs).
      https://www.cct.lsu.edu/~hkaiser/spring_2012/files/ExpressionTemplates-ToddVeldhuizen.pdf
        Expression Templates(1995)(Todd Veldhuizen).pdf
      https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.431.3194&rep=rep1&type=pdf
        Algorithm 940--Optimal Accumulator-Based Expression Evaluation through the Use of Expression Templates(2014).pdf
          --too long
          Optimal Accumulator-Based Expression Evaluation through the Use of Expression Templates(2014).pdf
          Optimal Accumulator-Based Expression Evaluation via Expression Templates(2014).pdf

c++
    http://eel.is/c++draft/
      https://github.com/timsong-cpp/cppwp
        N4868 (October 2020 pre-virtual-plenary working draft/C++20 plus editorial changes)
        N4868[C++202010-draft]
    download: cppreference.com
      https://en.cppreference.com/w/Cppreference:Archives
        html book 20190607.zip
          > 34M
        https://en.cppreference.com/w/File:html_book_20190607.tar.xz
          < 4M
        Unofficial Release
          https://github.com/PeterFeicht/cppreference-doc/releases/download/v20201016/html-book-20201016.tar.xz
          unofficial-cppreference--html-book-20201016.tar.xz


http://www.open-std.org/jtc1/sc22/wg14/www/docs/
  http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf
  wget http://www.open-std.org/jtc1/sc22/wg14/www/docs/
    view /sdcard/0my_files/tmp-download/wget/index.html
  <tr><td valign="top"><img src="/icons/layout.png" alt="[   ]"></td><td><a href="1961.pdf">1961.pdf</a></td><td align="right">28-Sep-2015 20:05  </td><td align="right">194K</td></tr>
<tr><td valign="top"><img src="/icons/text.png" alt="[TXT]"></td><td><a href="template-c99.htm">template-c99.htm</a></td><td align="right">11-Sep-2008 22:53  </td><td align="right">946 </td></tr>
<tr><td valign="top"><img src="/icons/folder.png" alt="[DIR]"></td><td><a href="text/">text/</a></td><td align="right">06-May-2004 03:45  </td><td align="right">  - </td></tr>
^.*alt="\([^<"]*\)".*<a href="\([^<"]*\)">[^<"]*<\/a><\/td><td align="right">\([^<"]*\)<\/td><td align="right">\([^<"]*\)<\/td><\/tr>$
%s//@@@:\1@@@$\2@@@%\3@@@#\4/g
view /sdcard/0my_files/tmp-download/wget/index.html
view /sdcard/0my_files/tmp-download/wget/index.html.txt


http://www.open-std.org/jtc1/sc22/wg14/www/standards.html
  the C99 standard is the combined C99 + TC1 + TC2 + TC3, WG14 N1256, dated 2007-09-07. This is a WG14 working paper, but it reflects the consolidated standard at the time of issue.

  The rationale for the C99 standard is available. 
    http://www.open-std.org/jtc1/sc22/wg14/www/docs/C99RationaleV5.10.pdf
  http://www.open-std.org/jtc1/sc22/wg14/www/documents
    2020-11	Post-Virtual-Oct2020/Pre-Virtual-Nov2020 mailing	N2572-NN2590,N2592-N2595,N2599-N2614
      http://www.open-std.org/jtc1/sc22/wg14/www/docs/PostVirtualOct2020.tar.bz2
http://www.open-std.org/jtc1/sc22/wg14/www/wg14_document_log.htm
  WG 14 Document Log
  Last Update: 2021/07/12
  N2784 2021/07/11 Bhakta, TS 18661-4 revision
    http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2784.pdf
  N1570 2011/04/04 Jones - DIS, diff doc
  N1256 2007/09/07 Jones, C99+tc1+tc2+tc3
http://www.open-std.org/jtc1/sc22/wg14/
http://www.open-std.org/jtc1/sc22/wg14/www/projects

  ISO/IEC 9899 - Revision of the C standard

  The primary output of WG14 is ISO/IEC 9899, the C Standard. The following is a list of revisions to ISO/IEC 9899 that the committee has produced:

  Revision	ISO publication	Similar draft
  C2x	Not available	N2596 [2020-12-11] (later drafts may be available)
  C17	ISO/IEC 9899:2018	N2310 [2018-11-11] (early C2x draft)
  C11	ISO/IEC 9899:2011	N1570 [2011-04-04]
  C99	ISO/IEC 9899:1999	N1256 [2007-09-07]
  C89	ISO/IEC 9899:1990	Not available

http://www.open-std.org/JTC1/SC22/
ISO/IEC JTC1/SC22 is the international standardization subcommittee for programming languages, their environments and system software interfaces. SC22 is oftentimes called the "portability subcommitee". An article from the ISO Bulletin magazine describing some SC22 advances is available.

 SC22 has the following working groups:
    WG4 - COBOL
    WG5 - Fortran
    WG9 - Ada
    WG14 - C
    WG17 - Prolog
    WG21 - C++
    WG23 - Programming Language Vulnerabilities
    WG24 - Linux 

 The following former SC22 working groups and other working groups are no longer active, though those marked * still have one or more project editors responsible for maintenance and for any remaining work:
    WG1 - PLIP (Programming Languages for Industrial Processes)
    WG2 - Pascal*
    WG3 - APL*
    WG6 - Algol
    WG7 - PL/I*
    WG8 - Basic*
    WG10 - Guidelines
    WG11 - Binding Techniques
    WG12 - Conformity
    WG13 - Modula-2*
    WG15 - POSIX*
    WG16 - ISLisp
    WG18 - FIMS (Form Interface Management System)*
    WG19 - Formal Specification Languages
    WG20 - Internationalization*
    WG22 - PCTE*
    JSG - Java Study Group
    I18NRG - Internationalization Rapporteur group 



