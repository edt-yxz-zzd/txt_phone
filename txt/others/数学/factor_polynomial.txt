factor_polynomial

https://en.m.wikipedia.org/wiki/Factorization_of_polynomials



1)Primitive part–content factorization
The content of a polynomial p ∈ Z[X], denoted "cont(p)", is, up to its sign, the greatest common divisor of its coefficients. The primitive part of p is primpart(p)=p/cont(p), which is a primitive polynomial with integer coefficients. This defines a factorization of p into the product of an integer and a primitive polynomial. This factorization is unique up to the sign of the content. It is a usual convention to choose the sign of the content such that the leading coefficient of the primitive part is positive. 
Everything that precedes remains true if Z is replaced by a polynomial ring over a field F and Q is replaced by a field of rational functions over F in the same variables, with the only difference that "up to a sign" must be replaced by "up to the multiplication by an invertible constant in F". This reduces the factorization over a purely transcendental field extension of F to the factorization of multivariate polynomials over F.
##factorization over a purely transcendental field extension of F to the factorization of multivariate polynomials over F


2)Square-free factorization
f = sum c[i]*x^i {i=0..n}
	c[i] <- FF[p^k]
	[c^p^k = c]
	[z^p = c] => [z = c^p^(k-1)]
	[z^p^m = c] => [z = c^p^(m*(k-1)%k) = c^p^(-m%k)]
	f = sum c[i]*x^i {i | c[i]!=0}
		#q*p^m = gcd({i|c[i]!=0})
		#[q%p!=0]
		= (sum c[i]^p^(-m%k)*x^(i/p^m) {i})^p^m

Yun's_algorithm
https://en.m.wikipedia.org/wiki/Square-free_polynomial#Yun's_algorithm
    a 0 := gcd ( f , f ′ )
    b 1 := f / a 0
    c 1 := f ′ / a 0
    d 1 := c 1 − b 1 '
    i := 1
    repeat
    a i := gcd ( b i , d i )
    b i + 1 := b i / a i
    c i + 1 := d i / a i
    i := i + 1
    d i := c i − b i '
    until b = 1
    Output a 1 , … , a i − 1
f = II a[i]^i {i=1..k}
j=0..k
f[j] = II a[i]^(i-j) {i=j+1..k}
s[j] = II a[i] {i=j+1..k}
---
f = f[0] = II s[j] {j=0..k}
f[j] = II s[j_] {j_=j..k}
f[k] = s[k] = 1
f[k+1] = 1
---
f[j+1] = gcd(f[j], f[j]')
s[j] = f[j]/f[j+1]
a[j+1] = s[j]/s[j+1]

#from f[j];s[j]
f[j+1] = f[j]/s[j]
s[j+1] = gcd(s[j],f[j+1])
a[j+1] = s[j]/s[j+1]
Yun's algorithm extends this to the multivariate case by considering a multivariate polynomial as an univariate polynomial over a polynomial ring. 






Factoring over finite fields
Factoring univariate polynomials over the integers
Factoring over algebraic extensions (Trager's method)



Rabin's test of irreducibility
https://en.m.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields
f <- FF[q=p^k][x]
n = deg(f)
[irreducible f]
	<==> [gcd(f, x^q^n-x)=f][@u<-prime. [n%u=0] => [gcd(f, x^q^(n/u)-x)=1]]
if f has a factor of degree not dividing n
	, then f does not divide x^q^n − x
if f has a factor of degree dividing n
	, then this factor divides at least one of the x^q^(n/u) − x





































































































































