
e others/数学/我的猜想.txt

[[猜想已被证明
主要猜想:
[@[M,N::int] -> [M > 0] -> [gcd(M,N)==1] -> [len{(x,y) | [x,y:<- [0..<M]][(x**2-y**2-N) %M ==0]} == phi(2*M)]]
  即:[[gcd(M,N)==1] -> [num_solutions_of_square_diff_mod(M;N) == phi(2*M)]]
另外推论:
[@[p,e,N::int] -> [[is_prime p][p%2==1][e>=1][N%p =!= 0]] -> [num_part1_of_solutions_of_square_diff_mod(p**e;N) == (p**(e-1)*(p-1)///2 -[Jacobi_symbol(p;N)==+1]*(p**(e-1) - p**(1-e%2)*(p**(e+e%2-2)-1)///(p+1) -2))]]
[@[e,N::int] -> [[e>=3][N%2 == 1]] -> [num_part1_of_solutions_of_square_diff_mod(2**e;N) == (2**(e-2) -[N%8==5]*(2**(e-2)-2**max(2,e-3)) -[N%8==1]*(2**(e-2) -[e>=5]*(4+2**(3-e%2)*(2**(e+e%2-6) -1)///3) -4))]]

===from:
view script/整数分解囗平方差囗中国剩余定理.py
猜想已被证明:
    [M > 0][gcd(M,N)==1]:
        [len(求平方差分解囗模囗暴力(M, N)) == phi(M)*2**[M%2==0] == phi(2*M)]

@[M,N::int][M =!= 0][gcd(M,N)==1]:
    #####
    [num_solutions_of_square_diff_mod(M;N) =[def]= len{(x,y) | [x,y:<- [0..<abs(M)]][(x**2-y**2-N) %M ==0]}]
    #####
    [num_solutions_of_square_diff_mod(M;+N) == num_solutions_of_square_diff_mod(M;-N)]
    #####
    [num_part1_of_solutions_of_square_diff_mod(M;N) =[def]= len{x | [x,y:<- [0..<abs(M)]][(x**2-y**2-N) %M ==0]}]
    [num_part2_of_solutions_of_square_diff_mod(M;N) =[def]= len{y | [x,y:<- [0..<abs(M)]][(x**2-y**2-N) %M ==0]}]
    #####
    [num_part2_of_solutions_of_square_diff_mod(M;+N) == num_part1_of_solutions_of_square_diff_mod(M;-N)]
    #####
    [num_part1_square_of_solutions_of_square_diff_mod(M;N) =[def]= len{x**2%M | [x,y:<- [0..<abs(M)]][(x**2-y**2-N) %M ==0]}]
        #比num_part1_of_solutions_of_square_diff_mod(M;N)少一半(p==2时剩1/4)，再少[x**2=[%M]=z][gcd(z,M)=!=1]的根(每组根计一)
    [num_part2_square_of_solutions_of_square_diff_mod(M;N) =[def]= len{y**2%M | [x,y:<- [0..<abs(M)]][(x**2-y**2-N) %M ==0]}]
    #####
    [num_part2_square_of_solutions_of_square_diff_mod(M;+N) == num_part1_square_of_solutions_of_square_diff_mod(M;-N)]
    #####
    #####
    # odd_prime:[sz_xx == sz_yy == (sz_x + sz_y - sz_xy///2)///2]
    # even_prime:[sz_xx == sz_yy == (sz_x + sz_y - sz_xy///4)///4]
    [@[p,e,N::int] -> [[is_prime p][p%2==1][e>=1][N%p =!= 0]] -> [num_part1_square_of_solutions_of_square_diff_mod(p**e;+N) == num_part1_square_of_solutions_of_square_diff_mod(p**e;-N) == (num_part1_of_solutions_of_square_diff_mod(p**e;+N) + num_part1_of_solutions_of_square_diff_mod(p**e;-N) - num_solutions_of_square_diff_mod(p**e;N)///2)///2]]
    [@[e,N::int] -> [[e>=3][N%2==1]] -> [num_part1_square_of_solutions_of_square_diff_mod(2**e;+N) == num_part1_square_of_solutions_of_square_diff_mod(2**e;-N) == (num_part1_of_solutions_of_square_diff_mod(2**e;+N) + num_part1_of_solutions_of_square_diff_mod(2**e;-N) - num_solutions_of_square_diff_mod(2**e;N)///4)///4]]
    #####

[is_prime p][p%2==1][e>=1][N%p =!= 0][(x**2-y**2-N)%p**e==0]:
    [sz_xy := num_solutions_of_square_diff_mod(p**e;N)]
        # 猜想已被证明[sz_xy==phi(2*p**e) == phi(p**e)]
    [sz_x := num_part1_of_solutions_of_square_diff_mod(p**e;N)
        == sz_xy///2 - [Jacobi_symbol(p;N)==+1]*(p**(e-1) - p**(1-e%2)*(p**(e+e%2-2)-1)///(p+1) -2)
        =[猜想已被证明]= p**(e-1)*(p-1)///2 -[Jacobi_symbol(p;N)==+1]*(p**(e-1) - p**(1-e%2)*(p**(e+e%2-2)-1)///(p+1) -2)
            #？大约phi(p**e)一半？
        =[简化]= p**(e-1)*(p-1)///2 -sp*((p**e -(1+e%2)*p-(2-e%2))///(p+1))
    ]

[e>=3][N%2==1][(x**2-y**2-N)%2**e==0]:
    [sz_xy := num_solutions_of_square_diff_mod(2**e;N)]
        # 猜想已被证明[sz_xy==phi(2*2**e) == (2**e)]
    [sz_x := num_part1_of_solutions_of_square_diff_mod(2**e;N)
        == sz_xy///4 -[N%8==5]*(2**(e-2)-2**max(2,e-3)) -[N%8==1]*(2**(e-2) -[e>=5]*(4+2**(3-e%2)*(2**(e+e%2-6) -1)///3) -4)
        =[猜想已被证明]= 2**(e-2) -[N%8==5]*(2**(e-2)-2**max(2,e-3)) -[N%8==1]*(2**(e-2) -[e>=5]*(4+2**(3-e%2)*(2**(e+e%2-6) -1)///3) -4)
            #？大约phi(2**e)一半？
        =[简化]= [3<=e<5]*(4-2*[e==3][N%4==3]) + [e>=5]*([N%4==3]*2**(e-2) +[N%8==5]*(2**(e-3)) +[N%8==1]*(4*(2**(e-5) +(4 +e%2))///3))
        =[简化补充]= [1<=e<3]*2 + [3<=e<5]*(4-2*[e==3][N%4==3]) + [e>=5]*([N%4==3]*2**(e-2) +[N%8==5]*(2**(e-3)) +[N%8==1]*(4*(2**(e-5) +(4 +e%2))///3))
    ]

]]




[[
数量估计: 小于某上限 由两两互素的生成子生成的正整数的数量
  比如:smooth number的数量
转化为 数格子
由真实数据确认，必须包含所有降维平面的格子
===
view ../../python3_src/seed/math/iter_sorted_products_of_uints.py
>>> f = lambda gs, N, /: (ls := [*iter_unsorted_products_of_strict_sorted_pairwise_coprime_uints_lt_(N, gs)], *map(ls.index, gs), len(ls))[1:]
>>> f([2,3,5,7], 2**80) #doctest: +SKIP
(1, 80, 2084, 25378, 199186)
>>> [*iter_approximate_num_pints_lt__generated_by_([2,3,5,7], 2**80)]
[1.0, 81.0, 2150.4495917143804, 27619.935194251317, 235716.78323007358]
===
view others/数学/整数分解/ECC-椭圆曲线整数分解.txt
view ../../python3_src/seed/math/iter_sorted_products_of_uints.py
===
  approximate_num_pints_lt__generated_by_(prime_bases; N)
    近似估计 由prime_bases生成的小于N的正整数数量
    等价于 数格子:
      平面: [sum log2(p)*x {(p,x) :<- zip(prime_bases,vars)} == log2(N)]与 所有 坐标平面 所围锥体。
      [@[x :<- vars] -> [x >= 0]][sum log2(p)*x {(p,x) :<- zip(prime_bases,vars)} <= log2(N)]

    volumn(lens) = II sz {sz :<- lens} / factorial(len(lens))
    volumn(prime_bases; N) = II (log2(N)/log2(p)) {p :<- prime_bases} / factorial(L)
      会减少，显然不行
    [L := len(prime_bases)]
    [approximate_num_pints_lt__generated_by_(prime_bases; N) =[def]= sum (sum volumn({prime_bases[j] | [j :<- js]}; N) {js :<- iter_combinations_(k; L)}) /factorial(k) {k :<- [0..=L]}]
    [approximate_num_pints_lt__generated_by_(prime_bases; N) == sum (sum II (log2(N)/log2(prime_bases[j])) {j :<- js} {js :<- iter_combinations_(k; L)}) /factorial(k) {k :<- [0..=L]}]
    表达为 L+1 的 数组，可用于 递推 计算
    [array4approximate_num_pints_lt__generated_by_(prime_bases; N) =[def]= [((sum II (log2(N)/log2(prime_bases[j])) {j :<- js} {js :<- iter_combinations_(k; L)}) /factorial(k)) | [k :<- [0..=L]]]]
    [array4approximate_num_pints_lt__generated_by_(prime_bases++[pL]; N) == let [ls := array4approximate_num_pints_lt__generated_by_(prime_bases; N)] in ([0+ls[0]]++[(ls[k-1]*(log2(N)/log2(pL))/k + ls[k]) | [k :<- [1..=L]]]++[(ls[(L+1)-1]*(log2(N)/log2(pL))/(L+1) + 0)])]
===


]]



[[
将 不完全离散对数+中国剩余定理 应用于 模运算开平方
view others/数学/整数分解/sqrts_mod_.txt
view ../../python3_src/seed/math/sqrts_mod_.py
view ../../python3_src/seed/math/discrete_logarithm.py
[[[
我的开平方算法
===

中国剩余定理，分解 xx 关于base的离散对数
xx =[%p]= base**(inv_mod_(2**e;odd)*odd * e4two_power + inv_mod_(odd;2**e)*2**e * e4odd)

y := xx**(inv_mod_(2**e;odd)*odd) %p
    # e4odd vanish

h := xx**(inv_mod_(odd;2**e)*2**e) %p
    # e4two_power vanish

e4y := discrete_logarithm__coprime_(p, base, order_of_base, factorization_of_order_of_base, y)
    # e4y == e4two_power

xx**(inv_mod_(2**e;odd)*odd) =[%p]= y =[%p]= base**e4y

h**((odd+1)///2)**2 =[%p]= h
h**((odd+1)///2) <- sqrts_(h)
    # !! [[(p-1)%q == 0] -> [p == q**s *t +1] -> [t%q =!= 0] -> [xq**t %p == 1] -> [a_kth_root_mod_(p;q;xq) ==  xq**(inv_mod_(t;q))]]
    # [[p == 2**s *t +1] -> [t%2 =!= 0] -> [xx**t %p == 1] -> [a_sqrt_mod_(p;xx) ==  xx**(inv_mod_(t;2)) == xx**((t+1)///2)]]


xx =[%p]= y * h =[%p]= base**e4y * h
sqrt(xx) =[%p]= sqrt(base**(e4y) * sqrt(h)
sqrt(xx) =[%p]= base**(e4y///2) * h**((odd+1)///2)
sqrt(xx) =[%p]= base**(e4y///2) * xx**(inv_mod_(odd;2**e)*2**e*(odd+1)///2)


]]]

]]





[[[
view others/数学/condition4_WW1_eq_2VV.txt
===
[@[w,v :: uint] -> [w**2+1==2*v**2] -> ?[k :: uint] -> [[v;w;] == [3,2;4,3;]**k *[1;1;]]]
[@[w,v :: uint] -> [w**2+1==2*v**2] -> ?[k :: uint] -> [[vs[k] == ((1+sqrt2)**(1+2*k) -(1-sqrt2)**(1+2*k))*sqrt2/4][ws[k] == ((1+sqrt2)**(1+2*k) +(1-sqrt2)**(1+2*k))/2]]]
[[w**2+1==2*v**2][v,w :: int][v,w > 0] -> [_v := abs(3*v-2*w)] -> [_w := abs(-4*v+3*w)] -> [[_w**2+1 == 2*_v**2][_v,_w >= 1][[1 <= _v < v]or[_v == v == 1]]]]
    # [:WW1_eq_2VV___vw_abs_decrease_until_eq1]:goto
===
[@[w,v :: uint] -> [2*w**2+1==v**2] -> ?[k :: uint] -> [[v;w;] == [3,4;2,3;]**k *[1;0;]]]
[@[w,v :: uint] -> [2*w**2+1==v**2] -> ?[k :: uint] -> [[vs[k] == 1/2*(s0**k +s1**k)][ws[k] == sqrt2/4*(s0**k -s1**k)]]]
[[2*w**2+1==v**2][v,w :: int][[v > 0][w >= 0]] -> [_v := abs(3*v-4*w)] -> [_w := abs(-2*v+3*w)] -> [[2*_w**2+1 == _v**2][_v >= 1][_w >= 0][[1 <= _v < v]or[[(v,w) == (1,0)][(_v,_w) == (3,2)]]]]]
    # [:2WW1_eq_VV___v_abs_decrease_until_eq1___loop_roots_are_1_3]:goto
===
]]]


[[[
view ../../python3_src/seed/math/right_angled_triangle_side_length.py
TODO:我的猜想:证明:
    coprime_ratio vs non_coprime_triple
===
######################
# coprime_ratio case:
???[coprime_ratio case][hypotenuse[k-1] ~= 2*pi*k]???
    ???[hypotenuse[2**k-1] ~= (25/4)*2**k]???
    ???[hypotenuse[10**k-1] ~= 2*pi*10**k]???
    #HOE = (hypotenuse_side, odd_side, even_side)
???[non_coprime_triple case][hypotenuse[k-1] ~= 2*pi*k/(ln_(k) -lnln_(k))]???
==>>:猜想推论:
    ???[num_right_angled_triangles__hypotenuse_lt_lowerbound4hypotenuse5lowerbound4B_(b0) ~= lowerbound4hypotenuse5lowerbound4B_(b0)/(2*pi)]???
        # [:conjecture4num_right_angled_triangles__hypotenuse_lt_lowerbound4hypotenuse5lowerbound4B_]:here
==>>:猜想推论:
推导:???[non_coprime_triple case][hypotenuse[k-1] ~= 2*pi*k/(ln_(k) -lnln_(k))]???
[???[coprime_ratio case][hypotenuse[k-1] ~= 2*pi*k]???]:
    [num_right_angled_triangles__hypotenuse_lt_(max1_hypotenuse, case=coprime_ratio) ~= (max1_hypotenuse/(2*pi))]
    [num_right_angled_triangles__hypotenuse_lt_(max1_hypotenuse, case=non_coprime_triple)
    == sum[k*(num_right_angled_triangles__hypotenuse_lt_(max1_hypotenuse/k, case=coprime_ratio) -num_right_angled_triangles__hypotenuse_lt_(max1_hypotenuse/(k+1), case=coprime_ratio)) | [k :<- [1..]]]
    ~= sum[k*(num_right_angled_triangles__hypotenuse_lt_(max1_hypotenuse/k, case=coprime_ratio) -num_right_angled_triangles__hypotenuse_lt_(max1_hypotenuse/(k+1), case=coprime_ratio)) | [k :<- [1..<sqrt_(max1_hypotenuse)]]] + sum[max1_hypotenuse/hypotenuse[i] | [i :<- [1..][hypotenuse[i] < sqrt_(max1_hypotenuse)]]]
    ~= max1_hypotenuse/2pi*sum{1/k | [k :<- [1..<sqrt_(max1_hypotenuse)]]} + max1_hypotenuse/2pi*sum{1/i | [i :<- [1..<sqrt_(max1_hypotenuse)/2pi]]}
    ~= max1_hypotenuse/2pi*(ln_(sqrt_(max1_hypotenuse)) +ln_(sqrt_(max1_hypotenuse)/2pi))
    ~= (max1_hypotenuse/2pi)*ln_(max1_hypotenuse/2pi)
    ]
    [num_right_angled_triangles__hypotenuse_lt_(max1_hypotenuse, case=non_coprime_triple) ~= (max1_hypotenuse/2pi)*ln_(max1_hypotenuse/2pi)]
    [f(h) == h*ln_(h)][g == f**-1]:
        [k == f(g(k)) == g(k)*ln_(g(k))]
        [ln_(k) == ln_(g(k)) +ln_(ln_(g(k)))]
        [g(k) == k/ln_(g(k)) == k/(ln_(k) -ln_(ln_(g(k))))]
        [ln_(g(k)) == ln_(k) -ln_(ln_(k) -ln_(ln_(g(k)))) ~= ln_(k)]
        [g(k) ~= k/(ln_(k) -ln_(ln_(k)))]
    [[f(h) == h*ln_(h)] -> [k ~= f(k/(ln_(k) -lnln_(k))]]
    [hypotenuse[k-1] ~= 2*pi*k/(ln_(k) -lnln_(k))]

######################
# data4conjecture:
######################
view /sdcard/0my_files/tmp/out4py/seed.math.GaussInteger..iter_right_angled_triangles_with_coprime_side_length__len_hypotenuse_lt.1000000.HOE.out.txt
######################
py -m nn_ns.app.line_selector --begin4lineno=1 --lineno_generator='2**?' -i /sdcard/0my_files/tmp/out4py/seed.math.GaussInteger..iter_right_angled_triangles_with_coprime_side_length__len_hypotenuse_lt.1000000.HOE.out.txt
[1@0.0]:(5, 3, 4)
[2@0.1]:(13, 5, 12)
[4@0.2]:(25, 7, 24)
[8@0.3]:(53, 45, 28)
[16@0.4]:(97, 65, 72)
[32@0.5]:(197, 195, 28)
[64@0.6]:(401, 399, 40)
[128@0.7]:(797, 555, 572)
[256@0.8]:(1609, 1591, 240)
[512@0.9]:(3221, 2829, 1540)
[1024@0.10]:(6421, 3379, 5460)
[2048@0.11]:(12889, 10439, 7560)
[4096@0.12]:(25769, 25431, 4160)
[8192@0.13]:(51481, 24569, 45240)
[16384@0.14]:(102901, 22099, 100500)
[32768@0.15]:(205957, 197245, 59268)
[65536@0.16]:(411757, 60635, 407268)
[131072@0.17]:(823553, 767775, 297928)
[262144@0.18]:(1647005, 1640043, 151276)
[524288@0.19]:(3294205, 2581387, 2046516)

py -m nn_ns.app.line_selector --begin4lineno=1 --lineno_generator='10**?' -i /sdcard/0my_files/tmp/out4py/seed.math.GaussInteger..iter_right_angled_triangles_with_coprime_side_length__len_hypotenuse_lt.1000000.HOE.out.txt
[1@0.0]:(5, 3, 4)
[10@0.1]:(65, 33, 56)
[100@0.2]:(629, 429, 460)
[1000@0.3]:(6277, 6205, 948)
[10000@0.4]:(62849, 11649, 61760)
[100000@0.5]:(628325, 334947, 531604)
[1000000@0.6]:(6283313, 5507055, 3025288)

######################
???[coprime_ratio case][hypotenuse[10**k-1] ~= 2*pi*10**k]???
    [k==0]:[HOE == (5, 3, 4)]
    [k==1]:[HOE == (65, 33, 56)]
    [k==2]:[HOE == (629, 429, 460)]
    [k==3]:[HOE == (6277, 6205, 948)]
    [k==4]:[HOE == (62849, 11649, 61760)]
    [k==5]:[HOE == (628325, 334947, 531604)]
    [k==6]:[HOE == (6283313, 5507055, 3025288)]
    ######################

???[coprime_ratio case][hypotenuse[2**k-1] ~= (25/4)*2**k]???
    [HOE[1-1] == (5, 3, 4)]
    [HOE[2-1] == (13, 5, 12)]
    [HOE[4-1] == (25, 7, 24)]
    [HOE[8-1] == (53, 45, 28)]
    [HOE[16-1] == (97, 65, 72)]
    [HOE[32-1] == (197, 195, 28)]
    [HOE[64-1] == (401, 399, 40)]
    [HOE[128-1] == (797, 555, 572)]
    [HOE[256-1] == (1609, 1591, 240)]
    [HOE[512-1] == (3221, 2829, 1540)]
    [HOE[1024-1] == (6421, 3379, 5460)]
    [HOE[2048-1] == (12889, 10439, 7560)]
    [HOE[4096-1] == (25769, 25431, 4160)]
    [HOE[8192-1] == (51481, 24569, 45240)]
    [HOE[16384-1] == (102901, 22099, 100500)]
    [HOE[32768-1] == (205957, 197245, 59268)]
    [HOE[65536-1] == (411757, 60635, 407268)]
    [HOE[131072-1] == (823553, 767775, 297928)]
    [HOE[262144-1] == (1647005, 1640043, 151276)]
    [HOE[524288-1] == (3294205, 2581387, 2046516)]
    # [HOE[1048576-1] == ???]
    ######################

######################
# non_coprime_triple case:
py_adhoc_call   seed.math.GaussInteger   ,1000000:iter_right_angled_triangles_with_coprime_side_length__len_hypotenuse_lt  +to_sort +SML_vs_HOE +turnoff__coprime   =6*10**5 > /sdcard/0my_files/tmp/out4py/seed.math.GaussInteger..iter_right_angled_triangles_with_coprime_side_length__len_hypotenuse_lt.1000000.HOE.non_coprime.out.txt
du -h /sdcard/0my_files/tmp/out4py/seed.math.GaussInteger..iter_right_angled_triangles_with_coprime_side_length__len_hypotenuse_lt.1000000.HOE.non_coprime.out.txt
    23MB

######################
view /sdcard/0my_files/tmp/out4py/seed.math.GaussInteger..iter_right_angled_triangles_with_coprime_side_length__len_hypotenuse_lt.1000000.HOE.non_coprime.out.txt
######################
???[non_coprime_triple case][hypotenuse[10**k-1] ~= ???]???
    [k==0]:[HOE == (5, 3, 4)]
    [k==1]:[HOE == (29, 21, 20)]
    [k==2]:[HOE == (170, 26, 168)]
    [k==3]:[HOE == (1108, 460, 1008)]
    [k==4]:[HOE == (8214, 7770, 2664)]
    [k==5]:[HOE == (64730, 38838, 51784)]
    [k==6]:[HOE == (531852, 116748, 518880)]
    ######################

???[non_coprime_triple case][hypotenuse[2**k-1] ~= ???]???
    [HOE[1-1] == (5, 3, 4)]
    [HOE[2-1] == (10, 6, 8)]
    [HOE[4-1] == (15, 9, 12)]
    [HOE[8-1] == (25, 15, 20)]
    [HOE[16-1] == (40, 24, 32)]
    [HOE[32-1] == (68, 60, 32)]
    [HOE[64-1] == (117, 45, 108)]
    [HOE[128-1] == (202, 198, 40)]
    [HOE[256-1] == (357, 315, 168)]
    [HOE[512-1] == (629, 595, 204)]
    [HOE[1024-1] == (1131, 405, 1056)]
    [HOE[2048-1] == (2053, 1475, 1428)]
    [HOE[4096-1] == (3754, 2970, 2296)]
    [HOE[8192-1] == (6890, 6106, 3192)]
    [HOE[16384-1] == (12740, 12348, 3136)]
    [HOE[32768-1] == (23664, 22800, 6336)]
    [HOE[65536-1] == (44145, 36855, 24300)]
    [HOE[131072-1] == (82741, 55445, 61416)]
    [HOE[262144-1] == (155600, 109392, 110656)]
    [HOE[524288-1] == (293620, 255532, 144624)]
    # [HOE[1048576-1] == ???]
    ######################
>>> from math import pi, log as ln_
>>> f=lambda h:(hh:=h/2/pi)*ln_(hh)
>>> f(293620)/2**19
0.9583667851245002
>>> f(531852)/10**6
0.9604240501866983
>>> g=lambda k:2*pi*k/(ln_(k) -ln_(ln_(k)))
>>> g(2**19)/293620
1.0592329805298375
>>> g(10**6)/531852
1.0557714287426916

]]]
