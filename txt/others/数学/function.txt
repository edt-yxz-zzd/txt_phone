e others/数学/function.txt

===from:
  view ../../python3_src/nn_ns/math_nn/algebra/IAlgebra.py
===:
square matrix multiplication
reciprocal
multiplicative inverse
multiplicative identity
commutative property (AmE) 交换律
associative property (AmE) 结合律
distributive property (AmE) 分配律


idempotent
commutative
associative
distributive
associativity
commutativity
idempotency
division
identity
divisibility
invertibility
inverse
abelian
group
monoid
magma
quasigroup
semigroup
semilattice


absorbing
distributive property
semiring





























===extract from:
  view others/数学/involution自逆函数.txt
  view 0explain.txt
===:
[[[
endofunction
  ?自函数
    翻译来自：https://hongjiang.info/understand-monad-5-what-is-endofunctor/
  内射函数/自射
    我自己的翻译
  畴内函数/同畴映射
    我自己的翻译
    畴domain/kind/类/种类
involution
  ?自逆函数/++回旋函数
    我自己的翻译
  n. 卷绕,内卷,回旋
    来自：https://cdict.net/q/involution

idempotent function 幂等函数
bijection双射
injection单射
surjection满射
permutation置换函数#排列/置换
  来自：https://cdict.net/q/permutation
identity恒等映射
  来自：https://zhidao.baidu.com/question/166982901.html

[f is endofunction]
    =[def]= [f is function][domain<f> === codomain<f>]
    #domain,codomain 只是 事先声明
    #实际输出image<f>有待细究: [image<f> |<=| codomain<f>]
    #
        #eg. [f :: int -> int][f x =[def]= 1]
    [injective endofunction neednot be surjection]
        #eg. [f :: int -> int][f x =[def]= 2*x]
    [surjective endofunction neednot be injection]
        #eg. [f :: int -> int][f x =[def]= x//2]

[f is involution]
    = [f is involutory function]
    =[def]= [f is endofunction][f . f === echo]

[f is idempotent function]
    =[def]= [f is endofunction][f . f === f]

[f is permutation]
    = [f is permutatory/permutative function]
    =[def]= [f is bijective/invertible endofunction]
    = [f is endofunction][f is bijection]

[f is bijection]
  = [f is bijective function]
  = [f is one-to-one correspondence function]
  =[def]= [f is injection][f is surjection]

[f is injection]
  = [f is injective function]
  = [f is invertible function]
  = [f is one-to-one function]
  =[def]= [f is function][?g<-function. @(x,y)<-f. [x===g(y)]]

[f is surjection]
  = [f is surjective function]
  = [f is onto function]
  =[def]= [f is function][codomain<f> === image<f>]


[identity =[def]= echo]
    [domain<identity> === image<identity>]
    [domain<identity> |<=| codomain<identity>]
    [identity neednot be endofunction]
    [identity <: injection]

[endomorphism =[def]= homomorphic endofunction]


# domain, codomain, preimage, image, range, graph
[f :: domain -> codomain]:
    # image have 3 form:
    [image<f, x> = f(x)]
    [image<f, X> = {f(x) | x<-X}]
    [image<f> =[def]= image<f, domain<f> >]
    #==>>:
    [image<f> == {f(x) | [x :<- domain<f>]}]
    [image<f> |<=| codomain<f>]

    [range<f> =[def]= image<f>]


    # preimage have 2 form:
    [preimage<f, Y> =[def]= {x <- domain<f> | [f(x)<-Y]}]
    [preimage<f> =[def]= preimage<f, domain<f> >]
    #==>>:
    [preimage<f> == domain<f>]

    # graph have 2 form:
    [graph<f,X> =[def]= {(x,f(x)) | [x <- X]}]
    [graph<f> =[def]= graph<f,domain<f> >]
    #==>>:
    [graph<f> == {(x,f(x)) | [x <- domain<f>]}]
    [graph<f> |<=| (domain<f> *** codomain<f>)]

[[codomain is ambiguous:
  1. f = (domain<f>, codomain<f>, graph<f>)
    graph<f> |<=| domain<f> * codomain<f>
    there is only one codomain<f>

  2. f = graph<f>
    domain<f> = {x | (x,y)<-graph<f>}
    image<f> = ...
    codomain<f> |>=| image<f>
    there is infinite many codomain<f>
]]

]]]

