
e others/数学/condition4_WW1_eq_2VV.txt
source:
  #but not really useful
  view ../../python3_src/seed/math/right_angled_triangle_side_length.py



copy abstract to:
  view others/数学/我的猜想.txt
[[[
main:
===
[@[w,v :: uint] -> [w**2+1==2*v**2] -> ?[k :: uint] -> [[v;w;] == [3,2;4,3;]**k *[1;1;]]]
[@[w,v :: uint] -> [w**2+1==2*v**2] -> ?[k :: uint] -> [[vs[k] == ((1+sqrt2)**(1+2*k) -(1-sqrt2)**(1+2*k))*sqrt2/4][ws[k] == ((1+sqrt2)**(1+2*k) +(1-sqrt2)**(1+2*k))/2]]]
[[w**2+1==2*v**2][v,w :: int][v,w > 0] -> [_v := abs(3*v-2*w)] -> [_w := abs(-4*v+3*w)] -> [[_w**2+1 == 2*_v**2][_v,_w >= 1][[1 <= _v < v]or[_v == v == 1]]]]
    # [:WW1_eq_2VV___vw_abs_decrease_until_eq1]:goto
===
[@[w,v :: uint] -> [2*w**2+1==v**2] -> ?[k :: uint] -> [[v;w;] == [3,4;2,3;]**k *[1;0;]]]
[@[w,v :: uint] -> [2*w**2+1==v**2] -> ?[k :: uint] -> [[vs[k] == 1/2*(s0**k +s1**k)][ws[k] == sqrt2/4*(s0**k -s1**k)]]]
[[2*w**2+1==v**2][v,w :: int][[v > 0][w >= 0]] -> [_v := abs(3*v-4*w)] -> [_w := abs(-2*v+3*w)] -> [[2*_w**2+1 == _v**2][_v >= 1][_w >= 0][[1 <= _v < v]or[[(v,w) == (1,0)][(_v,_w) == (3,2)]]]]]
    # [:2WW1_eq_VV___v_abs_decrease_until_eq1___loop_roots_are_1_3]:goto
===
]]]




[[
[:condition4_WW1_eq_2VV~~[w**2+1==2*v**2]=>???]:here
    # [:WW1_eq_2VV___vw_abs_decrease_until_eq1]:goto

[w**2+1==2*v**2]:
    [(v-1)*(v+1) == (w-v)*(w+v)]
    [(w**2+1) %2 == 2*v**2 %2 == 0]
    [w**2 %2 == 1]
    [w %2 == 1]
    [w**2 %8 == 1]
    [2*v**2 %8 == (w**2+1) %8 == 2]
    [v**2 %4 == 1]
    [v %2 == 1]

    [v**2 %16 <- {1,9}]
    [(w**2+1) %16 == 2*v**2 %16 == 2]
    [w**2 %16 == 1]
    [w %16 <- {1,7,9,15}]
    [w %8 <- {1,7}]
    [w == v] ==>> [w == v == 1]
    [w =!= v] ==>> [w > v > 1]
[w**2+1==2*v**2][w > v > 1]:
    [0 < w-v < v-1 < v+1 < w+v]
    [gcd((v-1), (v+1)) == 2]

[w**2+1==2*v**2]:
    [m := w**2+1]
    [w**2 %m == (-1)%m]
    [p :<- all_prime_factors_of_(m)]:
        [w**2 %p == (-1)%p]
        [[p==2]or[p%4==1]]
    [[p :<- all_prime_factors_of_(m)] -> [[p==2]or[p%4==1]]]
    !! [m == w**2+1==2*v**2]
    [[p :<- all_prime_factors_of_(2*v**2)] -> [[p==2]or[p%4==1]]]
    !! [v%2 == 1]
    [[p :<- all_prime_factors_of_(v)] -> [p%4==1]]
    [v%4 == 1]

######################
[w**2+1==2*v**2]:
    [v %2 == 1]
    [w %8 <- {1,7}]
    ### %8直接计算: [{(w,v)|...}%8 == {1,3..=7}*{1,3..=7}]
    ### 去掉3,5: [{(w,v)|...}%8 == {1,7}*{1,3..=7}]
    #
    [{(w,v)|...}%16 == {1,7,9,15}*{1,3..=15}]
    #
    [{(w,v)|...}%16 == {1,7,-...}*{1,3,5,7,-...}]
    [{(w,v)|...}%32 == {1,15,-...}*{1,7,9,15, -...} \-/ {7,9,-...}*{3,5,11,13,-...}]
    [{(w,v)|...}%64 == {1,31,-...}*{1,15,17,31, -...} \-/ {9,23,-...}*{3,13,19,29,-...} \-/ {7,25,-...}*{5,11,21,27,-...} \-/ {15,17,-...}*{7,9,23,25,-...}]
    #
    [4 w's per v] # <<== [w**2 %(16*2**e) == 1] => [4 w's][w%(8*2**e) <- {+1,-1}%(8*2**e)]
    #
    [8 v's per w] # <<== [2*v**2 %(16*2**e) == 2] => [8 v's][v%(4*2**e) <- {+1,-1}%(4*2**e)]
    #

######################
[[(v-1)///2 < 2**19] => [(w,v) <- [(1, 1), (7, 5), (41, 29), (239, 169), (1393, 985), (8119, 5741), (47321, 33461), (275807, 195025)]]]
[[(v-1)///2 < 2**20] => [(w,v) <- [(1, 1), (7, 5), (41, 29), (239, 169), (1393, 985), (8119, 5741), (47321, 33461), (275807, 195025), (1607521, 1136689)]]]
[[(v-1)///2 < 2**22] => [(w,v) <- [(1, 1), (7, 5), (41, 29), (239, 169), (1393, 985), (8119, 5741), (47321, 33461), (275807, 195025), (1607521, 1136689), (9369319, 6625109)]]]
[vs == [1, 5, 29, 169, 985, 5741, 33461, 195025, 1136689, 6625109,...]]
[ws == [1, 7, 41, 239, 1393, 8119, 47321, 275807, 1607521, 9369319,...]]
[dvs := diff(vs)]
[dws := diff(ws)]
[dvs == [4, 24, 140, 816, 4756, 27720, 161564, 941664, 5488420,...]]
[dws == [6, 34, 198, 1154, 6726, 39202, 228486, 1331714, 7761798,...]]

[vs == [1, 5, 29, 169, 985, 5741, 33461, 195025, 1136689, 6625109,...]]
    ???[v %4 == 1]
        yes! proof see above
    ???[v %8 --> [1,5,5,1]*+oo]
    ???[v %16 --> [1,5,13,9,9,13,5,1]*+oo]
    ???[v %32 --> [1, 5, 29, 9, 25, 13, 21, 17, 17, 21,...]*+oo]
    ???[v %64 --> [1, 5, 29, 41, 25, 45, 53, 17, 49, 21,...]*+oo]

[ws == [1, 7, 41, 239, 1393, 8119, 47321, 275807, 1607521, 9369319,...]]
    ???[w %4 --> [1,3]*+oo]
    ???[w %8 --> [1,7]*+oo]
    ???[w %16 --> [1,7,9,15]*+oo]
    ???[w %32 --> [1,7,9,15,17,23,25,31]*+oo]
    ???[w %64 --> [1, 7, 41, 47, 49, 55, 25, 31, 33, 39,...]*+oo]
[dvs == [4, 24, 140, 816, 4756, 27720, 161564, 941664, 5488420,...]]
    ???[dvs %8 --> [4,0]*+oo]
    ???[dvs %16 --> [4,8,12,0]*+oo]
    ???[dvs %32 --> [4, 24, 12, 16, 20, 8, 28, 0]*+oo]
    ???[dvs %64 --> [4, 24, 12, 48, 20, 8, 28, 32, 36,...]*+oo]
    ######################
    ???[diff(dvs) %16 --> [4]*+oo]
    ???[diff(dvs) %32 --> [20,20,4,4]*+oo]
    ???[diff(dvs) %64 --> [20, 52, 36, 36, 52, 20, 4, 4,...]*+oo]
    ???[diff(dvs) %128 --> [20, 116, 36, 100, 52, 84, 68, 68]*+oo]

???[vs[k+1] == vs[k] + 2*(ws[k+1] -vs[k+1])]
???[3*vs[k+1] == vs[k] + 2*ws[k+1]]
    [[3*v-2*w for w,v in zip(ws,vs)] == [1, 1, 5, 29, 169, 985, 5741, 33461, 195025, 1136689,...]]
[3*vs[k+1] == vs[k] + 2*ws[k+1]]:
    !! [ws[k]**2 +1 == 2*vs[k]**2]
    [4*(2*vs[k+1]**2 -1) == 4*ws[k+1]**2 == (3*vs[k+1] - vs[k])**2]
    [(8*vs[k+1]**2 -4) == (9*vs[k+1]**2 -6*vs[k+1]*vs[k] + vs[k]**2)]
    [0 == (vs[k+1]**2 -6*vs[k+1]*vs[k] + vs[k]**2 +4)]
    [(8*vs[k]**2 -4) == (vs[k+1]**2 -6*vs[k+1]*vs[k] + 9*vs[k]**2)]
    [4*(2*vs[k]**2 -1) == (vs[k+1] -3*vs[k])**2]
    [vs[k+1] == 3*vs[k] +/-2*sqrt_(2*vs[k]**2 -1)]
    !! [ws[k]**2 +1 == 2*vs[k]**2]
    [vs[k+1] == 3*vs[k] +/-2*ws[k]]
    !! [vs[k] == 3*vs[k+1] - 2*ws[k+1]]
    [vs[k+1] == 3*vs[k] + 2*ws[k]]
    [[3*v+2*w for w,v in zip(ws,vs)] == [5, 29, 169, 985, 5741, 33461, 195025, 1136689, 6625109, 38613965,...]]

    !! [vs[k] == 3*vs[k+1] - 2*ws[k+1]]
    !! [vs[k+1] == 3*vs[k] + 2*ws[k]]
    [ws[k+1] == (3*vs[k+1] - vs[k])/2 == (3*(3*vs[k] + 2*ws[k]) - vs[k])/2 == (4*vs[k] + 3*ws[k])]
    [ws[k+1] == 4*vs[k] + 3*ws[k]]
    [[4*v+3*w for w,v in zip(ws,vs)] == [7, 41, 239, 1393, 8119, 47321, 275807, 1607521, 9369319, 54608393,...]]

    [vs[k] == 3*vs[k+1] - 2*ws[k+1]]
    [vs[k+1] == 3*vs[k] + 2*ws[k]]
    [ws[k+1] == 4*vs[k] + 3*ws[k]]
    [VW[k] =[def]= [ws[k];vs[k];]]
    [MM := [3,2;4,3;]]
    [MM**-1 == [3,-2;-4,3;]]
    [VW[k+1] == MM*VW[k]]
    [VW[0] == [1;1;]]
    [VW[k] == MM**k *VW[0]]
    [MM*U == s*U][U == [u0;u1;]]:
        [(MM-s*I)*U == O]
        [(3-s)*u0+2*u1 == 0]
        [4*u0+(3-s)*u1 == 0]
        [(3-s)/2 == 4/(3-s)]
        [(3-s)**2 == 8]
        [s == 3 +/- 2*sqrt2]
        [u0/u1 == (s-3)/4 == +/- sqrt2/2]
        [U == [+/- sqrt2; 2;]*(u1/2)]
    [s0 := 3 + 2*sqrt2]
    [s1 := 3 - 2*sqrt2]
    [MM*[+sqrt2, -sqrt2; 2, 2;] == [+sqrt2*s0, -sqrt2*s1; 2*s0, 2*s1;]]
    [[+sqrt2, 1; -sqrt2, 1;]*MM*[+sqrt2, -sqrt2; 2, 2;] == [+sqrt2, 1; -sqrt2, 1;]*[+sqrt2*s0, -sqrt2*s1; 2*s0, 2*s1;] == [4*s0, 0; 0, 4*s1;]]
    [[+sqrt2, 1; -sqrt2, 1;]/4 *MM* [+sqrt2, -sqrt2; 2, 2;] == [s0, 0; 0, s1;]]
    [[+sqrt2, 1; -sqrt2, 1;]/4 * [+sqrt2, -sqrt2; 2, 2;] == [1, 0; 0, 1;]]
    [[+sqrt2, 1; -sqrt2, 1;]/4 == [+sqrt2, -sqrt2; 2, 2;] **-1]
    [B := [+sqrt2, -sqrt2; 2, 2;]]
    [D := [s0, 0; 0, s1;]]
    [B.inv()*MM*B == D]
    [MM*B == B*D]
    [MM == B*D*B.inv()]
    [MM**k
    == B* D**k *B.inv()
    == [+sqrt2, -sqrt2; 2, 2;]* [s0**k, 0; 0, s1**k;] *[+sqrt2, 1; -sqrt2, 1;]/4
    == [+sqrt2, -sqrt2; 2, 2;] *[+sqrt2*s0**k, s0**k; -sqrt2*s1**k, s1**k;]/4
    == [2*(s0**k +s1**k), sqrt2*(s0**k -s1**k); 2*sqrt2*(s0**k -s1**k), 2*(s0**k +s1**k);]/4
    ]
    [MM**k == [2*(s0**k +s1**k), sqrt2*(s0**k -s1**k); 2*sqrt2*(s0**k -s1**k), 2*(s0**k +s1**k);]/4]
    [[vs[k];ws[k];]
    == VW[k]
    == MM**k *VW[0]
    == [2*(s0**k +s1**k), sqrt2*(s0**k -s1**k); 2*sqrt2*(s0**k -s1**k), 2*(s0**k +s1**k);]/4 *[1;1;]
    == [2*(s0**k +s1**k) +sqrt2*(s0**k -s1**k); 2*sqrt2*(s0**k -s1**k) +2*(s0**k +s1**k);]/4
    == [((2+sqrt2)*s0**k +(2-sqrt2)*s1**k); (2*(1+sqrt2)*s0**k +2*(1-sqrt2)*s1**k);]/4
    ]
    ==>>:
    [vs[k] == ((2+sqrt2)*s0**k +(2-sqrt2)*s1**k)/4]
    [ws[k] == (2*(1+sqrt2)*s0**k +2*(1-sqrt2)*s1**k)/4]
    [s0 == 3 + 2*sqrt2 == (1+sqrt2)**2]
    [s1 == 3 - 2*sqrt2 == (1-sqrt2)**2]
    [vs[k]
    == ((2+sqrt2)*s0**k +(2-sqrt2)*s1**k)/4
    == ((1+sqrt2)*s0**k -(1-sqrt2)*s1**k)*sqrt2/4
    == ((1+sqrt2)**(1+2*k) -(1-sqrt2)**(1+2*k))*sqrt2/4
    ]
    [ws[k]
    == (2*(1+sqrt2)*s0**k +2*(1-sqrt2)*s1**k)/4
    == ((1+sqrt2)**(1+2*k) +(1-sqrt2)**(1+2*k))/2
    ]
    [vs[k] == ((1+sqrt2)**(1+2*k) -(1-sqrt2)**(1+2*k))*sqrt2/4]
    [ws[k] == ((1+sqrt2)**(1+2*k) +(1-sqrt2)**(1+2*k))/2]

>>> import math as m
>>> sqrt2 = m.sqrt(2)
>>> v = lambda k:((1+sqrt2)**(1+2*k) -(1-sqrt2)**(1+2*k))*sqrt2/4
>>> [v(k) for k in range(13)]
[1.0, 5.0, 28.999999999999996, 168.99999999999994, 984.9999999999997, 5740.999999999996, 33460.99999999998, 195024.99999999985, 1136688.999999999, 6625108.999999993, 38613964.99999996, 225058680.99999976, 1311738120.9999983]
>>> [round(v(k)) for k in range(13)]
[1, 5, 29, 169, 985, 5741, 33461, 195025, 1136689, 6625109, 38613965, 225058681, 1311738121]

>>> w = lambda k:((1+sqrt2)**(1+2*k) +(1-sqrt2)**(1+2*k))/2
>>> [w(k) for k in range(13)]
[0.9999999999999999, 6.999999999999999, 40.999999999999986, 238.99999999999991, 1392.9999999999993, 8118.999999999995, 47320.99999999997, 275806.9999999998, 1607520.9999999986, 9369318.99999999, 54608392.99999994, 318281038.99999964, 1855077840.9999976]
>>> [round(w(k)) for k in range(13)]
[1, 7, 41, 239, 1393, 8119, 47321, 275807, 1607521, 9369319, 54608393, 318281039, 1855077841]


[[[
e ../../python3_src/seed/math/matrix/sympy.matrices.txt
===
from sympy import Matrix
mx = Matrix([[3,2], [4,3]])
(P, J) = mx.jordan_form() # mx == P*J*P**-1
(B, D) = mx.diagonalize(reals_only=True, sort=True, normalize=True) # mx == B*D*B**-1
===
#>>> J
Matrix([
[3 - 2*sqrt(2),             0],
[            0, 2*sqrt(2) + 3]])
#>>> P
Matrix([
[-sqrt(2)/2, sqrt(2)/2],
[         1,         1]])
#>>> P.inv()
Matrix([
[-sqrt(2)/2, 1/2],
[ sqrt(2)/2, 1/2]])
#>>> P.transpose()
Matrix([
[-sqrt(2)/2, 1],
[ sqrt(2)/2, 1]])
#>>> P.transpose() == P.inv()
False
#>>> (MM := (P*J*P.inv())).simplify(); MM
Matrix([
[3, 2],
[4, 3]])
#>>> (I := (P*P.inv())).simplify(); I
Matrix([
[1, 0],
[0, 1]])
#>>> (X := (P*P.transpose())).simplify(); X
Matrix([
[1, 0],
[0, 2]])
===
#>>> D
Matrix([
[3 - 2*sqrt(2),             0],
[            0, 2*sqrt(2) + 3]])
#>>> B
Matrix([
[-sqrt(3)/3, sqrt(3)/3],
[ sqrt(6)/3, sqrt(6)/3]])
#>>> B.inv()
Matrix([
[-sqrt(3)/2, sqrt(6)/4],
[ sqrt(3)/2, sqrt(6)/4]])
#>>> (I := (B*B.inv())).simplify(); I
Matrix([
[1, 0],
[0, 1]])
#>>> (MM := (B*D*B.inv())).simplify(); MM
Matrix([
[3, 2],
[4, 3]])
===
]]]

[[[
DONE: spec mx: #indeed not special
    [MM := [a,b;c,d;]]
    [MM**-1 == [a,-b;-c,d;]]
from:
    [MM := [3,2;4,3;]]
    [MM**-1 == [3,-2;-4,3;]]
===
[[a,b;c,d;] * [a,-b;-c,d;]
== [a**2-b*c,-a*b+b*d;c*a-c*d,-c*b+d**2;]
== [1,0;0,1;]
]
[[a == d]or[b==0]]
[[a == d]or[c==0]]
[[a == d]or[[b==0][c==0]]]
* [[b==0][c==0]]:
    [a == +/- 1]
    [d == +/- 1]
* [a == d]:
    [a**2-b*c == 1]
    [b*c == a**2-1]
    [b*c == (a-1)*(a+1)]
        # e.g. [2*4 == (3-1)*(3+1)]
===
==>>:
[[[a,b;c,d;] * [a,-b;-c,d;] == [1,0;0,1;]] <-> [[[b==0][c==0][{a,d} <= {+1,-1}]]or[[a==d][b*c == (a-1)*(a+1)]]]]
[[a,(a-1);(a+1),a;] * [a,-(a-1);-(a+1),a;] == [1,0;0,1;]]
===
[[a,b;c,d;] * [d,-b;-c,a;] == [1,0;0,1;]*(a*d-b*c)]
===
]]]


[[[
DONE: proof:
???[@[w,v :: uint] -> [w**2+1==2*v**2] -> ?[k :: uint] -> [[v;w;] == [3,2;4,3;]**k *[1;1;]]]???
???[@[w,v :: uint] -> [w**2+1==2*v**2] -> ?[k :: uint] -> [[vs[k] == ((1+sqrt2)**(1+2*k) -(1-sqrt2)**(1+2*k))*sqrt2/4][ws[k] == ((1+sqrt2)**(1+2*k) +(1-sqrt2)**(1+2*k))/2]]]???
===
[[w**2+1==2*v**2][v,w :: int][v,w > 0] -> [_v := abs(3*v-2*w)] -> [_w := abs(-4*v+3*w)] -> [[_w**2+1 == 2*_v**2][_v,_w >= 1][[1 <= _v < v]or[_v == v == 1]]]]
    # [:WW1_eq_2VV___vw_abs_decrease_until_eq1]:goto
===
???[@[w,v :: uint] -> [w**2+1==2*v**2] -> ?[k :: uint] -> [[v;w;] == [3,2;4,3;]**k *[1;1;]]]???
proof:[[
    !! [:WW1_eq_2VV___vw_abs_decrease_until_eq1]:goto
    any solution (v,w) can be reduced into (1,1)
    DONE
    ]]
===

[w**2+1==2*v**2][v,w :: int]:
    [v_ := 3*v+2*w]
    [w_ := 4*v+3*w]
    [w_**2+1 -2*v_**2
    == (4*v+3*w)**2+1 -2*(3*v+2*w)**2
    == (16*v**2 +9*w**2 +24*v*w)+1 -2*(9*v**2 +4*w**2 +12*v*w)
    == -2*v**2 +1*w**2 +1
    !! [w**2+1==2*v**2]
    == 0
    ]
    [w_**2+1 == 2*v_**2]

    [_v := 3*v-2*w]
    [_w := -4*v+3*w]
    [_w**2+1 -2*_v**2
    == (-4*v+3*w)**2+1 -2*(3*v-2*w)**2
    == (16*v**2 +9*w**2 -24*v*w)+1 -2*(9*v**2 +4*w**2 -12*v*w)
    == -2*v**2 +1*w**2 +1
    !! [w**2+1==2*v**2]
    == 0
    ]
    [_w**2+1 == 2*_v**2]


    [v == 0]:
        !! [w**2+1==2*v**2]
        [w**2 == -1]
        !! [w :: int]
        _L
    [v =!= 0]

    [w == 0]:
        !! [w**2+1==2*v**2]
        [v**2 == 1/2]
        !! [v :: int]
        _L
    [w =!= 0]

    !! [w**2+1==2*v**2]
    [@[sv :<- {+v,-v}] -> @[sw :<- {+w,-w}] -> [sw**2+1==2*sv**2]]
    #restart with: [v,w > 0] #see below
[w**2+1==2*v**2][v,w :: real][v,w >= 0]:
    [3*v-2*w == 0]:
        [v == 2/3 *w]
        [w**2+1==2*v**2==8/9 *w**2]
        [w**2 == -9]
        !! [v,w :: real]
        _L
    [3*v-2*w =!= 0]
    [(v,w) == (1,1)]:
        [3*v-2*w > 0][w**2+1==2*v**2]
    [(v,w) == (-1,1)]:
        [3*v-2*w < 0][w**2+1==2*v**2]
    [2*abs(w) <= w**2+1 == 2*v**2]
    [abs(w) <= v**2]
[w**2+1==2*v**2][v,w :: int][v,w > 0]:
    # try to show abs decrease ...
    !! [v,w > 0]
    !! [v,w :: int]
    [v,w >= 1]

    [_v := abs(3*v-2*w)]
    [_w := abs(-4*v+3*w)]
    [_v,_w >= 0]
    !! [v,w :: int]
    [_v,_w :: int]
    !! see above ... _v,_w first-version
    [_w**2+1 == 2*_v**2]
    !! see above ... _v,_w first-version
    [_v =!= 0]
    [_w =!= 0]

    !! [_v,_w >= 0]
    [_v,_w > 0]
    !! [_v,_w :: int]
    [_v,_w >= 1]

    * [_v < v]:
        [abs v decrease...]
    * [_v == v]:
        !! [_v := abs(3*v-2*w)]
        [v == abs(3*v-2*w)]
        * [v == 3*v-2*w]:
            [w == v]
            !! [w**2+1==2*v**2]
            [v**2 == 1]
            !! [v,w > 0]
            [v == w == 1]
        * [-v == 3*v-2*w]:
            [w == 2*v]
            !! [w**2+1==2*v**2]
            [v**2 == -1/2]
            !! [v,w :: int]
            _L
        [v == w == 1]
    * [_v > v]:
        !! [_v := abs(3*v-2*w)]
        [v < abs(3*v-2*w)]
        * [v < 3*v-2*w]:
            [w < v]
            !! [v,w >= 1]
            [1 <= w < v]
            [1 <= w**2 < v**2]
            [1+w**2 < 2*v**2]
            !! [w**2+1==2*v**2]
            _L
        * [v < -(3*v-2*w)]:
            [w > 2*v]
            !! [v,w >= 1]
            [2 <= 2*v < w]
            [4 <= 4*v**2 < w**2]
            [w**2 +1 > 4*v**2 > 2*v**2]
            !! [w**2+1==2*v**2]
            _L
        _L
    !! [_v,_w >= 1]
    [[1 <= _v < v]or[_v == v == 1]]
    [_w**2+1 == 2*_v**2]
[[w**2+1==2*v**2][v,w :: int][v,w > 0] -> [_v := abs(3*v-2*w)] -> [_w := abs(-4*v+3*w)] -> [[_w**2+1 == 2*_v**2][_v,_w >= 1][[1 <= _v < v]or[_v == v == 1]]]]
    # [:WW1_eq_2VV___vw_abs_decrease_until_eq1]:here
===
]]]


]]

[[
[:condition4_2WW1_eq_VV~~[2*w**2+1==v**2]=>???]:here
    (0,1)
    (2,3)
    #>>> import math as m
    #>>> is_sqrt = lambda x:x==m.isqrt(x)**2
    #>>> [(w,m.isqrt(1+2*w*w)) for w in range(0, 1<<18) if is_sqrt(1+2*w*w)]
    [(0, 1), (2, 3), (12, 17), (70, 99), (408, 577), (2378, 3363), (13860, 19601), (80782, 114243)]

    [VW[k] =[def]= [vs[k];ws[k];]]
    [VW[0] == [1;0;]]
    [VW[k+1] == Mx*VW[k]]
    [[3;2;] == Mx*[1;0;]]
    [Mx == [3,b;2,d;]]
    [[17;12;] == Mx*[3;2;]]
    [Mx == [3,4;2,3;]]

    # see:above:[:condition4_WW1_eq_2VV~~[w**2+1==2*v**2]=>???]:goto
    !! [MM := [3,2;4,3;]]
    !! [s0 == 3 + 2*sqrt2 == (1+sqrt2)**2]
    !! [s1 == 3 - 2*sqrt2 == (1-sqrt2)**2]
    !! [B := [+sqrt2, -sqrt2; 2, 2;]]
    !! [D := [s0, 0; 0, s1;]]
    !! [MM*B == B*D]
    !! [MM == B*D*B.inv()]
    !! [MM**k == [2*(s0**k +s1**k), sqrt2*(s0**k -s1**k); 2*sqrt2*(s0**k -s1**k), 2*(s0**k +s1**k);]/4]
    [Mx == MM.transpose()]
    [Mx**k == (MM**k).transpose()]
    [Mx**k == [2*(s0**k +s1**k), 2*sqrt2*(s0**k -s1**k); sqrt2*(s0**k -s1**k), 2*(s0**k +s1**k);]/4]
    [VW[k] == Mx**k *VW[0]
    == [2*(s0**k +s1**k), 2*sqrt2*(s0**k -s1**k); sqrt2*(s0**k -s1**k), 2*(s0**k +s1**k);]/4 *[1;0;]
    == [2*(s0**k +s1**k); sqrt2*(s0**k -s1**k);]/4
    == [1/2*(s0**k +s1**k); sqrt2/4*(s0**k -s1**k);]
    ]
    [vs[k] == 1/2*(s0**k +s1**k)]
    [ws[k] == sqrt2/4*(s0**k -s1**k)]
    [Mx**-1 == [3,-4;-2,3;]]
[[[
DONE: proof:
???[@[w,v :: uint] -> [2*w**2+1==v**2] -> ?[k :: uint] -> [[v;w;] == [3,4;2,3;]**k *[1;0;]]]???
???[@[w,v :: uint] -> [2*w**2+1==v**2] -> ?[k :: uint] -> [[vs[k] == 1/2*(s0**k +s1**k)][ws[k] == sqrt2/4*(s0**k -s1**k)]]]???
===
[[2*w**2+1==v**2][v,w :: int][[v > 0][w >= 0]] -> [_v := abs(3*v-4*w)] -> [_w := abs(-2*v+3*w)] -> [[2*_w**2+1 == _v**2][_v >= 1][_w >= 0][[1 <= _v < v]or[[(v,w) == (1,0)][(_v,_w) == (3,2)]]]]]
    # [:2WW1_eq_VV___v_abs_decrease_until_eq1___loop_roots_are_1_3]:goto
===
???[@[w,v :: uint] -> [2*w**2+1==v**2] -> ?[k :: uint] -> [[v;w;] == [3,4;2,3;]**k *[1;0;]]]???
proof:[[
    !! [:2WW1_eq_VV___v_abs_decrease_until_eq1___loop_roots_are_1_3]:goto
    any solution (v,w) can be reduced into (1,0) --> loop[(3,2) --> (1,0)]
    DONE
    ]]
===

[2*w**2+1==v**2][v,w :: int]:
    !! [Mx == [3,4;2,3;]]
    [v_ := 3*v+4*w]
    [w_ := 2*v+3*w]
    [2*w_**2+1 -v_**2
    == 2*(2*v+3*w)**2+1 -(3*v+4*w)**2
    == 2*(9*w**2 +4*v**2 +12*v*w)+1 -(16*w**2 +9*v**2 +24*v*w)
    == +2*w**2 -1*v**2 +1
    !! [2*w**2+1==v**2]
    == 0
    ]
    [2*w_**2+1 == v_**2]

    !! [Mx**-1 == [3,-4;-2,3;]]
    [_v := 3*v-4*w]
    [_w := -2*v+3*w]
    [2*_w**2+1 -_v**2
    == 2*(-2*v+3*w)**2+1 -(3*v-4*w)**2
    == 2*(9*w**2 +4*v**2 -12*v*w)+1 -(16*w**2 +9*v**2 -24*v*w)
    == +2*w**2 -1*v**2 +1
    !! [w**2+1==2*v**2]
    == 0
    ]
    [2*_w**2+1 == _v**2]


    [v == 0]:
        !! [2*w**2+1==v**2]
        [w**2 == -1/2]
        !! [w :: int]
        _L
    [v =!= 0]

    [w == 0]:
        !! [2*w**2+1==v**2]
        [v**2 == 1]
        !! [v :: int]
        [v == +/- 1]
    [MAYBE: [w == 0]]

    !! [2*w**2+1==v**2]
    [@[sv :<- {+v,-v}] -> @[sw :<- {+w,-w}] -> [2*sw**2+1==sv**2]]
    #restart with: [[v > 0][w >= 0]] #see below
[2*w**2+1==v**2][v,w :: real][v,w >= 0]:
    [3*v-4*w == 0]:
        [v == 4/3 *w]
        [2*w**2+1==v**2==16/9 *w**2]
        [w**2 == -9/2]
        !! [v,w :: real]
        _L
    [3*v-4*w =!= 0]
    [(v,w) == (1,0)]:
        [3*v-4*w > 0][2*w**2+1==v**2]
    [(v,w) == (-1,0)]:
        [3*v-4*w < 0][2*w**2+1==v**2]
    [2*2*abs(w) <= 2*(w**2+1) == (2*w**2+1)+1 == v**2+1]
    [abs(w) <= (v**2+1)/4]
[2*w**2+1==v**2][v,w :: int][[v > 0][w >= 0]]:
    # try to show abs decrease ...
    !! [v > 0]
    !! [v :: int]
    [v >= 1]

    [_v := abs(3*v-4*w)]
    [_w := abs(-2*v+3*w)]
    [_v,_w >= 0]
    !! [v,w :: int]
    [_v,_w :: int]
    !! see above ... _v,_w first-version
    [2*_w**2+1 == _v**2]
    !! see above ... _v,_w first-version
    [_v =!= 0]

    !! [_v >= 0]
    [_v > 0]
    !! [_v :: int]
    [_v >= 1]

    * [_v < v]:
        [abs v decrease...]
    * [_v == v]:
        !! [_v := abs(3*v-4*w)]
        [v == abs(3*v-4*w)]
        * [v == 3*v-4*w]:
            [w == v/2]
            !! [2*w**2+1==v**2]
            [v**2 == 2]
            !! [v :: int]
            _L
        * [-v == 3*v-4*w]:
            [w == v]
            !! [2*w**2+1==v**2]
            [v**2 == -1]
            !! [v :: int]
            _L
        _L
    * [_v > v]:
        !! [_v := abs(3*v-4*w)]
        [v < abs(3*v-4*w)]
        * [v < 3*v-4*w]:
            [w < v/2]
            !! [[v > 0][w >= 0]]
            [0 <= w < v/2 < v]
            [0 <= w**2 < v**2/4]
            [1+2*w**2 < 1+v**2/2]
            [v >= 2]:
                [4 <= v**2]
                [1 <= v**2/4]
                [1+2*w**2 < 1+v**2/2 <= 3/4 * v**2 < v**2]
                !! [2*w**2+1==v**2]
                _L
            [v < 2]
            !! [v >= 1]
            [v == 1]
            [v == 1][w == 0][_v == 3][_w == 2]
            [[(v,w) == (1,0)][(_v,_w) == (3,2)]]
        * [v < -(3*v-4*w)]:
            [w > v]
            !! [[v > 0][w >= 0]]
            [0 < v**2 < w**2 < 1+2*w**2]
            !! [2*w**2+1==v**2]
            _L
        [v == 1][w == 0]
    !! [_v >= 1]
    [[1 <= _v < v]or[[(v,w) == (1,0)][(_v,_w) == (3,2)]]]
    [_w**2+1 == 2*_v**2]
[[2*w**2+1==v**2][v,w :: int][[v > 0][w >= 0]] -> [_v := abs(3*v-4*w)] -> [_w := abs(-2*v+3*w)] -> [[2*_w**2+1 == _v**2][_v >= 1][_w >= 0][[1 <= _v < v]or[[(v,w) == (1,0)][(_v,_w) == (3,2)]]]]]
    # [:2WW1_eq_VV___v_abs_decrease_until_eq1___loop_roots_are_1_3]:here
===
]]]
]]


# [m*v**2 +m*n*v == i*w**2+j*w+k] ==>> ???
    # [v==-n/2] abs(v+n/2):neg/image/flip : int<-> int
# [m*(v**2 +n*v + u*w*v) == i*w**2+j*w+k] ==>> ???
[[
TODO:
[m*v**2 == i*w**2+j*w+k] ==>> ???
[m =!= 0]
[i =!= 0]
[VW[k] := [vs[k]; ws[k];]]
[T := [a,b;c,d;]]
[VW[k+1] == T*VW[k]]
[[v_;w_] := T*[v;w;]]
[v_ == a*v+b*w]
[w_ == c*v+d*w]
[m*v_**2 == i*w_**2+j*w_+k]:
    <==> [m*(a*v+b*w)**2 == i*(c*v+d*w)**2+j*(c*v+d*w)+k]
    <==> [(m*a*a*v*v +m*b*b*w*w +2*m*a*b*v*w) == (i*c*c*v*v +i*d*d*w*w +2*i*c*d*v*w)+(j*c*v+j*d*w) +(m*v*v -i*w*w -j*w)]
    <==> [(m*a*a -i*c*c -m)*v*v +(m*b*b +i -i*d*d)*w*w +2*(m*a*b -i*c*d)*v*w == j*c*v +j*(d-1)*w]
    <<== [0 == (m*a*a -i*c*c -m) == (m*b*b +i -i*d*d) == 2*(m*a*b -i*c*d) == j*c == j*(d-1)]
        <==> [[[d==1][c==0==b][a == +/- 1]]or[[j==0][a*b/(c*d) == b*b/(d*d-1) == (a*a-1)/(c*c) == i/m]]]
        <==> [[[d==1][c==0==b][a == +/- 1]]or[[j==0][s := +/- 1][a == s*d][b*c == s*(d*d-1)][m*b == s*i*c][abs(det(T)) == abs(a*d-b*c) == 1]]]
            !! see below:
######################
[[a*b/(c*d) == b*b/(d*d-1) == (a*a-1)/(c*c)]
<==> [a/d == b*c/(d*d-1) == (a*a-1)/(b*c)]
==>>:
  [(a*a-1)*(d*d-1) == (b*c)**2]
  [a == (b*c) *d/(d*d-1)]
  [d == (b*c) *a/(a*a-1)]
  [a*a/(a*a-1) == d*d/(d*d-1)]
  [a*a/(a*a-1) -1 == d*d/(d*d-1) -1]
  [1/(a*a-1) == 1/(d*d-1)]
  [(a*a-1) == (d*d-1)]
  [(a*a) == (d*d)]
  [a == +/- d]
  [b*c == +/- (a*a-1)]
  [a/d == b*c/(d*d-1) == +/- 1]
  [[s := +/- 1][a == s*d]]
      [b*c == s*(d*d-1)]
      [a*d-b*c== s*d*d -s*(d*d-1) == s]
      [abs(det(T)) == abs(a*d-b*c) == abs(s) == 1]
      [a*b/(c*d) == i/m]:
          [b/c == (d/a)*(i/m) == s*i/m]
          [m*b == s*i*c]
]

]]

