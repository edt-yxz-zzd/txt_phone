
并行并发区别.txt

并行计算
并发编程
  发现『并发编程』有歧义，按『并发访问』来解释的话，变成『多人合作写代码』


并发（concurrency）
  时间段假象
并行（parallellism）
  时间点真相
  多物理实体同一时间点

我来翻译:
  拟并行
    并发（concurrency）
  齐并行
    并行（parallellism）

  仿同行
  真平行

  乱序
  同时










=======
https://www.zhihu.com/question/33515481

并发的关键是你有处理多个任务的能力，不一定要同时。
并行的关键是你有同时处理多个任务的能力。
最关键的点就是：是否是『同时』。
===
邱昊宇

顾名思义，「并发」强调的是可以一起「出『发』」，「并行」强调的是可以一起「执『行』」。

与可以一起出发的并发（concurrent）相对的是不可以一起出发的顺序（sequential）：

    顺序：上一个开始执行的任务完成后，当前任务才能开始执行并发：无论上一个开始执行的任务是否完成，当前任务都可以开始执行

（也就是说，A B 顺序执行的话，A 一定会比 B 先完成，而并发执行则不一定。）

与可以一起执行的并行（parallel）相对的是不可以一起执行的串行（serial）：

    串行：有一个任务执行单元，从物理上就只能一个任务、一个任务地执行并行：有多个任务执行单元，从物理上就可以多个任务一起执行

（也就是说，在任意时间点上，串行执行时必然只有一个任务在执行，而并行则不一定。）

综上，并发与并行并不是互斥的概念，只是前者关注的是任务的抽象调度、后者关注的是任务的实际执行。而它们又是相关的，比如并行一定会允许并发。

所以题目中的例子：

    单核 CPU 多任务：并发（不必等上一个任务完成才开始下一个任务）、串行（只有一个实际执行任务的 CPU 核）多线程：并发、串行（所有线程都在同一个核上执行）；并发、并行（不同线程在不同的核上执行）

编辑于 06-29

====
罗宸
罗宸
诗意的代码献给你 https://github.com/luochen1990

并发是对需求侧的描述，并行才是对实现侧的描述，这两根本不是同一个范畴的东西，更不可能是互斥的关系。

拿网易食堂举个栗子：

每天中午12：00一大波人（约几千）来到食堂门口，这是并发访问（需求场景）。

然后食堂开了12个打菜窗口给来吃饭的人打菜，这是并行处理（实现方式）。

即使开了12个窗口，也不能同时满足几千人，所以大家要排队（实现方式）。

所以正确的描述上述场景的句子应该是：“食堂每天中午会收到大量并发访问的请求，于是食堂通过开12个窗口的方式并行地处理这些请求，即便如此，仍然无法同时满足所有的请求，所以食堂仍然要求大家排队等待”

你看，不管是并发，还是并行，还是排队，在上述场景里是同时存在的，其实并不互斥。

而按某些答主回答的逻辑就会被描述成 “因为食堂开了12个窗口，所以这叫并行不叫并发，如果食堂只开了1个窗口大家排队等那才叫并发”

别不别扭？

我觉得写代码吧，概念属于哪个范畴都搞不宁清是很危险的，体现在工作上就是变量名都取不对，说话都说不清逻辑，沟通起来都各种困难。

愿每个程序员和产品经理都能把话说清楚，共勉。

～～～

驳几种错误观点：

1，并行一定并发

按照上面说的，这两词根本不是一个范畴的东西，所以其实谈不上互斥或包含的关系。

但这句话背后总有一个想表达的意思，我先强行解释一下（不然句子都不成立，无法驳。。）

这句话想说的可能是：“具有并行处理能力的实现，一定能支持并发访问的需求场景”

这话有一定道理，但并非严格正确，举个栗子，一个CPU核心里的指令解码模块，和加法器，就是并行地处理指令的，但是一个CPU核心并不天然支持并发访问，这种叫流水线并行。

编辑于 11-06











=======
https://www.jianshu.com/p/cbf9588b2afb


并发和并行的区别
杰哥长得帅
2
2018.01.06 16:29:40
字数 639阅读 66,801

并发（concurrency）和并行（parallellism）是：

    解释一：并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。
    解释二：并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。
    解释三：并行是在多台处理器上同时处理多个任务。如 hadoop 分布式集群，并发是在一台处理器上“同时”处理多个任务。

所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。

并行(parallel)：指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。

parallel.jpg

并发(concurrency)：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。

concurrency.jpg

并行在多处理器系统中存在，而并发可以在单处理器和多处理器系统中都存在，并发能够在单处理器系统中存在是因为并发是并行的假象，并行要求程序能够同时执行多个操作，而并发只是要求程序假装同时执行多个操作（每个小时间片执行一个操作，多个操作快速切换执行）。

当有多个线程在操作时，如果系统只有一个 CPU，则它根本不可能真正同时进行一个以上的线程，它只能把 CPU 运行时间划分成若干个时间段，再将时间段分配给各个线程执行，在一个时间段的线程代码运行时,其它线程处于挂起状态.这种方式我们称之为并发（Concurrent）。

当系统有一个以上 CPU 时，则线程的操作有可能非并发。当一个 CPU 执行一个线程时，另一个 CPU 可以执行另一个线程，两个线程互不抢占 CPU 资源，可以同时进行，这种方式我们称之为并行（Parallel）。


















=======
https://www.cnblogs.com/liu-runda/p/12599297.html


liu_runda
大不了滚回去高考....然而还是不想滚回去啊QAQ 已经滚回去了23333 现在滚到北京了23333


计算机科学的咬文嚼字:“并行”与“并发”

很长时间没来打理过这个博客了， 在此记录一些思考。
中文计算机资料的质量一直堪忧，我认为这一定程度上和术语不清晰，缺乏良好的翻译有关。这可能是因为计算机科学还是一个年轻的学科，人们对此还不够重视。我在这里整理一些我自己的思考。
1. “并行”与“并发”

大部分语境下， 并行，是parallel(形容词) parallelism（名词）的翻译，并发 是concurrent(形容词) concurrency(名词)的翻译。

虽然我们在算法竞赛里只考虑单个程序单个执行流的算法，但是在现代计算机系统（CPU, 操作系统）中，同时运行多个程序是一项很基本的能力，因此我才能一边听音乐（对电脑来说，使用多媒体外设），一边挂着微信（保持网络连接），一边写博客（交互性的文字处理）。

而并行和并发，粗略来说，都是“同时运行”的一种描述，但是它们是不同的概念。有人专门做了“concurrency is not parallelism”的演讲。（https://talks.golang.org/2012/waza.slide#1）

我们来想一想，计算机如何“同时”执行多个程序？很多人立刻会想到多核(multicore)。现在intel的CPU都有“4核8线程”之类的参数，可以理解为他是一块芯片/处理器上集成了4个运算单元，支持同时运行8个线程（thread)（程序执行的基本单元，可以理解为同时执行8个独立的程序）。但是，稍微想一想就会发现，我们常常会同时运行不止8个程序。实际上，打开windows的任务管理器，你会发现我们使用的每个应用程序都有多个线程，例如浏览器每打开一个标签页就占据一个线程（这容易理解，我们可以认为访问、显示不同的网页是在执行不同的程序），同时运行的线程数目以千计（2020.3.30的典型笔记本电脑的数据）。而我们的4核，8核，比起来是这么的少！甚至你会发现，很多单核的计算机性能强劲，也可以一边听音乐，一边挂着微信，一边写博客！这是怎么回事？很显然，计算机并不仅仅依靠“多个核同时运行程序”来实现“多个程序同时运行”。

问题的关键在于：现代CPU的主频（虽不准确，但你可以大致理解为1秒所能执行的指令数）达到GHz级别，而人的反应速度太慢了！

你也许听过一个故事：苍蝇眼里的电视是放映缓慢的幻灯片。（https://m.guokr.com/article/437410 ）因为电视主流帧率是25、30帧，也就是1秒内播放25或30张静止画面，通过和走马灯一样的“视觉暂留”原理（或者说，趁人眼人脑还没反应过来），让人以为自己观看的是动画。而苍蝇的眼睛和神经系统感知闪光的速度是人类的四倍多，怪不得你徒手很难打到苍蝇。

而计算机系统也利用这一点，在我缓慢地打字的时候，它会在反应过来之前，偷偷干点别的活，再回来处理我的键盘输入，我却完全察觉不到。毕竟，即使计算机在处理我的输入的时候耽搁了一会，这个耽搁最多也就是毫秒级别的。
因此，我们可以说，计算机“同时”执行程序，并不是物理上“同一时刻有多个程序在执行”，而是“同一时间段里交替执行了多个程序”。但是，“同一时刻有多个程序在执行”也是经常发生的事情，这包括CPU多个核上有多个程序在执行，也包括一个CPU可以在一个时钟周期内执行多条指令（所谓的超标量（superscalar） CPU）。一般的技术书籍，都把“物理上同一时刻有多个程序、指令在执行”叫做并行(parallelism), 而把“人类感觉上有多个程序在执行，一个程序还没结束的时候另一个程序已经开始执行，常常通过快速在不同程序之间切换来实现”的特性叫做并发(concurrency)

到此，我们似乎可以说，并行和并发是不同的概念，对应parallel和concurrent。

但是，为什么“并行”对应parallel, 而“并发”对应concurrent?我们能不能把“并行”和“并发”的含义交换？实际上，台湾把parallel computing译作“平行计算”，取parallel在英文有“平行线”的含义，而把concurrent译作“并行”。
思考：如果把“发”理解为“出发”“发动”，把“行”理解为“进行”“执行”，那么确实符合我们对“并发”“并行”的理解。并发，是多个程序同时（可能略有先后）出发，但不一定同时执行，可能程序A走一步，停下来，然后程序B再走一步。并行，则要求必须多个程序同时执行。我不敢说这个理解是最合适的，也不知道最早翻译“并行”“并发”这两个词的前辈是怎么想的（其实翻译这两个词的前辈在2020年很可能还在世），但我觉得我给的这个解释可以说服我自己，也有助于“并发”“并行”这两个词语真正含义的理解和记忆。希望对这两个词的词源有更多了解的人能够告诉我， 不胜感激。
标签: 咬文嚼字, 脑洞








=======

https://blog.csdn.net/lhwhit/article/details/108333305

并发与并行(译)
lhw---9999 2020-09-01 07:49:16 103 收藏
分类专栏： 操作系统 文章标签： 操作系统
版权

本文来自：https://mp.weixin.qq.com/s/vbnfN2TzhQC2Aa_wJ61RBQ

本文来源：

Bryant R E, O'Hallaron D R. Computer Systems: A Programmer's Perspective(3rd edition)[M]. Pearson Education Limited, 2016.Bryant R E, O'Hallaron D R. Computer Systems: A Programmer's Perspective(3rd edition)[M]. Pearson Education Limited, 2016.

纵观数字计算机的发展历史，有两个需求一直是驱动其进步的持续动力：一个是希望计算机做得更多，另一个是希望计算机运行得更快。当处理器同时执行更多操作时，这两个因素都会得到改善。术语“并发”是一个通用的概念，指一个同时具有多个活动的系统，而术语“并行”指的是用并发使一个系统运行得更快。并行可以在计算机系统的多个抽象层次上发挥作用，下面我们按照系统层次结构从高到低三个层次依次介绍。

 

1.线程级并发

在进程抽象的基础上，我们能够设计多个程序同时执行的系统，从而导致进程的并发。使用线程，我们甚至可以在一个进程中执行多个控制流。自20世纪60年代初分时技术出现以来，计算机系统就开始支持并发执行。传统意义上，这种并发执行只是在一台计算机上通过快速切换多个可执行进程来模拟，就像玩杂耍的人让多个球在空中飞舞一样。这种形式的并发允许多个用户同时与系统交互，就像许多人希望从单个Web服务器获取页面时一样。它还允许单个用户同时执行多个任务，例如在一个窗口中有一个Web浏览器，在另一个窗口中有一个字处理器，以及同时播放流媒体音乐。以前，大多数实际计算都是由单处理器完成的，即使该处理器必须在多个任务之间切换。这种配置的计算机系统称为单处理器系统。

当我们构造一个由多处理器组成的系统，其所有的处理器都在一个操作系统内核的控制下，我们就有了一个多处理器系统。自20世纪80年代以来，此类系统用于大规模计算，随着多核处理器和超线程的出现，这种系统才变得越来越普遍。图1.16所示不同处理器类型的分类。

多核处理器将几个CPU（称为“核”）集成到一个集成电路芯片上。图1.17说明了典型多核处理器的结构，其中芯片有四个CPU核，每个CPU核都有自己的一级和二级缓存，每个一级缓存分成两部分，一部分用来保存最近获取的指令，另一部分用来保存数据。这些核共享更高级别的缓存以及与内存的接口。业内专家预测，他们能够将几十个，最终数百个核集成在单芯片上。

超线程，有时称为同时多线程(simultaneous multi-threading)，是一种允许单个CPU执行多个控制流的技术。它包括一些CPU硬件的多个副本，例如程序计数器和寄存器文件，而硬件的其他部分（例如执行浮点运算的单元）只有一个副本。在不同的线程之间切换在常规处理器中需要大约20000个时钟周期，而超线程处理器则在一个时钟周期的基础上决定执行哪个线程。它使CPU能够更好地利用其处理资源。例如，如果一个线程必须等待一些数据加载到缓存中，那么CPU可以继续执行另一个线程。例如，英特尔酷睿i7处理器可以让每个核执行两个线程，因此一个四核系统实际上可以并行执行八个线程。

使用多处理可以从两个方面提高系统性能。首先，它减少了执行多个任务时模拟并发性的需要。如前所述，即使是一个人使用个人计算机也能同时执行许多活动。其次，它可以更快地运行单个应用程序，但前提是该程序是用能够有效并行执行的多线程编写的。因此，虽然并发原理的形成和研究已超过50年，但多核和超线程系统的出现大大增加了编写利用这些硬件实现线程级并行执行的应用程序的愿望。第12章将更深入地探讨并发，利用并发提供处理资源共享和在程序执行中允许更多并行的方法。

2.指令级并行

在较低的抽象级别上，现代处理器可以同时执行多条指令，这一特性称为指令级并行。例如，早期的微处理器，比如1978年的英特尔8086，需要多个(通常是3-10个)时钟周期执行一条指令。较新的处理器可以保持每个时钟周期执行2到4条指令的速率。其实，任何已知的指令从开始执行到完成都需要更长的时间，可能需要20个时钟周期或更长，但是处理器使用了非常多的聪明的技巧能同时处理多达100条指令。在第4章中，我们将探讨流水线的使用，其中执行指令所需的操作被划分为不同的步骤，处理器硬件被组织为一系列的阶段，每个阶段执行其中的一个步骤。这些阶段可以并行操作，在不同指令的不同部分工作。我们将看到一个相当简单的硬件设计可以维持接近每周期一条指令的执行速率。

能够保持执行速度超过每周期一条指令的处理器称为超标量处理器。大多数现代处理器都支持超标量运算。在第5章中，我们将描述这种处理器的一个高级模型。我们将看到应用程序员可以使用这个模型来诠释他们程序的性能。然后他们可以编写程序，使生成的代码达到更高的指令级并行，使得运行速度更快。

3.单指令、多数据（SIMD）并行

在最底层，许多现代处理器都有特殊的硬件，允许一条指令并行执行多个操作，这种模式称为单指令多数据（SIMD）并行。例如，Intel和AMD最近几代的处理器就含有可以并行地对8对单精度浮点数（C数据类型float）执行加法的指令。

提供这些SIMD指令主要是为了在应用程序中加速处理图像、声音和视频数据。尽管有些编译器试图从C程序中自动提取可用SIMD指令解决的并行问题，但更可靠的方法是使用编译器，比如gcc，支持的特殊矢量数据类型编写程序。作为对第5章中关于程序优化的一般性描述的补充，我们在Web Aside opt:simd中描述了这种编程风格。

注：Web Aside opt:simd 为了避免本书体积过大，内容过多，作者在自己的网站中给出很多资料，在书中用这种方式标出，以方便读者查阅。










