
兼容
向后兼容=回溯兼容=向下兼容=向过去兼容
向前兼容=前瞻兼容=向上兼容=向未来兼容

类继承:
  实现多个接口的类的对象 可以当作 父接口的对象
  若 父接口 是 函数的输入形参的类型，则 函数 是 前瞻兼容(无视其他父接口)
  若 父接口 是 函数的输出形参的类型，则 函数 是 回溯兼容(产生的内容符合旧格式)

===============================
内容格式=内容语义(对输出内容的最宽泛约束)+展示语义(对基本服务的最低需求)
  例:函数签名=输入+输出
纵向:旧内容格式，新内容格式
横向:内容数据，原子语义，展示平台
回溯兼容: 新内容格式 <: 旧内容格式
  内容语义 约束更宽更松 (支持多个版本的格式)
  展示语义 服务更广更多(API只增)
===============================
甲方空想 乙方实干
协议=甲方权利(想象范围)+乙方职责(工作范围)
(职责类型.<:) = (职责集合.>=)
权利=负职责=职责补集=~职责
[新协议 <: 旧协议]
  <==> [新甲方权利 <: 旧甲方权利][新乙方职责 <: 旧乙方职责]
  <==> [新甲方权利 >= 旧甲方权利][新乙方职责 >= 旧乙方职责]
  <==> [~新甲方职责 >= ~旧甲方职责][新乙方职责 >= 旧乙方职责]
  <==> [新甲方职责 <= 旧甲方职责][新乙方职责 >= 旧乙方职责]

甲方 可以提出任意多的新想法(自定义对象)，但 想法的书面化表达 必须符合 乙方的格式
乙方 只提供固定有限的服务
进步:
  乙方可接受的书面格式 更自由
  乙方服务 更丰富
向后兼容:
  新乙方格式 兼容 旧的
  新乙方的服务 涵盖 旧的
  #乙方 向后兼容
向前兼容:
  新乙方格式 仍在 旧框架内，只是有更详细的语义。旧乙方 仍可依 旧语法 阅读，但会遗漏 新格式中新增的信息。
  旧乙方 无视 新增的服务 仍可 达到 旧协议的预期效果。
  #格式及预期效果 向前兼容

===============================

软件开发行业的「前后」是按照英语习惯来的，不是按照汉语习惯来的。按照英语习惯，「向前进」(forward)指未来，「向后退」(backward)指过去。注意要把「前」「后」分别理解成「前进」和「后退」，不可以理解成「从前」和「以后」。
backward compatibility (向后兼容, 回溯兼容) = downward compatibility (向下兼容) = 向过去兼容，即现在设计的软件要考虑旧版本的数据还能不能用，比如在开发Office 2007的时候，要考虑如何打开Office 2003的doc/xls/ppt文件，而不能仅仅只能打开docx/xlsx/pptx文件。
forward compatibility (向前兼容, 前瞻兼容) = upward compatibility (向上兼容) = 向未来兼容，即现在设计的软件要考虑未来还能不能用。比如保留几个字段，留给未来新填写新数据。

作者：叶剑飞
链接：https://www.zhihu.com/question/47239021/answer/524159893
来源：知乎

===============================
讨论兼容性的时候，要弄清楚，是说系统兼容性还是应用软件的兼容性。

@vczh 说的是系统的兼容性，
  向后兼容（ Backwards compatibility ）  windows10系统能兼容运行Windows 3.1开发的程序 ，win10具有向后兼容性
  向前兼容（ Forward compatibility ） Windows 3.1能兼容运行Windows 10开发的程序 ，Windows 3.1具有向前兼容性

软件兼容性的场景，以android开发为例
  向后兼容（ Backwards compatibility ）使用API 23 的sdk，使用兼容包开发的app，可以让它运行在更低版本的android系统上。 这样的app具有向后兼容性
  向前兼容（ Forward compatibility  ）由于系统都是向后兼容的，所以app就不需要向前兼容了

作者：薛瑄
链接：https://www.zhihu.com/question/47239021/answer/140625351
来源：知乎
===============================
作者：龙尘
链接：https://www.zhihu.com/question/47239021/answer/368142128
来源：知乎

在理解向前兼容和向后兼容前,先要知道这是用在什么结构中的。
  能用到向后兼容和向前兼容， 那么肯定是存在接口概念的。
  也就是说存在一个系统提供接口供外部使用， 外部应用使用这个接口。
  然后就存在系统迭代周期和应用迭代周期不一致的问题，这时候就出现了向前兼容和向后兼容的说法。

向后兼容就是，使用旧接口的应用，能够运行在新的系统上。 就比如其他回答者说的：
  “Windows 10要能运行为Windows 3.1开发的程序”  （在这里，Window是系统，开发的程序就是使用系统接口的应用。应用使用了旧的接口，系统是新的系统）
  “RFC2018的设备能够兼容RFC793协议”（在这里，使用TCP协议的设备都是系统，但是存在一些设备使用了 RFC2018协议， 一些设备使用了 RFC93协议 。使用了 		RFC93协议的设备就是使用了旧的接口，使用了 RFC2018协议的设备就是新系统）
  “2007 Microsoft Office 系统能够打开 Office 2000和Office 2003的文件”  （在这里，Office是系统，文件就是使用接口的应用。Office 2000和Office 2003的文件就是使用了旧的接口 ， Office 2007 就是新的系统）
  “CD盘可以放在CD光驱播放，也可以放在DVD光驱播放。”（光驱是系统，CD盘是使用接口的应用。CD是旧接口， DVD光驱是新系统）

向前兼容就是，使用了新接口的应用，运行在旧的系统上。系统对于未定义的接口，他不认为是错误的，而是不处理，也就是 “忽略掉早期版本中未实现的功能”
  “Windows 3.1要能运行为Windows 10开发的程序” （应用使用了一些新的接口，但是系统却是旧的系统）
  “Word 2003 能够打开用Word 2007创建的文件。”（Office是系统，文件就是使用接口的应用。Office 2007的文件就是使用了新的接口 ， Office 2003 就是旧的系统）
  “USB3.0的U盘，插在USB1.0的接口上”（）

兼容性是形容系统的。
  系统向后兼容 ， 也就是兼容以前的，就说明系统是相对新的。
  系统向前兼容 ， 也就是兼容未来的，就说明系统是相对旧的。
发布于 2018-04-16
===============================
===============================

