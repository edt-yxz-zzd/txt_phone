RMQ、树状数组、线段树

======
BV1pE41197Qj 树状数组->线段树
鹤翔万里
https://space.bilibili.com/171431343?share_medium=android&share_source=copy_link&bbid=XY89336879C6355E69263A0C37937285C76BF&ts=1604830790355
  manim 教程
  BV1pE41197Qj 树状数组->线段树#鹤翔万里

  参考：
【1】 Fenwick tree - Wikipedia https://url.cn/5DweHuN
【2】 树状数组 - 维基百科 https://url.cn/54EaT1i
【3】 算法竞赛进阶指南 - 李煜东 https://url.cn/5Ey6FLZ
【4】 【模板】树状数组1 - Luogu https://url.cn/5dkpfgu
【5】 【模板】树状数组2 - Luogu https://url.cn/5mbLi2T


======
线段树（segment tree）
树状数组（binary indexed tree）
单点修改 单点查询
区域修改 区域查询

#满足 结合律
  #区间求和，区间最大值，区间平方和
区域修改
  * 原数组、差分数组
  * 懒惰标记，延迟更新
    - 本区间需要作何修改(尚未下传，子区间未更新标记)
    相对标记
    绝对标记
      记得在查询之前下传标记
ignore: https://blog.csdn.net/huangzihaoal/article/details/81813454
权值线段树
可持久化线段树（主席树）#区间第k大的值？
非递归式线段树（ZKW线段树，张昆玮线段树）

https://blog.csdn.net/hqh131360239/article/details/80762901
  RMQ、树状数组、线段树
good: https://www.cnblogs.com/AC-King/p/7789013.html
扫描线
  平面上诸多矩形，求面积，求重复至少3次的面积，求周长(注意可能有洞)
    矩形纵边排序: 先按X轴分量。
    在X轴上投影，纵向切割矩形，新的小矩形要么横边投影不相交，要么完全重合。纵向的扫描线从左往右移动时，线段树用于更新扫描线与各新小矩形的多条相交线段。(称:左纵边为入边，右纵边为出边)
  离散化: 离散化的线段树只有区间，没有叶节点。通常基于有限长相对小的数组的线段树，会细化到叶节点。
    *维护线段覆盖1次或以上的长度
    *维护线段覆盖3次或以上的长度
    #权值线段树？
    这不就是我的block-red-black-tree么？区间为键色为值，相邻同色的区间要合并

  可持久化线段树（主席树）#区间第k最大的值
    每操作一次，建立一颗新树
    #####
    可持久化=增量更新的只读数据类型=functional-datatype
      *节点内含直接指针(不可能):
        以节点链接节点的方式构建的强连通的有向图是不可能增量更新的，要改一节点，就必须改变所有节点
      *外挂描述指向关系(可能):
        但以矩阵或邻接表实现的，仍有可能
      *节点内含间接指针+映射表(可能):
        映射表解释间接指针，O(log n)

题目：HDU 2665 Kth number      题解
给定10万个数，10万个询问。
每个询问，问区间[L,R]中的数，从小到大排列的话，第k个数是什么

（1）：字符串哈希
题目：URAL1989 Subpalindromes    题解
给定一个字符串(长度<=100000)，有两个操作。   1：改变某个字符。 2：判断某个子串是否构成回文串。 
直接判断会超时。这个题目，是用线段树维护字符串哈希
对于一个字符串a[0],a[1],...,a[n-1] 它对应的哈希函数为a[0]+a[1]*K + a[2]*K^2 +...+a[n-1]*K^(n-1)
再维护一个从右往左的哈希值：a[0]*K^(n-1) + a[1]*K^(n-2) +...+a[n-1]
若是回文串，则左右的哈希值会相等。而左右哈希值相等，则很大可能这是回文串。
若出现误判，可以再用一个K2，进行二次哈希判断，可以减小误判概率。
实现上，哈希值最好对某个质数取余数，这样分布更均匀。
（2）：最长连续零
题目：Codeforces 527C Glass Carving   题解
题意是给定一个矩形，不停地纵向或横向切割，问每次切割后，最大的矩形面积是多少。
最大矩形面积=最长的长*最宽的宽
这题，长宽都是10^5，所以，用01序列表示每个点是否被切割，然后，
最长的长就是长的最长连续0的数量+1
最长的宽就是宽的最长连续0的数量+1
于是用线段树维护最长连续零

问题转换成：
目标信息：区间最长连续零的个数
点信息：0 或 1
由于目标信息不符合区间加法，所以要扩充目标信息。

转换后的线段树结构：
区间信息：从左，右开始的最长连续零，本区间是否全零，本区间最长连续零。
点信息：0 或 1
然后还是那2个问题：

1.区间加法：
这里，一个区间的最长连续零，需要考虑3部分：
-（1）：左子区间最长连续零
-（2）：右子区间最长连续零
-（3）：左右子区间拼起来，而在中间生成的连续零（可能长于两个子区间的最长连续零）
而中间拼起来的部分长度，其实是左区间从右开始的最长连续零+右区间从左开始的最长连续零。
所以每个节点需要多两个量，来存从左右开始的最长连续零。
然而，左开始的最长连续零分两种情况，
--（1）：左区间不是全零，那么等于左区间的左最长连续零
--（2）：左区间全零，那么等于左区间0的个数加上右区间的左最长连续零
于是，需要知道左区间是否全零，于是再多加一个变量。
最终，通过维护4个值，达到了维护区间最长连续零的效果。


