https://en.cppreference.com/w/cpp/named_req/TrivialType
https://en.cppreference.com/w/cpp/types/is_trivial


==================================
C++ named requirements: TrivialType
 
C++
 
C++ named requirements
 

Specifies that a type is a trivial type.

Note: the standard doesn't define a named requirement with this name. This is a type category defined by the core language. It is included here as a named requirement only for consistency.
Requirements

    TriviallyCopyable
    If the type is a class type or array thereof, the class has one or more eligible default constructors, all of which are trivial. 

Notes

A default constructor is eligible if and only if it is non-deleted.
	(until C++20)
See also
is_trivial
(C++11)
	checks if a type is trivial
(class template)










==================================
std::is_trivial
 
C++
 
Utilities library
 
Type support
 
Defined in header <type_traits>
		
template< class T >
struct is_trivial;
		(since C++11)
		

If T is TrivialType (that is, a scalar type, a trivially copyable class with a trivial default constructor, or array of such type/class, possibly cv-qualified), provides the member constant value equal to true. For any other type, value is false.

The behavior is undefined if std::remove_all_extents_t<T> is an incomplete type and not (possibly cv-qualified) void.

The behavior of a program that adds specializations for is_trivial or is_trivial_v (since C++17) is undefined.
Template parameters
T 	- 	a type to check
Helper variable template
template< class T >
inline constexpr bool is_trivial_v = is_trivial<T>::value;
		(since C++17)
		
Inherited from std::integral_constant
Member constants
value
[static]
	true if T is a trivial type , false otherwise
(public static member constant)
Member functions
operator bool
	converts the object to bool, returns value
(public member function)
operator()
(C++14)
	returns value
(public member function)
Member types
Type 	Definition
value_type 	bool
type 	std::integral_constant<bool, value>
Possible implementation

template< class T >
struct is_trivial : std::integral_constant< 
    bool,
    std::is_trivially_copyable<T>::value &&
    std::is_trivially_default_constructible<T>::value 
> {};

Example
Run this code

#include <iostream>
#include <type_traits>
 
struct A {
    int m;
};
 
struct B {
    B() {}
};
 
int main() 
{
    std::cout << std::boolalpha;
    std::cout << std::is_trivial<A>::value << '\n';
    std::cout << std::is_trivial<B>::value << '\n';
}

Output:

true
false

See also
is_trivially_copyable
(C++11)
	checks if a type is trivially copyable
(class template)







