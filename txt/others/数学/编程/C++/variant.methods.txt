
variant.methods.txt

==================================
 Observers
index
	returns the zero-based index of the alternative held by the variant
(public member function)
valueless_by_exception
	checks if the variant is in the invalid state
(public member function)
Modifiers
emplace
	constructs a value in the variant, in place
(public member function)
swap
	swaps with another variant
(public member function)
Non-member functions
visit
(C++17)
	calls the provided functor with the arguments held by one or more variants
(function template)
holds_alternative
(C++17)
	checks if a variant currently holds a given type
(function template)
std::get(std::variant)
(C++17)
	reads the value of the variant given the index or the type (if the type is unique), throws on error
(function template)
get_if
(C++17)
	obtains a pointer to the value of a pointed-to variant given the index or the type (if unique), returns null on error
(function template)










==================================
std::variant<Types...>::index
std::variant
constexpr std::size_t index() const noexcept;
		(since C++17)

Returns the zero-based index of the alternative that is currently held by the variant.

If the variant is valueless_by_exception, returns variant_npos.
Example
Run this code

#include <variant>
#include <string>
#include <iostream>
int main()
{
    std::variant<int, std::string> v = "abc";
 
    std::cout << "v.index = " << v.index() << '\n';
 
    v = {}; 
 
    std::cout << "v.index = " << v.index() << '\n';
}

Output:

v.index = 1
v.index = 0



==================================

std::variant<Types...>::valueless_by_exception
constexpr bool valueless_by_exception() const noexcept;
		(since C++17)

Returns false if and only if the variant holds a value.
Notes

A variant may become valueless in the following situations:

    (guaranteed) an exception is thrown during the move initialization of the contained value from the temporary in copy assignment
    (guaranteed) an exception is thrown during the move initialization of the contained value during move assignment
    (optionally) an exception is thrown when initializing the contained value during a type-changing assignment
    (optionally) an exception is thrown when initializing the contained value during a type-changing emplace 

Since variant is never permitted to allocate dynamic memory, previous value cannot be retained in these situations.

This applies even to variants of non-class types:

struct S {
    operator int() { throw 42; }
};
std::variant<float, int> v{12.f}; // OK
v.emplace<1>(S()); // v may be valueless

A variant that is valueless by exception is treated as being in an invalid state: index returns variant_npos, get and visit throw bad_variant_access.
Example
Run this code

#include <cassert>
#include <iostream>
#include <stdexcept>
#include <string>
#include <variant>
 
struct Demo {
    Demo(int) {}
    Demo(const Demo&) { throw std::domain_error("copy ctor"); }
    Demo& operator= (const Demo&) = default;
};
 
int main()
{
    std::variant<std::string, Demo> var{"str"};
    assert(var.index() == 0);
    assert(std::get<0>(var) == "str");
    assert(var.valueless_by_exception() == false);
 
    try {
        var = Demo{666};
    } catch (const std::domain_error& ex) {
        std::cout << "1) Exception: " << ex.what() << '\n';
    }
    assert(var.index() == std::variant_npos);
    assert(var.valueless_by_exception() == true);
 
    // Now the var is "valueless" which is an invalid state caused
    // by an exception raised in the process of var's initialization.
 
    try {
        std::get<1>(var);
    } catch (const std::bad_variant_access& ex) {
        std::cout << "2) Exception: " << ex.what() << '\n';
    }
 
    var = "str2";
    assert(var.index() == 0);
    assert(std::get<0>(var) == "str2");
    assert(var.valueless_by_exception() == false);
}

Possible output:

1) Exception: copy ctor
2) Exception: std::get: variant is valueless

==================================



std::variant<Types...>::emplace
template <class T, class... Args>
T& emplace(Args&&... args);
	(1) 	(since C++17)
template <class T, class U, class... Args>
T& emplace( std::initializer_list<U> il, Args&&... args );
	(2) 	(since C++17)
template <size_t I, class... Args>
std::variant_alternative_t<I, variant>& emplace( Args&&... args );
	(3) 	(since C++17)
template <size_t I, class U, class... Args>

std::variant_alternative_t<I, variant>&
    emplace( std::initializer_list<U> il, Args&&... args );
	(4) 	(since C++17)
		

Creates a new value in-place, in an existing variant object
1) Equivalent to emplace<I>(std::forward<Args>(args)...), where I is the zero-based index of T in Types.... This overload only participates in overload resolution if std::is_constructible_v<T, Args...> is true, and T occurs exactly once in Types...
2) Equivalent to emplace<I>(il, std::forward<Args>(args)...), where I is the zero-based index of T in Types.... This overload only participates in overload resolution if std::is_constructible_v<T, std::initializer_list<U>&, Args...> is true, and T occurs exactly once in Types...
3) First, destroys the currently contained value (if any). Then direct-initializes the contained value as if constructing a value of type T_I with the arguments std::forward<Args>(args).... If an exception is thrown, *this may become valueless_by_exception. This overload only participates in overload resolution if std::is_constructible_v<T_I, Args...> is true. The behavior is undefined if I is not less than sizeof...(Types).
4) First, destroys the currently contained value (if any). Then direct-initializes the contained value as if constructing a value of type T_I with the arguments il, std::forward<Args>(args).... If an exception is thrown, *this may become valueless_by_exception. This overload only participates in overload resolution if std::is_constructible_v<T_I, initializer_list<U>&, Args...> is true. The behavior is undefined if I is not less than sizeof...(Types).
Parameters
args 	- 	constructor arguments to use when constructing the new value
il 	- 	initializer_list argument to use when constructing the new value
Return value

A reference to the new contained value.
Exceptions
1-4) Any exception thrown during the initialization of the contained value.
Example
Run this code

#include <iostream>
#include <string>
#include <variant>
 
int main()
{
  std::variant<std::string> v1;
  v1.emplace<0>("abc"); // OK
  std::cout << std::get<0>(v1) << '\n';
  v1.emplace<std::string>("def"); // OK
  std::cout << std::get<0>(v1) << '\n';
 
  std::variant<std::string, std::string> v2;
  v2.emplace<1>("ghi"); // OK
  std::cout << std::get<1>(v2) << '\n';
  // v2.emplace<std::string>("abc"); -> Error
}

Output:

abc
def
ghi


==================================


std::visit
template <class Visitor, class... Variants>
constexpr /*see below*/ visit( Visitor&& vis, Variants&&... vars );
	(1) 	(since C++17)
template <class R, class Visitor, class... Variants>
constexpr R visit( Visitor&& vis, Variants&&... vars );
	(2) 	(since C++20)
		

Applies the visitor vis (Callable that can be called with any combination of types from variants) to the variants vars

Effectively returns

std::invoke(std::forward<Visitor>(vis), std::get<is>(std::forward<Variants>(vars))...)

, where is... is vars.index()....
1) The return type is deduced from the returned expression as if by decltype. The call is ill-formed if the invocation above is not a valid expression of the same type and value category, for all combinations of alternative types of all variants.
2) The return type is R. If R is (possibly cv-qualified) void, the result of the invoke expression is discarded.
Parameters
vis 	- 	a Callable that accepts every possible alternative from every variant
vars 	- 	list of variants to pass to the visitor
Return value
1) The value returned by the selected invocation of the visitor.
2) Nothing if R is (possibly cv-qualified) void; otherwise the value returned by the selected invocation of the visitor, implicitly converted to R.
Exceptions

Throws std::bad_variant_access if any variant in vars is valueless_by_exception.
Complexity

When the number of variants is zero or one, the invocation of the callable object is implemented in constant time, i.e. it does not depend on sizeof...(Types).

If the number of variants is larger than 1, the invocation of the callable object has no complexity requirements.
Example
Run this code

#include <iomanip>
#include <iostream>
#include <string>
#include <type_traits>
#include <variant>
#include <vector>
 
// the variant to visit
using var_t = std::variant<int, long, double, std::string>;
 
// helper constant for the visitor #3
template<class> inline constexpr bool always_false_v = false;
 
// helper type for the visitor #4
template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };
// explicit deduction guide (not needed as of C++20)
template<class... Ts> overloaded(Ts...) -> overloaded<Ts...>;
 
int main() {
    std::vector<var_t> vec = {10, 15l, 1.5, "hello"};
    for(auto& v: vec) {
 
        // 1. void visitor, only called for side-effects (here, for I/O)
        std::visit([](auto&& arg){std::cout << arg;}, v);
 
        // 2. value-returning visitor, demonstrates the idiom of returning another variant
        var_t w = std::visit([](auto&& arg) -> var_t {return arg + arg;}, v);
 
        // 3. type-matching visitor: a lambda that handles each type differently
        std::cout << ". After doubling, variant holds ";
        std::visit([](auto&& arg) {
            using T = std::decay_t<decltype(arg)>;
            if constexpr (std::is_same_v<T, int>)
                std::cout << "int with value " << arg << '\n';
            else if constexpr (std::is_same_v<T, long>)
                std::cout << "long with value " << arg << '\n';
            else if constexpr (std::is_same_v<T, double>)
                std::cout << "double with value " << arg << '\n';
            else if constexpr (std::is_same_v<T, std::string>)
                std::cout << "std::string with value " << std::quoted(arg) << '\n';
            else 
                static_assert(always_false_v<T>, "non-exhaustive visitor!");
        }, w);
    }
 
    for (auto& v: vec) {
        // 4. another type-matching visitor: a class with 3 overloaded operator()'s
        std::visit(overloaded {
            [](auto arg) { std::cout << arg << ' '; },
            [](double arg) { std::cout << std::fixed << arg << ' '; },
            [](const std::string& arg) { std::cout << std::quoted(arg) << ' '; },
        }, v);
    }
}

Output:

10. After doubling, variant holds int with value 20
15. After doubling, variant holds long with value 30
1.5. After doubling, variant holds double with value 3
hello. After doubling, variant holds std::string with value "hellohello"
10 15 1.500000 "hello"







==================================


std::holds_alternative
template< class T, class... Types >
constexpr bool holds_alternative( const std::variant<Types...>& v ) noexcept;
		(since C++17)
		

Checks if the variant v holds the alternative T. The call is ill-formed if T does not appear exactly once in Types...
Parameters
v 	- 	variant to examine
Return value

true if the variant currently holds the alternative T, false otherwise.
Example
Run this code

#include <variant>
#include <string>
#include <iostream>
int main()
{
    std::variant<int, std::string> v = "abc";
    std::cout << std::boolalpha
              << "variant holds int? "
              << std::holds_alternative<int>(v) << '\n'
              << "variant holds string? "
              << std::holds_alternative<std::string>(v) << '\n';
}

Output:

variant holds int? false
variant holds string? true







==================================


std::get (std::variant)
	(1) 	(since C++17)
template< std::size_t I, class... Types >

constexpr std::variant_alternative_t<I, std::variant<Types...>>&
    get( std::variant<Types...>& v );
template< std::size_t I, class... Types >

constexpr std::variant_alternative_t<I, std::variant<Types...>>&&
    get( std::variant<Types...>&& v );
template< std::size_t I, class... Types >

constexpr const std::variant_alternative_t<I, std::variant<Types...>>&
    get( const std::variant<Types...>& v );
template< std::size_t I, class... Types >

constexpr const std::variant_alternative_t<I, std::variant<Types...>>&&
    get( const std::variant<Types...>&& v );
	(2) 	(since C++17)
template< class T, class... Types >
constexpr T& get( std::variant<Types...>& v );
template< class T, class... Types >
constexpr T&& get( std::variant<Types...>&& v );
template< class T, class... Types >
constexpr const T& get( const std::variant<Types...>& v );
template< class T, class... Types >
constexpr const T&& get( const std::variant<Types...>&& v );
		
1) Index-based value accessor: If v.index() == I, returns a reference to the value stored in v. Otherwise, throws std::bad_variant_access. The call is ill-formed if I is not a valid index in the variant.
2) Type-based value accessor: If v holds the alternative T, returns a reference to the value stored in v. Otherwise, throws std::bad_variant_access. The call is ill-formed if T is not a unique element of Types....
Template parameters
I 	- 	index to look up
T 	- 	unique type to look up
Types... 	- 	types forming the variant
Parameters
v 	- 	a variant
Return value

Reference to the value stored in the variant.
Exceptions
1,2) Throws std::bad_variant_access on errors.
Example
Run this code

#include <variant>
#include <string>
#include <iostream>
 
int main()
{
    std::variant<int, float> v{12}, w;
    std::cout << std::get<int>(v) << '\n';
    w = std::get<int>(v);
    w = std::get<0>(v); // same effect as the previous line
 
//  std::get<double>(v); // error: no double in [int, float]
//  std::get<3>(v);      // error: valid index values are 0 and 1
 
    try
    {
        w = 42.0f;
        std::cout << std::get<float>(w) << '\n'; // ok, prints 42
        w = 42;
        std::cout << std::get<float>(w) << '\n'; // throws
    }
    catch (std::bad_variant_access const& ex)
    {
        std::cout << ex.what() << ": w contained int, not float\n";
    }
}

Possible output:

12
42
Unexpected index: w contained int, not float








==================================


std::get_if
	(1) 	(since C++17)
template< std::size_t I, class... Types >

constexpr std::add_pointer_t<std::variant_alternative_t<I, std::variant<Types...>>>
    get_if( std::variant<Types...>* pv ) noexcept;
template< std::size_t I, class... Types >

constexpr std::add_pointer_t<const std::variant_alternative_t<I, std::variant<Types...>>>
    get_if( const std::variant<Types...>* pv ) noexcept;
	(2) 	(since C++17)
template< class T, class... Types >
constexpr std::add_pointer_t<T> get_if( std::variant<Types...>* pv ) noexcept;
template< class T, class... Types >
constexpr std::add_pointer_t<const T> get_if( const std::variant<Types...>* pv ) noexcept;
		
1) Index-based non-throwing accessor: If pv is not a null pointer and pv->index() == I, returns a pointer to the value stored in the variant pointed to by pv. Otherwise, returns a null pointer value. The call is ill-formed if I is not a valid index in the variant.
2) Type-based non-throwing accessor: Equivalent to (1) with I being the zero-based index of T in Types.... The call is ill-formed if T is not a unique element of Types....
Parameters
I 	- 	index to look up
Type 	- 	unique type to look up
pv 	- 	pointer to a variant
Return value

Pointer to the value stored in the pointed-to variant or null pointer on error.
Example
Run this code

#include <variant>
#include <iostream>
 
int main()
{
    std::variant<int, float> v{12};
 
    if(auto pval = std::get_if<int>(&v))
      std::cout << "variant value: " << *pval << '\n'; 
    else 
      std::cout << "failed to get value!" << '\n'; 
}

Output:

variant value: 12

==================================
==================================
==================================
==================================
