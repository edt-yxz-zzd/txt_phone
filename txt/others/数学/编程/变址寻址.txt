隐含寻址/串操作寻址方式 
I/0端口寻址方式?
立即寻址:立即数
寄存器寻址:寄存器
直接寻址：[偏移地址]
寄存器间接寻址：[基址寄存器/变址寄存器]
寄存器相对寻址：[基址寄存器/变址寄存器+偏移量值]
基址变址寻址：[基址寄存器+变址寄存器]
相对基址变址寻址：[基址寄存器+变址寄存器+偏移量值]











https://blog.csdn.net/garybushiqiqi/article/details/80625465?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param
微机原理寻址方式总结
garybushiqiqi 2018-06-08 18:03:41 4110 收藏 19
文章标签： 微机原理 寻址方式
版权

基本格式：操作码  [目的操作数据][源操作数]

#“[]”表示可有可无

零操作数指令：操作码               （隐含操作对象）

单操作数指令：操作码  操作数

双操作数指令：操作码 操作数 操作数

多操作数指令：三个操作数及以上


A.立即寻址：

      #也就是立即数寻找，且立即数只在源操作数。

   例：MOV AX,1200H


B.寄存器寻址：

     #参加操作的操作数在cpu的通用寄存器中

  例：MOV AX,BX


C.存储器寻址：

          #指令操作对象在内存中

          #操作数据用[偏移地址]表示，下面提到的偏移地址都是写在[]内，表示此偏移地址所指向的内存中的数据

          #存储器操作数的字长本身不确定，其字长取决于另一个寄存器的操作数，

             或通过其他方式确定字长，如（MUL BYTE PTR[BX]）

     1.直接寻址：指令中直接给出操作数的偏移地址

               例：MOV AX [1200H]

                        操作数默认为数据段，但允许段重设：

                                                        MOV AX,ES:[1200H]       #重设到代码段

     2.寄存器间接寻址：

           #有路由器间接给出地址

           #仅有4个通用寄存器可用于存放数据的偏移地址：BX,BP,SI,BI

                       其中：BX,SI,DI———默认数据段

                                  BP—————默认堆栈段

           例：

                MOV BX,1200H

                MOV  AX,[BX]


     3.   寄存器相对寻址：

                   #操作数的偏移地址为寄存器内容加上一个位移量

                   #一般用于一维数组的操作

               例：MOV AX,[BX+DATA]

       4.基址变址寻址：

                     #操作数的偏移地址为：一个基址寄存器内容+一个变址寄存器内容

                      #段地址由基址寄存器决定

                                BX--------数据段

                                 BP--------堆栈段

                  例：MOV SI,1100H

                         MOV BX,SI

                         MOV AX,[SI+BX]                    #偏移地址在数据段


        5.基址，变址，相对寻址

                 #偏移地址=基址寄存器 + 变址寄存器 + 位移量

                 #段地址由基址寄存器决定

                 #主要用于二维表

              例：

                      MOV DI,1100H

                      MOV BP,DI

                      MOV AL,[BP][DI][S]


D.隐含寻址方式：

         #指令中隐含一个或两个操作数的地址，即操作数在默认地址中

   例：    MUL BL


总结：通过以上总结：寻址方式可以分成立即数寻址，寄存器寻址，存储器寻址，隐含寻址，

           其中存储器寻址包括：直接寻址，寄存器间接寻址，相对寻址，基址变址寻址，基址变址相对寻址。

            所以总共就有8大寻址方式













https://blog.csdn.net/u011587070/article/details/81540987?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param

七种寻址方式
u011587070 2018-08-09 17:36:36 21875 收藏 48
版权

七种基本的寻址方式：立即寻址，寄存器寻址，直接寻址，寄存器间接寻址，寄存器相对寻址，基址变址寻址，相对基址变址寻址。其中，后五种寻址方式（即直接寻址、寄存器间接寻址、寄存器相对寻址、基址变址寻址和相对基址变址寻址）属于存储器寻址，用于说明操作数或操作数地址所在存储单元的地址。

基本寻址方式

下面重点说一下这七种基本寻址方式的特点：

1. 立即寻址方式

先解释一个概念，叫做立即数。

操作数包含在指令中，它作为指令的一部分，跟在操作码后存放在代码段。这种操作数称为立即数。

立即寻址方式所提供的操作数紧跟在操作码后面，与操作码一起放在指令代码段中，不需要到其他地址单元中去取。立即数可以是8位，也可以是16位。这种寻址方式主要用于给寄存器或存储单元赋初值的场合。立即寻址方式是这七种寻址方式中速度最快的寻址方式。

2. 寄存器寻址方式

寄存器寻址的特点是操作数在CPU内部的寄存器中，在指令中指定寄存器号。

由于操作数在寄存器中，不需要通过访问存储器来取得操作数，所以采用寄存器寻址方式的指令执行速度较快。

 

3. 直接寻址方式

直接寻址的操作数在存储器中，指令直接包含有操作数的有效地址。

4. 寄存器间接寻址方式

寄存器间接寻址的操作数在存储器中，操作数有效地址在寄存器中

5. 寄存器相对寻址方式

该寻址方式是以指定的寄存器内容，加上指令中给出的位移量（8位或16位），并以一个段寄存器为基准，作为操作数的地址。指定的寄存器一般是一个基址寄存器或变址寄存器。

6. 基址变址寻址方式

基址加变址寻址方式是指将寄存器（该寄存器一般指基址寄存器）的内容与指令中给出的地址偏移量相加，从而得到一个操作数的有效地址。

7. 相对基址变址寻址方式

操作数在存储器中，操作数的有效地址由基址寄存器之一的内容与变址寄存器之一的内容及指令中给定的位移量相加得到。







https://blog.csdn.net/u012206617/article/details/86554855


目录

    计算机只容许使用bx、si、di、bp寄存器做间接和相对寻址
    其中bx为基址存储器，si、di为变址存储器

        内存寻址方式：确定访问内存存储单元偏移地址的方式称为寻址方式。
        直接寻址：[偏移地址]
        寄存器间接寻址：[基址寄存器/变址寄存器]
        寄存器相对寻址：[基址寄存器/变址寄存器+偏移量值]
        基址变址寻址：[基址寄存器+变址寄存器]
        相对基址变址寻址：[基址寄存器+变址寄存器+偏移量值]
        注意：
        a 格式上的注意，正确区分寻址方式
        b 五种寻址中，均可以使用段前缀     //ds:[0001H]
        c masm编译器编译时，代码中的直接寻址必须采用段前缀的形式
        指针寄存器包括堆栈寄存器SP(stack pointer)和基数指针寄存器BP(base pointer)，变值寄存器包括源变址寄存器SI(source index)和目的变值寄存器DI(destination index)。这4个寄存器都是16位寄存器，这些寄存器在运算过程中也可以用来存放操作数（只能以字为单位），但经常的用途是在段内寻址时提供偏移地址，SP,BP一般与段寄存器SS联用，以确定堆栈寄存器中某一单元的地址，SP用以指示栈顶的偏移地址，而BP可作为堆栈区中的一个基地址，用以确定在堆栈中的操作数地址。SI,DI一般与段寄存器DS联用，以确定数据段中某一存储单元的地址，SI,DI具有自动增量和自动减量的功能，这一点使在串操作指令中用做变址非常方便，SI作为隐含的源变址DS联用，DI作为隐含的目的变址和ES连用，从而达到在数据段和附加段中寻址的目的。
        1. 直接寻址
        2. 寄存器间接寻址
        3. 寄存器相对寻址
        4. 基址变址寻址方式
        5. 相对基址变址寻址


十三、直接、寄存器间接寻址、寄存器相对寻址、基址变址寻址、相对基址变址寻址
墨痕诉清风 2019-01-19 17:58:44 6841 收藏 25
分类专栏： 汇编
版权
计算机只容许使用bx、si、di、bp寄存器做间接和相对寻址
其中bx为基址存储器，si、di为变址存储器

内存寻址方式：确定访问内存存储单元偏移地址的方式称为寻址方式。
直接寻址：[偏移地址]
寄存器间接寻址：[基址寄存器/变址寄存器]
寄存器相对寻址：[基址寄存器/变址寄存器+偏移量值]
基址变址寻址：[基址寄存器+变址寄存器]
相对基址变址寻址：[基址寄存器+变址寄存器+偏移量值]
注意：
a 格式上的注意，正确区分寻址方式
b 五种寻址中，均可以使用段前缀     //ds:[0001H]
c masm编译器编译时，代码中的直接寻址必须采用段前缀的形式


指针寄存器包括堆栈寄存器SP(stack pointer)和基数指针寄存器BP(base pointer)，变值寄存器包括源变址寄存器SI(source index)和目的变值寄存器DI(destination index)。这4个寄存器都是16位寄存器，这些寄存器在运算过程中也可以用来存放操作数（只能以字为单位），但经常的用途是在段内寻址时提供偏移地址，SP,BP一般与段寄存器SS联用，以确定堆栈寄存器中某一单元的地址，SP用以指示栈顶的偏移地址，而BP可作为堆栈区中的一个基地址，用以确定在堆栈中的操作数地址。SI,DI一般与段寄存器DS联用，以确定数据段中某一存储单元的地址，SI,DI具有自动增量和自动减量的功能，这一点使在串操作指令中用做变址非常方便，SI作为隐含的源变址DS联用，DI作为隐含的目的变址和ES连用，从而达到在数据段和附加段中寻址的目的。



BX+SI
BX+DI
BP+SI
BP+DI


1. 直接寻址

偏移地址值直接出现在执行代码中。

    mov 寄存器，[偏移地址]
    mov [偏移地址]，寄存器


2. 寄存器间接寻址

偏移地址通过寄存器取得使用

    mov 寄存器，[寄存器]
    mov [寄存器]，寄存器

实例：

    assume cs:daima
    daima segment
        mov ax,2000H
        mov ds,ax

        mov ax,1122H
        mov cx,3344H

        mov bx,0000H
        mov [bx],ax    ;将ax值放入ds 2000:0000

        mov bx,0002H
        mov [bx],cx    ;将cx值放入ds 2000:0002

        mov ax,4c00H
        int 21H
    daima ends
    end


3. 寄存器相对寻址

偏移地址值通过[寄存器+偏移量值]的形式运算后获得。

    mov 寄存器,[寄存器+偏移量值]
    mov 寄存器,ds:[寄存器+偏移量值]
    mov [寄存器+偏移量值]，寄存器
    mov ds:[寄存器+偏移量值]，寄存器

实例1：

    assume cs:code,ds:data
    data segment
    	db 'abc'
    data ends

    code segment
    start:
        mov ax,data
        mov ds,ax

        mov bx,0000H
        mov ah,[bx+0000H]

        mov al,[bx+0001H]

        mov ax,4c00H
        int 21H
    code ends
    end start

实例2：

    ;交换ds中偏移地址1和4，2和5，3和6的数据
    assume cs:code,ds:data
    data segment
    	db 'abcdef'
    data ends

    code segment
    start:
        mov ax,data
        mov ds,ax

        mov bx,0000H

        mov cx,3
        A:
            mov ah,ds:[bx]
            mov al,ds:[bx+0003H]
            mov [bx+0003H],ah
            mov [bx],al
            inc bx
        loop A

        mov ax,4c00H
        int 21H
    code ends
    end start

实例3：

    assume cs:code,ds:data
    data segment
    	db 'abc'
        db 0H,0H,0H
    data ends

    code segment
    start:
        mov ax,data
        mov ds,ax

    	mov si,0000H
    	mov di,0003H

        mov cx,3
        A:
            mov ah,[si]
            mov [di],ah

            inc si
            inc di
        loop A

        mov ax,4c00H
        int 21H
    code ends
    end start


4. 基址变址寻址方式

偏移地址值通过[基址寄存器+变址存储器]的形式运算后获得。

格式:

    mov 寄存器,[基址寄存器+变址寄存器]
    mov [基址寄存器+变址寄存器],寄存器

例如：

    mov ax,[bx+si]
    mov ax.[bx+di]
    ;不可以这样
    mov ax,[si+di]

实例：

    ;累计相加偏移地址0002H 3次。
    assume cs:code,ds:data
    data segment
    	db 1H,1H,2H
    data ends

    code segment
    start:
        mov ax,data
        mov ds,ax

        mov ah,00H

        mov bx,0000H
        mov si,0002H

        mov cx.3
        A:
            mov al,[bx+si]
            add ah,al

            inc bx
            dec si
        loop A

        mov ax,4c00H
        int 21H
    code ends
    end start


5. 相对基址变址寻址

偏移地址值通过[基址寄存器+变址寄存器+偏移量值]的形式运算后获得。

格式：

    mov 寄存器,[基址寄存器+变址寄存器+偏移量值]
    mov [基址寄存器+变址寄存器+偏移量值],寄存器

实例：

    ;取出1H、3H放入ah、al
    assume cs:code,ds:data
    data segment
    	db 0H,0H,0H,1H,2H,3H
    data ends

    code segment
    start:
        mov ax,data
        mov ds,ax

        mov bx,0000H

        mov si,0001H
        mov ah,[bx+si+0002H]

        mov di,0003H
        mov al,[bx+di+0002H]

        mov ax,4c00H
        int 21H
    code ends
    end start










