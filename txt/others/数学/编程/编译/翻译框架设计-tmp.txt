TODO:问题:『5』怎么来的?这是什么整数序列？#序列元素等价分类
TODO:*使用情景:安装初始化:(portable_interpretive_compiler_kit,runV_6M,tr_M5P_6M)
TODO:构造器:归纳法:
  tr_X5Y_9R =:
    | @Z. (runZ_9R tr_X5Y_6Z)
    | @A. (tr_X5A_9R <<< tr_A5Y_9R)
  runZ_9R =:
-->_9R
++机器_999
++伪程序_999


e others/数学/编程/编译/翻译框架设计.txt
view others/数学/编程/永恒代码/分页-分割线.txt
[:类型纟常规文件]:goto
[:翻译领域冫对象类型]:goto
[:def__portable_interpretive_compiler_kit]:goto








改名:
:%s/\<\u5\u_\u\>/tr_\0/g
  更改冫源代码文件命名格式:X5Y_6Z-->tr_X5Y_6Z
%s/[升降]\@<=级翻译/型翻译/g
:%s/_\(\u\)\>[ZTSKRXYPVMW]\@<=/_6\1/g
  _Z-->_6Z
    强调是:装载前的存储形式，区别于:装载后的内存脚本串联形式
:%s/加载/装载/g



约定:
  [(<<<) =[def]= (.)]
    !! [(.) 太难搜索]
  [(<<<) :: (a->o) -> (i->a) -> (i->o)]
  #泛化:
  [(<<<) :: Arrow arr => (arr a o) -> (arr i a) -> (arr i o)]
  [Arrow (GluedAlgo R)]

约定:
  [[Y <: X] =[def]= [Y是X子类型/子集/子格式/子语言...]]]
  [[Y <<: X] =[def]= [[Y <: X][Y=!=X]]]
  [[Y <<: X] === [Y是X真子类型/真子集/真子格式/真子语言...]]]
  [[Y :<>: X] =[def]= [not$ [[Y <: X][X <: Y]]]]
  [[Y <: X]or[X <<: Y]or[Y :<>: X]]
  [[Y == X]or[Y <<: X]or[X <<: Y]or[Y :<>: X]]
  共十二种偏序关系:
      (==)
      (<:) # (|<=|)
      (<<:) # (|<|)
      (:<>:) # 偏序无关
      (>:) # (|>=|)
      (>>:) # (|>|)
      (=!=)
      (!<:) # 非(|<=|)
      (!<<:) # 非(|<|)
      (!<>:) # 偏序相关，非偏序无关
      (!>:) # 非(|>=|)
      (!>>:) # 非(|>|)

[[
copy to:
  e ../../python3_src/useful__cjk_naming.txt
===
从命名上区分:程序vs代码
  某某器 :: 拟程序
  某某诀 :: 源代码纟程序
  [翻译器 <: 拟程序 :<>: 常规文件]
  [翻译诀 <: 代码 <: 常规文件]
    #翻译诀 可能是 源代码/文本/脚本文件
    #翻译诀 也可能是 二进制代码/可执行文件
===
[:必要性纟区分冫程序丷代码]:here
???没必要区分:程序vs代码:毕竟程序也是文件
  错！有必要区分:程序vs代码
  程序不一定是文件:
    人肉程序
    命令行表达式
      脚本？但『脚本』与许多语境下所期望的『源代码』相去甚远
      比如:tr_V5S_9R:『runV_9R tr_V5S_6V』:那么其源代码究竟是文件『tr_V5S_6V』还是脚本『"runV_9R tr_V5S_6V"』?
      比如:tr_V5S_9R:『(runV_9R tr_V5P_6V) <<< (runP_9R tr_P5S_6P)』:那么其源代码若非『"(runV_9R tr_V5P_6V) <<< (runP_9R tr_P5S_6P)"』又该是什么?
===
命名规范:
* 常规文件:aaa_6Z===aaa_6<Z>
  常规文件 由字节构成，指明语义格式:Z
  常规文件 是 存储形式，可上传下载
* 程序:aaa_9host===aaa_9<host>
  程序 是 已装载到内存脚本串联的数据或表达式，依赖于宿主机及其操作系统，指明宿主机及其操作系统host
  程序 是 内存脚本串联形式，不可上传下载

改名:常规文件:
/_\u\>[ZTSKRXYPVMW]\@<!
  找不到
:%s/_\(\u\)\>[ZTSKRXYPVMW]\@<=/_6\1/g
  _Z-->_6Z
    强调是:装载前的存储形式，区别于:装载后的内存脚本串联形式

改名:程序:
++load_9R

/\<run\u\>[ZXWPVM]\@<!
  找不到
:%s/\<run\u\>[ZXWPVM]\@<=/\0_9R/g
  runZ-->runZ_9R
/\<tr_\u5\u\>[AYXSWP]\@<!
  找不到
:%s/\<tr_\u5\u\>[AYXSWP]\@<=/\0_9R/g
  tr_X5Y_9R-->tr_X5Y_9R
    强调是:装载后的内存脚本串联形式，区别于:装载前的存储形式
    ???xxx强调:施主机机器语言W
    ???强调:宿主语言R#???宿主机机器语言R
    先统一替换为『_9R』
    再逐个区分实际宿主机:W,M,V

-->_9R
++机器_999
++伪程序_999
  『_999』表示运行于『自然界』这台机器上
:%s/\<manually_\w*\u\>/\0_999/g
  伪程序:人肉程序:manually_aaa-->manually_aaa_999

]]

目标:翻译器 #源代码变换
目标:翻译诀 #源代码纟翻译器
次要目标:解释诀 #源代码纟解释器#源代码纟虚拟机

编程语言:
  *机器语言/虚拟机耂字节码:
    V-虚拟机耂字节码
      #virtual_machine_bytecode
      # pseudo_machine_code
      #     由于『P』已被使用:P-高可移植性语言/跨平台语言
      #     这里使用『V』:virtual_machine_bytecode
      长期稳定目标，虽可更换
      意图:可移植性高/跨平台/虚拟机，抽象化后端处理
    M-目标机耂机器语言/受者机耂机器语言
      #machine_code
      #目标机可能是虚拟机
      可随时更换
    W-施主机耂机器语言/授者机耂机器语言
      ##obsolete:宿主机耂机器语言
      #www/反M:未知/不确定/不存在
      可随时更换
      #施主机可能是目标机
      #     这里:强调[宿主机 与 目标机 的 对立]所以有[宿主机===施主机/授者机][目标机===受者机]
      #     现今:统一使用『施主机』而非『宿主机』
      #对于『翻译』这一操作，重点在于『输出文件』，『输出文件』是运行于目标机的程序，故而『输出文件』绑定于『目标机耂机器语言M』
      #，『目标机耂机器语言M』明确而『施主机耂机器语言W』不明确
      #，施主机仅起到暂时性的工具性的翻译作用，对于『输出文件』而言不可见(不计较出身)
      #因此，W并不特别强调，所有程序名不带后缀。甚至有『人肉程序』，其『W』不可知。
  *高层语言:
    P-高可移植性语言/跨平台语言
      #portable_language
      长期稳定目标，虽可更换
      意图:可移植性高/跨平台/虚拟机，抽象化后端处理
    H-辅助性高层语言
      #helper_language
      #high_level_language
      #xxx宿主语言host_language
      暂时性借助，必将斩断依赖关联
  ===
  *依于翻译领域中的重要性划分:
    *自立性语言/里程碑式语言
      #斩断对其他语言及其他翻译器的依赖性关联
      #必有:tr_T5S_6T,tr_T5S_6S
      #     [T <- {V,M,P}]
      #     更强:tr_T5S_6K <<== [tr_T5S_6K <: tr_T5S_6S]
      # tr_T5S_6T/内向翻译诀(T;S)
      # tr_T5S_6S/自助翻译诀(S;T)
    *翻译期过渡性语言
      #深度依赖其他语言或其他翻译器
      #翻译过程递降调用深度不做限制，可能整个翻译链都被唤醒，生成许多中间文件
  ===
  *翻译过程相关语言:
    [source{translator} :: host_language ==> source_language --> target_language]
    [tr_T5S_6R :: R ==> S --> T]
    [翻译诀 :: 宿主语言 ==> 源语言 --> 目标语言]
    [囷语巛圙语牜囥语 :: 囥语 ==> 圙语 --> 囷语]
    R-囥语/宿主语言匕翻译/代码语言匕翻译
      #host_language
      # 由于『H』已被使用:H-辅助性高层语言
      #     这里使用『R』:runable/近似于『P』
      # ???xxx这里使用『N』:近似于『M/W/Z/H』
      # ???xxx这里使用『U』:近似于『V/W』
    S-圙语/源语言匕翻译/输入语言匕翻译
      #source_language
    T-囷语/目标语言匕翻译/输出语言匕翻译
      #target_language
    K-囝圙语/子语言纟源语言匕翻译
      #kernel#subset_source_language


囝:jian,nan>jiǎn,nān
囡:nan>nān
xxx圄语=>圃语->圂语
囥语=>圙语->囷语
  囥kang4藏#?谐音:炕=>地基/背景
  圙lve4草场#?谐音:略=>表达简洁#?望文:八面=>面向用户
  囷qun1谷仓#?:字义:仓库=>汇编
:囥kàng
/藏。
圙:lve>lüè
:圐kū
/〔圐圙〕蒙古语“库伦”的旧译，指围起来的草场，多用于村镇名。
:囷qūn
/古代一种圆形谷仓：“（大荒）而囷鹿（方形仓）空虚。”
/样子像囷仓的事物：“……少宝之山，百草木成囷。”
/积聚；聚拢。



[[[
[:类型纟常规文件]:here
[:翻译领域冫对象类型]:here
=====================
类型纟常规文件:
  File file_format content_type
  [X_6Z :: File Z X]
  *类型纟源文件:
    Script file_format input_type output_type
      === File file_format (input_type -> output_type)
    [X5Y_6Z :: Script Z Y X]
      #Script:装载前的存储形式
=====================
类型纟机器:
  Machine native_machine_language
  [虚拟机 <: 机器]
  [自然界 <: 机器]
  若将『机器』当作『拟程序』，而『拟程序』由以『机器』作为『首参数』，则 类型出现递归(类似self.method(self,*args))
  为避免麻烦，现取消:『机器<:拟程序』
    『机器』只是个不透明数据
  ######################
  class IsMachine mc where
      type NativeMachineLanguage mc :: *
        #=> MkMachine
      type LoadedData4M mc :: * -> *
        #=> load/call/dump
      load4M :: forall dat . File (NativeMachineLanguage mc) dat -> LoadedData4M mc dat
      call4M :: forall i o . LoadedData4M mc (i->o) -> LoadedData4M mc i -> LoadedData4M mc o
      dump4M :: forall fmt dat . mc -> LoadedData4M mc (File fmt dat) -> File fmt dat
        #=> dump_999
        #deprecate:dump :: forall fmt . mc -> LoadedData (NativeMachineLanguage mc) (File fmt dat) -> File fmt dat
  datatype Machine nml where
      MkMachine :: IsMachine mc => mc -> Machine (NativeMachineLanguage mc)
  datatype LoadedData native_machine_language data_type :: *
  datatype File file_format data_type :: *
  load_999 :: forall nml dat . File nml dat -> LoadedData nml dat
  call_999 :: forall nml i o . LoadedData nml (i->o) -> LoadedData nml i -> LoadedData nml o
  dump_999 :: forall nml fmt dat . Machine nml -> LoadedData nml (File fmt dat) -> File fmt dat
e ../../python3_src/haskell_src/Framework4Translation.hs
  ######################
  [machineR_999 :: Machine R]
  [the_machine999_999 :: Machine NATURE]
      #唯一
      !! [自然界 <: 机器]
  #run:
  [machineZ_999 === exec_999 runZ_9R machineR_999]
  #load/dump/call:
  [X_9R === load_999 X_6R]
  [X_9R === call_999 X5Y_9R Y_9R]
  [X_6Z === dump_999 X_6Z_9R]
  ==>>:
  [load_999 :: forall nml dat . File nml dat -> LoadedData nml dat]
  [call_999 :: forall nml i o . LoadedData nml (i->o) -> LoadedData nml i -> LoadedData nml o]
  [dump_999 :: forall nml fmt dat . Machine nml -> LoadedData nml (File fmt dat) -> File fmt dat]
    # load_999,call_999 构造程序
    # dump_999 运行程序于指定机器上，得到『可交换数据』
    #
    # [(File Z X) 是 可交换数据]
    # [(File Z X) 是 已序列化的数据]

  [exec_999 X_9R :: Machine R -> X]
  [exec_999 X5Y_9R :: Machine R -> (Y -> X)]
  [exec_999 X_999 :: Machine NATURE -> X]
  [exec_999 X5Y_999 :: Machine NATURE -> (Y -> X)]
  [X === X_9R machineR_999]
  [X === X_999 the_machine999_999]
  #load:
  [X_9R === load_999 machineR_999 X_6R]
  [X === load_and_go_999 machineR_999 X_6R]
        #机器内禀方法:
        [load_999 machineR_999 === machineR_999.load]
        [load_and_go_999 machineR_999 === machineR_999.load_and_go]
  [load_999 :: forall a b . Machine a -> File a b -> Machine a -> b]
  [load_and_go_999 :: forall a b . Machine a -> File a b -> b]
  <<==:
  !! [X_6Z :: File Z X]
  [X_6R :: File R X]
  !! [X_9R :: Machine R -> X]
  !! [X_9R === load_999 machineR_999 X_6R]
  [load_999 :: Machine R -> File R X -> Machine R -> X]
  [load_999 :: forall a b . Machine a -> File a b -> Machine a -> b]

  !! [X === load_and_go_999 machineR_999 X_6R]
  [load_and_go_999 :: Machine R -> File R X -> X]
  [load_and_go_999 :: forall a b . Machine a -> File a b -> b]

  !! [X === X_9R machineR_999]
  [load_and_go_999 machineR_999 X_6R === X === X_9R machineR_999 === load_999 machineR_999 X_6R machineR_999]
  [load_and_go_999 === \ machineR_999 X_6R -> load_999 machineR_999 X_6R machineR_999]
=====================
类型纟拟数据:
  LoadedData host_machine_code data_type
  [X_9R :: LoadedData R X]
    #装载后的内存数据表达形式
  !! [X_9R :: Machine R -> X]
=====================
类型纟拟程序:
  GluedAlgo host_machine_code input_type output_type
  [X5Y_9Z :: GluedAlgo Z Y X]
      #GluedAlgo:装载后的内存脚本串联形式# 通过(<<<)串联
      [Arrow (GluedAlgo R)]
  *类型纟机器:
    Machine native_machine_language
      === forall i o . Machine NATURE -> GluedAlgo native_machine_language i o -> (i -> o)
      === forall i o . GluedAlgo NATURE (GluedAlgo native_machine_language i o) (i -> o)
  ==>>:
  GluedAlgo host_machine_code input_type output_type
    === Machine host_machine_code -> input_type -> output_type
    === (forall i o . GluedAlgo NATURE (GluedAlgo host_machine_code i o) (i -> o)) -> input_type -> output_type
    ...递归...
  [the_machine999_999 :: Machine NATURE]
  [machineR_999 :: Machine R]
  [machineR_999 :: forall i o . GluedAlgo NATURE (GluedAlgo R i o) (i -> o)]
  GluedAlgo Z Y X]
=====================
翻译领域冫对象类型:
  # [:必要性纟区分冫程序丷代码]:goto
  # => 程序不是文件，没有『文件格式』
  ===================
  * 拟程序#非文件=>没有:后缀扩展名
    *伪程序:[aaa_999 :: i -> o]
      *伪程序:[X5Y_999 :: Y -> X]
          『_999』表示运行于『自然界』这台机器上
    *程序:[aaa_9host :: GluedAlgo host i o]
      *程序:[X5Y_9R :: GluedAlgo R Y X]
          『_9R』表示运行于『机器语言R』的机器上
    =================
    按具现分类:
      ===============
      * 伪程序#非文件
        aaa_999
        伪程序:[aaa_999 :: i -> o]
          *伪程序:[X5Y_999 :: Y -> X]
        =============
        * 人肉程序
          manually_aaa_999
          #固化所有类型，因为是人工操作，所有只被调用一次,不可能是泛型
          ===========
          * 某些源代码操作:
            [manually_X5Y_Y5I_catZ_999 :: tr_X5Y_6Z -> tr_Y5I_6Z -> tr_X5I_6Z]
              串联源代码
              由于 库包模块 多版本 或 相似库，导出名 极易发生碰撞，串联源代码并非易事
            [manually_X5Y_Z_back_end_dialectA_999 :: {similar(X,A)} => tr_X5Y_6Z -> tr_A5Y_6Z]
              移植到新平台
              ???porting???
            [manually_X5Y_Z_front_end_dialectA_999 :: {similar(Y,A)} => tr_X5Y_6Z -> tr_X5A_6Z]
              比如:词法分析阶段不同#改变关键词#不同皮肤
          ===========
        =============
        * 机器
          machineR_999
            #machine<R>_999 # R是 机器语言
          [machineR_999 :: forall i o . GluedAlgo R i o -> (i -> o)]
          [runZ_9R :: forall i o . GluedAlgo R (GluedAlgo Z i o) (i -> o)]
          <<==:
          [machineZ_999 === machineR_999 runZ_9R]
            #运行虚拟机
          [machineR_999 X5Y_9R :: Y -> X]
            #运行程序
          !! [X5Y_9R :: GluedAlgo R Y X]
          [machineR_999 :: GluedAlgo R Y X -> (Y -> X)]
          [machineR_999 :: forall i o . GluedAlgo R i o -> (i -> o)]
          [machineZ_999 :: forall i o . GluedAlgo Z i o -> (i -> o)]
          !! [machineZ_999 === machineR_999 runZ_9R]
          # [(Y->X):=(GluedAlgo Z i o -> (i -> o))]
          # i.e. [Y:=(GluedAlgo Z i o)][X:=(i -> o)]
          [runZ_9R :: GluedAlgo R (GluedAlgo Z i o) (i -> o)]
          [runZ_9R :: forall i o . GluedAlgo R (GluedAlgo Z i o) (i -> o)]
      ===============
      * 装载器
        load_999
        #机器内禀方法:
        [load_999 machineR_999 === machineR_999.load]
        [aaa_9R === load_999 machineR_999 aaa_6R]
        [load_9R :: forall i o . GluedAlgo R (Script R i o) (GluedAlgo R i o)]
        <<==:
        !! [aaa_9R === load_999 machineR_999 aaa_6R]
        [X5Y_9Z === load_999 machineZ_999 X5Y_6Z]
        !! [X5Y_9R :: GluedAlgo R Y X]
        [X5Y_9Z :: GluedAlgo Z Y X]
        !! [X5Y_6Z :: Script Z Y X]
        [load_999 machineZ_999 :: Script Z Y X -> GluedAlgo Z Y X]
        [load_999 machineZ_999 :: forall i o . Script Z i o -> GluedAlgo Z i o]
        !! [machineZ_999 :: forall i o . GluedAlgo Z i o -> (i -> o)]
        # [(i->o):=(Script Z i o -> GluedAlgo Z i o)]
        [load_9Z :: forall i o . GluedAlgo Z (Script Z i o) (GluedAlgo Z i o)]
        [load_9R :: forall i o . GluedAlgo R (Script R i o) (GluedAlgo R i o)]
      ===============
      * 装载立即执行器
        load_and_go_9R
        [machineR_999 aaa_9R === machineR_999 load_and_go_9R aaa_6R]
        <<==:
        !! [machineR_999 aaa_9R === machineR_999 load_and_go_9R aaa_6R]
        !! [aaa_9R === machineR_999 load_9R aaa_6R]
        [machineR_999 (machineR_999 load_9R aaa_6R) === machineR_999 load_and_go_9R aaa_6R]
        [load_and_go_9R === (machineR_999 <<< machineR_999 load_9R)]
        =============
      ===============
      * 程序#非文件##可能是:命令行表达式#xxx可执行文件xxx
        *命令行表达式#非文件#(<<<)串联
        *装载后的内存脚本串联形式#『machineR_999 X5Y_9R』『machineR_999 runX_9R』
        #???*可执行文件/脚本文件#不能直接运行,需得使用装载器:『machineR_999 (machineR_999 load_9R 脚本_6R)』
    *程序:[aaa_9host :: GluedAlgo host i o]
      *程序:[X5Y_9R :: GluedAlgo R Y X]
      ===============
    =================
    按功能分类:
      ===============
      * 翻译器translator
        [tr_X5Y_9R==tr_<X,Y> :: forall typ . File Y typ -> File X typ]
        [aaa_6X === tr_X5Y_9R aaa_6Y]
        =============
        * 翻译器纟编程语言
          [tr_X5Y_9R==tr_<X,Y> :: forall i o . Script Y i o -> Script X i o]
          [o5i_6X === tr_X5Y_9R o5i_6Y]
          ===========
          分类冫翻译器纟编程语言
          分类:(W:限制太大=>)本节无意义:只是传统命名所限，故有此节
            tr_X5Y_9R.W #强调:宿主语言W
              *tr_X5X_9R.W
              *tr_X5W_9R.W
              *tr_W5Y_9R.W
              *tr_W5W_9R.W
          实际有意义的:见下面:翻译诀
          ... 移至『分类冫翻译诀纟编程语言』
          ===========
          + 编译器compiler
            强调输出是:机器语言/虚拟机耂字节码
          ===========
          #xxx:+ 编译器耂生成器compiler_generator
          + 编译诀耂生成器compiler_generator
            #生成的到底是啥？
            #     生成:常规文件
            #     可能是:可执行文件/翻译器
            #     也可能是:源代码文件/翻译诀
            #     但既然是『文件』，都可视为『翻译诀』
          ===========
        =============
      ===============
      * 解释器interpreter
        [runZ_9R==run<Z> :: File Z typ -> typ]
        #???:[aaa === runZ_9R aaa_6Z]
        #     aaa可能超出当前许可的『拟程序』命名范围
        =============
        * 解释器纟翻译
          [runZ_9R==run<Z> :: Script Z i o -> (i->o)]
          [tr_X5Y_9R === runZ_9R tr_X5Y_6Z]
        =============
        * 解释器纟解释
          #见下面:解释诀/runX_6Z
          [runZ_9R :: forall fmt typ . (Script Z (File fmt typ) typ) -> (File fmt typ -> typ)]
          [runX_9R === runZ_9R runX_6Z]
          <<==:
          !! [runZ_9R==run<Z> :: File Z typ -> typ]
          [runX_9R :: File X typ -> typ]
          !! [runX_9R === runZ_9R runX_6Z]
          [runZ_9R :: File Z (File X typ -> typ) -> (File X typ -> typ)]
          [runX_6Z :: File Z (File X typ -> typ)]
          [runX_6Z :: forall typ . Script Z (File X typ) typ]
          [runZ_9R :: forall fmt typ . (Script Z (File fmt typ) typ) -> (File fmt typ -> typ)]
        =============
        * 仿真器emulator
          * 虚拟机VM==virtual_machine==abstract_machine
        =============
      ===============
    =================
  ===================
  * 常规文件
    [aaa_6Z :: File Z typ]
    =================
    * 源代码文件
      源代码文件:[o5i_6Z :: Script Z i o]
      ===============
      * 解释诀
        runX_6Z#解释诀(Z;X)
        # <==> 源代码纟解释器
        # <==> 源代码纟虚拟机
        解释诀:[runX_6Z :: forall typ . Script Z (File X typ) typ]
            # !! 见上面:解释器纟解释
            <<==:
            !! [runZ_9R==run<Z> :: File Z typ -> typ]
            [runX_9R :: File X typ -> typ]
            !! 源代码文件:[o5i_6Z :: Script Z i o]
            [runX_6Z :: Script Z (File X typ) typ]
        [runX_9R === runZ_9R runX_6Z]
      ===============
      * 翻译诀
        tr_X5Y_6Z#翻译诀(Z;Y,X)
        翻译诀:[tr_X5Y_6Z :: forall typ . Script Z (File Y typ) (File X typ)]
          !! 翻译器: [tr_X5Y_9R==tr_<X,Y> :: forall typ . File Y typ -> File X typ]
        tr_X5Y_9R
        =============
        *翻译诀纟编程语言
          翻译诀纟编程语言:[tr_X5Y_6Z :: forall i o . Script Z (Script Y i o) (Script X i o)]
            !! 翻译器纟编程语言: [tr_X5Y_9R==tr_<X,Y> :: forall i o . Script Y i o -> Script X i o]
          ===========
          分类冫翻译诀纟编程语言
          tr_X5Y_6Z#翻译诀(Z;Y,X)
            *tr_X5X_6Z#恒等翻译诀(;X)#无『Z』
            *tr_X5Z_6Z#自助翻译诀(Z;X)
            *tr_Z5Y_6Z#内向翻译诀(Z;Y)
            *tr_Z5Z_6Z#恒等翻译诀(;Z)
          ===========
          按输入格式分类:
          * 他助翻译诀#他助翻译器
            tr_X5Y_6Z{Y=!=Z}
              *tr_X5Y_6Z{X=!=Y=!=Z=!=X}
              *tr_Z5Y_6Z{Y=!=Z}
              *tr_X5X_6Z{X=!=Z}
          * 自助翻译诀#自助翻译器self_translating_translator#<<==self_compiling_compiler
            tr_X5Z_6Z
              *tr_Z5Z_6Z
              *tr_X5Z_6Z{X=!=Z}
          ===========
          按输出格式分类:
          * 内向翻译诀#内向翻译器self_resident_translator
            tr_Z5Y_6Z
              *tr_Z5Z_6Z
              *tr_Z5Y_6Z{Y=!=Z}
          * 外向翻译诀#外向翻译器==交叉翻译器cross_translator
            tr_X5Y_6Z{X=!=Z}
              *tr_X5Y_6Z{X=!=Y=!=Z=!=X}
              *tr_X5X_6Z{X=!=Z}
              *tr_X5Z_6Z{X=!=Z}
          ===========
          某些特殊小类:子语言关系
          * 自举翻译诀#自举翻译器bootstrapping_translator
            tr_X5Y_6Z{[Z<<:Y][not$ Y<:X]}
              *tr_Z5Y_6Z{Z<<:Y}
              *tr_X5Y_6Z{[X=!=Z<<:Y][not$ Y<:X]}
                *tr_X5Y_6Z{[Z<<:Y][X:<>:Y]}
                *tr_X5Y_6Z{[Z<<:Y][Z=!=X<<:Y]}
          * 降型翻译诀#降型翻译器degrade_translator
            tr_X5Y_6Z{X<<:Y}
              *tr_X5Y_6Z{X<<:Y=!=Z=!=X}
              *tr_Z5Y_6Z{Z<<:Y}
              *tr_X5Z_6Z{X<<:Z}
          * 无为翻译诀#无为翻译器nop_translator
            tr_X5Y_6Z{Y<:X}
            * 恒等翻译诀#恒等翻译器echo_translator
              #定义存在:恒等翻译器(X)/tr_X5X_9R
              tr_X5X_6Z
                *tr_Z5Z_6Z
                *tr_X5X_6Z{X=!=Z}
            * 升型翻译诀#升型翻译器upgrade_translator
              tr_X5Y_6Z{Y<<:X}
                *tr_X5Y_6Z{Y<<:X=!=Z=!=Y}
                *tr_Z5Y_6Z{Y<<:Z}
                *tr_X5Z_6Z{Z<<:X}
              #vs: 降型翻译诀#降型翻译器degrade_translator
          ===========
          #『5』怎么来的?这是什么整数序列？#序列元素等价分类
          细分小类:5
          *tr_X5Y_6Z{X=!=Y=!=Z=!=X}
            他助翻译诀
            外向翻译诀
            *tr_X5Y_6Z{Y<<:X=!=Z=!=Y}
              升型翻译诀 # <:无为翻译诀
            *tr_X5Y_6Z{X<<:Y=!=Z=!=X}
              降型翻译诀
              *tr_X5Y_6Z{[Z<<:Y][Z=!=X<<:Y]}
                自举翻译诀
            *tr_X5Y_6Z{[Z<<:Y][X:<>:Y]}
              自举翻译诀
          *tr_Z5Y_6Z{Y=!=Z}
            他助翻译诀
            内向翻译诀
            *tr_Z5Y_6Z{Y<<:Z}
              升型翻译诀 # <:无为翻译诀
            *tr_Z5Y_6Z{Z<<:Y}
              降型翻译诀
              自举翻译诀
          *tr_X5Z_6Z{X=!=Z}
            自助翻译诀
            外向翻译诀
            *tr_X5Z_6Z{Z<<:X}
              升型翻译诀 # <:无为翻译诀
            *tr_X5Z_6Z{X<<:Z}
              降型翻译诀
          *tr_Z5Z_6Z
            自助翻译诀
            内向翻译诀
            恒等翻译诀 # <:无为翻译诀
          *tr_X5X_6Z{X=!=Z}
            他助翻译诀
            外向翻译诀
            恒等翻译诀 # <:无为翻译诀
          ===========
        =============
      ===============
    =================
  ===================
=====================
]]]

[[
=====================
[:def__portable_interpretive_compiler_kit]:here
=====================
#package:
[portable_interpretive_compiler_kit(V,P) =[def]= (tr_V5P_6P,tr_V5P_6V,runV_6P)]
#package4specific_machine:
[installer4portable_interpretive_compiler_kit(V,P,M) =[def]= (portable_interpretive_compiler_kit(V,P),runV_6M,tr_M5P_6P)]
  #安装时生成:tr_M5P_6M
  # !! [tr_M5P_6M占用空间远大于tr_M5P_6P]
[native_kit4portable_interpretive_compiler_kit(V,P,M) =[def]= (portable_interpretive_compiler_kit(V,P),runV_6M,tr_M5P_6M)]
  #目标机实际运行时使用的工具包
=====================
汉化:
!! [portable_interpretive_compiler_kit(V,P) === (tr_V5P_6P,tr_V5P_6V,runV_6P)]
[便携式解释型编译用工具包(V,P) === (自助翻译诀(P;V),内向翻译诀(V;P),解释诀(P;V))]
    # (自助翻译诀(P;V)/tr_V5P_6P,内向翻译诀(V;P)/tr_V5P_6V,解释诀(P;V)/runV_6P)
!! [installer4portable_interpretive_compiler_kit(V,P,M) === (portable_interpretive_compiler_kit(V,P),runV_6M,tr_M5P_6P)]
[安装包纟便携式解释型编译用工具包(V,P,M) === (便携式解释型编译用工具包(V,P),解释诀(M;V),自助翻译诀(P;M))]
    # (解释诀(M;V)/runV_6M,自助翻译诀(P;M)/tr_M5P_6P)

!! [native_kit4portable_interpretive_compiler_kit(V,P,M) === (portable_interpretive_compiler_kit(V,P),runV_6M,tr_M5P_6M)]
[本地包纟便携式解释型编译用工具包(V,P,M) === (便携式解释型编译用工具包(V,P),解释诀(M;V),内向翻译诀(M;P))]
    # (解释诀(M;V)/runV_6M,内向翻译诀(M;P)/tr_M5P_6M)

vs:
[便携式解释型编译用工具包(V,P) === (自助翻译诀(P;V),内向翻译诀(V;P),解释诀(P;V))]
[安装包纟便携式解释型编译用工具包(V,P,M) === (自助翻译诀(P;V),内向翻译诀(V;P),解释诀(P;V),解释诀(M;V),自助翻译诀(P;M))]
[本地包纟便携式解释型编译用工具包(V,P,M) === (自助翻译诀(P;V),内向翻译诀(V;P),解释诀(P;V),解释诀(M;V),内向翻译诀(M;P))]
=====================
vs:
  安装包-本地包:多了:自助翻译诀(P;M)
  本地包-安装包:多了:内向翻译诀(M;P)

=====================
使用情景:3个:
  *辅助起草冫便携式灬
  *打包生成冫安装包灬
  *安装生成冫本地包灬

=====================
*使用情景:辅助起草冫便携式灬
  于施主机上起草portable_interpretive_compiler_kit
  于施主机上使用早已存在的P-解释诀runP_6W或P-内向翻译诀tr_W5P_6W:生成P-内向翻译诀tr_V5P_6V
  #runW_9R强调:施主机_6W 与 目标机_6M之间的区分
  [(tr_V5P_6P,runV_6P,(runP_6W|tr_W5P_6W),runW_9R) -> portable_interpretive_compiler_kit(V,P)]

  <<==:
  [(tr_W5P_6W,runW_9R) -> runP_9R]
      [tr_W5P_9R := runW_9R tr_W5P_6W]
      [runP_9R := runW_9R <<< tr_W5P_9R]
      归结到下面
  [(runP_6W,runW_9R) -> runP_9R]
      [runP_9R := runW_9R runP_6W]
      归结到下面
  ##
  [(runV_6P,runP_9R) -> runV_9R]
      [runV_9R := runP_9R runV_6P]
  [(tr_V5P_6P,runP_9R) -> (tr_V5P_9R,tr_V5P_6V)]
      [tr_V5P_9R := runP_9R tr_V5P_6P]
      [tr_V5P_6V := tr_V5P_9R tr_V5P_6P]
  [(tr_V5P_6P,runV_6P,(runP_6W|tr_W5P_6W),runW_9R) -> (runP_9R,runV_9R,tr_V5P_9R,tr_V5P_6V)]

  [(tr_V5P_6P,runV_6P,(runP_6W|tr_W5P_6W),runW_9R) -> (tr_V5P_6P,tr_V5P_6V,runV_6P)]
  [(tr_V5P_6P,runV_6P,(runP_6W|tr_W5P_6W),runW_9R) -> portable_interpretive_compiler_kit(V,P)]

=====================
*使用情景:打包生成冫安装包灬
  于施主机上打包installer4portable_interpretive_compiler_kit
  已有:portable_interpretive_compiler_kit
  已有:(runV_6W|tr_W5P_6W) #(V-虚拟机|P-编译器)
  需要前置条件:{similar(V,M)}
  需要人工参与:manually_V5P_P_back_end_dialectM_999
  生成: (runV_6M,tr_M5P_6P)
  TODO
  ==>>:
  [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,(runV_6W|tr_W5P_6W),runW_9R) -> (runV_6M,tr_M5P_6P)]
  <<==:
  [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,(runV_6W|tr_W5P_6W),runW_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M,runV_6M)]
  <<==:
  [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,(runV_6W|tr_W5P_6W),runW_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M)]
      !! 见下面:冗长过程
  [(tr_V5P_6V,runV_6P,runV_9R,tr_M5P_6P) -> runV_6M]
      [tr_M5P_6V := runV_9R tr_V5P_6V tr_M5P_6P]
      [runV_6M := runV_9R tr_M5P_6V runV_6P]
  [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,(runV_6W|tr_W5P_6W),runW_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M,runV_6M)]
  <<==:
  ### 于施主机上使用(portable_interpretive_compiler_kit+tr_W5P_6W):
  ### #交叉编译:移植翻译器
  ### # 交叉翻译器:只是暂态出现???xxx施主机.外向翻译器:生成:目标机.内向翻译诀tr_M5P_6M
  ### 施主机.(可移植性工具包+内向翻译诀tr_W5P_6W):生成:目标机.内向翻译诀tr_M5P_6M
  ### [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,tr_W5P_6W,runW_9R) -> tr_M5P_6M]
  ###     #有P-内向翻译诀tr_W5P_6W #相对于:tr_M5P_6M

  <<==:
  [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,(runV_6W|tr_W5P_6W),runW_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M)]
  <<==:
  [(tr_V5P_6P,tr_V5P_6V,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,((runV_6P,runP_6W,runW_9R)|(runV_6P,runP_9R)|(runV_6P,tr_W5P_6W,runW_9R)|(runV_6W,runW_9R)|(runV_9R))) -> (runV_9R,tr_M5P_6P,tr_M5P_6M)]
  <<==:
  [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,runP_6W,runW_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M)]
      #有P-解释诀runP_6W
      [runP_9R := runW_9R runP_6W]
      归结到下面
  [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,runP_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M)]
      #有P-解释器runP_9R
      [runV_9R := runP_9R runV_6P]
      归结到下面
  [(tr_V5P_6P,tr_V5P_6V,runV_6P,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,tr_W5P_6W,runW_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M)]
      #有P-内向翻译诀tr_W5P_6W #相对于:tr_M5P_6M
      [runV_6W := runW_9R tr_W5P_6W runV_6P]
      归结到下面
  [(tr_V5P_6P,tr_V5P_6V,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,runV_6W,runW_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M)]
      #有V-解释诀runV_6W
      [runV_9R := runW_9R runV_6W]
      归结到下面
  [(tr_V5P_6P,tr_V5P_6V,{similar(V,M)},manually_V5P_P_back_end_dialectM_999,runV_9R) -> (runV_9R,tr_M5P_6P,tr_M5P_6M)]
      #有V-解释器runV_9R
      [tr_M5P_6P := manually_V5P_P_back_end_dialectM_999({similar(V,M)},tr_V5P_6P)]
      [tr_V5P_9R := runV_9R tr_V5P_6V]
      [tr_M5P_6V := tr_V5P_9R tr_M5P_6P]
      [tr_M5P_9R := runV_9R tr_M5P_6V]
      [tr_M5P_6M := tr_M5P_9R tr_M5P_6P]
      ######################
      [runV_9R
      * === runP_9R runV_6P === runW_9R runP_6W runV_6P
      * === runW_9R runV_6W
      ]
      [tr_M5P_6M
      === tr_M5P_9R tr_M5P_6P
      === runV_9R tr_M5P_6V tr_M5P_6P
      === runV_9R (tr_V5P_9R tr_M5P_6P) tr_M5P_6P
      === runV_9R (runV_9R tr_V5P_6V tr_M5P_6P) tr_M5P_6P
      === (\ _0 _1 _2 -> _1 (_1 _0 _2) _2) tr_V5P_6V runV_9R tr_M5P_6P
      let [f_1_102_2 := (\ _0 _1 _2 -> _1 (_1 _0 _2) _2)]
      === f_1_102_2 tr_V5P_6V runV_9R tr_M5P_6P
      * === f_1_102_2 tr_V5P_6V (runW_9R runP_6W runV_6P) manually_V5P_P_back_end_dialectM_999({similar(V,M)},tr_V5P_6P)
      * === f_1_102_2 tr_V5P_6V (runW_9R runV_6W) manually_V5P_P_back_end_dialectM_999({similar(V,M)},tr_V5P_6P)
      ]
=====================
*使用情景:安装生成冫本地包灬
  于目标机上安装native_kit4portable_interpretive_compiler_kit
  已从施主机下载:installer4portable_interpretive_compiler_kit

TODO
*使用情景:于目标机上使用(portable_interpretive_compiler_kit,tr_M5P_6M):
  #从施主机上下载:目标机.内向翻译诀tr_M5P_6M
  #     见下面:施主机生成tr_M5P_6M
  目标机.(可移植性工具包+内向翻译诀tr_M5P_6M):生成:目标机.(V-解释诀runV_6M,P/V-翻译诀tr_V5P_6M)
  [(tr_V5P_6P,runV_6P,tr_M5P_6M,runM_9R) -> (tr_V5P_6M,runV_6M)]
      [tr_V5P_6M := runM_9R tr_M5P_6M tr_V5P_6P]
      [runV_6M := runM_9R tr_M5P_6M runV_6P]
=====================
=====================
<<==:
起先:copy from:
  view ../lots/NOTE/compiler/Compilers and Compiler Generators(1996-2000)(Terry).txt
复制之后:
更改:命名风格...X5Y_Z-->tr_X5Y_6Z
更改:命名风格...program_X5Y-->tr_X5Y_9R
修改...P-->P
修改...宿主机-->施主机
修改...强调:施主机_6W 与 目标机_6M之间的区分
...大改...面目全非...
=====================
]]





































































































[[
dialect方言
===
dialect
英 /'daɪəlekt/
美 /'daɪə'lɛkt/
已查3次
新世纪英汉科技大词典
方言
21世纪英汉汉英双向词典
`14`《源自希腊文“当地的话”的意思》
<<名词>>
1 方言; 地方话
the Scottish ~
苏格兰方言
a poem written in ~
用方言写的诗
2 (某职业、阶层的) 专业用语
<<形容词>>
方言的
a ~ poem
方言诗
在线英汉－汉英词典
n. 方言，土话；同源语；行话；个人用语特征adj. 方言的
]]
[[
情景，场景，场合，场面
scene场景,布景,景象,情势,情况,情景
circumstances情况,境遇,境况
scenarios脚本,情节
===
场合:
新世纪汉英科技大词典
occasion
situation
instance
===
===
scenario
英 /sɪ'nɑːrɪəʊ/
美 /sə'nærɪo/
新世纪英汉科技大词典
概要
剧情
21世纪英汉汉英双向词典
`14`《源自义大利语“场面”的意思》
<<可数名词>>
(pl. ~s)
1 a. (电影的) 剧本,脚本
b. (戏剧、歌剧等的) 剧情说明书
2 (计画、预定事项等的) 纲要,概要,草稿
在线英汉－汉英词典
n. 情节；剧本；方案
===
]]
[[
过渡
intermediate
transient
transitive
transitional
transition
transit
===
新世纪汉英科技大词典
过渡程序库
transient program library (TPLIB)
过渡层地下水
intermediate groundwater
===
transitional
英 /træn'ziʃənəl/
美 /træn'ziʃənəl/
新世纪英汉科技大词典
瞬变
过渡的
21世纪英汉汉英双向词典
`14`《transition 的形容词》
<<形容词>>
转变的; 过渡的; 过渡时期的
计算机词汇
过渡期的
在线英汉－汉英词典
adj. 变化的；过渡期的；过渡性的
===
transient
英 /'trænzɪənt/
美 /ˈtrænʃənt/
新世纪英汉科技大词典
暂时
暂时性的
瞬变
瞬变的
瞬变值
瞬时的
瞬态
瞬态声
过渡的
过渡过程
21世纪英汉汉英双向词典
<<形容词>>
1 a. 一时的,瞬间的,转瞬间的
(
→ momentary【同义字】)
a ~ smile
一瞬间的微笑
a ~ emotion
一时的感情
b. 短暂的,无常的
~ love
短暂的爱情
2 <旅馆住客、旅行者等> 逗留短暂的
a ~ visitor
短期住客 [观光客,参观者]
<<可数名词>>
((美))短期住客
<<副词>>
~.ly
在线英汉－汉英词典
adj. 短暂的n. 短期居留者；顺变电流
===
]]
[[
辅助
assist
auxiliary 辅助的,补充的,协助的,备用的,预备的
  次要
  从属
    auxiliary coins辅币
    auxiliary unit辅助单位

===
boost:助推器,推进
===
]]
[[
toolkit n. 工具包，工具箱
kit成套组件
utilities n. 公用工具/用具
utility adj. 实用的/公用的/通用的 n. (utilities)
===
kit
新世纪英汉科技大词典
成套
成套部件
成套工具
成套零件
成套组件
整套
整套工具
配套零件
配套元件
工具箱
一组仪器
木桶
背囊
===
utilities
英 /jʊ'tɪləti/
美 /jʊ'tɪləti/
新世纪英汉科技大词典
公用工程
计算机词汇
用具
在线英汉－汉英词典
n. 公用事业；公用工程
===
utility
英 /juː'tɪlɪtɪ/
美 /ju'tɪləti/
新世纪英汉科技大词典
公用事业
公用事业设备
应用
有用
实用
效用
21世纪英汉汉英双向词典
`14`《源自拉丁文“有益的”的意思》
<<名词>>
1 a. (U)效用,有用,有益,实利,功利 (性)
marginal ~
‘经济’边际效用
of no ~
无用的,无益的
b. (C) [常utilities] 有用的东西
2 (C) [常utilities] 公用事业[企业] (团体)
((铁路、公共汽车、瓦斯、电力、自来水事业等))

→ public utility.
<<形容词>>
1 实用的,实用本位的<商品>
~ clothes [furniture]
实用的服装 [家具]
2 有各种用途的,可用于多方面的
a ~ truck
万能卡车
3 任何位置都能胜任的,万能的 <棒球选手等>
a ~ infielder
到处都能守备的内野手
计算机词汇
实用
===
]]
[[
===
]]
[[
===
]]
[[
===
]]





[[
#obsolete
#deprecate
===
view ../lots/NOTE/compiler/Compilers and Compiler Generators(1996-2000)(Terry).txt
===
[:def__portable_interpretive_compiler_kit]:goto
[:文件后缀扩展名与翻译器命名规范]:goto
[:分类冫文件名模式]:goto
[:翻译框架设计冫总结集中处]:goto
  [:翻译框架设计冫总结集中处冫统计特殊文件名模式]:goto
  [:翻译框架设计]:goto
    [:翻译框架设计冫泛结论]:goto
    [:翻译框架设计冫特化结论]:goto
    [:翻译框架设计冫泛结论牜串联冫辅助语言]:goto
    [:翻译框架设计冫泛结论牜串联冫目标语言]:goto
    [:翻译框架设计冫特化结论牜串联冫目标语言]:goto
        TODO
  [:翻译框架设计冫封装完整性]:goto
  [:翻译框架设计冫主要目标]:goto
    [:关系冫自举丶自译出口丶自驻进口]:goto
    [:翻译框架设计冫最泛化形式]:goto
]]
