e others/数学/编程/URL-safe.txt

urlsafe_ascii <- (letters | digits | '_.-~')
urlsafe_ascii <- regex'[0-9A-Za-z._~-]'
urlsafe_ascii = '-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~'
    = ''.join(sorted('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-._~'))



>>> import string as S
>>> S.printable.index(' ')
94
>>> S.printable[:94]
'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'




view ../../python3_src/seed/text/base64.py
    from base64 import urlsafe_b64encode, urlsafe_b64decode
    urlsafe=_mk_half_table('AZaz09--__==')


view /sdcard/0my_files/unzip/py_doc/python-3.12.4-docs-text/library/urllib.parse.txt
from urllib.parse import quote, quote_from_bytes
urllib.parse.quote(string, safe='/', encoding=None, errors=None)

   Replace special characters in *string* using the "%*xx*" escape.
   Letters, digits, and the characters "'_.-~'" are never quoted. By
   default, this function is intended for quoting the path section of
   a URL. The optional *safe* parameter specifies additional ASCII
   characters that should not be quoted --- its default value is
   "'/'".

   *string* may be either a "str" or a "bytes" object.

   Changed in version 3.7: Moved from **RFC 2396** to **RFC 3986** for
   quoting URL strings. "~" is now included in the set of unreserved
   characters.

   The optional *encoding* and *errors* parameters specify how to deal
   with non-ASCII characters, as accepted by the "str.encode()"
   method. *encoding* defaults to "'utf-8'". *errors* defaults to
   "'strict'", meaning unsupported characters raise a
   "UnicodeEncodeError". *encoding* and *errors* must not be supplied
   if *string* is a "bytes", or a "TypeError" is raised.

   Note that "quote(string, safe, encoding, errors)" is equivalent to
   "quote_from_bytes(string.encode(encoding, errors), safe)".

   Example: "quote('/El Niño/')" yields "'/El%20Ni%C3%B1o/'".

urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)

   Like "quote()", but also replace spaces with plus signs, as
   required for quoting HTML form values when building up a query
   string to go into a URL. Plus signs in the original string are
   escaped unless they are included in *safe*.  It also does not have
   *safe* default to "'/'".

   Example: "quote_plus('/El Niño/')" yields "'%2FEl+Ni%C3%B1o%2F'".


