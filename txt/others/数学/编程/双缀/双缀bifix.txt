
e others/数学/编程/双缀/双缀bifix.txt
本文件创建关注点:
  反双缀字串 生成

自相关:
  autocorrelation
  natural correlation
  self-correlation
关键词:
  bifix
  双缀
  pseudo_period
  伪周期
  拟周期
  nonoverlapping
  avoid.*substr
  反子串
  反双缀字串
  自相关
  auto.*correspond
  最长非空真子双缀


[[[
搜索结果-重点:
book:
    /sdcard/0my_files/book/math/pseudo_period_of_word/'Combinatorics of periods in strings(2003)(Eric Rivals)(Sven Rahmann).pdf'
    /sdcard/0my_files/book/math/pseudo_period_of_word/'Periods in strings(1981)(Leo J Guibas)(Andrew M Odlyzko).pdf'
    /sdcard/0my_files/book/math/pseudo_period_of_word/'Combinatorial Algorithms on Words(1985)(Guibas).djvu'


view ../lots/NOTE/pseudo_period_of_word/note4pseudo_period_of_word.txt
view others/book/pseudo_period_of_word.txt
view ../../txt_phone/txt/others/数学/编程/永恒代码/原貌字符串.txt

view script/bifix.py
view ../../python3_src/seed/seq_tools/avoid_substrs.py
view ../../python3_src/seed/seq_tools/avoid_substrs__multi_word_delimiter_token__layout_with_std_both_marker__solid_counting.py
view ../../python3_src/seed/iters/find.py
from seed.iters.find import mk_last_pos2len_longest_proper_bifix


===
grep 'bifix\|双缀\|pseudo.*period\|伪周期\|non.*overlapping\|avoid.*substr\|反子串\|自相关\|auto.*correspond' -r ../lots/NOTE/ -r ../../txt_phone/txt -r ../../python3_src/seed/ -r ../../python3_src/nn_ns/ -a -l
===
grep 'bifix\|双缀\|pseudo.*period\|伪周期\|non.*overlapping\|avoid.*substr\|反子串\|自相关\|auto.*correspond'   \
'../lots/NOTE/Elemnts Of The Theory Of Computation (2ed)(1998)(Harry Lewis)/Class P.txt'   \
'../lots/NOTE/Formal_Languages_and_Compilation(2ed)/chapter 2 Syntax.txt'   \
'../lots/NOTE/The Art of Multiprocessor Programming/Chapter 3 Concurrent Objects.txt'   \
'../lots/NOTE/abbr/word/function.txt'   \
'../lots/NOTE/html/html_header/HTTP_1.1  Header Field Definitions.htm'   \
'../lots/NOTE/pseudo_period_of_word/note4pseudo_period_of_word.txt'   \
'../../txt_phone/txt/TODO.txt'   \
'../../txt_phone/txt/TODO_www.txt'   \
'../../txt_phone/txt/0未整理复制粘贴文本/convolve卷积.txt'   \
'../../txt_phone/txt/others/book/pseudo_period_of_word.txt'   \
'../../txt_phone/txt/others/数学/Disjoint-Set.txt'   \
'../../txt_phone/txt/others/数学/involution自逆函数.txt'   \
'../../txt_phone/txt/others/数学/编程/enumerate Lyndon_word.txt'   \
'../../txt_phone/txt/others/数学/编程/永恒代码/原貌字符串.txt'   \
'../../txt_phone/txt/others/数学/整数分解/www-factorization.txt'   \
'../../txt_phone/txt/others/数学/algebra/group.txt'   \
'../../txt_phone/txt/script/enumerate_Lyndon_word.py'   \
'../../txt_phone/txt/script/加密囗短字符串.py'   \
'../../txt_phone/txt/script/delta4on_working4py_src/delta4on_working..git-status.20230910.txt'   \
'../../txt_phone/txt/script/hz/汉字笔顺码初步分解.py'   \
'../../txt_phone/txt/script/hz/patchs429685-ex6.txt/29685-ex6--diff--orgnl-vs-repeat-2.txt'   \
'../../txt_phone/txt/script/hz/header-of-29685-ex6.txt'   \
'../../txt_phone/txt/script/hz/header-of-29685-ex5.txt'   \
'../../txt_phone/txt/script/hz/header-of-29685-ex4.txt'   \
'../../txt_phone/txt/script/hz/汉字笔顺码初步分解_repeat.py'   \
'../../txt_phone/txt/script/hz/汉字笔顺码初步分解__save_20230423.py'   \
'../../txt_phone/txt/script/delta4txt/delta4txt..git-status.20230910.txt'   \
'../../txt_phone/txt/script/bifix.py'   \
'../../txt_phone/txt/TODO202309.txt'   \
'../../python3_src/seed/helper/auto_calc.py'   \
'../../python3_src/seed/io/fielded_line_utils.py'   \
'../../python3_src/seed/iters/find.py'   \
'../../python3_src/seed/iters/search_subseqs.py'   \
'../../python3_src/seed/recognize/cmdline/CmdlinePrefixParser-old-undone.py'   \
'../../python3_src/seed/seq_tools/escape_schemes/universal_single_point_escape_scheme__enable_raw_text__disable_recur.py'   \
'../../python3_src/seed/seq_tools/prefixes2tree.py'   \
'../../python3_src/seed/seq_tools/avoid_substrs.py'   \
'../../python3_src/seed/seq_tools/avoid_substrs__multi_word_delimiter_token__layout_with_std_both_marker__solid_counting.py'   \
'../../python3_src/nn_ns/Bijection/_UInts2UInt/UInts2UInt_by_avoid_substring.py'   \
'../../python3_src/nn_ns/CJK/CJK_common/化繁为简.py'   \
'../../python3_src/nn_ns/CJK/unicode/ucd_unihan/ucd/parse__Blocks_txt.py'   \
'../../python3_src/nn_ns/CJK/unicode/ucd_unihan/unihan/parse__kCompatibilityVariant8Unihan_IRGSources_txt.py'   \
'../../python3_src/nn_ns/CJK/unicode/ucd_unihan/unihan/parse__kIICore8Unihan_IRGSources_txt.py'   \
'../../python3_src/nn_ns/CJK/unicode/ucd_unihan/unihan/parse__kUnihanCore20208Unihan_DictionaryLikeData_txt.py'   \
'../../python3_src/nn_ns/app/register_xor.py'   \
'../../python3_src/nn_ns/internet/HTTP_1.1  Header Field Definitions.htm'  > /sdcard/0my_files/tmp/out4grep/grep.bifix.out.txt
===
view /sdcard/0my_files/tmp/out4grep/grep.bifix.out.txt
/bifix\|双缀\|pseudo.*period\|伪周期\|non.*overlapping\|avoid.*substr\|反子串\|自相关\|auto.*correspond
unavoidable repetitions
disjoint (non-overlapping)
拟周期
反双缀字串
最长非空真子双缀
/sdcard/0my_files/book/math/pseudo_period_of_word/'Combinatorics of periods in strings(2003)(Eric Rivals)(Sven Rahmann).pdf'
/sdcard/0my_files/book/math/pseudo_period_of_word/'Periods in strings(1981)(Leo J Guibas)(Andrew M Odlyzko).pdf'
/sdcard/0my_files/book/math/pseudo_period_of_word/'Combinatorial Algorithms on Words(1985)(Guibas).djvu'
../../python3_src/seed/iters/find.py
from seed.iters.find import mk_last_pos2len_longest_proper_bifix

e ../../python3_src/seed/seq_tools/avoid_substrs.py
e ../../python3_src/seed/seq_tools/avoid_substrs__multi_word_delimiter_token__layout_with_std_both_marker__solid_counting.py

e script/bifix.py
e ../lots/NOTE/pseudo_period_of_word/note4pseudo_period_of_word.txt
e others/book/pseudo_period_of_word.txt
../../txt_phone/txt/others/数学/编程/永恒代码/原貌字符串.txt

../../txt_phone/txt/others/数学/编程/enumerate Lyndon_word.txt
../../txt_phone/txt/script/enumerate_Lyndon_word.py
../../python3_src/seed/recognize/cmdline/CmdlinePrefixParser-old-undone.py
../../python3_src/seed/seq_tools/escape_schemes/universal_single_point_escape_scheme__enable_raw_text__disable_recur.py
../../python3_src/seed/seq_tools/prefixes2tree.py
from seed.seq_tools.avoid_substrs import strings2prefix_st_tree_ex_
../../python3_src/nn_ns/Bijection/_UInts2UInt/UInts2UInt_by_avoid_substring.py
    avoid_substring :: UInt -> [alphabet]

===
===
]]]




[[[
===
不自相关的字串 生成:
  特例:
    [^A]*A
    B+A+
    [^A]{n}.{0,n}A
      A
      BA
      B.A
      BB.A
      BB..A
      !! [只要不存在 长度不超过整串长度一半的 非空真子双缀，则不存在 非空真子双缀]
        !! [只要存在 非空真子双缀，则必然存在 长度不超过整串长度一半的 非空真子双缀]
          !! [只要存在 长度超过整串长度一半的 非空真子双缀，则必然存在 长度不超过整串长度一半的 非空真子双缀]
              !! [只要存在 长度超过整串长度一半的 非空真子双缀，则必然存在 长度更短的 非空真子双缀]
                !! [只要存在 长度超过整串长度一半的 非空真子双缀，则其分别作为前后缀必然发生交叠，交叠部分是其 非空真子双缀]
  [是不自相关字串囗(s)]:
      [A =!= s[0]]:
          [是不自相关字串囗([A]++s)]
          [是不自相关字串囗(s++[A])]
          字母表规模为2 ==>> B+A+
          即使s自相关，只要len(s)足够小/无关伪周期足够少，字母表足够大，则可以轻松 找到大量符合条件的A。
      [甲的任意非空前缀不是乙的后缀囗(s[:len(t)],t)]:
          ...

    给定s,生成t 满足: [甲的任意非空前缀不是乙的后缀囗(s,t)]
        t 可以从后往前生成:
            * [t := 空串] ok
            * @_t. [甲的任意非空前缀不是乙的后缀囗(s,_t)]:
              * [s[1:].startswith(_t)]:
                  @x. [x =!= s[0]] -> [t := [x]++_t] ok
              * [not$ s[1:].startswith(_t)]:
                  @x. [t := [x]++_t] ok
    生成s 满足: [是不自相关字串囗(s)]
        注意:
          先 无约束生成s[:-1]，是行不通的，比如:
            字母表{0,1}: 010 不能单步延展为 反双缀字串
                0100 --> 0
                0101 --> 01
            字母表{0,1}: 0110 不能在2步内延展为 反双缀字串
                0110.*0 --> 0
                #后缀必须是 1
                01101 --> 01
                0110.*01 --> 01
                #后缀必须是 11
                011011 --> 011
                0110.*011 --> 01
                #后缀必须是 111
                # 0110111 反双缀 ok #3步！
        注意:
          [^A]{n}.{0,n}A
            !! [只要不存在 长度不超过整串长度一半的 非空真子双缀，则不存在 非空真子双缀]
          即 至少s有一半是完全自由的
        生成算法一:
            先 生成一半s_(无约束)，再生成另一半_s，满足[甲的任意非空前缀不是乙的后缀囗(s_,_s)]
            最后碰运气测试 是否满足 [是不自相关字串囗(s_++_s)]
                只需考虑 s_的 拟周期移动
    给定前缀s, 生成 最短后缀t，满足: [是不自相关字串囗(s++t)]
        拟周期 数量上限？移动覆盖的延后 对 许可空间的遮蔽...(但是 延后部 有长有短)
    字母表扩张:类似utf8的编码，码元之间存在人为边界，随机 定位/搜索 无歧义
]]]
