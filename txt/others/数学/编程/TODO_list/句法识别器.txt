
句法识别器



feed投/进投
  进料/给料/进给/送料/输送/供料
  馈送/馈给
  饲喂/投食/喂养

token重符
  带数据符号/重符号
symbol轻符
  无数据符号/纯符号/轻符号
  terminal阳符
    终止符号/叶符号/纯右符号/实符号/阳符
  nonterminal阴符
    非终结符/可左符号/虚符号/阴符

识别器
  识别的状态变化:
    无我
    是我 | 非我
    全我 | 非全我
    成功结果 | 无果

  识别模式:
    #冻结是我模式:互斥分叉识别器 所必需
    #   无论如何，是我 yield
    #为了支持 短路特性，必须使用 feed+st模式 或 用yield获取token？
    #
    ##要求额外分析用结果<{(需方，供方，用途)}>
      #<谁需，谁供，为何要>
      #是我额外分析用结果，全我额外分析用结果
      #     为何有这一项/这些参数？见下面:无果
      #现将参数下放给个模式
    # 供需参数={(需方，供方，用途)}
    是我立即提前结束
    是我之后立尽快提前结束<供需参数>
      #不要计算结果
      #识别结果 状态:非我/是我
    全我立即提前结束<供需参数>
      #不要计算结果
      #识别结果 状态:非我/非全我/全我
    要求定制版结果<供需参数>
      #要计算结果
      #识别结果 状态:非我/非全我/无果/成功结果
      #

  右边界约束:
    =======只需:
    无回顾/无后瞻: 不需要 全局输入左边界
    统一 全我位置上限 与 读取区右边界位置
    只需:
      开始位置
      读取区右边界位置
    =======简化原因:
    编译 右边界 其实只有一种，即：读取区右边界位置
      勤性/惰性 循环 - 其实并无本质区别
        x* = ?=y x x*
        x* = ?!y
      如果 读取区右边界位置 与 全我位置上限 不一致，当下面的句子匹配x*就会失败/出现矛盾:
        x x $ y $$
          $ - 全我位置上限
          $$ - 读取区右边界位置
        这种失败是确实需要的吗？
    =======过时:
    #全局输入左边界
    #<=开始位置
    #<=是我位置
    #<=全我位置，非全我出错位置
    #<=全我位置上限
    #<=读取区右边界位置
    #<= 未知的全局输入右边界
    #开始位置<=非我出错位置<=读取区右边界位置
    #全我位置下限<=断言用全我位置下限<=断言用全我位置<=断言用全我位置上限<=全我位置上限
    #成功情形 有:全我位置下限<=全我位置==断言用全我位置
    #
    全我位置下限
      #可选 默认 开始位置
      # 允许越此界读取，但全我位置不得小于此界
    全我位置上限
      #可选 默认 读取区右边界位置
      # 允许越此界读取，但全我位置不得越此界
    读取区右边界位置
      #可选 默认 未知的全局输入右边界
      # 不得越此界读取
    断言用全我位置
      # 可选 默认 未知的全我位置
      # 全我位置与断言用全我位置比较，不同则出错
    断言用全我位置下限
      # 可选 默认 全我位置下限
      # 识别后断言，应比识别前约束更严格
      #     故而 >= 全我位置下限
    断言用全我位置上限
      # 可选 默认 全我位置上限
      # 识别后断言，应比识别前约束更严格
      #     故而 <= 全我位置上限

  识别输入
    识别模式，开始位置，右边界约束，清空输入缓存权限
      #清空输入缓存权限
      # 无我清空权限 - 最高权限
      # 是我清空权限 - 是我 之后 自动获得 无我清空权限
      # 毫无清空权限 - 最低权限
      # 如：
      #   父 是 序列识别器
      #     *父 有 无我清空权限 -> 子 有 无我清空权限
      #     *子是父的 诞我识别器，父 有 是我清空权限 -> 子 有 是我清空权限，
      #     *子不是父的 诞我识别器，父 有 是我清空权限 -> 子 有 毫无清空权限，
      #
      #
      #   父 是 优先分叉识别器
      #     *任何分支，父 有 是我清空权限/无我清空权限 -> 子 有 是我清空权限，
      #     *是最后分支，父 有 无我清空权限 -> 子 有 无我清空权限
      #
      #
      #   父 是 互斥分叉识别器
      #     与 优先分叉识别器 类似
      #     只是 子 的 是我 消息产生后，不经 父 批准，是无效的
      #     父 必允许 所有分支 至 是我/非我
      #     若只一个分支 是我，则批准，否则出错:语法本身的毛病，而非识别失败(句子不合句法)
      #
      #

  识别结果:
    #这里是 生肉/raw/unboxed/untagged
    #后续处理 熟化:分类标记所有结果#box
    #   以方便 过滤器 依 分类标签 处理数据
    #
    非我，出错位置，出错信息
    是我，是我位置，清空输入缓存请求，是我额外分析用结果
      若 清空输入缓存请求=是，则 将输入缓存清空至 是我位置

    非全我，出错位置，出错信息
    全我，全我位置，全我额外分析用结果

    无果，全我位置，出错信息
    成功结果，全我位置，定制版结果，全我额外分析用结果
    #
    #
      #全我 而 无果: 语法正确，语义出错，不是这里该处理的问题
      #实在有需要，识别函数 可在局部强行往 识别模式 添加 供需参数，通过 额外分析用结果 进行判断，如：HTML tag
      #这就是 是我额外分析用结果/全我额外分析用结果 的 由来
      #但为何 成功结果 还有 全我额外分析用结果？
      #     因为是成功结果给出的是『定制版』的结果，它可能是任何东西，而 额外分析用结果 是用于 分析 文本，有明确的功能，必须区分开。
      #
      #
  ===
  ===
  ===
  ===
  实现方式:
    由于 识别器之间可能出现循环引用
      并且 识别递归深度 可能极大
    故而 部分或所有 识别器引用 采用 纯数据表达
      ，即
        + 命名 识别器
        + 器名映射表 解释 识别器名 的 构造定义
        + 器构造名映射表 解释 识别器构造名 的 识别函数（含 定制版结果计算函数）
        + 总执行函数 及 各识别函数 采用 seed.iters.flatten_recur 扁平化约定，识别函数 yield 识别器名 或 识别器的构造定义，执行函数 负责回答 识别结果
  ===
  ！！！注意：组合多个识别器时，应当指定『诞我识别器』，即：谁产生『是我位置』！！！
  静态识别器
    必然成功静态识别器
      ===定长识别器（0）
    必然失败静态识别器（原由）

  节点名标记识别器（节点名，识别器）
    #用于 失败 时，收集 失败 路径 信息

  定长识别器（长度）
    #如不出错，则必须:全我位置 == 是我位置 == 开始位置+长度

  重置是我识别器（识别器）
    #另设 是我位置
    无我即是我识别器（识别器）
      #无我 即已是 是我
    全我方是我识别器（识别器）
      #全我 方才是 是我

  预判识别器（识别器）
    #如不出错，则必须:全我位置 == 是我位置 == 开始位置
    #前瞻/look_ahead
    #
    是我预判识别器（识别器）
      #若 输入识别器 是我，则 整个预判识别器 成功结果 零消耗
    全我预判识别器（识别器）
      #若 输入识别器 全我，则 整个预判识别器 成功结果 零消耗
      ===是我预判识别器（全我方是我识别器（识别器））

    # 与或非 之 非
    非我预判识别器（识别器）
      #若 输入识别器 非我，则 整个预判识别器 成功结果 零消耗
    非全我预判识别器（识别器）
      #若 输入识别器 非全我，则 整个预判识别器 成功结果 零消耗
      ===非我预判识别器（全我方是我识别器（识别器））

  重叠识别器（诞我识别器/定界识别器，追加的识别器+）
    # 与或非 之 与
    # 因为是『与』，所以这是必须的
    #   其他 设限/定界 再说吧！
    #追加的识别器 附带约束:全我位置上限
    #   即：追加的识别器 其全我 是 定界识别器 全我 的 前缀
    #
    #追加的识别器 结果皆可取
    #
    完全重合重叠识别器（定界识别器，追加的识别器+）
      #结果皆可取
      #追加的识别器 附带约束:断言用全我位置
      #追加的识别器 附带约束:全我位置上限
      #追加的识别器 附带约束:全我位置下限

    无序前缀重叠识别器（定界识别器，追加的识别器+）
      #结果皆可取
      #追加的识别器 附带约束:全我位置上限
      #与 非全我预判识别器 连用
      #     此乃 前缀非，如何实现 定长非？
      #如果 完全重合重叠识别器 默认 支持 定长非
      #     则『非』必须『转移』 所有 设限 参数，自己并不受它们影响才行。但这与语义相悖，不行，所以引入下面的:拒绝完全重合重叠识别器

    拒绝完全重合重叠识别器（定界识别器，追加的识别器+）
      #追加结果皆弃
      #追加的识别器 附带约束:断言用全我位置
      #追加的识别器 附带约束:全我位置上限
      #追加的识别器 附带约束:全我位置下限
      #但 追加 的 结果取反/非

  分叉识别器（识别器*）
    # 与或非 之 或
    # 皆是 诞我识别器，但 互斥分叉识别器 需要 暂时 封印 清空输入缓存请求
    #
    优先分叉识别器（识别器*）
      #依序优先选中首个『回答是我』的识别器
    互斥分叉识别器（识别器*）
      #必须确保至多一个分支 是我
      #     是故 所有分支 进行 是我测试
      # 冻结是我模式:互斥分叉识别器 所必需
      #
    前瞻分叉识别器（条件识别器，然则识别器，否则识别器）
      # x if y else z = ?=y x | ?!y z

  #循环 与 分叉
    贪婪/勤性=优先
      优先:
        x* = x x* |> pass
      互斥:
        x* = x x* | ?!x pass
        x* = x x* if x else pass
    懒惰/惰性=前瞻 或 带循环休止标记
      前瞻:
        x*!y = ?=y pass |> x x*!y
        x*!y = ?=y pass | ?!y x x*!y
        x*!y = pass if y else x x*!y
      带循环休止标记:
        x*+y = y |> x x*+y
        x*+y = y | ?!y x x*+y
        x*+y = y if y else x x*+y
  #循环 带元素分隔标记 带循环休止标记 带循环起始标记 带元素休止标记 带元素起始标记 带元素休止标记末可省 带元素起始标记首可省 元素可省
    #元素可省 vs 元素？
      区别在于结果类型:
        元素可省: [元素结果]
        元素？:   [可选 元素结果]
    #序列 次序 示例:
      循环起始标记
        元素起始标记首可省?
        元素起始标记
          元素
        元素休止标记
      元素休止标记末可省
      元素分隔标记
      元素起始标记首可省
        元素起始标记
          元素
        元素休止标记
        元素休止标记末可省?
      循环休止标记
  #循环 与 左右结合
    左结合==>>左递归:
      div_expr = div_expr / div_atom |> div_atom
    右结合==>>右递归:
      pow_expr = pow_atom ** pow_expr |> pow_atom
  循环识别器（识别器，最小重复数？，最大重复数？）
    无上限循环识别器（识别器，最小重复数）
      ===定长循环识别器（识别器，最小重复数）+++零无上限循环识别器（识别器）
      零无上限循环识别器（识别器）
      一无上限循环识别器（识别器）
    有上限循环识别器（识别器，最小重复数，最大重复数）
      ===定长循环识别器（识别器，最小重复数）+++最长循环识别器（识别器，最大重复数-最小重复数）
      定长循环识别器（识别器，重复数）
      最长循环识别器（识别器，最大重复数）
  分隔循环识别器（分隔识别器，识别器，最小重复数？，最大重复数？）
    # 用于 a,b,c
    无上限分隔循环识别器（分隔识别器，识别器，最小重复数）
      零无上限分隔循环识别器（识别器）
      一无上限分隔循环识别器（识别器）
    有上限分隔循环识别器（分隔识别器，识别器，最小重复数，最大重复数）

  序列识别器（索引？，识别器+）
    #序列全我=子识别器全我之和
    首我序列识别器（诞我识别器，识别器*）
      #以 首识别器 的 是我位置 作为 整个序列识别器 的 是我位置
    末我序列识别器（识别器*，诞我识别器）
      #以 末识别器 的 是我位置 作为 整个序列识别器 的 是我位置
    中我序列识别器（索引，识别器*，诞我识别器，识别器*）
      === 末我序列识别器（识别器*，首我序列识别器（诞我识别器，识别器*））
      === 首我序列识别器（末我序列识别器（识别器*，诞我识别器），识别器*）
  包围识别器（左识别器，右识别器，中间识别器）
    #方便 定制版结果计算函数 作用于 <tag ...></tag>
    === 首我序列识别器（左识别器，中间识别器，右识别器）




  =====to be continue
  跳过识别器（识别器）
    #(永远不需结果，如：噪声/常量/自由注释)

  嵌套噪声设置识别器（噪声识别器？，目标识别器）
    #(退出还原，临时局部取消/设定/覆盖噪声)
    临时局部取消外部噪声（目标识别器）
    临时局部添加噪声（噪声识别器，目标识别器）
    临时局部覆盖外部噪声（噪声识别器，目标识别器）
      # 如果 已有 噪声，则 先取消
      ===临时局部取消外部噪声（临时局部添加噪声（噪声识别器，目标识别器））

  单路登记命名识别器（目标语言，规则名，分支路径，识别器）
    # (目标语言+在其语法中输出类名深度分支路径[相应过滤器路径])
    # 注册登记，而后 各规则中的阴符方可 被访问

  分叉登记命名识别器（目标语言，规则名，[(分支路径,识别器)]）
    #同 分叉识别器，分为：优先+互斥
    # 与或非 之 或
    优先分叉登记命名识别器（目标语言，规则名，识别器）
    互斥分叉登记命名识别器（目标语言，规则名，识别器）


  ===
  ===
  ===
  类型检查
  #动态类型+静态类型
  动态类型=box 规则名 的 输出数据 需自带 分类标记，过滤器输出 亦依此例
  静态类型=
    | 规则名 需标明 数据类型
    | 规则名 名下 的 分支路径 中的 分支名 需标明 输入输出的数据类型
    | 与 分支名 对应的 过滤路径 中的 过滤器 需标明 输入输出类型

  #过滤(总输出过滤，子输出预处理/综合:除去 跳过，需要 分类标记 所有 结果)
  #分类标记所有结果:所有识别器结果 在被过滤前 以 识别器构造名 标记，过滤后 一律以过滤器名/类深度分支名命名，方便 父 统一处理
  #过滤器签名/语法符号的结果类型:静态类型 约束

  =====to be continue
  ？非贪婪+后续/前瞻预判
  ？非贪婪+全我位置下限 # 这里要求 设限！
  =====to be continue
  #全我位置下限<=断言用全我位置下限<=断言用全我位置<=断言用全我位置上限<=全我位置上限
  ？前缀 增/减 序列
  定界识别器（识别器+）
    #用于划分定界，见：重叠识别器
    不忽略失败的最小全我位置定界识别器（识别器+）
      #结果皆弃
      #一错父错
      #以 最小全我位置 作为 全我位置
      #以 最小是我位置 作为 是我位置
        #求 全我，需 所有 子 全我
        #求 是我，需 所有 子 是我
    忽略失败的最小全我位置定界识别器（识别器+）
      #结果皆弃
      #一成父成
      #以 最小全我位置 作为 全我位置
      #以 最小是我位置 作为 是我位置
        #全部失败，则失败，否则忽略失败
        #求 全我，无需 所有 子 全我
        #求 是我，无需 所有 子 是我
        #具有 短路特性，可并行feed子，直到某子成功
        #
      #？？？
        #以 最小是我位置 作为 是我位置
          #忽略所有失败？
        #以 最大是我位置 作为 是我位置
          #最大是我 >= 最小全我 怎么办？
    最大全我位置定界识别器（识别器+）
      #结果皆可取
      #一错父错
      #以 最大全我位置 作为 全我位置
      #以 最大是我位置 作为 是我位置
    最大全我位置最小全我是我定界识别器（识别器+）
      #以 最大全我位置 作为 全我位置
      #以 最小全我位置 作为 是我位置
    最大是我
  设限识别器（定界识别器，受限识别器/诞我识别器）
    #以 定界识别器的是我位置/全我位置 设限







py impl:
  识别器 yield:
    * 求阳符:
      请求 执行器 进投个 阳符
      -> 阳符/EOF
    *（调用，执行至指定阶段，识别器/阴符，识别输入）
      #如：互斥分叉识别器 要求所有分支至 是我/非我，再选一个yield，继续执行
      阴符 -> 分类标记数据
      识别器 -> （识别器，未分类数据）
    *（阶段性识别结果，...）
      （阶段性识别结果，是我，是我位置，是我额外分析用结果）
      主要的识别阶段
      #是我:（清空输入缓存，新的开始位置=是我位置）
        #

