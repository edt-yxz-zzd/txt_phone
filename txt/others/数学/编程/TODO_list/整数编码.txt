整数编码

小结 编码方案 命名:
	组合式命名:
		原子命名[1:n]+原子命名[n:]
			[1..n-1] 字节 用 第一种 编码方案
			[n..] 字节 用 第二种 编码方案
			utf8[:5]+bm_dps_s2c5b2[5:]
				bm_d_pl_ps_ex_utf8_s2c5b2
			utf8[:5]+bm_dps_sxx626[5:]
				==bm_d_pl_ps_mix_utf8_sxxN2N<5>
			bm_dpl_2x1_f3t5_p1len2abn1s_MIN5_MAX8[5:9]+bm_dps_sxx717[9:]
			bm_dpl_2x1_f3t5_XXX_1_4[:5]+bm_dps_sxx616[5:]
			bm_dpl_2x1_f3t5_XXX_1_4[:5]+bm_dps_s2c5b1[5:]
			bm_dpl_2x1_f3t5_p1len3abn1s_MIN5_MAX12[5:13]+bm_dps_s2c6b1[13:]
			bm_dpl_2x1_f3t5_s3a5len3ab1s_MAX12[:13]+bm_dps_s3c5b1[13:]

	bm_ 编码

	dps_ 中间重定位 之 定位前缀 定位后缀
	dpl_ 中间重定位 之 定位前缀 编码长度
	dsl_ 中间重定位 之 定位后缀 编码长度
	fs_ 正向读取 之 定向后缀
	fl_ 正向读取 之 编码长度
	bp_ 后向读取 之 定向前缀
	bl_ 后向读取 之 编码长度

	XXX_\d+_\d+ 某类 编码方案 在 某个 字节数区间 编码完全相同，将之命名 以用于 组合式命名
	MAX\d+
	MIN\d+
		某个 编码方案 只在 某个 字节数区间 内有编码，将之命名 以用于 组合式命名
	mix_ 混合，组合

	bm_d_pl_ps_ex_utf8_s2c5b2
		ex_ 兼容
	bm_dps_u104_h4t3_h6t6
		u104 单集 共104个元素
		h4t3 h6t6 两组 首集 尾集 的 空闲比特数

	bm_dps_s\dc\db\d
		bm_dps_s2c5b1
		bm_dps_s2c5b2
		bm_dps_s2c6b1
		bm_dps_s3c5b1
		s 单单元比特前缀
		2c5b1 "(z-x)xy*x"
			z,x,y 固定比特前缀长度 为 2,5,3
			c  cut (z-x) 集合减法, x<=z
			b  body
	bm_dps_s[x\d]x\d{3}
		bm_dps_s1x323
		s 单单元比特前缀
		1x323 单集、首集、余集、尾集 的 元素 的 比特前缀 长度
	bm_dps_m\d+
		bm_dps_m2_smpl #2 比较特殊
		bm_dps_m3_smpl
		m 多单元联合前缀#长度泛化
		2 [nh=nt=(2)-2]，最小编码长度 (2)*2
		3 [nh=nt=(3)-2]，最小编码长度 (3)*2
		_smpl 简化:
			针对2，不使用 奇数长度，不使用 余集
			其他值，只埋 预先固定好位置的 最少的钉子，只使用 长度泛化，不使用 完全序号
	bm_dpl_\dx\d_f\dt\d_.*
		bm_dpl_2x1_f3t5_p1p1s
		bm_dpl_2x1_f3t5_p1xp2n3p2
		bm_dpl_2x1_f3t5_p1xp2n1p2
		bm_dpl_2x1_f3t5_p1len3abn1s_MIN5_MAX12
		bm_dpl_2x1_f3t5_s3a5len3ab1s_MAX12
		2x1 单元码 前缀 2bit，载荷 单元 前缀 1bit
		f3t5 计数式长度 3~5bit
		p1p1s 单元 前缀 1bit，"ab*"，反向读取 之 定向前缀
		p1xp2n3p2/p1xp2n1p2
			类似 bm_dps_s1x323 ，只是可能需要加固定前缀，p/n 用于指示是否需要加
			"p1","p2" 是固定的
			"n3" 则取于 前面的 "f3t5"
			"n1" 则取于 前面的 "2x1"
		s3a5len3ab1s
			s... 单单元比特前缀
			...s 重复
			a 分割
			3,5len3,b1s
				3 第一字节 前缀比特数
				5 第二字节 前缀比特数
				5len3 前两字节保存 3bit 编码长度
				b1s body 1比特前缀 重复
		p1len3abn1s
			len3 a b 类似 上面 s3a5len3ab1s
			p1,n1 类似 上面 p1xp2n1p2
			len3 使用 3bit 编码长度
				
	
	bm_fs_.*
		bm_fs_s1s1
			"a*b"
		bm_fs_m2
			见 定义
			相当于 半步 多单元联合前缀

	bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2_sxxD2D<n,m>
	bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2<n,dn>
		a 见 上面
		D=n+dn
		N=n
		Nsub2=n-2
		rNsub2 重复Nsub2
		2rNsub2 单元比特前缀为2的字节 重复Nsub2


应用:
	问题一:字符串 编码为 字节串
		字符集大小的上限 永远不可能知道
			要求 使用 变长编码
			要求 注重 高频字符 或 小整数(即 假设 小整数 的 出现概率更高)，分配 极短编码
		阅读长篇小说时按比例定位
			要求 中间重定位 能力
		=====
		编码方案:
			#为了更快的 存取速度，只使用 位操作
			#当 长编码 所含 整数 应当 编码为 短编码 或 该用其他 优先 子编码方案(如：utf8+266 2至4字节 优先utf8) 时，此值为 特殊值 用于其他目的
			#  类似 unicode 中的 私用字符 或 无意字符，仅为 应用程序 自定义 内部使用
			#定位后 读出的编码 可能无效
			#   不被编码方案采用的复杂情形
			#   见 下面 “简化”
			#   多单元联合前缀 一般会 采用 简化 形式，复杂情形 见 求中间重定位编码在相应编码长度的序号
			#解码结果:
			#  出错 定位首地址时越过文件头/定位尾地址时越过文件尾
			#  出错 定位首地址时越过单元码/定位尾地址时越过单元码
			#  出错 定位首地址时越过定位后缀/定位尾地址时越过定位前缀 #情形A
			#  出错 定位首地址后定位尾地址但起始地址不在编码中/定位尾地址后定位首地址但起始地址不在编码中 #情形BC
			#  正常 整数值
			#  特殊 子编码方案 编码长度 整数值
			#  无效 可定位的无效编码
			#编码输入:
			#  正常 整数值
			#  特殊 子编码方案 编码长度 整数值
			#  无效 可定位的无效编码
			#定位 #不考虑 越界以外的 错
			#   定位首地址 起始地址 地址范围 -> 可选 首地址
			#   定位尾地址 起始地址 地址范围 -> 可选 尾地址
			#   由首地址定位尾地址 首地址 地址范围 -> 可选 尾地址
			#   由尾地址定位尾地址 尾地址 地址范围 -> 可选 首地址
			#编码查询:
			#  正常 () -> 最小的 有效 编码长度
			#  正常 编码长度 -> 最小的 更大 有效 编码长度
			#  正常 编码长度 -> 整数范围
			#
			#  特殊 () -> 可选 最小的 有效 编码长度
			#  特殊 编码长度 -> 可选 最小的 更大 有效 编码长度
			#  特殊 编码长度 -> [有效 子编码方案]
			#  特殊 子编码方案 编码长度 -> 整数范围
			#
			#  特殊 () -> [有效 子编码方案]
			#  特殊 子编码方案 -> 可选 最小的 有效 编码长度
			#  特殊 子编码方案 编码长度 -> 可选 最小的 更大 有效 编码长度
			#
			#  特殊 () -> 可选 最小的 有效 整数范围
			#  特殊 整数范围 -> 可选 最小的 更大 有效 整数范围
			#  特殊 整数值 -> [有效 子编码方案]
			#  特殊 子编码方案 整数值 -> 可选 最小的 有效 编码长度
			#  特殊 子编码方案 编码长度 整数值 -> 可选 最小的 更大 有效 编码长度
			#
			#  特殊 整数值 -> 可选 最小的 有效 编码长度
			#  特殊 编码长度 整数值 -> 可选 最小的 更大 有效 编码长度
			#  特殊 编码长度 整数值 -> [有效 子编码方案]
			#


			=====简略
			要求 兼容 utf8:
				最佳:
					* bm_d_pl_ps_ex_utf8_s2c5b2
						== utf8[:5]+bm_dps_s2c5b2[5:]
						#bit: 7,11,16,21;23.8, 29.8, 35.8...
					* bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2_sxxD2D<5,8>
						#bit: 7,11,16,21;24,30,35,40,46...
			要求 兼容 ascii，不要求 兼容 utf8:
				最佳:
					* bm_dps_s1x323
						#bit: 7;10,16,22,28,34...
					* 11 负载 多单元联合前缀 长度泛化
			要求 单元码，不要求 兼容 ascii:
				最佳:
					* bm_dps_s2x222
						#bit: 6;12,18,24,30,36...
					* bm_dps_s2x313
						#bit: 6;10,17,24,31,38...
					* bm_dps_u104_h4t3_h6t6
					* bm_dpl_2x1_f3t5_XXX_1_4[:5]+bm_dps_s2c5b1[5:]
					* bm_dpl_2x1_f3t5_p1len3abn1s_MIN5_MAX12[5:13]+bm_dps_s2c6b1[13:]
					* bm_dpl_2x1_f3t5_s3a5len3ab1s_MAX12[:13]+bm_dps_s3c5b1[13:]
			不要求 单元码:
				最佳:
					* bm_dps_sxx212
						#bit: _;12,19,26,33,40...
					* 多单元联合前缀 长度泛化


			=====详细
			#GB2312,GBK,GB18030 均不能 中间重定位
			#  不考虑 对他们的 兼容
			#1233,2222,122
			要求 兼容 utf8:
				最佳:
					* bm_d_pl_ps_ex_utf8_s2c5b2
					* bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2_sxxD2D<5,8>
				=====候选 比较
				bm_d_pl_ps_ex_utf8_s2c5b2
					# n bytes ==>> 6*n-6.2 bit
				utf8+266 #体2
					#== bm_d_pl_ps_mix_utf8_sxxN2N<5>
					# n bytes ==>> 6*n-8 bit
				bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2_sxxD2D<5,8>
					全面超越 bm_d_pl_ps_mix_utf8_sxxN2N<5>
					[5,6]时 超越 bm_d_pl_ps_ex_utf8_s2c5b2

			要求 兼容 ascii，不要求 兼容 utf8:
				最佳:
					* bm_dps_s1x323
					* 11 负载 多单元联合前缀 长度泛化
				=====候选 比较
				11 负载 多单元联合前缀 长度泛化
					# 负载单元 7bit 用于 多单元联合前缀 长度泛化
					# 编码长度<2>：1 | 4+2*k
					# 编码长度<(n>2)>：1 | 2*n | 2*n+2+k
					# [n=2]([x=1]7 +[x=4+2*k](7*x))
					# [n>2]([x=1]7 +[x=2*n+k](~=~7*(n*2+k//n*2))+8*(k-k//n*2))
					# 4字节起步，太长，对 小整数 不友好
				1233 #体2 #bm_dps_s1x323
					#== bm_d_pl_ps_mix_utf8_sxxN2N<2>
			要求 单元码，不要求 兼容 ascii:
				# 参见 ascii104,ascii64,ascii32
				最佳:
					* bm_dps_s2x222
					* bm_dps_s2x313
					* bm_dps_u104_h4t3_h6t6
					* bm_dpl_2x1_f3t5_XXX_1_4[:5]+bm_dps_s2c5b1[5:]
					* bm_dpl_2x1_f3t5_p1len3abn1s_MIN5_MAX12[5:13]+bm_dps_s2c6b1[13:]
					* bm_dpl_2x1_f3t5_s3a5len3ab1s_MAX12[:13]+bm_dps_s3c5b1[13:]
				=====候选 比较
				2222 #bm_dps_s2x222
				bm_dps_u104_h4t3_h6t6
				bm_dpl_2x1_f3t5_p1p1s
				bm_dpl_2x1_f3t5_p1xp2n1p2
				bm_dpl_2x1_f3t5_p1len2abn1s_MIN5_MAX8[5:9]+bm_dps_sxx717[9:]
				bm_dpl_2x1_f3t5_XXX_1_4[:5]+bm_dps_sxx616[5:]
					[x<5]6*x + [x>=5](7*x-10)
				bm_dpl_2x1_f3t5_XXX_1_4[:5]+bm_dps_s2c5b1[5:]
					[x<5]6*x + [x>=5](7*x-9.2)
				bm_dpl_2x1_f3t5_p1len3abn1s_MIN5_MAX12[5:13]+bm_dps_s2c6b1[13:]
					[x<5]6*x + [5<=x<13](7*x-8) +[x>=13](7*x-11.1)
				bm_dpl_2x1_f3t5_s3a5len3ab1s_MAX12[:13]+bm_dps_s3c5b1[13:]
					[x<5]6*x + [5<=x<13](7*x-9) +[x>=13](7*x-10.42)
					见 其目下 与2222比较
				1233 #体1 #bm_dps_s2x313
					[x=1]6 +[x>1](7*x-4)
					# 与 2222 比较
					# 单字节、四字节 相同
					# 双字节 少2bit
					# 三字节 少1bit
					# 多于四字节 优于 2222
			不要求 单元码:
				最佳:
					* bm_dps_sxx212
					* 多单元联合前缀 长度泛化
				=====候选 比较
				122 #体1 #bm_dps_sxx212
				多单元联合前缀 长度泛化
					#不合适，起步长度4
					# 编码长度<2>：1 | 4+2*k
					# 编码长度<(n>2)>：1 | 2*n | 2*n+2+k

	问题二:快速定位 字节文件 中的 整数数组
		如 文件中 保存着 pi 的 连分数
		与 问题一 的 一个要求不同，不注重 小整数
		=====见 方法三
		方法一: 定长编码 整数
			O(1)
			pi 的 连分数元素 变化极大，空间效率 低
		方法二: 定长编码 外文件地址
			O(1)
			外文件 保存 整数集合，整数 可采用外定位
			空间效率 比 方法一 高
			但 这两种方法 都不能支持 任意长的 连分数展开
		方法三: 保存 位置与值 的 二元组 数组
			O(log(file_size))
			先将 二元组 编码为 整数
			再用 可 中间重定位 的 整数编码方案 对 整数 编码
			缺点:
				定位 慢
				位置 稳步增大，浪费存储空间
					定长: n*2^n
					变长: (n-1)*2^n = -1+sum~ 2^i*(i+1) {i<-[0..n-1]}
					变长 并不 节省空间
			由于 整数 有 增大的倾向，故 小整数 并不 高频
		=====到底 方法三 有无 实际意义？？
		传输:
			显然 由于 无 快速定位 要求，值流 更合适
		生成后 检阅:
			由于 结果 确定 且 变长 不能 节省空间，可采用 定长编码 方法二
		生成中 检阅:
			也就这一 罕见场景，可能用得上 方法三
			但 仍可 使用 方法二:
				类似 C++.vector 的动态增长
				遇到 瓶颈，提高 定长 并 转写 文件。
		=====
		编码方案:
			不要求 单元码:
				122 #体1
				多单元联合前缀 长度泛化
					# 编码长度<2>：1 | 4+2*k
					# 编码长度<(n>2)>：1 | 2*n | 2*n+2+k
			


不同需求：
	*是否比特流
		#整数 可先转化 自然数 / 比特流
		u = abs(i)*2 -[i<0]
		or (s:=[i<0], u:=i*(-1)^s -s)
	======
	*概率分布
	*正负符号
		*无符号
		*有符号
			*正向符号探测
			*反向符号探测
	*大小端序
		*正向模2探测
		*反向模2探测
	*遍历方式
		*正向读取
			*尾指示
				最后N单元符合〖尾条件〗
				前面转义以回避〖尾条件〗
				〖尾条件〗：
					*单单元
						*单元前缀
						*单元常量
					*多单元
						*多单元常量
							带状态回避#类似子字符串搜索
						*复杂运算
			*正向跳过
				长度{正向读取编码}++负载
		*反向读取
			*头指示
			*反向跳过
				负载++长度{反向读取编码}
		*中间重定位 < 正向读取&反向读取
			*多单元(字节)联合前缀：
				#多单元联合前缀
				*每单元单比特前缀
					#各单元前缀比特的正则表达式
					*11(01)*00
						长度=4+2*x
						效率=7/8
						落在中间时，读取当前单元的前缀比特：
							*0:
								#...[0]
								当前单元不是头单元
								读前一单元的前缀比特：
									*0:
										#...0[0]
										当前单元是尾单元
										*定位头单元：
											seek(.-3)
											while 当前单元的前缀比特==0:
												seek(.-2)
											DONE
										*定位尾单元：
											DONE
									*1:
										#...1[0]...
										当前单元不是尾单元
										双向搜索，同上
							*1:
								#[1]...
								当前单元不是尾单元
								读后一单元的前缀比特：
									*0:
										#...[1]0...
										当前单元不是头单元
										双向搜索，同上
									*1:
										#[1]1...
										当前单元是头单元
										单向搜索，同上
					*11{n}1(0[01]{n}1)*00{n}0
						长度=(2+n)*(2+x)
						效率<=1-2/8/(2+n)
							# == when n==0
						定位方法同上
						*0:
							反向读直到遇见1
							正向读直到0的个数为(2+n)或遇见1
							...双向移动
						*1:
							正向读直到遇见0
							反向读直到1的个数为(2+n)或遇见0
							...双向移动
			*每单元(字节)前缀：
				是否 单单元、头单元、尾单元、体单元
				#11      #各单元前缀的比特数
				#   {2}  #不同前缀的数量
				#expand 1->22
				#122,2222
				#   {3,4}
				#expand 2->33
				#1233,13333,22233,2233_33,233_3333,3333_3333
				#   {4,5,6,7,8}
				#4==>>2222,1233
				#3==>>122
				根据概率分布：
					*单单元 用 单比特前缀
						1233
						效率<6/8
						体单元 用 双比特前缀
						头单元、尾单元 用 三比特前缀
						bm_dps_s1x323
					*体单元 用 单比特前缀
						1233
						效率<7/8
						单单元、头单元、尾单元 用 双比特前缀*1、三比特前缀*2
						bm_dps_s2x313
						bm_dps_s3x213
					*均用 双比特前缀
						2222
						效率=6/8
						bm_dps_s2x222
					*不使用 单单元
						122
						效率<7/8
						体单元 用 单比特前缀
						头单元、尾单元 用 双比特前缀
						bm_dps_sxx212
				
		


能力 解析:
	中间重定位 = 定位前缀+定位后缀 | 定位前缀+编码长度 | 定位后缀+编码长度
	正向读取 = 定位后缀 | 编码长度
	反向读取 = 定位前缀 | 编码长度


正向读取 之 定位后缀
	bm_fs_.*
	bm_fs_s1s1:
		(\b1~)* \b0~
	bm_fs_m2:
		\b1~? (. \b1~)* \b0~ \b0~
	bm_fs_m{n+1}:
		(.{0,n-1} \b1~)? (.{n} \b1~)* \b0~{n+1}

中间重定位 之 混合策略
	* bm_d_pl_ps_mix_utf8_sxxN2N<n>:
		utf8[:n]+bm_dps_sxx{n+1}2{n+1}[n:]
			\b1{x}0~ \b10~{x-1}
				2<=x<=7
				n = 1+max x = 8
				==>> 2 <= n <= 8
			\b1{n}1~ \b10~* \b1{n}0~
				==>> {n+1}2{n+1}
		[x=1]7
		[2<=x<n]: (8-x-1)+6*(x-1)=5*x+1
		[x>=n]: (8-n-1)*2+6*(x-2)=6*x+2-2*n

		[2<=n<=7]([x=1]7 +[2<=x<n](5*x+1) +[x>=n](6*x+2-2*n))

		[5*x=6*x+2-2*n]:
			x=2*n-2

		n越大越糟糕
		bm_d_pl_ps_mix_utf8_sxxN2N<n>
			[2<=n<=7]([x=1]7 +[2<=x<n](5*x+1) +[x>=n](6*x+2-2*n))
		1233 #体2 #bm_dps_s1x323
			#== bm_d_pl_ps_mix_utf8_sxxN2N<2>
			#与 utf8 比较 空间效率:
			#  单字节、三字节 相同，7bit, 16bit
			#  双字节 少1位，utf8 11bit
			#  四字节 多1位，utf8 21bit
		utf8 2bytes + 244
			#== bm_d_pl_ps_mix_utf8_sxxN2N<3>
			# 二字节 utf8 11bit
			# n bytes ==>> '244'  8+6*(n-2)=6*n-4 bit
			# n==3 ==>> 14bit < 16bit
			# n==4 ==>> 20bit < 21bit
			# 不及 utf8
		utf8 3bytes + 255
			#== bm_d_pl_ps_mix_utf8_sxxN2N<4>
			# 三字节 utf8 16bit
			# n bytes ==>> '255'  6+6*(n-2)=6*n-6 bit
			# n==4 ==>> 18bit < 21bit
			# 不及 utf8
		utf8+266 #体2
			#== bm_d_pl_ps_mix_utf8_sxxN2N<5>
			# 四字节 utf8 21bit
			# n bytes ==>> '266'  4+6*(n-2)=6*n-8 bit
			# n==5 ==>> 22bit > 21bit
		utf8 5bytes + 277
			#== bm_d_pl_ps_mix_utf8_sxxN2N<6>
			# 五字节 utf8 26bit
			# n bytes ==>> '277'  2+6*(n-2)=6*n-10 bit
			# n==6 ==>> 26bit == 26bit
		utf8 6bytes + 288
			#== bm_d_pl_ps_mix_utf8_sxxN2N<7>
			# 六字节 utf8 31bit
			# n bytes ==>> '288'  0+6*(n-2)=6*n-12 bit
			# n==7 ==>> 30bit < 31bit
			# n==8 ==>> 36bit


	* bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2<n,dn>:
		utf8[:n]+bm_dps_s4a{n+dn}a2r{n-2}_s4a2ab3sa{n+dn}a2r{n-2}[n:]
			dn <- [0,1]

		z = \b1{n}0{dn=1}~
		[2<=x<n]:
			\b1{x}0~ \b10~{x-1}
			(8-1-x)+6*(x-1) =5*x+1
		[x=n]:
			\b1110~ z \b10~{k}
				==>>
					[k=x-2=n-2]
					[4<=n<=7]
			4+(8-dn-n)+6*k =5*x-dn
		[x>n]:
			\b1110~ \b10~ \b110~{x-3-k} z \b10~{k}
			4+6+5*(x-3-k)+(8-1-n)+6*k
				= 4+6+5*(x-3-(n-2))+(8-dn-n)+6*(n-2)
				= 5*x +1-dn
		[4<=n<=7][0<=dn<=1](5*x +1-dn +[x=1]2 +[2<=x<n] -[x=n])



	* bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2_sxxD2D<n,m>
		utf8[:n]+bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2<n,1>[n:m] +bm_dps_sxxD2D[m:]
		z = \b1{n}0~
		y = \b1{n}1~
		[x>=m]:
			y \b10~* z
				==>> [m=x>=2][2<=n<=7]
			(8-1-n)*2 +6*(x-2) = 6*x -2*n +2

		([x=1]7
		+[2<=x<m][4<=n<=7](5*x +[2<=x<n] -[x=n])
		+[x>=m][m>=2][2<=n<=7](6*x -2*n +2)
		)

		[4<=n<=7]:
			[(5*x +[2<=x<n] -[x=n])=(6*x -2*n +2)]:
				x = 2*n-2 +[2<=x<n] -[x=n] >= 2*n-3 >= n+1
				x = 2*n-2
			[m <- [2*n-2, 2*n-1]] #m>=2

		[4<=n<=7][2*n-2<=m<=2*n-1]*
			([x=1]7
			+[2<=x<m](5*x +[2<=x<n] -[x=n])
			+[x>=m](6*x -2*n +2)
			)
		n越小，未来 空间效率 越高
		n越大，[n1<=x<n2] 空间效率 越高，多1bit
		总的来说，n越小越好
		但 n>=5 才能兼容utf8
			[n=5][m=8]:
				[x>=8](6*x-8)
				[5<=x<8](5*x-[x=5])
				[x=5]24
			utf8+bm_dps_sxx626
				[x>=5](6*x-8)
				[x=5]22
			bm_d_pl_ps_ex_utf8_s2c5b2
				[x>=5](6*x-6.2)
				[(6*x-6.2) < (5*x-[x=5])]:
					x < 6.2-[x=5]
					[5<=x<=6]
			bm_d_pl_ps_mix_utf8_s4aDa2rNsub2_s4a2ab3saDa2rNsub2_sxxD2D<5,8>
				全面超越 bm_d_pl_ps_mix_utf8_sxxN2N<5>
				[5,6]时 超越 bm_d_pl_ps_ex_utf8_s2c5b2







	* bm_d_pl_ps_ex_utf8_s2c5b2:
		== utf8[:5]+bm_dps_s2c5b2[5:]
		# 前4字节与utf8相同
			\b0~
			\b11{n}0~ \b10~{n}
				# 1<=n<=3
			bits: 7, 11, 16, 21
		#### \b110~ \b1{5}~ \b10~* \b1{5}~
			5 + 3 + 6*(m-3) + 3 = 6*m - 7
			# vs 626 (6*m-8)
		* (\b11~ - \b1{5}~) \b1{5}~ \b10~* \b1{5}~
			#bm_dps_s2c5b2
			2^(6*m-6) *(2^6-2^3)/2^6
				= 2^(6*m-6) *(2^3-2^0)/2^3
				= 2^(6*m-6) *7/8
				= 2^(6*m-7) *7/4
				= 2^(6*m-9+log2(7))
					# log2(7) > 2.8
					> 2^(6*m-6.2)


中间重定位 之 定位前缀+定位后缀
	* bm_dps_u104_h4t3_h6t6:
		# 除了ascii不全外，其他优于 utf8[:5]+bm_dps_sxx626[5:]
		z = 单集 =
			\b01{7}
			\b01{n}0~
				# n <- [0..1,4..6]
			#2^7-24=104
		a = \b01{2}0~
			# 2^4=16
		b = \b01{3}0~
			# 2^3=8
		x = \b10~
		y = \b11~
			# 2^6

		"z" 104     # < utf8 128  # > 2222 64
		"xy" 2^12   # > utf8 2^11 # = 2222 2^12
		"ayy" 2^16  # = utf8 2^16 # < 2222 2^18
		"xxxb" 2^21 # = utf8 2^21 # < 2222 2^24
		#### "a[yx]x*ab"
			4 + 7 + 6*(m-4) + 4 + 3 = 6*m -6
			vs 323 (6*m-2)
			vs 626 (6*m-8)
		#### "ayx{0,2}b" | "ayx*(ax*)*ax{0,2}b"
			...
		* "ay?x*ay?x{0,2}b"
			* m=3
				"aab" 2^11
			* m=4
				"aaxb"
				"aayb"
				"axab"
				"ayab"
				2^19 = 4*2^(11+6)
			f i = [i=0]1 + [i>0]2*2^(6*i)
				= 2^(6*i+[i>0])
			g i = [i=0]1 + [i=3]2^18 + [1<=i<=2]2*2^(6*i)
				= 2^(6*i+[0<i<3])
			sum~ 2^11 *f(m-3-i)*g(i) {i <- [0..min(3,m-3)]}
				= sum~ 2^11 *2^(6*(m-3)+[0<i<3]+[m-3-i>0]) {i <- ...}
				= sum~ 2^(6*m-7 +[0<i<3]+[m-3-i>0]) {i <- ...}
				*[3<=m<=6]:
					= sum~ ... {i <- [0..m-3]}
						# 3 => [0..0]: 2^(18-7) *1 = 2^11
						# 4 => [0..1]: 2^(24-7) *(2+2) = 2^19
						# 5 => [0..2]: 2^(30-7) *(2+4+2) = 2^26
						# 6 => [0..3]: 2^(36-7) *(2+4+4+1) = 2^29 *11 > 2^32
				*[7<=m]:
					= sum~ ... {i <- [0..3]}
						# 7 => [0..3]: 2^(42-7) *(2+4+4+2) = 2^35 *12 = 3*2^37
					= 3*2^(37 +6*(m-7))
					= 3*2^(6*m-5)
						> 2^(6*m-4)
					# vs 222 (6*m)
					# vs 323 (6*m-2)
					# vs 626 (6*m-8)




中间重定位 之 定位前缀+编码长度
	类似utf8
	\b00~
	\b01{p}0~ \b1~{p}
		#1<=p<=pp
		#0<=pp<=4
		#字节环境下，一般pp取3，用最多4字节表达 unicode
		#空间效率 = 6/8
	let [pp=3]bm_dpl_2x1_f3t5_XXX_1_4 = bm_dpl_2x1_f3t5_xxp1n3p1[:5]
	case:
	* 0_01
		\b01{pp+1}0~ \b01{1..pp}0~* \b01{pp+1}1~ \b1~{nn+1+pp}
	* 0_02 #[pp=3]bm_dpl_2x1_f3t5_xxp1n3p1
		\b01{pp+1}0~ \b010~* \b01{pp+1}1~ \b1~{nn+1+pp}
	* 0_03 #[pp=3]bm_dpl_2x1_f3t5_xxp1n1p1
		\b01{pp+1}0~ \b1~* \b01{pp+1}1~ \b1~{nn+1+pp}
	* 0_04 #[pp=3]bm_dpl_2x1_f3t5_XXX_1_4[:5]+bm_dps_sxx616[5:]
		\b01{pp+1}0~ \b1~* \b01{pp+1}1~
		[pp=3]:
			bits: 25, 32, 39..
			5/8, 2/3, 39/56, ..
			[(2*2+7*(x-2))/(8*x)==6/8]:
				x = 10
			(7*x-10)
			与2222比较:
				相同: [1..4, 10]
				不如: [5..9] 少了 [5,4..1] bit
				优于: [11..]
	* 0_05 #[pp=3]bm_dpl_2x1_f3t5_XXX_1_4[:5]+bm_dps_s2c5b1[5:]
		(\b01~ - \b01{pp+1}~) \b01{pp+1}~ \b1~* \b01{pp+1}~
			#类似 bm_d_pl_ps_ex_utf8_s2c5b2[5:]
			#[pp=3]bm_dps_s2c5b1
		[pp=3]:
			(2^6-2^3)*2^(3 +7*(x-3) +3)
				= 7*2^(7*x-12)
				> 2^(7*x-12+2.8)
					= 2^(7*x-9.2)
			[7*x-9.2 = 6*x]:
				x = 9.2
			与2222比较:
				相同: [1..4]
				不如: [5..9] 少了 [4.2,3.2..0.2] bit
				优于: [10..]

	* 2 #bm_dpl_2x1_f3t5_s3a5len3ab1s_MAX12[:13]+bm_dps_s3c5b1[13:]
		\b010~ \b01{pp+1}~ \b1~{nn+pp}
			nn= <- [0..2^z-1]
			从前两字节选z bit 作为 nn
			[pp=3]:
				x = 2+nn+pp=nn+5
				5+3-z+7*(x-2) = 7*x-6-z
					[=6*x] => x=6+z
				[z=3]:
					#bm_dpl_2x1_f3t5_s3a5len3ab1s_MAX12
					7*x-9
					[5..12]
					x=9 赶上 2222
				[z=2]:
					7*x-8
					[5..8]
					x=8 赶上 2222
		(\b011~ - \b01{pp+1}~) \b01{pp+1}~ \b1~* \b01{pp+1}~
			[pp=3]:
				#bm_dps_s3c5b1
				(2^5-2^3)*2^(3 +7*(x-3) +3)
					= 3*2^(7*x-12)
					> 2^(7*x-12+1.58)
						= 2^(7*x-10.42)
		[pp=3][z=3]与2222比较:
				相同: [1..4,9]
				不如: [5..8] 少了 [4,3,2,1] bit
				优于: [10..]

	* 1
		\b01{pp+1}0~ \b1~{nn+1+pp}
			nn= <- [0..2^z-1]
			从前两字节选z bit 作为 nn
			[pp=3]:
				x = 1+nn+1+pp=nn+5
				2-z+7*(x-1) = 7*x-5-z
					[=6*x] => x=5+z
				[z=3]:
					#bm_dpl_2x1_f3t5_p1len3abn1s_MIN5_MAX12
					7*x-8
					[5..12]
					x=8 赶上 2222
				[z=2]:
					#bm_dpl_2x1_f3t5_p1len2abn1s_MIN5_MAX8
					7*x-7
					[5..8]
					x=7 赶上 2222
		case:
		* 1_1 #[pp=3]bm_dpl_2x1_f3t5_p1p1s
			\b01{pp+1}0~ \b01{pp+1}1~* \b1~{nn+1+pp}
			前导 长度相关参数 nn 是 uint of [ZZ%2^(8-(po+3))]
				pp=5 单纯计数，边际空间效率 7/16
				pp=4 每字节一比特，初始空间效率比较低
				pp=3 每字节两比特，刚好
		* 1_2
			\b01{pp+1}10~ (\b01{p}0~|\b01{pp+1}11~)* \b01{pp+1}11~ \b1~{nnn+2+pp+max nn}
		* 1_3_01 #[pp=3]bm_dpl_2x1_f3t5_p1xp2n3p2
			\b01{pp+1}10~ (\b010~)* \b01{pp+1}11~ \b1~{nnn+1+前一分支最大载荷长度}
				# \b01{pp+1}10~ \b01{pp+1}11~ \b1~{nnn+2+pp+max nn}
			??空间效率优于 1_1(前期实有不如)??，复杂度低于 1_2
		* 1_3_02 #[pp=3]bm_dpl_2x1_f3t5_p1xp2n1p2
			\b01{pp+1}10~ (\b1~)* \b01{pp+1}11~ \b1~{nnn+1+前一分支最大载荷长度}
				# \b01{pp+1}10~ \b01{pp+1}11~ \b1~{nnn+2+pp+max nn}
		* 1_4 #[pp=3]bm_dpl_2x1_f3t5_p1len2abn1s_MIN5_MAX8[5:9]+bm_dps_sxx717[9:]
			\b01{pp+1}10~ \b1~* \b01{pp+1}11~
				#pp=3, ==717
		* 1_5 #[pp=3][z=3]bm_dpl_2x1_f3t5_p1len3abn1s_MIN5_MAX12[5:13]+bm_dps_s2c6b1[13:]
			(\b01~ - \b01{pp+1}1~) \b01{pp+1}1~ \b1~* \b01{pp+1}1~
			[pp=3]:
				(2^6-2^2) *2^(2 +7*(x-3) +2)
					= 15*2^(7*x-15)
					> 2^(7*x-15+3.9)
						= 2^(7*x-11.1)
				比 1_4 多 0.9 bit
			[pp=3][z=3]与2222比较:
					相同: [1..4,8]
					不如: [5..7] 少了 [3,2,1] bit
					优于: [9..]


		1_4 pp=3 空间效率:
			[1..8] 见 “1_3_02 pp=3 空间效率”
			[9..] (1*2+7*(x-2))/(8*x) = (7*x-12)/(8*x)
				[(7*x-12)/(8*x)==6/8]:
					7*x-12 = 6*x
					x = 12
				[9..11] 时 劣于 2222
			与2222比较:
				相同:
					[1..4,7,12]
				不如:
					[5..6,9..11]
				优于:
					[8,13,14..]
				
		1_3_02 pp=3 空间效率:
			1_3_02[:14] === 1_3_01[:14] # 编码完全相同
			与1_3_01比较:
				相同:
					[..142]
				优于:
					[143..]
		1_3_01 pp=3 空间效率:
			====总结
			除了 无编码[9,14,143,...] 之外
				空间效率 大于等于 7/10
			与2222比较:
				相同:
					[1..4,7,21]
				不如:
					[5..6,9..20,143...(当无编码时)]
					1_1 与 2222 相比，结果更优秀
				优于:
					[8,22..142,144...(当有编码时)]
			====用于 与2222的比较
				[(x-k)*7/(x*8) = 6/8]:
					7*x-7*k=6*x
					x=7*k
			====详细
			byte
			[1..4] 6/8
				0.5+[0..3]
			[5..8] (x-1)*7/(x*8) = (x-1)/x *7/8
				1+[4..7] 2^2
				? < 7
				7/10, 35/48, 6/8, 49/64
				[5..6] 时 劣于 2222
			[9] 0
			[10..13] (x-2)*7/(x*8)
				2+[8..11] 2^2
				? < 14
				7/10, 63/88, 35/48, 77/104
				[9..13] 时 劣于 2222
			[14] 0
			[15..142] (x-3)*7/(x*8)
				3+[12..139] 2^7
				? < 21
				7/10, ..
				[14..20] 时 劣于 2222
			[143] 0
			[144..???] (x-4)*7/(x*8)
				4+[140..140-1+2^12] 2^12
				? < 28
				140/144*7/8 > 6/8
					980 > 864
				自此 完全 优于于 2222
			




中间重定位 的 约束 分析
	必须存在:
		定位前缀判断函数 pf
		或 定位后缀判断函数 sf
	三种情况：
		A: 存在 pf 及 sf
		B: 存在 pf 但 不存在 sf
		C: 不存在 pf 但 存在 sf
		AB = A or B
		AC = A or C

		B 如何实现？
			例子：utf8
			定位 首地址 后，读取长度
	存在:
		AB:定位前缀集合
		AC:定位后缀集合
	合法编码、定位前缀、定位后缀 不为空串
	#定义
		任一 合法编码 有且只有一个 定位前缀 是其前缀
		任一 合法编码 有且只有一个 定位后缀 是其后缀

		任一 定位前缀 存在至少一个 合法编码 以之为 前缀
		任一 定位后缀 存在至少一个 合法编码 以之为 后缀

		[@x,y<-定位前缀集合. [x!=y] -> [x不是y前缀]]
		[@x,y<-定位后缀集合. [x!=y] -> [x不是y后缀]]

	单元合法编码集合:= 合法编码集合/-\长度为一的串的集合
	单集 := 单元合法编码集合的符号集合
	首集 := 非单元合法编码集合的首符号集合
	尾集 := 非单元合法编码集合的尾符号集合
	余集 := 符号集合 - (单集/-\首集/-\尾集)

	#不能定位在中间
		AB:合法编码集合的真后缀的前缀集合/-\定位前缀集合 == {}
		AC:合法编码集合的真前缀的后缀集合/-\定位后缀集合 == {}
		ABC:
			==>> 首集、尾集 互斥
	==>> 单集、首集、尾集、余集 两两互斥

	独成体集合 := 定位前缀集合/-\定位后缀集合
		#定位前缀 的后缀 与 定位后缀 的前缀 可能重合
		#注意：
		#  定位前缀 本身可能是 定位后缀 或其真前缀
		#  定位后缀 本身可能是 定位前缀 或其真后缀
	单元独成体集合 := 独成体集合/-\长度为一的串的集合
	==>>
		单元独成体集合 == 单元合法编码集合

	#避免外部干扰，避免包含
		定位前缀集合的非空前缀集合/-\定位后缀集合的非空后缀集合 == 独成体集合
		
		#不能定位在中间==>>
			定位前缀集合/-\定位后缀集合的真后缀的前缀集合 == {}
			定位后缀集合/-\定位前缀集合的真前缀的后缀集合 == {}
		

	=====
	中间定位算法(针对A;但BC可取部分):
		给定一个地址 指向某个 合法编码 内部符号。

		if 当前符号 <- 单集:
			结束
		addr0 = 当前地址
		addr1 = call 定位首地址 addr0
		addr2 = call 定位尾地址 addr1
		addr3 = call 定位首地址 addr2
		if not addr1 == addr3 <= addr0 <= addr2:
			出错
			addr1 == addr3 <= addr2 < addr0
			addr1 <= addr0 < addr3 <= addr2


		#以下 移动时失败 则 出错
		#定位首地址
		loop:
			case 当前符号:
				*单集:
					出错
				*首集:
					使用 定位前缀判断函数
						*是:
							得到首地址
							出循环
						*否:
							往下
				*尾集:
					往下
				*余集:
					向前移动一格
					继续
		#定位尾地址
		loop:
			case 当前符号:
				*单集:
					出错
				*尾集:
					使用 定位后缀判断函数
						*是:
							得到尾地址
							出循环
						*否:
							往下
				*首集:
					往下
				*余集:
					向后移动一格
					继续

	w = 符号集大小
	u = 单集大小
	h = 首集大小
	t = 尾集大小
	r = 余集大小
	[w == u+h+t+r]
	数值范围
		*[u==w] [h=t=r=0]:
			合法编码 数量有限
			不符合 整数编码 的目的
		*[h>=1][t>=1] [0<=u<=w-2][r>=0]:
			...
			空间效率 < log<w>(w-u)
				[u==w/2]:
					= log<w>(w/2)
					= 1 - 1/log2(w)

	多单元联合前缀
	  [w=2]时 最自然 的 编码方案
		编码方案: “[[:单集:]]|[[:首集:]]{n+2}([[:尾集:][:余集:]][^[:单集:]]{n}[[:首集:][:余集:]])*[[:尾集:]]{n+2}”
		编码长度 = [u!=0]1 | (n+2)*(k+2)
		空间效率 < log<w^(n+2)>((w-u-h)*(w-u)^n*(w-u-t))==n/(n+2) *log<w>(w-u) + 1/(n+2) *log<w>((w-u-h)*(w-u-t)) --> log<w>(w-u)
		[u=r=0][h=t=w/2]:
			空间效率
				>= log<w^(2*(n+2))>(h^(n+2)*t^(n+2))
					= log<w>(w/2)
					= 1 - 1/log2(w)
					[w=2^8]:
						= 7/8
					[w=2^4]:
						= 3/4
				< n/(n+2) + 2/(n+2) *log<w>(w/2)
					= 1 - 2/((n+2)*log2(w))
					= 1 - 4/(2*(n+2) *log2(w))
					= 1 - 4/(起始单元数*每单元比特数)
					= 1 - 4/起始比特数
					= 1 - 1/(2*起始字节数)
					！！！极限值 与w无关
					！！！极限值 只与 起始字节数 相关
					！！！[w==2] 极端情况 照样可用 此 编码方案
					======具现 校验
					[w=2^8]:
						= 1 - 1/(4*(n+2))
						= 1 - 1/(2*起始字节数)
						<- {7/8, 11/12, 15/16, 19/20...}
						起始bit:2*(n+2)*8
							32, 48, 64, 80...
					[w=2^4]:
						= 1 - 1/(2*(n+2))
						= 1 - 1/(2*起始字节数)
						<- {3/4, 5/6, 7/8, 9/10, 11/12, 13/14, 15/16, 17/18, 19/20...}
						起始bit:2*(n+2)*42
							16, 24, 32, 40, 48, 56, 64, 72, 80...
	???证明:在确定4集的情况下，空间效率 最高的编码方案是 单集为空 余集为空 首集与尾集对半 且“[[:首集:]]{n+2}([[:非首集:]][[:符号集:]]{n}[[:非尾集:]])*[[:尾集:]]{n+2}”
		空间效率 < log<w^(n+2)>((w-h)*w^n*(w-t))==n/(n+2) + log<w>((w-h)*(w-t))/(n+2) --> 1
		缺点:起步开销大(至少2n+2)，考虑常见的整数分布下 平均空间效率 低
	=====
	多单元联合前缀 泛化
		* 长度泛化，更多 编码长度
			原先只有:
				编码长度 = [u!=0]1 | (n+2)*(k+2)
			泛化后:
				编码长度 = [u!=0]1 | 2*(n+2) | [r!=0](1+2*(n+2)) | k+2+2*(n+2)
			见 多单元联合前缀之长度泛化
		* 完全序号，将 合法编码的各个单元的前缀 抽出 得到 另一个 编码空间 中的 编码，再与 剩下部分 结合
			原编码 为 ZZ%w 流，编码长度 为 M
			假设 w=q*p, q>=2
			每单元 分解为 前缀 ZZ%q 与 后缀 ZZ%p
			新组合的编码 为 ZZ%q 流，也是 中间重定位 编码
				见 求中间重定位编码在相应编码长度的序号
				得到 该编码 在 相应编码长度M 下的 序号 Q
			剩余部分 组成 整数 P
				[p=1]==>>[P=0]
			得到 整数 W=Q*p^M + P
				[q=w]==>>[W=Q]

多单元联合前缀之长度泛化
	假设 定位前缀 为 “[[:首集:]]{nh+2}”
	假设 定位后缀 为 “[[:尾集:]]{nt+2}”
	假设 [0<=nh<=nt]
	[M := 编码长度]
	[N := 编码长度 为M时的 编码总数]
	[M = nh+nt+4]:
		[N = h^(nh+2)*t^(nt+2)]
	[M = nh+nt+5]:
		[N = h^(nh+2)*r*t^(nt+2)]
	[M = nh+nt+6+k][k>=0]:
		#在中间k个单元中 选择首尾 以隔断可能出现的 定位前缀/定位后缀
		#为简单起见 且 最大化N，避免 首尾 选择 碰撞
		尾 间隔 不得超过 (nh+2)，中间最多(nh+1)首
		首 间隔 不得超过 (nt+2)，中间最多(nt+1)尾
		注意:
			k个中间单元 的 前后 分别是 尾/首
			编码 = 首{nh+2} 尾 单元{k} 首 尾{nt+2}
		假设 安排的 尾 的 位置序列 为 its
		假设 安排的 首 的 位置序列 为 ihs
		[its/-\ihs=={}]

		[nits := len its]
		[nihs := len ihs]
		目标:
			合法的 its,ihs 是否存在
				[qqq k = ?]
			若存在，最小化 (nits+nihs)
				[mmm k = ?]
		[sss k := {合法的(its<k>,ihs<k>)}]
		[qqq k := [len (sss k) != 0]]
		[nnn k := {(len its, len ihs) | [(its,ihs)<- sss k]}]
		[mmm k := mins(nnn k, key=add)]

		[g := gcd(nh+2, nt+2)]
		[m := lcm(nh+2, nt+2)]

		[qqq k][qqq b] ==>> [qqq (k+b+2)]
			# ...首尾 .{k} 首尾...
			# ...首尾 .{b} 首尾...
			# ...首尾 .{k} 首尾 .{b} 首尾...
		[qqq k][qqq b][z1,z2 >=0][z1+z2>=1] ==>> [qqq (-2 +z1*(k+2) +z2*(b+2))]
			# ...(首尾 .{k}){z1} (首尾 .{b}){z2} 首尾...
			#
		[qqq 0]
		[z>=0] ==>> [qqq (2*z)]
		[qqq k][z>=0] ==>> [qqq (k+2*z)]
		[! qqq 1]:
				# ...首尾 首 首尾...
				# ...首尾 尾 首尾...
				# ...首尾 余 首尾...
				[nh=nt=0][r=0]
		[! qqq k] <==> [k%2][nh=nt=0][r=0]
		[qqq k] <==> [! [k%2][nh=nt=0][r=0]]
		[qqq k]:
			!![0<=nh<=nt]
			*[nh=nt=0]:
				*[k%2]:
					!![qqq k]
					[r!=0]
					#*[k=1]:
						"[[:r:]]"
					#*[k=3]:
						"[[:r:]][[:r:]][[:r:]]"
						"[[:r:]][[:r:]][[:t:]]"
						"[[:h:]][[:r:]][[:r:]]"
						"[[:r:]][[:h:]][[:r:]]"
						"[[:r:]][[:t:]][[:r:]]"
						"[[:r:]][[:h:]][[:t:]]"
						"[[:h:]][[:r:]][[:t:]]"
						"[[:h:]][[:t:]][[:r:]]"
					在k格中选出(1+kr)格，放r
					如果 边界处 有空格，有且只有 一种放置 h,t 的方式
					如果 非边界处 有空格，有且只有 两种放置 h,t 的方式
					* 完全包含所有可能的排列
						计算比较 复杂，见 求中间重定位编码在相应编码长度的序号，w=3 相应 超级符号集{h,t,r}
					* 简化
						[z:=(k-1)///2]
						* 只使用 "r(ht){z}"
							r*(h*t)^z
						* 只使用 "(ht){z1}r(ht){z2}"
							(z+1)*r*(h*t)^z
						* 只使用 "(ht){z1}r(ht){z2}|(ht){z1}hrt(ht){z2}"
							k*r*(h*t)^z
						* 只使用 r 只插入 前2^_个位置 "(ht){z1}r(ht){z2}|(ht){z1}hrt(ht){z2}"
							2^floor_log2(k) *r*(h*t)^z
							#假设 r,h,t 皆2的乘方
							#其实也无所谓，整数范围 无须是 2乘方
					* 完全忽略，禁用 奇数k，只使用 偶数k #推荐 bm_dps_m2_smpl

				*[2\\\k]:
					* 完全包含所有可能的排列
						同上，但多一种情况，即下面的 简化 情形
					* 简化 #推荐 bm_dps_m2_smpl
						"(ht){k/2}"
			*[nt!=0]:
				[mmm k = ?]
				见 求多单元联合前缀之长度泛化后的首尾钉子位置



求多单元联合前缀之长度泛化后的首尾钉子位置
	#首钉 是 "[tr]" = !首
	#尾钉 是 "[hr]" = !尾
	#无钉 是 "[htr]"
	#以排除 [nh=nt=0] 这种可能导致 [! qqq k] 的情形
	problem:
		input:
			k,nh,nt
				k>=1
				0<=nh<=nt!=0
		output:
			min len(its++ihs)
			its :: [ZZ%k]
			ihs :: [ZZ%k]
				0 <= its[i] <= k-1
				0 <= ihs[i] <= k-1
				its[i] != ihs[j]

				0 < its[i+1] - its[i] <= nh+2
				0 < ihs[i+1] - ihs[i] <= nt+2
				0 < its[0] - -1 <= nh+2
				0 < ihs[0] - -2 <= nt+2
				0 < k+1 - its[-1] <= nh+2
				0 < k - ihs[-1] <= nt+2
				[! its] ==>> [0 < k+1 - -1 <= nh+2]
				[! ihs] ==>> [0 < k - -2 <= nt+2]
				==>>
					[!!its]or[k<=nh]
					[!!ihs]or[k<=nt]
	solve:
		*[k<=nh]:
			[its=ihs=[]]
		*[nh<k<=nt]:
			[!!its]
			[ihs=[]]

			let [its=[it0:k :nh+2]]

			!![0 < its[0] - -1 <= nh+2]
			[0 <= it0 <= nh+1]
			!![0 < k+1 - its[-1] <= nh+2]
			[its[-1] >= k-nh-1 >=0]

			!![0 <= its[i] <= k-1]
			[0 <= it0 <= k-1]
			[k-nh-1 <= its[-1] <= k-1]
			[0 <= it0 <= min(nh+1,k-1)]

			[?x][its[-1] = it0 + x*(nh+2)]
			[(k-nh-1-it0)/(nh+2) <= x <= (k-1-it0)/(nh+2)]
			[(k-1-it0)/(nh+2) - (k-nh-1-it0)/(nh+2)
				= nh/(nh+2)
				< 1
			]
			[@it0. x 有1或0解]
			[x有1解]<==>
				[ceil (k-nh-1-it0)/(nh+2) = x = floor (k-1-it0)/(nh+2)]
				[floor (k-nh-1-it0 +nh+2-1)/(nh+2) = floor (k-1-it0)/(nh+2)]
				[floor (k-it0)/(nh+2) = floor (k-1-it0)/(nh+2)]
				[(k-it0)%(nh+2)]
				!![0 <= it0 <= nh+1]
				[it0 != k%(nh+2)]
			[x有1解]<==>[it0 != k%(nh+2)]

			*[0 <= nh <= k-2]:
				[0 <= it0 <= min(nh+1,k-1) <= nh+1]
				!![x有1解]<==>[it0 != k%(nh+2)]
				[x有1解]<==>
					[it0 <- [0..nh+1]][it0 != k%(nh+2)]
			*[nh == k-1 >= 0]:
				[0 <= it0 <= min(nh+1,k-1) <= k-1 = nh]
				[it0 != nh+1 = k%(nh+2)]
				[x有1解]<==>
					[it0 <- [0..nh]
					[it0 <- [0..nh+1]][it0 != k%(nh+2)]
			[x有1解]<==>
				[it0 <- [0..nh+1]][it0 != k%(nh+2)]
			[it0 <- [0..nh+1]][it0 != k%(nh+2)]:
				# x = ??f it0??
				[x = floor (k-it0)/(nh+2) = floor (k-1-it0)/(nh+2)]
				[q,k_ = k/%(nh+2)]
				*[it0 <- [0..k_-1]]:
					[x = q = k//(nh+2)]
				*[it0 <- [k_+1..nh+1]]:
					[x = q-1 = -1 +k//(nh+2)]
				[不同 it0，len its 最多变化1]


			[len its = x+1]
			!!min len(its+ihs)
			to min x
			to max it0

			[dt = [(nh+2)\\\(k-nh-1)]]
			[it0 = nh+1-dt]
			[it0 = nh+1-[nh+1==k%(nh+2)]]
			[x = floor (k-it0)/(nh+2)
				= floor (k-(nh+1-dt))/(nh+2)
				= floor (k-nh-1+dt))/(nh+2)
			]
			[x = floor (k-1-it0)/(nh+2)
				= floor (k-nh-2+dt))/(nh+2)
			]
			[x = floor (k-nh-1))/(nh+2)]
			[len its = 1+x = floor (k+1))/(nh+2)]
		*[nt<k]:
			[!!its]
			[!!ihs]
			!!同上
			[len its >= floor (k+1))/(nh+2)]
			[len ihs >= floor (k+1))/(nt+2)]

			[g := gcd(nh+2, nt+2)]
			[m := lcm(nh+2, nt+2)]

			*[g>=2]:
				let [its=[it0:k :nh+2]]
				[it0 <- [0..nh+1]][it0 != k%(nh+2)]
				[不同 it0，len its 最多变化1]

				let [ihs= reverse $ map (k-1-) [ih_:k :nt+2]]
				[ih_ <- [0..nt+1]][ih_ != k%(nt+2)]
				[不同 ih0，len ihs 最多变化1]

				[its[i] = it0 +i*(nh+2)]
				[ihs[-j-1] = k-1 -ih_ -j*(nt+2)]

				[its[i] != ihs[-j-1]]
					<==>[it0 +i*(nh+2) != k-1 -ih_ -j*(nt+2)]
					<==>[j*(nt+2)+i*(nh+2) != k-1 -ih_ -it0]
					<<==[! g\\\(k-1 -ih_ -it0)]

				!![nt>=1]
				[ih_ 至少2个候选值]
				如果 [g\\\(k-1 -ih_ -it0)]，只需改变 ih_ it0 任一个的值即可 使之不成立
				选择谁改变，以最小化 钉子数目 为准

				[default_it0 = nh+1-[nh+1==k%(nh+2)]]
				[default_ih_ = nt+1-[nt+1==k%(nt+2)]]
				[default_len_its = floor (k+1))/(nh+2)]
				[default_len_ihs = floor (k+1))/(nt+2)]
				*[! g\\\(k-1 -default_ih_ -default_it0)]:
					[it0 = default_it0]
					[ih_ = default_ih_]
					[len(its++ihs) = default_len_its+default_len_ihs]
				*[g\\\(k-1 -default_ih_ -default_it0)]:
					*[nt!=k%(nt+2)]:
						[it0 = default_it0]
						[ih_ = -1 +default_ih_]
						[len(its++ihs) = default_len_its+default_len_ihs]
					*[nh!=0][nh!=k%(nh+2)]:
						[it0 = -1 +default_it0]
						[ih_ = default_ih_]
						[len(its++ihs) = default_len_its+default_len_ihs]
					*[nt==k%(nt+2)][[nh=0]or[nh==k%(nh+2)]]:
						[it0 = default_it0]
						[ih_ = -2 +default_ih_]
						[len(its++ihs) = 1 +default_len_its+default_len_ihs]
						这是最糟糕的情形，但也就多了个钉子
						[nh!=0]:
							[m\\\(k+2)]
						最坏条件:
							[m\\\(k+2)]or[nh=0][nt\\\(k+2)]
				[len(its++ihs)
					= default_len_its+default_len_ihs
					= floor (k+1))/(nh+2)
					+ floor (k+1))/(nt+2)
					+ [[m\\\(k+2)]or[nh=0][nt\\\(k+2)]]
				]

			*[g=1]:
				[nh=0][nt=1]:
					先安排 首钉:
						尾 ？ 尾 ？ 尾 ？ 尾 ？
						尾 首 尾 首 尾 首 尾 首
					先安排 尾钉:
						首 ？ ？ 首 ？ ？ 首 ？
						首 尾 尾 首 尾 尾 首 尾
					[k=1]:
						# ...首尾 ？ 首尾...
						# ...首尾 尾 首尾...
					[k=2]:
						# ...首尾 ？ ？ 首尾...
						# ...首尾 ？ 尾 首尾...
						# ...首尾 首 尾 首尾...
					[k=3]:
						# ...首尾 ？ ？ ？ 首尾...
						# ...首尾 ？ ？ 尾 首尾...
						# ...首尾 首 尾 尾 首尾...
						# ...首尾 尾 首 尾 首尾...
					全是 钉子
				[nh=0][nt=2*z+1]:
					按 [nh=0][nt=2*z] 处理
				#[nh>=1]:
				[nh=1][nt=2]:
					# ...首尾 无 首尾...
					# ...首尾 无 尾 首尾...
					# ...首尾 首 无 尾 首尾...
					# ...首尾 首 无 尾 无 首尾...
					# ...首尾 无 首 尾 无 尾 首尾...
					# ...首尾 无 尾 首 无 尾 无 首尾...
					# ...首尾 首 无 尾 首 无 尾 无 首尾...
					
			???TODO
			感觉有点复杂
			反正 常用的是 [nh=nt][g>=2] #bm_dps_m2_smpl
			就不再 探究 [g=1] 的情况




求中间重定位编码在相应编码长度的序号
	构造 正向有限状态机:
		query :: 状态 -> (是否刚经过定位前缀,是否刚经过定位后缀,是否曾经过定位前缀,是否曾经过定位后缀)
			曾经过 不含 刚经过
		feed :: 状态 -> 符号 -> 状态
		st0 :: 起始状态
	计算 在确定 编码长度 及 前缀 的情况下 合法后缀数量
		编码长度 -> 前缀 -> 合法后缀数量
		O(编码长度+后缀长度*符号总数*状态总数)
		f M prefix =
			if len(prefix) > M:
				return 0
			else:
				st := st0
				for i,c in enum prefix:
					if st 刚经过定位后缀:
						return 0
					st := feed st c
					if st 刚经过定位前缀:
						if prefix[:i+1] 不是 定位前缀:
							return 0
				if len(prefix) == M:
					if st 刚经过定位后缀 and (st 刚经过定位前缀 or 曾经过定位前缀):
						return 1
					return 0
				else:
					st2count = {st:1}
					for _ in range(M-len(prefix)):
						st2count_ = {}
						for st, count in st2count.items():
							if count==0 or st 刚经过定位后缀: continue
							for c in 符号集:
								st_ = feed st c
								if st_ 刚经过定位前缀 and 曾经过定位前缀:
									continue
								st2count_[st_] += count
						st2count = st2count_
					return sum(count for st, count in st2count.items() if st 刚经过定位后缀)
	求中间重定位编码在相应编码长度的序号
		ord 符号 => 合法编码 -> 序号
		O(编码长度*符号总数*状态总数)
		g s =
			M = len s
			def _do(st, count, c)
				st_ = feed st c
				if st_ 刚经过定位前缀 and 曾经过定位前缀:
					return
				st2count_[st_] += count

			st2count = {st0:1}
			st_top = st0
			for _c in s:
				st2count_ = {}
				st2count[st_top] -= 1
				for c in [.._c]:
					_do(st_top, 1, c)
				for st, count in st2count.items():
					if count==0 or st 刚经过定位后缀: continue
					for c in 符号集:
						_do(st, count, c)
				st2count = st2count_
				st_top = feed st_top _c
				assert st2count[st_top] > 0
			return -1 +sum(count for st, count in st2count.items() if st 刚经过定位后缀)








字节环境下 中间重定位 的 约束 分析
	假设要编码的是在内存中以 二进制 表示的整数
	考虑上述4集
		着眼于“值”:
			如C字符串以'\0'结尾
			缺点:编解码速度慢
			编码方案: '\xFE[\0-\xFD]*\xFF'
			空间效率 < log<256>(254)==log2(254)/8 > 0.99858
			编码方案: '\xFE{n+2}([^\xFE].{n}[^\xFF])*\xFF{n+2}'
			空间效率 < log<256^(n+2)>(254^2*256^n)==log<256>(...)/(n+2)==n/(n+2) + 2*log<256>(254)/(n+2) --> 1
		着眼于“位”:
			编码方案: '\b00~\b1~*\b01~'
			空间效率 < 7/8
			编码方案: '\b1~{n+2}(\b0~.{n}\b1~)*\b0~{n+2}'
			空间效率 >= 7/8







{1..6,14..31} 共24个
	字节 环境下的 整数编码
		对比:
			*gb18030
				128+126*190+126*10*126*10
			*utf8
				"\b0~|\b1{n+2}0~\b10~{n+1}", n<-[0..2]
					==>> (n+2) bytes, (5-n)+6*(n+1)==5*n+11 bit
				eg: [n==1]: "\b1110~\b10~\b10~"
			*utf16
				注意:不含 代理字符
	考虑到 可能 用于 编码 unicode 文本
	在1..4字节的 合法编码 上，尽量选择 高频字符
		单字节 除去 非ascii字符 及 ??不常用的{1..6,14..31}
			256-128-?24
				[128..104]
		#注意：无意字符、私用字符 可以出现，代理字符 不得出现
		双字节 除去 代理字符 及 ??基本面无意字符、??基本面私用字符
			65536-2048-?(32+2)-?6400
				[63488..57054]
				log<2^16>(57054) > 0.9875
				[log<2^16>(x) == 6/8]:
					[x = 2^12 = 4096]
				[log<2^16>(y) == 7/8]:
					[x = 2^14 = 16384]
					#太少
	单集={0..127}-{1..6,14..31}={7..13,32..127,0}
	u = 104
	空间效率 < log<w>(w-u) = log<256>(152) > 0.90599
	==






	=====ascii104
	=======
	ascii[0..127]中无 unicodedata.name 的是
		{0..31,127}
		=====
		除去要保留的 {7..13,0,127}
		剩下 {1..6,14..31} 共6+18=24个
	b'\a\b\f\n\r\t\v\x0b'
		b'\a\b\f\n\r\t\v'
		b'\x07\x08\x0c\x0a\x0d\x09\x0b'
		[7, 8, 12, 10, 13, 9, 11]
		{7..13}
		=====from:
		bytes.isspace()
			b' \t\n\r\x0b\f' (space, tab, newline, carriage return, vertical tab, form feed)
		2.4.1. String and Bytes literals
			b'\a\b\f\n\r\t\v'

==== utf8
	\b0~
	\b11{n}0~ \b10~{n}
		# 1<=n<=3
	bits: 7, 11, 16, 21

注意：无意字符、私用字符 可以出现，代理字符 不得出现
代理字符 Surrogates area
	2048:
		U+D800..U+DFFF
无意字符 Noncharacters
	66 noncharactercode points
		32
			U+FDD0..U+FDEF
		34=17*2
			:The last two code points of each plane are noncharacters:
				U+[00..10]FFF[E-F]
基本面私用字符
Private Use Area (PUA): U+E000..U+F8FF
	total of 6400 private-use characters
高位面私用字符
Supplementary Private Use Areas
	Supplementary Private Use Area-A : U+F 0000..U+F FFFD
		Plane 15
	Supplementary Private Use Area-B: U+10 0000..U+10 FFFD
		Plane 16
	131068 == (2**16 - 2) * 2

代理字符
Surrogates Area: U+D800..U+DFFF
	2^11
	used only in the context of the UTF-16 character encoding form
>>> '\0'.encode('utf-16be')
b'\x00\x00'
>>> '\U0000ffff'.encode('utf-16be')
b'\xff\xff'
>>> '\U00010000'.encode('utf-16be')
b'\xd8\x00\xdc\x00'
>>> '\U0010ffff'.encode('utf-16be')
b'\xdb\xff\xdf\xff'
>>> '\U00110000'.encode('utf-16be')
  File "<stdin>", line 1
SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-9: illegal Unicode character
>>> c=0x11_00_00
>>> chr(c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: chr() arg not in range(0x110000)
>>> chr(c-1)
'\U0010ffff'
>>> '\U0000d800'.encode('utf-16be')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'utf-16-be' codec can't encode character '\ud800' in position 0: surrogates not allowed
>>> '\U0000dfff'.encode('utf-16be')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'utf-16-be' codec can't encode character '\udfff' in position 0: surrogates not allowed
>>>






===gb
GB2312-1980
	双字节，不含ascii，共 7445=6763+682
	====
	GB 2312 标准共收录 6763 个汉字，其中一级汉字 3755 个，二级汉字 3008 个；同时收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的 682个字符。
GBK
	双字节，不含ascii，共 21886
	====
	GBK 共收入 21886 个汉字和图形符号，包括：
		*GB 2312 中的全部汉字、非汉字符号。
		*BIG5 中的全部汉字。
		*与 ISO 10646 相应的国家标准 GB 13000 中的其它 CJK 汉字
		#以上合计 20902 个汉字。
		*其它汉字、部首、符号，共计 984 个。
GB18030-2005
	不含ascii，共 1609486==21886+1587600
		160万强
	单字节 ascii
		128
	双字节 [0x81..0xFE][0x40..0x7E,0x80..0xFE]
		#python 证实 gb18030 如此
		23940==126*190
			> 21886
			兼容 gbk
			但是 python 实测 gbk 只有 21791 个，少了 95==21886-21791
	四字节 [0x81..0xFE][0x30..0x39][0x81..0xFE][0x30..0x39]
		1587600=(126*10)^2
		====
		gb18030(0x8130_8130) == unicode(0x80)
		"\U000000A3" = b"\x81\x30\x84\x35".decode("gb18030")
		###since '\xA4'.encode('gbk') == b'\xa1\xe8'
		###ascii&gbk are excluded by gb18030:4bytes
		"\U000000A5" = b"\x81\x30\x84\x36".decode("gb18030")









ascii2 < ascii4 < ascii8 < ascii16 < ascii32_09 < ascii64
ascii32_az < ascii64
ascii64 < ascii104 < ascii

=======见 上面 ascii104
		除去 {1..6,14..31} 共6+18=24个
=======ascii64
	如果 单元码 只有 64个，选出 最高频的ascii
	'\x00\x01\x02\x03\x04\x05\x06\x07'
	'\x08\t\n\x0b\x0c\r\x0e\x0f'
	'\x10\x11\x12\x13\x14\x15\x16\x17'
	'\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f'
	' !"#$%&\'()*+,-./0123456789:;<=>?@'
		33 # \'
	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
		26
	'[\\]^_`'
		6 # \\
	'abcdefghijklmnopqrstuvwxyz'
		26
	'{|}~'
		4
	'\x7f'

	33+26+6+26+4 = 95
	128-1-8*4 = 95
	95-64 = 31
	不考虑 \0\t\n 的话，也要排除 31个
	去掉 大写字母，还要排除 5个
	- "^$!`~"
	- "?@#"

	====64=3+95-26-5-3
	"[\0\t\n !-~]" \\ "[A-Z^$!`~?@#]"
	'\0\t\n "%&\'()*+,-./0123456789:;<=>[\\]_abcdefghijklmnopqrstuvwxyz{|}'

=======ascii32
	参见 ascii64
	* ascii32_09
		除去 小写字母，还要除去 6个
		- "\0\t\n&|\'"
		' "%()*+,-./0123456789:;<=>[\\]_{}'
	* ascii32_az
		保留 小写字母，除去 数字，还须 加入 6个
		+ " (),\\_"
		' (),\\_abcdefghijklmnopqrstuvwxyz'

=======ascii16
	参见 ascii32
	保留 数字，还须 6个
	+ " (),-/"
	' (),-/0123456789'
=======ascii8
	参见 ascii16
	' (),-/01'
=======ascii4
	参见 ascii8
	',-01'
=======ascii2
	参见 ascii4
	'01'




=====汉字频率？？
	hanzi1024 # bm_dps_s1x323 2byte->10bit
	hanzi2048 # utf8 2byte->11bit
	hanzi4096 # bm_dps_s2x222 2byte->12bit
		ascii ???
		常见中文符号 ???
		见 下面 汉字按字频排序

	见 上面 GB2312
		一级汉字 3755 个，二级汉字 3008 个
	见 汉字单字字频总表.txt
		1 的
		16 以
		32 要
		64 成
		128 等
		256 元
		512 阿
		1024 犹
		2048 雍
		4096 菏
		8192 臇
		...
		...
		12041 黤
		感觉这排序似乎有问题，“菏”字前后 生熟混杂，看看 中华字经4000字

====汉字按字频排序 from 汉字单字字频总表.txt
的一不是了人在有我他这为之来大以
个中上们到说国和地也子时道出而要
于就下得可你年生自会那后能对着事
其里所去行过家十用发天如然作方成
者多日都三小军二无同么经法当起与
好看学进种将还分此心前面又定见只
主没公从知使部本动现因开些理长明
样意已月正想实把但相两民她力文等
外第王高问太头情西机它回并间手四
关重应工性全门老点身东由何向至物
战业被政内五儿及入先己安或利很最
书制美山体什新话名曰合加世平水常
果位信度产立声南代走女言马金处便
通命特给数次海今表原斯义各州化口
任真才几教官少司德解神则必兵气打
员再论别听提万死更比受百做尔即元
报直白总非建夫北未张令反士师许条
变系计且认目光管路接城活保结题却
指感难量务治取场思电空边统件期克
帝亲复住请市六放风资求史色形望传
八府眼领清决笑告叫队强往区交武达
社权科九设李观记改展字故品议象花
七完林基服带据界云觉像院飞远收石
众车候类程转共千式失流每该朝始连
术近格济干运怎步台让江河识规拉切
极持若英争功深备造阳快集布尽周宗
病华称罗爱导确呢办节根击商陈火兴
京注虽杀父存臣准广首乎具甚黄满容
单联调吃古算坐早引须离证约母组房
曾似易随精视尚断乃影除青初息守党
半县轻质语越况举皇钱历留乐章照器
写团诸闻亦足余整价号级参示支红阿
消图星落礼营增土际致志夜需皆左究
汉念既送显置亚推居列君包技线弟客
委终选龙势考右属酒农片希破谓喜费
谈音查专止吗找食装绝答敌害密研刘
依按久宝攻企案察黑突倒局投衣愿省
欲率严待归医玉船奇护卫岁律标罪吧
群春响仍某细承拿施急职另敢跟讲防
独责较威苏双善校友围仅纪族谁惊底
孩革维巴供斗降卷姐封构站验苦差刻
益派紧料异例祖宫乱素怕男效般段福
银晚宣户游香采修娘木态够划续境米
假微试伤刚状兰诉助征胜竟项继爷疑
印速齐低室退脸限热田值怀郎纳氏景
执型欢毛免略批犯否灵药射监织陆句
孙兄罢劳获旧网预忙贵错树追临伯育
普诗副充永财适圣血弹拜雷妇哪源遂
创胡习负策败宋御讨富尼范球秋冲恩
哥寻恶停良股险波刺述谢环莫脑草忽
侍静散判养积遣怪耳镇登遇恐唐堂诏
著幸排简宁升检铁角顾村读挥矣冷模
佛杨梦救阵哈暗买督楚配痛授肯雨占
楼呼顺阴吾奏固皮警甲担妈坚阶忠背
姓索穿吴凡吉激审剑层洲脚乡沙托奉
沉亡康宜超谋演协湖姑赵付班招夏掌
减伊妻鲁野释亮顿录丁移危税座优烈
卡丽遗画屋您鱼慢露啊端徒坏杂渐藏
压贼温卿帮松换侯抗午郡洋席艺禁赶
牛申仙误钟块饭迎货补博智仁款毕延
隐私谷附骑郑殿叶虎载航控刑荣央概
庄岛脱介盖序秦庭词睡召怒枪跑虑靠
味献曲笔雪份仪困庆旁互灭梁园评短
川编探歌乘蒙鬼欧洛烟尊休朋典架犹
徐秘逃核雄版勒泽掉魏刀缺均摇喝敬
卖损卒括域迁测虚逐毫避借辞牙额岸
赐予舍洞扬湾馆舰鼓盛巨板材鲜输遍
肉含择秀毒篇兼婚呀妹伦访骨陵弄诚
炮盘旅店销疾俄末贤孝哭床吏健朱戏
票晋韩岂迹伏忘剧奔顶油跳弃睛辛彼
厚练暴训丝纸珠尤丈束唯嘴港吸孔弱
折灯震替诺翻塞梅舞丹赞遭廷熟雅疗
婆庙厂库袭叔尝凤侵赏抚忍醒默拥迫
绿页奥勇街昌缘累玄轮抱窗抓废冰振
童丰玩宽萨夺杜焉潜趣抵隆符乌役俱
伙炸塔罚茶坦彩曹泰叹础途奶寒残寿
患奴晓恨悲猛圆缓冬丧帅软握纵巡筑
饮崇贾洪耶操烧妙赛摆尉宇麻稳惟粮
森绍陷杰偏孤违悉毁援纯巧横迷爸旨
闲俗番季贝聚亿套灾泪忧狂喊戴纷透
蒋析浪盟薄殊阻竞旗闪柳姆扩允驾混
僧植哲穷乙埃旦伟桥珍促嘉烦燕祭墙
径购拍尺伸鸟仲挂币洗贫启距劝辰盗
努桌仆染厅针疏贸荒裁迅阁惠迟沿享
闭侧拔贡凶捕唱措丞抽课闹尾络杯衡
翼汝稍愈蓝颜邪瑞丑宿壁羊芳售倾咱
冒瓦麦宾魔赤摩硬署寺牌恰魂偷紫淮
弗菜莱涉驻狱孟昭吹镜狗融拒渡骸惧
甘肃培冠彻井俊骂触订赖怨搞仰恭隔
爵朗详译净枝繁侠浮奋汇暂吕奖幽垂
耐津宪眉戒啦签邦宰颇讯伴壮灰帐昨
厉籍贯贺惯挑鸡奈伐偶惜胆陛淡旋沈
懂凭辈虫岳障倍仇萧辩曼妖赋卢抬仿
债赴泉汽幕播恢竹奸零潮呆朔刊禄桑
尸汤鸣幼悄撤斩炎鼻箭慈荡泛郭缩扶
艾赠玛昏映腰晨豪貌赫描岩袋胸池勤
祥隶穆粗裂荷凉症汗贞彭敏寄租爆哀
润舒腿册轰掩祝祸摸忆偿抢怜摄牧丙
绪逼傅乏堆庚辅瞧尖董惑扰趋韦黎哉
佳返阅屈吐薛圈扫驱墨碎吓估劲冯锦
慰肩醉剩逆盐邓递粉牵辽遵陶翰寇悦
唤遥艘扎乾叛碰污伍叙峰饰佩绕溃慌
糊匹伪腹挺幻辑撒贴泥媒壬慧仔葬胞
乞亭尘码欣邻恋辆焦嗣乔呈霍拟箱跃
仗莲覆锁羽咸铺陪爬戊勿飘仓诛漫夷
悟撰愤辉滑幅廉宅丘寅艇谕柔迪弥扑
撞寸胁荆蛋巳频唬矿契腾插碍储锋龄
盾兽洁桃朕袁餐惨绩儒馀谏磨搜拖勃
舟诊豫骗聪酸屯综堡亏牢鉴凯昔颗殖
慎夕癸柱甫袖宴衰琴铜苍菲液桂愚矛
励夹歇拾翠堪踪割疲宙掠滚腊埋酉佐
欺卯亥捉妃谨蛇狄贪厌蒂耍帕截蔡柏
券哩鸿敦溪蛮裕朵匆秩庶猎猜沟邑涂
弘崔逊劫跌荐寨践凝浅辖坡狼牲循肥
逢诱押坛玻侦忌恼钦霞浑畏翁殷卧询
丢键兹躲跪饥郊揭邮履枢彦霸悔蜀窃
慕凌戌抑桓械雾臂拢卜葛浓祀愁贷脉
捷嫌阔鞋拨艰驶漂齿椅斜墓届瓶燃狠
咬屏爹陕昆咐驰寂辨丛疯稿辟岭剂辱
邀览帽尹腐寡悬敕誉嫁稀削闷熙粒於
襄钢搭浙徽兆锡戈豆俩纲耕浩宏扣妨
涌吟筹鼠娜躺鹿勋扇斤抛碧妾熊崩疼
敲渔纠庞恕暖澳恒逻弓挤添炼晃搬倘
盈湘肚猪卑苗泄柴瑟瓜茂谦迈烂弯踏
梯锐赦茫讼拳耀衙禅钻峡郁阙冤妄徙
虏耗轨吞淫虞杖携脏汪舅斥嫂呵戚谥
吩斋宠羞吊嘛肠肝轿雕湿琼娇昂弦顷
沃舆猫笼晕潘姻诣勾碗姿绳狐肌渊雍
庸吨鼎喷姚勉毅赔靖雇屡跨泣催卓擦
畜稽纹漏妥姊囊饶芬穴抖姨披漠旱仕
滋乳舌绣滴扁浦俺瘦扯竭惩枚丫僚涨
晶兮誓酬唇晴疫肿胖擒拘粹戎煤蔽弊
饿欠聊禀舱肤痕缝韵冀怖鹏痴填鲍绘
糖扭劣赢缴巾酷谅扮贱疆鹰泊聘芝磁
诞焚侄菌缠拦朴厥纽柯炉溜抄趁耻渴
衔档罕拼鞭娶蒲倚秒匠夸咽岗逸伞傲
挣颠寓挖串蜂顽渠啥牺翔屠巫窝兀辄
刷址歼挡肆谒函簿悠昼饱艳骄灌娃寝
坠剥睁腔廊涛鹤罩盆囚祠衍扔隋璃帘
烛赌凑冈菩龟媳眠俘钩绵袍苟旬癌耸
狭诈陀姜後驳轩蕃遮蓄樱玲衫匪挨巢
拆纤砍胎厮柜哦壳擅铭婴铃嘱糟棋彪
尿杭硃茨厨叩愧饲贬肖衷颤俯骤逮逾
暮庐裴媚捧畅黛喘矩坊棍抹胃杆膀皱
爽莉氧谊柄栏盒孕躬苑摘哼诵滩钞猿
猩傻卵拱塘毋冢绢薪碑挽谭亨堤坟喂
妆枯眨盯颈婢盼棒惶嚷愉肺棉禧隙霜
坑煌崖浴裤惹吻氛臭吵恳捐闯翅懒胶
膜惺祈舜蜜募慨冻喉泡鄙叉亩钗擢脆
洒喻瞪窦甜帛雀棺矢莽斑拐浚矮姬滥
筒蓬硕瞬锅叠帖壶纱薨垒魁摧虹枕茅
俭蝶麟剪凄颂豹俟逝讶庵掘禽昧阎猴
澄匡塑吁脂伺匈雁滞漆乖旺傍鸭弼倦
铸膝颁歧尧谎攀棵粟劾仑祐瞒谐敛颖
倡鹅撸峻链戍歉奠骚厢宦栽巷溢懿谱
裹陌宛裳缚煞胀骇璇脊藤萍榜兔裙嗯
驴咒赚敝厘睿禹辏钉咨焰筋遁玑芒芦
淳浸恍讽脖盲稷詹蠢淋怯吼撑酌矗泼
葡枉沾窜哄竖阐琳贰婿皋刹淌账粘淹
勘眷狮莎祷歪唉谬躯憾栖挪犬刮裸邵
嘻钓摊蝗侨梗掏妮娥剿秉堵菊瑶拓窄
斌脾爪戮钧馈暇杏淑啸丸炭屁凰靡藉
瞎虔魄拂萄笃瘤佑怠鸦睹贩怔雌斧窥
潭圳厦毙玫驿刃饼卸搁冥绅框倪秃陇
羌嵩叮铮妓颍愣辜砸揖恃晌剖莺褐蒸
劈哨兑缄呜壤撕咳羡晏诬砖恤掷摔鸾
棠喃涕譬滨溶巩蚀晰堕舶庇瓷啼虐桩
绑珊绥嘲瑰梳匿讳涵篮喀妒敷耽哑桶
梢绛纬垣藩坎稣笛晁贿焕喇暑掀膊栋
厄谴肢彰胤搏晦哎笨钥旷兜咕帆株屑
躁谟赎惭僵涯荩轴挫邢筵奎耿佣凿碌
绰娟蹈陡腺邱奚啡捏涅瞻倩酰诡窍奢
诘挟窑盏诰匀谍淘蚁汴魅踢藻娱栗怡
灿稻讫朽坤棚槐蕴哟饷沧醇螺垄骆煮
拙桐芙衬沼馨甸畔樊侮蹲蚕辣搅觅椎
驼嫩弧褚矫趟谣敞霉蓉澹喧绸榻咏纺
蜡殆宵匙孽荫狡冶迦谜腥鄂陋噢滔稼
幢罐绞沛熬膏哇肾姥卦稚塌汲哗沮赂
坝捆挠咎磕遏赃嗽梨彬芯侣谑苹捞叭
捣浊糕迄岑辐鞍嘿灼璋敖俏遽恚邸鳎
咖伽裘啤晒闺拣嗟懈忿旭讥赈浆跋愕
旌丐颐孰嫉螅婉畴删寞韶渭瑜砂缕泌
闰灶霄徵逗沸咧裔眩僻簇褒萌璧膨莹
酥蹄沫荽亟憎荧颊霆陨踩牟锻烁斟汁
睦晖札篷腕鳞诫菱痒鳌胳缅铎黜枣剌
蔑悼洽泻凳皓雯叱膳诀湛衅叨茎沦牡
阮纾祚泳恪悖摹岐鸳迭歹奕冕垫狸偃
襟诧翘肇逵拯噪漕龋辕颉俾冉嗓嚼炒
攸竿虾铅贮栅邹匣锤撇荨蔬偕缸浇鲸
佥拧搂嘶徊洌岚逛燥渗溺胧豢镑尬粤
棘巍惮倭廖蛟檀孜嵌臧毓澜钮揽汀倏
帷绶坪骁绮缀缎弩蹦髦翟俸瘢瞥籓痪
嗜屿椋帜绒汹麽乍祁禾廓僭皂叟哺夭
烤蛛蕉挹榴驯峭闵畿琐伶慷檐靴杉惕
辍睢琦炕侈飨煎泾樵瞄酿蝇醋喽癫俞
羁梭潞逞酋玺葱猓凹扼涡絮窟澡欤秽
鞠麾曜晤萝佟缉甩颓沂纂沁郝胥镖牒
绫苛汾埂豁谤祗埽琛芽俚鞘矜掖煜呕
琢俨缔呐惫幌肴骏渎笺锭缪诲聂绷毯
扒鸯撼炀蔚梧戟琅悍闾甥鹊阀缆荀闽
粥嗅啵簦斛溯垃彝尴迥圾瞅轼怼鸽隘
亢氐渺髓蔓阑氢穑贻黯纶辇胄沐笠崎
粪霖芸碟兢椒迳鹃棱鬓揉拚嚣徘袄挚
耆琉隅沪谩朦戳茵腻疮垦檄碳蝉娄阜
蟹琏垮诙嘟觯趾幔捡赍啪懦咦挛炳酣
狈恣铩箫嗡凛簧竺榆圭窘笙揣斐伲咯
婶嫡绎梓鞅涩翊褂袜釉迂悯扛侃罔饬
唷硫蠕厕祯氯琪纣宸墟韬蕊耄捍萎涤
砦懊峨浣蠲潼凸棕攘徇礁炯僖龚帧粲
酱忖臾栈桨唾芜翩喔宥揪瘫孚曳咚赡
盔泗瑾熏侥聋渲篱毡卤汰衮柬遐羲寥
钊拇镶匾膺昊吱炽奄罹伎墅蓟庾渥肮
拷膛缮嘀濮佞氨闸郢扈壕骠脯酝瓣拽
铀壑狩忒猾嗤洹漳疤椭瑛夔绽摺槛锥
浏鬟氖凇锣幡蚊孺犀擎蹋慑咋熄楷烫
怅丕拴磷圃涧肘堑矶迩瞿淄槽袅缗岱
饵谗眯桧嘎鳍笏鄴殴篡呻谪潇瑚葫琶
蕙鲤嫔谌驹晟赣苇斡扳笆驸掣寐渤弛
爰沽甄猷恁榷谛刁埔苔踉趴焘踱椤辙
雹垢稹蚂芍嫣蝴峙殉俎崛拭蛙谘胪溅
嬉嗔弁犁噬蟆哮偈嘘臻褥邕褪靶砰僮
迨咄娅觑擞驭痰暨痹炊裨舷磐勺碱滕
嫖簪霎嗳谄堰诠腮蟠橡彗搀馔紊迸噜
酢拗簟驮笥磺抡坞颅禺悴臀嫦辔捶逋
钡恺谀惚髯盎珀秸晔蛔屎佃吭杞钰夙
怂噶岔赁濠讹袱呃恸攒拈殡笾杠胫筠
踌钝铝銮狻牍妫肪涣溉枷糜麓胰蟾枭
葵剔贲铨谧骡掳薇嬷乓氓忻钙窖谔婪
椿煽蜕蹙廪潦惰烹偎疚撩砌睬咙躇磅
桀瘟虢胚绊诩芭锯栓烙崭谙茄钏吝纨
涓逍绯湮薰毗傥瀛滤熔讷笞鞫孛溥湟
淀聿赘橱匕钜抒衢萃鹦郏茸渚佯嗦筛
酶峦掾濒娼觥捎绾跄鹘忏鸠翌涿钤捻
窒烘韧鸥漱炙匮涫楞冗纥蓦嗨蔼穹蛾
铲澈柩茜钺踵胺谖弑跷忤蜘枫娴卞蠓
辂诮抟殃筷衾陟叁侬刍搓箕郧琵熹蠼
吠镂菁昶辫穗镕醴舵昙饺恬黔奂耙钵
嘈踊蛉忱墩撬杲菹炫跻叽憔挝篆袒剃
诅涎璞觽撮硝萦恙阖栾髻倌邺嗖锺骋
稠苯饕雉豕诤吮猝樽吆沓藕淤橹觐匝
谯茹妪吒瘛涞阱殁缢曙傩酵郓顼赉梵
蠹缙铡跸觞邯纭懋廿钳谝汛寰橐眸猖
劭嚎戾蹑酪苞糙诽屉捂羹擂埠歆曷犊
佬苤湃阉缨笋筝骥瀑鹄焙媪儆诔溆豚
卉洼醮憋蛊祟谡砚彤蟒琨熘翎甭檬霹
菇庖炬皎亵悸罄凋蛭茉荼兖鬻珂畸鹉
乒皖啄呛渝繇肋眺蓿蹬锄轧蠡籴粱谠
揆霓瑁唔笫铢韭眶啬闱汶葜缰镏桢邠
柿呱秤腋杳愍雏妗漓獭喙淆瓮墒筐缭
骼涸陂妞裰淙峤瘾舫咀臼啃斫跤麝祔
俐骧邈燮荚痊渣迤鹞砲锢琮诖踞沌磋
疹塾婷貂棣詈哆袂岫恻滇燎堋掇渌厩
涟桔濉鄱邃嘤讪隧纫雳愆蕖悚夤瞩锵
庠睾咭畹跛髂箍滦萼瑕瓒腑竦亘赜阕
媛毂魇芮浔昵翱捅黍搔鑫俦诃饯辎槭
疽佚糁痢暄癖荔圜祺喳庑呷蹇獠翦菏
憬阂曦镌羔壹勖涔掐湍僦蒜磬辗唧匏
髅莅苻茗蛹槊竣骈泵隽珥橙掺芷荥萤
暧诋殓偌轸娑镐淖怏搿斓诳蟀钪忡熳
芄磊浒孵忝雒沥壅盥瘴嘁暹钠剽缥唆
舔氤蚴醯虬烬鳖呤帚苌赀笈渍玳鹑颢
狒瓢蔷逡氲蝠颌哝脓昱畋嵋茧臁踔隍
锌跏鬃燧咆瘸昕囱砾扉诜鸨嗄昴煊瑙
拎罡藜疵烽迢猗爻煨痉龛蹊贽沔挞盅
麒骞蕾诒橄咪洮轲铠寤戬铣漾籽幄亳
诟锏婺犒诿妊狞骷惋谚橘郸锈胛雠谮
睫弈馒曝哽阪淞洳蟪厝噩谆啻闼嗝淇
瀚宕惴颔坍覃硅袤唠惆晷琰恂镒蛞揩
旒憨醺疡彷憧逶莒啜蚓峒馑肱藐獗癞
滓伢珑惘狎饔莘捱裆鲇蜗胱窠蜃鞑魑
抨噗钍薯粢窈蕲韂逖舛釜湫緝鹗帑鄜
碛挈俪芹仄蚪踝侔馥叵拌狙荻骊啧啖
嬖焓皈蘸盂倔蛴橛蜒喏恿葆蓖愫煲蠖
碇肛绚莞榭馍匚隼燔弋袢蚤倨澎鞯玷
阼皿鋈哒浜朐瘠蚌拊浼缶俣婵碾嶂邳
霁霭羰砺楫琬咔鹭阆娠牖祉抉绦簸豺
沅蹂髡猥鲋鸵阋曛蟮缯岷宓芪淅黝桅
伫诓咂绻臆缫绱钔拮槌砥奘洵旃馐蹿
锚旄疙箴靼啾嗍筏俅蚨骰蚩粑楹靳躔
徭箓杵秧嗷咫笪淦孀牝馁筮蛑耘缤鹬
笳嗒奁卮馕蚣蚯蛩坂鍪汕寮鸪晡婕捺
崽钿聆懵楣裎菟侗湎毖瘩闳灏蛤诨瞑
镀坷簌煦攫氮痔苁阄舨湄咴佗炜哧罴
莆嗉螂撂悌镯粜跣艄髃碉炖趺褶诹喋
蘑楠衿徼灸疟橇怆阏彀盍揍禘樟巅饴
醢祇龈刨谇逯腓魃倬谶薮呶歙漪舐祜
羯邛愠璐嗬涑媲怦逅轶铉翡逦罟惦偻
黠傀涝撵嗑窕衲镁蜓殄岬菽颙郴乩璜
颛哂馅茏泓赓瞟瞳曩漉娓悻勰阃钚笄
觊荃糠粼龊脐芤澶濯嚓榈跺醪榄裾蹶
嗫瓯嵇芥岌阒嗥腚裼跚墀荤俳妍霾穰
笮恽潢遑锷隗镆餍袷鼐飧瘗殒鸩辘飒
鼾惬儡煳咛黏槁胍娉鲈笸箸卣栩鸱笕
笤刈锍倜鄢洎蒿鲆媸圩菔喟濡胙蚱羸
淝铿侏阍澧珏裟喑孪髀剐筱嶷榔糯渖
舸涪炅娲夥蹭榛鼋宄鹧暝袈滂弭棹蝎
摈痘驷抿焊赝胭颎蜻刖蛰醫泸呗蚧囟
沱锜窿缟晾峪慵帻锹鞴倮菸渫汞馋拄
藓肽诎栉翳魉讦虱蛐蜷躏鳄顗榨瞰镉
鲨屹啮搪蟋虺閤捌玮刎崧苫菀饨祫邙
叼闩俑鄯呓邾苡虿蛄呸蒯锸畚扪甯缜
帏踅髟婊稔搐笊偾碘阗潺硪蠛垡穀岖
黼骶嬗恫垛嗲苋瑗沤畛鹨耷懔漩鼙珙
钅缁铰镰粕鄄梆翕桦罱濂哚矍缣铐浯
虻竽蝌薏槟觇甬怿釐胗甑坯郦嘣噎湓
妩谰腆淠烨飕蜈刽萑缬赊疣泯氟痈獾
仞蠊讣葺馗柚憩罂魍暌颦柑楔璨樯跎
祎浞樾椽苓涠隰萱旆蜿墼胝鹆滁锨馄
婀匐凼樗胨畲霰臬肓硎墉鹳槎殇旖钭
罅蹩嵬馊褫藥巽衹芾抻掬茬芨闶鞣诶
瘪睽钌嗌饫阌龌臊蚬钾荪謇缈腴蝙莩
蛳酚芰妲庥鐸攥峋芟撺盱赭狰脩嚏艉
祧镣芩姗螃髁芏腌陉飙郅褡粝溟魈艿
钛鞒泞籁鬯芗鳃娣瘁苷甓蛎摒臃匦锰
鹩龆蘧阈旰戢齑肫钣囿睑篓噫茁厣绡
焱绺舻敉岘嵊眈龉蔗嵘琥鹫嬴裢吣溲
莼肷荟傣啐虼飓玖诼庋秣榱攵箧縻鄣
喾萁捋笱匍薜饩焐佼麋缵羚犍烊噤龅
眇苴徨搴剁膂鲂鸷娩劬葑饽媾炔傧缌
碣卟榕嘧莸葭篙焖堇盹锒撅乇愎灞瞽
讵雩浠鼍鞔黾藁膑椰萋酆蹒隳阊抠浃
绐碓陲榇羝祛獬蜚秆蓑夯厍谲杼掂芫
芡枞锶癯鋆嗾皙蕤汜跫郃郯郾泠砀纛
镠迓圉嗵幺卅嶙禳蟊醵沆洄蚋郗瞌町
裱鹾艮蓓睨鹚髌肜诂戡箔湔亓锼跹皑
驺褰睐茔鼗赙耪咝嫠鸬纮蚜粽栎蚰舀
凫饪淼铄砩蛱呒挎摭柘蛀嗪趸嘏萸峄
崴酮禋崞鹜霏芋讴踹钕伉蚝氪龇瞠鹪
濑錾蛆呔瓠龃衽虮鏊绉鸢褴岢涮碜雎
舳榧靓骘衩貉癣窭铛槿黥畈锲鹕跞侑
苄缃枋槲眙缡肄嵛羧苣崾痫赳醭氦酗
昃氡綦殚餮莓囔氅炷褛觌痞愦甙砧缛
枰觎旎懑锩癜殂熠砣缒鹌颚黩洙渑硖
饧缇舂吡锉窳踰娌跽怙藿鄞绌窬遄穸
髑腼栊戕琊杓氩袼鳏疱珩矾垩汩髭暾
靥恹仝萘罘戛孥焯呦痣冽疃乜蘅砭酺
煸僬鲎悛榘瘀窆麈囤鲫菡慝荅绖瑭忑
忐悫琚劢锴垠孑骛螳邬畀阡逭嫱旮晗
艚竑馓榉蚍赧槠嚅璀菰姹筘祏敫镳骱
韫缦绲蟛愀胂鏖啕邂桡崆梏鳅嘌胩纡
鲠廨璩楮遨耒谳螭檎趿誊聒蹴莨旯耦
炱蛏圪箩糇搽缱杈鸺缂觳跗遴汐铱蚶
鳗砉儋芑椴锊掸锖窨龀胯峥熨孳圻槔
豌剜朊锫蘩鹁訾硗窀鱿柰簋椁蛘苎沣
爨遘圮鞲缋坳磔姒缑襁哐姣妣菪蘖闇
峁迕彘赟菅炝芎锎篝烀怵瓴這镫羿崂
醚铬掰蕨裣經镭袴佘嫘熵芊獯闿昝锿
骖蓼嬲媵闫逑薅嘹锟裉跬艟鸶薷哙锛
蜥銎咿唏肭罾钋韪醣泺蔺桎欹羟苊脍
锝咤嘞屐庀孢枳肼艏氚硭钫畎馘砬楸
锕鲑卺舄慊肟砗褓螟趱豳柠鸲搠艽姘
嫒襦葩蕹獐咻舁岵摞罍妤佶邽欷舾掎
绀碴啷萆蛲蟑钯瞭噙戆舯眚璁嘭杷昀
砝蝮烯诌掼篚獍鹱過猬褊諡潍飏隹镛
磾畦贶黻砑耨讬瓤枵颡噼铙阇澍遛骐
鸸裒荛稗呋嵯舴驽鸹搦徂諲帔翥剡犄
镬霪裥犷綝彖絷锞鎏鄩珞烷筇杪罨唑
嵝甏煅鲛頉啭棂矸庹缧籼娆俜菥萜酊
疠骅拶绂沏酃垓姝萏鹂薹崃钐鲧扃跖
怛颀泅菘榫鸫蜇祢叻崮鐾聃龢铤跆阯
圄篾艨菖殛硐螫柙郛骝尥岜蜴砻唁逄
堞揄溧荭镗潸砷觜耜鬣坌莶孱碚哿屦
氰吖絜泮颧倥囹佾疥枥埒酯體嫫酤镍
锪蜮蓍滹瘳钒尢唰煺蹉菑痍锔栌枸刳
飚疸枇蚵侪苕適杌趄婧镞绨痿踮鲅钲
翮與潴钇镎菝頠埙蘼砹簠茯仵茕淬偬
汨楦镄鳝肀虡廛猊谿囡傺滟痨帙苾谂
邝帼蝼酩骢衄纁郤麂舡蹰芈趵樘痤忸
纻硼泷咣檠嵴菠悒鲲撷崤箪聩泶锾呖
猕镈喵遒岿佻锇幞仃陬炻酹觚殪砒堙
搡噔锓滏靛篦粞脔咩鹣豨徕泱嫜洱滢
龠膘绔瓿镅窣荏悝籥悭陽蒺鲟颋呙橥
劓陴邋類锘躅坻埭擘揿锬瞋璺視艋馇
憷钹矧噘箝溱阢岽鹈趼骃垅硌洧鲔唳
汊苒骜缍犟鞮怩崦掊頵岣踽胴鬲赇掮
髋硇踣烩柞侩轭铖颏桴螨镝痼鹇蝈眄
郜桠篑䜣蜊珉瘙縠郄鹛鞶猢妯鹎蔫仨
荞珲膻貔鞬糗巯茱狲箜擐鄠雱褙馏伧
楂蜍粳驩殳鉷苜轱鞨摁骓桁蹀砘阚枨
髫芴礴踟溷靺腎纰贳邴铂囫燠兕罽眦
篪忾痂趔鎗忪遹睇苈幂梃钨莠喁钴荇
螽犴怄轺遢篌珈攴溴泫圹筭窸麹榍疴
棰舭篁詧噱腱貊禫狷舢锱骺勐囵醛啶
轳伥桉锃軿綎荠蔻荜覈鐇膈脣柢鴈郿
牦铳嵫踯撙陔頔鄹蓐瘿踬硒盩茑質怍
翚轵筌變怫锂潆纩镢鲢胬摅蜉烃赆間
虛歃砟刭黃縯絺蚺訇玢蔟蒨挲镪襕種
鼹屣褾陰讧祓徉佰殍坼長隈枘掴椟鲵
䴙狃蔀蜢蹼垆瘼飐驎腭稞襞結衎伛靸
䌷絁镊補醖捩忮棼堠說栀鬈麇稜髹毳
唿砼糅鰲埸葳骀貅秬翀鈇鏡桷忭蟽呲
妁祆碡秭鲶秵荦翙茭郇絪喈怃睚籀佝
黉見颞開疖绁缏還綯狯螯坫砜缞蒐闉
霑埴驗揶徜麸菴濞磴筲較脲顒郕餗睃
秫铵瘘剀轹睥醍璎諴刿哔谞點侉觋柝
祕題仟垭鳕溘屙绋郫閟莜瘐禼捭浍镔
虓酎啁锽诐莳莪躐鼬蘋莴瞀繻鲰菶醔
尻鲙僳邰鋹腸牯洫庳風矽荑箐疝哞椹
钼蝣篥鳟茆麼禖圯禩硷茴铍筦關醐唣
皤铏哓鋋扦痧蒌霈跂饍猱漯蓚氘铧箠
菬儇鉏鲭脬赗逌論娈矬堀豉箦樨箬傈
鲮肸紞鞞鳚狁骎茌翛噌鳊谵阽箨燹鋐
翃鲀饟锑邗擀胼龁赅麞幛禊钆筚蕞澌
祲捃騔珐埚鄗辚磻讟筅祼揎蒹蜺輓頭
養铆擤蜣黢悱蓺翾撄辀證螈鲱坨潋葚
嶝酾須醿躞缊邨酂秕觏處進秾薤杩缳
眊栲脘耋蹯臱頫鲡揲鷟遯銶芘黹悃鈒
茀埤矇鹋魆皴糈埏蝻針耤楝戗轫診調
轘佤碲噍沭铌镧禃廒硙蕡蹁戥醅細襈
鉨黧迮蟲觿瀣芃蹚锆辊釭飲節檩眭錢
窴綮骍葎甾鲥瘵睍譔縡痱馃蹻忉觖蓂
衒鄫酲夼縢鼉術襚獒辋孬吲哜瘥蝽嚯
鸮埝铈郈稱酽郪鋬藘腫泔麴螬雚鍮溽
蓁醑茇雊腙镡嘬瀹魋篯緌韡魨觱锗讙
玎鳔攮鄘舣黟騑蝓栳恝谫裀蓊恧顐閒
腦鳢啉瑷噻蜩矰檗蒉黁劂疳蛸螣裡钎
葸狍柁騃鲐鄚仡網邲氽挢霅镓柽糌塍
眬狴簏赒輶鹍诇哏甍哌瞍酴篃臨賨磝
趑猃詟黓黙葶钽鹖趫绠踧癃鹯麤颃註
蒍铗憝禇垲紅橼铋犸禔錞翣輕雖鬷狺
鳜溻唢哕眰蜱薳镮禜鏻睈戽駮羕胔溏
鲊齮虖觀隤襜蒱冼铊饘蠃臟砮豊郐綖
眢繙盬飖鳷認祅褭尕蔌戋铫聬辌袆鎚
泖袪阘漤裲統謩桤襻鳙澉铦陁蒡磙酡
鹓靦塬垤骙绹铒轉仫荸筴薙蹐鲚铑酐
覺詢請隱喱轾揸廑脞疔轓辒鲃礩楗圬
氍蜾運糍皲礽牾瘅蒴窅锧裛訚緩栝癔
鳇阨醌黡韐蕈矻陧馂纔铯鯈組鮈垴睆
鹢磎盝羑貙邡睠誾軏續難祊鷪蝾椠聱
爝彡铚腈磲贈純眱筈羼顸蝥擗謝蚡鄮
跶鲷汔臜珧䞍钬痖鼷繖軟頸荈毵蟥鹮
镟脶離睟纚褕酅衆約枧紃褧罝輴駹鞓
蚃窋猡鲞門絙劁漶脰滠桄腧氙維脽羖
軨颟岙赪趬邅雰餔積簨粌線習趕鄀桕
瞢筢硁鐍韈蝄喹確織韨蠙禛揠猁猞螓
瘌隩酖蟜鵰紹連脤礶蹓柒蝝酳龂頍話
顯綍禨睒衖齁茈跼誤絓狨縚薁簄蝰鲻
泐矞帱桫睎轝埕義衛達響䶮迍闬醦碶
驵缲耖臑碻翫選膽鰞鲦筸嚆鳣鞚脈貢
納閉綟駼囝鑨豇垧鄡腠麑祹遠謵餧矁
莋惝餂硱仂碥隄瓞糺唛脹謂遺騊矼諢
銛坩裯镨蓰罥罃辦薿餽釂軋鄃馛汆毽
鮼剞糨艴鴥耎膋鈤癀虙貋簝繄孓佴粋
躄鲌鍍預闟眛唼觫蕰蓥骒邶訏坶簡縮
趯顧鯊镦鸑洇餬螋苠耢劐蓠钷駃鳡鍊
鐩礿雝盻輗蜞鲝礅墁麃粫諓蒇鮾睺翂
駉鬆訓貝秏禟鲽耇酇醊洚隃礎鷇稌翜
釋鷥謜譊褷躜蠋譓阓阛霨髽纴仳詠萬
砫鰽筆練總計訒語鶒訹驲蹠垸迴襆冁
毹钘試隨鯐鼇霤鳂腯貘鲳飗鲩祃褵茝
規髆矯鳐韮鰕碏螾菻韻沲繐藚氇氆腩
磉鬏筥詯胠鸂礌議薆藭馉鹠絡護鲿艸
蚄浈齎㧏檫觔瘰唪絫覩豭筩跱騄鬘鹙
詳讀諠銲禴绬虸穜蜑葙鏦貓眲資窎饎
躧觷礮犰玟翬葰冱踖鑑騧籤踦記識駜
誖赕芚藟釴膎鈮髩給跐菆袝聍鲴眮醲
碁骫範醁艍铟竅讓騼䲡鱄鱖鮧鎯疬絅
胾鬂麀虒豂踘瘕齧镵霣麕聝膠绤覛項
鶇黒餫盭膢韎鹥鷃塄眵訔屺麖頞電鱲
頻眾膰覂設鎮陳鱧絇讗鉶顥鼯鸻坭礓
钸窊螘貪柃诪賸膴繼脫邊顟龍蒗紒蒢
镩鸰艈蝤黪瞷蕝顣袗稂耑聴蓣箾褎騠
钖許車饳鮠鲖絰萯謷麛茛酞脎蝟蕻閱
臌譁遝铕穄裈鼩粃趦蒽釆顱階雜驚鶗
紬鱇禬蜼笴絻臝黈鼛紥駆鹴荄堍铓褠
迯鄳鬐蚖貍該跅鄤臥鲕竾級菙蓋責錯
釱鳑纼轜隮飶鼟銟鵶埘镴罣肏絕莛镘
耵骕笭膿鄑腳雙魟箰阬耠錔騕鬴魭鮔
鳀粡粣袛邘胲饾髳篸迻臞褌褔葉討漭
險餘鐏纆逴睰筜觾醳鎡鐉鍬鐻脒耧靜
篲靿礞眍癍螗禑貤掭韺箢詣緅蕺菉諆
讱䦟铪膚臅莾虧髮穟醡箙耔菃哳箖茼
尜麿鲣圊鴂蟭趷簳詮醽顏鲏鴱鮊菼褘
韣攉狳鞦搛骟钶誌髣鲒耰薑餱袿鏁盡
矟藴袃製詾載週鈺閺陸縗肵詴赩颣鶂
鼒稾蒎騩聓臢蝀埯鼢菧跊顝麄㭎阤穈
袠複鸧鼂袓膬秲穩聽袀貴鄽鮮鴺鸴篨
睗矱筤荂葅賵鄏瀵霡霿韝酏穨鞾蒒穉
鹡餦謏睕葴椐舲艁袞貣茚鉁飔虵袥際
臛仉粊聲腘膩觸詻諸辯靈麥顔綵緤荬
钁鮀簉踶铘龏篘镋鮸籞瞇祋綈蝦雮蓏
訄鉤闍睊穫窾篠醨龒臍茲稙羇藳袨覙
訉譄跁飛鳴沩芼鳈繶諟踳鄅霃馌盵繦
艃蕆魞眖陠睏岈镙镱稃筰聭袧襢詪販
軆苘飩蟫耱睪鷁綀艖輧蕣铷硏粯絿興
袑讉陜雞駝駸鬱䦶鈆霝鮟靷睮穠罳耏
芣蟟詶醓錡馺鸤礧緭辿銇篴铻膹巛筼
搋檑秔轪稑紩膮鐮蓛蜔觼鄰鈨霂鼏秅
譟蠔礤謄錧紟脀襮讎瘃髢鍰觍邆稆鳆
碕膯華鍐閛鷫釦矔脙茖蓴負邿腽順頊
鴽鸊秺訞睔穬罛翿脡鋗鍭鹔磧荝釳隇
緊羶蹅耩贇茺郙鯋䴔紵緺羗裩譌祤臿
矝箘糞縿聛葢螝訑詼貼錄飯髤螵鴲軷
臶稓縓蹛鎛眴藊詽鮿禥駚粎蜁饹絼簰
罇礙罼託蹡怊顑疰艎莚銙餈禆葠號談
費蹨蹱輔鴣鴳鼫齼钑雘靮茢躭糒紑臡
虩蚳褖郚雺肐覸鞉韠飡鴋蕿謴䴘痦粺
趽饸譞趥筻麊麜粩瞫箣粴紾蠜逷隊綱
鄷糵趨輳镥磿絲緰聞閷頗鳉鹽龤禭遶
鍏䴖鷉鑛鮡稊籧紿蠮訿遫遰郥郳鍉麷
睶磵箄箻籟訍谸豽靽䥽眎缽袊霚謦铞
眳粦雲駰箅詵盦砢磥缻蓮裋輵瞵髠顩
祂謹轎鴫簻紀纖艜螕訙諝賰鄬鈧鉀閮
閴領禡粵粻岍谼襌鲉眽綪缼腶讻輹桊
餤饦鬒鵩褍誗鏚碹葊紏繸罶靹鮣窔萩
滗痃睅礉臉艕茞葷謺豷貐騻鲪麗䦆飑
腄麰蹔鎌陼牿镤鯁祪蒁鍩貎铼鹼趹簜
簬終綜蔂裝詺貏贆跍輿邔釢銀鐘鴷鷹
麧禵纑訢鑢綼觝鞧瞶箑舠茒訰輠鄪闑
霛馹鸃眡萐輣霙霦鯌繍頧睖穊羀鰡繟
絽臎蛣坜銧鎰耥筍緡茷螀輀鞡秠絃垌
躘轥鍧黮袽鈵飪鶄黨齾績闆竷脻膫臇
舉藨蘇訛詞詷購跉軓農鐑闅鞗騺鰜䴕
艦鯘隺蔎鯔鯮鱣箎籝綧茪蓩藂虣輮蔹
鐕飂鱐稒篣艔蜋袎酧鋘骦笰蔯痄菫袣
謿粐脧茣蓯藦鑕雟鷱䥺窌蹟鱮麚瞆絏
袕袚轗鄟猹饤盤茍蒟鈦齰缾貧禍翹脮
膶艑葍蓸袩訊評謨趧蹆醆鍋鐣镃陣韽
馬髞鷿齺䜩縪莤鲯笎逿鰨籛腒苨薶藋
虆螉觕謻豝轙靬鞂鞹騂鶅鷮鼲礠裌謳
邟鉟飻骭魹鼕铇蒧鵳磡醾潲鲼繌菒蓨
藧詝貗輈鄛鞄韥鯒鴃颥醻靰肙苙褋遊
鋵鍼魫蔿隦礇買䥇氕硟紤絹聯職臄菂
葌覠親訋課豐貛賴贅輸遲頂鬅魚鯖鱾
鶝鷩鼜齡鋊笲舋磑禗鱯簭縳繘荓蔕謣
貆陊籺羾翏艥茤譒趍踠輙輬轀鞕駴簖
魶鳁鼱笹薀訂谉搌鄦膦騾苽豗辻迋揞
鎭鲄鴹麆瘊脺蜎鴼絟蝘閭骳鴿鶠蛚讞
閧鳓鹹粧稘窩箽縱聖臏臒艢茐蓷藙衝
訌贀趤軒軔轂邥釙鈩鑱閻饡駷鯗鵁鶎
麨諹鬛磜蕅蘘鯝鰁瞾笵綆縰罻罿翽艓
蝃諰蹜蹝蹢韔騵齍箶縌莝諐諕跀迱鞀
饠鸜碔翧褱釔鹀詥躼锳祾穪簴脗蛡霘
鯏鶟龜稭虯藇蝺闚雔眅簾粚繫聸膭萚
跡軃轕迒鉅驀骹薝詭赑鋺隥饋鱵禿蠅
賈遞榀鄍磹礜禎粍紙綒緣緯臈舊蒼螞
袌誘貞財賦違鄶釡釤鈿鋼鍵闊隻飽驅
驖驘鯓齊齒罈詄鯆穽鴞蚑襘鱤禂篹簁
緪胏膍蓻袙誀譣鄋鉥鞙鞸韇駓駪驒驔
魠鵫鸐綷緃艅艛葧輄迾鋄雭顡粏臐鋾
鐓楱鮄舖骯魖篰蔸眥睄礡祦韰飭饐㳠
硚箯脨苼螑袵踡蒈邇矙糀鳘鵄緍苧蚘
趩蹷遆鯙笍羜膵菭葹薐訽譻轇遈鐄铔
饑麏臺蠚譢讈蹞軌銳頃麅禠睋箹粶粷
緻苿莖藞藷蛢蠝詰謬讚讝豬貫趶軅鄉
酁錆飢飼魰鰪鰫鳪鷣麎黴繑瞡紘鏐鞻
鞟瞓絣鍱魾砅硰祴竁箮罦羋耾膇芀蕫
蚔蚼衺觡豻貜跇輷轊轛郰鐢鞢頀驓鳲
鷤黅睌矏硠秪窐綉纊羓虄蜄衊衵賝辷
霌颿馎騳鵕䏝瞤瞮螱馡磫臮筊袉褯鏰
陞镲鬑繒膼蓵虀裏醜鍑鷲齻藑藬絛蘭
蚢髲繣纕翭蕳蛖衂袟觭躩靉鮌鶚盇矺
磩礦纘翯蚿蜏誻蹹錏鞿鯛鳰鼰逤鋸鑽
瞐矒笟粔緛聻脛莵菢葞蕚蕷虝蟬蟻袦
講謥讕蹤鄿鈴鈶鋷閃閰閶鞛髿鬄魜鯕
鱽鷷麡齽糱鎔稡羮蔴蝑鱥莙鮻鱓鳤稏
竫簮粬萭蔇薉蘀衃詡謞譺跦軶輤轞迲
遻邧郲鄁鄎醷釚鈷颒驐鮆鰋鵙㖞䦷眂
眻矴硥硿碨祡秄笯箵綇臽蒦蜯訬跕鉾
銂鍌顤饢魦鯑鴬鴯譎眹秌篬胑蟨谽鳋
鼈矄镚踺磽艤蹾犋颺鴨莻葨蒭蒷蓾貯
賮鈪猸鐐闒铥鴦鶃鼪鴾佧齆藛蹎霫頳
祮稅篩糦繂翐肊胊苶荳蕗蝍詩踆辵醰
陙靃韲飦餖鷖籂膱菍菵蔣鍟餅髒簷軸
釘隸稖笇箒紗綔緒縕罁羅脅脿膲臋葻
蕘詿賣趮跒跓軍邉釠鉄鑴鞖顫顬飷駵
鶐鷽鸀䝼䴗糢艣輂鼊脭艞霮龎鹟蒻貒
霩頨餚驆骣鮨鰉鲹磶禕綌緆緉羱臲舝
芐荁蓽蟺裻觩謰譈讘谹趠跲郱銋銍闤
禚騋騞鬌鰱鳺鶋鷞麌眑硋碆祄秖稥縖
繈羫肹膸蕪蛒蛠蛺褉覜觟譀譂蹮軭輭
錝鍙阹霔頟馯鮬鮽鲺鴸鸗鹺龕龥磏蚏
監縋縫膟虗蜌誇謟鯶込鴐眫聧脝艆茊
戤篼齄鷧麯磸祻禌簥粭聠詖詤迺鏉鬋
魱鰰鶜齸龔籄聺襛矎艒蠶郋録鑮鞎驈
蟓矅磈稛簃臕艐蘪蛷蠏衕贠軐輖邌郵
醄醼鳒鶺鸇龓眕睘瞼矂翉聦賲钃鼶綑
緲踐軡輾銷閣頁驟铽矡硽碼禦禮稟竇
笐笗篂簢簯編繆繝罋葯薖藮蘆蝿蠈袇
袐褨訴詫詬諄貨賢贂贏跔輪遷釀鈾鑿
闄頌頎願騎鯚鱗鲗鴮鴵鶕鼤䦂䲠籙蠥
藠饈纍簕趰饌蟢鷺祩秹虰鏸餟籔鍚穋
簎簙粠紽綋繓罫聨胉荺莦菤葽藾蘳蝚
袾褟襴蹍邞鄸鄾鋽霒韘飱餲饙饛駬駭
骴鳦鴶鶖鶹鸋鸒硉礲紴羻耭艌蕽蘴誷
趭趲跴躀輺鄨鎻鏬鑅鑳韅驏髸髾鰦鵊
鷶黵齚齱㧐茙蟏鈚睞筶籠綠肅鋕蔔糰
締羺腪蓇蓡飰磦繃羵聫艂藯蝹諑謧鵀
麉麣軎訟礋築蒾遡靣麐鼖穙簺胹脷襍
覅覗訕訝詨諥鋂霳骻髪竚糷胵芖菞萗
蔦蛯訅釪鋫錥鍓馧鰤禱競紳羷臓藫覓
跰鈍錫鏽饝紛遙羭矘秶稈窇竝箛箷粸
紮緷縼聰脦蕛薢藖蛬蛶蝸螐蠄蠌蠍袔
襲賀賹贁贌躍軘軙軠辭釛釥鉃錈鍎鏆
鐵闀陻霧韌韷額顪飸飺餁駕駣駶魸鰠
鰹鳛鴻鷴鼞鼮齋龑䦃髧軧鉼騍禰輋隲
緵繿鴪閗犏鮍鯡鱀碪礛稕窞籈粆紡紶
緧罬罭羃羒胈脠荍蒩蕇蝡蝯螔螮襡讔
豦豵貕蹪軥迗鄇鄵鎼鐀靧鞆頄頖顠顭
駧騤鬠魯鷕黰瞚砆硜硾穭窙簂簛綕綘
罎羛腇舺葓蓪蓶蔪蘤蛦蟕袯襂詃謌賿
跧蹃軖迌逈鄌鈗鈠銕錉鏜鏾鐞锠閈隁
鞰騬鬺魌鮹鯇鰶鸕黸瞈稐蘐衏趂酕釸
魀禣綿緼繨苲菄蓆跘迏驄腃豀墚郞酦
鋻饏駞㧟秱縆莿衼謪謱軈轷顓鯀鏘齏
礄蒞蠆誥鏕魳穵簼趙韗矀磪穻竢籐縩
繋薾蜪襱誳讏趡郘醎鑟辁闢鵲睩篺蜐
蹧隝鵂紖訪豎踥蹣逕鏍缷铹盜睙矊礈
秳笖笣笧籌綄綊緹繉繚罆罷羴翑聹脵
茻菚菦葘葦葲蔘蕼藝藶虘螁蠻覍訜誠
諘謸譜讛豈贊塥輩邫邼鄧鈣鈱錃鍛鍦
鐬鑾閯閿隂霠鞊鞏韱韼頰顆顨飾馮駨
驌魵鰟鰬鰸鲬鴟鶆鶊鸁鼑裏緜鈖鍥绗
騣簫瞂蕂鎪盨葋蠩睉窪趌竤蓧詀礐荘
葇鈙颼鵣窫籋頺莕蕁鑪鰧鰷眧瞉砠硩
磌礆穧窹筀筳粰紨縏脢膞臩芧茠蓤蔈
薧蚆蛁蛫蛵螆蠉衱衶褮譆赬赸趻躠輲
迧迶邚郔鄭醝鈭鈲鋿鎿钀閨闠阺鞁饁
馲駠騉騝騲髱魧魪鯠鯦鱁鴘鵴鵽鶬鶵
鼁鼨矐硍硲磖礔礟禝稉穞窱笓粨羂翓
腷茰蓘蕯蘎蟉蠞裞襒襯誧諅豲貃蹏軮
軵轑銉銔銞銢鋧鋲鍗弪鎶鏋鐗鑡閦隖
霊霐霬鞐顇駦瘭骲鬁鮐鯄鱠鳸鵷鹻黳
齖齨龗郎䦛䲢矨筯糫苰蜳衠觹輆酘銿
閵韁颭餪鯾鱑麢眃硈籆綶葾薦襖鏏鮁
鹐鹒繺馻磞篤纄荖蓞蓳軛飆飮髼鴧䁖
眜礨紣藗蛻蜆蟼褑襶諈賯贋逓鄺騽笀
絾鲾褲蜨蠭蠾醃驙鳠齣盞眆硊碃箇糓
耈膆膕艷葖蓱蔲薋薠蟂衋襫訆譅譸貑
郀鉐鎴阸陗韍驡髥鶡磭繴羉藣転錗鐎
鐤鐨靭鞺饆騙驊黋臘芵賜迆錐顎鴰腂
臗祿裓矚硣礀礊祰窮竄竸簍簞簤簽粓
紝絨綏繜翆聣聵脕脟脼腗茽荊菐菕菨
萊蓙蔥蕜藍藢蘿虃蛥螚螤蠎蠗蠟蠣袘
襪襾訃詸諉諛諮譃譯譽貦賳輥輰逇遜
酀釟鉂銊銘銜鋭鎖鎲鐧閬閳闃陝韓韴
頋頤頹顳飳餀餃餆餵馳駛驁驇驕鬀鱉
鳩鴴鶈鷳鼘䲟酨鏂鐷鯅粛輐輘邏鋅䓖
箥盿瞕肻覥鐰鑰隣詒鎝饜鎋鮰鳾鷦黿
釿縧鉽骔鮋鴒鶲矕碈竀篎籊籯籿絩緎
緘縒繗翨聳肂脪腢膷荎菋菛葝蓫藄蘦
虤螇蟘蠰袡裧褞覑覕訧諗謍譐讇跠軜
輢邍邤郠鋱錀錇鍘鏄阞陑陒牮雈雴顈
駫駽騢騱驋鬵魩魷鮦鯉鯷鰢鱨鼽鴠鴩
鵔鵻鶉鶌鶛鸅麔鼣齵睳矓矖砎砙砞碄
祽禶秈穅穾窛窡笒筟箺綁緾縸繠繥繰
罉罏羍翋翝舥舼艗菈菗菷蓜蔮蕢藔藸
虉虦螄蠁衜袏袹襗襵覔諞謫謭譡譮豮
貀賶賽赥跿踑躃軯轒邜鄈釄釗鈓鈳鉌
鉡鉧銚鋠鍖鍞鎁鎫鏠鐈鐝鐫鐶鑬鑻镼
隑隞靫鞜韯颽飜飹餭駖駻驉髐髨鬊鬜
鮚鯱鰑鰣鶀鷯鷻鷾鸝黚黦鼚鼝齃齘齴
龣眤礵窵筓籖縴翲膁菾萠薈蟇蠧觺鍾
駾鴏㑳盕砛硄磃禢稸窼竏筽籇籒緄纗
肣膗蒃蒘蠪鷭鸼縜脜蕌蠷褏踫蹽軉鑵
鴜籲繀聜臯薂蚈蟿褦覐訐誴駳魣鶫齛
秊襬闕穯褹盫簑糴罵艧鍸鬖黇㩳眣碅
磳礒穱紭綅聟肞腬艼蕟藺蚒蛜蝕蹳躶
轋鈸鏭鑘鑣鑷雋鞝骩骾鬙鬚鬽鬿鱻鶍
齯穃穛竂篟綂緐翈耡膥艩苃莁蕧虈虋
蜫蜽裶詅貿賱蹌輻郟鈰銑鍔闛餉騛鳳
鵋鶢鶳鷼鸍齢碀磚繳耊葏誕誡賄鏢鏤
鑄頷騇鴉礱祳齗矃礂稄稇簹紋紓絞緦
緶縷繕繞羈翢脳艙莊莢葔蔞薔藰虜螖
螡蟯蟳蠒覚覟訣誰諏諱謽譫賓賞賺贄
贉趪跈踴軇軣輝邁釣鈉鈽銓鋤錦錨鍤
鐖鐳鑲镻閾靵頒顕顛館饅饒駐駡騁騫
騷驑髕鰵鴭鵝麩齦齲龝䲣䴓竌縂翖輨
銅銦錣鴢祶盌瞏稴県砏磯臖譗鳿萵蔊
貲踄驢鶸鼥螦鉔鏱葟螧鑀髴鮭鴓盢蘁
蘂鯂盉箋荙螠蟧雑鬶魽鮅鮪鯵鰿鱂鵟
盷眿硯硻稯稰筿篞簲籡糔絖繛繡罊翪
肬胻脄膉芛芺茥茦菎菺萴萶葐葒葥蒚
蒤蒰蓲蔏蔜蔩蕀蕭蕸薕藆藲蘜蘱蘵蚅
蜤蜬蜰蠀蠑蠦蠯蠸衈袲袸袺裷襋覄詌
諵謘謼譥谺貥贙踒踕躆輁輱轃迊迬遧
鄥鄻鈏銈銖鋯鍠鏌閞陭隒隿靲鞇鞈韙
韾頲飄餕餰饓馽駩駯鰝鰭鱦鵃鵅鵌鵛
鵵鶔鶞鶤鷬麍麙黕鼵謯睜瞝矆矠磘磤
磼礃礏礹祑禒穇穚窉笁箉箚箳簱粇糤
糲紪紲紼綥緟緽縃繅繊繲繷缿羢翍翷
胇胣脃腏艝芠芢苪茓茘茡荋葄葼蓒蔆
蕏藡虥虷蛨蛼蜅蝐蝳螊蟞蟩蟱蠵衉褢
襔觻詉諙謮譛讖豖豜豤贓赮趉蹸軕軚
軞茳輚輞轄轖迡迣迼逘撖逨郍郩鄲酓
醹釁釃釽鈌鈼銗銡銥銯鋍鋜錅錍錻鍜
鍢鍣鎞鎷鏇鏳鏹鐋鐥鐭鑍鑐鑖钂闈闓
阰陿隚雽霋霕霵靾鞌頾顜飣飫餻饖饞
馪駏騟髛髷魝魢魬魮魴鮓鯤鰅鰈鵤鶷
鷨鼴鼿齇齳㑇㤘䎬矤硸穼竃竼笡篅絔
絯縺聥肕膾葪蚉蚮蜧蜲螙蟁蠂誂誎誐
謈豏踜踷踼躈躊轣遱郖醈銆錬鏣阥靆
鞳頚頼颕駔騭鬝魡鱕鴡鶙鹝鹵黌齅縲
趚駈盠盳盽眏睧碦碸礘祘禤秙秢稧稬
稲竒籜籶糂糉綡緗縁縞繤繧繬纃纉纒
罯耴肍腨舦艊蒕蓃蔱蘔踨躉躱韆篭腣
赲瞜碠簘腵覇醱銝鐴餇碭碽絍蒄衟詗
讌籣鍳鵬茿莂薃谻賚篛絭豠辢鼄鼅瞣
禞窯篳粖絶罙耮膄舃艫艭艶荢蓗蕋蘓
蚾蝨衘袬讜趝跾踀踸躛軬銌鋎鎸閔膪
颩駋鯩鯬鰌鲓鸘盓矵砪硂碒磣穐笉紂
紻綹縈繯纀腀苅菳萈蒑蓔蓕蔙薗藀蘌
螥裺褣褸詇詐諧謚豧貮賡赹赽踃躻躿
酼醕醥銒鎍鎘鏿鐿鑊靄靱鞪韟顀飀飥
餒馿驦髉鬉鬸魛鵏鵨鵼鷵鸓鸖黶禪筣
箏糧紐緱臚詛誽諂賂輽鈕鐲颱髏眀祙
觓鈡衸謡閏盪碩磄禐秼穢笜筂箞箤箿
篜籬紇紺絆絳綗綴緞縣縹繩纏罰聡聾
芻菓菣葮蔁蕦蕵藵蜠螢褜覊覯訡訮証
諒諦諺謀謠讍貸貽賅賊蹖軀軻輒輦轟
醞鈂鉍鉛鋇鋒鋰錠鏈鏟閑閹闌闡陮頓
頜顴餌餓饻馴駥騰騿驥鬢鬧魺鰻鱌鱺
鳶鶓鶩鶴麵緋羠鎇閽鷘黺荮笿翸肧蜸
賁鯽眞睴粿薭虲覵鋪颵餼驂砤礑窤竈
聶蕒説驛骿碵絒萢蔄躦錋糮肰蒪蟅銫
関鴙鵪齜眘瞞羙躒颻鬳魒睱睻磠縀縛
襽豰賷頦魿鮇鮎鮘鯨硞硵碞礥禓穖穲
笚笢筄筡箈篔篧簩籵糪紸絘絤緁纋缹
罞罺羬羳耟腍芅苀苖苬苵茩荵莃莐莣
莥萉萒萰萹萿蒛蒠蒫蒮蓭蔖蔠蔤蔧蔨
蕍蕬蕮薡薽藃藅藈藽蘬蘮蘾虭蚇蚚蚞
蚥蚸蚹蚻蛂蛅蛈蜙蝁蝒蝭螏螜螪螰螷
螸蟔蟦蟴蟷蠨褅褽襓襭襺覭觙觛觤觲
詍誃謑譋譑豥貄貾跜躗躨軤輫轏轐轚
逜遾鄐鄝醙鉹錚錭鍫鎺鏃鑸閍陓隉雂
雓靻鞃顁顅飤飵餄餥饇馰駢駺騜騥騴
驍驠驨髵髺魥鮂鮑鮥鮵鯞鰼鱊鱴鳭鳱
鳻鳼鳽鴀鴄鴔鴗鵒鵗鵧鶑鶨鶭鶶鷊鷋
鷏鷑鷒鷜鷢麮黭鼆鼭鼳鼸齂齝䱷眒睓
睼瞛矌矑砨硡硶碝碮碯磓磢磮磱祱禈
禉秮秴秷稁稢穳窏窚竧竳竵竻筧篈篖
篢篽籅籏籹粄粈紕紦紱絚緀緢緥緮緸
縤繵缐罀罠羦翞耞聮肈肔胒胘脁脥脴
腝膤舓艡芓茟荴荹荾葈葤蒣蓌蓢蔅蕥
薥蘡蘥虁虂虇蚛蛪蛽蜹蝢蝪螛裑裦裭
裿褻襐襝襸襼覉覘覞覴訖詋誑諔諚諣
謶謾譝譿讁讋讐讑谾豃豙豯貚貟貭貹
賟賻贍贒贔蹕蹗蹘蹫躢軄軝輡迚迵郺
酄釓釕釩釬鈋鈎鈘鈟鈫鈯鈻鉝銄銏銤
鋀鋡鋴錂錖錟鍂鍨鎳鏴鐁鐜鐟鐠鐦鑉
鑺钄閌閖閸闂闙闦陱険隀隟雥雦雸雿
靊靔韒韸韹頑頣顄顉顖顙顮顰顲飌飿
铴餝餴馝駊駍駎駟騀騆騪驃驝驞骪髇
髬鬩魻鮱鮷鯃鯍鯢鯳鰖鰩鰳鰺鰾鱳鳥
鳧鳵鴊鴤麘麪黫鼡鼧鼼齀齕齶龐㱮䅟
䙌盧眪瞔矉矹秇竛篋篏簅簆簵籫籰粙
続縙羆羏翗聅聐肁胓腞膐臠舎芔萕萡
蒀蔵蕠蕩藪蘗蘙蘛虊蛧蝖蝲蠬衭褝襇
覡覻覼諊謢豋貰賔贜跙跮蹵轁逎遬邷
醶釯鈃鉦銽鋟鍝鑤闘阭阾陖隠靎靤鞵
鞽頝顚颹饄駌騅騘骮鬎鬗鬡鰥鱏鶏鶯
鶽鷄鷸鸆黐齓﨧砯磰秞肗芲芿蒳蜶蟵
褆觰趐趓躝陏靘飋黤

