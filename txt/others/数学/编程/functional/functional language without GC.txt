
functional language without GC.txt

BoehmGC
  https://github.com/ivmai/bdwgc

how to avoid GCï¼Ÿgarbage collector
implement functional language without GC

region inference
purely linear programming
the MLKit compiler
the Rust programming language

ARC in Objective C
region inference in MLKit and DDC
compile-time garbage collection in Mercury

https://stackoverflow.com/questions/39440412/why-do-functional-programming-languages-require-garbage-collection
http://stackoverflow.com/questions/9952602/does-haskell-require-a-garbage-collector
  #good
===
Extensive work was done in the 1990s and early 2000s on region inference for the strict functional language ML. Mads Tofte, Lars Birkedal, Martin Elsman, Niels Hallenberg have written a quite readable retrospective on their work on region inference, much of which they integrated into the MLKit compiler. They experimented with purely region-based memory management (i.e. no garbage collector) as well as hybrid region-based/garbage-collected memory management, and reported that their test programs ran "between 10 times faster and 4 times slower" than pure garbage-collected versions.
===
That said, it's possible have an analysis (region analysis) that gives an upper bound on the lifetime. This works reasonably well in strict languages, but less so in lazy languages (lazy languages tend to do a lot more mutation than strict languages in the implementation).
===
It is well known (to people who study these things) that reference counting performs poorly when compared with a modern (real) garbage collector.
===
Haskell is a non-strict programming language, but most implementations use call-by-need (laziness) to implement non-strictness. In call-by-need you only evaluate stuff when it is reached during runtime using the machinery of "thunks" (expressions that wait to be evaluated and then overwrite themselves, staying visible for their value to be reused when needed).

http://lambda-the-ultimate.org/node/1173
  CPS without GC?
http://lambda-the-ultimate.org/node/1398
  any functional language without GC?



Here's some links to get you started...

    Combining Region Inference and Garbage Collection
    Lively Linear Lisp -- 'Look Ma, No Garbage!'
    'Use-Once' Variables and Linear Objects
    Compile-Time Garbage Collection for the Declarative Language Mercury

Some examples

    Typed Memory Management in a Calculus of Capabilities
    BitC (requires a proof of correct deallocation)

jhc

jhc is a Haskell compiler that attempts to use region inference instead of garbage collection.


