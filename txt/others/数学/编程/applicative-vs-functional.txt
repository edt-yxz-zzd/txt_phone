applicative vs functional
  purely applicative
    no side-effect
  purely functional

  purely functional language === purely applicative language


http://lambda-the-ultimate.org/node/793
  "applicative" vs."functional"
"Strict" and "Lazy" have a technical meaning in terms of evaluation. Functional languages can be strict (ML, Scheme) or lazy (Haskell).

The term "Functional", though, is not really a technical term but rather describes a language that allows for the manipulation of functions.

Terminology

    Is there any difference between the terms "applicative" and "functional" when applied to programming languages? 

No, not that I'm aware of.

    Does applicative reduction order imply strictness? 

Yes.

    If so, wouldn't it be sensible to have "applicative" to mean "strict functional"? 

No. "Applicative" refers to applying a function, and "applicative language" is a language based on the application of functions. "Applicative order reduction" means that arguments are reduced before a function is applied (which is why it is strict). There's no reason that the special case of applicative order reduction should contaminate the more general use of the term "applicative" in other contexts. (Not that terminology always makes sense, but in this case it does.)

Chris wrote:

    The term "Functional", though, is not really a technical term but rather describes a language that allows for the manipulation of functions. 

Sabry's What is a Purely Functional Language? makes "purely functional language" a technical term. Once you compromise on properties like purity, though, things get much fuzzier. (Sabry's paper shows that even the pure version is not as easy to define as might be imagined.) 


