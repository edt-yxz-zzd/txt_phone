
e others/数学/编程/logic/命题逻辑vs一阶谓词逻辑.txt


[[[[[
https://blog.csdn.net/weixin_43360801/article/details/105746118
 命题逻辑和谓词逻辑的异同 转载
2020-04-25 10:49:08 3点赞

    ALTLI

    码龄3年
关注

转载自：https://blog.csdn.net/bruceyang2009lzu/article/details/7089130

“所有个体”、“存在个体”中，量词加在论域的个体上，称为一阶量词。

 在一阶逻辑中使用的量词仅限于一阶量词。

“所有函数”、“存在函数”、“所有关系”和“存在关系”是二阶量词。

此外还有更高阶的量词。相应地也有二阶逻辑、高阶逻辑

命题逻辑：命题逻辑以逻辑运算符结合原子命题来构成代表“命题”的公式，以及允许某些公式建构成“定理”的一套形式“证明规则”。（相对于谓词逻辑，它是量化的并且它的原子公式是谓词函数；和模态逻辑，它可以是非真值泛函的。）

命题逻辑只考虑逻辑连接词的逻辑特性不考虑命题本身,谓词逻辑既考虑连接词的逻辑特性,还深入分析到命题内部考虑谓词及其量词的逻辑特性

谓词逻辑：

　形式逻辑的最根本部分，也是最基本的逻辑系统或理论。在谓词逻辑中，除研究复合命题的命题形式、命题联结词的逻辑性质和规律外，还把命题分析成个体词、谓词和量词等非命题成分，研究由这些非命题成分组成的命题形式的逻辑性质和规律。谓词逻辑把命题逻辑作为子系统，但为了研究方便，同时也由于它具有某些重要的特殊性质，命题逻辑通常又作为一个独立的系统先研究，而在谓词逻辑部分则集中研究由非命题成分组成的命题形式和量词的逻辑性质与规律。只包含个体谓词和个体量词的谓词逻辑称为一阶谓词逻辑，简称一阶逻辑，又称狭义谓词逻辑。此外，还包含高阶量词和高阶谓词的称为高阶逻辑。谓词逻辑也分为经典的谓词逻辑和非经典的谓词逻辑，后者包括作为子系统的非经典的命题逻辑。经典的一阶谓词逻辑是谓词逻辑的基本部分

1、命题逻辑显然可以看作谓词逻辑的一个子集。因为谓词逻辑中一般是允许出现0元谓词的。全部由0元谓词的构成的公式就是命题逻辑公式了。

2、正如前面庄老师所说，当论域为一个大小确定的有限集时，一个谓词公式可以等价地转化成一个命题逻辑公式。当不特别说明论域（即，只在语法层面上讨论，不涉及语义），或论域的大小不是一个确定的自然数时，就不存在一般的转化方法了。
例如，公式“对所有x(P(x)->Q(x))”。如果已知论域为{a[1],a[2],…,a[n]}。则可以把P(a[1])，Q(a[1]），P(a[2])，Q(a[2])，……，P(a[n])，Q(a[n])看作2N个命题（即，定义命题P_i为：P(a[i])为真，定义命题Q_i为：Q(a[i])为真），从而原来的谓词公式就成了
(P_1->Q_1)∧(P_2->Q_2)∧……∧(P_n->Q_n)。
如果不满足“论域为一个大小确定的有限集”这个条件，上述谓词逻辑公式显然无法等价地转化成一个命题逻辑公式。

3、关于“命题逻辑与谓词逻辑的内容”、“两者表示知识的方法及其推理方法”、“命题逻辑与谓词逻辑的内在联系及区别”，推荐你找几本数理逻辑的书来看一下，许多逻辑书上都有介绍。

4、一阶谓词逻辑是命题逻辑的推广，二阶谓词逻辑是一阶谓词逻辑的推广。命题逻辑的可满足性问题是NP-Complete的，一阶谓词逻辑的可满足性问题不可判定的。

5、关于语法和语义、公式和解释、语言和模型、规则和真值的关系，建议看一些从模型论方面介绍数理逻辑的书（最近出的新书有沈恩绍先生的《集论与逻辑——面向计算机科学》、Michael Huth和Mark Ryan的《Logic in Computer Science: Modelling and Reasoning about Systems》）。


参考文献：http://zhidao.baidu.com/question/149211533.html

    http://baike.baidu.com/view/448614.htm

      http://202.116.45.198/ljx/ljx/bbsxp/ShowPost.asp?id=49
原文链接：https://blog.csdn.net/bruceyang2009lzu/article/details/7089130 
]]]]]
[[[[[
Propositional Calculus (命题逻辑)
OverviewCalculator

    Propositional calculus is a branch of logic. It is also called propositional logic, statement logic, sentential calculus, sentential logic, or sometimes zeroth-order logic. It deals with propositions (which can be true or false) and relations between propositions, including the construction of arguments based on them. Compound propositions are formed by connecting propositions by logical connectives. Propositions that contain no logical connectives are called atomic propositions.


First-order Logic (一阶逻辑)
OverviewCalculator

    First-order logic—also known as predicate logic, quantificational logic, and first-order predicate calculus—is a collection of formal systems used in mathematics, philosophy, linguistics, and computer science. First-order logic uses quantified variables over non-logical objects, and allows the use of sentences that contain variables, so that rather than propositions such as "Socrates is a man", one can have expressions in the form "there exists x such that x is Socrates and x is a man", where "there exists" is a quantifier, while x is a variable. This distinguishes it from propositional logic, which does not use quantifiers or relations; in this sense, propositional logic is the foundation of first-order logic.

Second-order Logic
In logic and mathematics second-order logic is an extension of first-order logic, which itself is an extension of propositional logic. Second-order logic is in turn extended by higher-order logic and type theory. First-order logic quantifies only variables that range over individuals (elements of the domain of discourse); second-order logic, in addition, also quantifies over relations. For example, the second-order sentence ∀P ∀x(Px∨¬Px) says that for every formula P, and every individual x, either Px is true or not(Px) is true (this is the law of excluded middle).


Higher-order Logic
In mathematics and logic, a higher-order logic is a form of predicate logic that is distinguished from first-order logic by additional quantifiers and, sometimes, stronger semantics. Higher-order logics with their standard semantics are more expressive, but their model-theoretic properties are less well-behaved than those of first-order logic.


Quantification scope

First-order logic quantifies only variables that range over individuals; second-order logic, in addition, also quantifies over sets; third-order logic also quantifies over sets of sets, and so on.

Higher-order logic is the union of first-, second-, third-, ..., nth-order logic; i.e., higher-order logic admits quantification over sets that are nested arbitrarily deeply. 





Type Theory
In mathematics, logic, and computer science, a type system is a formal system in which every term has a "type" which defines its meaning and the operations that may be performed on it. Type theory is the academic study of type systems.



Homotopy type theory - Wikipedia
https://en.m.wikipedia.org/wiki/Homotopy_type_theory


Overview

In mathematical logic and computer science, homotopy type theory refers to various lines of development of intuitionistic type theory, based on the interpretation of types as objects to which the intuition of (abstract) homotopy theory applies.

This includes, among other lines of work, the construction of homotopical and higher-categorical models for such type theories; the use of type theory as a logic (or internal language) for abstract homotopy theory and higher category theory; the development of mathematics within a type-theoretic foundation (including both previously existing mathematics and new mathematics that homotopical types make possible); and the formalization of each of these in computer proof assistants.

There is a large overlap between the work referred to as homotopy type theory, and as the univalent foundations project. Although neither is precisely delineated, and the terms are sometimes used interchangeably, the choice of usage also sometimes corresponds to differences in viewpoint and emphasis. As such, this article may not represent the views of all researchers in the fields equally. This kind of variability is unavoidable when a field is in rapid flux. 



Key concepts

"Propositions as types"
HoTT uses a modified version of the "propositions as types" interpretation of type theory, according to which types can also represent propositions and terms can then represent proofs. In HoTT, however, unlike in standard "propositions as types", a special role is played by 'mere propositions' which, roughly speaking, are those types having at most one term, up to propositional equality. These are more like conventional logical propositions than are general types, in that they are proof-irrelevant.

Equality
The fundamental concept of homotopy type theory is the path. In HoTT, the type is the type of all paths from the point to the point . (Therefore, a proof that a point equals a point is the same thing as a path from the point to the point .) For any point , there exists a path of type , corresponding to the reflexive property of equality. A path of type can be inverted, forming a path of type , corresponding to the symmetric property of equality. Two paths of type resp. can be concatenated, forming a path of type ; this corresponds to the transitive property of equality.

Most importantly, given a path , and a proof of some property , the proof can be "transported" along the path to yield a proof of the property . (Equivalently stated, an object of type can be turned into an object of type .) This corresponds to the substitution property of equality. Here, an important difference between HoTT and classical mathematics comes in. In classical mathematics, once the equality of two values and has been established, and may be used interchangeably thereafter, with no regard to any distinction between them. In homotopy type theory, however, there may be multiple different paths , and transporting an object along two different paths will yield two different results. Therefore, in homotopy type theory, when applying the substitution property, it is necessary to state which path is being used.

In general, a "proposition" can have multiple different proofs. (For example, the type of all natural numbers, when considered as a proposition, has every natural number as a proof.) Even if a proposition has only one proof , the space of paths may be non-trivial in some way. A "mere proposition" is any type which either is empty, or contains only one point with a trivial path space.

Note that people write for , thereby leaving the type of implicit. Do not confuse it with , denoting the identity function on .

Type equivalence
Two types and belonging to some universe are defined as being equivalent if there exists an equivalence between them. An equivalence is a function

which has both a left inverse and a right inverse, in the sense that for suitably chosen and , the following types are both inhabited:



i.e.



This expresses a general notion of " has both a left inverse and right inverse", using equality types. Note that the invertibility conditions above are equality types in the function types and . One generally assumes the function extensionality axiom, which ensures that these are equivalent to the following types that express invertibility using the equality on the domain and codomain and :



i.e. for all and ,



The functions of type

together with a proof that they are equivalences are denoted by

.

The univalence axiom
Having defined functions that are equivalences as above, one can show that there is a canonical way to turn paths to equivalences. In other words, there is a function of the type

which expresses that types that are equal are, in particular, also equivalent.

The univalence axiom states that this function is itself an equivalence. Therefore, we have

"In other words, identity is equivalent to equivalence. In particular, one may say that 'equivalent types are identical'." 


http://philsci-archive.pitt.edu/11157/1/HTT_Primer%2DPART%2D1.pdf
  philsci-archive.pitt.edu/11157/1/HTT_Primer-PART-1.pdf
  A Primer on Homotopy Type Theory Part 1: The Formal Type Theory

]]]]]


