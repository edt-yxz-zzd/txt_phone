
e others/数学/编程/密码学/加密框架之其他可能.txt
  #xxx:e others/数学/编程/设计/加密框架之其他可能.txt
e ../lots/NOTE/cryptography-book/Introduction to Modern Cryptography(2th)(2015)(Jonathan Katz)(Yehuda Lindell).txt
e others/数学/编程/密码学/我的设计冫加密框架.txt


变长加密:
  加盐:人工噪声:伪噪
  只适合最终层加密。
    中间层 几乎只能使用 定长加密。
    否则，最终长度可能难以掌控。
  [明文:=解密扌(密钥;密文)]
    #确定性算法耂赋值『:=』
    #没有:随机性解密算法
  [密文:=加密牜无噪扌(密钥;明文)]
    #确定性算法耂赋值『:=』
    #不一定是等长加密，比如:压缩后等长加密
  [密文牜含噪:=加密牜显式加噪扌(伪噪;密钥;明文)]
    #确定性算法耂赋值『:=』
  [密文牜含噪:<-加密牜隐式加噪扌(密钥;明文)]
    #随机性算法耂赋值『:<-』
          # 『:<-』的新含义:源起: '/sdcard/0my_files/book/cryptography/Introduction to Modern Cryptography(2th)(2015)(Jonathan Katz)(Yehuda Lindell).pdf'
          #或视为从『集合纟输出』以某种概率分布选中一个输出
    #更新:e ../lots/NOTE/PTS/idea\ -\ syntax\ design\[working].txt



可增广加密系统:密钥冠以加密算法名称及版本号。
  #可升级加密系统:
  通常假设:加密系统公开
    默认:加密系统不变
      =>明文空间不变
      =>密钥空间不变
  私密化加密系统 固然有些麻烦，但确实给破解方增加了难度。
  另外，任何系统都有升级或打补丁的现实需求，随之而来的回顾性兼容需求。
  可以这样设计:分割 密钥空间，未来版本 使用 保留区。
    或者说，密钥 冠以 加密算法名称及版本号。
  使用者，根据手头上所有的密钥，只需下载必要的加密算法。
  破解方 不知密钥，也就无法确认 加密算法，只能下载 当前所有在用的加密算法。

  需得维护一个半公开的命名系统。
    半公开:
      1.不列出所有算法名。
      2.只给某些人开放某些算法下载权限。日志记录下载方，控制信息流动方向。
