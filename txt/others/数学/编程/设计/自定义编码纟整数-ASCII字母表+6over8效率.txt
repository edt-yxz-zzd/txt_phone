
e others/数学/编程/设计/自定义编码纟整数-ASCII字母表+6over8效率.txt
!mv -i others/数学/编程/设计/自定义字符编码-ASCII字母表+6over8效率.txt others/数学/编程/设计/自定义编码纟整数-ASCII字母表+6over8效率.txt
#e others/数学/编程/设计/自定义字符编码-ASCII字母表+6over8效率.txt

view others/数学/编程/设计/自定义编码纟整数-alnum字母表+5over8效率.txt


#######
[支持词典序]
[字母表 |<=| ASCII]
[极限效率6/8]
++补丁:无限保留区
  view ../../python3_src/seed/int_tools/digits/codecs4int.py


#######
[95可打印ASCII字符==62数字字母+32标点+1空格]
  view ../../python3_src/seed/text/mk_char_pt_ranges5predicator.py

  assert printable_ascii_char_pt_ranges == alnum_ascii_char_pt_ranges | punctuation_ascii_char_pt_ranges | NonTouchRanges(((32, 33),))
  assert printable_ascii_char_pt_ranges.len_ints() == 95
  assert alnum_ascii_char_pt_ranges.len_ints() == 62
  assert punctuation_ascii_char_pt_ranges.len_ints() == 32

  assert printable_ascii_sorted_chars == ' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
  assert alnum_ascii_sorted_chars == '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
  assert punctuation_ascii_sorted_chars == '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
  assert space_ascii_sorted_chars == '\t\n\x0b\x0c\r\x1c\x1d\x1e\x1f '



######################
[[
#######
分级:标点:
  4:'.=@_'
  5:'!#+-?'
  2:',;'
  5:'^$%*~'
  3:'/:|'
  3:'<>&'
  7:'()[]`{}'
  3:'"\'\\'
[32 == +4 +5 +2 +5 +3 +3 +7 +3]
[极限效率6/8]
  => [躯胞 占用 64字符]
    数字字母62+2『_.』
    '.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'
==>>:
[32 -2 == 30 == +2 +5 +2 +5 +3 +3 +7 +3]
  累积:2,7,9,14,17,20,27,30

#######
编码自然数or编码整数
若 字母表 只添加 1 个 标点:
  1标点 => 多符码.头符码
  『@』
编码整数:
  若 字母表 多添加 奇数(>=3) 个 标点:
    eg:17个
    1标点 => 孤符码:0
    其余偶数标点 分正负两套
      负表达 是 正表达的取反
      非负 ~= 自然数
  若 字母表 多添加 偶数(>=2) 个 标点:
    eg:14个
    所有偶数标点 分正负两套
      负表达 是 正表达的取反
      正 ~= 自然数+1
编码自然数:
  若 字母表 多添加 多个(>=2) 标点:
    孤符码
    多符码==宏头胞+躯胞串

#######
考虑:{整数,自然数}:多添加的标点的数量<-{1,2,7,14,17}
ls = ['@' ,'=' ,'!#+-?' ,',;' ,'^$%*~' ,'/:|']
s = ''
for x in ls:
  s += x
  s = ''.join(sorted(s))
  sz = len(s)
  print(f'{sz}:{s!r}')
  if sz < 2:continue
  (half,r) = divmod(sz,2)
  h = s[half+r:]
  assert len(h) == half
  zero_char = s[half] if r else ''
  print(f'#{half}:{zero_char!r}:{h!r}')
1:'@'
2:'=@'
#1:'':'@'
7:'!#+-=?@'
#3:'-':'=?@'
9:'!#+,-;=?@'
#4:'-':';=?@'
14:'!#$%*+,-;=?@^~'
#7:'':'-;=?@^~'
17:'!#$%*+,-/:;=?@^|~'
#8:'/':':;=?@^|~'

#######
考虑:{整数,自然数}:多添加的标点的数量<-{1,2,7,14,17}
编码自然数{1}:
编码自然数{2}:
编码自然数{7}:
编码自然数{14}:
编码自然数{17}:
编码整数{1}:
  ~编码自然数{32}
编码整数{2}:
  ~编码自然数{1}
编码整数{7}:
  ~编码自然数{3}
编码整数{14}:
  ~编码自然数{7}
编码整数{17}:
  ~编码自然数{8}
==>>:
归结到考虑:自然数:多添加的标点的数量<-{1,2,3,7,8,14,17,32}
#######
编码自然数{1}:
  1
  #除了头胞，躯胞串方案与下面编码自然数{3}相同
  <0> bb_bbbb:进入 超凡层:
  <0> 0b_bbbb:2凡层:[0..<32]:[0..<2**186]
  <0> 10_bbbb:3凡层:[0..<16]:[0..<2**90][0..<2**((2**90-1)*6)==2**非常大]
  <0> 11_1bbb => 保留区0
  ... # 同下{除头苞}
  ...
#######
编码自然数{2}:
  1+1
  1:[0..<1]
  #除了头胞，躯胞串方案与下面编码自然数{3}相同
  <1> bb_bbbb:进入 超凡层:
  <1> 0b_bbbb:2凡层:[0..<32]:[0..<2**186]
  <1> 10_bbbb:3凡层:[0..<16]:[0..<2**90][0..<2**((2**90-1)*6)==2**非常大]
  <1> 11_1bbb => 保留区0
  ... # 同下{除头苞}
  ...
#######
编码自然数{3}:
  1+1+1
  1:[0..<1]
  1*64:[1..<65]
  #除了头胞，躯胞串方案与下面编码自然数{7}相同
  <2> bb_bbbb:进入 超凡层:
  <2> 0b_bbbb:2凡层:[0..<32]:[0..<2**186]
  <2> 10_bbbb:3凡层:[0..<16]:[0..<2**90][0..<2**((2**90-1)*6)==2**非常大]
  <2> 11_1bbb => 保留区0
  ... # 同下{除头苞}
  ...
#######
编码自然数{7}:
  2+2+2+1
  2:[0..<2]
  2*64:[4..<132]
  2*64*64:[0..<2**13]
  #除了头胞，躯胞串方案与下面编码自然数{8}相同
  <6> bb_bbbb:进入 超凡层:
  <6> 0b_bbbb:2凡层:[0..<32]:[0..<2**186]
  <6> 10_bbbb:3凡层:[0..<16]:[0..<2**90][0..<2**((2**90-1)*6)==2**非常大]
  <6> 11_1bbb => 保留区0
  ... # 同下{除头苞}
  ...
#######
编码自然数{8}:
  4+2+1+1
  4:[0..<4]
  2*64:[4..<132]
  1*64*64:[0..<2**12]
  #除了头胞，躯胞串方案与下面编码自然数{14}相同
  <7> bb_bbbb:进入 超凡层:
  <7> 0b_bbbb:2凡层:[0..<32]:[0..<2**186]
  <7> 10_bbbb:3凡层:[0..<16]:[0..<2**90][0..<2**((2**90-1)*6)==2**非常大]
  <7> 11_1bbb => 保留区0
  ... # 同下{除头苞}
  ...
#######
编码自然数{14}:
  10+2+1+1
  10:[0..<10]
  2*64:[10..<138]
  1*64*64:[0..<2**12]
  #除了头胞，躯胞串方案与下面编码自然数{17}相同
  <13> bb_bbbb:进入 超凡层:
  <13> 0b_bbbb:2凡层:[0..<32]:[0..<2**186]
  <13> 10_bbbb:3凡层:[0..<16]:[0..<2**90][0..<2**((2**90-1)*6)==2**非常大]
  <13> 11_1bbb => 保留区0
  ... # 同下{除头苞}
  ...
#######
编码自然数{17}:
  10+4+2+1
  10:[0..<10]
  4*64:[10..<266]
  2*64*64:[0..<2**13]
  #除了头胞，躯胞串方案与下面编码自然数{32}十分相似{保留区插入位置}
  <16> bb_bbbb:进入 超凡层:
  <16> 0b_bbbb:2凡层:[0..<32]:[0..<2**186]
  <16> 10_bbbb:3凡层:[0..<16]:[0..<2**90][0..<2**((2**90-1)*6)==2**非常大]
  <16> 11_1bbb => 保留区0
  <16> 11_00bb => 4凡层
  <16> 11_011b bb_bbbb => 保留区1
  <16> 11_0100 bb_bbbb => 5凡层
  <16> 11_0101 1b_bbbb => 保留区2
  <16> 11_0101 00_bbbb => 6凡层
  ...
#######
编码自然数{32}:
  直接进入 超凡层:
    超层==第零层==动态爻元
  0_bbbb => 1凡层:16:[0..<2**4]
  1_0bbb => 2凡层:[0..<8]:[0..<2**42]
  1_10bb => 3凡层:[0..<4]:[0..<2**18]:[0..<2**((2**18-1)*6)==2**1572858]
  1_111b => 保留区0
  1_1100 => 4凡层
  1_1101 1b_bbbb => 保留区1
  1_1101 00_bbbb => 5凡层
  1_1101 01_1bbb => 保留区2
  1_1101 01_00bb => 6凡层
  1_1101 01_011b => 保留区3
  1_1101 01_0100 bb_bbbb => 7凡层
  <29>   ...
  ...
#######
==>>:
自然数:多添加的标点的数量<-{1,2,3,7,8,14,17,32}:只有 32 的 尾部方案 与众不同
#######
]]
######################

