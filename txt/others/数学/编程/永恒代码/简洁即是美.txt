
简洁即是美
  #尽量使默认为空
  空的内建默认引入表#import表
    无需记忆，不依赖版本，『空』故美
  用户自定义引入表
    *模版/原型
      作为被引用的背景
    *继承
      默认继承父文件夹的设定
      可自定义完全重写
    一次定义，一次发布(无需各地反复引入)，简洁故美
  分离分离不断分离
    *分离接口与实现，引入的是接口，组装实体另有蓝图
      #见下面『shell的shebang的毛病』:硬路径vs软路径，单文件vs独占文件夹多辅助文件
    *分离公开接口与私有接口
      #见『编译问题/通用编译问题/静态语法 转化为约束与代码框架/要求:/语言本身支持:』
      #  以下纯复制
      接口与实现分离/头源分离
      私有接口与公开接口分离
      接口继承
        只有 公开接口 是 动多态
      实现继承
        在 具体子类的成员函数 中调用 公开接口 必须 指明是 最外层派生类/本类/默认父类/指定父类
        final 相当于 假设 最外层派生类 必是 本类# 依旧可被 继承
    *分离到文件本身是一个有序对象流文件/对象数组文件
      #无序对象流/对象集合==>>拆成文件夹
      # 无名情形随意命名
      # 有名情形约定文件名解码方式/添加一映射表文件/使用辅助文件
      #     如:『模块/组/无名对象/有名对象』+『编码协议-码/映射表-昵称/无名-随意命名/使用辅助文件-随意命名』
      #     #组:区域，如:私有区
      #     #辅助文件夹: 其名=辅助-原文件

      降低编译难度#提前切分，对慢于O(n)的编译方法友好
      降低修改的依赖性影响
      降低用户抽取局部信息的难度(局部文件可使用更旧的语言版本)


shell的shebang的毛病:
  .sh的shebang示例:『#! /bin/bash』
    毛病:强行指定执行器的硬路径
    ====
    可以有(用于临时目的)，但更该有『仅指定执行器的软路径』的选项
    ====
    更佳的解决方案是:
      每个脚本独占一个文件夹
      其他文件用以分离/提供相关信息
        如:文件格式#是啥语言的源文件
        如:字符编码#若是文本文件
        如:执行器的软路径#若是可执行文件
    ====
    软路径 的 公共命名空间分配 与 私人局部路径映射
      公共命名空间分配:
        文件格式:
          参数
            如:字符编码
          [(父类文件格式,参数)]
            如:源文件 <: 文本文件 <: 二进制文件
            如: .sh <: .bash
        软路径:
          文件格式,参数
          应用名,版本
      私人局部路径映射:
        本地局部注册:软路径->硬路径
        因为很要紧，不能是env环境变量


