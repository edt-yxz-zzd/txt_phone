
load module
  one main src ==>> many src files during compiling
usage:
  1. resource module
    e.g.
      parse several CSV textfiles/json files ...
      read_or_eval_and_store(cache_path, eval_args, f)
  2. user-defined dialect
    e.g. py
      obj.@f ::= type(obj).f(obj,...)
======

when "import xxx"

1. "xxx" ==>> xxx_main_src_path [exists]
2. xxx_main_src_path ==>> (required_compiler_name_and_version, xxx_tmp_bin_path)
3. if xxx_tmp_bin_path exists and newer than xxx_main_src_path:
  then:
    3.1. xxx_tmp_bin_path ==>> (actual_compiler_name_and_version, actual_xxx_all_src_paths)
    3.2. if actual_compiler_name_and_version ok and all(p older than xxx_tmp_bin_path for p in actual_xxx_all_src_paths):
      than:
        goto 5
      else:
        goto 4
  else:
    3.3. goto 4

4. compile xxx_main_src_path ==>> (actual_compiler_name_and_version, actual_xxx_all_src_paths, xxx_tmp_bin_path)
5. using xxx_tmp_bin_path


