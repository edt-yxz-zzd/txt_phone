idea



def usrhash(web_site, usr_account, salt)
	-> usrhash(web_site, usr_account, salt, version:uint)
	when we want to or be ask to change psw, we "version++"

程序更新？签名？
	旧程序 含 公钥+加密(程序名+版本)
	更新包 含 公钥+加密(程序名+描述)
版权文件
	原文件
	在某个权威网站发布：文件摘要，作者公钥，文件公钥，文件描述，下载链接
	发布文件=公钥+(周期化公钥 xor 原文件)
	授权文件=加密<私钥>(时间+谁授权谁在哪里怎么使用哪个文件)

goto
	结构化
	只能跳转到某祖节点(实)的兄弟标签节点(虚)
	不变式保持不变
		向后跳:不得跨过新变量初始化(除非以析构)
		不变式的部分重新确认
			最后变量列表:[...,x,...,a,b]
变量/空间命名:可覆盖与不可覆盖
	可覆盖:主要用于人手写与局部scope代码插入
	不可覆盖:跨层次(中间层次由用户控制)非局部的框架、自动命名生成
head file
	数据结构、BPI 与 逻辑约束、不变式 必须分层，各自内部可细分层
游戏地图建筑冠名广告
撒币大作战:以金钱作子弹变舔狗爆衣、作病毒变黑心、画地为牢钻狗洞
随机停产一两月、全行业或部分:抗风险:月光、负债


程序必须有两种以上的实现=一种自然简洁高效以实现功能为目标，另一种反直觉随机多变以产生不自然不稳定的输出打破用户枉加诸程序的约束为目标
普通文件=文件名作目录名+其下文件(类型格式标准+内容主题归类标签+文件版本+文件本体+修改历史+历史文件栈)
树层次体系、稠密正交阵列、稀疏标签、DAG
	树层次体系
		每个节点都的子节点(子分类)相对少，有效引导
		所有叶节点数量相对多，路径相对长。标签化后，程序难以枚举，用户难以浏览
		叉节点、叶节点是仅有的两种数据类型，但叉节点可共用同一套「稠密正交阵列」方案、「稀疏标签」方案
		维度分组、标签分组均可树状表达
	稠密正交阵列
		多个有意义的维度，各维度的数据可有独立的类型、格式、单位
		自动生成：时间、摘要
		数据库化，易于程序筛选
	稀疏标签
		扁平重叠分类，易于程序筛选
		平均子节点数<<标签数<<总叶节点数
		用户遍历标签难度中等
	DAG
		子分类有重叠
		* 动态运行
				父子关系是先后串行
				拓扑不可比较的节点的关系为并行(真物理并行、乱序原子串行(真随机、伪随机(参数决定、参数及环境共同决定)))
				子节点的输入为多个父节点的结果
				所有结果均需「在计算结束的前提下的正确性证明」，但不一定需要「计算结束证明」
				* 结果为tuple
						所有结果均需「计算结束证明」
				* 结果为连续累积量(矢量加，可交换运算)
						所有结果均需「计算结束证明」
						在运算过程中不断输出，不必只在最后输出
						若：可取消的连续累积运算(乘零)：
								可提前终止
								「计算结束证明」只需证明：
										「均不取消的情况下计算结束证明」
				* 结果为set
						不同结果的数量达到阈值则终结其他结果的计算
						* 所有结果均需「计算结束证明」
						* 只需阈值个结果有「计算结束证明」及「两两不同证明」
				* 结果为multiset
						结果数量达到阈值则终结其他结果的计算
						只需阈值个结果有「计算结束证明」
						阈值通常为1
						可选项：？冻结而非终结？循环{等待选择，后处理}
						
		* 静态排版
				父子关系是大小包含
				* 兄弟重叠union
				
				* 兄弟并存tuple/class/dict
				
				* 公共子对象(eg公共基类)
				




编译接口标准
	提供共用的抽象编译工程语言
	* 抽象相对文件路径及相关运算
	* 开关
			定名、含义
	* 选项：
		* 枚举
				程序须可枚举所有选项：xx -enum std ==>> stdc++98...
				
		* 程度
				优化：
						不优化
						稳定优化0~1
						测试中的优化0~1
	各源文件/各命名空间各自声明允许输入的宏名，未声明宏不得在其内展开
	用会影响编译结果的选项命名输出文件名但抽象输出对象名仍一致，打包链接时检查某些选项是否匹配
								


台词皮肤：同一款游戏几套台词，沙雕、阴暗、严肃

split debug text into named channels


输入法=定制键盘(O键盘)+定制输入法(同文输入法)+输入法状态+文本动作(vim)
带声调(地球拼音)
固定提示框内容:输入同一字多次、输入提示框所有内容


Haskell 允许函数调用时有任意多的参数(减少或增加)
	去括号：
		* 部分函数声明默认的固定参数数量
			调用时：=f
		* 调用时声明临时固定参数数量
			调用时：=3f
		* 调用时声明布临时不固定参数数量
			调用时：f，<3f，>=3f
		* 运算符的等级
			
		* 复合介词


__after_init__
	since when __init__, self is incomplete, some virtual func maynot available
	be used to verify, precompute cache



==============
mx as poly:
	mx2poly(mx)=sum mx[i,j]*r[i]*c[j] {i,j}
	r[i]*r[j] = [i==j]
	c[i]*c[j] = [i==j]
	mx2poly(m1*m2)=
		=mx2poly(m1)*mx2poly(m2.tr)
	张量?
	mul(a,{r1:r1',...;r1:x...}, b,{r2:r2',...;r2:x,...})
	m1*m2=mul(m1,{r:r;c:x}, m2,{c:c;r:x})
	
vcdm=virtual concept data member
	co-operative __init__/method
	access global obj via vcdm
	unordered access data member(virtual or not)
		readonly => read
		modifible => not-read
			=> additive modified obj
				i.e.
					set.(|=)
					set.discard(...) #not commute with (|=)
					#len(set) is indetermine
					int.(+=)
					int.(*=) #not commute with (+=)
algo @ check input is hard:
	e.g.prime
	maybe prime
	algo require a prime
		but allow non-prime
		not cause dead loop or consume too time
		success => result is good
		fail => raise a non_prime proof
			state change:
				even self is constant
				state-- well-ordered
				cause a trap repr
algo: bat, init, one
	*bat:
		param -> [input] -> [output]
	*init:
		param -> aux_data
		aux_data -> input -> output
	*one:
		param -> input -> output



raise:
	*可靠:
		stop_iter_exc
		key_err
	*可移除:
		assert check ==>> on_error check input&member data


ls[i:-1] =def= ls[i:len(ls)]
	ls[-1] error! for ls[ls.find(...)]
	ls[-2] the last; not ls[-1]
	ls[0] the first; not ls[1]

value vs value_room vs nonvalue_room
	ref -> subobject is a part of whole "abstract_value"
	ptr -> subobject is not; but ptr value is
	.to_value() -> hashable

set vs map
	map.write <: set.write
		set.add ==>> map.add(k) ::= map.set(k,k)
	set.read <: map.read
		map.has(k) ==>> set.has(k)
		map.get(k) ==>> set.get(k)


{"k1":b, "k2":var a, **_} := d
var {"k1":b, "k2":a, **_} := d

(_, a, var b, ..., 5:c, *_) := tpl


get defaults
	???f(_,_,a3:=?, k1=_,k2=_,u:=?k3, args := *?, kw := **?)

breaks:
	try for(){
		if...goto_out_afterward a1
		if...goto_out_afterward a2
		if...break
	}else{
	}except{
	}+breaks{
		a1:{
		}
		a2:{
		}
	}
	// else, except, a1,a2 are not goto same end when out the{}

	goto_out_forward ==>> continue
	goto_out_backward ==>> break
	named_layer for continue,break


	// "if{}" is neither:
	returnable_layer
	breakable_layer{
		break_out 1 layer
	}
	<==>
	do{
		break
	}while(0);

	def f{n}():
		goto_out n
	def h{_;n}():
		return x to n
	def g():
		h{g}() # <==> return x
		t:for(;;){
			f{t}() # <==> continue
			f{e}() # <==> break
		}
		e:
		...
		
		a:{
			b:{
				c:{
					d:{
						#a macro inserted code snippet
						using vars outside tag c
						using vars inside tag b
					}
				}
			}
		}

(,a ,b)
{;a ;b}

switch(a, f){
	case b:....//if f(a,b)
}


class member layer
	//can only access curr-layer and the direct-above-layer
	//not below, not grandpa
	;class C{
		;int _i
		;------
		;int get_i()...
		;------
		;void f()...//cannot access _i,g, but get_i,f
		;------
		;void g()...
	;}
	;

data_struct==wrapper+content
	wrapper = refcount, lock...


[byte] ==> [bit] ==> (uint, [pint]) ==> cf ==> frac
	count 1s & 0s

neednot kw "global"&"nonlocal"
	"g.x = ..." works!!!!
g.f, g..h
	g.__d__[".f"]
	...["..h"]



doc collect methods:
	Object.f(obj, ...)
	==>>
	type(obj).??? := Object.f
	obj.\{Object.f}(...)
	
	better for discovery

add new member to module/class/... will broken existing code
	1.
		from m import *
		from n import *
		==>>
		avoid "*"
		
		haskell
			infix + 5
			instance ...
		==>>
		avoid uname element, ie name everything
		
		???
		but what for forwording???
	2.
		class A(B, C)
			f from B, C???
			[B, C] order????
		open or close??
		version or select




encoding
	可双向遍历，定位到字符中间字节时可定位到开头字节
	全文本开头结尾必须插入特殊符号，以避免错误定位风险
		[a_* b_]
			[b=0][a=1]
				not error
				后向遍历时在二进制与全文本开头有错误定位的风险
				在全文本开头插入\x7f??
		[a_, b_ c_* d_]
			[a = 00]
				64 个单字节字符
					0-9
					a-z #36
					_
					sp
					,()"'\ #44
					=
					.<>;:{}[]/# #56
					+-*`~@$% #64
					#^&|!? tab
				[a = 0]
					[c=10][b=111][d=110]
						2^10 个双字节字符
		[a_, b1_ b0_ (c1_ c0_)* d1_ d0_]
			[a = 0]
				[c1=c0=10]
					[b1=11, b0=10][d1=10, d0=11]
		[a_, b_ c_+ d_]
			[a=0]
				[c=11][b=d=10]
					not error
					全文本开头结尾有错误定位风险
		[a_ (b_+ a_)?]
			[a=0]
				[b=1]
					not error
					全文本开头结尾有错误定位风险




