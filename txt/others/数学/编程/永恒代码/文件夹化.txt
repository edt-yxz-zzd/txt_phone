
文件->文件夹
  主文件/内容文件/主文件夹
    文件->多文件
      分解以降低编译难度，分散语法更新的兼容问题，提高稳定性
        有时并不需要解析全文件，如cmake/打包发布工具setuptools/distutils，只要知道依赖关系就行
      如HTML可拆成head/body/script...
      如.hs可拆成import/class/instances/var
  辅助文件/外挂文件
    #提供信息
    理想文件名
      #vs文件系统中的在线文件名(外存昵称)
      #vs被模块引入后的再命名(模块内昵称)
      #vs映射到其他编程语言中的模块名(外编程语译名)
      #     译名 比 昵称 更有规律，编程语言标识 的 语际翻译 完全可以自动化(唯一的问题是目标语言不支持超长文件名，可通过手动建立映射表解决)
      #
      #     如:外存昵称 可能是 自动分配的随机数
      #     如:模块内昵称 可能是 手动创造的缩写
      #vs在本编程语言中的模块名(原编程语标识名~理想文件名 的可能来源) #但一般 编程语标识 不能含 空格
      #vs在原产地自然语言中的名称(原自然语标识名~理想文件名 的可能来源) #考虑到 交流与输入 等问题，小语种/中文 都不是太好的选择 #既要容易输入(字符间易区分，字符集足够小或有简单的形码输入法，如[0-9]或韩文)，又要有 公开权威丰富的拟自然语的技术性词典 以便于 阅读理解#中文 最大的问题在于还未有极有规律极简洁的纯形码输入法
      #vs在原产地自然语言中的名称(外自然语译名~无关 理想文件名)
      支持任意字符
      支持超长文件名
      支持任意编码
        比如：文件名是超长字节串
          可使用ascii，以加快编解码速度，减少存储空间
    文件格式
      文本文件:字符编码
    修改时刻

  历史文件
    #应用名:文件名/文件夹名 #文件用途
    vim: *.swp #编辑历史
    vim: *.bak #文件备份
    git: .git/ #仓库快照
    py: __pycache__/ #加速加载


