
e others/数学/编程/永恒代码/原貌字符串.txt


view others/数学/编程/永恒代码/原貌字符串.txt
view ../../python3_src/自己的相关数据/on_working.txt
e script/bifix.py


原貌字符串
原貌串 如何 表达？
  特别注意 [len 字集==2] # 字集={0,1}

给定一个 内容串，如何 嵌入到 一个 可识别的 结构中？

方案1:指定长度
  但 对于[len 字集==2]情形:
    0{derived 原貌串长度的比特数}1(?P<原貌串长度>[01]{using 原貌串长度的比特数})(?P<原貌串>[01]{using 原貌串长度})
  不太自然...

方案2:使用 结束串
结束串 是 特定于 内容串 的，应当记为 结束串<内容串>
定义 结束串
约束:
  [len 结束串 > 0]
  [结束串 not in (内容串++结束串)[:-1]]
定义 半结束串
  [len 半结束串 > 0]
  [半结束串 not in 内容串]
可识别: 内容串 ++ 结束串<内容串>


定义 字串的双缀
  [双缀<字串> <- {字串[:i] | [i<-[0..len 字串]][字串[:i]==字串[len 字串-i:]]}]
定义 字串的非空真子双缀
  [非空真子双缀<字串> <- {字串[:i] | [i<-[1..len 字串 -1]][字串[:i]==字串[len 字串-i:]]}]
定义 反双缀字串
  [反双缀字串 === 无非空真子双缀的字串]
  [反双缀(字串) <==> [@i<-[1..len 字串 -1]. [字串[:i] =!= 字串[-i:]]]]
定义 字串的拟周期
  [拟周期<字串> = len 字串 - len 非空真子双缀<字串>]

定义 半反双缀(半结束串,附加串)
  [半反双缀(半结束串,附加串) <==> let [s:=半结束串++附加串] in [@i<-[len 附加串 + 1..len s -1]. [s[:i] =!= s[-i:]]]]

符号 简记 定义:
  [t .<. s] =[def]= [字串t 是 字串s的 一个 非空真子双缀]
  [s .%. T] =[def]= [正整数T 是 字串s的 一个 拟周期]



双缀 相关 定理:

2*T <= n
k >= T
s[T:], s[:k] 都是s的非空真子双缀
有何关系？
s[:k] = s[:T] ++ s[T:k]
s[:T] = s[T:2*T]
s[:k]=s[n-k:n]
s[:T]=s[n-k:n-k+T]
%T %(n-k) ==>> %gcd(T, n-k)
T3 = gcd(T1,T2) requires [T1+T2 <= n]
[最长非空真子双缀 s[T0:]]:
  [非空真子双缀长度m >= T0] --> [m = n-i*T0]



[字串s,t,u,v][S = len s][T = len t][U = len u][V = len v]:
  [u,v .<. s][U < V]:#==>> [u .<. v]
    !![u .<. s]
    [u == s[:U] == s[-U:]]
    !![v .<. s]
    [v == s[:V] == s[-V:]]
    !![U < V]
    [u == s[:U] == s[:V][:U] == v[:U]]
    !![U < V]
    [u == s[-U:] == s[-V:][-U:] == v[-U:]]
    [v[:U] == u == v[-U:]]
    [u .<. v]

  [u .<. v][v .<. s]:#==>> [u .<. s]
    !![v .<. s]
    [v == s[:V] == s[-V:]]
    !![u .<. v]
    [u == v[:U] == v[-U:]]
    [0 < U < V]

    [u == v[:U] == s[:V][:U] == s[:U]]
    [u == v[-U:] == s[-V:][-U:] == s[-U:]]
    [s[:U] == u == s[-U:]]
    [u .<. s]

  [s .%. L][2*L < S]:#==>> [s .%. 2*L][s[L:] .%. L]
    !![s .%. L]
    [s[L:] == s[:S-L]]
    !![2*L < S]
    [s[L +L:] == s[0 +L:S-L]]
    [s[L:S -L] == s[:S-L -L]]
    [s[2*L:] == s[L:S-L] == s[:S-2*L]]
    [s .%. 2*L]
    [s[L:][L:] == s[2*L:] == s[L:S-L] == s[L:][:S-L -L]]
    [s[L:] .%. L]
    [s .%. 2*L][s[L:] .%. L]

  [s .%. L][uint i][0 < i*L < S]:#==>> [s .%. i*L]
    !![s .%. L]
    [0 < L < S]
    !![0 < i*L < S]
    [i >= 1]

    [@j:][0 <= j < i]:
      * [j==0]:
        !![s .%. L]
        [s[j*L:] .%. L]

      * [j>=1][s[(j-1)*L:] .%. L]:
        !![[s .%. L][2*L < S] ==>> [s .%. 2*L][s[L:] .%. L]]{{s:=s[(j-1)*L:], S:=S-(j-1)*L}}
        [[s[(j-1)*L:] .%. L][2*L < S-(j-1)*L] ==>> [s[(j-1)*L:] .%. 2*L][s[(j-1)*L:][L:] .%. L]]
        [[s[(j-1)*L:] .%. L][(j+1)*L < S] ==>> [s[j*L:] .%. L]]
        !![j < i]
        [j+1 <= i]
        !![i*L < S]
        [(j+1)*L <= i*L < S]
        !![s[(j-1)*L:] .%. L]
        [s[j*L:] .%. L]

      [s[j*L:] .%. L]
      [s[(j+1)*L:] .<. s[j*L:]]
      !![u .<. v][v .<. s] ==>> [u .<. s]
      [s[(j+1)*L:] .<. s[0*L:]]
      [s[(j+1)*L:] .<. s]
    [@j. [0 <= j < i] --> [s[(j+1)*L:] .<. s]]
    [s[((i-1) +1)*L:] .<. s]
    [s[i*L:] .<. s]
    [s .%. i*L]

  [s .%. L] <==> [0 < L < S][@i <- [0..<S]. [s[i] == s[i%L]]]


  举反例 否定 [[s .%. L][2*L < S][s .%. K][L < K <= 2*L] --> [K==2*L]]
    #1 1011 1011
    #11 011
    [s=='110111011'][S==9][L==4][K==7]
  [s .%. L0][s .%. L1][L0+L1 <= S]:#==>> [s .%. gcd(L0,L1)]
    !![s .%. L0]
    [s[:S-L0] == s[L0:S]]
    !![s .%. L1]
    [s[:S-L1] == s[L1:S]]
    !![L0+L1 <= S]
    [L0 <= S-L1]
    [s[:S-L1][:L0] == s[L1:S][:L0]]
    [s[:L0] == s[L1:L1+L0]]
    let (q,r) := divmod(L1, L0)
    [0 <= r < L0]
    [L1 == q*L0 + r]
    [r == L1%L0]
    [s[:L0] == s[L1:L1+L0] == s[q*L0+r:(q+1)*L0+r] == s[q*L0+r:(q+1)*L0] ++ s[(q+1)*L0:(q+1)*L0+r]]
    !![s .%. q*L0]
    !![s .%. (q+1)*L0]
    [s[:L0] == s[r:L0] ++ s[0:r]]
    [@i <- [0..<L0]. [s[:L0][i] == s[(r+i)%L0]]]
    !![s .%. L0]
    [@i <- [0..<S]. [s[i] == s[i%L0]]]
    [@i <- [0..<S]. [s[i] == s[i%L0] == s[:L0][i%L0] == s[(r+i%L0)%L0] == s[(L1%L0+i%L0)%L0] == s[(L1+i)%L0]]]
    [@i <- [0..<S]. [s[i] == s[(L1+i)%L0]]]
    [@i <- [0..<S]. [s[i] == s[(L1+i)%L0] == s[(L1+((L1+i)%L0))%L0] == s[(2*L1+i)%L0]]]
    [@n <-[0..]. @i <- [0..<S]. [s[i] == s[(n*L1+i)%L0]]]
    [?a,b:][a*L1+b*L0 == gcd(L1, L0)]]
    let n := a%L0
    let g := gcd(L1, L0)
    [a = (a//L0)*L0 + n]
    [g == a*L1+b*L0 == n*L1 + (a//L0)*L0*L1 +b*L0 == n*L1 + ((a//L0)*L1 +b)*L0 == n*L1 %L0]
    [@i <- [0..<S]. [s[i] == s[(n*L1+i)%L0] == s[(g +i)%L0]]]

    [@i <- [0..<S]. [s[i] == s[(g +i)%L0]]]


    !!flip L0,L1
    [@i <- [0..<S]. [s[i] == s[(g +i)%L1]]]

    [@i <- [0..<S]. [s[i] == s[(g +i)%L1] == s[(g +i)%L0]]]
    [@i <- [0..<S]. [s[i] == s[i%g]]]
    [s[g:] == s[:-g]]
    [0 < g <= min(L0, L1) < S]
    [s .%. g]
    [s .%. gcd(L0,L1)]





  [s[L:] 是s的 最长非空真子双缀][s .%. K][K <= S-L]:#==>> [K%L == 0]
    let g := gcd(L,K)
    !![K <= S-L]
    [L+K <= S]
    !![s[L:] 是s的 最长非空真子双缀]
    [s .%. L]
    !![s .%. K]
    [s .%. g]
    [s[g:] 是s的 非空真子双缀]
    !![s[L:] 是s的 最长非空真子双缀]
    [len s[g:] <= len s[L:]]
    [g >= L]
    [gcd(L,K) >= L]
    !![K,L > 0]
    [gcd(L,K) == L]
    [K%L == 0]

  [t .<. s]:#==>> [?K <- [1..S//2]. [s[:K] .<. s]]
    let L := len s - len t
    let r = S%L
    let q = S//L
    [0 < L < S]
    [q >= 1]

    * [S//2 < L < S]:
      [r == S%L = S-L < S-S//2 <= S//2+1]
      [r <= S//2]
    * [0 < L <= S//2]:
      [r == S%L < L <= S//2]
      [r <= S//2]
    [0 <= r <= S//2]

    let K = L if r==0 else r
    let q_ = q-1 if r==0 else q
    * [r==0]:
      [S==q*L]
      !![0 < L < S]
      [q >= 2]
      [0 < L <= S//2]
      !![K == L]
      [0 < K <= S//2]
      !![q >= 2]
      [S-K = (q-1)*L = q_*L > 0]
    * [r > 0]:
      !![0 <= r <= S//2]
      [0 < r <= S//2]
      !![K == r]
      [0 < K <= S//2]
      !![q >= 1]
      [S-K = q*L = q_*L > 0]
    [0 < K <= S//2]
    [S-K = q_*L > 0]



    [0 < q_*L == S-K <= S]
    !![t .<. s]
    [s .%. L]
    [s .%. q_*L]
    [s[:K] .<. s]
    [?K <- [1..S//2]. [s[:K] .<. s]]
  [反双缀(s) <==> [@i<-[1..S//2]. [s[:i] =!= s[-i:]]]]
    #只需检查一半
    #『构建反双缀字串的一个模版』: 0xxx 1111





若是 [结束串囗字集 && 内容串囗字集 =!= {}]，则 结束串 必是 变长字串，如何指定？指定长度？或者 又是一个 原貌串？
  自然一点，当然是 重复使用 原貌串
  是否 可行？
    可行：结束串 以 对数/log 递减长度
    若 [len 结束串囗字集 >= 3] 则 可使用模版 regex'[01]*2' 用作 结束串
    若 [len 结束串囗字集 == 2] 则 才有必要 使用 非确定性 多层 递减 结束串，首个 结束串 固定长度，格式:
      (?P<首个结束串>.{固定长度})(?P<下一层结束串或原貌串>((?!\本层结束串).)*)(\本层结束串)(?P<接续否>[01])〔(?P<下一层结束串或原貌串>((?!\本层结束串).)*)(\本层结束串)(?P<接续否>[01])〕※
      或者:
        原貌字符串的表达 = 11110 xxx0 原貌串 11110 xxx0
        原貌字符串的表达 = 1{n+1}0.{n}0 原貌串 1{n+1}0.{n}0
          见上面:『构建反双缀字串的一个模版』


???证明 合格 结束串 的 最短长度 只有 原貌串长度 的 对数规模大小 # O(log 原貌串长度)
证明 合格 半结束串 的 最短长度 只有 原貌串长度 的 对数规模大小 # O(log 原貌串长度)

???[len(结束串) = O(log<len(结束串囗字集)>(len(原貌串)))]
  半结束串 只要 附加 字串 变成 反双缀字串 即 变成 合格 结束串
    反双缀(半结束串++附加串)
    更宽松的条件: 半反双缀(半结束串,附加串)
  需要附加多长？最多长度翻倍！
  即:
    [结束串==半结束串++附加串][反双缀(结束串)][len 附加串囗字集 >=2]==>>[附加串的最短长度<=半结束串的长度]
    证明: 比如[半结束串 = 0.{n-1}][附加串 = 1{n}]
          见上面:『构建反双缀字串的一个模版』
  故 原问题 转化为 半结束串 与 原貌串 关系

[[证明囗半结束串的最短长度只有原貌串长度的
[len 半结束串囗字集 >= 2][半结束串囗字集 <= 原貌串囗字集] ==>> [len(半结束串) = O(log<len(半结束串囗字集)>(len(原貌串)))]
  转化如下：
[@自然数n. @字串s. @字集S. [n>=0][字串s 包含 字集S的所有长度为n的字串][len(S)>=1] --> [len(s) >= len(S)**n+(n-1)]]
  证明:
    let N=len(S)
    !![N >= 0]
    [字集S的所有长度为n的字串 非空]
    !![字串s 包含 字集S的所有长度为n的字串]
    [字串s 包含 至少一个 字集S的长度为n的字串]
    [len(s) >= n]

    * [n == 0]:
      [rhs = len(S)**n+(n-1) = N**0+0-1 = 0 <= len(s) = lhs]
    * [n>=1][N == 1]:
      [rhs = len(S)**n+(n-1) = 1**n+n-1 = n <= len(s) = lhs]
    * [n>=1][N >= 1]:
      定义 有向图囗带自环囗无重边:
        节点集 为 字集S的所有长度为(n-1)的字串
        有向边 连结 满足以下关系的任意两个节点:
          起点[1:] === 终点[:-1]
      ==>>
      [任一节点 出度 为 N]
      [任一节点 入度 为 N]
      [有向边总数===N*节点总数===N**n]
      !![字串s 包含 字集S的所有长度为n的字串]
      [需要遍历所有 有向边]
      !![s是字串 而非 字环]
      [s初始(n-1)个字 并没有遍历任何 有向边]
      [lhs = len(s) >= (n-1)+有向边总数 === N**n+(n-1) = rhs]






e script/bifix.py
枚举所有非空真子双缀长度的可行配置
  S = len s
  S -> [非空真子双缀长度的可行配置]
  S -> [(sorted[uint], eq_lsls, ne_pairs)]

  0 -> []
  1 -> [([], [], [])]
  2 -> [([], [], [(0,1)]), ([1], [[0,1]], [])]
  3 -> [([], [], [(0,2)]), ([1], [[0,2]], [(1, [0,2])]), ([2], [[0,1,2]], [])]
  4 -> [([], [], [(0,3)... ...]), ([1], [[0,3]], [(1, [0,3]... ...TODO)]), ([2], [[0,1,2]], [])]

枚举所有非空真子双缀长度的可行配置囗简单版
  S = len s
  S -> [非空真子双缀长度的可行配置]
  S -> [(sorted[uint8len]:[uint8char]}

  0 -> {}
  1 -> {():[0]}
  ...见下面:『枚举所有非空真子双缀长度的可行配置囗简单版』 #copy from: view script/bifix.py

OEIS 在线揭秘整数序列
    1 2 3 4 6 8 10 13 17 21 27 30 37 47 57 62
    https://oeis.org/A005434
        #A005434 Number of distinct autocorrelations of binary words of length n.
        #   为什么只是 二进制？是否 真的与任意大小字母表的字符串 拥有同样的 双缀长度可行配置？
        #A045690 (the number of binary strings sharing the same autocorrelation).

#[[[枚举所有非空真子双缀长度的可行配置囗简单版
# copy from: view script/bifix.py
# copy to: view others/数学/编程/永恒代码/原貌字符串.txt
from seed.helper.stable_repr import stable_repr__expand_top_layer, stable_repr_print__expand_top_layer
from seed.tiny import print_err
def 枚举所有非空真子双缀长度的可行配置囗简单版(until, /):
    def show(sz, config2instance, /):
        bifix_lens2seq = config2instance
        print_err(sz, len(bifix_lens2seq))
        print('len_seq:', sz)
        print('grouped:', len(bifix_lens2seq))
        stable_repr_print__expand_top_layer(sys.stdout, bifix_lens2seq)
        print()


    def instance2sorted_bifix_lens(instance, /):
        return tuple(i for i in range(1, len(instance)) if instance[:i] == instance[-i:])

    def main():
        sz2config2instance = [{}, {():[0]}]
            # S -> {sorted_bifix_lens/sorted[uint%S]:instance/[uint%S]{len=S}}
        S = len(sz2config2instance)-1
        while 1:
            show(S, sz2config2instance[S])
            if S == until: break
            ##next round
            S = sz = len(sz2config2instance)
            ilast = S-1
            config2instance = {}
            def add(sorted_bifix_lens, instance, /):
                assert len(instance) == S
                assert sorted_bifix_lens not in config2instance
                assert sorted_bifix_lens == instance2sorted_bifix_lens(instance)
                config2instance[sorted_bifix_lens] = instance
            #def add(sorted_bifix_lens, instance, /):

            for min_pseudo_period in range(1, S+1):
                q, r = divmod(S, min_pseudo_period)
                assert q >= 1
                if q > 1:
                    assert 1 <= min_pseudo_period <= S//2
                    sz__small = r+min_pseudo_period
                    assert 0 < sz__small < S
                    config2instance__small = sz2config2instance[sz__small]
                    if r == 0:
                        def pred(sorted_bifix_lens__small, /):
                            assert sz__small == min_pseudo_period
                            if sorted_bifix_lens__small:
                                min_pseudo_period__small = sz__small - sorted_bifix_lens__small[-1]
                                return not min_pseudo_period%min_pseudo_period__small==0
                            return True
                    else:
                        def pred(sorted_bifix_lens__small, /):
                            if not r in sorted_bifix_lens__small:
                                return False
                            min_pseudo_period__small = sz__small - sorted_bifix_lens__small[-1]

                            return min_pseudo_period__small == min_pseudo_period or not min_pseudo_period%min_pseudo_period__small==0
                    ##end-def-pred()
                    ex = (*range(sz__small, S, min_pseudo_period),)
                    for sorted_bifix_lens__small, instance__small in config2instance__small.items():
                        if not pred(sorted_bifix_lens__small):continue
                        sorted_bifix_lens = sorted_bifix_lens__small + ex
                        instance = instance__small + instance__small[r:]*(q-1)
                        add(sorted_bifix_lens, instance)
                #if q > 1:
                else:
                    assert q==1
                    assert min_pseudo_period > S//2
                    if r == 0:
                        assert min_pseudo_period == S
                        sorted_bifix_lens = ()
                        instance = [0]*S
                        instance[-1] = 1
                        add(sorted_bifix_lens, instance)
                    else:
                        assert 1 <= r < min_pseudo_period
                        assert r+min_pseudo_period == S
                        assert 2*r < S
                        sz__small = r
                        config2instance__small = sz2config2instance[sz__small]
                        for sorted_bifix_lens__small, instance__small in config2instance__small.items():
                            sorted_bifix_lens = sorted_bifix_lens__small + (sz__small,)
                            instance = instance__small + [sz__small]*(S-2*sz__small) + instance__small
                            add(sorted_bifix_lens, instance)
            sz2config2instance.append(config2instance)
        #end-while 1:
        sz2config2instance
        sz2num_configs = [*map(len, sz2config2instance)]
        print_err(sz2num_configs)
    #end-def main():



    main()
#end-def 枚举所有非空真子双缀长度的可行配置囗简单版(until, /):
    r'''[[[
py script/bifix.py -s '枚举所有非空真子双缀长度的可行配置囗简单版(50)' > ~/my_tmp/_.txt
.../txt_phone/txt $ py script/bifix.py -s '枚举所 有非空真子双缀长度的可行配置囗简单版(50)' > ~/my_tmp/_.txt
1 1
2 2
3 3
4 4
5 6
6 8
7 10
8 13
9 17
10 21
11 27
12 30
13 37
14 47
15 57
16 62
17 75
18 87
19 102
20 116
21 135
22 155
23 180
24 194
25 220
26 254
27 289
28 312
29 359
30 392
31 438
32 479
33 538
34 595
35 664
36 701
37 772
38 863
39 956
40 1005
41 1115
42 1205
43 1317
44 1414
45 1552
46 1677
47 1836
48 1920
49 2074
50 2249
[0, 1, 2, 3, 4, 6, 8, 10, 13, 17, 21, 27, 30, 37, 47, 57, 62, 75, 87, 102, 116, 135, 155, 180, 194, 220, 254, 289, 312, 359, 392, 438, 479, 538, 595, 664, 701, 772, 863, 956, 1005, 1115, 1205, 1317, 1414, 1552, 1677, 1836, 1920, 2074, 2249]
.../txt_phone/txt $

cp ~/my_tmp/_.txt ~/my_txt/'script/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt'
view script/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt
!du -h 'script/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt'
    3.7MB !!!
7z a  ~/my_txt/'script/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt'.7z  ~/my_txt/'script/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt'
!du -h 'script/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt'.7z
    164KB

mv ~/my_txt/'script/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt' ~/my_tmp/
view /sdcard/0my_files/tmp/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt
view script/bifix.py.out.枚举所有非空真子双缀长度的可行配置囗简单版(50).txt.7z



py script/bifix.py -s '枚举所有非空真子双缀长度的可行配置囗简单版(16)' > ~/my_tmp/_.txt
1 1
2 2
3 3
4 4
5 6
6 8
7 10
8 13
9 17
10 21
11 27
12 30
13 37
14 47
15 57
16 62


view /sdcard/0my_files/tmp/_.txt
len_seq: 1
grouped: 1
{()
: [0]
}
len_seq: 2
grouped: 2
{()
: [0, 1]
,(1,)
: [0, 0]
}
len_seq: 3
grouped: 3
{()
: [0, 0, 1]
,(1,)
: [0, 1, 0]
,(1, 2)
: [0, 0, 0]
}
len_seq: 4
grouped: 4
{()
: [0, 0, 0, 1]
,(1,)
: [0, 1, 1, 0]
,(2,)
: [0, 1, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 0]
}
len_seq: 5
grouped: 6
{()
: [0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 0, 1]
,(1, 2)
: [0, 0, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 1, 0]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 0]
}
len_seq: 6
grouped: 8
{()
: [0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 0, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 0, 1]
,(1, 2, 3, 4, 5)
: [0, 0, 0, 0, 0, 0]
}
len_seq: 7
grouped: 10
{()
: [0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 1, 1, 0]
,(1, 2, 3)
: [0, 0, 0, 3, 0, 0, 0]
,(1, 3, 5)
: [0, 1, 0, 1, 0, 1, 0]
,(1, 2, 3, 4, 5, 6)
: [0, 0, 0, 0, 0, 0, 0]
}
len_seq: 8
grouped: 13
{()
: [0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 0, 1, 1, 0]
,(2, 5)
: [0, 1, 2, 0, 1, 2, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 2, 0, 0]
,(2, 4, 6)
: [0, 1, 0, 1, 0, 1, 0, 1]
,(1, 2, 3, 4, 5, 6, 7)
: [0, 0, 0, 0, 0, 0, 0, 0]
}
len_seq: 9
grouped: 17
{()
: [0, 0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 4, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 4, 0, 1, 1, 0]
,(1, 5)
: [0, 1, 1, 1, 0, 1, 1, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 4, 0, 1, 0, 1]
,(3, 6)
: [0, 0, 1, 0, 0, 1, 0, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 0, 2, 0, 0]
,(1, 3, 6)
: [0, 1, 0, 0, 1, 0, 0, 1, 0]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 4, 0, 0, 0, 0]
,(1, 3, 5, 7)
: [0, 1, 0, 1, 0, 1, 0, 1, 0]
,(1, 2, 3, 4, 5, 6, 7, 8)
: [0, 0, 0, 0, 0, 0, 0, 0, 0]
}
len_seq: 10
grouped: 21
{()
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 4, 4, 0, 0, 0, 1]
,(5,)
: [0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 4, 4, 0, 1, 1, 0]
,(1, 5)
: [0, 1, 1, 1, 0, 0, 1, 1, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 4, 4, 0, 1, 0, 1]
,(2, 5)
: [0, 1, 2, 0, 1, 0, 1, 2, 0, 1]
,(2, 6)
: [0, 1, 2, 2, 0, 1, 2, 2, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 0, 0, 2, 0, 0]
,(1, 2, 6)
: [0, 0, 2, 2, 0, 0, 2, 2, 0, 0]
,(1, 3, 5)
: [0, 1, 0, 1, 0, 0, 1, 0, 1, 0]
,(1, 4, 7)
: [0, 1, 1, 0, 1, 1, 0, 1, 1, 0]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 4, 4, 0, 0, 0, 0]
,(2, 4, 6, 8)
: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
,(1, 2, 3, 4, 5, 6, 7, 8, 9)
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
len_seq: 11
grouped: 27
{()
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 3, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 4, 4, 4, 0, 0, 0, 1]
,(5,)
: [0, 0, 0, 0, 1, 5, 0, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 3, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 4, 4, 4, 0, 1, 1, 0]
,(1, 5)
: [0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0]
,(1, 6)
: [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 4, 4, 4, 0, 1, 0, 1]
,(2, 5)
: [0, 1, 2, 0, 1, 5, 0, 1, 2, 0, 1]
,(3, 7)
: [0, 0, 1, 3, 0, 0, 1, 3, 0, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 5, 0, 0, 2, 0, 0]
,(1, 2, 6)
: [0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0]
,(1, 3, 5)
: [0, 1, 0, 1, 0, 5, 0, 1, 0, 1, 0]
,(1, 3, 6)
: [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0]
,(1, 3, 7)
: [0, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0]
,(2, 5, 8)
: [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0]
,(1, 2, 3, 7)
: [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0]
,(1, 2, 5, 8)
: [0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0]
,(1, 2, 3, 4, 5)
: [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]
,(1, 3, 5, 7, 9)
: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
,(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
len_seq: 12
grouped: 30
{()
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 3, 3, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 4, 4, 4, 4, 0, 0, 0, 1]
,(5,)
: [0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, 1]
,(6,)
: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 3, 3, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 4, 4, 4, 4, 0, 1, 1, 0]
,(1, 5)
: [0, 1, 1, 1, 0, 5, 5, 0, 1, 1, 1, 0]
,(1, 6)
: [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 4, 4, 4, 4, 0, 1, 0, 1]
,(2, 5)
: [0, 1, 2, 0, 1, 5, 5, 0, 1, 2, 0, 1]
,(2, 6)
: [0, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 1]
,(2, 7)
: [0, 1, 2, 2, 2, 0, 1, 2, 2, 2, 0, 1]
,(4, 8)
: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 5, 5, 0, 0, 2, 0, 0]
,(1, 2, 6)
: [0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0]
,(1, 2, 7)
: [0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0]
,(1, 3, 5)
: [0, 1, 0, 1, 0, 5, 5, 0, 1, 0, 1, 0]
,(1, 4, 8)
: [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0]
,(3, 6, 9)
: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0]
,(1, 2, 3, 7)
: [0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0]
,(1, 3, 6, 9)
: [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]
,(1, 2, 3, 4, 5)
: [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0]
,(2, 4, 6, 8, 10)
: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
,(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
len_seq: 13
grouped: 37
{()
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 4, 4, 4, 4, 4, 0, 0, 0, 1]
,(5,)
: [0, 0, 0, 0, 1, 5, 5, 5, 0, 0, 0, 0, 1]
,(6,)
: [0, 0, 0, 0, 0, 1, 6, 0, 0, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 4, 4, 4, 4, 4, 0, 1, 1, 0]
,(1, 5)
: [0, 1, 1, 1, 0, 5, 5, 5, 0, 1, 1, 1, 0]
,(1, 6)
: [0, 1, 1, 1, 1, 0, 6, 0, 1, 1, 1, 1, 0]
,(1, 7)
: [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 4, 4, 4, 4, 4, 0, 1, 0, 1]
,(2, 5)
: [0, 1, 2, 0, 1, 5, 5, 5, 0, 1, 2, 0, 1]
,(2, 6)
: [0, 1, 2, 2, 0, 1, 6, 0, 1, 2, 2, 0, 1]
,(3, 6)
: [0, 0, 1, 0, 0, 1, 6, 0, 0, 1, 0, 0, 1]
,(3, 8)
: [0, 0, 1, 3, 3, 0, 0, 1, 3, 3, 0, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 5, 5, 5, 0, 0, 2, 0, 0]
,(1, 2, 6)
: [0, 0, 2, 2, 0, 0, 6, 0, 0, 2, 2, 0, 0]
,(1, 2, 7)
: [0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0]
,(1, 3, 5)
: [0, 1, 0, 1, 0, 5, 5, 5, 0, 1, 0, 1, 0]
,(1, 3, 6)
: [0, 1, 0, 0, 1, 0, 6, 0, 1, 0, 0, 1, 0]
,(1, 3, 7)
: [0, 1, 0, 3, 0, 1, 0, 1, 0, 3, 0, 1, 0]
,(1, 3, 8)
: [0, 1, 0, 3, 3, 0, 1, 0, 3, 3, 0, 1, 0]
,(1, 5, 9)
: [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0]
,(2, 4, 6)
: [0, 1, 0, 1, 0, 1, 6, 0, 1, 0, 1, 0, 1]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0]
,(1, 2, 3, 7)
: [0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0]
,(1, 2, 3, 8)
: [0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0]
,(1, 2, 5, 9)
: [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0]
,(1, 4, 7, 10)
: [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0]
,(1, 2, 3, 4, 5)
: [0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0]
,(1, 2, 3, 4, 5, 6)
: [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0]
,(1, 3, 5, 7, 9, 11)
: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
,(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
len_seq: 14
grouped: 47
{()
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 0, 0, 0, 1]
,(5,)
: [0, 0, 0, 0, 1, 5, 5, 5, 5, 0, 0, 0, 0, 1]
,(6,)
: [0, 0, 0, 0, 0, 1, 6, 6, 0, 0, 0, 0, 0, 1]
,(7,)
: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 4, 4, 4, 4, 4, 4, 0, 1, 1, 0]
,(1, 5)
: [0, 1, 1, 1, 0, 5, 5, 5, 5, 0, 1, 1, 1, 0]
,(1, 6)
: [0, 1, 1, 1, 1, 0, 6, 6, 0, 1, 1, 1, 1, 0]
,(1, 7)
: [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 4, 4, 4, 4, 4, 4, 0, 1, 0, 1]
,(2, 5)
: [0, 1, 2, 0, 1, 5, 5, 5, 5, 0, 1, 2, 0, 1]
,(2, 6)
: [0, 1, 2, 2, 0, 1, 6, 6, 0, 1, 2, 2, 0, 1]
,(2, 7)
: [0, 1, 2, 2, 2, 0, 1, 0, 1, 2, 2, 2, 0, 1]
,(2, 8)
: [0, 1, 2, 2, 2, 2, 0, 1, 2, 2, 2, 2, 0, 1]
,(3, 6)
: [0, 0, 1, 0, 0, 1, 6, 6, 0, 0, 1, 0, 0, 1]
,(3, 7)
: [0, 0, 1, 3, 0, 0, 1, 0, 0, 1, 3, 0, 0, 1]
,(4, 9)
: [0, 0, 0, 1, 4, 0, 0, 0, 1, 4, 0, 0, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 5, 5, 5, 5, 0, 0, 2, 0, 0]
,(1, 2, 6)
: [0, 0, 2, 2, 0, 0, 6, 6, 0, 0, 2, 2, 0, 0]
,(1, 2, 7)
: [0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0]
,(1, 2, 8)
: [0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0]
,(1, 3, 5)
: [0, 1, 0, 1, 0, 5, 5, 5, 5, 0, 1, 0, 1, 0]
,(1, 3, 6)
: [0, 1, 0, 0, 1, 0, 6, 6, 0, 1, 0, 0, 1, 0]
,(1, 3, 7)
: [0, 1, 0, 3, 0, 1, 0, 0, 1, 0, 3, 0, 1, 0]
,(1, 4, 7)
: [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0]
,(1, 4, 9)
: [0, 1, 1, 0, 4, 0, 1, 1, 0, 4, 0, 1, 1, 0]
,(2, 4, 6)
: [0, 1, 0, 1, 0, 1, 6, 6, 0, 1, 0, 1, 0, 1]
,(2, 4, 9)
: [0, 1, 0, 1, 4, 0, 1, 0, 1, 4, 0, 1, 0, 1]
,(2, 6, 10)
: [0, 1, 2, 2, 0, 1, 2, 2, 0, 1, 2, 2, 0, 1]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0]
,(1, 2, 3, 7)
: [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]
,(1, 2, 3, 8)
: [0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0]
,(1, 2, 6, 10)
: [0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0]
,(1, 3, 5, 7)
: [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0]
,(2, 5, 8, 11)
: [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1]
,(1, 2, 3, 4, 5)
: [0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0]
,(1, 2, 3, 4, 9)
: [0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0]
,(1, 2, 5, 8, 11)
: [0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0]
,(1, 2, 3, 4, 5, 6)
: [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0]
,(2, 4, 6, 8, 10, 12)
: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
,(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
len_seq: 15
grouped: 57
{()
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 1]
,(5,)
: [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 0, 0, 0, 0, 1]
,(6,)
: [0, 0, 0, 0, 0, 1, 6, 6, 6, 0, 0, 0, 0, 0, 1]
,(7,)
: [0, 0, 0, 0, 0, 0, 1, 7, 0, 0, 0, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 1, 1, 0]
,(1, 5)
: [0, 1, 1, 1, 0, 5, 5, 5, 5, 5, 0, 1, 1, 1, 0]
,(1, 6)
: [0, 1, 1, 1, 1, 0, 6, 6, 6, 0, 1, 1, 1, 1, 0]
,(1, 7)
: [0, 1, 1, 1, 1, 1, 0, 7, 0, 1, 1, 1, 1, 1, 0]
,(1, 8)
: [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 4, 4, 4, 4, 4, 4, 4, 0, 1, 0, 1]
,(2, 5)
: [0, 1, 2, 0, 1, 5, 5, 5, 5, 5, 0, 1, 2, 0, 1]
,(2, 6)
: [0, 1, 2, 2, 0, 1, 6, 6, 6, 0, 1, 2, 2, 0, 1]
,(2, 7)
: [0, 1, 2, 2, 2, 0, 1, 7, 0, 1, 2, 2, 2, 0, 1]
,(3, 6)
: [0, 0, 1, 0, 0, 1, 6, 6, 6, 0, 0, 1, 0, 0, 1]
,(3, 7)
: [0, 0, 1, 3, 0, 0, 1, 7, 0, 0, 1, 3, 0, 0, 1]
,(3, 9)
: [0, 0, 1, 3, 3, 3, 0, 0, 1, 3, 3, 3, 0, 0, 1]
,(5, 10)
: [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 5, 5, 5, 5, 5, 0, 0, 2, 0, 0]
,(1, 2, 6)
: [0, 0, 2, 2, 0, 0, 6, 6, 6, 0, 0, 2, 2, 0, 0]
,(1, 2, 7)
: [0, 0, 2, 2, 2, 0, 0, 7, 0, 0, 2, 2, 2, 0, 0]
,(1, 2, 8)
: [0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0]
,(1, 3, 5)
: [0, 1, 0, 1, 0, 5, 5, 5, 5, 5, 0, 1, 0, 1, 0]
,(1, 3, 6)
: [0, 1, 0, 0, 1, 0, 6, 6, 6, 0, 1, 0, 0, 1, 0]
,(1, 3, 7)
: [0, 1, 0, 3, 0, 1, 0, 7, 0, 1, 0, 3, 0, 1, 0]
,(1, 3, 8)
: [0, 1, 0, 3, 3, 0, 1, 0, 1, 0, 3, 3, 0, 1, 0]
,(1, 3, 9)
: [0, 1, 0, 3, 3, 3, 0, 1, 0, 3, 3, 3, 0, 1, 0]
,(1, 4, 7)
: [0, 1, 1, 0, 1, 1, 0, 7, 0, 1, 1, 0, 1, 1, 0]
,(1, 4, 8)
: [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0]
,(1, 5, 10)
: [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0]
,(2, 4, 6)
: [0, 1, 0, 1, 0, 1, 6, 6, 6, 0, 1, 0, 1, 0, 1]
,(2, 5, 10)
: [0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1]
,(3, 7, 11)
: [0, 0, 1, 3, 0, 0, 1, 3, 0, 0, 1, 3, 0, 0, 1]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0]
,(1, 2, 3, 7)
: [0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0]
,(1, 2, 3, 8)
: [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0]
,(1, 2, 3, 9)
: [0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 0]
,(1, 2, 5, 8)
: [0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0]
,(1, 2, 5, 10)
: [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0]
,(1, 3, 5, 7)
: [0, 1, 0, 1, 0, 1, 0, 7, 0, 1, 0, 1, 0, 1, 0]
,(1, 3, 5, 10)
: [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]
,(1, 3, 7, 11)
: [0, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0]
,(3, 6, 9, 12)
: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]
,(1, 2, 3, 4, 5)
: [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0]
,(1, 2, 3, 4, 9)
: [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0]
,(1, 2, 3, 7, 11)
: [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0]
,(1, 3, 6, 9, 12)
: [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]
,(1, 2, 3, 4, 5, 6)
: [0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0]
,(1, 2, 3, 4, 5, 6, 7)
: [0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0]
,(1, 3, 5, 7, 9, 11, 13)
: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
,(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
len_seq: 16
grouped: 62
{()
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
,(1,)
: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
,(2,)
: [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1]
,(3,)
: [0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1]
,(4,)
: [0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 1]
,(5,)
: [0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 1]
,(6,)
: [0, 0, 0, 0, 0, 1, 6, 6, 6, 6, 0, 0, 0, 0, 0, 1]
,(7,)
: [0, 0, 0, 0, 0, 0, 1, 7, 7, 0, 0, 0, 0, 0, 0, 1]
,(8,)
: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1]
,(1, 2)
: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0]
,(1, 3)
: [0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 0]
,(1, 4)
: [0, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 1, 1, 0]
,(1, 5)
: [0, 1, 1, 1, 0, 5, 5, 5, 5, 5, 5, 0, 1, 1, 1, 0]
,(1, 6)
: [0, 1, 1, 1, 1, 0, 6, 6, 6, 6, 0, 1, 1, 1, 1, 0]
,(1, 7)
: [0, 1, 1, 1, 1, 1, 0, 7, 7, 0, 1, 1, 1, 1, 1, 0]
,(1, 8)
: [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0]
,(2, 4)
: [0, 1, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 1, 0, 1]
,(2, 5)
: [0, 1, 2, 0, 1, 5, 5, 5, 5, 5, 5, 0, 1, 2, 0, 1]
,(2, 6)
: [0, 1, 2, 2, 0, 1, 6, 6, 6, 6, 0, 1, 2, 2, 0, 1]
,(2, 7)
: [0, 1, 2, 2, 2, 0, 1, 7, 7, 0, 1, 2, 2, 2, 0, 1]
,(2, 8)
: [0, 1, 2, 2, 2, 2, 0, 1, 0, 1, 2, 2, 2, 2, 0, 1]
,(2, 9)
: [0, 1, 2, 2, 2, 2, 2, 0, 1, 2, 2, 2, 2, 2, 0, 1]
,(3, 6)
: [0, 0, 1, 0, 0, 1, 6, 6, 6, 6, 0, 0, 1, 0, 0, 1]
,(3, 7)
: [0, 0, 1, 3, 0, 0, 1, 7, 7, 0, 0, 1, 3, 0, 0, 1]
,(3, 8)
: [0, 0, 1, 3, 3, 0, 0, 1, 0, 0, 1, 3, 3, 0, 0, 1]
,(4, 10)
: [0, 0, 0, 1, 4, 4, 0, 0, 0, 1, 4, 4, 0, 0, 0, 1]
,(1, 2, 3)
: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0]
,(1, 2, 5)
: [0, 0, 2, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 2, 0, 0]
,(1, 2, 6)
: [0, 0, 2, 2, 0, 0, 6, 6, 6, 6, 0, 0, 2, 2, 0, 0]
,(1, 2, 7)
: [0, 0, 2, 2, 2, 0, 0, 7, 7, 0, 0, 2, 2, 2, 0, 0]
,(1, 2, 8)
: [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0]
,(1, 2, 9)
: [0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0]
,(1, 3, 5)
: [0, 1, 0, 1, 0, 5, 5, 5, 5, 5, 5, 0, 1, 0, 1, 0]
,(1, 3, 6)
: [0, 1, 0, 0, 1, 0, 6, 6, 6, 6, 0, 1, 0, 0, 1, 0]
,(1, 3, 7)
: [0, 1, 0, 3, 0, 1, 0, 7, 7, 0, 1, 0, 3, 0, 1, 0]
,(1, 3, 8)
: [0, 1, 0, 3, 3, 0, 1, 0, 0, 1, 0, 3, 3, 0, 1, 0]
,(1, 4, 7)
: [0, 1, 1, 0, 1, 1, 0, 7, 7, 0, 1, 1, 0, 1, 1, 0]
,(1, 4, 10)
: [0, 1, 1, 0, 4, 4, 0, 1, 1, 0, 4, 4, 0, 1, 1, 0]
,(1, 6, 11)
: [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0]
,(2, 4, 6)
: [0, 1, 0, 1, 0, 1, 6, 6, 6, 6, 0, 1, 0, 1, 0, 1]
,(2, 4, 9)
: [0, 1, 0, 1, 4, 0, 1, 0, 1, 0, 1, 4, 0, 1, 0, 1]
,(2, 4, 10)
: [0, 1, 0, 1, 4, 4, 0, 1, 0, 1, 4, 4, 0, 1, 0, 1]
,(2, 5, 8)
: [0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 1]
,(4, 8, 12)
: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]
,(1, 2, 3, 4)
: [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0]
,(1, 2, 3, 7)
: [0, 0, 0, 3, 0, 0, 0, 7, 7, 0, 0, 0, 3, 0, 0, 0]
,(1, 2, 3, 8)
: [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0]
,(1, 2, 3, 9)
: [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0]
,(1, 2, 5, 8)
: [0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0]
,(1, 2, 5, 9)
: [0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0]
,(1, 2, 6, 11)
: [0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0]
,(1, 3, 5, 7)
: [0, 1, 0, 1, 0, 1, 0, 7, 7, 0, 1, 0, 1, 0, 1, 0]
,(1, 3, 6, 11)
: [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0]
,(1, 4, 8, 12)
: [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0]
,(1, 2, 3, 4, 5)
: [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0]
,(1, 2, 3, 4, 9)
: [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0]
,(1, 2, 3, 4, 10)
: [0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0]
,(1, 4, 7, 10, 13)
: [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0]
,(1, 2, 3, 4, 5, 6)
: [0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0]
,(1, 2, 3, 4, 5, 6, 7)
: [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0]
,(2, 4, 6, 8, 10, 12, 14)
: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
,(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
    #]]]'''
#]]]枚举所有非空真子双缀长度的可行配置囗简单版








suffix_tree 后缀树
  view ../../python3_src/nn_ns/RMQ/suffix_tree/SuffixTree.py

给定 原貌串、半结束串囗字集，如何 求一个 最短 半结束串，以满足 [半结束串 not in 原貌串]
    suffix_tree<原貌串>
    搜索 suffix_tree<原貌串> 的 最短间隙 当作 半结束串

给定 半结束串、附加串囗字集，如何 求一个 最短 附加串，以满足 [半反双缀(半结束串,附加串)]
    suffix_tree<半结束串>
    sorted_bifix_lens<半结束串>
    let 结束串 := 半结束串++附加串
    [结束串[:L+len(附加串)]==结束串[-L-len(附加串):]][1<=L<len(半结束串)]:
      [L <- sorted_bifix_lens<半结束串>]
    let 双缀后缀树<半结束串> := suffix_tree<半结束串> 删去 并非 半结束串 双缀长度 的 起始索引 的 叶节点
    搜索 双缀后缀树<半结束串> 的 最短间隙 当作 附加串

给定 原貌串、结束串囗字集，如何 求一个 尽量短 但 不必最短 的 结束串，以满足 [结束串 not in 原貌串++结束串[:-1]]
  求 最短 半结束串 <-- 原貌串，半结束串囗字集=结束串囗字集
  求 最短 附加串 <-- 半结束串，附加串囗字集=结束串囗字集
  得: 尽量短 结束串 := 半结束串++附加串
  ===若 [len 结束串囗字集 >= 3]，可简化如下:
  #保留一字符 唯一附加字符 当作 附加串
  let 唯一附加字符 <- 结束串囗字集
  附加串囗字集 := {唯一附加字符}
  附加串 := [唯一附加字符]
  半结束串囗字集 := 结束串囗字集 \-\ 附加串囗字集
  求 最短 半结束串 <-- 原貌串，半结束串囗字集
  得: 尽量短 结束串 := 半结束串++附加串



给定 原貌串、结束串囗字集，如何 求一个 最短 结束串，以满足 [结束串 not in 原貌串++结束串[:-1]]
    suffix_tree<原貌串>
    搜索 suffix_tree<原貌串> 的 满足 题中约束的 最短间隙 当作 结束串


