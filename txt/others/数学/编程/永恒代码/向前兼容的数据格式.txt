向前兼容的数据格式
=========:基础定义:
=========:向前兼容:
=========:数据类型:







=========:基础定义:
向前兼容
  即 前瞻兼容
类类型==支持 多继承 的 命名元组
  见下面『数据类型』
类类型 的 数据块
  #静态命名元组(named_tuple)
  子类 实际新增的数据成员
类定义:
  用于将 父类类名 及 数据成员类型名 的 昵称 翻译成 全称(全局标识)
  多继承 时，可能发生 数据成员名 碰撞，依 当前接口的类定义 解释 数据成员的昵称
  对象引用+当前接口的类定义+当前接口的成员昵称==>>成员所在数据块的源定义父类+成员全称









=========:向前兼容:
向前兼容==>>多继承
  留白，无视留白，无视未知成员，无视未知/未定义部分
  即为 允许多继承的类体系
  整个文件 是一个 类对象
  整个数据格式 为一个 类类型

父类 必须被 抽象继承
  ，故 子类数据块 有一个指向 父类数据块 的 引用，其以 父类类名 命名。
  *各子类数据块皆显式引用所有父类数据块:O(n^2)
  *各子类数据块皆显式引用所有直接父类数据块:O(n)~O(n^2)
  *各子类数据块不引用父类数据块，只有一个动态引用指向最外层实体子类:O(n)
    选择本项，则有三种引用:
      *内数据引用 #类数据块 的 引用
        =内数据引用=指向 {数据成员名:数据成员实体}
          #有序？可省去 数据成员名，变成 元组(tuple)
      *外对象引用 #最外层实体类 的 对象引用
        =外对象引用=指向 {父类类名昵称:内数据引用}
          #本类 是 父类之一
          #无序？ducktype？mixin？
          #有序？隐含动态的 最外层实体类的类定义的引用，变成 数组(array)
      *虚接口引用 #接口 的 引用
        #虚 指 形式类型 不一定是 实际类型(虽然须是 实际类型的父类)
        =虚接口引用=(最外层实体类的类定义的引用，外对象引用)
        #数据成员的实际类型（最外层实体类） 是 数据成员的形式类型 的子类
        #形式类型 用于 表达最低需求 及 使用上限
        #实际类型 的 类定义 用于 翻译 映射昵称(或 数组下标)

数据成员 分 静态、动态:
  *静态 #形式类型 即为 实际类型
    *外对象引用
    *基本数据类型
  *动态 #形式类型 为 实际类型 的 父类
    *虚接口引用
数据的引用 分 嵌入式、寻址式:
  *嵌入式
    *半嵌入式
      仅保证本次引用 非 寻址式
    *实心嵌入式
      整个对象 包括 子对象 不存在 寻址式引用
  *寻址式
    *二进制文件
      *绝对地址
      *相对地址
    *文本文件
      *手动ID
      *自动ID



若是 二进制文件 且 允许类似PDF文件的附加更新
  ，则一个对象的修改 必须 更新 所有引用该对象的对象(二进制文件 按 绝对/相对 地址 引用对象；文本文件 按 ID)

对象ID
  手动/自动ID 必须是 两个不同的集合
  命名空间

  *手动-不以数字开头
  *自动-自然数
    依对象实际出现位置的顺序紧致递增
    各个命名空间 的 最小可用数字ID 均记录于 文件尾部

===假如精简HTML为 纯文本展示语言
拆成两种文件，两种语言
标记资源、响应动作
资源类型 只有 文本，动作文件 不该含有 资源
  故此 可将 动作文件 中的 资源类型 由具体的String抽象为[a]，以避免 动作函数 无中生有 创造资源













=========:数据类型:
##### 无印/位序/时序/素序 * 集合/映射/多射/复多射 * 相等(==) / 偏序(~<~) / 全序(<)
集合
  (Set a)
  {a}
  elem, iter, put
位序集合==集合&&数组
  (Set a && [a])
  {/[]a}
  elem, iter, put=append, index, at, insert_at
    index :: a -> {[]a} -> Maybe Integer
    at :: Integer -> {[]a} -> Maybe a
  at O(1)
  数组下标 与 集合元素 形成 双射(一一对应)
  插入 已存在元素 时，报错
时序集合
  与 位序集合 类似
    无 insert_at
    存入 已存在元素 时，移至最后，原先的双射失效
素序集合==集合&&元素全序
  (Ord a => Set a)
  {/<>a}
  与 位序集合 类似
    无 append, insert_at
    写动作 的 后置条件 与 位序集合 不同，原先的双射失效
映射
多射
  (含 双射)
复多射
  (类似数据库:多主键，允许复合键作主键)


#### 『,』分隔同类型数据，『:』不同类型
#### 『[]』有序容器，『{}』无序
元组
  () #零元组
      #为何不是『[]』: 『[] :: * -> *』
  (,a ,b)
  #以上是类型，下面是对象
  [:]
  [:x :y]
记录
  {} #空记录
  {,get_a::a ,get_b::b}
  #以上是类型，下面是对象
  {:}
  {:get_a=x :get_b=y}
命名元组==有序记录(named_tuple)
  {/()} #空有序记录
  {/() ,get_a::a ,get_b::b}
  #以上是类型，下面是对象
  [:]
  [:get_a=x :get_b=y]
数组
  [a]
  #以上是类型，下面是对象
  [,]
  [,1]
  [,1 ,2]
  文本的数组 的 更紧致表达:
    path p"1\,/2" ~=~ [,"1" ,"2"]
    "\/" === py."\\"
    "\,/" 非unicode字符，而是 语言内建的路径分隔控制字符
      并不会更短，但可能用于输出到只接受 文本类型 的 外部环境
阵列
  (含 定长数组)
  [/[]] #空阵列
  [/[,3]a] #长度为3的 定长数组
  [/[,2,3]a] #2x3 矩阵
  #以上是类型，下面是对象
  []
  [,1 ,2 ,3]
  [,,1 ,2 ,3 ,,4 ,5 ,6]
    ==[
        ,:
          ,1 ,2 ,3
        ,:
          ,4 ,5 ,6
      ]
  与 多维数组 类似，但要求 子阵列 尺寸相同
  当 记录/元组 的 元素 为 同尺寸阵列 时，可将之(阵列的记录/元组)反转为 记录/元组的阵列(类似 数据库，每行为一记录，每列为一数组)。
  记录/元组的阵列 的 更紧致表达:
    [/[,3] (,Integer ,Char)]
    [,:1 :'x' ,:2 :'y' ,:3 :'z']
并串联数据类型(Haskell.datatype)
  可扩展？并联分支多的才是父类
有向图数据类型
  （含 有向无环图数据类型）
  例:module.import, expr.var
  难点:简化
    匿名节点 默认行为
      stmt 下承上
      call 临时变量
  难点:名称控制
    存在:
      定义
        先引用后定义:where
        融合定义:(a,b) if b else (x,y)
          存在 突破到 外层
      废止(是否允许重定义？使用后即刻废止？)
    可见性: 开 关(是否允许重开)


##### 可扩展 ~ ducktype / 类继承
##### 可扩展xx 可视为 抽象类，仅用作 形式类型
可扩展元组
  (,?)
  (,a ,b ,?) #(,a ,(,b ,(,?)))
    # (,a ,b ,?) 可视为 (,a ,b) / (,a ,b ,c) / (,a ,b ,c ,?) 的 父类
可扩展记录
  {,?}
  {,get_a::a ,get_b::b ,?}
    #同理 父类
可扩展命名元组
  {/() ,?}
  {/() ,get_a::a ,get_b::b ,?}
    #同理 父类
可扩展阵列
  [/[,5+]a]
  [/[,4+,5+]a]
    #同理 父类


类类型==支持 多继承 的 命名元组

基本数据类型
  #天
  Natural #加法、乘法
  #地
  Bool/BoolTF |<| Enum /-\ IntegerMod 2
  #人
  Integer #减法
  Rational/Fraction #减法、除法
  IntegerMod :: Natural -> *
  Symbol #动态
  Enum   #静态 # (Enum |<| 并串联数据类型)
    BoolTF
    BoolTU
    BoolUF
    BoolTUF
    BoolTUFY
    #true/false/unkown@return, yet@interrupt/
    CmpEN
    CmpELG
    CmpELGX
    #EQ,NE,LT,GT,XC(non-comparable)
  Char
  String
    Path
    ...日期时间 身份证号码 条形码...
  Byte
  Bytes




