
对编译的支持问题

编译问题
  自身编译问题
    编程语言自身 对 简化编译/提高编译速度 的支持
    ====
    编译框架-前向兼容
    抽象语法-自定义语法糖
  通用编译问题
    编程语言对 编译外部语言 的支持
    ===
    语法通用表达
      例:
        Haskell.parsec
          识别器
          语法 隐含于 代码中
          难以自动搜集
        Python.?
          语法 通常被 拆散分布于 类/函数 的__doc__
          组合起来就是整个语法
      既集中又分散:
        集中:直接复制外部语法
        分散:各片段散落于相应的处理函数中，既是注释，又受到集中语法的监督

    静态语法 转化为约束与代码框架
      要求:
        用户提供:
          +通用语法:抽象语法结构
            +非默认处理函数的签名
          +通用语法:具体语法结构(语法糖)
            +糖片段向抽象片段转换
        语言本身支持:
          接口与实现分离/头源分离
          私有接口与公开接口分离
          接口继承
            只有 公开接口 是 动多态
          实现继承
            在 具体子类的成员函数 中调用 公开接口 必须 指明是 最外层派生类/本类/默认父类/指定父类
            final 相当于 假设 最外层派生类 必是 本类# 依旧可被 继承
      集中:
        #全部是自动生成
        头文件:接口/纯抽象类
          仅含 公开的片段处理函数签名
      分散:
        源文件/实现文件:
          默认片段处理函数
            #自动生成
          非默认片段处理函数
            #签名/注释 自动生成
            #函数体 手动填充
          私有成员函数
            #手动生成
      语法更新迭代/更正:
        集中: 接口继承
        分散: 实现继承
    动态语法 内部约束检查+简单非默认处理函数
      要求(比静态语法多出的部分):
        用户提供:
            +非默认处理函数的简单实现
            +中间值约束检查

    ===
    静态语法
    动态语法
    语法通用表达
    静态语法 转化为约束与代码框架
    动态语法 内部约束检查+简单非默认处理函数



