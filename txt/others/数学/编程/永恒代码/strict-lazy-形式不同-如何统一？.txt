strict-lazy-形式不同-如何统一？.txt

Lisp strict
  (append a b)
  c = reverse a
  (reverse_append c b)
  (reverse_append (cdr c) (cons (car c) b))
    #tail-recur
Haskell lazy
  a++b
  h:ts++b=h:(ts++b)
    #not tail-recur
    #but lazy evalue to weak-head, donot really deep into call stack

not uniform in formal!
  how can we merge them?????

list fold repr
  (a->r->r) -> r->r
  概念完美，但永远是O(n)
  \f r0 -> (f  ls[0] (f ls[1] (...(f ls[n-1] r0)...)))
  考虑下如何实现reverse
    ===
    O(reverse<n>) = O(reverse<n-1> + append1<n-1>)
      = O(sum~ append1<i> {i<-[0..n-1])
      = O(n^2)
    ===
    append1 ls x = ls++[x]
    O(append1<n>) = O(append1<n-1> + 1) = O(n)
list pair repr
  &recur=(a -> recur -> r) -> (()->r) -> r
  拆包式，函数签名的表达有毛病，出现循环
  \ht z -> (ht ls[0] (\ht z -> (ht ls[1] ....(\ht z -> (ht ls[n-1] (\ht z -> z ())))...)))



