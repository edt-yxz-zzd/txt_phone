

=== 恒等于 满足所有变量求系数
== 等于 固定系数求变量



永恒代码 无限时空 无限人口密度 无限生产速度

关系
	*父子关系
		*按有序与否分类
			*无序
				*互斥完整
					如：
						*某一特定完整分类
						*不相关并行代码，等待全部
				*并列独立完整
					如：
						*同一目标各自完整并行代码，等待第一取消其余
				*并列互补完整
					如：
						*同一目标互补完整并行代码，等待第一取消其余
							#至少存在某种输入，使得某一分支不完整(不停止)
				*并列不完全枚举
					如：
						*按不同方法进行分类
			*有序
				*顺序结合
					如：
						*串行代码
				*逐渐泛化(向后兼容，下项包含上项)(不完整)
					如：
						*符合人类认知方法，由表及里的历史进程
				*特化优先(逐步排除，下项未必包含上项)(完整)
					如：
						*Haskell pattern match
							动态子集确认
							在C++这种拥有复杂数据结构的语言中尤为明显
								dynamic_cast
								union确认实际保存的数据
							其过程是一种隐含的用户自定义的某种数据约束
								先从静态类型入手，读取静态已知的有效数据成员
								LOOP：
									通过数据约束，得到更详细的动态类型或子集
									进一步揭示更多有效数据成员
							将数据约束及模式匹配次序(有向图拓扑序)附加到静态类型之后，作为更详细的类型描述
								可实现类似Haskell pattern match
									依照匹配次序逐步匹配，出错则跳过
									自动检查匹配的完整性
								静态描述可随着数据的修改而不断更新
									函数接口：{要求的输入约束：相应的保证的输出约束(包括对输入的就地修改)}
									各个输入约束的关系：
										任意！！
											可以是正交无关
											可以是有交叉重叠
											可以是包含与被包含
								静态描述是执行语句间隙的静态断言
		*按完整与否分类
			*重要子项强调(其余情形忽略)(不完整)


个性标识:作者名
	蜂窝式分区 以确保人口数量足够少 防碰撞
		时间间隙短 空间小
	局部临时稳定时空节点 历法 地名
		协议 名称 消逝 版本


引用代码 分布式片段快照+片段散列

局部全局视野
	pkg.path = self.path++parent.{this}.path++parent.path
	toplevel_pkg.path = self.path++sys.{this}.path++sys.path
	
	from toplevel_pkg.pkg.... import ...
	from @pkg_alias.pkg.... import ...
	pkg.modules = self.modules >> parent.{this}.modules >> parent.modules


文档中定理的内外引用，注脚的标记
	前向引用、后向引用、定义内部自引用、未定向引用
	引用的范围约束：在哪个章节？是否在本章节？
	

阻止正常引用
	如：加密函数要求使用固定时耗固定能耗的实现版本。
		避免：__eq__、pow_mod by square-and-multiply
		最终只能通过“阻止正常引用”或“严格的时耗能耗证明”或“随机运算注入”
	任何正常引用均加指定前缀以标识
	而已声明“等耗加密函数”的则无须如此




obj[ops].f(...)
ops.f[obj](...)
ops[obj1,obj2].f(...)
ops.f[obj1,obj2](...)

flatten vivi "where":
	#subroutine is not func
	if ...:
		...
		::label
		...
	
	initially
		::label
	finally
	
	label:
		...
		

API override dependences
	__hash__ must be overrided if __eq__ be overrided.


