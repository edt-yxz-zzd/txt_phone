
!mv others/数学/ECC-椭圆曲线整数分解.txt others/数学/整数分解/
e others/数学/整数分解/ECC-椭圆曲线整数分解.txt
e others/数学/ECC.txt


o1o - infinity, neutral element, identity element

[[[
/sdcard/0my_files/book/math/factorint/snd/Lenstra Elliptic Curve Factorization(2016)(Thomas Browning).pdf
    good!

===



[Hasse_interval(p) =[def]= [p+1-2*floor_sqrt(p)..=p+1+2*floor_sqrt(p)]]
[group_order_(ECC(a,b;GF(p))) <- Hasse_interval(p)]
    <==>
    [@[p :: prime] -> @[a,b :<- ZZ%p] -> [group_order_(ECC(ZZ%p;a,b)) <- Hasse_interval(p)]]
    <==>
    [@[p :: prime] -> @[a,b :<- ZZ%p] -> ?[Hp :<- Hasse_interval(p)] -> [group_order_(ECC(ZZ%p;a,b)) == Hp]]
    反之亦然:
    [@[p :: prime] -> @[Hp :<- Hasse_interval(p)] -> ?[a,b <- ZZ%p] -> [group_order_(ECC(ZZ%p;a,b)) == Hp]]
        from /sdcard/0my_files/book/math/factorint/snd/Pollard_s p-1 and Lenstra_s factoring algorithms(2005)(Charest).pdf

the order of ECC(a,b;GF(p)) for various curves is known to vary randomly.  Thus, it is quite likely that eventually the chosen curve will happen to have an order which is the product of small primes.

[[
那么，若 只选 {2,3}，(2**i*3**j)型的整数的最大间隙的增长速度是多少？
[Hasse_interval(101) == [82..=122]]





py -m seed.math.iter_sorted_products_of_uints print_sorted_products_of_strict_sorted_pairwise_coprime_uints =[2,3] =100
[1
, 2
, 3
, 4
, 6
, 8
, 9
, 12
, 16
, 18
, 24
, 27
, 32
, 36
, 48
, 54
, 64
, 72
, 81
, 96
, 108
, 128
, 144
, 162
, 192
, 216
, 243
, 256
, 288
, 324
, 384
, 432
, 486
, 512
, 576
, 648
, 729
, 768
, 864
, 972
, 1024
, 1152
, 1296
, 1458
, 1536
, 1728
, 1944
, 2048
, 2187
, 2304
, 2592
, 2916
, 3072
, 3456
, 3888
, 4096
, 4374
, 4608
, 5184
, 5832
, 6144
, 6561
, 6912
, 7776
, 8192
, 8748
, 9216
, 10368
, 11664
, 12288
, 13122
, 13824
, 15552
, 16384
, 17496
, 18432
, 19683
, 20736
, 23328
, 24576
, 26244
, 27648
, 31104
, 32768
, 34992
, 36864
, 39366
, 41472
, 46656
, 49152
, 52488
, 55296
, 59049
, 62208
, 65536
, 69984
, 73728
, 78732
, 82944
, 93312
]






py -m seed.math.iter_sorted_products_of_uints print_max_gaps_between_sorted_products_of_strict_sorted_pairwise_coprime_uints =[2,3] =100
[(0, 1, 1, 2)
, (3, 2, 4, 6)
, (6, 3, 9, 12)
, (7, 4, 12, 16)
, (9, 6, 18, 24)
, (13, 12, 36, 48)
, (18, 15, 81, 96)
, (20, 20, 108, 128)
, (23, 30, 162, 192)
, (27, 32, 256, 288)
, (28, 36, 288, 324)
, (29, 60, 324, 384)
, (33, 64, 512, 576)
, (34, 72, 576, 648)
, (35, 81, 648, 729)
, (37, 96, 768, 864)
, (38, 108, 864, 972)
, (40, 128, 1024, 1152)
, (41, 144, 1152, 1296)
, (42, 162, 1296, 1458)
, (44, 192, 1536, 1728)
, (45, 216, 1728, 1944)
, (49, 288, 2304, 2592)
, (50, 324, 2592, 2916)
, (52, 384, 3072, 3456)
, (53, 432, 3456, 3888)
, (57, 576, 4608, 5184)
, (58, 648, 5184, 5832)
, (62, 864, 6912, 7776)
, (66, 1152, 9216, 10368)
, (67, 1296, 10368, 11664)
, (71, 1728, 13824, 15552)
, (77, 2592, 20736, 23328)
, (81, 3456, 27648, 31104)
, (87, 5184, 41472, 46656)
, (98, 10368, 82944, 93312)
, (109, 11259, 165888, 177147)
, (112, 13344, 196608, 209952)
, (114, 15012, 221184, 236196)
, (117, 17792, 262144, 279936)
, (119, 20016, 294912, 314928)
, (121, 22518, 331776, 354294)
, (124, 26688, 393216, 419904)
, (126, 30024, 442368, 472392)
, (132, 40032, 589824, 629856)
, (134, 45036, 663552, 708588)
, (137, 53376, 786432, 839808)
, (139, 60048, 884736, 944784)
, (145, 80064, 1179648, 1259712)
, (147, 90072, 1327104, 1417176)
, (153, 120096, 1769472, 1889568)
, (159, 160128, 2359296, 2519424)
, (161, 180144, 2654208, 2834352)
, (167, 240192, 3538944, 3779136)
, (174, 255879, 4782969, 5038848)
, (175, 269568, 5038848, 5308416)
, (176, 360288, 5308416, 5668704)
, (182, 480384, 7077888, 7558272)
, (189, 511758, 9565938, 10077696)
, (190, 539136, 10077696, 10616832)
, (191, 720576, 10616832, 11337408)
, (198, 767637, 14348907, 15116544)
, (199, 808704, 15116544, 15925248)
, (200, 851968, 15925248, 16777216)
, (202, 909792, 17006112, 17915904)
, (203, 958464, 17915904, 18874368)
, (205, 1023516, 19131876, 20155392)
, (206, 1078272, 20155392, 21233664)
, (207, 1441152, 21233664, 22674816)
, (214, 1535274, 28697814, 30233088)
, (215, 1617408, 30233088, 31850496)
, (216, 1703936, 31850496, 33554432)
, (218, 1819584, 34012224, 35831808)
, (219, 1916928, 35831808, 37748736)
, (221, 2047032, 38263752, 40310784)
, (222, 2156544, 40310784, 42467328)
, (224, 2302911, 43046721, 45349632)
, (225, 2426112, 45349632, 47775744)
, (226, 2555904, 47775744, 50331648)
, (228, 2729376, 51018336, 53747712)
, (229, 2875392, 53747712, 56623104)
, (231, 3070548, 57395628, 60466176)
, (232, 3234816, 60466176, 63700992)
, (233, 3407872, 63700992, 67108864)
, (235, 3639168, 68024448, 71663616)
, (236, 3833856, 71663616, 75497472)
, (238, 4094064, 76527504, 80621568)
, (239, 4313088, 80621568, 84934656)
, (241, 4605822, 86093442, 90699264)
, (242, 4852224, 90699264, 95551488)
, (243, 5111808, 95551488, 100663296)
, (245, 5458752, 102036672, 107495424)
, (246, 5750784, 107495424, 113246208)
, (248, 6141096, 114791256, 120932352)
, (249, 6469632, 120932352, 127401984)
, (253, 7278336, 136048896, 143327232)
, (254, 7667712, 143327232, 150994944)
, (256, 8188128, 153055008, 161243136)
, (257, 8626176, 161243136, 169869312)
, (259, 9211644, 172186884, 181398528)
]
==>>
, (49, 288, 2304, 2592)

py_adhoc_call   seed.math.prime_gens   @next_may_prime__le_pow2_81__ge_  ='(2304+2592)//2 -5'
2447

>>> 49**2 < 2447 < 50**2
True
>>> 2447+1+2*49
2546
>>> 2447+1-2*49
2350

[floor_sqrt(2447) == 49]
[Hasse_interval(2447) == [2447+1-2*49..=2447+1+2*49] == [2350..=2546]]
只选{2,3}在[p==2447]不行

]]

===

Group factorization algorithms


[[
[Pollard’s p−1 algorithm <- Group factorization algorithms]
    Pollard’s p−1 algorithm falls under into a larger class of group factorization algorithms with the group used in Pollard’s p−1 algorithm is (Z/pZ)^×. # (Z%p)^*

[[
Pollard’s p−1 algorithm

def Pollard_p_minus1_algorithm(n, bs, gen_es_, /):
    for b0 in bs:
        b = b0%n
        if 1:
            g = gcd(b, n)
            if not g == 1:
                if g == n:
                  continue
                return g
        es = gen_es_()
        # 不要 pow(b0, II(es), n)
        #   并不更快，而且无法提前结束，还可能漏掉因子
        for e in es:
            b = pow(b, e, n)
            g = gcd(b-1, n)
            if not g == 1:
                if g == n:
                    break
                return g
    return None

]]

[II(es)%(p-1) == 0][p is prime]:
    !! [b0**(p-1)%p == 1]
    [b0**II(es)%p == 1]
    [(b0**II(es) -1) %p == 0]
    [n%p == 0]:
        [gcd(b0**II(es) -1, n) %p == 0]
        [gcd(pow(b0, II(es), n) -1, n) %p == 0]
        [w := pow(b0, II(es), n)]
        [gcd(w -1, n) %p == 0]
        [g := gcd(w -1, n)]
        [g %p == 0]
        [w =!= 1][1 == gcd(b0, n)][n >= 2]:
            !! [p is prime]
            [p >= 2]
            !! [n >= 2][n%p == 0]
            [2 <= p <= n]
            !! [1 == gcd(b0, n)][n >= 2]
            [w =!= 0]
            !! [1 =!= w]
            !! [0 <= pow(?, ?, n) < n]
            [2 <= w < n]
            [1 <= w -1 <= n-2]
            !! [(b0**II(es) -1) %p == 0]
            [w %p == 0]
            [2 <= p <= w -1 <= n-2]
            !! [(b0**II(es) -1) %p == 0]
            !! [n%p == 0]
            [2 <= p <= gcd(w -1, n) <= n-2]
            [2 <= p <= g <= n-2]
            [g is nontrivial factor of n]

[II(es)%(p-1) == 0][p is prime]:
    [n%p == 0]:
        [w := pow(b0, II(es), n)]
        [g := gcd(w -1, n)]
        [w =!= 1][1 == gcd(b0, n)][n >= 2]:
            [2 <= p <= g <= n-2]
            [g is nontrivial factor of n]
[[n >= 2] -> [es :: [uint]] -> [?[p :: prime] -> [[n%p == 0][II(es)%(p-1) == 0]]] -> [b0 :<- [2..=n-2]] -> [1 == gcd(b0, n)] -> [w := pow(b0, II(es), n)] -> [w =!= 1] -> [g := gcd(w -1, n)] -> [[2 <= p <= g <= n-2][g is nontrivial factor of n]]]
    ==>> Pollard_p_minus1_algorithm
]]

Group factorization algorithms
take some element [b0 <- somegroup<p> (without knowing p)], and an integer k=II(es) divisible by many small prime powers.
    If group_order_(somegroup<p>) is a product of small primes, then group_order_(somegroup<p>) will divide k.
    If we write [k = group_order_(somegroup<p>)*q], by Corollary 1, [b0**k= b0**(group_order_(somegroup<p>)*q) = (b0**(group_order_(somegroup<p>)))**q = I**q = I].
    Then (somegroup<p>) should have the property that [b0**k == I] allows you to find an integer m such that [m%p==0] (still without knowing p).
    Since we also have that [N%p==0], by the property of the gcd, [gcd(m,N)%p==0].  Then you hope that gcd(m,N) is a nontrivial factor of N.
There are two main issues with this style of algorithm.
    Firstly, the group (somegroup<p>) that you choose needs to be very special in that you can apply the group operation efficiently without knowing p.
    Additionally, (somegroup<p>) must have that property that knowing that [b0**k == I] allows you to compute an integer m such that [m%p==0].
    Finally, the algorithm will fail if group_order_(somegroup<p>) (which is dependant on p) has a large prime factor.
        If group_order_(somegroup<p>) has a large prime factor for all prime factors p of N then the entire algorithm will fail.







仿射空间
齐次多项式
等价类
给定一个多项式，添加一个新变量，可以将它变成 齐次多项式
    f(x,y) = -y**2 +x**3 +a*x +b
    f(x,y,z) = -y**2*z +x**3 +a*x*z**2 +b*z**3
等价关系:
    [c=!=0]: f(c*x,c*y,c*z) == c**3*f(x,y,z)
        ==>> f(x,y,z)==0 是一个等价关系
        ==>> 分成两类f(x,y,1)==0， f(x,y,0)==0
        应该是分成三类:
          (x,y,1)
              (x,y,1)
          (0,y,0)
              (0,1,0)
              (0,0,0)
                  explicitly forbid (0,0,0) from below:
                      /sdcard/0my_files/book/math/factorint/snd/Factoring integers with elliptic curves(1987)(LENSTRA).pdf
    f(x,y,1) == f(x,y)
        ==>> f(x,y,1)==0 与 f(x,y)==0 等价，是 一致扩展


ECC(K;a,b) = {(x,y,z) <- PP<K>**2 | [f(a,b;x,y,z) == -y**2*z +x**3 +a*x*z**2 +b*z**3 == 0]}
  PP<K>**2 仿射平面，比 K**2多了个o1o
    使用 三值坐标K**3 + 等价关系
    三值坐标囗作用:goto

Given points P,Q <- ECC(K;a,b), consider the unique line L1through P and Q.
    If [P == Q] then we let L1 be the unique tangent line which is only well defined when [4*a**3+ 27*b**2 =!= 0] (it ensures that no equivalent of cusps or self-intersections exist).
        Thus, in what follows we shall assume that .
    Then let R be the third intersection point of L1 and let L2 be the unique line through R and o1o.  Finally, let P + Q be the unique intersection point of L2 and ECC(K;a,b).
    # 原文 定义的是 加法
    #   我觉得还是 乘法比较自然
    [1/P =[def]= (xP, -yP) if [P =!= o1o] else o1o]

    [P*Q %p =[def]= ???]
        [P == o1o][Q == o1o]:
            [Q == 1/P]
            [P*Q == o1o]
        [P == Q][yQ == 0]:
            [Q == 1/P]
            [P*Q == o1o]
        <<==:
        [P == o1o]:
            [P*Q == Q]
        [Q == o1o]:
            [P*Q == P]
        [Q == 1/P]:
            [P*Q == o1o]

        [P =!= o1o][Q =!= o1o][Q =!= 1/P]:
            [L1 be [y-yP == λ*(x-xP)]]
            [λ == (yQ −yP)/(xQ −xP) if P =!= Q else (3*xP**2 +a)/(yP+yQ)]
            [λ == (yQ −yP)/(xQ −xP) if P =!= Q else (3*xP**2 +a)/(2*yP)]
                ??? what if [(2*yP) == 0] ???
                    [characteristic<K> =!= 2]
                        # from below:[characteristic<K> =!= 3]
                    [yP =!= 0]
                [yP == 0]:
                    [xP**3 +a*xP +b == 0]
                    !! [P == Q]
                    !! [yP == 0]
                    [Q == 1/P]
                    _L
            [R == (xR,yR) == (λ**2 −xP −xQ, λ*(xR −xP) + yP)]
            [P*Q == 1/R == (xR, -yR)]
            [P*Q == (λ**2 −xP −xQ, λ*(2*xP +xQ −λ**2) −yP, 1)]

[n :: composie][n >= 2][K == ZZ%n][K is not field]:
    perform a type of ”pseudo-addition”
    [P*Q %n == ???]
    [gX := gcd(xP -xQ, n)]
    [gY := gcd(yP +yQ, n)]
    [gX == n]:
        [xP == xQ]
    [gY == n]:
        [yP == -yQ]

    * [[1 < gX < n]or[1 < gY < n]]:
        [found nontrivial divisor of n]
    * [[gX == n][gY == n]]:
        [[xP == xQ][yP == -yQ]]
        [Q == 1/P]
        [P*Q == o1o]
    * [[gX == 1][gY <- {1,n}]]:
        [exists: inv_mod_(n; xQ -xP)]
        [λ == (yQ −yP)/(xQ −xP)]
            #same
    * [[gX == n][gY == 1]]:
        [λ == (3*xP**2 +a)/(yP+yQ)]
            #!!!diff!!!
            # <<== [n==p*q][%p,%q must agree...][P*Q %n --> P*Q %p, P*Q %q]
    [P*Q == (λ**2 −xP −xQ, λ*(2*xP +xQ −λ**2) −yP, 1)]
            #same

  分解因子:通过计算 [P**k %n]
      [P =!= o1o][k > 0]:
          [n is prime]
          [n%p == 0][k %group_order_(ECC(ZZ%p;a,b)) == 0]:
              [P**k %p == o1o]
              [[P**k %n == o1o]or[breakdown P**k:[found nontrivial divisor of n]]]

          [not$ [[P**k %n == o1o]or[breakdown P**k:[found nontrivial divisor of n]]]]:
              <==> [@[p :: prime] -> [n%p == 0] -> [P**k %p =!= o1o]]

          [P**k %n == o1o]
              <==> [@[p :: prime] -> [n%p == 0] -> [P**k %p == o1o]]
              <<== [@[p :: prime] -> [n%p == 0] -> [k %group_order_(ECC(ZZ%p;a,b)) == 0]]

          [breakdown P**k:[found nontrivial divisor of n]]
              <==> [[?[p :: prime] -> [n%p == 0] -> [P**k %p == o1o]][?[q :: prime] -> [n%q == 0] -> [P**k %q =!= o1o]]]
                也就是说，即使 [k %group_order_(ECC(ZZ%p;a,b)) == 0] 不成立，也可能[found nontrivial divisor of n]，只要P足够特殊 [?R -> [P == R**u]][u*k %group_order_(ECC(ZZ%p;a,b)) == 0]，[Hp := group_order_(ECC(ZZ%p;a,b))][u := Hp///gcd(Hp,k)], 此类型P只有(1/u)概率，由于[k==lcm([1..=B])]，u可能是 多个大素数pb>B 与 多个小素数pl<B(次数超过floor_log_(pl;B)) 之积，1/u相当小

]]]




[[[
TODO:
    [P*Q %n == ???]
      使用 三值坐标，看看是否可以 省略 除法/求倒数
    三值坐标囗作用:goto

===
使用 三值坐标
[P := (xP, yP, zP)]
[Q := (xQ, yQ, zQ)]
[p :: prime][p >= 5]:
    [1/P =[def]= (xP, -yP, zP) if [P =!= o1o] else o1o]
    how to detect [P == o1o]?
      [[P == o1o] <-> [zP == 0]]
    how to detect [Q == P]?
    how to detect [Q == 1/P]?
        !! [P := (xP, yP, zP)]
        !! [Q := (xQ, yQ, zQ)]
        [[Q==P] <-> [?[k :<- [1..<p]] -> [[xP*k=[%p]=xQ][yP*k=[%p]=yQ][zP*k=[%p]=zQ]]]]
        [[Q==1/P] <-> [?[k :<- [1..<p]] -> [[xP*k=[%p]=xQ][yP*k=[%p]=-yQ][zP*k=[%p]=zQ]]]]
        * [zP==0==zQ]:
          [Q == o1o == P]
          [Q == P]
          [Q == 1/P]
        * [zP==0=!=zQ]:
          [Q =!= P]
          [Q =!= 1/P]
        * [zP=!=0==zQ]:
          [Q =!= P]
          [Q =!= 1/P]
        * [zP=!=0=!=zQ]:
          [[Q==P] <-> [[xP*zQ=[%p]=xQ*zP][yP*zQ=[%p]=yQ*zP]]]
          [[Q==1/P] <-> [[xP*zQ=[%p]=xQ*zP][yP*zQ=[%p]=-yQ*zP]]]


    [P*Q %p =[def]= ???]
        [P == o1o][Q == o1o]:
            [Q == 1/P]
            [P*Q == o1o]
        [P == Q][yQ == 0]:
            [Q == 1/P]
            [P*Q == o1o]
        <<==:
        [P == o1o]:
            [P*Q == Q]
        [Q == o1o]:
            [P*Q == P]
        [Q == 1/P]:
            [P*Q == o1o]

        [P =!= o1o][Q =!= o1o][Q =!= 1/P]:
            [L1 be [y-yP/zP == λ*(x-xP/zP)]]
            [λ == (yQ −yP)/(xQ −xP) if P =!= Q else (3*xP**2/zP**2 +a)/(yP/zP+yQ/zQ)]
            [λ == (yQ −yP)/(xQ −xP) if P =!= Q else (3*xP**2 +a*zP**2)*zQ/(yP*zQ+yQ*zP)*zP]

            [λ == (yQ −yP)/(xQ −xP) if P =!= Q else (3*xP**2 +a*zP**2)/(2*yP*zP)]
            [λ == (yQ −yP)/(xQ −xP) if P =!= Q else (3*xP**2/zP**2 +a)/(2*yP/zP)]

            [N/D := λ]
            * [P==Q]:
                [N == (3*xP**2 +a*zP**2)]
                [D == (2*yP*zP)]
            * [P=!=Q]:
                [N == (yQ −yP)]
                [D == (xQ −xP)]
            [P*Q == (λ**2 −xP/zP −xQ/zQ, λ*(2*xP/zP +xQ/zQ −λ**2) −yP/zP, 1)]
            [P*Q == (D*N**2 −(xP/zP+xQ/zQ)*D**3, (2*xP/zP +xQ/zQ)*N*D**2 −N**3 −yP/zP*D**3, D**3)]
            [P*Q == (zP*zQ*D*N**2 −(xP*zQ+zP*xQ)*D**3, (2*xP*zQ +zP*xQ)*N*D**2 −zP*zQ*N**3 −yP*zQ*D**3, zP*zQ*D**3)]
              D3 = D**3
              N3 = N**3
              ND2 = N*D**2
              DN2 = D*N**2
              zPQ = zP*zQ
              xPzQ
              zPxQ
              yPzQ
            [P*Q == (zPQ*DN2 −(xPzQ+zPxQ)*D3, (2*xPzQ +zPxQ)*ND2 −zPQ*N3 −yPzQ*D3, zPQ*D3)]
                #why no zPyQ but has yPzQ??
                #   xPzQ bigger zPxQ
                #   xPzQ*ND2-yPzQ*D3
                #   xPzQ*N-yPzQ*D
                # * [P=!=Q]:
                #   xPzQ*(yQ −yP)-yPzQ*(xQ −xP)
                #   (xPyQzQ −xPyPzQ-yPxQzQ +xPyPzQ)
                #   (xPyQzQ -yPxQzQ)
                #   (xPyQ -yPxQ)*zQ
                #   OK!
                # * [P==Q]:
                #   xPzQ*(3*xP**2 +a*zP**2)-yPzQ*(2*yP*zP)
                #   zQ*(3*xPxPxP -2*yPyPzP +a*xPzPzP)
                #   zQ*zPzPzP*(3*xPxPxP/zPzPzP -2*yPyP/zPzP +a*xP/zP)
                #   above*D2
                #   above*D2 /D3 # sonce new z == zPQ*D3
                #   above/D
                #   [D == (2*yP*zP)]
                #   1/(2*yP*zP) *zQ*zPzPzP*(3*xPxPxP/zPzPzP -2*yPyP/zPzP +a*xP/zP)
                #   zPzQ/(2*yP/zP) *(3*xPxPxP/zPzPzP -2*yPyP/zPzP +a*xP/zP)
                #   OK!



[n :: composie][n >= 2][K == ZZ%n][K is not field]:
    perform a type of ”pseudo-addition”
    [P*Q %n == ???]
    [gX := gcd(xP/zP -xQ/zQ, n)]
    [gY := gcd(yP/zP +yQ/zQ, n)]
    ==>>
    [gX := gcd(xP*zQ -xQ*zP, n)]
    [gY := gcd(yP*zQ +yQ*zP, n)]
    [gX == n]:
        [xP*zQ == xQ*zP]
    [gY == n]:
        [yP*zQ == -yQ*zP]

    * [[1 < gX < n]or[1 < gY < n]]:
        [found nontrivial divisor of n]
    * [[gX == n][gY == n]]:
        [[xP/zP == xQ/zQ][yP/zP == -yQ/zQ]]
        [Q == 1/P]
        [P*Q == o1o]
    * [[gX == 1][gY <- {1,n}]]:
        [exists: inv_mod_(n; xQ/zQ -xP/zP)]
        [λ == (yQ/zQ −yP/zP)/(xQ/zQ −xP/zP)]
            #same
    * [[gX == n][gY == 1]]:
        [λ == (3*xP**2/zP**2 +a)/(yP/zP+yQ/zQ)]
            #!!!diff!!!
            # <<== [n==p*q][%p,%q must agree...][P*Q %n --> P*Q %p, P*Q %q]
    [P*Q == (λ**2 −xP −xQ, λ*(2*xP +xQ −λ**2) −yP, 1)]
            #same

  分解因子:通过计算 [P**k %n]
      [P =!= o1o][k > 0]:
          [n is prime]
          [n%p == 0][k %group_order_(ECC(ZZ%p;a,b)) == 0]:
              [P**k %p == o1o]
              [[P**k %n == o1o]or[breakdown P**k:[found nontrivial divisor of n]]]

          [not$ [[P**k %n == o1o]or[breakdown P**k:[found nontrivial divisor of n]]]]:
              <==> [@[p :: prime] -> [n%p == 0] -> [P**k %p =!= o1o]]

          [P**k %n == o1o]
              <==> [@[p :: prime] -> [n%p == 0] -> [P**k %p == o1o]]
              <<== [@[p :: prime] -> [n%p == 0] -> [k %group_order_(ECC(ZZ%p;a,b)) == 0]]

          [breakdown P**k:[found nontrivial divisor of n]]
              <==> [[?[p :: prime] -> [n%p == 0] -> [P**k %p == o1o]][?[q :: prime] -> [n%q == 0] -> [P**k %q =!= o1o]]]
                也就是说，即使 [k %group_order_(ECC(ZZ%p;a,b)) == 0] 不成立，也可能[found nontrivial divisor of n]，只要P足够特殊 [?R -> [P == R**u]][u*k %group_order_(ECC(ZZ%p;a,b)) == 0]，[Hp := group_order_(ECC(ZZ%p;a,b))][u := Hp///gcd(Hp,k)], 此类型P只有(1/u)概率，由于[k==lcm([1..=B])]，u可能是 多个大素数pb>B 与 多个小素数pl<B(次数超过floor_log_(pl;B)) 之积，1/u相当小


]]]






[[[
e others/数学/整数分解/ECC-椭圆曲线整数分解.txt
e ../../python3_src/seed/math/iter_sorted_products_of_uints.py
===
  approximate_num_pints_lt__generated_by_(prime_bases; N)
    近似估计 由prime_bases生成的小于N的正整数数量
    等价于 数格子:
      平面: [sum log2(p)*x {(p,x) :<- zip(prime_bases,vars)} == log2(N)]与 所有 坐标平面 所围锥体。
      [@[x :<- vars] -> [x >= 0]][sum log2(p)*x {(p,x) :<- zip(prime_bases,vars)} <= log2(N)]

    volumn(lens) = II sz {sz :<- lens} / factorial(len(lens))
    volumn(prime_bases; N) = II (log2(N)/log2(p)) {p :<- prime_bases} / factorial(L)
      会减少，显然不行
    [L := len(prime_bases)]
    [approximate_num_pints_lt__generated_by_(prime_bases; N) =[def]= sum (sum volumn({prime_bases[j] | [j :<- js]}; N) {js :<- iter_combinations_(k; L)}) /factorial(k) {k :<- [0..=L]}]
    [approximate_num_pints_lt__generated_by_(prime_bases; N) == sum (sum II (log2(N)/log2(prime_bases[j])) {j :<- js} {js :<- iter_combinations_(k; L)}) /factorial(k) {k :<- [0..=L]}]
    表达为 L+1 的 数组，可用于 递推 计算
    [array4approximate_num_pints_lt__generated_by_(prime_bases; N) =[def]= [((sum II (log2(N)/log2(prime_bases[j])) {j :<- js} {js :<- iter_combinations_(k; L)}) /factorial(k)) | [k :<- [0..=L]]]]
    [array4approximate_num_pints_lt__generated_by_(prime_bases++[pL]; N) == let [ls := array4approximate_num_pints_lt__generated_by_(prime_bases; N)] in ([0+ls[0]]++[(ls[k-1]*(log2(N)/log2(pL))/k + ls[k]) | [k :<- [1..=L]]]++[(ls[(L+1)-1]*(log2(N)/log2(pL))/(L+1) + 0)])]
===


#>>> iter_unsorted_products_of_strict_sorted_pairwise_coprime_uints_lt_(2**80, [2,3,5,7,11,13,17,19])
>>> f = lambda gs, N, /: (ls := [*iter_unsorted_products_of_strict_sorted_pairwise_coprime_uints_lt_(N, gs)], *map(ls.index, gs), len(ls))[1:]
>>> ls = [*iter_unsorted_products_of_strict_sorted_pairwise_coprime_uints_lt_(2**20, [2,3,5,7])]
>>> len(ls)
1285
>>> ls.index(7)
510
>>> ls.index(5)
142
>>> ls.index(3)
20
>>> ls.index(2)
1
>>> ls.index(1)
0

>>> _print_ex_arrays4approximate_num_pints_lt__generated_by_([2,3,5,7], 2**20)
0:1.0:(1.0,)%
1:21.0:(1.0, 20.0)%
2:159.80454578572065:(1.0, 32.61859507142915, 126.1859507142915)%
3:671.2009256983829:(1.0, 41.23212623289701, 266.66659325982, 362.30220620566587)%
4:2103.7271624623927:(1.0, 48.35626997505745, 413.53839029885137, 995.5592534107295, 645.2732487777542)%
>>> f([2,3,5,7], 2**20)
(1, 20, 142, 510, 1285)
>>> _print_ex_arrays4approximate_num_pints_lt__generated_by_([2,3,5,7], 2**80)
0:1.0:(1.0,)%
1:81.0:(1.0, 80.0)%
2:2150.4495917143804:(1.0, 130.4743802857166, 2018.975211428664)%
3:27619.935194251324:(1.0, 164.92850493158804, 4266.66549215712, 23187.341197162616)%
4:235716.78323007363:(1.0, 193.4250799002298, 6616.614244781622, 63715.79221828669, 165189.9516871051)%
>>> f([2,3,5,7], 2**80)
(1, 80, 2084, 25378, 199186)


]]]



[[[
/sdcard/0my_files/book/math/factorint/snd/Pollard_s p-1 and Lenstra_s factoring algorithms(2005)(Charest).pdf
  good!
===
[p :: prime][p=!=2][p=!=3][p >= 5][K := GF(p**1)][a,b :<- K][discriminant(a,b) := −16*(4*a**3+27*b**2)][discriminant(a,b) =!= 0]:
    #[p >= 5] <<== [p=!=2][p=!=3]
    #[x,y :<- K][elliptic_curve_equation(a,b;x,y) := [y**2==x**3+a*x+b]][non_singularity := [discriminant(a,b) =!= 0]][non_singularity]
    [ECC(p;a,b) := {(x,y) | [[x,y :<- K][y**2==x**3+a*x+b]]}\-/{o1o}]
    [P,Q,R :<- ECC(p;a,b)]:
        [is_vertical_line_inteserction_points_with_elliptic_curve__except_oo_(p;a,b; P,Q) := if P==o1o or Q==o1o then (P==o1o==Q) else fst P == fst Q and snd P == -snd Q]
            # (P,Q,o1o)
        [is_tangent_line_inteserction_points_with_elliptic_curve_(p;a,b; P,R) := if P==o1o then R==o1o elif R==o1o then snd P == 0 else ...???]
            # (P,P,R)
        [is_line_inteserction_points_with_elliptic_curve_(p;a,b; P,Q,R) :=
          if P==o1o then is_vertical_line_inteserction_points_with_elliptic_curve__except_oo_(p;a,b; R,Q) else
          if Q==o1o then ... else
          if R==o1o then ... else
          if P==Q then is_tangent_line_inteserction_points_with_elliptic_curve_(p;a,b; P,R) else
          if P==R then ... else
          if R==Q then ... else
          let [(xP,yP) := P]
              [(xQ,yQ) := Q]
              [(xR,yR) := R]
          in  [(xP-xR)*(yQ-yR) == (xQ-xR)*(yP-yR)]

        ]
    [P,Q :<- ECC(p;a,b)]:
        [third_point_on_same_line_(p;a,b; P,Q) := R :=> is_line_inteserction_points_with_elliptic_curve_(p;a,b; P,Q,R)]
        [mul4ECC(p;a,b; P,Q) =[def]= third_point_on_same_line_(p;a,b; o1o, third_point_on_same_line_(p;a,b; P,Q))]
        [mul4ECC(p;a,b; o1o,Q) == Q]
        [mul4ECC(p;a,b; P,o1o) == P]
        [mul4ECC(p;a,b; (xP,yP),(xQ,yQ)) ==
          if (xP,yP) == (xQ,-yQ) then o1o else
          #???let [m := if P==Q then (3*xP**2+a)/(2*yP) else (yP-yQ)/(xP-xQ)]
          let [m := if P==Q then (if ??yP==0?? then o1o else (3*xP**2+a)/(2*yP)) else (yP-yQ)/(xP-xQ)]
          in  (xR:=m**2 −xP −xQ, m*(xP−xR) − yP)
        ]

[n :: uint][n%2 =!= 0][n%3 =!= 0][n>=5][K := ZZ%n][a,b :<- K][discriminant(a,b) := −16*(4*a**3+27*b**2)][discriminant(a,b) =!= 0][gcd(discriminant(a,b),n) == 1]:
    #[pseudo_elliptic_curve]
    #ensure that it is actually an elliptic curve mod p
    #to find k, s.t [k%p==0][gcd(k,n) < n] #non-trivial factor
    #The addition formulas will only break if we find a non-invertible element in ZZ%n, but then we will have factored n since non-invertible elements correspond to elements whose gcd with n is not 1.
    确定B
    [k:=lcm(1..=B)]
    先选P@(xP,yP), a
    再 [b := yP**2-xP**3-a*xP]
    测试 [gcd(discriminant(a,b),n) == 1]直至成立
    [P**k if break --> factor]
      # [n%p==0]
      # [H := group_order_(ECC(p;a,b))]
      # <<== [is_smooth_(B;H)]
    重选P,a
    重选B


[N >= 1][B >= 1]:
  [[is_smooth_(B;N)] =[def]= [@[p :: prime] -> @[k :: uint] -> [N%p**k==0] -> [p**k <= B]]]
  [[is_smooth_(B;N)] <-> [lcm([1..=B])%N == 0]]
    原因大概是，这样一来，[log2(p**floor_log_(p;B)) ~= log2(B)][对于所有p,pow(x, p**floor_log_(p;B), N) 耗时大致相同]，方便计算最优方案...
这类算法，若[n==p*q][p==2**i*3**j+1][q==2**s*3**t+1]，[p,q都是B-smooth]
    一起归一，怎么分解？
    b0**(2**u*3**v)
    不断微调u,v?
    可以u调至最大 floor_log_(2;n)
    再单步v加一至最大
    ...
    但[p==2**i*3**j+1][q==2**k*3**j+1]怎么破？
    不同b0，对于p,q的阶 不同，确实有更换的必要

[probability(N is B-smooth | N<-[p/2..p*3/2]) == let [u:=ln(p)/ln(B)] in (1/u**u)]
[num_primes_le(B) ~= B/ln(B)]

[TIME(Sieve of Eratosthenes find prime <= B) ~= O(B*log(B))]
[TIME(pow(x,e,n)) <= 2*log2(e) step]
[TIME(gcd(x,n)) <= 2*log2(n)+2 step]
  #辗转相除，一轮/两步 之后，余数 减半
Theorem 2.4.  Complexity of the elliptic curve method
[n >= 1][p :: prime][n%p==0][L(x) =[def]= e**sqrt(ln(x)*lnln(x))][B := the optimal bound for finding p with the elliptic curve method][Tp := the expected number of group operations to find p][Tn := the expected number of group operations to find one prime factor of n][B ~= L(p)**(1/sqrt2)][Tp ~= B**2][Tn := L(n)]

some other technical improvement can also make the algorithm run faster.  using projective coordinates diminishes the work needed to compute the sums of points on E(K).
  (x,y)\-/{+o1o}  -->  {(x,y,z) | [z=!=0]}\-/{(0,1,0)}
      大概是:
      不用求倒数，分母乘到z
      但这样一来，无法最早发现因子
      可能是 每几百步 检查z，可能需要回头检查 提取因子
第二阶段: the second stage
  [H := group_order_(somegroup<p>)]
      # [n%p==0]
      # e.g. [[somegroup<p> is ZZ%p] -> [H == p-1]]
      # e.g. [[somegroup<p> is ECC(p;a,b)] -> [H == ???]]
  B1,B2
  B1 运行完全的算法，但未能分解
  B2很大，无法运行完全的算法
    假设[B1 < pMAX <= B2][H%pMAX==0][is_smooth_(B1;H///pMAX)]:
      [b1 := b0**lcm([1..=B1])]
      [b1_pows := [b1**(2**i) | [i :<- [0..=?]]]]
      [p_prev := last$ primes /-\ [1..=B1]]
      [b_prev := b1**p_prev via b1_pows]
      [pMAX :<- primes /-\ [B1+1..=B2]]:
        [b := b_prev * (b1**(pMAX-p_prev) via b1_pows)]
        [factor detect with b...]
        ###########next round:
        [p_prev := pMAX]
        [b_prev := b]





]]]




[[[
起点
/sdcard/0my_files/book/math/factorint/snd/Factoring integers with elliptic curves(1987)(LENSTRA).pdf
===
One now hopes that there is a prime divisor p of n for which P**k and the neutral element O of the curve become the same modulo p; if ECC is given by a homogeneous Weierstrass equation y**2*z = x**3 + a*x*z**2 + b*z**3, with O = (0,1,0), then this is equivalent to the z-coordinate of P**k being divisible by p.
    Hence, one hopes to find a non-trivial factor of n by calculating the greatest common divisor of this z-eoordinate with n.
    三值坐标囗作用:here

]]]
