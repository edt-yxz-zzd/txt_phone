math

s.t. =?= subject to
	such that
	satisfy
========================
log :: cpx* -> period j*2pi
	ln<>exp
acos :: rg[-1,1] -> period 2pi
	arccos<>cos
% :: real -> @m<-real*. period abs(m)

pow :: cpx -> @(n/d)<-frac. {cpx}{len=d}



integral(f(x)) = ...+C
C = Dummy('C') not Symbol('C')
	instance_object vs abstract_value
	is vs ==
	address_room vs struct_value
>>> Dummy("x") == Dummy("x")
False


========================

必是
必不是
不必是
x is real
x is not real
x must be real
x maynot be real
x<-real
not x<-real
?s. x<-s/\s<=real
?s. x<-s/\not s<=real


bool=必是|必不是
restrict=必是|不必是

========================
stable_poly
poly(v.v.)::[pg26]::1.1.5. Routh-Hurwitz problem
stable_poly 1.1.5. Routh-Hurwitz
stable_poly := {f<-univariate_poly | @z. [f(z)=0] --> [Re(z)<0]}
def is_real(x):
	return im(x)==0
def are_coeffs_all_positive(f):
	return all(c>0 for c in f.all_coeffs())
	return all(f.nth(i)>0 for i in rg(1+f.degree()))
def are_coeffs_all_real(f):
	return all(map(is_real, f.all_coeffs()))
def is_stable_poly(f):
	if not (f.is_univariate and f.degree()>0):
		return ff
	if not f.is_monic:
		f = f.monic() #f/f.LC()
	if are_coeffs_all_real(f):
		p = f
	else:
		#mk p
		#x = f.gen
		#p = f*conj(f(conj(x)))
		#conj(p)=
		#		= conj(f*conj(f(conj(x))))
		#		= conj(f)*f(conj(x)))
		#p(conj(x))=
		#		= f(conj(x))*conj(f(x))
		#		= f(conj(x))*conj(f)
		#		= conj(f)*f(conj(x)))
		#		= conj(p)
		#==>> are_coeffs_all_real(p)
		###
		cs = f.all_coeffs()
		x = f.gen
		d = f.degree()
		assert d+1 == len(cs)
		p = f*sum(conjugate(cs[i])*x**(d-i) for i in rg(d+1)).as_poly()
	del f
	assert are_coeffs_all_real(p)

	if not are_coeffs_all_positive(p):
		return ff
	
	n = p.degree()
	x = p.gen
	#mk q
	#deg(q)=C(n,2)
	#rs = all_roots(p)
	#assert n == len(rs)
	#q = II(x-(rs[i]+rs[j]) for i,j in itertools.combinations(rg(n), 2)).as_poly()
	#
	#Res1(f,g,x) := det(Sylvester_mx(f.all_coeffs(x), g.all_coeffs(x)))
	#mx<k,k>
	#k = x+y = (fd+1)+x-1 = (gd+1)+y-1
	#==>> k=fd+gd
	#==>> f.cs shift x=gd times/rows
	#
	#Res1(p(x),p(z-x), x) = c*q*q*p(x/2)
	q = sqrt(resultant(p(x),p(z-x), x).exquo(p(x/2))).monic()
	#
	assert are_coeffs_all_real(q)
	return are_coeffs_all_positive(q)
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================
========================





