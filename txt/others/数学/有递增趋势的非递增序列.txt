
e others/数学/有递增趋势的非递增序列.txt

比如: 最短加链的长度
比如: 素因子数量
比如: 与最近素数的距离
比如: 与下一个伪素数的距离
      next_pseudoprime__ge_
比如: 比特数减去与下一个伪素数的距离
      diff__num_bits__distance_to_next_pseudoprime_
          list_nums_lt__diff_eq_
比如: 相邻伪素数的距离
      iter_pairwise_diff_pseudoprimes__ge_
比如: 比特数加上与上一个伪素数的距离
      prev_may_pseudoprime__lt_
      list4add__num_bits__distance_to_prev_pseudoprime__lt_
比如:序列纟链长纟扩展幺链素数
  枚举冫链长纟扩展幺链素数扌
  #view script/素数链.py
  view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
比如:序列纟插入位置纟小数部分纟对数纟差分倍增
  枚举冫插入位置纟小数部分纟对数纟差分倍增扌
  [fractional_fixed_point_part_of_(log_((n+1)/n; 2)) for n in range(2, 100)]
比如:序列纟插入位置纟小数部分纟负对数纟差分倍增
  [fractional_fixed_point_part_of_(-log_((n+1)/n; 2)) for n in range(2, 100)]


===
===
===
from seed.math.prime_gens import next_pseudoprime__ge_, iter_pseudoprimes__ge_, iter_pairwise_diff_pseudoprimes__ge_, prev_may_pseudoprime__lt_
[:next_pseudoprime__ge___vs__next_may_prime__le_pow2_81__ge_]:goto

===
from seed.math.prime_gens import next_pseudoprime__ge_, prev_may_pseudoprime__lt_
diff__num_bits__distance_to_next_pseudoprime_ = lambda n, /: n.bit_length() -(next_pseudoprime__ge_(n+1)-n)
list_nums_lt__diff_eq_ = lambda diff,/,*m:[n for n, d in enumerate(map(diff__num_bits__distance_to_next_pseudoprime_, range(*m))) if d==diff]
add__num_bits__distance_to_prev_pseudoprime_ = lambda n, /: n.bit_length() +(1 if n < 3 else n-prev_may_pseudoprime__lt_(n))
list4add__num_bits__distance_to_prev_pseudoprime__lt_ = lambda *m:[*map(add__num_bits__distance_to_prev_pseudoprime_, range(*m))]


[*map(diff__num_bits__distance_to_next_pseudoprime_, range(200))]
[-2, 0, 1, 0, 2, 1, 2, -1, 1, 2, 3, 2, 3, 0, 1, 2, 4, 3, 4, 1, 2, 3, 4, -1, 0, 1, 2, 3, 4, 3, 4, -1, 1, 2, 3, 4, 5, 2, 3, 4, 5, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 4, 5, 0, 1, 2, 4, 5, 6, 3, 4, 5, 6, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, -1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 5, 6, 3, 4, 5, 6, 5, 6, 3, 4, 5, 6, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 3, 5, 6, 7, 2, 3, 4, 5, 6, 7, 6, 7, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 6, 7, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 7, 4, 5, 6, 7, 6, 7, -4]

>>> list_nums_lt__diff_eq_(0,200)
[1, 3, 13, 24, 47, 53, 61, 90, 120, 141, 183]
>>> list_nums_lt__diff_eq_(5,200)
[36, 40, 42, 46, 52, 58, 60, 65, 69, 71, 77, 81, 87, 95, 99, 101, 105, 107, 111, 125, 128, 134, 146, 154, 160, 164, 170, 176, 188, 194]

>>> list_nums_lt__diff_eq_(0,2000)
[1, 3, 13, 24, 47, 53, 61, 90, 120, 141, 183, 203, 215, 243, 284, 298, 322, 338, 410, 422, 470, 531, 547, 577, 621, 631, 663, 691, 709, 777, 787, 799, 811, 829, 843, 867, 897, 919, 957, 999, 1021, 1076, 1140, 1202, 1238, 1266, 1308, 1350, 1388, 1412, 1460, 1500, 1512, 1532, 1586, 1646, 1682, 1710, 1766, 1790, 1812, 1836, 1850, 1890, 1920, 1938, 1962]
>>> list_nums_lt__diff_eq_(5,2000)
[36, 40, 42, 46, 52, 58, 60, 65, 69, 71, 77, 81, 87, 95, 99, 101, 105, 107, 111, 125, 128, 134, 146, 154, 160, 164, 170, 176, 188, 194, 208, 220, 224, 230, 236, 248, 254, 259, 265, 273, 277, 289, 303, 307, 313, 327, 333, 343, 349, 355, 363, 369, 375, 379, 385, 393, 397, 405, 415, 427, 435, 439, 445, 453, 457, 463, 475, 483, 487, 495, 499, 505, 516, 536, 542, 552, 558, 564, 572, 582, 588, 594, 602, 608, 626, 636, 648, 654, 668, 678, 686, 696, 704, 714, 722, 728, 734, 746, 752, 764, 782, 792, 804, 816, 834, 848, 872, 902, 914, 924, 932, 942, 948, 962, 972, 978, 986, 992, 1004, 1014, 1025, 1033, 1043, 1055, 1063, 1081, 1097, 1103, 1111, 1117, 1123, 1145, 1157, 1165, 1175, 1181, 1187, 1195, 1207, 1217, 1223, 1231, 1243, 1253, 1271, 1283, 1291, 1313, 1321, 1355, 1361, 1367, 1375, 1393, 1403, 1417, 1433, 1441, 1453, 1465, 1475, 1493, 1505, 1517, 1525, 1537, 1543, 1553, 1561, 1573, 1591, 1601, 1613, 1621, 1631, 1651, 1657, 1687, 1703, 1715, 1727, 1735, 1741, 1747, 1753, 1771, 1777, 1795, 1805, 1817, 1825, 1841, 1855, 1861, 1883, 1895, 1901, 1907, 1925, 1943, 1967, 1973, 1981, 1987]


>>> list_nums_lt__diff_eq_(-5,2000)
[115, 293, 317, 526, 892, 1071, 1135, 1261, 1345, 1383, 1641, 1677, 1761, 1831, 1915, 1933, 1957]
>>> list_nums_lt__diff_eq_(-5,200)
[115]

>>> list_nums_lt__diff_eq_(-9,2000)
[888, 1131, 1341, 1637, 1673, 1953]

>>> list_nums_lt__diff_eq_(-9,20000)
[888, 1131, 1341, 1637, 1673, 1953, 2182, 2312, 2482, 2558, 2978, 3142, 3230, 3278, 3470, 3740, 3968, 4028, 4179, 4305, 4525, 4761, 4839, 5125, 5239, 5359, 5449, 5535, 5601, 5757, 5959, 6175, 6399, 6427, 6499, 6739, 6925, 7081, 7129, 7261, 7371, 7767, 7795, 7971, 8017, 8125, 8330, 8396, 8478, 8900, 8976, 9068, 9564, 9984, 10014, 10404, 10536, 10808, 10914, 11004, 11216, 11556, 11634, 11754, 11840, 12014, 12074, 12120, 12174, 12350, 12866, 13010, 13070, 13194, 13268, 13344, 13940, 13974, 14120, 14258, 14568, 14598, 14900, 14990, 15704, 15836, 16010, 16034, 16160, 16194, 16278, 16387, 16453, 16495, 16579, 16705, 16763, 16787, 16847, 17053, 17267, 17633, 17683, 17989, 18017, 18559, 18593, 18637, 18815, 18875, 18923, 19097, 19183, 19349, 19507, 19637]


>>> list_nums_lt__diff_eq_(9,1000)
[520, 522, 540, 546, 556, 562, 568, 570, 576, 586, 592, 598, 600, 606, 612, 616, 618, 630, 640, 642, 646, 652, 658, 660, 672, 676, 682, 690, 700, 708, 718, 726, 732, 738, 742, 750, 756, 760, 768, 772, 786, 796, 808, 810, 820, 822, 826, 828, 838, 852, 856, 858, 862, 876, 880, 882, 886, 906, 910, 918, 928, 936, 940, 946, 952, 966, 970, 976, 982, 990, 996]

>>> list_nums_lt__diff_eq_(-9,1000)
[888]



>>> list4add__num_bits__distance_to_prev_pseudoprime__lt_(20)
[1, 2, 3, 3, 4, 5, 4, 5, 5, 6, 7, 8, 5, 6, 5, 6, 8, 9, 6, 7]
>>> list4add__num_bits__distance_to_prev_pseudoprime__lt_(200)
[1, 2, 3, 3, 4, 5, 4, 5, 5, 6, 7, 8, 5, 6, 5, 6, 8, 9, 6, 7, 6, 7, 8, 9, 6, 7, 8, 9, 10, 11, 6, 7, 7, 8, 9, 10, 11, 12, 7, 8, 9, 10, 7, 8, 7, 8, 9, 10, 7, 8, 9, 10, 11, 12, 7, 8, 9, 10, 11, 12, 7, 8, 7, 8, 10, 11, 12, 13, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 12, 13, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 8, 9, 10, 11, 12, 13, 14, 15, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 9, 10, 11, 12, 9, 10, 11, 12, 13, 14, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 10, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 13, 14, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 10, 9, 10, 11, 12, 9, 10]




islice(枚举冫链长纟扩展幺链素数扌([3,5,7]), 100)
  <<==:
  #view script/素数链.py
  view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
    欤扩展幺链素数扌
    求冫链长纟扩展幺链素数扌
    ##枚举冫扩展幺链素数牜加二枚举扌
    枚举冫扩展幺链素数牜归纳生成扌
    枚举冫链长纟扩展幺链素数扌
    ===
    [n :: int][ps :: {odd_prime}]:
        [欤扩展幺链素数扌(ps;n) =[def]= [[n >= 3][is_prime(n)][(ez4n,h4n) :=> [ez4n,hr4n :: uint][p2ep4n :: {uint:uint}][p2ep4n.keys()==set(ps)][ex := II__p2e_(p2ep4n)][ex*2**(ez4n+1)*(hr4n*2+1)+1==n]][rigid4n := (hr4n*2+1)][[rigid4n==1]or欤扩展幺链素数扌(rigid4n)]]]
>>> [*islice(枚举冫链长纟扩展幺链素数扌([3,5,7]), 100)]
[1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 3, 1, 1, 1, 2, 2, 3, 2, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 3, 3, 1, 3, 1, 4, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 4, 2, 2, 1, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 3, 3, 1, 1, 3, 2, 2, 2, 2, 1, 2, 4, 2]




===
py_adhoc_call   script.对数纟差分倍增   ,100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 +使用冫负对数 | lineno -s=+2
2:0
3:1
4:2
5:0
6:2
7:4
... ...
py_adhoc_call   script.对数纟差分倍增   @list.100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 +使用冫负对数
[0, 1, 2, 0, 2, 4, 0, 3, 6, 0, 4, 8, 12, 3, 8, 13, 2, 8, 14, 1, 8, 15, 0, 8, 16, 24, 6, 15, 24, 4, 14, 24, 2, 13, 24, 0, 12, 24, 36, 9, 22, 35, 6, 20, 34, 3, 18, 33, 48, 15, 31, 47, 11, 28, 45, 7, 25, 43, 3, 22, 41, 60, 18, 38, 58, 13, 34, 55, 8, 30, 52, 3, 26, 49, 72, 20, 44, 69, 15, 40, 65, 9, 35, 61, 3, 30, 57, 84, 23, 51, 79, 16, 45, 74, 9, 39, 69, 2, 33, 64]
===

