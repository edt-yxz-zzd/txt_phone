
e others/数学/有递增趋势的非递增序列.txt

比如框架: 整数构成/分解整数
  比如: 最短加链的长度
  比如: log_(b;n)/log__bijective_numeration_(b;n)
    view ../../python3_src/seed/math/log__bijective_numeration.py
  比如: 最小素因子/最大素因子/phi(n)
  比如: 拆分成互素平方和的数量
    view ../../python3_src/seed/math/GaussInteger.py
    view ../../python3_src/seed/math/right_angled_triangle_infos__sorted_by.py
    view ../../python3_src/seed/math/right_angled_triangle_side_length.py
  比如:序列纟链长纟扩展幺链素数
    枚举冫链长纟扩展幺链素数扌
    #view script/素数链.py
    view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
  比如:序列纟最小系数纟构成某种类型数据
    例如:枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌
        view script/辅助冫幂方判定.py
            源起:view ../../python3_src/seed/math/factor_pint_as_pefect_power_.py
            类似:平方剩余判定
                静态制表<p>: (n%p)是否是k次幂剩余
  比如:序列纟最小本原根纟素数
      view ../../python3_src/nn_ns/math_nn/numbers/b001918-least_positive_primitive_root_of_n_th_prime__fst_10000.txt
  比如:序列纟最小素本原根纟素数
      view ../../python3_src/nn_ns/math_nn/numbers/b002233-least_positive_prime_primitive_root_of_n_th_prime__except_0th__fst_10000.txt
  比如:序列纟阳爻数纟正整数
  比如:序列纟链长纟阳爻数纟正整数
  比如:序列纟差分纟正整数牜大步进纟链长纟阳爻数纟该正整数
  比如:序列纟加一负差分纟链长纟阳爻数纟正整数
      view script/链长纟阳爻数.py
        枚举冫阳爻数纟正整数扌
        枚举冫链长纟阳爻数纟正整数扌
        枚举冫差分纟正整数牜大步进纟链长纟阳爻数扌
        枚举冫加一负差分纟链长纟阳爻数纟正整数扌
  比如:序列纟数字和纟进制数/%基数
      view script/数字和纟进制数.py
        枚举冫数字和纟多种进制数扌 to_div_radix|to_mod_radix

比如框架: 小于址引的整数数量纟特定条件
  比如: 素因子数量
比如框架: 距离纟特定条件的下一个整数
  比如: 与最近素数的距离
    差分序列纟:幺链素数、扩展幺链素数(素数集纟分解用)、再扩展幺链素数(允许:完美幂根分解)
      view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
        枚举冫幺链素数牜归纳生成扌
        枚举冫扩展幺链素数牜归纳生成扌
        枚举冫再扩展幺链素数牜归纳生成扌
    差分序列纟:乘法生成集纟互素生成子
      #尾部纟加法生成集 是 等差数列{最大公约数}
      view ../../python3_src/seed/math/iter_sorted_products_of_uints.py
        iter_sorted_products_of_uints
        iter_sorted_products_of_strict_sorted_pairwise_coprime_uints
  比如: 与下一个伪素数的距离
      next_pseudoprime__ge_
  比如: 比特数减去与下一个伪素数的距离
      diff__num_bits__distance_to_next_pseudoprime_
          list_nums_lt__diff_eq_
  比如: 相邻伪素数的距离
      iter_pairwise_diff_pseudoprimes__ge_
  比如: 比特数加上与上一个伪素数的距离
      prev_may_pseudoprime__lt_
      list4add__num_bits__distance_to_prev_pseudoprime__lt_
比如框架:序列纟插入位置
  比如:序列纟插入位置纟小数部分纟对数纟差分倍增
    枚举冫插入位置纟小数部分纟对数纟差分倍增扌
    [fractional_fixed_point_part_of_(log_((n+1)/n; 2)) for n in range(2, 100)]
  比如:序列纟插入位置纟小数部分纟负对数纟差分倍增
    [fractional_fixed_point_part_of_(-log_((n+1)/n; 2)) for n in range(2, 100)]
比如框架: 符合特定条件的整数数量序列纟特定范围序列
  比如: [len([p for p in [n..<n+ln_(n)**1.5] if is_prime(p)]) for n in [2..]]
  条件:
    比如: is_prime
    比如: 伪素数{模幂基数集纟测试用}
    比如: 系数序列{参数}
      例如:枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌
        \d => [k | [k :<- [1..][is_prime(1+2*k*d)]]]
        view script/辅助冫幂方判定.py

    比如: 参见: view script/搜索冫某进制表达数乊多种进制解读皆为素数.py
          view /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8.radixes_17_31.out.txt
            范围:[0..<16**8]
            条件:isprime_for_all_bases_{进制数基数集牜解读用:=[17,19,23,29,31]}
            => 数量:61814#(FFFD7A44)4294801988
          view script/搜索冫无重复十进制位数字型素数乊位数.py
              iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_

比如框架: 符合特定条件的整数++反转？++差分？
  比如:素数
  比如:伪素数{模幂基数纟测试用}
  比如:进制数基数{进制数表达型:is_prime}
    view script/搜索冫进制数基数乊同一表达型解读为素数.py
      见下面:『17401』
比如框架:模变换/加密/散列{序号}
  比如: [f(n)! %n | [n :<- [1..]]]
      比如: [factorial_(floor_sqrt_(n)//e) %n | [n :<- [1..]]]
      比如: [factorial_(floor_sqrt_(floor_sqrt_(n//3))) %n | [n :<- [1..]]]
      比如: [II[n*144//233..<n*144//233+n.bit_length()] %n | [n :<- [1..]]]
          view script/模变换序号.py

比如框架:扫描串联{三角形/有限序列纟正整数}
    比如:二项式系数:[C(n;k) | [n :<- [1..]][k :<- [0..=n]]]
    比如:最大的最短加链:
      [k | [n :<- [1..]][k :<- max{all_optimal_addition_chain_of_(n)}]]
      view script/搜索冫最短加链长度.py
      view ../../python3_src/nn_ns/math_nn/numbers/shortest_addition_chain__the_max_one.py
    比如:整数分解指数序列
      view script/枚举冫相关最小正整数纟递降指数序列扌.py
        枚举冫零隔串联指数纟递降指数序列牜排序依相关最小正整数扌
    比如:取最高位纟幂模
      \[e::int{>=2}]->[(k**phi(n**e)%n**e)//n**(e-1) | [n :<- [2..]][k :<- [1..<n]]]
      相近:view script/分布纟素幂模幺元根纟素数减一次凵该素数进制数表达.py
    比如:不同基数的九九乘法表构成的整数过滤出来素数
      view script/整数分解冫九九乘法表牜进制基数.py

比如框架:近似/逼近
    比如:\err,b,ys -> [D | [y :<- ys][(N,D) := head [(N,D) | [(N,D) :<- iter_approx_NDs5cf_(cf_log_(b;y))][(y**D-b**N)/b**N <= err]]]]
        view ../../python3_src/seed/math/continued_fraction/iter_continued_fraction_of_log__truncated_.py
          main4batch4until4iter_continued_fraction_of_irrational_log_Fraction_#D_only
比如框架:最大值递增的短序列反序后扁平化合并
  mg = \pairs -> [v for (M, us) in pairs if us for v in [M, *reversed(us)]]
  比如:let f=\n->[r | [[r:<-[1..<n]][r**2%n==1]]] in mg([(n, f(n)) | [n:<-[2..]]])
  比如:let h=\p->[r | [[r:<-[2..<p]][r**(p-1)%p**2==1]]] in mg([(p, h(p)) | [p:<-PRIMES]])
    view script/分布纟素幂模幺元根纟素数减一次凵该素数进制数表达.py

递增序列:
  view script/辅助冫素性判定牜高斯和.py


===
===
===
from seed.math.prime_gens import next_pseudoprime__ge_, iter_pseudoprimes__ge_, iter_pairwise_diff_pseudoprimes__ge_, prev_may_pseudoprime__lt_
[:next_pseudoprime__ge___vs__next_may_prime__le_pow2_81__ge_]:goto

===
from seed.math.prime_gens import next_pseudoprime__ge_, prev_may_pseudoprime__lt_
diff__num_bits__distance_to_next_pseudoprime_ = lambda n, /: n.bit_length() -(next_pseudoprime__ge_(n+1)-n)
list_nums_lt__diff_eq_ = lambda diff,/,*m:[n for n, d in enumerate(map(diff__num_bits__distance_to_next_pseudoprime_, range(*m))) if d==diff]
add__num_bits__distance_to_prev_pseudoprime_ = lambda n, /: n.bit_length() +(1 if n < 3 else n-prev_may_pseudoprime__lt_(n))
list4add__num_bits__distance_to_prev_pseudoprime__lt_ = lambda *m:[*map(add__num_bits__distance_to_prev_pseudoprime_, range(*m))]


[*map(diff__num_bits__distance_to_next_pseudoprime_, range(200))]
[-2, 0, 1, 0, 2, 1, 2, -1, 1, 2, 3, 2, 3, 0, 1, 2, 4, 3, 4, 1, 2, 3, 4, -1, 0, 1, 2, 3, 4, 3, 4, -1, 1, 2, 3, 4, 5, 2, 3, 4, 5, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 4, 5, 0, 1, 2, 4, 5, 6, 3, 4, 5, 6, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, -1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 5, 6, 3, 4, 5, 6, 5, 6, 3, 4, 5, 6, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 3, 5, 6, 7, 2, 3, 4, 5, 6, 7, 6, 7, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 6, 7, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 7, 4, 5, 6, 7, 6, 7, -4]

>>> list_nums_lt__diff_eq_(0,200)
[1, 3, 13, 24, 47, 53, 61, 90, 120, 141, 183]
>>> list_nums_lt__diff_eq_(5,200)
[36, 40, 42, 46, 52, 58, 60, 65, 69, 71, 77, 81, 87, 95, 99, 101, 105, 107, 111, 125, 128, 134, 146, 154, 160, 164, 170, 176, 188, 194]

>>> list_nums_lt__diff_eq_(0,2000)
[1, 3, 13, 24, 47, 53, 61, 90, 120, 141, 183, 203, 215, 243, 284, 298, 322, 338, 410, 422, 470, 531, 547, 577, 621, 631, 663, 691, 709, 777, 787, 799, 811, 829, 843, 867, 897, 919, 957, 999, 1021, 1076, 1140, 1202, 1238, 1266, 1308, 1350, 1388, 1412, 1460, 1500, 1512, 1532, 1586, 1646, 1682, 1710, 1766, 1790, 1812, 1836, 1850, 1890, 1920, 1938, 1962]
>>> list_nums_lt__diff_eq_(5,2000)
[36, 40, 42, 46, 52, 58, 60, 65, 69, 71, 77, 81, 87, 95, 99, 101, 105, 107, 111, 125, 128, 134, 146, 154, 160, 164, 170, 176, 188, 194, 208, 220, 224, 230, 236, 248, 254, 259, 265, 273, 277, 289, 303, 307, 313, 327, 333, 343, 349, 355, 363, 369, 375, 379, 385, 393, 397, 405, 415, 427, 435, 439, 445, 453, 457, 463, 475, 483, 487, 495, 499, 505, 516, 536, 542, 552, 558, 564, 572, 582, 588, 594, 602, 608, 626, 636, 648, 654, 668, 678, 686, 696, 704, 714, 722, 728, 734, 746, 752, 764, 782, 792, 804, 816, 834, 848, 872, 902, 914, 924, 932, 942, 948, 962, 972, 978, 986, 992, 1004, 1014, 1025, 1033, 1043, 1055, 1063, 1081, 1097, 1103, 1111, 1117, 1123, 1145, 1157, 1165, 1175, 1181, 1187, 1195, 1207, 1217, 1223, 1231, 1243, 1253, 1271, 1283, 1291, 1313, 1321, 1355, 1361, 1367, 1375, 1393, 1403, 1417, 1433, 1441, 1453, 1465, 1475, 1493, 1505, 1517, 1525, 1537, 1543, 1553, 1561, 1573, 1591, 1601, 1613, 1621, 1631, 1651, 1657, 1687, 1703, 1715, 1727, 1735, 1741, 1747, 1753, 1771, 1777, 1795, 1805, 1817, 1825, 1841, 1855, 1861, 1883, 1895, 1901, 1907, 1925, 1943, 1967, 1973, 1981, 1987]


>>> list_nums_lt__diff_eq_(-5,2000)
[115, 293, 317, 526, 892, 1071, 1135, 1261, 1345, 1383, 1641, 1677, 1761, 1831, 1915, 1933, 1957]
>>> list_nums_lt__diff_eq_(-5,200)
[115]

>>> list_nums_lt__diff_eq_(-9,2000)
[888, 1131, 1341, 1637, 1673, 1953]

>>> list_nums_lt__diff_eq_(-9,20000)
[888, 1131, 1341, 1637, 1673, 1953, 2182, 2312, 2482, 2558, 2978, 3142, 3230, 3278, 3470, 3740, 3968, 4028, 4179, 4305, 4525, 4761, 4839, 5125, 5239, 5359, 5449, 5535, 5601, 5757, 5959, 6175, 6399, 6427, 6499, 6739, 6925, 7081, 7129, 7261, 7371, 7767, 7795, 7971, 8017, 8125, 8330, 8396, 8478, 8900, 8976, 9068, 9564, 9984, 10014, 10404, 10536, 10808, 10914, 11004, 11216, 11556, 11634, 11754, 11840, 12014, 12074, 12120, 12174, 12350, 12866, 13010, 13070, 13194, 13268, 13344, 13940, 13974, 14120, 14258, 14568, 14598, 14900, 14990, 15704, 15836, 16010, 16034, 16160, 16194, 16278, 16387, 16453, 16495, 16579, 16705, 16763, 16787, 16847, 17053, 17267, 17633, 17683, 17989, 18017, 18559, 18593, 18637, 18815, 18875, 18923, 19097, 19183, 19349, 19507, 19637]


>>> list_nums_lt__diff_eq_(9,1000)
[520, 522, 540, 546, 556, 562, 568, 570, 576, 586, 592, 598, 600, 606, 612, 616, 618, 630, 640, 642, 646, 652, 658, 660, 672, 676, 682, 690, 700, 708, 718, 726, 732, 738, 742, 750, 756, 760, 768, 772, 786, 796, 808, 810, 820, 822, 826, 828, 838, 852, 856, 858, 862, 876, 880, 882, 886, 906, 910, 918, 928, 936, 940, 946, 952, 966, 970, 976, 982, 990, 996]

>>> list_nums_lt__diff_eq_(-9,1000)
[888]



>>> list4add__num_bits__distance_to_prev_pseudoprime__lt_(20)
[1, 2, 3, 3, 4, 5, 4, 5, 5, 6, 7, 8, 5, 6, 5, 6, 8, 9, 6, 7]
>>> list4add__num_bits__distance_to_prev_pseudoprime__lt_(200)
[1, 2, 3, 3, 4, 5, 4, 5, 5, 6, 7, 8, 5, 6, 5, 6, 8, 9, 6, 7, 6, 7, 8, 9, 6, 7, 8, 9, 10, 11, 6, 7, 7, 8, 9, 10, 11, 12, 7, 8, 9, 10, 7, 8, 7, 8, 9, 10, 7, 8, 9, 10, 11, 12, 7, 8, 9, 10, 11, 12, 7, 8, 7, 8, 10, 11, 12, 13, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 12, 13, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 8, 9, 10, 11, 12, 13, 14, 15, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 9, 10, 11, 12, 9, 10, 11, 12, 13, 14, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 10, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 13, 14, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 10, 9, 10, 11, 12, 9, 10]




islice(枚举冫链长纟扩展幺链素数扌([3,5,7]), 100)
  <<==:
  #view script/素数链.py
  view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
    欤扩展幺链素数扌
    求冫链长纟扩展幺链素数扌
    ##枚举冫扩展幺链素数牜加二枚举扌
    枚举冫扩展幺链素数牜归纳生成扌
    枚举冫链长纟扩展幺链素数扌
    ===
    [n :: int][ps :: {odd_prime}]:
        [欤扩展幺链素数扌(ps;n) =[def]= [[n >= 3][is_prime(n)][(ez4n,h4n) :=> [ez4n,hr4n :: uint][p2ep4n :: {uint:uint}][p2ep4n.keys()==set(ps)][ex := II__p2e_(p2ep4n)][ex*2**(ez4n+1)*(hr4n*2+1)+1==n]][rigid4n := (hr4n*2+1)][[rigid4n==1]or欤扩展幺链素数扌(rigid4n)]]]
>>> [*islice(枚举冫链长纟扩展幺链素数扌([3,5,7]), 100)]
[1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 3, 1, 1, 1, 2, 2, 3, 2, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 3, 3, 1, 3, 1, 4, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 4, 2, 2, 1, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 3, 3, 1, 1, 3, 2, 2, 2, 2, 1, 2, 4, 2]




===
py_adhoc_call   script.对数纟差分倍增   ,100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 +使用冫负对数 | lineno -s=+2
2:0
3:1
4:2
5:0
6:2
7:4
... ...
py_adhoc_call   script.对数纟差分倍增   @list.100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 +使用冫负对数
[0, 1, 2, 0, 2, 4, 0, 3, 6, 0, 4, 8, 12, 3, 8, 13, 2, 8, 14, 1, 8, 15, 0, 8, 16, 24, 6, 15, 24, 4, 14, 24, 2, 13, 24, 0, 12, 24, 36, 9, 22, 35, 6, 20, 34, 3, 18, 33, 48, 15, 31, 47, 11, 28, 45, 7, 25, 43, 3, 22, 41, 60, 18, 38, 58, 13, 34, 55, 8, 30, 52, 3, 26, 49, 72, 20, 44, 69, 15, 40, 65, 9, 35, 61, 3, 30, 57, 84, 23, 51, 79, 16, 45, 74, 9, 39, 69, 2, 33, 64]


===
py_adhoc_call   script.搜索冫进制数基数乊同一表达型解读为素数   @list.100:枚举冫进制数基数乊同一表达型解读为素数扌 :17401
[2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 25, 29, 31, 33, 35, 36, 37, 41, 43, 49, 50, 51, 57, 58, 59, 60, 61, 62, 69, 76, 81, 84, 86, 87, 96, 97, 98, 101, 109, 111, 112, 115, 126, 140, 141, 148, 149, 150, 151, 154, 158, 167, 171, 172, 175, 177, 181, 184, 185, 186, 191, 197, 201, 215, 219, 224, 227, 229, 236, 239, 241, 249, 253, 254, 258, 264, 265, 266, 268, 271, 284, 289, 301, 302, 314, 315, 317, 327, 328, 331, 336, 344, 350]
py_adhoc_call   script.搜索冫进制数基数乊同一表达型解读为素数   @list.100:枚举冫进制数基数乊同一表达型解读为素数扌 :17401 +invert
[9, 14, 15, 20, 21, 24, 26, 27, 28, 30, 32, 34, 38, 39, 40, 42, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 152, 153, 155, 156, 157, 159]



===
py_adhoc_call   script.模变换序号   @list.10:iter_modN_factorial_floor_sqrt_sqrt_div3_N_ --begin='10**6'
[360000, 901847, 524478, 505226, 121436, 650475, 369712, 556545, 488376, 442628]



===
py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**8'
[0, 12685825, 74919090, 8422014, 57028036, 72688350, 39007360, 43022704, 80523720, 96907072]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**8' +coprime
[49890283, 81195354, 26954341, 44516470, 50192461, 40133206, 46850513, 43022704, 73266503, 96907072]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**4' +coprime
[6667, 5947, 5393, 4608, 6775, 5348, 2219, 6838, 1439, 8552]


===
py_adhoc_call   script.辅助冫幂方判定   ,100:枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌
(3, 7, 1)
(5, 11, 1)
(7, 29, 2)
(11, 23, 1)
...
(523, 5231, 5)
(541, 9739, 9)
(547, 5471, 5)

>>> [*islice(map(at[2], 枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌()), 100)]
[1, 1, 2, 1, 2, 3, 5, 1, 1, 5, 2, 1, 2, 3, 1, 6, 3, 2, 4, 2, 2, 1, 1, 2, 3, 3, 3, 5, 1, 2, 1, 3, 2, 4, 3, 5, 2, 7, 1, 1, 3, 1, 2, 9, 2, 5, 6, 12, 6, 1, 1, 3, 1, 3, 3, 4, 3, 2, 1, 3, 1, 2, 3, 3, 13, 3, 5, 3, 5, 7, 1, 3, 2, 6, 6, 12, 3, 4, 2, 1, 5, 1, 2, 5, 1, 4, 15, 3, 6, 3, 4, 2, 1, 2, 3, 1, 16, 5, 9, 5]

>>> [*islice(map(at[0], 枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌(7)), 100)]
[4, 6, 10, 16, 18, 28, 30, 34, 40, 48, 54, 60, 64, 66, 70, 78, 88, 90, 94, 96, 100, 106, 108, 118, 126, 130, 136, 138, 144, 150, 156, 166, 184, 186, 196, 204, 210, 214, 226, 228, 238, 244, 246, 268, 276, 286, 288, 298, 304, 306, 316, 324, 328, 330, 334, 340, 346, 348, 360, 364, 370, 376, 378, 384, 390, 400, 406, 408, 418, 424, 430, 438, 444, 448, 460, 474, 478, 480, 484, 504, 508, 510, 516, 528, 534, 538, 546, 550, 558, 574, 594, 600, 604, 606, 610, 618, 628, 640, 646, 660]

===
py_adhoc_call   seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_   @list.main4batch4until4iter_continued_fraction_of_irrational_log_Fraction_ =10  =10  ='[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]' --with_params__vs__without_params__vs__idx_only__vs__ND_only__vs__N_only__vs__D_only=5 #D_only
    #y**D#p**D
[10, 2, 10, 13, 1, 9, 13, 18, 11, 13, 2, 7, 13, 11, 3, 11]
py_adhoc_call   seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_   @list.main4batch4until4iter_continued_fraction_of_irrational_log_Fraction_ =10  =10  ='[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]' --with_params__vs__without_params__vs__idx_only__vs__ND_only__vs__N_only__vs__D_only=4 #N_only
    #b**N#10**N
[3, 1, 7, 11, 1, 10, 16, 23, 15, 19, 3, 11, 21, 18, 5, 19]


===

>>> [*islice(枚举冫阳爻数纟正整数扌(), 100)]
[1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3]
>>> [*islice(枚举冫链长纟阳爻数纟正整数扌(), 100)]
[0, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 2, 3, 3, 2, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 2, 3, 3, 2, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3]
>>> [*islice(枚举冫正整数牜大步进纟链长纟阳爻数扌(), 30)]
[507, 763, 891, 955, 987, 1003, 1011, 1275, 1403, 1467, 1499, 1515, 1523, 1659, 1723, 1755, 1771, 1779, 1851, 1883, 1899, 1907, 1947, 1963, 1971, 1995, 2003, 2019, 2299, 2427]
>>> [*islice(枚举冫差分纟正整数牜大步进纟链长纟阳爻数扌(to_div_by8=True), 50)]
[32, 16, 8, 4, 2, 1, 33, 16, 8, 4, 2, 1, 17, 8, 4, 2, 1, 9, 4, 2, 1, 5, 2, 1, 3, 1, 2, 35, 16, 8, 4, 2, 1, 17, 8, 4, 2, 1, 9, 4, 2, 1, 5, 2, 1, 3, 1, 2, 19, 8]
>>> [*islice(枚举冫加一负差分纟链长纟阳爻数纟正整数扌(), 800)] == (
... [0, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 2, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2
... , 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 4, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2
... , 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 2, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0
... , 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2
... , 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 1, 1, 0, 2, 0
... , 1, 3, 0, 0, 1, 3, -1, 3, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0
... , 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0
... , 1, 3, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 1, 1, 0, 2, 0, 1, 3, 0, 0, 1, 3, -1, 3, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2
... ])
True


===
mod
>>> ''.join(map(str, 枚举冫数字和纟多种进制数扌([2], range(300), max_only=True, to_mod_radix=True)))
'011010011001011010010110011010011001011001101001011010011001011010010110011010010110100110010110011010011001011010010110011010011001011001101001011010011001011001101001100101101001011001101001011010011001011010010110011010011001011001101001011010011001011010010110011010010110100110010110011010011001'
>>> ''.join(map(str, 枚举冫数字和纟多种进制数扌([3], range(300), max_only=True, to_mod_radix=True)))
'012120201120201012201012120120201012201012120012120201201012120012120201120201012120201012201012120012120201201012120012120201120201012012120201120201012201012120201012120012120201120201012012120201120201012201012120120201012201012120012120201120201012201012120012120201201012120012120201120201012012'
>>> ''.join(map(str, 枚举冫数字和纟多种进制数扌([5], range(300), max_only=True, to_mod_radix=True)))
'012341234023401340124012312340234013401240123012342340134012401230123412340340124012301234123402340140123012341234023401340121234023401340124012301234234013401240123012341234034012401230123412340234014012301234123402340134012012341234023401340124012323401340124012301234123403401240123012341234023401'


div
py_adhoc_call { -lineno }  script.数字和纟进制数   @list.300:枚举冫数字和纟多种进制数扌  ='[3]' ='count()' +max_only +to_div_radix
[0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 3, 3, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1]

===
py_adhoc_call   script.辅助冫素性判定牜高斯和   ,分离列表冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌  =20
[2, 6, 10, 22, 30, 66, 138, 210, 690, 1326, 2310, 2730, 4830, 6006, 7590, 11730, 29670, 30030, 43890, 46410]
[6, 42, 66, 138, 14322, 64722, 274386, 9225988926, 64653847566, 200903848194, 5035290113931125903778, 129938760413955562413498, 194566087632722440987506, 575502929150304528915486, 633601423104707805761706, 717079884733416284588046, 2112398571628588389196974, 732962968692882219931808949892246022477932266, 1627376515591430539167456314445611275968043326, 2892994585732193521067637338540943207145251798]
... ...
... ...



===
py_adhoc_call   script.分布纟素幂模幺元根纟素数减一次凵该素数进制数表达   @list.iter_primes_with_nontrivial_Pmmth_roots_of_unity_ltP__mod_PpowK__ver2_ =2 =542  +one_vs_all  +to_group +to_rev_flatten
[11, 9, 3, 29, 14, 37, 18, 43, 19, 59, 53, 71, 26, 11, 79, 31, 97, 53, 103, 43, 109, 96, 113, 68, 127, 62, 38, 131, 111, 58, 137, 19, 151, 78, 163, 84, 65, 181, 78, 191, 176, 197, 143, 199, 174, 211, 182, 165, 223, 69, 229, 209, 44, 233, 33, 241, 94, 257, 48, 263, 79, 269, 207, 180, 171, 281, 20, 283, 147, 293, 91, 307, 40, 313, 213, 104, 331, 324, 71, 18, 347, 156, 75, 349, 317, 223, 353, 196, 14, 359, 331, 257, 367, 205, 159, 373, 242, 379, 174, 397, 175, 401, 280, 419, 369, 421, 251, 433, 349, 439, 194, 449, 210, 461, 52, 463, 345, 255, 487, 307, 175, 100, 10, 499, 346, 509, 250, 93, 521, 308, 523, 241]

===
py_adhoc_call  { -lineno }  script.枚举冫相关最小正整数纟递降指数序列扌   @list.1000:枚举冫零隔串联指数纟递降指数序列牜排序依相关最小正整数扌
[0, 1, 0, 2, 0, 1, 1, 0, 3, 0, 2, 1, 0, 4, 0, 3, 1, 0, 1, 1, 1, 0, 5, 0, 2, 2, 0, 4, 1, 0, 2, 1, 1, 0, 6, 0, 3, 2, 0, 5, 1, 0, 3, 1, 1, 0, 7, 0, 4, 2, 0, 2, 2, 1, 0, 6, 1, 0, 1, 1, 1, 1, 0, 3, 3, 0, 4, 1, 1, 0, 8, 0, 5, 2, 0, 3, 2, 1, 0, 7, 1, 0, 2, 1, 1, 1, 0, 4, 3, 0, 5, 1, 1, 0, 9, 0, 6, 2, 0, 4, 2, 1, 0, 8, 1, 0, 3, 1, 1, 1, 0, 5, 3, 0, 2, 2, 2, 0, 6, 1, 1, 0, 10, 0, 3, 3, 1, 0, 7, 2, 0, 2, 2, 1, 1, 0, 4, 4, 0, 5, 2, 1, 0, 9, 1, 0, 4, 1, 1, 1, 0, 6, 3, 0, 3, 2, 2, 0, 7, 1, 1, 0, 11, 0, 4, 3, 1, 0, 8, 2, 0, 1, 1, 1, 1, 1, 0, 3, 2, 1, 1, 0, 5, 4, 0, 6, 2, 1, 0, 10, 1, 0, 5, 1, 1, 1, 0, 7, 3, 0, 4, 2, 2, 0, 8, 1, 1, 0, 12, 0, 5, 3, 1, 0, 9, 2, 0, 2, 1, 1, 1, 1, 0, 4, 2, 1, 1, 0, 6, 4, 0, 3, 3, 2, 0, 7, 2, 1, 0, 11, 1, 0, 2, 2, 2, 1, 0, 4, 4, 1, 0, 6, 1, 1, 1, 0, 8, 3, 0, 5, 2, 2, 0, 3, 3, 1, 1, 0, 9, 1, 1, 0, 5, 5, 0, 13, 0, 6, 3, 1, 0, 10, 2, 0, 3, 1, 1, 1, 1, 0, 5, 2, 1, 1, 0, 7, 4, 0, 4, 3, 2, 0, 8, 2, 1, 0, 12, 1, 0, 3, 2, 2, 1, 0, 5, 4, 1, 0, 7, 1, 1, 1, 0, 9, 3, 0, 2, 2, 1, 1, 1, 0, 6, 2, 2, 0, 4, 3, 1, 1, 0, 10, 1, 1, 0, 6, 5, 0, 14, 0, 7, 3, 1, 0, 11, 2, 0, 4, 1, 1, 1, 1, 0, 6, 2, 1, 1, 0, 8, 4, 0, 5, 3, 2, 0, 9, 2, 1, 0, 13, 1, 0, 4, 2, 2, 1, 0, 6, 4, 1, 0, 8, 1, 1, 1, 0, 3, 3, 3, 0, 10, 3, 0, 3, 2, 1, 1, 1, 0, 7, 2, 2, 0, 1, 1, 1, 1, 1, 1, 0, 5, 3, 1, 1, 0, 11, 1, 1, 0, 7, 5, 0, 4, 4, 2, 0, 15, 0, 8, 3, 1, 0, 12, 2, 0, 5, 1, 1, 1, 1, 0, 3, 3, 2, 1, 0, 5, 5, 1, 0, 7, 2, 1, 1, 0, 9, 4, 0, 6, 3, 2, 0, 2, 2, 2, 2, 0, 4, 4, 1, 1, 0, 10, 2, 1, 0, 6, 6, 0, 14, 1, 0, 5, 2, 2, 1, 0, 7, 4, 1, 0, 9, 1, 1, 1, 0, 4, 3, 3, 0, 11, 3, 0, 4, 2, 1, 1, 1, 0, 8, 2, 2, 0, 2, 1, 1, 1, 1, 1, 0, 6, 3, 1, 1, 0, 12, 1, 1, 0, 8, 5, 0, 5, 4, 2, 0, 16, 0, 9, 3, 1, 0, 2, 2, 2, 1, 1, 0, 13, 2, 0, 6, 1, 1, 1, 1, 0, 4, 3, 2, 1, 0, 6, 5, 1, 0, 8, 2, 1, 1, 0, 10, 4, 0, 3, 3, 1, 1, 1, 0, 7, 3, 2, 0, 3, 2, 2, 2, 0, 5, 4, 1, 1, 0, 11, 2, 1, 0, 7, 6, 0, 15, 1, 0, 6, 2, 2, 1, 0, 8, 4, 1, 0, 10, 1, 1, 1, 0, 5, 3, 3, 0, 12, 3, 0, 5, 2, 1, 1, 1, 0, 9, 2, 2, 0, 3, 1, 1, 1, 1, 1, 0, 7, 3, 1, 1, 0, 13, 1, 1, 0, 9, 5, 0, 6, 4, 2, 0, 17, 0, 10, 3, 1, 0, 3, 2, 2, 1, 1, 0, 14, 2, 0, 7, 1, 1, 1, 1, 0, 5, 3, 2, 1, 0, 7, 5, 1, 0, 9, 2, 1, 1, 0, 4, 4, 3, 0, 11, 4, 0, 4, 3, 1, 1, 1, 0, 8, 3, 2, 0, 4, 2, 2, 2, 0, 2, 2, 1, 1, 1, 1, 0, 6, 4, 1, 1, 0, 12, 2, 1, 0, 8, 6, 0, 3, 3, 3, 1, 0, 5, 5, 2, 0, 16, 1, 0, 7, 2, 2, 1, 0, 9, 4, 1, 0, 11, 1, 1, 1, 0, 6, 3, 3, 0, 13, 3, 0, 6, 2, 1, 1, 1, 0, 4, 4, 2, 1, 0, 10, 2, 2, 0, 6, 6, 1, 0, 4, 1, 1, 1, 1, 1, 0, 8, 3, 1, 1, 0, 14, 1, 1, 0, 10, 5, 0, 7, 4, 2, 0, 18, 0, 3, 3, 2, 2, 0, 5, 5, 1, 1, 0, 11, 3, 1, 0, 4, 2, 2, 1, 1, 0, 7, 7, 0, 15, 2, 0, 8, 1, 1, 1, 1, 0, 6, 3, 2, 1, 0, 8, 5, 1, 0, 10, 2, 1, 1, 0, 5, 4, 3, 0, 12, 4, 0, 5, 3, 1, 1, 1, 0, 9, 3, 2, 0, 5, 2, 2, 2, 0, 3, 2, 1, 1, 1, 1, 0, 7, 4, 1, 1, 0, 13, 2, 1, 0, 9, 6, 0, 4, 3, 3, 1, 0, 6, 5, 2, 0, 17, 1, 0, 8, 2, 2, 1, 0, 10, 4, 1, 0, 3, 3, 2, 1, 1, 0, 12, 1, 1, 1, 0, 7, 3, 3, 0, 14, 3, 0, 7, 2, 1, 1, 1, 0, 5, 4, 2, 1, 0, 11, 2, 2, 0, 7, 6, 1, 0, 5, 1, 1, 1, 1, 1, 0, 9, 3, 1, 1, 0, 2, 2, 2, 2, 1, 0, 15, 1, 1, 0, 11, 5, 0, 4, 4, 1, 1, 1, 0, 1, 1, 1]




===
#不少超过1000个
py_adhoc_call   script.整数分解冫九九乘法表牜进制基数   ,str.迭代冫基数辻素数列表牜九九乘法表牜进制基数扌 +to_str  +with_count  ='range(2,301)' > /sdcard/0my_files/tmp/1tmp
2:13#1
3:37,47#2
4:#0
5:151,229,331,487#4
6:401#1
7:443,593,643,839,941,1237,1289,1637,2039#9
8:577,967,1871#3
9:811,1303,1873,2039,3511,5807#6
... ...
137:2927983,3021833,3096913,3153223,3247073,3303383,3434773,3491083,3547393,3603703,3641243,3772633,3810173,4110493,4429583,4504663,4542203,4560973,4729903,4786213,4898833,4992683,5067763,5349187,5386729,5424271,5536897,5611981,5799691,5837233,6100027,6137569,6325279,6400363,6700699,7076119,7113661,7263829,7413997,7639249,7676791,7789147,7845463,7920551,8033183,8352307,8408623,8540027,8652659,8690203,8746519,8765291,8877923,9046871,9197047,9309679,9478627,9497399,9666347,9703891,9872839,10004243,10098103,10229507,10267051,10416823,10529461,11205289,11881117,12031301,12143939,12444307,12707129,13157149,13175923,13194697,13251019,13269793,13288567,13307341,13401211,13457533,13495081,13682821,13833013,13908109,14246041,14283589,14321137,14396233,14415007,14433781,14508877,14583973,14621521,14659069,14752939,15034549,15053323,15072097,15241063,15278611,15372481,15634643,15747293,15784843,15897493,16310543,16348093,16535843,16648493,16911343,17136643,17474593,17699893,18224783,18243559,18281111,18468871,18844391,18863167,18975823,19032151,19370119,19407671,19426447,19595431,19933399,19989727,20083607,20271367,20308919,20477903,20777371,20927587,20965141,21040249,21077803,21303127,21415789,21490897,21678667,21903991,22016653,22091761,22279531,22542409,22655071,22805287,23686739,23780629,23949631,24024743,24137411,24362747,24400303,24419081,24700751,24813419,25019977,25245313,25489427,25658429,26295679,27572651,28566583,28660483,28716823,28791943,28867063,28960963,28998523,29186323,29299003,29392903,29580703,29618263,29655823,29693383,30012643,30031423,30106543,30219223,30238003,30256783,30275563,30313123,30388243,30407023,30482143,30538483,30745063,30782623,30820183,30838963,31100389,31325761,32452621,32565307,32640431,33016051,33203861,34178869,34667201,34779893,34836239,34948931,35117969,35756557,35963159,36280687,36430951,36844177,36881743,37069573,37219837,37257403,37557931,38008723,38309251,38534647,38889623,39378007,39828823,39847607,39960311,40392343,40411127,40523831,40674103,40749239,40861943,40899511,41068567,41498563,41761553,42062113,42400243,43189213,43339493,43640053,44051149,44126293,44220223,44276581,44502013,44520799,44577157,44708659,44877733,44896519,44934091,45140737,45422527,45441313,45497671,45610387,45704317,45817033,45835819,45892177,45967321,45986107,46098823,46249111,46641307,46979473,47618231,48106693,48745451,49381771,49419347,49494499,49550863,49607227,49663591,49757531,49945411,50339959,50490263,50715719,50790871,50828447,50959963,51053903,51241783,51821629,52310143,52347721,52948969,53362327,53475061,54486953,54543323,54768803,54806383,54994283,55031863,55144603,55163393,55200973,55219763,55257343,55370083,55595563,55614353,55821043,55877413,55952573,56178053,56328373,56384743,57415361,57753599,57828763,57941509,58167001,58279747,58392493,58655567,59648503,59780047,59836423,59892799,59911591,60268639,60475351,60832399,60945151,61001527,61020319,61095487,61151863,61245823,61320991,61377367,61527703,61621663,62520571,62708501,62821259,62971603,63084361,63159533,64904027,64922821,65373877,65524229,65655787,65712169,65862521,65918903,66144431,66426341,66651869,66708251,66783427,67362643,67437823,67663363,67776133,68114443,68189623,68227213,68415163,68452753,68603113,68640703,68715883,68753473,68828653,68866243,68941423,69016603,69091783,69129373,69317323,70009207,70121983,70178371,70591883,70742251,70967803,70986599,71362519,71832419,72956531,73294877,73482847,73520441,73595629,73633223,73821193,75170773,75189571,75208369,75321157,75377551,75490339,75565531,75734713,75866299,75885097,75979087,76016683,76148269,76261057,76298653,76355047,76392643,76505431,76618219,76637017,76674613,76768603,76787401,76900189,77050573,78024143,78061741,78625711,78851299,79076887,79603259,79640857,80351143,80501543,80557943,80633143,80839943,80971543,81140743,81178343,81347543,81403943,81591943,81685943,81742343,81817543,82024343,82212343,82249943,82268743,83166943,83618167,84106993,85493917,85719541,85832353,85907561,86057977,86283601,86528027,86565631,86678443,86734849,86810057,86847661,86866463,87204899,87242503,88347349,88723409,88911439,89362711,89400317,89625953,90862339,90975163,91069183,91144399,91294831,91370047,91520479,91802539,91821343,91990579,92009383,92028187,92122207,92197423,92291443,92404267,92460679,92554699,93678203,93828643,94129523,94279963,94468013,94618453,94919333,95069773,95929913,96174391,96400063,96494093,96606929,96682153,96832601,97415587,97584841,97622453,97678871,98444887,98670571,99197167,99535693,99610921,99686149,100137517,101035087,101373631,101448863,101655751,101768599,102013103,102125951,102502111,102520919,102803039,103775761,103926233,104039087,104114323,104716211,106271923,106384783,106460023,106516453,106535263,106554073,106610503,106685743,106873843,106949083,107005513,107061943,107099563,107137183,107174803,107212423,107250043,107268853,107381713,107494573,107626243,107757913,107908393,109370029,109783871,110348201,111602839,111715711,111885019,112167199,112280071,112336507,112825619,112900867,113051363,114324751,114550507,114889141,114964393,115077271,115114897,115152523,115190149,115491157,115528783,116576329,116689213,116877353,116971423,117103121,117272447,117328889,117422959,117611099,117667541,117930937,119317063,119354693,119693363,119881513,119994403,120220183,120370703,120483593,120784633,121756759,121832023,122208343,122302423,122490583,122509399,122603479,122791639,123036247,123073879,123130327,123205591,123318487,124346977,124572781,124648049,125250193,125325461,125664167,127012469,127257103,127482919,127595827,127652281,127689917,127746371,127765189,128141549,128216821,128254457,128423819,128480273,129565057,129640333,129677971,129715609,129903799,130091989,130807111,132192923,132305843,132682243,132851623,132870443,133359763,133491503,133547963,133604423,134896079,135310141,135347783,135799487,135874771,135987697,136025339,136251191,137392207,137580427,137599249,137693359,137712181,137731003,137825113,137900401,138258019,138427417,138446239,138521527,138672103,138747391,139888327,140791831,141356521,142572679,142723271,142949159,142967983,143193871,143645647,143928007,143984479,145407643,145897093,145934743,146085343,146122993,146348893,146386543,146537143,147884941,147941419,148073201,148223809,148637981,148750937,149127457,150286921,150399883,150738769,151190617,151228271,151341233,152914819,153103099,153159583,153216067,153272551,153291379,153310207,153536143,153573799,153630283,153875047,153950359,154006843,154157467,154213951,154251607,156220567,158095313,158264783,158453083,158509573,158566063,158603723,158679043,158716703,158773193,158961493,158999153,159074473,159112133,159168623,161137507,161325817,161627113,161740099,161890747,161966071,163256983,163388807,163539463,163614791,163784279,163821943,164349239,164556391,165866069,165941401,166205063,166506391,166544057,166958383,167071381,168437491,168475159,168757669,168795337,168814171,168946009,169134349,169228519,169322689,171310273,171611633,171724643,172063673,172101343,172214353,173636843,173825203,174107743,174164251,174277267,174446791,174559807,174653987,174823511,174842347,176264779,176302453,176377801,176490823,176528497,176679193,176754541,177244303,177281977,178873883,178911559,178930397,179194129,179212967,179382509,179439023,179721593,179759269,181746737,183979063,184148623,184355863,184431223,184506583,184619623,184638463,184657303,184751503,184770343,184789183,184921063,184939903,186701219,186738901,186964993,187530223,189140761,189234971,189310339,189423391,189536443,189574127,189800231,189819073,189875599,190082861,191844091,192032521,192107893,192145579,192296323,192409381,192484753,192522439,194302463,194509747,194528591,194679343,194754719,194811251,194905471,194962003,195263507,197175413,197401553,197476933,199633783,199784551,199916473,200161471,200180317,200293393,200463007,200557237,202393693,202469081,205002839,205078231,205247863,205285559,205342103,205474039,205587127,205681367,207348103,207725083,207762781,207800479,208026667,209900693,210108043,210126893,210183443,210296543,210353093,210447343,210560443,210616993,210786643,212453281,212490983,213018811,215005867,215062423,215213239,215345203,215401759,215477167,215496019,215533723,215778799,215797651,215854207,217671569,218350277,220224157,220280719,220601237,220620091,220959463,222927583,223078423,223229263,223266973,225838439,225876151,226064711,226121279,226272127,228447619,228711617,230868223,230962513,230981371,231075661,231245383,231301957,231339673,231396247,233930017,235747103,235935703,236162023,236331763,236558083,238356271,238393993,238884379,240927719,240965443,241606751,243763249,243876427,246183799,246221527,246315847,246372439,246485623,246504487,246561079,246579943,246617671,246655399,246806311,249321203,251458769,251911553,251987017,254350969,256507351,256922447,257016787,257073391,257092259,259229759,259531663,261725743,261820093,261838963,261933313,262065403,262122013,262159753,262216363,262272973,264636881,266906407,266944151,267057383,267302719,269477869,269855329,272049331,272389063,274620793,274734043,274771793,274998293,277343263,277550899,277626403,279876979,282429569,282505081,282674983,282769373,287931223,290389423,292734319,292866493,292904257,293036431,293055313,303209051,305969399,308295343,308333119,311074597,313513853,316028659,316066441,316255351,318751271,321284969,323856451,323894239,326390143,331684279,334161277,339342043#1000
... ...
300:27630007,28530017,29610029,30690041,30870043,32310059,33930077,37170113,38430127,38790131,38970133,42030167,44910199,45810209,45990211,47610229,51390271,191790217,193230329,195570511,196110553,197010623,201330959,202411043,204031169,210511673,210691687,211231729,213211883,300690451,301410539,301770583,305731067,306091111,306811199,314732167,315272233,317072453,317432497,357390923,358111027,360091313,360631391,363511807,364411937,364591963,366572249,368732561,368912587,369272639,370532821,371072899,371432951,371612977,371973029,373593263,375213497,376833731,377373809,464491037,467011513,467191547,469892057,470792227,471872431,472412533,476373281,480514063,484294777,484834879,519031273,519391349,519931463,521011691,522271957,522812071,525512641,527493059,529833553,531273857,534694579,536674997,537395149,538295339,539375567,624330851,630632461,631172599,632793013,632973059,634413427,635673749,640534991,640895083,641075129,641615267,644315957,645936371,647016647,786871247,789572117,789932233,793893509,798034843,803076467,803976757,806317511,807397859,808838323,842311829,842491891,843392201,843932387,846633317,848974123,850414619,851494991,854736107,854916169,857617099,857977223,858697471,1003231739,1003771961,1005932849,1007733589,1008273811,1011515143,1012595587,1015116623,1016737289,1017817733,1017997807,1020518843,1023940249,1025380841,1112312419,1112492501,1115013649,1116094141,1117894961,1118975453,1119515699,1119875863,1121136437,1121496601,1122216929,1124377913,1124738077,1127979553,1128699881,1129600291,1130680783,1167393053,1167573139,1167933311,1169013827,1173876149,1181439761,1183600793,1184141051,1186482169,1187022427,1276473901,1279175311,1281336439,1284037849,1285118413,1285838789,1286919353,1290521233,1291781891,1292142079,1293222643,1293943019,1294303207,1294483301,1327772597,1337677987,1338218281,1339298869,1343441123,1343621221,1345602299,1347403279,1347943573,1349924651,1436313127,1437573869,1440635671,1441716307,1441896413,1442436731,1443877579,1448740441,1456304893,1456484999,1456845211,1600114661,1601195369,1602095959,1605878437,1606598909,1607679617,1609120561,1609841033,1610741623,1615784927,1618486697,1619927641,1653574453,1653934697,1655015429,1655195551,1656816649,1657176893,1659878723,1663120919,1665822749,1666903481,1667083603,1667443847,1671406531,1672487263,1816115293,1816475561,1818096767,1818817303,1822419983,1830526013,1831786951,1835389631,1923575183,1923935467,1925196461,1927898591,1929519869,1929880153,1931681573,1932221999,1935284413,1937626259,1939247537,1940328389,1980817957,1987843651,1990906133,1991446571,1991626717,1993248031,1994689199,1995229637,1996310513,1996850951,1997931827,2086116083,2091340549,2094583321,2095123783,2095303937,2096384861,2096745169,2099087171,2100708557,2104311637,2104491791,2142638453,2143178927,2144440033,2147682877,2148583667,2150205089,2150385247,2150745563,2152006669,2152547143,2155249513,2155609829,2156150303,2156330461,2157951883,2159032831,2159933621,2249197553,2251900043,2253521537,2260007513,2263250501,2263790999,2264691829,2265232327,2266853821,2267934817,2414801659,2414981837,2418585397,2422909669,2425612339,2428495187,2465738827,2466279373,2467180283,2470423559,2471144287,2475829019,2476009201,2481955207,2482495753,2628279991,2631883871,2633505617,2635307557,2638911437,2640533183,2642335123,2643956869,2645398421,2645939003,2737181413,2738803231,2741686463,2742227069,2742587473,2744209291,2745290503,2746011311,2746551917,2749795553,2750696563,2751417371,2753039189,2790821227,2791722257,2792803493,2794605553,2796227407,2799290909,2800011733,2801092969,2803615853,2803796059,2804156471,2805237707,2807940797,2902425943,2903507227,2903687441,2906751079,2907291721,2909093861,2911797071,2914320067,2955344933,2956426241,2957507549,2959309729,2963454743,2964536051,2966338231,2968320629,3061903673,3066048871,3066229097,3067310453,3074159041,3076862431,3077943787,3223904399,3224805589,3230392967,3230933681,3232015109,3233457013,3234538441,3235619869,3236160583,3237242011,3237422249,3283131659,3284753837,3285294563,3287998193,3291963517,3440986891,3441527653,3444231463,3445312987,3446214257,3449098321,3453424417,3554936069,3555296593,3556558427,3557099213,3559622881,3560704453,3562867597,3563408383,3605691679,3608395669,3608936467,3610018063,3612722053,3613623383,3615966841,3617408969,3711529043,3717297811,3717838633,3718018907,3719461099,3720542743,3725049593,3765889877,3769315159,3770937661,3771298217,3771839051,3772560163,3772920719,3773461553,3773641831,3775264333,3775624889,3778329059,3874431307,3875693309,3877135597,3881462461,3882544177,4038595777,4040218459,4045266803,4046168293,4047430379,4091514311,4096923371,4098726391,4099627901,4099808203,4101250619,4101971827,4253695591,4256219987,4261268779,4263973489,4264514431,4363860107,4364401073,4367105903,4369269767,4370712343,4371253309,4371433631,4372335241,4419303089,4421647327,4423270261,4524238223,4526221897,4527303901,4530730247,4531812251,4533976259,4534336927,4578599237,4581304307,4582025659,4583107687,4583648701,4584730729,4586173433,4586353771,4587255461,4588517827,4589058841,4687140967,4688764081,4690928233,4691108579,4691469271,4693813769,4696338613,4850765263,4855634929,4856717077,4858520657,4859061731,4904404933,4906930001,4907110363,4907651449,4909635431,4912340861,4912521223,4912881947,4913423033,5066406091,5069472449,5069652823,5070554693,5071636937,5072719181,5073440677,5073981799,5075965913,5174406863,5180359469,5181441761,5183425963,5230571881,5233818829,5235983461,5237065777,5336949203,5341819841,5343443387,5392031989,5397985123,5398526317,5503280141,5503640953,5504182171,5506527449,5662575353,5663657861,5664740369,5717117053,5717658319,5720184227,5723973089,5881644467,5881824901,5883448807,5883990109,5990367239,5990728123,6042021959,6043645973,6044728649,6150564253,6150744707,6153271063,6154534241,6204745189,6206369311,6207271601,6207993433,6209437097,6313648483,6314370347,6474747599,6477274291,6479981461,6529830973,6532357721,6691651997,6692373973,6694900889,6695442371,6800375009,6800736013,6802360531,6803985049,6854375527,6855458563,6856361093,6857444129,6963459647,6964001189,7018543297,7019084851,7019445887,7126905481,7127447059,7288546127,7289990431,7342546693,7504367837,7612549523#580

===
===
===
