
e others/数学/有递增趋势的非递增序列.txt

比如框架: 整数构成/分解整数
  比如: 最短加链的长度
  比如: log_(b;n)/log__bijective_numeration_(b;n)
    view ../../python3_src/seed/math/log__bijective_numeration.py
  比如: 最小素因子/最大素因子/phi(n)
  比如: 拆分成互素平方和的数量
    view ../../python3_src/seed/math/GaussInteger.py
    view ../../python3_src/seed/math/right_angled_triangle_infos__sorted_by.py
    view ../../python3_src/seed/math/right_angled_triangle_side_length.py
  比如:序列纟链长纟扩展幺链素数
    枚举冫链长纟扩展幺链素数扌
    #view script/素数链.py
    view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
  比如:序列纟最小系数纟构成某种类型数据
    例如:枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌
        view script/辅助冫幂方判定.py
            源起:view ../../python3_src/seed/math/factor_pint_as_pefect_power_.py
            类似:平方剩余判定
                静态制表<p>: (n%p)是否是k次幂剩余
  比如:序列纟最小本原根纟素数
      view ../../python3_src/nn_ns/math_nn/numbers/b001918-least_positive_primitive_root_of_n_th_prime__fst_10000.txt
  比如:序列纟最小素本原根纟素数
      view ../../python3_src/nn_ns/math_nn/numbers/b002233-least_positive_prime_primitive_root_of_n_th_prime__except_0th__fst_10000.txt
  比如:序列纟阳爻数纟正整数
  比如:序列纟链长纟阳爻数纟正整数
  比如:序列纟差分纟正整数牜大步进纟链长纟阳爻数纟该正整数
  比如:序列纟加一负差分纟链长纟阳爻数纟正整数
      view script/链长纟阳爻数.py
        枚举冫阳爻数纟正整数扌
        枚举冫链长纟阳爻数纟正整数扌
        枚举冫差分纟正整数牜大步进纟链长纟阳爻数扌
        枚举冫加一负差分纟链长纟阳爻数纟正整数扌
  比如:序列纟数字和纟进制数/%基数
      view script/数字和纟进制数.py
        枚举冫数字和纟多种进制数扌 to_div_radix|to_mod_radix

比如框架: 小于址引的整数数量纟特定条件
  比如: 素因子数量
比如框架: 距离纟特定条件的下一个整数
  比如: 与最近素数的距离
    差分序列纟:幺链素数、扩展幺链素数(素数集纟分解用)、再扩展幺链素数(允许:完美幂根分解)
      view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
        枚举冫幺链素数牜归纳生成扌
        枚举冫扩展幺链素数牜归纳生成扌
        枚举冫再扩展幺链素数牜归纳生成扌
    差分序列纟:乘法生成集纟互素生成子
      #尾部纟加法生成集 是 等差数列{最大公约数}
      view ../../python3_src/seed/math/iter_sorted_products_of_uints.py
        iter_sorted_products_of_uints
        iter_sorted_products_of_strict_sorted_pairwise_coprime_uints
  比如: 与下一个伪素数的距离
      next_pseudoprime__ge_
  比如: 比特数减去与下一个伪素数的距离
      diff__num_bits__distance_to_next_pseudoprime_
          list_nums_lt__diff_eq_
  比如: 相邻伪素数的距离
      iter_pairwise_diff_pseudoprimes__ge_
  比如: 比特数加上与上一个伪素数的距离
      prev_may_pseudoprime__lt_
      list4add__num_bits__distance_to_prev_pseudoprime__lt_
比如框架:序列纟插入位置
  比如:序列纟插入位置纟小数部分纟对数纟差分倍增
    枚举冫插入位置纟小数部分纟对数纟差分倍增扌
    [fractional_fixed_point_part_of_(log_((n+1)/n; 2)) for n in range(2, 100)]
  比如:序列纟插入位置纟小数部分纟负对数纟差分倍增
    [fractional_fixed_point_part_of_(-log_((n+1)/n; 2)) for n in range(2, 100)]
比如框架: 符合特定条件的整数数量序列纟特定范围序列
  比如: [len([p for p in [n..<n+ln_(n)**1.5] if is_prime(p)]) for n in [2..]]
  条件:
    比如: is_prime
    比如: 伪素数{模幂基数集纟测试用}
    比如: 系数序列{参数}
      例如:枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌
        \d => [k | [k :<- [1..][is_prime(1+2*k*d)]]]
        view script/辅助冫幂方判定.py

    比如: 参见: view script/搜索冫某进制表达数乊多种进制解读皆为素数.py
          view /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8.radixes_17_31.out.txt
            范围:[0..<16**8]
            条件:isprime_for_all_bases_{进制数基数集牜解读用:=[17,19,23,29,31]}
            => 数量:61814#(FFFD7A44)4294801988
          view script/搜索冫无重复十进制位数字型素数乊位数.py
              iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_

比如框架: 符合特定条件的整数++反转？++差分？
  比如:素数
  比如:伪素数{模幂基数纟测试用}
  比如:进制数基数{进制数表达型:is_prime}
    view script/搜索冫进制数基数乊同一表达型解读为素数.py
      见下面:『17401』
比如框架:模变换/加密/散列{序号}
  比如: [f(n)! %n | [n :<- [1..]]]
      比如: [factorial_(floor_sqrt_(n)//e) %n | [n :<- [1..]]]
      比如: [factorial_(floor_sqrt_(floor_sqrt_(n//3))) %n | [n :<- [1..]]]
      比如: [II[n*144//233..<n*144//233+n.bit_length()] %n | [n :<- [1..]]]
          view script/模变换序号.py

比如框架:扫描串联{三角形/有限序列纟正整数}
    比如:二项式系数:[C(n;k) | [n :<- [1..]][k :<- [0..=n]]]
    比如:最大的最短加链:
      [k | [n :<- [1..]][k :<- max{all_optimal_addition_chain_of_(n)}]]
      view script/搜索冫最短加链长度.py
      view ../../python3_src/nn_ns/math_nn/numbers/shortest_addition_chain__the_max_one.py

比如框架:近似/逼近
    比如:\err,b,ys -> [D | [y :<- ys][(N,D) := head [(N,D) | [(N,D) :<- iter_approx_NDs5cf_(cf_log_(b;y))][(y**D-b**N)/b**N <= err]]]]
        view ../../python3_src/seed/math/continued_fraction/iter_continued_fraction_of_log__truncated_.py
          main4batch4until4iter_continued_fraction_of_irrational_log_Fraction_#D_only

===
===
===
from seed.math.prime_gens import next_pseudoprime__ge_, iter_pseudoprimes__ge_, iter_pairwise_diff_pseudoprimes__ge_, prev_may_pseudoprime__lt_
[:next_pseudoprime__ge___vs__next_may_prime__le_pow2_81__ge_]:goto

===
from seed.math.prime_gens import next_pseudoprime__ge_, prev_may_pseudoprime__lt_
diff__num_bits__distance_to_next_pseudoprime_ = lambda n, /: n.bit_length() -(next_pseudoprime__ge_(n+1)-n)
list_nums_lt__diff_eq_ = lambda diff,/,*m:[n for n, d in enumerate(map(diff__num_bits__distance_to_next_pseudoprime_, range(*m))) if d==diff]
add__num_bits__distance_to_prev_pseudoprime_ = lambda n, /: n.bit_length() +(1 if n < 3 else n-prev_may_pseudoprime__lt_(n))
list4add__num_bits__distance_to_prev_pseudoprime__lt_ = lambda *m:[*map(add__num_bits__distance_to_prev_pseudoprime_, range(*m))]


[*map(diff__num_bits__distance_to_next_pseudoprime_, range(200))]
[-2, 0, 1, 0, 2, 1, 2, -1, 1, 2, 3, 2, 3, 0, 1, 2, 4, 3, 4, 1, 2, 3, 4, -1, 0, 1, 2, 3, 4, 3, 4, -1, 1, 2, 3, 4, 5, 2, 3, 4, 5, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 4, 5, 0, 1, 2, 4, 5, 6, 3, 4, 5, 6, 5, 6, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, -1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 5, 6, 3, 4, 5, 6, 5, 6, 3, 4, 5, 6, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 3, 5, 6, 7, 2, 3, 4, 5, 6, 7, 6, 7, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 6, 7, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 7, 4, 5, 6, 7, 6, 7, -4]

>>> list_nums_lt__diff_eq_(0,200)
[1, 3, 13, 24, 47, 53, 61, 90, 120, 141, 183]
>>> list_nums_lt__diff_eq_(5,200)
[36, 40, 42, 46, 52, 58, 60, 65, 69, 71, 77, 81, 87, 95, 99, 101, 105, 107, 111, 125, 128, 134, 146, 154, 160, 164, 170, 176, 188, 194]

>>> list_nums_lt__diff_eq_(0,2000)
[1, 3, 13, 24, 47, 53, 61, 90, 120, 141, 183, 203, 215, 243, 284, 298, 322, 338, 410, 422, 470, 531, 547, 577, 621, 631, 663, 691, 709, 777, 787, 799, 811, 829, 843, 867, 897, 919, 957, 999, 1021, 1076, 1140, 1202, 1238, 1266, 1308, 1350, 1388, 1412, 1460, 1500, 1512, 1532, 1586, 1646, 1682, 1710, 1766, 1790, 1812, 1836, 1850, 1890, 1920, 1938, 1962]
>>> list_nums_lt__diff_eq_(5,2000)
[36, 40, 42, 46, 52, 58, 60, 65, 69, 71, 77, 81, 87, 95, 99, 101, 105, 107, 111, 125, 128, 134, 146, 154, 160, 164, 170, 176, 188, 194, 208, 220, 224, 230, 236, 248, 254, 259, 265, 273, 277, 289, 303, 307, 313, 327, 333, 343, 349, 355, 363, 369, 375, 379, 385, 393, 397, 405, 415, 427, 435, 439, 445, 453, 457, 463, 475, 483, 487, 495, 499, 505, 516, 536, 542, 552, 558, 564, 572, 582, 588, 594, 602, 608, 626, 636, 648, 654, 668, 678, 686, 696, 704, 714, 722, 728, 734, 746, 752, 764, 782, 792, 804, 816, 834, 848, 872, 902, 914, 924, 932, 942, 948, 962, 972, 978, 986, 992, 1004, 1014, 1025, 1033, 1043, 1055, 1063, 1081, 1097, 1103, 1111, 1117, 1123, 1145, 1157, 1165, 1175, 1181, 1187, 1195, 1207, 1217, 1223, 1231, 1243, 1253, 1271, 1283, 1291, 1313, 1321, 1355, 1361, 1367, 1375, 1393, 1403, 1417, 1433, 1441, 1453, 1465, 1475, 1493, 1505, 1517, 1525, 1537, 1543, 1553, 1561, 1573, 1591, 1601, 1613, 1621, 1631, 1651, 1657, 1687, 1703, 1715, 1727, 1735, 1741, 1747, 1753, 1771, 1777, 1795, 1805, 1817, 1825, 1841, 1855, 1861, 1883, 1895, 1901, 1907, 1925, 1943, 1967, 1973, 1981, 1987]


>>> list_nums_lt__diff_eq_(-5,2000)
[115, 293, 317, 526, 892, 1071, 1135, 1261, 1345, 1383, 1641, 1677, 1761, 1831, 1915, 1933, 1957]
>>> list_nums_lt__diff_eq_(-5,200)
[115]

>>> list_nums_lt__diff_eq_(-9,2000)
[888, 1131, 1341, 1637, 1673, 1953]

>>> list_nums_lt__diff_eq_(-9,20000)
[888, 1131, 1341, 1637, 1673, 1953, 2182, 2312, 2482, 2558, 2978, 3142, 3230, 3278, 3470, 3740, 3968, 4028, 4179, 4305, 4525, 4761, 4839, 5125, 5239, 5359, 5449, 5535, 5601, 5757, 5959, 6175, 6399, 6427, 6499, 6739, 6925, 7081, 7129, 7261, 7371, 7767, 7795, 7971, 8017, 8125, 8330, 8396, 8478, 8900, 8976, 9068, 9564, 9984, 10014, 10404, 10536, 10808, 10914, 11004, 11216, 11556, 11634, 11754, 11840, 12014, 12074, 12120, 12174, 12350, 12866, 13010, 13070, 13194, 13268, 13344, 13940, 13974, 14120, 14258, 14568, 14598, 14900, 14990, 15704, 15836, 16010, 16034, 16160, 16194, 16278, 16387, 16453, 16495, 16579, 16705, 16763, 16787, 16847, 17053, 17267, 17633, 17683, 17989, 18017, 18559, 18593, 18637, 18815, 18875, 18923, 19097, 19183, 19349, 19507, 19637]


>>> list_nums_lt__diff_eq_(9,1000)
[520, 522, 540, 546, 556, 562, 568, 570, 576, 586, 592, 598, 600, 606, 612, 616, 618, 630, 640, 642, 646, 652, 658, 660, 672, 676, 682, 690, 700, 708, 718, 726, 732, 738, 742, 750, 756, 760, 768, 772, 786, 796, 808, 810, 820, 822, 826, 828, 838, 852, 856, 858, 862, 876, 880, 882, 886, 906, 910, 918, 928, 936, 940, 946, 952, 966, 970, 976, 982, 990, 996]

>>> list_nums_lt__diff_eq_(-9,1000)
[888]



>>> list4add__num_bits__distance_to_prev_pseudoprime__lt_(20)
[1, 2, 3, 3, 4, 5, 4, 5, 5, 6, 7, 8, 5, 6, 5, 6, 8, 9, 6, 7]
>>> list4add__num_bits__distance_to_prev_pseudoprime__lt_(200)
[1, 2, 3, 3, 4, 5, 4, 5, 5, 6, 7, 8, 5, 6, 5, 6, 8, 9, 6, 7, 6, 7, 8, 9, 6, 7, 8, 9, 10, 11, 6, 7, 7, 8, 9, 10, 11, 12, 7, 8, 9, 10, 7, 8, 7, 8, 9, 10, 7, 8, 9, 10, 11, 12, 7, 8, 9, 10, 11, 12, 7, 8, 7, 8, 10, 11, 12, 13, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 12, 13, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 8, 9, 10, 11, 12, 13, 14, 15, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 8, 9, 8, 9, 10, 11, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 9, 10, 11, 12, 9, 10, 11, 12, 13, 14, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 10, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 9, 10, 11, 12, 13, 14, 9, 10, 11, 12, 13, 14, 9, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 10, 9, 10, 11, 12, 9, 10]




islice(枚举冫链长纟扩展幺链素数扌([3,5,7]), 100)
  <<==:
  #view script/素数链.py
  view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
    欤扩展幺链素数扌
    求冫链长纟扩展幺链素数扌
    ##枚举冫扩展幺链素数牜加二枚举扌
    枚举冫扩展幺链素数牜归纳生成扌
    枚举冫链长纟扩展幺链素数扌
    ===
    [n :: int][ps :: {odd_prime}]:
        [欤扩展幺链素数扌(ps;n) =[def]= [[n >= 3][is_prime(n)][(ez4n,h4n) :=> [ez4n,hr4n :: uint][p2ep4n :: {uint:uint}][p2ep4n.keys()==set(ps)][ex := II__p2e_(p2ep4n)][ex*2**(ez4n+1)*(hr4n*2+1)+1==n]][rigid4n := (hr4n*2+1)][[rigid4n==1]or欤扩展幺链素数扌(rigid4n)]]]
>>> [*islice(枚举冫链长纟扩展幺链素数扌([3,5,7]), 100)]
[1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 3, 1, 1, 1, 2, 2, 3, 2, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 3, 3, 1, 3, 1, 4, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 4, 2, 2, 1, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 3, 3, 1, 1, 3, 2, 2, 2, 2, 1, 2, 4, 2]




===
py_adhoc_call   script.对数纟差分倍增   ,100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 +使用冫负对数 | lineno -s=+2
2:0
3:1
4:2
5:0
6:2
7:4
... ...
py_adhoc_call   script.对数纟差分倍增   @list.100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 +使用冫负对数
[0, 1, 2, 0, 2, 4, 0, 3, 6, 0, 4, 8, 12, 3, 8, 13, 2, 8, 14, 1, 8, 15, 0, 8, 16, 24, 6, 15, 24, 4, 14, 24, 2, 13, 24, 0, 12, 24, 36, 9, 22, 35, 6, 20, 34, 3, 18, 33, 48, 15, 31, 47, 11, 28, 45, 7, 25, 43, 3, 22, 41, 60, 18, 38, 58, 13, 34, 55, 8, 30, 52, 3, 26, 49, 72, 20, 44, 69, 15, 40, 65, 9, 35, 61, 3, 30, 57, 84, 23, 51, 79, 16, 45, 74, 9, 39, 69, 2, 33, 64]


===
py_adhoc_call   script.搜索冫进制数基数乊同一表达型解读为素数   @list.100:枚举冫进制数基数乊同一表达型解读为素数扌 :17401
[2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 25, 29, 31, 33, 35, 36, 37, 41, 43, 49, 50, 51, 57, 58, 59, 60, 61, 62, 69, 76, 81, 84, 86, 87, 96, 97, 98, 101, 109, 111, 112, 115, 126, 140, 141, 148, 149, 150, 151, 154, 158, 167, 171, 172, 175, 177, 181, 184, 185, 186, 191, 197, 201, 215, 219, 224, 227, 229, 236, 239, 241, 249, 253, 254, 258, 264, 265, 266, 268, 271, 284, 289, 301, 302, 314, 315, 317, 327, 328, 331, 336, 344, 350]
py_adhoc_call   script.搜索冫进制数基数乊同一表达型解读为素数   @list.100:枚举冫进制数基数乊同一表达型解读为素数扌 :17401 +invert
[9, 14, 15, 20, 21, 24, 26, 27, 28, 30, 32, 34, 38, 39, 40, 42, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 152, 153, 155, 156, 157, 159]



===
py_adhoc_call   script.模变换序号   @list.10:iter_modN_factorial_floor_sqrt_sqrt_div3_N_ --begin='10**6'
[360000, 901847, 524478, 505226, 121436, 650475, 369712, 556545, 488376, 442628]



===
py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**8'
[0, 12685825, 74919090, 8422014, 57028036, 72688350, 39007360, 43022704, 80523720, 96907072]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**8' +coprime
[49890283, 81195354, 26954341, 44516470, 50192461, 40133206, 46850513, 43022704, 73266503, 96907072]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**4' +coprime
[6667, 5947, 5393, 4608, 6775, 5348, 2219, 6838, 1439, 8552]


===
py_adhoc_call   script.辅助冫幂方判定   ,100:枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌
(3, 7, 1)
(5, 11, 1)
(7, 29, 2)
(11, 23, 1)
...
(523, 5231, 5)
(541, 9739, 9)
(547, 5471, 5)

>>> [*islice(map(at[2], 枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌()), 100)]
[1, 1, 2, 1, 2, 3, 5, 1, 1, 5, 2, 1, 2, 3, 1, 6, 3, 2, 4, 2, 2, 1, 1, 2, 3, 3, 3, 5, 1, 2, 1, 3, 2, 4, 3, 5, 2, 7, 1, 1, 3, 1, 2, 9, 2, 5, 6, 12, 6, 1, 1, 3, 1, 3, 3, 4, 3, 2, 1, 3, 1, 2, 3, 3, 13, 3, 5, 3, 5, 7, 1, 3, 2, 6, 6, 12, 3, 4, 2, 1, 5, 1, 2, 5, 1, 4, 15, 3, 6, 3, 4, 2, 1, 2, 3, 1, 16, 5, 9, 5]

>>> [*islice(map(at[0], 枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌(7)), 100)]
[4, 6, 10, 16, 18, 28, 30, 34, 40, 48, 54, 60, 64, 66, 70, 78, 88, 90, 94, 96, 100, 106, 108, 118, 126, 130, 136, 138, 144, 150, 156, 166, 184, 186, 196, 204, 210, 214, 226, 228, 238, 244, 246, 268, 276, 286, 288, 298, 304, 306, 316, 324, 328, 330, 334, 340, 346, 348, 360, 364, 370, 376, 378, 384, 390, 400, 406, 408, 418, 424, 430, 438, 444, 448, 460, 474, 478, 480, 484, 504, 508, 510, 516, 528, 534, 538, 546, 550, 558, 574, 594, 600, 604, 606, 610, 618, 628, 640, 646, 660]

===
py_adhoc_call   seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_   @list.main4batch4until4iter_continued_fraction_of_irrational_log_Fraction_ =10  =10  ='[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]' --with_params__vs__without_params__vs__idx_only__vs__ND_only__vs__N_only__vs__D_only=5 #D_only
    #y**D#p**D
[10, 2, 10, 13, 1, 9, 13, 18, 11, 13, 2, 7, 13, 11, 3, 11]
py_adhoc_call   seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_   @list.main4batch4until4iter_continued_fraction_of_irrational_log_Fraction_ =10  =10  ='[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]' --with_params__vs__without_params__vs__idx_only__vs__ND_only__vs__N_only__vs__D_only=4 #N_only
    #b**N#10**N
[3, 1, 7, 11, 1, 10, 16, 23, 15, 19, 3, 11, 21, 18, 5, 19]


===

>>> [*islice(枚举冫阳爻数纟正整数扌(), 100)]
[1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3]
>>> [*islice(枚举冫链长纟阳爻数纟正整数扌(), 100)]
[0, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 2, 3, 3, 2, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 2, 3, 3, 2, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3]
>>> [*islice(枚举冫正整数牜大步进纟链长纟阳爻数扌(), 30)]
[507, 763, 891, 955, 987, 1003, 1011, 1275, 1403, 1467, 1499, 1515, 1523, 1659, 1723, 1755, 1771, 1779, 1851, 1883, 1899, 1907, 1947, 1963, 1971, 1995, 2003, 2019, 2299, 2427]
>>> [*islice(枚举冫差分纟正整数牜大步进纟链长纟阳爻数扌(to_div_by8=True), 50)]
[32, 16, 8, 4, 2, 1, 33, 16, 8, 4, 2, 1, 17, 8, 4, 2, 1, 9, 4, 2, 1, 5, 2, 1, 3, 1, 2, 35, 16, 8, 4, 2, 1, 17, 8, 4, 2, 1, 9, 4, 2, 1, 5, 2, 1, 3, 1, 2, 19, 8]
>>> [*islice(枚举冫加一负差分纟链长纟阳爻数纟正整数扌(), 800)] == (
... [0, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 2, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2
... , 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 4, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2
... , 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 2, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0
... , 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2
... , 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 1, 1, 0, 2, 0
... , 1, 3, 0, 0, 1, 3, -1, 3, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0
... , 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0
... , 1, 3, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 1, 1, 0, 2, 0, 1, 3, 0, 0, 1, 3, -1, 3, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2
... ])
True


===
mod
>>> ''.join(map(str, 枚举冫数字和纟多种进制数扌([2], range(300), max_only=True, to_mod_radix=True)))
'011010011001011010010110011010011001011001101001011010011001011010010110011010010110100110010110011010011001011010010110011010011001011001101001011010011001011001101001100101101001011001101001011010011001011010010110011010011001011001101001011010011001011010010110011010010110100110010110011010011001'
>>> ''.join(map(str, 枚举冫数字和纟多种进制数扌([3], range(300), max_only=True, to_mod_radix=True)))
'012120201120201012201012120120201012201012120012120201201012120012120201120201012120201012201012120012120201201012120012120201120201012012120201120201012201012120201012120012120201120201012012120201120201012201012120120201012201012120012120201120201012201012120012120201201012120012120201120201012012'
>>> ''.join(map(str, 枚举冫数字和纟多种进制数扌([5], range(300), max_only=True, to_mod_radix=True)))
'012341234023401340124012312340234013401240123012342340134012401230123412340340124012301234123402340140123012341234023401340121234023401340124012301234234013401240123012341234034012401230123412340234014012301234123402340134012012341234023401340124012323401340124012301234123403401240123012341234023401'


div
py_adhoc_call { -lineno }  script.数字和纟进制数   @list.300:枚举冫数字和纟多种进制数扌  ='[3]' ='count()' +max_only +to_div_radix
[0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 3, 3, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1]

===
===
