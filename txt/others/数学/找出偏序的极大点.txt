
e others/数学/找出偏序的极大点.txt

view ../../python3_src/seed/algo/findout_all_maximal_points.py

出现过需求:
  from seed.math.load_data.some_smooth_primes import SmoothPrime__base_2_3_5__lt_3317044064679887385962123 #.smooth_primes__sorted, .prime_bases, .smooth_prime__cofactorization__pairs____sorted, .maxpp
    def _find_max_exps_(prime_bases, prime__cofactorization__pairs, /):




识别出 极大元素
    O(N**2)*partial_cmp

    元组特例:tuple<L, total_ordering>
      partial_cmp == O(L)*total_cmp
      O(L*N**2)*total_cmp

    输出规模是O(N)
    假如输出规模是O(M)
      校验输出正确性 或者 校验证书，只怕也要O(M**2)*partial_cmp时间
      有些被覆盖，这部分校验，只需O(N-M)*partial_cmp
      核心部分O(M**2)*partial_cmp
        但 元组特例:只需O(M**2)*total_cmp
          而非O(L*M**2)*total_cmp

[xs :: [tuple<L>]]:
    [[xs[i] is max] =[def]= [@j. [@k. [xs[i].k <= xs[j].k]] -> [xs[i] == xs[j]]]]
    [[@i,j. [i=!=j] -> [xs[i] =!= xs[j]]] -> [[xs[i] is max] <-> [@j. [i=!=j] -> [?k. [xs[i].k > xs[j].k]]]]]




[[bug:
识别出 极大元素
  O(L * N**2)
  O(L**2 *N*log(N))
  O(L**2 *(M+N))

若假设 len(es) == L很小
  则可以:
    无需:factorial(L) 次 L-元组 排序
    只需:choose(L;2)*2 次 1-元组 排序 + 各一次扫描 O(L**2 *N*log(N)) 或 桶排序 O(L**2 *(M+N))
      精心安排，只需[L==2 or L%2==1](choose(L;2)+1) +[L%2==0 and L>=4](<=choose(L-1)+(L-2)///2 *3 +2==L**2///2)次 1-元组 排序
      若允许 保存状态，则???
      01--> 0,1 两次排序
      01,12,20--> 0,1,2,0 四次排序
      01,12,20;03,31,14,42,23,34,40 --> 11次排序
          01,12,20;0(3,3)1,1(4,4)2,2(3,34,4)0
          K[3]case; 0--->1--->2--->0
                      3    4   3 4
        2*k-1 --> 2*k+1
        (2*k-1)*(2*k-2)///2
            +(2*k-1) +(2*k-1) +1
            -->
            +2*(k-1) +2*(k-1) +3

      01,12,20,03,31,,,23--> 0,1,2,0,3,1,,,2,3 8次排序
        K[4] 8==4**2/2

      完全图K[n]的 欧路路径，一笔画
        存在 iff 连通+度数为奇数的节点的数量为0或2
        完全图K[n] 只有n==2或n为奇数


  [L==2]:
    (全局-下降,局部-上升)
    假设没有 相等元素(容易识别隔离)
    # (2,2),(1,0),(0,1),(-1,0)
    #   (0,1) ~<~ (2,2)
    bug:在这种排序下，一个元素是极大值 等价于:
      xs[i].0 > xs[i+1].0 && xs[i].1 > xs[i-1].1
      <==>
      (xs[i].0 > xs[i+1].0 || xs[i].1 > xs[i+1].1) && xs[i].1 > xs[i-1].1
      ######################
      source:
        [@i,j. [i=!=j] -> [xs[i] =!= xs[j]]]
        [@j. [[xs[j].0 > xs[j+1].0]or[[xs[j].0 == xs[j+1].0][xs[j].1 <= xs[j+1].1]]]]
      ######################
      to proof:
        fail:[@j. [[xs[j].0 > xs[j+1].0][xs[j].1 > xs[j-1].1]] <-> [xs[j] is max]]
        ######################
        [@j. [xs[j] is max] -> [xs[j].0 > xs[j+1].0]]
        [@j. [xs[j] is max] -> [xs[j].1 > xs[j-1].1]]
        fail:[@j. [xs[j].0 > xs[j+1].0] -> [xs[j].1 > xs[j-1].1] -> [xs[j] is max]]
      proof:
        [xs[j].0 == xs[j+1].0]:
            !! [@j. [[xs[j].0 > xs[j+1].0]or[[xs[j].0 == xs[j+1].0][xs[j].1 <= xs[j+1].1]]]]
            [xs[j].1 <= xs[j+1].1]
            [xs[j] ~<=~ xs[j+1]]
            !! [@i,j. [i=!=j] -> [xs[i] =!= xs[j]]]
            [xs[j] ~<~ xs[j+1]]
            [xs[j] is not max]
        [@j. [xs[j].0 == xs[j+1].0] -> [xs[j] is not max]]
        [@j. [xs[j] is max] -> [xs[j].0 =!= xs[j+1].0]]
        !! [@j. [[xs[j].0 > xs[j+1].0]or[[xs[j].0 == xs[j+1].0][xs[j].1 <= xs[j+1].1]]]]
        [@j. [xs[j].0 >= xs[j+1].0]]
        [@j. [xs[j] is max] -> [xs[j].0 > xs[j+1].0]]

        !! [@j. [xs[j].0 >= xs[j+1].0]]
        [@j. [xs[j].0 <= xs[j-1].0]]
        [xs[j].1 <= xs[j-1].1]:
            !! [xs[j].0 <= xs[j-1].0]
            [xs[j] ~<=~ xs[j-1]]
            !! [@i,j. [i=!=j] -> [xs[i] =!= xs[j]]]
            [xs[j] ~<~ xs[j-1]]
            [xs[j] is not max]
        [@j. [xs[j].1 <= xs[j-1].1] -> [xs[j] is not max]]
        [@j. [xs[j] is max] -> [xs[j].1 > xs[j-1].1]]


        [xs[j].0 > xs[j+1].0][xs[j].1 > xs[j-1].1]:
            !! [@j. [xs[j].0 >= xs[j+1].0]]
            !! [xs[j].0 > xs[j+1].0]
            [@i. [j < i] -> [xs[j].0 > xs[i].0]]
            ???fail:[xs[j] is max]

  [L==3]:
    不相等，至少有一位置不同，假设:
      a.0 > b.0
    * [a.1 >= b.1]:
      * [a.2 >= b.2]:
        [a ~>~ b]
      * [a.2 < b.2]:
        [a <!> b]
    * [a.1 < b.1]:
        [a <!> b]
    ==>> 只由局部决定是否 不可比较
    (1,1,-1)
    (1,-1,1)
    (-1,1,1)
    (0,0,0)
    ==>>:
    sort 0,1:
        (1,1,-1)
        (1,-1,1)
        (0,0,0)
        (-1,1,1)
    sort 0,2:
        (1,-1,1)
        (1,1,-1)
        (0,0,0)
        (-1,1,1)
    sort 1,2:
        (-1,1,1)
        (1,1,-1)
        (0,0,0)
        (1,-1,1)
    只选两个坐标，不够:总有一个能覆盖(0,0,0)

]]

