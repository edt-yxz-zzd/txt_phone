
e others/app/termux/shell_note.txt
===
『:』-- nop, no-op, py.pass
『$?』 -- exit status
===
help '*' | grep '^\S' --after-context=1 >> others/app/termux/help/help.glob-pattern-star.txt
===
help for while until case select if function time '%' '((' '.' ':' '[' '[[' '{'  | grep '^\S'

===
view others/app/termux/help/bash.man.txt
===
view others/app/termux/shell_note--example--fxt-scripts-replace.txt
cp ../../python3_src/c_external/fxt/_ignore__unzip/fxt/scripts/replace   others/app/termux/shell_note--example--fxt-scripts-replace.txt
view ../../python3_src/c_external/fxt/_ignore__unzip/fxt/scripts/replace
  example of "getopts case function unset while" __doc__  /dev/null


===
keyword:
RESERVED WORDS
       ! case  coproc  do done elif else esac fi for function if in select
       then until while { } time [[ ]]

DEFINITIONS
    *metacharacter
        A character that, when unquoted, separates words.
        |  & ; ( ) < > space tab newline

    *control operator
        A token that performs a control function.
        || & && ; ;; ;& ;;& ( ) | |& <newline>

===

===
[[[
help for while until case select if function time '%' '((' '.' ':' '[' '[[' '{'
===
for: for NAME [in WORDS ... ] ; do COMMANDS; done
while: while COMMANDS; do COMMANDS; done
until: until COMMANDS; do COMMANDS; done
case: case WORD in [PATTERN [| PATTERN]...) COMMANDS ;;]... esac
select: select NAME [in WORDS ... ;] do COMMANDS; done
if: if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi
function: function name { COMMANDS ; } or name () { COMMANDS ; }
time: time [-p] pipeline
%: job_spec [&]
(( ... )): (( expression ))
.: . filename [arguments]
:: :
[: [ arg... ]
[[ ... ]]: [[ expression ]]
{ ... }: { COMMANDS ; }
#补偿]]]]
]]]

===
help
38*2=76 topics
help help
help -d
help '*' | grep '^\S' >> others/app/termux/help/help.glob-pattern-star.txt
help '*' | grep '^\S' --after-context=1 >> others/app/termux/help/help.glob-pattern-star.txt
help '*' >> others/app/termux/help/help.glob-pattern-star.txt
view others/app/termux/help/help.glob-pattern-star.txt


[[[
alias bg bind break builtin caller case cd command compgen complete compopt continue coproc declare dirs disown echo enable eval exec exit export false fc fg for for function getopts hash help history if jobs kill let local logout mapfile popd printf pushd pwd read readarray readonly return select set shift shopt source suspend test time times trap true type typeset ulimit umask unalias unset until variables wait while '%' '((' '.' ':' '[' '[[' '{'

===
%  #not:job_spec
((
.
:
[
[[
alias
bg
bind
break
builtin
caller
case
cd
command
compgen
complete
compopt
continue
coproc
declare
dirs
disown
echo
enable
eval
exec
exit
export
false
fc
fg
for
for
function
getopts
hash
help
history
if
jobs
kill
let
local
logout
mapfile
popd
printf
pushd
pwd
read
readarray
readonly
return
select
set
shift
shopt
source
suspend
test
time
times
trap
true
type
typeset
ulimit
umask
unalias
unset
until
variables
wait
while
{
#补偿]]]
#补偿]]]
]]]

[[[
$ help
===
 job_spec [&]                 history [-c] [-d offset] >
 (( expression ))             if COMMANDS; then COMMAND>
 . filename [arguments]       jobs [-lnprs] [jobspec ..>
 :                            kill [-s sigspec | -n sig>
 [ arg... ]                   let arg [arg ...]
 [[ expression ]]             local [option] name[=valu>
 alias [-p] [name[=value] .>  logout [n]
 bg [job_spec ...]            mapfile [-d delim] [-n co>
 bind [-lpsvPSVX] [-m keyma>  popd [-n] [+N | -N]
 break [n]                    printf [-v var] format [a>
 builtin [shell-builtin [ar>  pushd [-n] [+N | -N | di>
 caller [expr]                pwd [-LP]
 case WORD in [PATTERN [| P>  read [-ers] [-a array] [->
 cd [-L|[-P [-e]] [-@]] [di>  readarray [-d delim] [-n >
 command [-pVv] command [ar>  readonly [-aAf] [name[=va>
 compgen [-abcdefgjksuv] [->  return [n]
 complete [-abcdefgjksuv] [>  select NAME [in WORDS ...>
 compopt [-o|+o option] [-D>  set [-abefhkmnptuvxBCHP] >
 continue [n]                 shift [n]
 coproc [NAME] command [red>  shopt [-pqsu] [-o] [optna>
 declare [-aAfFgiIlnrtux] [>  source filename [argument>
 dirs [-clpv] [+N] [-N]       suspend [-f]
 disown [-h] [-ar] [jobspec>  test [expr]
 echo [-neE] [arg ...]        time [-p] pipeline
 enable [-a] [-dnps] [-f fi>  times
 eval [arg ...]               trap [-lp] [[arg] signal_>
 exec [-cl] [-a name] [comm>  true
 exit [n]                     type [-afptP] name [name >
 export [-fn] [name[=value]>  typeset [-aAfFgiIlnrtux] >
 false                        ulimit [-SHabcdefiklmnpqr>
 fc [-e ename] [-lnr] [firs>  umask [-p] [-S] [mode]
 fg [job_spec]                unalias [-a] name [name .>
 for NAME [in WORDS ... ] ;>  unset [-f] [-v] [-n] [nam>
 for (( exp1; exp2; exp3 ))>  until COMMANDS; do COMMAN>
 function name { COMMANDS ;>  variables - Names and mea>
 getopts optstring name [ar>  wait [-fn] [-p var] [id .>
 hash [-lr] [-p pathname] [>  while COMMANDS; do COMMAN>
 help [-dms] [pattern ...]    { COMMANDS ; }

#补偿]]]]]]]]]]]]]]]]]]]]
#补偿]]]]]]]]]]]]]]]]]]]
]]]
[[[
help '*' | grep '^\S'
===
Shell commands matching keyword `*'
%: job_spec [&]
(( ... )): (( expression ))
.: . filename [arguments]
:: :
[: [ arg... ]
[[ ... ]]: [[ expression ]]
alias: alias [-p] [name[=value] ... ]
bg: bg [job_spec ...]
bind: bind [-lpsvPSVX] [-m keymap] [-f filename] [-q name] [-u name] [-r keyseq] [-x keyseq:shell-command] [keyseq:readline-function or readline-command]
break: break [n]
builtin: builtin [shell-builtin [arg ...]]
caller: caller [expr]
case: case WORD in [PATTERN [| PATTERN]...) COMMANDS ;;]... esac
cd: cd [-L|[-P [-e]] [-@]] [dir]
command: command [-pVv] command [arg ...]
compgen: compgen [-abcdefgjksuv] [-o option] [-A action] [-G globpat] [-W wordlist] [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] [word]
complete: complete [-abcdefgjksuv] [-pr] [-DEI] [-o option] [-A action] [-G globpat] [-W wordlist] [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] [name ...]
compopt: compopt [-o|+o option] [-DEI] [name ...]
continue: continue [n]
coproc: coproc [NAME] command [redirections]
declare: declare [-aAfFgiIlnrtux] [-p] [name[=value] ...]
dirs: dirs [-clpv] [+N] [-N]
disown: disown [-h] [-ar] [jobspec ... | pid ...]
echo: echo [-neE] [arg ...]
enable: enable [-a] [-dnps] [-f filename] [name ...]
eval: eval [arg ...]
exec: exec [-cl] [-a name] [command [argument ...]] [redirection ...]
exit: exit [n]
export: export [-fn] [name[=value] ...] or export -p
false: false
fc: fc [-e ename] [-lnr] [first] [last] or fc -s [pat=rep] [command]
fg: fg [job_spec]
for: for NAME [in WORDS ... ] ; do COMMANDS; done
for ((: for (( exp1; exp2; exp3 )); do COMMANDS; done
function: function name { COMMANDS ; } or name () { COMMANDS ; }
getopts: getopts optstring name [arg ...]
hash: hash [-lr] [-p pathname] [-dt] [name ...]
help: help [-dms] [pattern ...]
history: history [-c] [-d offset] [n] or history -anrw [filename] or history -ps arg [arg...]
if: if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi
jobs: jobs [-lnprs] [jobspec ...] or jobs -x command [args]kill: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
let: let arg [arg ...]
local: local [option] name[=value] ...
logout: logout [n]
mapfile: mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]
popd: popd [-n] [+N | -N]
printf: printf [-v var] format [arguments]
pushd: pushd [-n] [+N | -N | dir]
pwd: pwd [-LP]
read: read [-ers] [-a array] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name ...] readarray: readarray [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]
readonly: readonly [-aAf] [name[=value] ...] or readonly -preturn: return [n]
select: select NAME [in WORDS ... ;] do COMMANDS; done
set: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]
shift: shift [n]
shopt: shopt [-pqsu] [-o] [optname ...]
source: source filename [arguments]
suspend: suspend [-f]
test: test [expr]
time: time [-p] pipeline
times: times
trap: trap [-lp] [[arg] signal_spec ...]
true: true
type: type [-afptP] name [name ...]
typeset: typeset [-aAfFgiIlnrtux] [-p] name[=value] ...
ulimit: ulimit [-SHabcdefiklmnpqrstuvxPT] [limit]
umask: umask [-p] [-S] [mode]
unalias: unalias [-a] name [name ...]
unset: unset [-f] [-v] [-n] [name ...]
until: until COMMANDS; do COMMANDS; done
variables: variables - Names and meanings of some shell variables
wait: wait [-fn] [-p var] [id ...]
while: while COMMANDS; do COMMANDS; done
{ ... }: { COMMANDS ; }
#补偿]
]]]


