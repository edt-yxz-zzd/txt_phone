find

=====================
'' vs ""
	'' raw string: regex"'[^']*'"
	"" escaped string: regex'"([^\\$]|\$\w+|\\[\.\n])*"'


=====================
echo $((60*24))

=====================
? *
	wild card

=====================
$ man find | grep '\-type' -B 0 -C 30


=====================
find . -name "*"
	NOTE: "" prevent shell to expand *


find . '(' -name "*" ')'
find . '(' -name "*" -and -not -name "." ')'
find . -size +10M
	>10MiB
	MiB=2^20
find . -type d
	directory
find . -type f
	regular file

find . -type f -and -mtime +5
	mtime +5 will find those files last modified more than 5*24h ago
	-mtime -5 will find those files last modified less than 5*24h ago
	-mmin minute instead of day
	$((60*24))



find . -print
find . -delete
find . -exec ls -a {} ';'
	-exec enclosed by ';'
	find -name "*~" -print
	find -name ".?*" -print
	find -wholename "**/__pycache__/?*.pyc" -print
  使用『-path』而非『-wholename』
	find -name "__pycache__" -print
	find -name "?*.pyc" -print

	find -name "*~" -delete
	find -name ".?*" -delete
	find -wholename "**/__pycache__/?*.pyc" -delete
  使用『-path』而非『-wholename』
	find -name "__pycache__" -delete
	find -name "?*.pyc" -delete


开头 只能是:『*』『**』『/』『.』
  find relative/path/ -path "./**/must/beginswith/dot/**"
  find /absolute/path/ -path "/**/must/beginswith/slash/**"
不要以『/』结尾
  Since the concatenation will never end with a slash, -path arguments ending in a slash will match nothing (except perhaps a start point specified on the command line).

-wholename pattern
    See -path.  This alternative is less portable than -path.


-ipath pattern
    Like -path.  but the match is case insensitive.


-iregex pattern
    Like -regex, but the match is case insensitive.


-regex pattern
    File name matches regular expression pattern.
    This is a match on the whole path, not a search.
      #fullmatch
      #完全精确匹配 整个路径，而非 搜索部分
      # ”^{pattern}$” not ”.*{pattern}.*”
