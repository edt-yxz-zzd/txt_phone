
e others/app/termux/Terminal\ Settings.txt
cat ~/.termux/termux.properties
view others/app/termux/help/termux.man.txt
view others/app/termux/help/termux.help.txt

[[[
新配置@20250120
++?META?:
    <<==view others/app/termux/help/readline.txt
但是 没有 META
  view others/app/termux/help/termux.man.txt
    改用ALT@termux版readline
    ALT-b
    ALT-f
===
view others/app/termux/termux-settings-backup/README.txt
===
#@20250120
extra-keys = [ \
    ['FN', 'F1', 'KEYBOARD', 'BACKSLASH', '|', '/', '[', ']', 'QUOTE', 'APOSTROPHE'], \
    ['HOME', 'END', 'TAB', ':', 'UP', 'ENTER', '_', '@', '<', '>', 'PGUP'], \
    ['ESC', 'CTRL', 'ALT', 'LEFT', 'DOWN', 'RIGHT', 'BKSP', 'DEL', 'SPACE', 'INS', 'PGDN'], \
    []]

back-key=escape

===
]]]

[[[
保存旧配置@20250120
cat ~/.termux/termux.properties
===
extra-keys = [['PGUP', '<', '>', '[', ']', '{', '}', '(', ')'], \
              ['PGDN', 'FN', 'F1', '"*p','"*yy', 'i',  '@', '?', '!'], \
              ['END', ':', '/', '|', 'BACKSLASH', '-', '+', '_', '~'], \
              ['HOME', '=', '*', '#', 'QUOTE', 'APOSTROPHE', '`', '%', '$'], \
              ['ESC', 'TAB', ';', 'UP', 'ENTER', '『』', '〔〕', '〖〗', '【】'], \
              ['CTRL', 'ALT', 'LEFT', 'DOWN', 'RIGHT', 'BKSP', 'DEL', '&', '^'], \
              []]

#             ['INS', 'FN', 'F1', '"*p', 'SPACE', '"*yy', 'i', '?'], \
#, 'PGUP','PGDN',

back-key=escape
===
]]]

######################
@20250120
之前:
######################
$ vim ~/.termux/termux.properties
back-key=escape
#back-key=back

extra-keys = [ \
 ['ESC','|','/','HOME','UP','END','PGUP','DEL'], \
 ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','BKSP'] \
]

$ termux-reload-settings
$ termux-setup-storage
$ cd ~/storage/downloads

=====
enable the extra keys view
	* long tap on the keyboard button in the left drawer menu
	* Volume Up+Q
	* Volume Up+K

    Volume Up+V → Show the volume control
    Volume Up+Q → Show extra keys view
    Volume Up+K → Another variant to toggle extra keys view
extra-keys = [[ \
  {key: ESC, popup: {macro: "CTRL f d", display: "tmux exit"}}, \
  {key: CTRL, popup: {macro: "CTRL f BKSP", display: "tmux ←"}}, \
  {key: ALT, popup: {macro: "CTRL f TAB", display: "tmux →"}}, \
  {key: TAB, popup: {macro: "ALT a", display: A-a}}, \
  {key: LEFT, popup: HOME}, \
  {key: DOWN, popup: PGDN}, \
  {key: UP, popup: PGUP}, \
  {key: RIGHT, popup: END}, \
  {macro: "ALT j", display: A-j, popup: {macro: "ALT g", display: A-g}}, \
  {key: KEYBOARD, popup: {macro: "CTRL d", display: exit}} \
]]














https://wiki.termux.com/wiki/Main_Page

===========
Termux Wiki
Terminal Settings
Contentsto top
    Handling terminal sessions
    Handling the bell character
    Handling the back key
    Handling the extra keys


The Termux terminal can be configured by creating the file ~/.termux/termux.properties. This file uses a simple key=value property syntax and allows configuring the properties listed below.


After changing the properties file the changes will take effect either by executing termux-reload-settings or by restarting the Termux app (closing all sessions and starting the app again).


Handling terminal sessions

It is possible to set a shortcut key combination to handle common session actions. Opening a new session, switching between sessions and renaming a session can be adjusted as follows:

# Open a new terminal with ctrl + t (volume down + t)
shortcut.create-session = ctrl + t

# Go one session down with (for example) ctrl + 2
shortcut.next-session = ctrl + 2

# Go one session up with (for example) ctrl + 1
shortcut.previous-session = ctrl + 1

# Rename a session with (for example) ctrl + n
shortcut.rename-session = ctrl + n

Handling the bell character

The behavior of the bell character can be adjusted by setting the bell-character property. How the bell character is received can be configured in Termux with:

# Vibrate device (default).
bell-character=vibrate

# Beep with a sound.
bell-character=beep

# Ignore bell character.
bell-character=ignore

Handling the back key

Setting the back-key property behaviour when the the back key is pressed can be configured as follows:

# Send the Escape key.
back-key=escape

# Hide keyboard or leave app (default).
back-key=back

Handling the extra keys

Please take a look at Touch Keyboard.






============
User Interface
	keyboard shortcuts
	context menu
		long pressing
	navigation drawer
		swiping inwards from the left part of the screen
	notification
		pulling down the notification menu

At launch Termux shows a terminal interface, whose text size can be adjusted by pinch zooming or double tapping and pulling the content towards or from you.

Besides the terminal (with keyboard shortcuts explained below) there are three additional interface elements available: A context menu, navigation drawer and notification.

The context menu can be shown by long pressing anywhere on the terminal. It provides menu entries for:

    Selecting and pasting text.
    Sharing text from the terminal to other apps (e.g. email or SMS)
    Resetting the terminal if it gets stuck.
    Hangup (exiting the current terminal session).
    Styling the terminal by selecting a font and a color scheme.
    Showing this help page.

The navigation drawer is revealed by swiping inwards from the left part of the screen (if you have gesture navigation enabled in Android, you will need to hold briefly on the edge of the screen before swiping to bring up the navigation drawer instead of going back in Android). It has three elements:

    A list of sessions. Clicking on a session shows it in the terminal while long pressing allows you to specify a session title.
    A button to toggle visibility of the touch keyboard.
    A button to create new terminal sessions (long press for creating a named session or a fail-safe one).

The notification, available when a terminal session is running, is available by pulling down the notification menu. Pressing the notification leads to the most current terminal session. The notification may also be expanded (by pinch-zooming or performing a single-finger glide) to expose three actions:

    Exiting all running terminal sessions.
    Use a wake lock to avoid entering sleep mode.
    Use a high performance wifi lock to maximize wifi performance.

With a wake lock held the notification and Termux background processes will be available even if no terminal session is running, which allows server and other background processes to run more reliably.
Graphical interface (via external vncviewer)

Termux also has fairly basic graphical user interface support based on X11. To enable Graphical Environment support see Graphical Environment
See Also

    Touch Keyboard









============
Termux Wiki
Touch Keyboard

Use of keys like Alt, Ctrl, Esc is necessary for working with a CLI terminal. Termux touch keyboards do not include one. For that purpose, Termux uses the Volume down button to emulate the Ctrl key. For example, pressing Volume down+L on a touch keyboard sends the same input as pressing Ctrl+L on a hardware keyboard.

The result of using Ctrl in combination with a key depends on which program is used, but for many command line tools the following shortcuts works:

    Ctrl+A → Move cursor to the beginning of line
    Ctrl+C → Abort (send SIGINT to) current process
    Ctrl+D → Logout of a terminal session
    Ctrl+E → Move cursor to the end of line
    Ctrl+K → Delete from cursor to the end of line
    Ctrl+U → Delete from cursor to the beginning of line
    Ctrl+L → Clear the terminal
    Ctrl+Z → Suspend (send SIGTSTP to) current process
    Ctrl+W → Clear prompt before word (a word is a set of characters after a space)
    Ctrl+alt+C → Open new session (only works in Hacker's Keyboard)

The Volume up key also serves as a special key to produce certain input:

    Volume Up+E → Escape key
    Volume Up+T → Tab key
    Volume Up+1 → F1 (and Volume Up+2 → F2, etc)
    Volume Up+0 → F10
    Volume Up+B → Alt+B, back a word when using readline
    Volume Up+F → Alt+F, forward a word when using readline
    Volume Up+X → Alt+X
    Volume Up+W → Up arrow key
    Volume Up+A → Left arrow key
    Volume Up+S → Down arrow key
    Volume Up+D → Right arrow key
    Volume Up+L → | (the pipe character)
    Volume Up+H → ~ (the tilde character)
    Volume Up+U → _ (underscore)
    Volume Up+P → Page Up
    Volume Up+N → Page Down
    Volume Up+. → Ctrl+\ (SIGQUIT)
    Volume Up+V → Show the volume control
    Volume Up+Q → Show extra keys view
    Volume Up+K → Another variant to toggle extra keys view

Extra Keys Row(s)

Termux also has an extra keys view which allows you to extend your current keyboard. To enable the extra keys view you have to long tap on the keyboard button in the left drawer menu. You can also press Volume Up+Q or Volume Up+K.

After Termux v0.66 extra keys row became configurable through file "~/.termux/termux.properties". If this file does not exist, you will need to create it.

After editing Termux.properties file, you need to reload Termux configuration by executing command "termux-reload-settings".

Example configuration to enable 2-row (was in v0.65) extra keys:

extra-keys = [['ESC','/','-','HOME','UP','END','PGUP'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]

The extra-keys definition itself can also be spread over multiple lines, if desired, by "backslash-escaping" the line feed at the end of each line, thus:

extra-keys = [ \
 ['ESC','|','/','HOME','UP','END','PGUP','DEL'], \
 ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','BKSP'] \
]

Extra keys view.png
Supported keys

Each key "entry" can be either a string (such as '|', '/' or '=') or one of the values listed below. These values are defined in ExtraKeysView.java, and the list of values (not including possible synonyms) is:

    CTRL ("special key")
    ALT ("special key")
    FN ("special key")
    SPACE
    ESC
    TAB
    HOME
    END
    PGUP
    PGDN
    INS
    DEL
    BKSP
    UP
    LEFT
    RIGHT
    DOWN
    ENTER
    BACKSLASH
    QUOTE
    APOSTROPHE
    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12
    KEYBOARD (Hide the keyboard)
    DRAWER (Open app drawer)

Each of the three "special keys" listed above should only be listed at most ONCE in the extra-keys definition i.e. do NOT have more than one CTRL key. Having more than one instance of any "special key" will result in a bug whereby those keys do not function correctly.

A note about backslash: this character has special meaning and you shouldn't use it directly to define a key. Use 'BACKSLASH' instead, otherwise properly escape it - '\\\\'.
Advanced extra keys configuration

In Termux v0.95 extra keys configuration was extended with configurable popups. Popups keys can be triggered by swiping up on the respective keys.

Here is a syntax for key definition with popup:

{key: KEY, popup: POPUP_KEY}

and here is a syntax for a more advanced key:

{key: KEY, popup: {macro: 'KEY COMBINATION', display: 'Key combo'}}

Example of advanced extra keys configuration:

extra-keys = [[ \
  {key: ESC, popup: {macro: "CTRL f d", display: "tmux exit"}}, \
  {key: CTRL, popup: {macro: "CTRL f BKSP", display: "tmux ←"}}, \
  {key: ALT, popup: {macro: "CTRL f TAB", display: "tmux →"}}, \
  {key: TAB, popup: {macro: "ALT a", display: A-a}}, \
  {key: LEFT, popup: HOME}, \
  {key: DOWN, popup: PGDN}, \
  {key: UP, popup: PGUP}, \
  {key: RIGHT, popup: END}, \
  {macro: "ALT j", display: A-j, popup: {macro: "ALT g", display: A-g}}, \
  {key: KEYBOARD, popup: {macro: "CTRL d", display: exit}} \
]]

Text Input View

Terminal emulators usually do not support the advanced features of touch keyboards like autocorrect, prediction and swipe typing. To solve this, Termux has a text input view. Text entered in it will get pasted to the terminal. Because it's a native Android text input view, all touch keyboard features will work. To access the text input view you have to swipe the extra keys view to the left.

Text input view.png
See Also

    Hardware Keyboard
    Hardware Mouse
    Screen Gestures




==========
how to config termux
	https://parzibyte.me/blog/en/2019/04/15/configure-termux-android-linux/
* pkg install coreutils
* exit
* Help keys on Termux
	Vol Up + Q
	for:
		CTRL key
		TAB key
		navigation arrows
* open more sessions or terminals
	simply slide your finger from the left edge to the right (like when you open the navigation drawer) and you can create the ones you want in the new session button.
* Storage permission
	Since Termux is an application like the others, we need to give you permissions so that you can modify the storage of the device.

	For this we execute:
		termux-setup-storage

	This will make us ask for permits, and we will obviously give them. Now we can access our documents from ~/storage.

	That is, it will be as if our documents were mounted and accessed from ~/storage. For example, to go to the downloads we execute:
		cd ~/storage/downloads




