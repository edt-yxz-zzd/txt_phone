
e others/app/termux/apt_pkg_dpkg__usage.txt

dpkg -S <path>
  找出该文件属于那个已安装模块！
dpkg -L <package>
  列出已安装模块的所有文件

dpkg -I <path/to/*.deb>
  显示模块安装包的信息#简介，依赖，...
dpkg-deb -c <path/to/*.deb>
  显示模块安装包的将要安装的文件
dpkg-deb --extract <path/to/*.deb>
  解包模块安装包的将要安装的文件


vim /data/data/com.termux/files/usr/etc/apt/sources.list
[[
#deb https://free.nchc.org.tw/osdn//storage/g/t/te/termux-old/termux-packages stable main
deb file:///mnt/m_external_sd/000edt/0my_files/apk/deb_pkgs4termux/free.nchc.org.tw/osdn/storage/g/t/te/termux-old/termux-packages/ stable main
]]
apt update
  通过配置文件刷新下载信息
    #如此，配置文件才能起作用？
apt install <package>
apt install -f <path/to/*.deb>
apt list | grep 'termux.*upgradable'
  列出可更新的已安装模块
apt upgrade <package>
  更新模块



[[
dpkg -S <path>
  找出该文件属于那个模块！
dpkg -L <package>
  列出模块的所有文件

https://ubuntu.com/server/docs/package-management
dpkg

dpkg is a package manager for Debian-based systems. It can install, remove, and build packages, but unlike other package management systems, it cannot automatically download and install packages or their dependencies. Apt and Aptitude are newer, and layer additional features on top of dpkg. This section covers using dpkg to manage locally installed packages:

    To list all packages in the system’s package database, including all packages, installed and uninstalled, from a terminal prompt type:

    dpkg -l

    Depending on the number of packages on your system, this can generate a large amount of output. Pipe the output through grep to see if a specific package is installed:

    dpkg -l | grep apache2

    Replace apache2 with any package name, part of a package name, or a regular expression.

    To list the files installed by a package, in this case the ufw package, enter:

    dpkg -L ufw

    If you are not sure which package installed a file, dpkg -S may be able to tell you. For example:

    dpkg -S /etc/host.conf 
    base-files: /etc/host.conf

    The output shows that the /etc/host.conf belongs to the base-files package.

        Note

        Many files are automatically generated during the package install process, and even though they are on the filesystem, dpkg -S may not know which package they belong to.

    You can install a local .deb file by entering:

    sudo dpkg -i zip_3.0-4_amd64.deb

    Change zip_3.0-4_amd64.deb to the actual file name of the local .deb file you wish to install.

    Uninstalling a package can be accomplished by:

    sudo dpkg -r zip

        Caution

        Uninstalling packages using dpkg, in most cases, is NOT recommended. It is better to use a package manager that handles dependencies to ensure that the system is in a consistent state. For example, using dpkg -r zip will remove the zip package, but any packages that depend on it will still be installed and may no longer function correctly.

For more dpkg options see the man page: man dpkg.
]]
