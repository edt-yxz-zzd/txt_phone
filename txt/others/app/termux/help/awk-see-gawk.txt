e others/app/termux/help/awk-see-gawk.txt

man gawk

$ man__save_to_file gawk
view others/app/termux/help/gawk.man.txt
$ help__save_to_file gawk
view others/app/termux/help/gawk.help.txt


[[
echo $'aaa\n777\n...' | gawk '{ print NR, $0 }'
<==>
echo $'aaa\n777\n...' | gawk '{ print FNR, $0 }'
1 aaa
2 777
3 ...

echo $'aaa\n777\n...' | gawk 'BEGIN { OFS = ":" } { print FNR, $0 }'
1:aaa
2:777
3:...

echo $'aaa\n777\n...' | gawk 'BEGIN { OFS = ":" }    { print FNR, $0 }  END { print "total", NR }'
<==>
echo $'aaa\n777\n...' | gawk '{ printf "%d:%s\n", FNR, $0 }  END { printf "total:%s\n", NR }'
1:aaa
2:777
3:...
total:3

echo $'aaa(0A)zzz\n()777\n...(FFE)' | gawk 'BEGIN { FS = "[()]" ; OFS = ":" }    { print FNR, $2 }'
1:0A
2:
3:FFE

$0 - the whole current line
$1 - the 1st field of current line

#sub
echo $'aaa bbb ccc bbb \nbb a bb' | gawk $'{ sub("bb", "qq") ; print $0 }'
aaa qqb ccc bbb
qq a bb

#gsub
echo $'aaa bbb ccc bbb \nbb a bb' | gawk $'{ gsub("bb", "qq") ; print $0 }'
aaa qqb ccc qqb
qq a qq

]]


[[
view others/app/termux/help/awk-see-gawk.txt
  正则表达式:同egrep:ERE:
    view others/app/termux/help/grep.man.BREvsERE.txt
      ERE没有 前瞻锚『(?=...)』『(...)\@=』，下面的RS找不到恰当的正则表达式来表达，毛病最小的是『RS="(^|\n),"』
===
#bug: $0 含\n
echo $',aaa\n:000\n,bbb\n:111\n,ccc\n:222\n' | gawk 'BEGIN { RS = "\n," } { print FNR, $0 }'
1 ,aaa
:000
2 bbb
:111
3 ccc
:222

===
#bug:逗号:只有首行保留
echo $',aaa\n:000\n,bbb\n:111\n,ccc\n:222\n' | gawk 'BEGIN { RS = "\n," } { print FNR, $1, $2 }'
1 ,aaa :000
2 bbb :111
3 ccc :222

===
#bug: 首record/逻辑行 空；缺失后两逻辑行:bbb ccc
echo $',aaa\n:000\n,bbb\n:111\n,ccc\n:222\n' | gawk 'BEGIN { RS = "^," } { print FNR, $1, $2 }'
1
2 aaa :000

===
#bug: 首record/逻辑行 空
#   但已是 毛病最小
echo $',aaa\n:000\n,bbb\n:111\n,ccc\n:222\n' | gawk 'BEGIN { RS = "(^|\n)," } { print FNR, $1, $2 }'
1
2 aaa :000
3 bbb :111
4 ccc :222


echo $',aaa\n:000\n,bbb\n:111\n,ccc\n:222\n' | gawk 'BEGIN { RS = "(^|\n)," ; FS = "\n:" } { print FNR, $1, $2 }'
1
2 aaa 000
3 bbb 111
4 ccc 222

===
]]
[[
filter,select:

echo $',aaa\n:000\n,bbb\n:111\n,ccc\n:222\n' | gawk -- 'BEGIN { RS = "(^|\n)," ; FS = "\n:" } ($1 ~ /[ac]/) { print FNR, $1, $2 }'
2 aaa 000
4 ccc 222

]]
[[
file:
gawk -- '{<模式辻动作...>}' <文件名>
示例:
gawk -- 'BEGIN { RS = "(^|\n)," ; FS = "\n:" } ($2 ~ /正月初一/)  { print $1 }'  /sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-初步清理.txt  | more
gawk -- 'BEGIN { RS = "(^|\n)," ; FS = "\n:" } ($2 ~ /二月初?二|三月初?三|四月初?四|五月初?五|六月初?六|七月初?七|八月初?八|九月初?九|十月初?十/)  { print $1 }'  /sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-初步清理.txt  | more

#注意:字符串 串联: 空格
gawk -- 'BEGIN { RS = "(^|\n)," ; FS = "\n:" } ($1 ~ /^(春節|春元|打灰堆)$/)  { print ("," $0) }'  /sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-初步清理.txt  | more
]]







input :: [record]
  sepBy RS # default:=NEWLINE
record :: [field]
  sepBy FS # default:=SPACE
    or: FIELDWIDTHS,FPAT
  $0
field
  $1 $2 ...

[[
view others/app/termux/help/gawk.man.txt
   I/O Statements
       print                Print the current record.  The output record is
                            terminated with the value of ORS.

       print expr-list      Print expressions.  Each expression is separated
                            by the value of OFS.  The output record is
                            terminated with the value of ORS.

       print expr-list >file
                            Print expressions on file.  Each expression is
                            separated by the value of OFS.  The output record
                            is terminated with the value of ORS.

       printf fmt, expr-list
                            Format and print.

       printf fmt, expr-list >file
                            Format and print on file.

       system(cmd-line)     Execute the command cmd-line, and return the exit
                            status.  (This may not be available on non-POSIX
                            systems.)  See
                            https://www.gnu.org/software/gawk/manual/html_node/I_002fO-Functions.html#I_002fO-Functions
                            for the full details on the exit status.

       Additional output redirections are allowed for print and printf.

       print ... >> file
              Append output to the file.

       print ... | command
              Write on a pipe.

       print ... |& command
              Send data to a coprocess or socket.  (See also the subsection
              Special File Names, below.)


]]

[[
view others/app/termux/help/gawk.man.txt
   Built-in Variables

       RS         The input record separator, by default a newline.

       RT         The record terminator.  Gawk sets RT to the input text that
                  matched the character or regular expression specified by RS.

       RSTART     The index of the first character matched by match(); 0 if no
                  match.

       RLENGTH    The length of the string matched by match(); -1 if no match.

       FIELDWIDTHS
                  A whitespace-separated list of field widths.  When set, gawk
                  parses the input into fields of fixed width, instead of
                  using the value of the FS variable as the field separator.
                  Each field width may optionally be preceded by a colon-
                  separated value specifying the number of characters to skip
                  before the field starts.




       FILENAME   The name of the current input file.  If no files are
                  specified on the command line, the value of FILENAME is "-".
                  However, FILENAME is undefined inside the BEGIN rule (unless
                  set by getline).

       FNR        The input record number in the current input file.

       FPAT       A regular expression describing the contents of the fields
                  in a record.  When set, gawk parses the input into fields,
                  where the fields match the regular expression, instead of
                  using the value of FS as the field separator.

       FS         The input field separator, a space by default.  See
                  https://www.gnu.org/software/gawk/manual/html_node/Field-Separators.html
                  for the details.

       FUNCTAB    An array whose indices and corresponding values are the
                  names of all the user-defined or extension functions in the
                  program.  NOTE: You may not use the delete statement with
                  the FUNCTAB array.

       IGNORECASE Controls the case-sensitivity of all regular expression and
                  string operations.  See
                  https://www.gnu.org/software/gawk/manual/html_node/Case_002dsensitivity.html
                  for details.

       LINT       Provides dynamic control of the --lint option from within an
                  AWK program.

       NF         The number of fields in the current input record.

       NR         The total number of input records seen so far.

       OFMT       The output format for numbers, "%.6g", by default.

       OFS        The output field separator, a space by default.

       ORS        The output record separator, by default a newline.


]]

[[
！字符串 址引 从一开始 而非 从零开始！
sub(r, s [, t]), gsub(r, s [, t])
match(s, r [, a]) # (s~r) # RSTART RLENGTH
index(s, t), length([s])

===
       sub(r, s [, t])        Just like gsub(), but replace only the first
                              matching substring.  Return either zero or one.

       gsub(r, s [, t])       For each substring matching the regular
                              expression r in the string t, substitute the
                              string s, and return the number of
                              substitutions.  If t is not supplied, use $0.
                              An & in the replacement text is replaced with
                              the text that was actually matched.  Use \& to
                              get a literal &.  (This must be typed as "\\&";
                              see
                              https://www.gnu.org/software/gawk/manual/html_node/Gory-Details.html#Gory-Details
                              for a fuller discussion of the rules for
                              ampersands and backslashes in the replacement
                              text of sub(), gsub(), and gensub().)


===
       match(s, r [, a])      Return the position in s where the regular
                              expression r occurs, or zero if r is not
                              present, and set the values of RSTART and
                              RLENGTH.  Note that the argument order is the
                              same as for the ~ operator: str ~ re.  See
                              https://www.gnu.org/software/gawk/manual/html_node/String-Functions.html#String-Functions
                              for a description of how the array a is filled
                              if it is provided.

===
       index(s, t)            Return the index of the string t in the string
                              s, or zero if t is not present.  (This implies
                              that character indices start at one.)

       length([s])            Return the length of the string s, or the length
                              of $0 if s is not supplied.  With an array
                              argument, length() returns the number of
                              elements in the array.


]]

