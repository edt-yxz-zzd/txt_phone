[[github? 搞定上传？
单击 右上角 个人头像 -> 单击 下拉 菜单 底部 『Settings』 -> 单击 左侧栏 底部 『Developer settings』 -> 单击 『Personal access tokens』 -> 单击 右上角 『Generate new token』 -> 填写表格:
  Note:
    8pwd1
  Expiration:
    Custom... 2023/04/16
      #最长只能一年！
  Select scopes:
    打勾 write:packages - Upload packages to GitHub Package Registry
  -> 填完，单击 表格下方按钮 『Generate token』
  -> 单击 刚生成的密钥 右边的文本复制按钮，手动 将 密钥 粘贴保存到文件中。
    # 密钥 以『ghp_』开头，负载36个字符，总长40字符。
    此后，命令行操作中，用 密钥 替代 口令。
    成功上传！

[[
https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token

Creating a personal access token
In this article

    Creating a token

    Using a token on the command line

    Further reading

You should create a personal access token to use in place of a password with the command line or with the API.

Note: If you use GitHub CLI to authenticate to GitHub on the command line, you can skip generating a personal access token and authenticate via the web browser instead. For more information about authenticating with GitHub CLI, see gh auth login.
    https://cli.github.com/manual/gh_auth_login

Personal access tokens (PATs) are an alternative to using passwords for authentication to GitHub when using the GitHub API or the command line.

If you want to use a PAT to access resources owned by an organization that uses SAML SSO, you must authorize the PAT. For more information, see "About authentication with SAML single sign-on" and "Authorizing a personal access token for use with SAML single sign-on" in the GitHub Enterprise Cloud documentation.

As a security precaution, GitHub automatically removes personal access tokens that haven't been used in a year. To provide additional security, we highly recommend adding an expiration to your personal access tokens.

A token with no assigned scopes can only access public information. To use your token to access repositories from the command line, select repo. For more information, see "Available scopes".
Creating a token

    Verify your email address, if it hasn't been verified yet.

    In the upper-right corner of any page, click your profile photo, then click Settings.

    Settings icon in the user bar

    In the left sidebar, click 

    Developer settings.

    In the left sidebar, click Personal access tokens. Personal access tokens

    Click Generate new token. Generate new token button

    Give your token a descriptive name. Token description field

    To give your token an expiration, select the Expiration drop-down menu, then click a default or use the calendar picker. Token expiration field

    Select the scopes, or permissions, you'd like to grant this token. To use your token to access repositories from the command line, select repo.

    Selecting token scopes

    Click Generate token. Generate token button

    Newly created token

    Warning: Treat your tokens like passwords and keep them secret. When working with the API, use tokens as environment variables instead of hardcoding them into your programs.

    To use your token to authenticate to an organization that uses SAML single sign-on, authorize the token. For more information, see "Authorizing a personal access token for use with SAML single sign-on" in the GitHub Enterprise Cloud documentation.

Using a token on the command line

Once you have a token, you can enter it instead of your password when performing Git operations over HTTPS.

For example, on the command line you would enter the following:

$ git clone https://github.com/username/repo.git
Username: your_username
Password: your_token

Personal access tokens can only be used for HTTPS Git operations. If your repository uses an SSH remote URL, you will need to switch the remote from SSH to HTTPS.

If you are not prompted for your username and password, your credentials may be cached on your computer. You can update your credentials in the Keychain to replace your old password with the token.

Instead of manually entering your PAT for every HTTPS Git operation, you can cache your PAT with a Git client. Git will temporarily store your credentials in memory until an expiry interval has passed. You can also store the token in a plain text file that Git can read before every request. For more information, see "Caching your GitHub credentials in Git."
Further reading

    "About authentication to GitHub"
    "Token expiration and revocation"

Did this doc help you?
Privacy policy

]]
[[
https://cli.github.com/manual/gh_auth_login


gh auth login

gh auth login [flags]

Authenticate with a GitHub host.

The default authentication mode is a web-based browser flow. After completion, an authentication token will be stored internally.

Alternatively, use --with-token to pass in a token on standard input. The minimum required scopes for the token are: "repo", "read:org".

Alternatively, gh will use the authentication token found in environment variables. This method is most suitable for "headless" use of gh such as in automation. See gh help environment for more info.

To use gh in GitHub Actions, add GH_TOKEN: $ to "env".
Options

-p, --git-protocol <string>
    The protocol to use for git operations: {ssh|https}
-h, --hostname <string>
    The hostname of the GitHub instance to authenticate with
-s, --scopes <strings>
    Additional authentication scopes to request
-w, --web
    Open a browser to authenticate
--with-token
    Read token from standard input

Examples

# start interactive setup
$ gh auth login

# authenticate against github.com by reading the token from a file
$ gh auth login --with-token < mytoken.txt

# authenticate with a specific GitHub instance
$ gh auth login --hostname enterprise.internal

See also

    gh auth
]]
[[
https://blog.csdn.net/chengwenyang/article/details/120060010
github的token使用方法 原创
2021-09-02 15:19:55 3点赞

    chengwenyang

    码龄13年
关注

github的token使用方法

今天从本地向github push代码发，失败了。错误消息如下：

    remote: Support for password authentication was remove on August 123, 2021. Please use a personal access token instead.

在这里插入图片描述

原因是github不再使用密码方式验证身份，现在使用个人token。

本文记录，

    如何生成token
    在命令行下怎样使用token

github如何生成token

github的官方有给出如何生成个人token的文档。参考github官网生成token文档
  https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token

这里给出简要的步骤：

    进入个人github账户setting
    在这里插入图片描述

    点击Developer settings
    在这里插入图片描述

    选择Personal access tokens
    在这里插入图片描述

    点击 Generate new token
    在这里插入图片描述

    为你创建的token添加描述
    在这里插入图片描述

    选择token有效期时间。可以选择永不过期
    在这里插入图片描述

    为token赋予权限。如果从命令行操作仓库，至少选中repo
    在这里插入图片描述

    点击生成。生成之后先复制下来，后面会用到。注意：离开这个页面，之后你将看不见这个token的明文了。
    在这里插入图片描述
    在这里插入图片描述

命令行如何使用token

之前，github使用用户名和密码作为身份验证，现在使用用户名和token作为验证。

比如，github官网给出的示例。克隆一个仓库，提示输入用户名和密码，此处就可以使用上面生成的token作为密码使用。

但是有一个问题，我们总不能记住那么长的一串token吧

为了解决这个问题，github提供了gh工具，通过gh登录验证身份后，之后再不需要验证身份。

此处只演示ubuntu安装gh工具。

然后使用gh进行认证

如下图所示：使用键盘上下键选择对应项，回车键确认。
依次选择Github.com, HTTPS（如果使用的https协议）
在这里插入图片描述
根据自己使用的协议选择HTTPS或者SSH
在这里插入图片描述
输入Y或者y
在这里插入图片描述
选择使用网页浏览器认证或者粘贴token认证，二者选择一个即可。如果是ssh远程登录，命令行中无法打开远程的浏览器，那么只能选择token验证了。
在这里插入图片描述

选择使用网页认证：先复制命令行中生成的一次性验证码，比如我这里本次是5C38-D954。然后回车，自动打开网页浏览器，输入一次性验证码，授权即可完成认证。

在这里插入图片描述
如果上面选择使用token认证，那么输入你的token即可。
在这里插入图片描述

如果换了一台机器，那么重新生成一个新的token，然后gh auth login即可。
]]
]]
