
e others/app/termux/shell_conditional-file-exist.txt
view others/app/termux/help/bash.man.txt

if [[ -a path_exist ]] ; then pwd ; fi
  /xxx/yyy

if [[ -a path_nonexist ]] ; then pwd ; fi
  <NONE>

#ok=0;bad=1
[[ -a path_exist ]] ; echo $?
0

[[ -a path_nonexist ]] ; echo $?
1



inside [[  ]]
   Unless otherwise specified, primaries that operate on files follow symbolic links and operate on the target of the link, rather than the
   link itself.

   When used with [[, the < and > operators sort lexicographically using the current locale.  The test command sorts using ASCII ordering.

   -a file
          True if file exists.
   -b file
          True if file exists and is a block special file.
   -c file
          True if file exists and is a character special file.
   -d file
          True if file exists and is a directory.
   -e file
          True if file exists.
   -f file
          True if file exists and is a regular file.
   -g file
          True if file exists and is set-group-id.
   -h file
          True if file exists and is a symbolic link.
   -k file
          True if file exists and its ``sticky'' bit is set.
   -p file
          True if file exists and is a named pipe (FIFO).
   -r file
          True if file exists and is readable.
   -s file
          True if file exists and has a size greater than zero.
   -t fd  True if file descriptor fd is open and refers to a terminal.
   -u file
          True if file exists and its set-user-id bit is set.
   -w file
          True if file exists and is writable.
   -x file
          True if file exists and is executable.
   -G file
          True if file exists and is owned by the effective group id.
   -L file
          True if file exists and is a symbolic link.
   -N file
          True if file exists and has been modified since it was last
          read.
   -O file
          True if file exists and is owned by the effective user id.
   -S file
          True if file exists and is a socket.
   file1 -ef file2
          True if file1 and file2 refer to the same device and inode
          numbers.
   file1 -nt file2
          True if file1 is newer (according to modification date) than
          file2, or if file1 exists and file2 does not.
   file1 -ot file2
          True if file1 is older than file2, or if file2 exists and file1
          does not.

