
e others/app/termux/web_server.txt
e others/app/无法访问本地路径.txt
# [:using____httpd_conf__sdcard__0my_files]:goto
# [:using____httpd_conf__py_doc_html]:goto

源起:Android浏览器 打开 本地网页 时，网页被复制到某个临时文件，脱离了目录结构，.js/.css/.png/.html/...,等文件无法正常使用
解决方案:使用控制台浏览器
  view others/app/termux/browser.txt
    pkg install lynx
解决方案:运行本地网页服务器
  pkg install apache2
    apache2::httpd

TODO:
  考虑新服务器:以替代:apache2
    nginx
    lighttpd


TODO:
  https://www.thegeeksearch.com/beginners-guide-to-apache-httpd/
    缺少了几张图片！
TODO:
  How to Deploy a Static Website with Termux: A Comprehensive Guide


[[[
httpd用例1:
===
0.镜像下载冫网站一隅之地:
cd /sdcard/0my_files/tmp/wget_/
wget_web_under__nolimit  https://www.w3.org/Daemon/User/Config/Examples.html
===
1.修改冫配置文件纟服务器:
cp -iv others/app/termux/help/httpd.conf-default /sdcard/0my_files/tmp/wget_/httpd-conf4w3_org
e /sdcard/0my_files/tmp/wget_/httpd-conf4w3_org
diff others/app/termux/help/httpd.conf-default /sdcard/0my_files/tmp/wget_/httpd-conf4w3_org
245,246c245,249
< DocumentRoot "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs"
< <Directory "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs">
---
> ServerName www.w3.org:8080
> DocumentRoot "/sdcard/0my_files/tmp/wget_/www.w3.org/"
> <Directory "/sdcard/0my_files/tmp/wget_/www.w3.org/">
> #DocumentRoot "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs"
> #<Directory "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs">
===
2.运行冫服务器:
httpd -f /sdcard/0my_files/tmp/wget_/httpd-conf4w3_org
===
3.浏览冫网页:
lynx http://127.0.0.1:8080/Daemon/User/Config/Examples.html
  ls /sdcard/0my_files/tmp/wget_/www.w3.org/
  /sdcard/0my_files/tmp/wget_/www.w3.org/Daemon/User/Config/Examples.html
===
4.关闭冫服务器
apachectl stop
 <==> httpd -k stop
===
]]]
[[[
httpd用例2:
===
0.镜像下载冫网站一隅之地:
cd /sdcard/0my_files/tmp/wget_/w3schools/html/TAGs/
wget_web_under__nolimit  https://www.w3schools.com/TAGs/
===
1.修改冫配置文件纟服务器:
cp -iv others/app/termux/help/httpd.conf-default /sdcard/0my_files/tmp/wget_/httpd-conf4wget_
e /sdcard/0my_files/tmp/wget_/httpd-conf4wget_
diff others/app/termux/help/httpd.conf-default /sdcard/0my_files/tmp/wget_/httpd-conf4wget_
< DocumentRoot "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs"
< <Directory "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs">
---
> ServerName w3_localhost:8080
> DocumentRoot "/sdcard/0my_files/tmp/wget_/"
> <Directory "/sdcard/0my_files/tmp/wget_/">
===
2.运行冫服务器:
httpd -f /sdcard/0my_files/tmp/wget_/httpd-conf4wget_
===
3.浏览冫网页:
lynx http://127.0.0.1:8080/w3schools/html/TAGs/www.w3schools.com/TAGs/index.html
  /sdcard/0my_files/tmp/wget_/w3schools/html/TAGs/www.w3schools.com/TAGs/index.html
===
4.关闭冫服务器
httpd -k stop -f /sdcard/0my_files/tmp/wget_/httpd-conf4wget_
apachectl stop
 <==> httpd -k stop
===
===
5.提取冫网页有效信息
e script/clean_w3schools_html_TAGs.py
===
6.浏览冫网页:
httpd -f /sdcard/0my_files/tmp/wget_/httpd-conf4wget_
lynx http://127.0.0.1:8080/www.w3schools.com/TAGs/index.html
  /sdcard/0my_files/tmp/wget_/www.w3schools.com/TAGs/index.html
httpd -k stop -f /sdcard/0my_files/tmp/wget_/httpd-conf4wget_
===
]]]
[[[
httpd用例3:
===
# [:using____httpd_conf__sdcard__0my_files]:here
[[
httpd -f /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd.conf-sdcard_0my_files

  http://127.0.0.1:8080/git_repos/txt_phone/lots/NOTE/html//tag/table-colgroup.html
  http://127.0.0.1:8080/tmp/wget_/www.w3.org/Daemon/User/Config/Examples.html
  http://127.0.0.1:8080/tmp/wget_/www.w3schools.com/TAGs/index.html

httpd -k stop -f /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd.conf-sdcard_0my_files
]]
[[
##cp -iv ~/../usr/etc/apache2/httpd.conf others/app/termux/help/httpd.conf-default
!cp -iv others/app/termux/help/httpd.conf-default ../lots/NOTE/html/httpd.conf-sdcard_0my_files
e ../lots/NOTE/html/httpd.conf-sdcard_0my_files
view /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd.conf-sdcard_0my_files


diff others/app/termux/help/httpd.conf-default /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd.conf-sdcard_0my_files
===
180a181,189
> LoadModule rewrite_module libexec/apache2/mod_rewrite.so
> <IfModule mod_rewrite>
> Pass  /-wget_/*  /sdcard/0my_files/tmp/wget_/*
>   #==>>mod_rewrite not loaded!!
> </IfModule>
> #Pass    /*  /local/Web/*
> #Pass  /-wget_/*  /sdcard/0my_files/tmp/wget_/*
>   #Invalid command 'Pass', perhaps misspelled or defined by a module not included in the server configuration
>
245,246c254,272
< DocumentRoot "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs"
< <Directory "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs">
---
> ServerName w3.localhost-sdcard/0my_files:8080
> #DocumentRoot "/sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/"
> DocumentRoot "/sdcard/0my_files/"
> #AliasMatch "^/-wget_-" "/sdcard/0my_files/tmp/wget_"
> #<Directory "/sdcard/0my_files/tmp/wget_">
> #<Directory "/sdcard/0my_files/tmp/wget_">
> #    RewriteEngine On
> #    RewriteBase "/-wget_/"
> #    #RewriteRule "^index\.html$"  "www.w3schools.com/TAGs/index.html"
> #    RewriteRule "^index-tags[.]html$"  "www.w3schools.com/TAGs/index.html"
> #    #RewriteRule "^index\.html$"  "www.w3.org/Daemon/User/Config/Examples.html"
> #    Options Indexes FollowSymLinks
> #    AllowOverride None
> #    Require all granted
> #</Directory>
> #<Directory "/sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/">
> <Directory "/sdcard/0my_files/">
> #DocumentRoot "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs"
> #<Directory "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs">
===
]]

]]]
[[[
httpd用例4:
===
# [:using____httpd_conf__py_doc_html]:here
[[
httpd -f /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files-unzip-py_doc-python_3_12_4_docs_html
lynx http://127.0.0.1:3124/index.html
  py3.12.4
lynx http://127.0.0.1:3081/index.html
  py3.8.1
httpd -k stop -f /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files-unzip-py_doc-python_3_12_4_docs_html
]]
[[
view /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files-unzip-py_doc-python_3_12_4_docs_html
diff /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd.conf-sdcard_0my_files /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files-unzip-py_doc-python_3_12_4_docs_html

main changed:
===
Listen 3124
Listen 3081
#global ServerName
ServerName localhost
<VirtualHost *:3081>
    ServerName localhost-python-3.8.1-docs:3081
    DocumentRoot "/sdcard/0my_files/unzip/py_doc/python-3.8.1-docs-html/"
</VirtualHost>
<Directory "/sdcard/0my_files/unzip/py_doc/python-3.8.1-docs-html/">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>
<VirtualHost *:3124>
  ServerName localhost-python-3.12.4-docs:3124
  DocumentRoot "/sdcard/0my_files/unzip/py_doc/python-3.12.4-docs-html/"
</VirtualHost>
<Directory "/sdcard/0my_files/unzip/py_doc/python-3.12.4-docs-html/">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>

===
]]

[[
view /sdcard/0my_files/unzip/py_doc/python-3.8.1-docs-html/index.html
view /sdcard/0my_files/unzip/py_doc/python-3.12.4-docs-html/index.html
view others/app/termux/web_server.txt
httpd -f /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd.conf-sdcard_0my_files
view ../lots/NOTE/html/httpd.conf-sdcard_0my_files
cp -iv /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd.conf-sdcard_0my_files /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files
cp -iv /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd.conf-sdcard_0my_files /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files-unzip-py_doc-python_3_12_4_docs_html
e /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files-unzip-py_doc-python_3_12_4_docs_html
httpd -f /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files-unzip-py_doc-python_3_12_4_docs_html
lynx http://127.0.0.1:3124/index.html
lynx http://127.0.0.1:3081/index.html
    ???how dns:=> lynx http://localhost-python-3.12.4-docs:3124/index.html
        ~/../usr/etc/hosts is ineffective
httpd -k stop -f /sdcard/0my_files/git_repos/txt_phone/lots/NOTE/html/httpd-confs/httpd.conf-sdcard_0my_files-unzip-py_doc-python_3_12_4_docs_html
]]
]]]


[[[[[[[
[[[
httpd
pkg install apache2
man apachectl
man httpd
===
$ httpd
The program httpd is not installed. Install it by executing:
 pkg install apache2
===

pkg show apache php
  No:apache
pkg install apache2
  5MB-->33MB
###pkg install php
  9MB-->???

man apachectl
man httpd
pkg help
pkg list-install

httpd -h  2>others/app/termux/help/httpd.help.txt
view others/app/termux/help/httpd.help.txt
]]]
[[[
===
]]]
[[[
https://www.w3.org/Daemon/User/Config/Examples.html
===
cd /sdcard/0my_files/tmp/wget_/
wget_web_under__nolimit  https://www.w3.org/Daemon/User/Config/Examples.html
... ...
... ...
Converting links in www.w3.org/Daemon/User/Config/Authentication.html... 12.
9-3
Converting links in www.w3.org/Daemon/User/Config/Directories.html... 35.
32-3
Converted links in 18 files in 17 seconds.
]]]
[[[
https://www.thegeekdiary.com/httpd-command-examples-in-linux/
httpd Command Examples in Linux
===
The Geek Diary
httpd Command Examples in Linux
by admin


HTTPD refers to the Apache2 web server, and is commonly used on Linux systems. Web servers commonly use the HTTP Protocol to transfer web pages. Apart from HTTP, protocols such as HTTPS and FTP are also supported. To install httpd in a CentOS/RHEL server:

# yum install httpd -y
Now let’s start it, since this is CentOS/RHEL distribution, use the below systemctl command:

# systemctl enable --now httpd
Now you can navigate to the browser and go to address “http://127.0.0.1:8080” to open the basic welcome page of apache.


httpd Command Examples
1. To set the initial value for the server root:

# httpd -d /var/tmp/
2. To set the config file:

# httpd -c /etc/myconfig.conf
3. To start/restart/stop the apache web service:

# httpd start
# httpd stop
# httpd restart
# httpd graceful
# httpd graceful-stop
4. To process the config directive before reading config file:

# httpd -C
5. To process the config directive before reading config file:

# httpd -c
6. To set a configuration parameter:

# httpd -D
7. To set the log level for the http daemon:

# httpd -e
8. To sent error message during server startup to file:

# httpd -E /tmp/error.log
9. To set the directory for shared object files:

# httpd -R /dri/path
10. To get the help for httpd:

# httpd -h
11. To see the list of modules compiled into the server:

# httpd -l
12. To see the list of directives:

# httpd -L
13. To see the list of static and loaded modules:

# httpd -M
14. To see the settings parsed from the configuration file:

# httpd -S
15. To run syntax test for config files only:

# httpd -t
16. To print the version of httpd:

# httpd -v
17. To print the version and build parameters of httpd:

# httpd -V
18. To run the httpd in debu mode:

# httpd -X
19. To install apache as Windows NT sevice:

# httpd -k install
# httpd -k config
# httpd -k uninstall
20. The name of the Apache service to signal:

# httpd -n name
21. To keep the console window open on error so that the error message can be read:

# httpd -w

Filed Under: Linux

© 2024 · The Geek Diary
Archives Contact Us Copyright
]]]



[[[
https://collab.its.virginia.edu/wiki/toolbox/Example%20Httpd.conf%20File.html
===
Example Httpd.conf File
THL Toolbox > Offline THL > Running THL From Your Local Server > Example of httpd.conf file
Example httpd.conf File for setting up THL Locally
This is an example of what the httpd.conf file should look like when running an Apache server locally through the WebDeveloper.net package.

###*********************************************************
###*  Web-Developer Server Suite                           *
###*  external link: http://sourceforge.net/projects/webdeveloper         *
###*  devside_net@users.sourceforge.net                    *
###*  v1.95-httpd22-ssl                                    *
###*********************************************************


ThreadsPerChild 250
MaxRequestsPerChild  0

Listen 80

ServerRoot "/www/Apache22"
DocumentRoot "/THDL/thdl-site"
 was /www/webroot

ServerName localhost:80
ServerAdmin admin@localhost

ErrorLog logs/error.log
LogLevel error

###
# Note that the following LoadModule lines only represent the minimum 'Web-Developer' Suite configuration.
#
# Also note that some of the following LoadModule lines, which are commented out, are still loaded under…
# confSuite-extra*.conf
# confextra*.conf
# …configuration files -- for modular reasons.
#
# For example:
# mod_deflate is loaded under confSuite-extramod_deflate_logio.conf and NOT under httpd.conf
# status_module is loaded under confextrahttpd-info.conf and NOT under httpd.conf
#
# Check last part of httpd.conf for the Apache base and 'Web-Developer' *.conf files that are included.
###

#LoadModule actions_module modules/mod_actions.so
LoadModule alias_module modules/mod_alias.so
#LoadModule asis_module modules/mod_asis.so
#LoadModule auth_basic_module modules/mod_auth_basic.so
#LoadModule auth_digest_module modules/mod_auth_digest.so
#LoadModule authn_anon_module modules/mod_authn_anon.so
#LoadModule authn_dbm_module modules/mod_authn_dbm.so
#LoadModule authn_default_module modules/mod_authn_default.so
#LoadModule authn_file_module modules/mod_authn_file.so
#LoadModule authz_dbm_module modules/mod_authz_dbm.so
#LoadModule authz_default_module modules/mod_authz_default.so
#LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
LoadModule authz_host_module modules/mod_authz_host.so
#LoadModule authz_user_module modules/mod_authz_user.so
LoadModule autoindex_module modules/mod_autoindex.so
#LoadModule cern_meta_module modules/mod_cern_meta.so
#LoadModule cgi_module modules/mod_cgi.so
#LoadModule dav_module modules/mod_dav.so
#LoadModule dav_fs_module modules/mod_dav_fs.so
#LoadModule deflate_module modules/mod_deflate.so
LoadModule dir_module modules/mod_dir.so
#LoadModule env_module modules/mod_env.so
#LoadModule expires_module modules/mod_expires.so
#LoadModule file_cache_module modules/mod_file_cache.so
#LoadModule headers_module modules/mod_headers.so
#LoadModule imagemap_module modules/mod_imagemap.so
#LoadModule include_module modules/mod_include.so
#LoadModule info_module modules/mod_info.so
#LoadModule isapi_module modules/mod_isapi.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule mime_module modules/mod_mime.so
#LoadModule mime_magic_module modules/mod_mime_magic.so
#LoadModule proxy_module modules/mod_proxy.so
#LoadModule proxy_ajp_module modules/mod_proxy_ajp.so
#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
#LoadModule proxy_connect_module modules/mod_proxy_connect.so
#LoadModule proxy_http_module modules/mod_proxy_http.so
#LoadModule proxy_ftp_module modules/mod_proxy_ftp.so
#LoadModule negotiation_module modules/mod_negotiation.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule setenvif_module modules/mod_setenvif.so
#LoadModule speling_module modules/mod_speling.so
#LoadModule status_module modules/mod_status.so
#LoadModule unique_id_module modules/mod_unique_id.so
#LoadModule userdir_module modules/mod_userdir.so
#LoadModule usertrack_module modules/mod_usertrack.so
#LoadModule vhost_alias_module modules/mod_vhost_alias.so
<IfDefine SSL>
	LoadModule ssl_module modules/mod_ssl.so
</IfDefine>


DefaultType text/plain

<IfModule dir_module>
    DirectoryIndex index.html index.php index.aspx
</IfModule>

IndexIgnore .htaccess
<FilesMatch "^.ht">
    Order allow,deny
    Deny from all
</FilesMatch>


Redirect /thdl external link: http://localhost

<Directory />
    Options FollowSymLinks
    AllowOverride all
    Order deny,allow
    Allow from all
    Satisfy all
</Directory>

 was /www/webroot
<Directory "/THDL/thdl-site">
    Options Indexes FollowSymLinks
    AllowOverride all
    Order allow,deny
    Allow from all
</Directory>

<IfModule mime_module>
    TypesConfig conf/mime.types
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
</IfModule>


# Apache base configuration
#
# The configuration files in the conf/extra/ directory can be
# included to add extra features or to modify the default configuration of
# the server.

# Server-pool management (MPM specific)
#Include conf/extra/httpd-mpm.conf

# Multi-language error messages
#Include conf/extra/httpd-multilang-errordoc.conf

# Fancy directory listings
Include conf/extra/httpd-autoindex.conf

# Language settings
Include conf/extra/httpd-languages.conf

# User home directories
#Include conf/extra/httpd-userdir.conf

# Real-time info on requests and configuration
Include conf/extra/httpd-info.conf

# Virtual hosts
#Include conf/extra/httpd-vhosts.conf

# Local access to the Apache HTTP Server Manual
Include conf/extra/httpd-manual.conf

# Distributed authoring and versioning (WebDAV)
#Include conf/extra/httpd-dav.conf

# Various default settings
Include conf/extra/httpd-default.conf


# DeveloperSide.NET Server-Suite Configuration
#
# The configuration files in the conf/Suite-extra/ directory can be
# included to add extra features or to modify the default configuration of
# the server.
#
# The specifics are loaded under components.conf…

Include conf/Suite-extra/components.conf


# Security check -- if no php module is loaded, Apache should return 'permissions denied' on php(4,5) all URL requests
<IfModule !php5_module>
<IfModule !php4_module>
	<Location />
		<FilesMatch ".php[45]?$">
			Order allow,deny
			Deny from all
		</FilesMatch>
	</Location>
</IfModule>
</IfModule>

#For PHP5
LoadFile "C:/www/php5/php5ts.dll"
LoadModule php5_module "C:/www/php5/php5apache2.dll"

<IfModule php5_module>
	#PHPIniDir "C:/Windows"

	<Location />
		AddType text/html .php .phps
		AddHandler application/x-httpd-php .php
		AddHandler application/x-httpd-php-source .phps
	</Location>

</IfModule>

<IfModule ssl_module>
	Include conf/extra/httpd-ssl.conf
	SSLRandomSeed startup builtin
	SSLRandomSeed connect builtin
</IfModule>

## Added for MYsql/PMA based on guide.
<IfModule mod_alias.c>
     Alias /phpMyAdmin "C:/www/phpMyAdmin"
</IfModule>

<Directory "C:/www/phpMyAdmin">
     Options None
     AllowOverride None
     order deny,allow
     deny from all
     allow from 127.0.0.1
</Directory>
Provided for unrestricted use by the external link: Tibetan and Himalayan Library
]]]

[[[
https://www.thegeeksearch.com/beginners-guide-to-apache-httpd/
含图片:
  缺少了几张图片！
  wp-content-uploads-2020-05-apache-httpd-basics_hucdbfefaf604d286f3cdb6c4b2127c514_39868_715x0_resize_q100_h2_box.webp
  -->:
  others/app/termux/web_server.txt..apache-httpd-conf.webp
===
!mv /storage/emulated/0/0my_files/tmp-download/wp-content-uploads-2020-05-apache-httpd-basics_hucdbfefaf604d286f3cdb6c4b2127c514_39868_715x0_resize_q100_h2_box.webp others/app/termux/web_server.txt..apache-httpd-conf.webp
===
Beginners Guide to Apache HTTPD

Introduction To Apache HTTPD
Apache HTTPD is one of the most used web servers on the Internet. A web server is a daemon that speaks the http(s) protocol, a text-based protocol for sending and receiving objects over a network connection. The http protocol is sent over the wire in clear text, using port 80/TCP by default (though other ports can be used). There is also a TLS/SSL encrypted version of the protocol called https that uses port 443/TCP by default.

A basic http exchange has the client connecting to the server, and then requesting a resource using the GET command. Other commands like HEAD and POST exist, allowing clients to request just metadata for a resource, or send the server more information.


The following is an extract from a short http exchange:

GET /hello.html HTTP/1.1
Host: webapp0.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Cache-Control: max-age=0
The client starts by requesting a resource (the GET command), and then follows up with some extra headers, telling the server what types of encoding it can accept, what language it would prefer, etc.The request is ended with an empty line.


HTTP/1.1 200 OK
Date: Tue, 27 May 2014 09:57:40 GMT
Server: Apache/2.4.6 (Red Hat) OpenSSL/1.0.1e-fips mod_wsgi/3.4 Python/2.7.5
Content-Length: 12
Keep-Alive: timeout=5, max=82
Connection: Keep-Alive
Content-Type: text/plain; charset=UTF-8
Hello World!
The server then replies with a status code (HTTP/1.1 200 OK), followed by a list of headers. The Content-Type header is a mandatory one, telling the client what type of content is being sent. After the headers are done, the server sends an empty line, followed by the requested content. The length of this content must match the length indicated in the Content-Length header.

While the http protocol seems easy at first, implementing all of the protocol—along with security measures, support for clients not adhering fully to the standard, and support for dynamically generated pages—is not an easy task. That is why most application developers do not write their own web servers, but instead write their applications to be run behind a web server like Apache HTTPD.

About Apache HTTPD
Apache HTTPD, sometimes just called “Apache” or httpd, implements a fully configurable and extendable web server with full http support. The functionality of httpd can be extended with modules, small pieces of code that plug into the main web server framework and extend its functionality.

On CentOS/RHEL 7 Apache HTTPD is provided in the httpd package. The web-server package group will install not only the httpd package itself but also the httpd-manual package. Once httpd-manual is installed, and the httpd.service service is started, the full Apache HTTPD manual is available on http://localhost/manual. This manual has a complete reference of all the configuration directives for httpd, along with examples. This makes it an invaluable resource while configuring httpd.


CentOS/RHEL 7 also ships an environment group called web-server-environment. This environment group pulls in the web-server group by default, but has a number of other groups, like backup tool and database clients, marked as optional. A default dependency of the httpd package is the httpd-tools package. This package includes tools to manipulate password maps and databases, tools to resolve IP addresses in log files to hostnames, and a tool (ab) to benchmark and stress-test web servers.

Basic Apache Httpd Configuration
After installing the web-server package group, or the httpd package, a default configuration is written to /etc/httpd/conf/httpd.conf. This configuration serves out the contents of /var/www/html for requests coming in to any hostname over plain http.

The basic syntax of the httpd.conf is comprised of two parts: Key Value configuration directives, and HTML-like <Blockname parameter> blocks with other configuration directives embedded in them. Key/value pairs outside of a block affect the entire server configuration, while directives inside a block typically only apply to a part of the configuration indicated by the block, or when the requirement set by the block is met.

apache httpd basics
1. This directive specifies where httpd will look for any files referenced in the configuration files with a relative path name.

2. This directive tells httpd to start listening on port 80/TCP on all interfaces. To only listen on select interfaces, the syntax “Listen 1.2.3.4:80” can be used for IPv4 or “Listen [2001:db8::1]:80” for IPv6.


Note: Multiple listen directives are allowed, but overlapping listen directives will result in a fatal error, preventing httpd from starting.

3. This directive includes other files, as if they were inserted into the configuration file in place of the Include statement. When multiple files are specified, they will be sorted by filename in alphanumeric order before being included. Filenames can either be absolute, or relative to ServerRoot, and include wildcards such as *.

Note: Specifying a nonexistent file will result in a fatal error, preventing httpd from starting.
4 and 5. These two directives specify the user and group the httpd daemon should run as. httpd is always started as root, but once all actions that need root privileges have been performed—for example, binding to a port number under 1024—privileges will be dropped and execution is continued as a nonprivileged user. This is a security measure.

6. Some error pages generated by httpd can include a link where users can report a problem. Setting this directive to a valid email address will make the webmaster easier to contact for users. Leaving this setting at the default of root@localhost is not recommended.

7. A <Directory> block sets configuration directives for the specified directory, and all descendent directories.

Common directives inside a ****block include the following:

AllowOverride None: .htaccess files will not be consulted for per-directory configuration settings. Setting this to any other setting will have a performance penalty, as well as the possible security ramifications.
Require All Denied: httpd will refuse to serve content out of this directory, returning a HTTP/1.1 403 Forbidden error when requested by a client.
Require All Granted: Allow access to this directory. Setting this on a directory outside of the normal content tree can have security implications.
Options [[+|-]OPTIONS]…: Turn on (or off) certain options for a directory. For example, the Indexes option will show a directory listing if a directory is requested and no index.html file exists in that directory.
8. This setting determines where httpd will search for requested files. It is important that the directory specified here is both readable by httpd (both regular permissions and SELinux), and that a corresponding <Directory> block has been declared to allow access.

9. This block only applies its contents if the specified extension module is loaded. In this case, the dir_module is loaded, so the DirectoryIndex directive can be used to specify what file should be used when a directory is requested.

10. A <Files> block works just as a <Directory> block, but here options for individual (wildcarded) files is used. In this case, the block prevents httpd from serving out any security-sensitive files like .htaccess and .htpasswd.

11. This specifies to what file httpd should log any errors it encounters. Since this is a relative pathname, it will be prepended with the ServerRoot directive. In a default configuration, / etc/httpd/logs is a symbolic link to /var/log/httpd/.

12. The CustomLog directive takes two parameters: a file to log to, and a log format defined with the LogFormat directive. Using these directives, administrators can log exactly the information they need or want. Most log parsing tools will assume that the default combined format is used.

13. This setting adds a charset part to the Content-Type header for text/plain and text/ html resources. This can be disabled with AddDefaultCharset Off.

14. This works the same as a regular include, but if no files are found, no error is generated.

Starting Apache HTTPD
httpd can be started from the httpd.service systemd unit.

# systemctl enable httpd.service
# systemctl start httpd.service
Once httpd is started, status information can be requested with systemctl status -l httpd.service. If httpd has failed to start for any reason, this output will typically give a clear indication of why httpd failed to start.

Network Security
firewalld has two predefined services for httpd. The http service opens port 80/TCP, and the https service opens port 443/TCP.

# firewall-cmd --permanent --add-service=http --add-service=https
# firewall-cmd --reload
In a default configuration, SELinux only allows httpd to bind to a specific set of ports. This full list can be requested with the command semanage port -l | grep ‘^http_’. For a full overview of the allowed port contexts, and their intended usage, consult the httpd_selinux(8) man page from the selinux-policy-devel package.

Using an alternate document root
Content does not need to be served out of /var/www/html, but when changing the DocumentRoot setting, a number of other changes must be made as well:

File system permissions: Any new DocumentRoot must be readable by the apache user or the apache group. In most cases, the DocumentRoot should never be writable by the apache user or group.
SELinux: The default SELinux policy is restrictive as to what contexts can be read by httpd. The default context for web server content is httpd_sys_content_t. Rules are already in place to relabel /srv/*/www/ with this context as well. To serve content from outside of these standard locations, a new context rule must be added with semanage.
# semanage fcontext -a -t httpd_sys_content_t '/new/ location(/.*)?'
Consult the httpd_selinux(8) man page from the selinux-policy-devel package for additional allowed ﬁle contexts and their intended usage.

Allowing write access to a DocumentRoot
In a default conﬁguration only root has write access to the standard DocumentRoot. To allow web developers to write into the DocumentRoot, a number of approaches can be taken.

1. Set a (default) ACL for the web developers on the DocumentRoot. For example, if all web developers are part of the webmasters group, and /var/www/html is used as the DocumentRoot, the following commands will give them write access:

# setfacl -R -m g:webmasters:rwX /var/www/html# setfacl -R -m d:g:webmasters:rwx /var/www/html
Note: The uppercase X bit sets the executeable bit only on directories instead of directories and regular ﬁles. This is especially relevant when done in conjunction with a recursive action on a directory tree.

2. Create the new DocumentRoot owned by the webmasters group, the SGID bit set.

# mkdir -p -m 2775 /new/docroot
# chgrp webmasters /new/docroot
3. A combination of the previous, with the other permissions closed off, and an ACL added for the apache group.

How to Configure and Troubleshoot Virtual Hosts in Apache HTTPD

Related Posts

]]]

[[[
===
termux:
/data/data/com.termux/files/usr/etc/apache2/httpd.conf
view ~/../usr/etc/apache2/httpd.conf
cp -iv ~/../usr/etc/apache2/httpd.conf others/app/termux/help/httpd.conf-default
view others/app/termux/help/httpd.conf-default
  Listen 8080
  DocumentRoot "/data/data/com.termux/files/usr/share/apache2/default-site/htdocs"

===
<VirtualHost>
  ???
  view ~/../usr/etc/hosts
  127.0.0.1 www.example.com
  127.0.0.1 localhost
grep '^<VirtualHost' -r /data/data/com.termux/files/usr/etc/apache2/
  /data/data/com.termux/files/usr/etc/apache2/extra/httpd-ssl.conf:<VirtualHost _default_:8443>
  /data/data/com.termux/files/usr/etc/apache2/extra/httpd-vhosts.conf:<VirtualHost *:8080>
  /data/data/com.termux/files/usr/etc/apache2/extra/httpd-vhosts.conf:<VirtualHost *:8080>
view ~/../usr/etc/apache2/extra/httpd-vhosts.conf
cp -iv ~/../usr/etc/apache2/extra/httpd-vhosts.conf others/app/termux/help/httpd-vhosts.conf-extra-default
view others/app/termux/help/httpd-vhosts.conf-extra-default
<VirtualHost *:8080>
    ServerAdmin webmaster@dummy-host.example.com
    DocumentRoot "/data/data/com.termux/files/usr/docs/dummy-host.example.com"
    ServerName dummy-host.example.com
    ServerAlias www.dummy-host.example.com
    ErrorLog "var/log/apache2/dummy-host.example.com-error_log"
    CustomLog "var/log/apache2/dummy-host.example.com-access_log" common
</VirtualHost>
===





DocumentRoot
  --> ~/../usr/share/apache2/default-site/htdocs/
ls -1 ~/../usr/share/apache2/default-site/htdocs/
  index.html
  manual
ls -1 ~/../usr/share/apache2/default-site/htdocs/manual
===
ls -1 ~/../usr/share/apache2/default-site/htdocs/manual  | grep '[.]html$'
bind.html
caching.html
configuring.html
content-negotiation.html
custom-error.html
dns-caveats.html
dso.html
env.html
expr.html
filter.html
getting-started.html
glossary.html
handler.html
index.html
install.html
invoking.html
license.html
logs.html
mpm.html
new_features_2_0.html
new_features_2_2.html
new_features_2_4.html
sections.html
server-wide.html
sitemap.html
socache.html
stopping.html
suexec.html
upgrading.html
urlmapping.html

===
ls -1 ~/../usr/share/apache2/default-site/htdocs/manual  | grep '[.]html' -v
BUILDING
LICENSE
convenience.map
developer
faq
howto
images
misc
mod
platform
programs
rewrite
ssl
style
vhosts
===
ls -1 ~/../usr/share/apache2/default-site/htdocs/manual/rewrite  | grep '[.]html[.]' -v
access.html
advanced.html
avoid.html
flags.html
htaccess.html
index.html
intro.html
proxy.html
remapping.html
rewritemap.html
tech.html
vhosts.html
===
ls -1 ~/../usr/share/apache2/default-site/htdocs/manual/faq  | grep '[.]html[.]' -v
index.html
===
ls -1 ~/../usr/share/apache2/default-site/htdocs/manual/vhosts  | grep '[.]html[.]' -v
details.html
examples.html
fd-limits.html
index.html
ip-based.html
mass.html
name-based.html
===
ls -1 ~/../usr/share/apache2/default-site/htdocs/manual/howto  | grep '[.]html[.]' -v
access.html
auth.html
cgi.html
htaccess.html
http2.html
index.html
public_html.html
reverse_proxy.html
ssi.html
===
less ~/../usr/share/apache2/default-site/htdocs/
less ~/../usr/share/apache2/default-site/htdocs/index.html
less ~/../usr/share/apache2/default-site/htdocs/manual/index.html
less ~/../usr/share/apache2/default-site/htdocs/manual/invoking.html.en
===


$ httpd
lynx http://127.0.0.1:8080/
  显示:『It works!』
  xxx:http://127.0.0.1:8080/share/apache2/default-site/htdocs/index.html
lynx http://127.0.0.1:8080/manual
http://127.0.0.1:8080/manual/index.html.en
http://127.0.0.1:8080/manual/invoking.html.en
http://127.0.0.1:8080/manual/faq/index.html.en
http://127.0.0.1:8080/manual/howto/index.html.en
http://127.0.0.1:8080/manual/howto/cgi.html.en
http://127.0.0.1:8080/manual/howto/public_html.html.en
http://127.0.0.1:8080/manual/vhosts/examples.html.en
http://127.0.0.1:8080/manual/rewrite/index.html.en
===
]]]
[[[
less ~/../usr/share/apache2/default-site/htdocs/manual/vhosts/examples.html.en
http://127.0.0.1:8080/manual/vhosts/examples.html.en
===
Modules | Directives | FAQ | Glossary | Sitemap

Apache HTTP Server Version 2.4


<-
Apache > HTTP Server > Documentation > Version 2.4 > Virtual Hosts
VirtualHost Examples
Available Languages:  en  |  fr  |  ja  |  ko  |  tr 

This document attempts to answer the commonly-asked questions about setting up virtual hosts. These scenarios are those involving multiple web sites running on a single server, via name-based or IP-based virtual hosts.

Support Apache!
Running several name-based web sites on a single IP address.
Name-based hosts on more than one IP address.
Serving the same content on different IP addresses (such as an internal and external address).
Running different sites on different ports.
IP-based virtual hosting
Mixed port-based and ip-based virtual hosts
Mixed name-based and IP-based vhosts
Using Virtual_host and mod_proxy together
Using _default_ vhosts
Migrating a name-based vhost to an IP-based vhost
Using the ServerPath directive
See also
Comments
top
Running several name-based web sites on a single IP address.
Your server has multiple hostnames that resolve to a single address, and you want to respond differently for www.example.com and www.example.org.

Note
Creating virtual host configurations on your Apache server does not magically cause DNS entries to be created for those host names. You must have the names in DNS, resolving to your IP address, or nobody else will be able to see your web site. You can put entries in your hosts file for local testing, but that will work only from the machine with those hosts entries.

# Ensure that Apache listens on port 80
Listen 80
<VirtualHost *:80>
    DocumentRoot "/www/example1"
    ServerName www.example.com

    # Other directives here
</VirtualHost>

<VirtualHost *:80>
    DocumentRoot "/www/example2"
    ServerName www.example.org

    # Other directives here
</VirtualHost>
The asterisks match all addresses, so the main server serves no requests. Due to the fact that the virtual host with ServerName www.example.com is first in the configuration file, it has the highest priority and can be seen as the default or primary server. That means that if a request is received that does not match one of the specified ServerName directives, it will be served by this first <VirtualHost>.

The above configuration is what you will want to use in almost all name-based virtual hosting situations. The only thing that this configuration will not work for, in fact, is when you are serving different content based on differing IP addresses or ports.

Note
You may replace * with a specific IP address on the system. Such virtual hosts will only be used for HTTP requests received on connection to the specified IP address.

However, it is additionally useful to use * on systems where the IP address is not predictable - for example if you have a dynamic IP address with your ISP, and you are using some variety of dynamic DNS solution. Since * matches any IP address, this configuration would work without changes whenever your IP address changes.

top
Name-based hosts on more than one IP address.
Note
Any of the techniques discussed here can be extended to any number of IP addresses.

The server has two IP addresses. On one (172.20.30.40), we will serve the "main" server, server.example.com and on the other (172.20.30.50), we will serve two or more virtual hosts.

Listen 80

# This is the "main" server running on 172.20.30.40
ServerName server.example.com
DocumentRoot "/www/mainserver"

<VirtualHost 172.20.30.50>
    DocumentRoot "/www/example1"
    ServerName www.example.com

    # Other directives here ...
</VirtualHost>

<VirtualHost 172.20.30.50>
    DocumentRoot "/www/example2"
    ServerName www.example.org

    # Other directives here ...
</VirtualHost>
Any request to an address other than 172.20.30.50 will be served from the main server. A request to 172.20.30.50 with an unknown hostname, or no Host: header, will be served from www.example.com.

top
Serving the same content on different IP addresses (such as an internal and external address).
The server machine has two IP addresses (192.168.1.1 and 172.20.30.40). The machine is sitting between an internal (intranet) network and an external (internet) network. Outside of the network, the name server.example.com resolves to the external address (172.20.30.40), but inside the network, that same name resolves to the internal address (192.168.1.1).

The server can be made to respond to internal and external requests with the same content, with just one <VirtualHost> section.

<VirtualHost 192.168.1.1 172.20.30.40>
    DocumentRoot "/www/server1"
    ServerName server.example.com
    ServerAlias server
</VirtualHost>
Now requests from both networks will be served from the same <VirtualHost>.

Note:
On the internal network, one can just use the name server rather than the fully qualified host name server.example.com.

Note also that, in the above example, you can replace the list of IP addresses with *, which will cause the server to respond the same on all addresses.

top
Running different sites on different ports.
You have multiple domains going to the same IP and also want to serve multiple ports. The example below illustrates that the name-matching takes place after the best matching IP address and port combination is determined.

Listen 80
Listen 8080

<VirtualHost 172.20.30.40:80>
    ServerName www.example.com
    DocumentRoot "/www/domain-80"
</VirtualHost>

<VirtualHost 172.20.30.40:8080>
    ServerName www.example.com
    DocumentRoot "/www/domain-8080"
</VirtualHost>

<VirtualHost 172.20.30.40:80>
    ServerName www.example.org
    DocumentRoot "/www/otherdomain-80"
</VirtualHost>

<VirtualHost 172.20.30.40:8080>
    ServerName www.example.org
    DocumentRoot "/www/otherdomain-8080"
</VirtualHost>
top
IP-based virtual hosting
The server has two IP addresses (172.20.30.40 and 172.20.30.50) which resolve to the names www.example.com and www.example.org respectively.

Listen 80

<VirtualHost 172.20.30.40>
    DocumentRoot "/www/example1"
    ServerName www.example.com
</VirtualHost>

<VirtualHost 172.20.30.50>
    DocumentRoot "/www/example2"
    ServerName www.example.org
</VirtualHost>
Requests for any address not specified in one of the <VirtualHost> directives (such as localhost, for example) will go to the main server, if there is one.

top
Mixed port-based and ip-based virtual hosts
The server machine has two IP addresses (172.20.30.40 and 172.20.30.50) which resolve to the names www.example.com and www.example.org respectively. In each case, we want to run hosts on ports 80 and 8080.

Listen 172.20.30.40:80
Listen 172.20.30.40:8080
Listen 172.20.30.50:80
Listen 172.20.30.50:8080

<VirtualHost 172.20.30.40:80>
    DocumentRoot "/www/example1-80"
    ServerName www.example.com
</VirtualHost>

<VirtualHost 172.20.30.40:8080>
    DocumentRoot "/www/example1-8080"
    ServerName www.example.com
</VirtualHost>

<VirtualHost 172.20.30.50:80>
    DocumentRoot "/www/example2-80"
    ServerName www.example.org
</VirtualHost>

<VirtualHost 172.20.30.50:8080>
    DocumentRoot "/www/example2-8080"
    ServerName www.example.org
</VirtualHost>
top
Mixed name-based and IP-based vhosts
Any address mentioned in the argument to a virtualhost that never appears in another virtual host is a strictly IP-based virtual host.

Listen 80
<VirtualHost 172.20.30.40>
    DocumentRoot "/www/example1"
    ServerName www.example.com
</VirtualHost>

<VirtualHost 172.20.30.40>
    DocumentRoot "/www/example2"
    ServerName www.example.org
</VirtualHost>

<VirtualHost 172.20.30.40>
    DocumentRoot "/www/example3"
    ServerName www.example.net
</VirtualHost>

# IP-based
<VirtualHost 172.20.30.50>
    DocumentRoot "/www/example4"
    ServerName www.example.edu
</VirtualHost>

<VirtualHost 172.20.30.60>
    DocumentRoot "/www/example5"
    ServerName www.example.gov
</VirtualHost>
top
Using Virtual_host and mod_proxy together
The following example allows a front-end machine to proxy a virtual host through to a server running on another machine. In the example, a virtual host of the same name is configured on a machine at 192.168.111.2. The ProxyPreserveHost On directive is used so that the desired hostname is passed through, in case we are proxying multiple hostnames to a single machine.

<VirtualHost *:*>
    ProxyPreserveHost On
    ProxyPass        "/" "http://192.168.111.2/"
    ProxyPassReverse "/" "http://192.168.111.2/"
    ServerName hostname.example.com
</VirtualHost>
top
Using _default_ vhosts
_default_ vhosts for all ports
Catching every request to any unspecified IP address and port, i.e., an address/port combination that is not used for any other virtual host.

<VirtualHost _default_:*>
    DocumentRoot "/www/default"
</VirtualHost>
Using such a default vhost with a wildcard port effectively prevents any request going to the main server.

A default vhost never serves a request that was sent to an address/port that is used for name-based vhosts. If the request contained an unknown or no Host: header it is always served from the primary name-based vhost (the vhost for that address/port appearing first in the configuration file).

You can use AliasMatch or RewriteRule to rewrite any request to a single information page (or script).

_default_ vhosts for different ports
Same as setup 1, but the server listens on several ports and we want to use a second _default_ vhost for port 80.

<VirtualHost _default_:80>
    DocumentRoot "/www/default80"
    # ...
</VirtualHost>

<VirtualHost _default_:*>
    DocumentRoot "/www/default"
    # ...
</VirtualHost>
The default vhost for port 80 (which must appear before any default vhost with a wildcard port) catches all requests that were sent to an unspecified IP address. The main server is never used to serve a request.

_default_ vhosts for one port
We want to have a default vhost for port 80, but no other default vhosts.

<VirtualHost _default_:80>
    DocumentRoot "/www/default"
...
</VirtualHost>
A request to an unspecified address on port 80 is served from the default vhost. Any other request to an unspecified address and port is served from the main server.

Any use of * in a virtual host declaration will have higher precedence than _default_.

top
Migrating a name-based vhost to an IP-based vhost
The name-based vhost with the hostname www.example.org (from our name-based example, setup 2) should get its own IP address. To avoid problems with name servers or proxies who cached the old IP address for the name-based vhost we want to provide both variants during a migration phase.

The solution is easy, because we can simply add the new IP address (172.20.30.50) to the VirtualHost directive.

Listen 80
ServerName www.example.com
DocumentRoot "/www/example1"

<VirtualHost 172.20.30.40 172.20.30.50>
    DocumentRoot "/www/example2"
    ServerName www.example.org
    # ...
</VirtualHost>

<VirtualHost 172.20.30.40>
    DocumentRoot "/www/example3"
    ServerName www.example.net
    ServerAlias *.example.net
    # ...
</VirtualHost>
The vhost can now be accessed through the new address (as an IP-based vhost) and through the old address (as a name-based vhost).

top
Using the ServerPath directive
We have a server with two name-based vhosts. In order to match the correct virtual host a client must send the correct Host: header. Old HTTP/1.0 clients do not send such a header and Apache has no clue what vhost the client tried to reach (and serves the request from the primary vhost). To provide as much backward compatibility as possible we create a primary vhost which returns a single page containing links with an URL prefix to the name-based virtual hosts.

<VirtualHost 172.20.30.40>
    # primary vhost
    DocumentRoot "/www/subdomain"
    RewriteEngine On
    RewriteRule "." "/www/subdomain/index.html"
    # ...
</VirtualHost>

<VirtualHost 172.20.30.40>
    DocumentRoot "/www/subdomain/sub1"
    ServerName www.sub1.domain.tld
    ServerPath "/sub1/"
    RewriteEngine On
    RewriteRule "^(/sub1/.*)" "/www/subdomain$1"
    # ...
</VirtualHost>

<VirtualHost 172.20.30.40>
    DocumentRoot "/www/subdomain/sub2"
    ServerName www.sub2.domain.tld
    ServerPath "/sub2/"
    RewriteEngine On
    RewriteRule "^(/sub2/.*)" "/www/subdomain$1"
    # ...
</VirtualHost>
Due to the ServerPath directive a request to the URL http://www.sub1.domain.tld/sub1/ is always served from the sub1-vhost.
A request to the URL http://www.sub1.domain.tld/ is only served from the sub1-vhost if the client sent a correct Host: header. If no Host: header is sent the client gets the information page from the primary host.

Please note that there is one oddity: A request to http://www.sub2.domain.tld/sub1/ is also served from the sub1-vhost if the client sent no Host: header.

The RewriteRule directives are used to make sure that a client which sent a correct Host: header can use both URL variants, i.e., with or without URL prefix.

Available Languages:  en  |  fr  |  ja  |  ko  |  tr 

top
Copyright 2024 The Apache Software Foundation.
===
]]]


[[[
https://cwiki.apache.org/confluence/plugins/servlet/mobile?contentId=115522293#content/view/115522293
===
ASF Infrabot
五月 22, 2019
关注 关注
This guide lists the default installation layouts for Apache HTTPD on various operating systems and distributions.

While examples in the main Apache HTTP Server documentation assume that you are using the standard file layout distributed from apache.org, many third-party distributors change the layout to conform to local policies. This can make it difficult to follow the examples and to find various important files. Using the information below, you can find where things live on your local install, and compare it to the standard Apache httpd paths.

Apache httpd 2.4 default layout (apache.org source package):
Apache httpd 2.2 default layout (apache.org source package):
Apache httpd 2.0 default layout (apache.org source package):
Debian, Ubuntu (Apache httpd 2.x):
Notes:
Fedora Core, CentOS, RHEL:
Notes:
RedHat 9.0 and older:
Mandriva (Apache httpd 2.2):
Mac OS X (Leopard, Apache httpd 2.2):
Notes:
NetBSD Apache httpd 2.0 and 1.3 from pkgsrc (layout is identical):
Notes:
FreeBSD 6.1 (Apache httpd 2.2):
Notes:
FreeBSD 6.1 (Apache httpd 2.0):
Notes:
OpenBSD 5.0 (Apache httpd 1.3 (Hardened version for OpenBSD)):
Notes:
OpenBSD 5.0 (Apache httpd 2.2 (Unedited, non-hardened version)):
Win32 (Apache httpd 2.2):
Notes;
Solaris 10 (Apache httpd 2.0):
Notes:
Slackware 14.0+ (Apache httpd 2.4):
openSUSE and SLES (Apache httpd 2.2):
Notes:
Gentoo (Apache httpd 2.2):
Notes:
TODO:
Apache httpd 2.4 default layout (apache.org source package):
ServerRoot              ::      /usr/local/apache2
DocumentRoot            ::      /usr/local/apache2/htdocs
Apache Config File      ::      /usr/local/apache2/conf/httpd.conf
Other Config Files      ::      /usr/local/apache2/conf/extra/
SSL Config File         ::      /usr/local/apache2/conf/extra/httpd-ssl.conf
ErrorLog                ::      /usr/local/apache2/logs/error_log
AccessLog               ::      /usr/local/apache2/logs/access_log
cgi-bin                 ::      /usr/local/apache2/cgi-bin (enabled by default, but some of the bundled scripts are 644)
binaries (apachectl)    ::      /usr/local/apache2/bin
start/stop              ::      /usr/local/apache2/bin/apachectl (start|restart|graceful|graceful-stop|stop|configtest)
Apache httpd 2.2 default layout (apache.org source package):
ServerRoot              ::      /usr/local/apache2
DocumentRoot            ::      /usr/local/apache2/htdocs
Apache Config File      ::      /usr/local/apache2/conf/httpd.conf
Other Config Files      ::      /usr/local/apache2/conf/extra/
SSL Config File         ::      /usr/local/apache2/conf/extra/httpd-ssl.conf
ErrorLog                ::      /usr/local/apache2/logs/error_log
AccessLog               ::      /usr/local/apache2/logs/access_log
cgi-bin                 ::      /usr/local/apache2/cgi-bin (enabled by default, but the bundled scripts are 644)
binaries (apachectl)    ::      /usr/local/apache2/bin
start/stop              ::      /usr/local/apache2/bin/apachectl (start|restart|graceful|graceful-stop|stop|configtest)
Apache httpd 2.0 default layout (apache.org source package):
ServerRoot              ::      /usr/local/apache2
DocumentRoot            ::      /usr/local/apache2/htdocs
Apache Config File      ::      /usr/local/apache2/conf/httpd.conf
SSL Config              ::      /usr/local/apache2/conf/ssl.conf
ErrorLog                ::      /usr/local/apache2/logs/error_log
AccessLog               ::      /usr/local/apache2/logs/access_log
cgi-bin                 ::      /usr/local/apache2/cgi-bin (enabled by default, but the bundled scripts are 644)
binaries (apachectl)    ::      /usr/local/apache2/bin
start/stop              ::      /usr/local/apache2/bin/apachectl (start|stop|graceful|configtest)
Debian, Ubuntu (Apache httpd 2.x):
ServerRoot              ::      /etc/apache2
DocumentRoot            ::      /var/www
Apache Config Files     ::      /etc/apache2/apache2.conf
                        ::      /etc/apache2/ports.conf
Default VHost Config    ::      /etc/apache2/sites-available/default, /etc/apache2/sites-enabled/000-default
Module Locations        ::      /etc/apache2/mods-available, /etc/apache2/mods-enabled
ErrorLog                ::      /var/log/apache2/error.log
AccessLog               ::      /var/log/apache2/access.log
cgi-bin                 ::      /usr/lib/cgi-bin
binaries (apachectl)    ::      /usr/sbin
start/stop              ::      /etc/init.d/apache2 (start|stop|restart|reload|force-reload|start-htcacheclean|stop-htcacheclean)
Notes:
The Debian/Ubuntu layout is fully documented in /usr/share/doc/apache2/README.Debian
Debian/Ubuntu use symlinks to configure vhosts and load modules. Configuration files are created in their respective sites-available and mods-available directories. To activate vhosts and modules, symlinks are created in the respective sites-enabled and mods-enabled directories to the config files in either sites-available and mods-available. Debian provides scripts to handle this process called 'a2ensite' and 'a2enmod' which activates vhosts and modules.
The default vhost is defined in /etc/apache2/sites-available/default, and overrides the DocumentRoot set in the server context.
Fedora Core, CentOS, RHEL:
ServerRoot              ::      /etc/httpd
Primary Config Fle      ::      /etc/httpd/conf/httpd.conf
Other Config Files      ::      /etc/httpd/conf.d
Module Locations        ::      /usr/lib/httpd/modules
DocumentRoot            ::      /var/www/html
ErrorLog                ::      /var/log/httpd/error_log
AccessLog               ::      /var/log/httpd/access_log
cgi-bin                 ::      /var/www/cgi-bin (empty and disabled by default)
binary                  ::      /usr/sbin/httpd
runtime directory       ::      /etc/httpd/run
start/stop              ::      /sbin/service httpd {start|stop|restart|condrestart|reload|status|fullstatus|graceful|help|configtest}
Notes:
There is an extra config file in /etc/sysconfig/httpd which can be used to change to the worker mpm /usr/sbin/httpd.worker.
Extra config files named *.conf are loaded from /etc/httpd/conf.d. This directory is used by packages like mod_python for drop-in configs
If you're having issues with authorization and your permissions are correct, you might have problems with SELinux permissions. Take a look at httpd_selinux(8) and related documentation. Particularly sealert(8) can be used for analysis and suggested solutions.
RedHat 9.0 and older:
ServerRoot              ::      /etc/httpd
Primary Config Fle      ::      /etc/httpd/conf/httpd.conf
DocumentRoot            ::      /var/www/html
ErrorLog                ::      /var/log/httpd/error_log
AccessLog               ::      /var/log/httpd/access_log
cgi-bin                 ::      /var/www/cgi-bin (empty and disabled by default)
binary                  ::      /usr/sbin/httpd
start/stop              ::      /sbin/service httpd {start|stop|restart|condrestart|reload|status|fullstatus|graceful|help|configtest}
Mandriva (Apache httpd 2.2):
ServerRoot              ::      /etc/httpd
Primary Config Fle      ::      /etc/httpd/conf/httpd.conf
DocumentRoot            ::      /var/www/html
ErrorLog                ::      /var/log/httpd/error_log
AccessLog               ::      /var/log/httpd/access_log
cgi-bin                 ::      /var/www/cgi-bin
binary                  ::      /usr/sbin/httpd
start/stop              ::      /sbin/service httpd
{start|stop|restart|reload|graceful|condreload|closelogs|update|condrestart|status|extendedstatus|configtest|configtest_vhosts|semcleanrestart|debug|show_defines}
Mac OS X (Leopard, Apache httpd 2.2):
ServerRoot              ::      /usr
Primary Config Fle      ::      /etc/apache2/httpd.conf
DocumentRoot            ::      /Library/WebServer/Documents
ErrorLog                ::      /var/log/apache2/error_log
AccessLog               ::      /var/log/apache2/access_log
cgi-bin                 ::      /Library/WebServer/CGI-Executables (empty by default)
binary                  ::      /usr/sbin/httpd
start/stop              ::      /usr/sbin/apachectl (start|stop|restart|fullstatus|status|graceful|graceful-stop|configtest|help)
Notes:
apachectl graceful is equivalent to apachectl restart and doesn't keep running connections alive. Similarly, graceful-stop is not graceful.
The /usr/sbin/envvars script is ineffective for setting environment variables. See http://lists.apple.com/archives/web-dev/2008/Apr/msg00059.html
NetBSD Apache httpd 2.0 and 1.3 from pkgsrc (layout is identical):
ServerRoot              ::      /usr/pkg
Config File             ::      /usr/pkg/etc/httpd/httpd.conf
DocumentRoot            ::      /usr/pkg/share/httpd/htdocs
ErrorLog                ::      /var/log/httpd/error_log
AccessLog               ::      /var/log/httpd/access_log
cgi-bin                 ::      /usr/pkg/libexec/cgi-bin
binaries (apachectl)    ::      /usr/pkg/sbin
start/stop              ::      /etc/rc.d/apache [fast|force|one](start stop restart rcvar reload status poll)
/etc/rc.conf variables  ::      apache=YES, apache_start="start" (or "startssl")
Notes:
The "apache" script must be copied from the installation default /usr/pkg/share/examples/rc.d to /etc/rc.d (for automatic rc.conf usage) or /usr/pkg/etc/rc.d (for advanced usage).
FreeBSD 6.1 (Apache httpd 2.2):
ServerRoot              ::      /usr/local
Config File             ::      /usr/local/etc/apache22/httpd.conf
DocumentRoot            ::      /usr/local/www/apache22/data
ErrorLog                ::      /var/log/httpd-error.log
AccessLog               ::      /var/log/httpd-access.log
cgi-bin                 ::      /usr/local/www/apache22/cgi-bin
binaries (apachectl)    ::      /usr/local/sbin
start/stop              ::      /usr/local/etc/rc.d/apache22.sh (start|restart|stop|reload|graceful|gracefulstop|configtest)
/etc/rc.conf variables  ::      apache22_enable="YES"
Notes:
Other variables to insert in rc.conf are listed in the comments at the top of the start/stop script
To start 2.2 on freebsd 6.1 the accf_http kernel module must be loaded. To do this once, run {{kldload accf_http }}. To do so at boot time, add accf_http_load=”YES” to /boot/loader.conf
Apache 2.2.6 in the FreeBSD 6.2 release will start regardless of the accf_http kernel module being loaded, and by default doesn't use it. To reverse this, add apache22_http_accept_enable="YES" to /etc/rc.conf (which will cause the kernel module to be loaded and Apache to use it).
FreeBSD 6.1 (Apache httpd 2.0):
ServerRoot              ::      /usr/local
Config File             ::      /usr/local/etc/apache2/httpd.conf
DocumentRoot            ::      /usr/local/www/data
ErrorLog                ::      /var/log/httpd-error.log
AccessLog               ::      /var/log/httpd-access.log
cgi-bin                 ::      /usr/local/www/cgi-bin
binaries (apachectl)    ::      /usr/local/sbin
start/stop              ::      /usr/local/etc/rc.d/apache2.sh [fast|force|one](start|restart|stop|reload|configtest|rcvar)
/etc/rc.conf variables  ::      apache2_enable="YES"
Notes:
Other variables to insert in rc.conf are listed in the comments at the top of the start/stop script
OpenBSD 5.0 (Apache httpd 1.3 (Hardened version for OpenBSD)):
ServerRoot              ::      /var/www
Config File             ::      /var/www/conf/httpd.conf
DocumentRoot            ::      /var/www/htdocs
ErrorLog                ::      /var/www/logs/error_log
AccessLog               ::      /var/www/logs/access_log
cgi-bin                 ::      /var/www/cgi-bin
binaries (apachectl)    ::      /usr/sbin/apachectl
start/stop              ::      /usr/sbin/apachectl (start|startssl|stop|restart|graceful|status|fullstatus|configtest|help)
user:group              ::      www:www
Notes:
The OpenBSD team has added default chrooting, privilege revocation, and other security-related improvements to their Apache httpd 1.3 package.
OpenBSD 5.0 (Apache httpd 2.2 (Unedited, non-hardened version)):
ServerRoot              ::      /var/apache2
Config File             ::      /etc/apache2/httpd2.conf
DocumentRoot            ::      /var/apache2/htdocs/
ErrorLog                ::      /var/apache2/logs/error_log
AccessLog               ::      /var/apache2/logs/access_log
cgi-bin                 ::      /var/apache2/cgi-bin
binaries (apachectl)    ::      /usr/local/sbin/apachectl2
start/stop              ::      /usr/local/sbin/apachectl2 (start|stop|restart|graceful|graceful-stop|status|fullstatus|configtest)
user:group              ::      _apache2:_apache2
Win32 (Apache httpd 2.2):
ServerRoot              ::      "C:/Program Files/Apache Software Foundation/Apache2.2"
Config File             ::      "C:/Program Files/Apache Software Foundation/Apache2.2/conf/httpd.conf"
DocumentRoot            ::      "C:/Program Files/Apache Software Foundation/Apache2.2/htdocs"
ErrorLog                ::      "C:/Program Files/Apache Software Foundation/Apache2.2/logs/error.log"
AccessLog               ::      "C:/Program Files/Apache Software Foundation/Apache2.2/logs/access.log"
cgi-bin                 ::      "C:/Program Files/Apache Software Foundation/Apache2.2/cgi-bin/"
binaries (apachectl)    ::      "C:/Program Files/Apache Software Foundation/Apache2.2/bin"
Notes;
There are extra config files in "C:/Program Files/Apache Software Foundation/Apache2.2/conf/extra" that can be included for options such as vhosts
Solaris 10 (Apache httpd 2.0):
ServerRoot              ::      /usr/apache2
Config File             ::      /etc/apache2/httpd.conf
DocumentRoot            ::      /var/apache2/htdocs
ErrorLog                ::      /var/apache2/logs/error_log
AccessLog               ::      /var/apache2/logs/access_log
cgi-bin                 ::      /var/apache2/cgi-bin
binaries                ::      /usr/apache2/bin
Notes:
Config needs to be copied from example file to httpd.conf. Apache-1.3 is the default installation in /etc/init.d and /etc/rc3.d files.
Slackware 14.0+ (Apache httpd 2.4):
ServerRoot              ::     /usr
DocumentRoot            ::     /svr/httpd/htdocs
AccessLog               ::     /var/log/httpd/access_log
ErrorLog                ::     /var/log/httpd/error_log
binaries (apachectl)    ::     /usr/sbin
modules                 ::     /usr/lib(64)/httpd
system startup script   ::     /etc/rc.d/rc.httpd (start|restart|graceful|graceful-stop|stop)
Apache config file      ::     /etc/httpd/httpd.conf
mod_ssl config file     ::     /etc/httpd/extra/httpd-ssl.conf
mod_php config file     ::     /etc/httpd/mod_php.conf
vhosts config file      ::     /etc/httpd/extra/httpd-vhosts.conf
cgi-bin                 ::     /srv/httpd/cgi-bin
on-line docs ("manual") ::     /srv/httpd/htdocs/manual
openSUSE and SLES (Apache httpd 2.2):
ServerRoot              ::      /srv/www
DocumentRoot            ::      /srv/www/htdocs
Apache Config File      ::      /etc/apache2/httpd.conf
Other Config Files      ::      /etc/sysconfig/apache2
SSL Config File         ::      /etc/apache2/ssl-global.conf
ErrorLog                ::      /var/log/apache2/error_log
AccessLog               ::      /var/log/apache2/access_log
cgi-bin                 ::      /srv/www/cgi-bin
binaries (apachectl)    ::      /usr/sbin
start/stop              ::      /etc/init.d/apache2 (start|restart|restart-graceful|reload|graceful|graceful-stop|stop|configtest)
Notes:
Modules are enabled in /etc/sysconfig/apache2 which is read by the startup script. The a2enmod/a2dismod tool can be used to activate/deactivate modules.
See /usr/share/doc/packages/apache2/README.SUSE for more information.
Gentoo (Apache httpd 2.2):
ServerRoot              ::      /usr/lib/apache2
DocumentRoot            ::      /var/www/localhost/htdocs
Apache Config File      ::      /etc/apache2/httpd.conf
Other Config Files      ::      /etc/conf.d/apache2
Default VHost Config    ::      /etc/apache2/vhosts.d/00_default_vhost.conf
Module Configuration    ::      /etc/apache2/modules.d
Module Locations        ::      /usr/lib/apache2/modules
ErrorLog                ::      /var/log/apache2/error_log
AccessLog               ::      /var/log/apache2/access_log
cgi-bin                 ::      /var/www/localhost/cgi-bin
binaries (apache2ctl)   ::      /usr/sbin
start/stop              ::      /etc/init.d/apache2 (start|restart|graceful|stop|configtest)
Notes:
To enable a module, "-D MODULENAME" must be added to APACHE_OPTS in /etc/conf.d/apache2
TODO:
Add:

Netware. eek!
Add apache group name in different distros (ex: ubuntu: www-data, CentOs: apache ...etc)

]]]

[[[
https://httpd.apache.org/docs/2.4/getting-started.html
===
Modules | Directives | FAQ | Glossary | Sitemap

Apache HTTP Server Version 2.4


<-
Apache > HTTP Server > Documentation > Version 2.4
Getting Started
Available Languages:  en  |  fr  |  ru

If you're completely new to the Apache HTTP Server, or even to running a website at all, you might not know where to start, or what questions to ask. This document walks you through the basics.

Support Apache!
Clients, Servers, and URLs
Hostnames and DNS
Configuration Files and Directives
Web Site Content
Log Files and Troubleshooting
What's next?
See also
Comments
top
Clients, Servers, and URLs
Addresses on the Web are expressed with URLs - Uniform Resource Locators - which specify a protocol (e.g. http), a servername (e.g. www.apache.org), a URL-path (e.g. /docs/current/getting-started.html), and possibly a query string (e.g. ?arg=value) used to pass additional arguments to the server.

A client (e.g., a web browser) connects to a server (e.g., your Apache HTTP Server), with the specified protocol, and makes a request for a resource using the URL-path.

The URL-path may represent any number of things on the server. It may be a file (like getting-started.html) a handler (like server-status) or some kind of program file (like index.php). We'll discuss this more below in the Web Site Content section.

The server will send a response consisting of a status code and, optionally, a response body. The status code indicates whether the request was successful, and, if not, what kind of error condition there was. This tells the client what it should do with the response. You can read about the possible response codes in HTTP Server wiki.

Details of the transaction, and any error conditions, are written to log files. This is discussed in greater detail below in the Logs Files and Troubleshooting section.

top
Hostnames and DNS
In order to connect to a server, the client will first have to resolve the servername to an IP address - the location on the Internet where the server resides. Thus, in order for your web server to be reachable, it is necessary that the servername be in DNS.

If you don't know how to do this, you'll need to contact your network administrator, or Internet service provider, to perform this step for you.

More than one hostname may point to the same IP address, and more than one IP address can be attached to the same physical server. Thus, you can run more than one web site on the same physical server, using a feature called virtual hosts.

If you are testing a server that is not Internet-accessible, you can put host names in your hosts file in order to do local resolution. For example, you might want to put a record in your hosts file to map a request for www.example.com to your local system, for testing purposes. This entry would look like:

127.0.0.1 www.example.com

A hosts file will probably be located at /etc/hosts or C:\Windows\system32\drivers\etc\hosts.

You can read more about the hosts file at Wikipedia.org/wiki/Hosts_(file), and more about DNS at Wikipedia.org/wiki/Domain_Name_System.

top
Configuration Files and Directives
The Apache HTTP Server is configured via simple text files. These files may be located any of a variety of places, depending on how exactly you installed the server. Common locations for these files may be found in the httpd wiki. If you installed httpd from source, the default location of the configuration files is /usr/local/apache2/conf. The default configuration file is usually called httpd.conf. This, too, can vary in third-party distributions of the server.

The configuration is frequently broken into multiple smaller files, for ease of management. These files are loaded via the Include directive. The names or locations of these sub-files are not magical, and may vary greatly from one installation to another. Arrange and subdivide these files as makes the most sense to you. If the file arrangement you have by default doesn't make sense to you, feel free to rearrange it.

The server is configured by placing configuration directives in these configuration files. A directive is a keyword followed by one or more arguments that set its value.

The question of "Where should I put that directive?" is generally answered by considering where you want a directive to be effective. If it is a global setting, it should appear in the configuration file, outside of any <Directory>, <Location>, <VirtualHost>, or other section. If it is to apply only to a particular directory, then it should go inside a <Directory> section referring to that directory, and so on. See the Configuration Sections document for further discussion of these sections.

In addition to the main configuration files, certain directives may go in .htaccess files located in the content directories. .htaccess files are primarily for people who do not have access to the main server configuration file(s). You can read more about .htaccess files in the .htaccess howto.

top
Web Site Content
Web site content can take many different forms, but may be broadly divided into static and dynamic content.

Static content is things like HTML files, image files, CSS files, and other files that reside in the filesystem. The DocumentRoot directive specifies where in your filesystem you should place these files. This directive is either set globally, or per virtual host. Look in your configuration file(s) to determine how this is set for your server.

Typically, a document called index.html will be served when a directory is requested without a file name being specified. For example, if DocumentRoot is set to /var/www/html and a request is made for http://www.example.com/work/, the file /var/www/html/work/index.html will be served to the client.

Dynamic content is anything that is generated at request time, and may change from one request to another. There are numerous ways that dynamic content may be generated. Various handlers are available to generate content. CGI programs may be written to generate content for your site.

Third-party modules like mod_php may be used to write code that does a variety of things. Many third-party applications, written using a variety of languages and tools, are available for download and installation on your Apache HTTP Server. Support of these third-party things is beyond the scope of this documentation, and you should find their documentation or other support forums to answer your questions about them.

top
Log Files and Troubleshooting
As an Apache HTTP Server administrator, your most valuable assets are the log files, and, in particular, the error log. Troubleshooting any problem without the error log is like driving with your eyes closed.

The location of the error log is defined by the ErrorLog directive, which may be set globally, or per virtual host. Entries in the error log tell you what went wrong, and when. They often also tell you how to fix it. Each error log message contains an error code, which you can search for online for even more detailed descriptions of how to address the problem. You can also configure your error log to contain a log ID which you can then correlate to an access log entry, so that you can determine what request caused the error condition.

You can read more about logging in the logs documentation.

top
What's next?
Once you have the prerequisites under your belt, it's time to move on.

This document covers only the bare basics. We hope that this gets you started, but there are many other things that you might need to know.

Download
Install
Configure
Start
Frequently Asked Questions
Available Languages:  en  |  fr  |  ru

top
Copyright 2024 The Apache Software Foundation.
Licensed under the Apache License, Version 2.0.Modules | Directives | FAQ | Glossary | Sitemap
]]]

[[[
https://skillstudy.net/tutorial/how-to-run-a-web-server-using-termux/
How to Run a Web Server Using Termux
===
How to Run a Web Server Using Termux
Unlock the Power of Your Android Device

Are you looking to harness the full potential of your Android device? Have you ever thought about running a web server right from your smartphone? In this article, we’ll explore the exciting possibilities of using Termux, a powerful terminal emulator for Android, to set up and run a web server. Whether you’re a developer, a hobbyist, or simply curious, this guide will walk you through the steps, providing a comprehensive overview of the process. So, let’s dive in and unlock the world of web serving from the palm of your hand!

What is Termux?
Before we delve into the intricacies of running a web server, let’s briefly discuss what Termux is. Termux is an Android terminal emulator and Linux environment app that provides a command-line interface, allowing you to execute various Linux commands and run packages and programs right on your Android device. With Termux, you can transform your smartphone into a powerful tool for productivity, development, and exploration.

Installing Termux
To get started, you’ll need to install Termux on your Android device. Follow these simple steps:

Open the Google Play Store on your Android device.
Search for “Termux” and tap on the official Termux app.
Click on “Install” and wait for the installation process to complete.
Once Termux is installed, you’re ready to embark on your web server setup journey!

Setting Up a Web Server
Step 1: Update and Upgrade Termux
Before we begin installing the necessary packages for our web server, let’s update and upgrade Termux to ensure we have the latest software versions:

$ apt update && apt upgrade
Step 2: Install the Required Packages
To run a web server, we need to install an HTTP server software and PHP. In this example, we’ll use the popular Apache HTTP Server and PHP:

$ pkg install apache php
Step 3: Start the Web Server
After the installation is complete, we can start the web server:

$ apachectl start
Congratulations! You now have a running web server on your Android device. But wait, there’s more!

Exploring Your Web Server
Now that your web server is up and running, let’s take a moment to explore its capabilities. Open your favorite web browser and enter localhost or 127.0.0.1 in the address bar. Voila! You’re greeted with the default Apache webpage.

Serving Web Content
To serve your own web content, navigate to the /var/www/html directory. This is where your web server looks for files to serve. You can place your HTML, CSS, JavaScript, and other web files here. For example, let’s create a simple HTML file:

$ echo "<html><body><h1>Welcome to my web server!</h1></body></html>" > /var/www/html/index.html
Now, if you refresh your web browser, you’ll see your custom webpage on your Android device.

Real-Life Examples
To inspire your creativity and provide practical examples, here are a few exciting use cases for running a web server on your Android device:

Personal Website: Create a personal website showcasing your portfolio, blog, or creative projects right from your smartphone. With the convenience of Termux, you can update and maintain your website on the go.
Demo Server: Need to demonstrate a web application or showcase a prototype? Use your Android device as a demo server during presentations or meetings. It’s a portable solution that fits in your pocket!

Local Development: Develop and test web applications directly on your Android device. With Termux, you have access to a full Linux environment, enabling you to experiment with various web technologies.

Conclusion
In this article, we’ve explored the fascinating world of running a web server using Termux on your Android device. We learned about Termux, its installation process, and the steps to set up a web server. We also discovered how to serve web content and explored real-life examples of utilizing a web server on your smartphone. Now it’s your turn to unleash your creativity and make the most of your Android device.

So, why wait? Grab your smartphone, install Termux, and let your imagination soar as you embark on this exciting journey of running a web server from the palm of your hand!

Note: Running a web server on your Android device may have security implications. Ensure you are aware of the risks involved and take appropriate measures to protect your device and network.

References:

Termux Official Website
Termux Wiki
Apache HTTP Server
PHP

Related
How to Deploy a Static Website with Termux: A Comprehensive Guide
Unlocking the Power of Termux to Host Your Static Website Are you fascinated by the world of web development? Do you dream of creating and deploying your own website but find the process overwhelming? Fear not, for in this comprehensive guide, we will walk you through the process of deploying…

March 16, 2024
Similar post


]]]

[[[
https://www.digitalocean.com/community/tutorials/host-a-web-server-on-android
How To Host A Web Server On Android
===
DigitalOcean
How To Host A Web Server On Android
Published on August 4, 2022
Android
author
Meghna Gangwar

How To Host A Web Server On Android
While we believe that this content benefits our community, we have not yet thoroughly reviewed it. If you have any suggestions for improvements, please let us know by clicking the “report an issue“ button at the bottom of the tutorial.

In this module, we will have a look at how we can host a web server on Android and port forward it using ngrok so that we can have a flexible webserver on the go.

Steps to host a web server on Android
Let’s get right into the steps to host a web server on our Android devices now.

1. Install Termux And Hacker’s Keyboard
First, we will need two Applications before we continue on : Termux (which will help us issue commands) and Hacker’s Keyboard (which will help us to use keys like Ctrl, Esc, Alt which are usually not available on standard Android Keyboards)

You can get Termux from their official website or from Google Playstore

Termux From Playstore
Termux From Playstore
You can install Hacker’s Keyboard as well for better navigation within the Termux window.

Hacker's Keyboard From Google Playstore
Hacker’s Keyboard From Google Playstore
2. Install Packages On Termux
Now we need to install some of the packages we require on Termux. Open the app and type in the following commands :

$ pkg update && pkg upgrade
This should upgrade our current system. Next up we will need to install some necessary packages with :

$ pkg install apache2 git neovim wget curl
3. Connect To Android Device Via SSH
Note that this section is completely optional. Here we will install some additional packages just to aid us during the whole process:

$ pkg install openssh neofetch fish nmap
First let’s enable ssh so that we can connect to our phone via our PC by :

$ sshd
Next, check your username and IP with ifconfig:

$ whoami
u0_a147
$ ifconfig wlan0
wlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.0.105  netmask 255.255.255.0  broadcast 192.168.0.255
        inet6 fe80::ce9f:7aff:fe81:3115  prefixlen 64  scopeid 0x20<link>
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
        txqueuelen 3000  (UNSPEC)
        RX packets 227165  bytes 311846650 (297.4 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 82264  bytes 7912862 (7.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

Now we need to check which port the SSH service is running. You can check it with:

$ nmap -sV 127.0.0.1
Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-12 14:44 IST
Nmap scan report for localhost (127.0.0.1)
Host is up (0.0075s latency).
Not shown: 999 closed ports
PORT     STATE SERVICE VERSION
8022/tcp open  ssh     OpenSSH 8.4 (protocol 2.0)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 4.87 seconds
Once you have the Port Number, switch over to your PC and connect to your device with :

$ ssh -p <PORT> <USER>@<IP>
For example, for me, the complete command would be :

$ ssh -p 8022 u0_a147@192.168.0.105
Next up change the default shell with :

$ chsh /data/data/com.termux/files/usr/bin/fish
At this point, you can issue commands to your device from the terminal of your PC

Connecting To Android Over SSH
Connecting To Android Over SSH
4. Start the webserver on Android
Now, we can start our server with:

$ apachectl
By default, the webpage is hosted on port 8080. Visiting the said port on our browser, we find the following message :

The Page Hosted On Port 8080
The Page Hosted On Port 8080
To edit the message we need to change the index.html file with the vi editor:

$ vi $PREFIX/share/apache2/default-site/htdocs/index.html
Let’s change the contents of index.html to :

<html><body><h1>Android !</h1></body></html>
Refreshing the page, we should now see our changes being reflected :

Our Changed HTML Page
Our Changed HTML Page
At this point, you can customize your page to look/do whatever you want it to do. However, to extend our functionality even further, we can enable port forwarding with ngrok !

5. Port Forwarding With Ngrok
First, we need to get the compressed file from the offical website with :

$ wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm64.tgz
Unzip the file with :

$ tar -xvzf ngrok-stable-linux-arm64.tgz
Next up, you need to sign up on their website to get an authorization token.

Ngrok
Ngrok
Now, you should get an authorization toke. To add the token to the default config file, type in :

$ ./ngrok authtoken <token>
Now, we should have access more features and longer sessions. Finally with our webserver still running, type :

$ ./ngrok http 8080
Port Forwarding With Ngrok
Port Forwarding With Ngrok
We get a ngrok link, where we would find our webserver’s homepage :

Our Page Being Served Via Ngrok
Our Page Being Served Via Ngrok
Now, we need can access our server from outside our local network using the ngrok link !

Conclusion
Thus in this way, we can use our Android phones as web servers. On non-rooted phones, you can host a webserver on any of the higher ports while on rooted phones you can use the default port 80.


]]]
[[[
https://stackoverflow.com/questions/21244285/how-to-create-a-simplest-web-server-in-android
===
NanoHttpd is a full-fledged web server within a single java class. You'll be up and running in minutes.
pkg update && pkg upgrade
xxx:pkg show nanohttpd
xxx:pkg install nanohttpd
https://github.com/NanoHttpd/nanohttpd
http://nanohttpd.org/
Last Published: 2016-02-22 | NanoHttpd-Project / Version: 2.3.0
NanoHTTPD – a tiny web server in Java
NanoHTTPD is a light-weight HTTP server designed for embedding in other applications, released under a Modified BSD licence.

It is being developed at Github and uses Apache Maven for builds & unit testing:

Build status: Build Status
Coverage Status: Coverage Status
Current central released version: Maven Central
Quickstart
We’ll create a custom HTTP server project using Maven for build/dep system. This tutorial assumes you are using a Unix variant and a shell. First, install Maven and Java SDK if not already installed. Then run:

mvn compile
mvn exec:java -pl webserver -Dexec.mainClass="fi.iki.elonen.SimpleWebServer"
You should now have a HTTP file server running on http://localhost:8080/.

Custom web app
Let’s raise the bar and build a custom web application next:

mvn archetype:generate -DgroupId=com.example -DartifactId=myHellopApp -DinteractiveMode=false
cd myHellopApp
Edit pom.xml, and add this between <dependencies>:

<dependency>
    <groupId>org.nanohttpd</groupId> <!-- <groupId>com.nanohttpd</groupId> for 2.1.0 and earlier -->
    <artifactId>nanohttpd</artifactId>
    <version>2.2.0</version>
</dependency>
Edit src/main/java/com/example/App.java and replace it with: ```java package com.example;

import java.io.IOException;
import java.util.Map;

import fi.iki.elonen.NanoHTTPD;

public class App extends NanoHTTPD {

    public App() throws IOException {
        super(8080);
        start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);
        System.out.println("\nRunning! Point your browers to http://localhost:8080/ \n");
    }

    public static void main(String[] args) {
        try {
            new App();
        } catch (IOException ioe) {
            System.err.println("Couldn't start server:\n" + ioe);
        }
    }

    @Override
    public Response serve(IHTTPSession session) {
        String msg = "<html><body><h1>Hello server</h1>\n";
        Map<String, String> parms = session.getParms();
        if (parms.get("username") == null) {
            msg += "<form action='?' method='get'>\n  <p>Your name: <input type='text' name='username'></p>\n" + "</form>\n";
        } else {
            msg += "<p>Hello, " + parms.get("username") + "!</p>";
        }
        return newFixedLengthResponse(msg + "</body></html>\n");
    }
}
```

Compile and run the server:

mvn compile
mvn exec:java -Dexec.mainClass="com.example.App"
If it started ok, point your browser at http://localhost:8080/ and enjoy a web server that asks your name and replies with a greeting.

Nanolets
Nanolets are like sevlet’s only that they have a extrem low profile. They offer an easy to use system for a more complex server application. This text has to be extrended with an example, so for now take a look at the unit tests for the usage. https://github.com/NanoHttpd/nanohttpd/blob/master/nanolets/src/test/java/fi/iki/elonen/router/AppNanolets.java

Status
We are currently in the process of stabilizing NanoHttpd from the many pull requests and feature requests that were integrated over the last few months. The next release will come soon, and there will not be any more “intended” major changes before the next release. If you want to use the bleeding edge version, you can clone it from Github, or get it from sonatype.org (see “Maven dependencies / Living on the edge” below).

Project structure
NanoHTTPD project currently consist of four parts:

/core – Fully functional HTTP(s) server consisting of one (1) Java file, ready to be customized/inherited for your own project

/samples – Simple examples on how to customize NanoHTTPD. See HelloServer.java for a killer app that greets you enthusiastically!

/websocket – Websocket implementation, also in a single Java file. Depends on core.

/webserver – Standalone file server. Run & enjoy. A popular use seems to be serving files out off an Android device.

/nanolets – Standalone nano app server, giving a servlet like system to the implementor.

/fileupload – integration of the apache common file upload library.

Features
Core
Only one Java file, providing HTTP 1.1 support.
No fixed config files, logging, authorization etc. (Implement by yourself if you need them. Errors are passed to java.util.logging, though.)
Support for HTTPS (SSL)
Basic support for cookies
Supports parameter parsing of GET and POST methods.
Some built-in support for HEAD, POST and DELETE requests. You can easily implement/customize any HTTP method, though.
Supports file upload. Uses memory for small uploads, temp files for large ones.
Never caches anything.
Does not limit bandwidth, request time or simultaneous connections by default.
All header names are converted to lower case so they don’t vary between browsers/clients.
Persistent connections (Connection “keep-alive”) support allowing multiple requests to be served over a single socket connection.
Websocket
Tested on Firefox, Chrome and IE.
Webserver
Default code serves files and shows (prints on console) all HTTP parameters and headers.
Supports both dynamic content and file serving.
File server supports directory listing, index.html and index.htm.
File server supports partial content (streaming & continue download).
File server supports ETags.
File server does the 301 redirection trick for directories without /.
File server serves also very long files without memory overhead.
Contains a built-in list of most common MIME types.
Runtime extension support (extensions that serve particular MIME types) - example extension that serves Markdown formatted files. Simply including an extension JAR in the webserver classpath is enough for the extension to be loaded.
Simple CORS support via --cors paramater
by default serves Access-Control-Allow-Headers: origin,accept,content-type
possibility to set Access-Control-Allow-Headers by setting System property: AccessControlAllowHeader
_example: _ -DAccessControlAllowHeader=origin,accept,content-type,Authorization
possible values:
--cors: activates CORS support, Access-Control-Allow-Origin will be set to *
--cors=some_value: Access-Control-Allow-Origin will be set to some_value.
CORS argument examples

--cors=http://appOne.company.com
--cors="http://appOne.company.com, http://appTwo.company.com": note the double quotes so that the 2 URLs are considered part of a single argument.
Maven dependencies
NanoHTTPD is a Maven based project and deployed to central. Most development environments have means to access the central repository. The coordinates to use in Maven are:

<dependencies>
    <dependency>
        <groupId>org.nanohttpd</groupId> <!-- <groupId>com.nanohttpd</groupId> for 2.1.0 and earlier -->
        <artifactId>nanohttpd</artifactId>
        <version>2.2.0</version>
    </dependency>
</dependencies>
The coordinates for your development environment should correspond to these. When looking for an older version take care because we switched groupId from com.nanohttpd to org.nanohttpd in mid 2015.

Next it depends what you are useing nanohttpd for, there are tree main usages.

Gradle dependencies
In gradle you can use nano http the same way because gradle accesses the same central repository:

dependencies {
    runtime(
        [group: 'org.nanohttpd', name: 'nanohttpd', version: '2.2.0'],
    )
}
Just replace the name with the artifact id of the module you want to use and gradle will find it for you.

Develop your own specialized HTTP service
For a specialized HTTP (HTTPS) service you can use the module with artifactId nanohttpd.

    <dependency>
        <groupId>org.nanohttpd</groupId> <!-- <groupId>com.nanohttpd</groupId> for 2.1.0 and earlier -->
        <artifactId>nanohttpd</artifactId>
        <version>2.2.0VERSION</version>
    </dependency>
Here you write your own subclass of fi.iki.elonen.NanoHTTPD to configure and to serve the requests.

Develop a websocket based service
For a specialized websocket service you can use the module with artifactId nanohttpd-websocket.

    <dependency>
        <groupId>org.nanohttpd</groupId> <!-- <groupId>com.nanohttpd</groupId> for 2.1.0 and earlier -->
        <artifactId>nanohttpd-websocket</artifactId>
        <version>2.2.0</version>
    </dependency>
Here you write your own subclass of fi.iki.elonen.NanoWebSocketServer to configure and to serve the websocket requests. A small standard echo example is included as fi.iki.elonen.samples.echo.DebugWebSocketServer. You can use it as a starting point to implement your own services.

Develop a custom HTTP file server
For a more classic aproach, perhaps to just create a HTTP server serving mostly service files from your disk, you can use the module with artifactId nanohttpd-webserver.

    <dependency>
        <groupId>org.nanohttpd</groupId>
        <artifactId>nanohttpd-webserver</artifactId>
        <version>2.2.0</version>
    </dependency>
The included class fi.iki.elonen.SimpleWebServer is intended to be used as a starting point for your own implementation but it also can be used as is. Staring the class as is will start a http server on port 8080 and publishing the current directory.

Project Application
ChatGPT Plugins Development Service for your business

Mobile application of a gas production company Gas Ertrag

Cryptocurrency bank Bitcoin Bank

A popular game in Brazil - Spaceman
Using artificial intelligence to buy and sell stocks Quantum AI

Living on the edge
The latest Github master version can be fetched through sonatype.org:

<dependencies>
    <dependency>
        <artifactId>nanohttpd</artifactId>
        <groupId>org.nanohttpd</groupId>
        <version>XXXXX-SNAPSHOT</version>
    </dependency>
</dependencies>
...
<repositories>
    <repository>
        <id>sonatype-snapshots</id>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
    </repository>
</repositories>
generating an self signed ssl certificate
Just a hint how to generate a certificate for localhost.

keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity 360 -keysize 2048 -ext SAN=DNS:localhost,IP:127.0.0.1  -validity 9999
This will generate a keystore file named ‘keystore.jks’ with a self signed certificate for a host named localhost with the ip adress 127.0.0.1 . Now you can use:

server.makeSecure(NanoHTTPD.makeSSLSocketFactory("/keystore.jks", "password".toCharArray()), null);
Before you start the server to make Nanohttpd serve https connections, when you make sure ‘keystore.jks’ is in your classpath .

Thank you to everyone who has reported bugs and suggested fixes.

Copyright © 2012-2023 nanohttpd. All Rights Reserved.
]]]
]]]]]]]






[[[
考虑新服务器:以替代:apache2
  view others/app/termux/apt_pkg.txt
===
https://www.makeuseof.com/tag/use-linux-command-line-android-termux/
===
Install Servers in Termux
  Apache
  nginx
  lighttpd
pkg show lighttpd
===
How to Use the Linux Command Line on Android With Termux
Terminal
4
By 
Christian Cawley
Dec 2, 2019


Follow
Share
Link copied to clipboard
Image Credit: ST22Studio via Shutterstock.com
Android is a capable operating system, as it offers many apps that approach desktop class. Yet sometimes, it takes a fair bit of effort to accomplish something on Android that would be a snap on a desktop.

MUO VIDEO OF THE DAY
One solution is to take advantage of Android's hidden Linux infrastructure. The Termux app provides a command line environment and allows you to install honest-to-goodness Linux apps on your Android device. Here's how to use the Termux app.

Why Use Termux?
There are already some apps in the Play Store that are Android ports of Linux applications. These differ from Termux in that they replicate those Linux apps, but they're made in an "Android way."

In contrast, Termux is a self-contained Linux environment. Its programs are (for all intents and purposes) the same as their Linux counterparts. This conveys some advantages over the ported applications:

Consistency: Linux apps that have been ported to Android require a user interface of some kind. The user experience on Android largely depends on how much effort the developer puts into it. Conversely, Termux apps are the same as the Linux versions, from keyboard shortcuts to how you install them.
Compactness: The addition of Android code can cause some slim applications to become heavy. For example, an Android SSH client might be anywhere from 2MB to 12MB in size. Compare this to Dropbear, available in Termux, which weighs in at 396KB (that's kilobytes) installed. And it provides an SSH server too.
Get a Linux command line on Android with Termux
Timeliness: When an application receives an update, you remain at the mercy of the Android app's developer for an upgrade. In contrast, Termux applications are standard Linux packages that require less maintenance. They may even be created automatically alongside the desktop versions. You're likely to get access to new features more quickly with Termux.
Price: There is a chance any app you purchase from the Play Store will have a charge associated with it. All the apps in Termux are free (and open source), as is Termux itself.
How to Use Termux
Before diving in, understand that Termux is primarily a command line environment. There's no fancy user interface with shiny buttons here. This goes not only for the base Termux package, but its apps as well. You won't get the newest version of LibreOffice with this method.

Most importantly, you must be comfortable with the command line in order to install and use these programs on Termux. To develop some familiarity, check our list of the most-used Linux Terminal commands.

When you're ready, grab your phone or tablet and install Termux.

Download:Termux (Free)

Basic Termux Commands You Should Know
Launching Termux will drop you straight into a command line environment. From here, you can install new tools. Termux uses the same package installer as found in Debian, Ubuntu, and related Linux distros.

Advanced Packaging Tools (more commonly referred to as APT) is used to find, install, and remove software in Termux. Start off by updating packages and upgrading with these commands:

apt update

apt upgrade
Update packages in the Termux command line
Next, find out what apps are available:

apt list
To find out more about one of these packages, use

apt show [package name]
This will display the name, maintainer, file size, dependencies, and other useful details. To install an app, simply use:

apt install [package name]
Our guide to using APT will tell you more about this tool, such as how to upgrade packages. You can run an installed tool by entering its name at the Terminal prompt in the Termux command line.

In addition to apt, this list of built-in commands works in Termux on Android:

cp
lets you copy a file
mv
will move a file
ls
lists the contents of a directory
rm
deletes (removes) data
ln
creates a symbolic link (for example,
ln /data/data/com.termux/files/home/documents to /sdcard/Documents
)
With these built-in tools, you reduce the need for an Android file manager. They also save you from having to root your phone to enjoy such functionality.

Linux Apps You Can Install With the Termux Command Line
Using apt with Termux, you can install several useful Linux apps on Android. These fall into several categories---let's look at some of the highlights.

Text Editors
Termux provides recent versions of both popular Linux text editors: VIM and Emacs. Other editors, such as the minimalist nano, are also available.

Of course, Android has a lot of text editors already. So what do Emacs and Vim bring to the platform? Well, if you like to work in Markdown, both support it well. Into the "distraction-free" mindset? It doesn't get much more distraction-free than VIM---check out our VIM shortcuts cheat sheet for help mastering it.


Need something to take notes and provide to-dos? Org-mode in Emacs has you covered. You can even use Emacs as your file manager, screenwriting app, Trello client, music player, or to play Minesweeper.

Why switch? Android text editors tend to focus on one standout feature. For example, one may focus on distraction-free drafting, another can preview Markdown and other formatting, and still others might be built on keeping notes (though they're really just text editors at their core).

Terminal-based editors can fulfill these needs in a single program, while also being available on desktop platforms.

Termux Command Line Utilities
Termux packages include several useful Linux command line utilities:

gnuplot: A mathematical graphing program
ImageMagick: An image manipulation and conversion toolkit
p7zip: An archiving utility for the 7-Zip compression scheme
UnRAR: A different archive tool for the RAR format
Wget: A program to fetch files over the internet via HTTP or FTP

Why switch? These are dedicated programs with a lot to offer.

Install Servers in Termux
We've already shown how you can turn your Android device into a web server with specific apps. Termux similarly provides genuine Linux web servers like Apache, nginx, and Lighttpd.

But why would you want to run a web server on your Android device?

In addition to programming, bear in mind that many of today's best applications are web apps. For example, you could install nginx, the PostgreSQL database, and Python, then use the Taiga project management platform. This is a lot of utility, all without having to sign up for any third-party services or hosting.

Termux also includes Dropbear, which provides an SSH server (and client) to log into your phone/tablet and transfer files. This is useful in situations where you want to exchange a few files but don't want to use cloud services. Simply start up the Dropbear server, use an SSH client to grab what you need, and shut it down.

Why switch? Apps like Tiny Web Server allow you to spin up a web server. But what's more intriguing than having a lightweight server you can start from the command line?

Development Apps in the Termux Command Line
While many Android apps (listed as "code editors") provide the ability to write code, they may not provide the languages themselves. With Termux, you can test your code on your phone or tablet.

Install Python development tools in the Termux command line

It offers standard distributions of programming languages such as:

BASH shell (the default available out of the box, and a great way to get started hacking around)
Python (both v2 and v3 are available)
PHP
Ruby
Source control systems git and Subversion are also available, which have their uses beyond just development. If you like being in control of your own data, source control lets you stash your files wherever you want. You also control when you send updates to other devices, and can use "tags" to label versions.

Why switch? There are some programming language packages for Android, such QPython. But these provide their own bulky UIs. They may also require additional apps to be fully useful.


Android-based apps are available for both git and svn. However, you need to have a separate app for each source control type. Termux provides both in the same package for free. By going with source control, you can also cut down on clients for cloud syncing services such as Dropbox.

Add Linux to Android With Termux Commands
Termux is a super-compact offering that opens a lot of functionality for your Android device. The command line is one of the most powerful features of Linux, and Termux builds on your device's Linux kernel to make you more efficient on the go.

And who knows, maybe dabbling with these apps will convince you to try Linux on the desktop as well. Check out our Linux commands cheat sheet for some help giving it a try.


Android
Linux
Terminal


]]]
