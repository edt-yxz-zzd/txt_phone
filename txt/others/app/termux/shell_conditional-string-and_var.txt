
e others/app/termux/shell_conditional-string-and_var.txt
view others/app/termux/help/bash.man.txt

inside [[  ]]
   When used with [[, the < and > operators sort lexicographically using the current locale.  The test command sorts using ASCII ordering.
   -o optname
          True if the shell option optname is enabled.  See the list of options under the description of the -o option to the set builtin below.
   -v varname
          True if the shell variable varname is set (has been assigned a value).
   -R varname
          True if the shell variable varname is set and is a name reference.
   -z string
          True if the length of string is zero.
   string
   -n string
          True if the length of string is non-zero.

   string1 == string2
   string1 = string2
          True if the strings are equal.  = should be used with the test command for POSIX conformance.  When used with the [[ command, this performs pattern matching as described above (Compound Commands).

   string1 != string2
          True if the strings are not equal.

   string1 < string2
          True if string1 sorts before string2 lexicographically.

   string1 > string2
          True if string1 sorts after string2 lexicographically.

   arg1 OP arg2
          OP is one of -eq, -ne, -lt, -le, -gt, or -ge.
          These arithmetic binary operators return true if arg1 is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to arg2, respectively.
          Arg1 and arg2 may be positive or negative integers.  When used with the [[ command, Arg1 and Arg2 are evaluated as arithmetic expressions (see ARITHMETIC EVALUATION above).




#!!! rhs is regex !!!
When used with [[, the < and > operators sort lexicographically using the current locale.

When the == and != operators are used, the string to the right of the operator is considered a pattern and matched according to the rules described below under Pattern Matching, as if the extglob shell option were enabled.
    The = operator is equivalent to ==.
    If the nocasematch shell option is enabled, the match is performed without regard to the case of alphabetic characters.
The return value is 0 if the string matches (==) or does not match (!=) the pattern, and 1 otherwise.  Any part of the pattern may be quoted to force the quoted portion to be matched as a string.

An additional binary operator, =~, is available, with the same precedence as == and !=.  When it is used, the string to the right of the operator is considered a POSIX extended regular expression and matched accordingly (using the POSIX regcomp and regexec interfaces usually described in regex(3)).
    The return value is 0 if the string matches the pattern, and 1 otherwise.  If the regular expression is syntactically incorrect, the conditional expression's return value is 2.
    If the nocasematch shell option is enabled, the match is performed without regard to the case of alphabetic characters.
    Any part of the pattern may be quoted to force the quoted portion to be matched as a string.
    Bracket expressions in regular expressions must be treated carefully, since normal quoting characters lose their meanings between brackets.
    If the pattern is stored in a shell variable, quoting the variable expansion forces the entire pattern to be matched as a string.

    The pattern will match if it matches any part of the string.
        Anchor the pattern using the ^ and $ regular expression operators to force it to match the entire string.
    The array variable BASH_REMATCH records which parts of the string matched the pattern.
        The element of BASH_REMATCH with index 0 contains the portion of the string matching the entire regular expression.
        Substrings matched by parenthesized subexpressions within the regular expression are saved in the remaining BASH_REMATCH indices. The element of BASH_REMATCH with index n is the portion of the string matching the nth parenthesized subexpression.



