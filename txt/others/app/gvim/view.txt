e others/app/gvim/view.txt

:view +set\ nomodifiable  /sdcard/0my_files/tmp/0tmp


view
  ==>>'readonly'
    but be 'modifiable' and saved by:
      :w!
  what really useful is 'nomodifiable'
    but it seems affect later 『:e』

vim
	:view <file>
view === vim -R


:h :edit
:h ++opt
:h +cmd
:h 'fileformat'
:h 'fileencoding'
:h 'readonly'
				   *'readonly'* *'ro'* *'noreadonly'* *'noro'*
:h 'modifiable'
				*'modifiable'* *'ma'* *'nomodifiable'* *'noma'*

:edit ++bin
:edit ++nobin

:edit ++ff=unix
:edit ++ff=dos

:edit ++enc=utf8
:edit ++enc=gbk

:view ++nobin ++ff=unix ++enc=utf8 +set\ readonly\ |\ set\ nomodifiable  /sdcard/0my_files/tmp/0tmp
  bug: 『'+set\ ...'』
    be part of file name
  bug: 『+'set ...'』
    『'』
  bug: 『+set' ...'』
    『'』
  bug: 『+set\ '...'』
    『'』
  bug: 『+:set\ ...』
    『:』
  bug: 『+set\ ... +set\ ...』
    snd part be part of file name

:view +set\ nomodifiable  /sdcard/0my_files/tmp/0tmp


[[
:h ++
:h ++opt
    ff     or  fileformat   overrides 'fileformat'
    enc    or  encoding	    overrides 'fileencoding'
    bin    or  binary	    sets 'binary'
    nobin  or  nobinary	    resets 'binary'
    bad			    specifies behavior for bad characters
    edit		    for |:read| only: keep option values as if editing
			    a file

]]

[[
:h +cmd

	+		Start at the last line.
	+{num}		Start at line {num}.
	+/{pat}		Start at first line containing {pat}.
	+{command}	Execute {command} after opening the new file.
			{command} is any Ex command.

	:edit  +/The\ book	     file
	:edit  +/dir\ dirname\\      file
	:edit  +set\ dir=c:\\\\temp  file
Note that in the last example the number of backslashes is halved twice: Once for the "+cmd" argument and once for the ":set" command.

]]

