
e others/app/gvim/register.txt
:h :registers
:h p
:h y
:h :redir

[[[
尝试redir++registers
===
#TIPS:执行命令:使用『yy』『q:』『p』『回车键』
===

:set runtimepath?
:redir @">
:set runtimepath?
:redir END
p

得:[[
:set runtimepath?


  runtimepath=~/.vim,/storage/emulated/0/Android/data/com.droidvim/files/runtime/etc/vimfiles,/storage/emulated/0/Android/data/com.droidvim/files/runtime,/storage/emulated/0/Android/data/com.droidvim/files/runtime/etc/vimfiles/after,~/.vim/after
3 more lines
3 more lines
3 行被去掉...econds ago
3 行被去掉...econds ago-- 插入 --
7 lines yanked
]]

:redir @">
:ls
:redir END
p
得:
[[
:ls


  1  h   "others/app/gvim/droidvim.txt" 第 1 行
  4  h   "[未命名]"                     第 1 行
  5  h   "~/.vimrc"                     第 85 行
  6 #h + "others/app/gvim/set_color.txt" 第 51 行
 30 %a + "others/app/gvim/register.txt" 第 32 行
 35  h + "script/matrix_chain_product.py" 第 1321 行-- 插入 --
]]



]]]

[[[
:h :registers
===
							*:reg* *:registers*
:reg[isters]		Display the type and contents of all numbered and
			named registers.  If a register is written to for
			|:redir| it will not be listed.
			Type can be one of:
			"c"	for |characterwise| text
			"l"	for |linewise| text
			"b"	for |blockwise-visual| text


:reg[isters] {arg}	Display the contents of the numbered and named
			registers that are mentioned in {arg}.  For example: >
				:reg 1a
<			to display registers '1' and 'a'.  Spaces are allowed
			in {arg}.

]]]
[[[
:h p
===
							*p* *put* *E353*
["x]p			Put the text [from register x] after the cursor
			[count] times.
]]]
[[[
:h y
===
							*y* *yank*
["x]y{motion}		Yank {motion} text [into register x].  When no
			characters are to be yanked (e.g., "y0" in column 1),
			this is an error when 'cpoptions' includes the 'E'
			flag.

]]]
[[[
:h :redir
===
:redir END
  End redirecting messages.
:redir @">
  Redirect messages to the unnamed register.
:redir @">>
  Append messages to the unnamed register.
:redir @{a-z}>
  Redirect messages to register {a-z}.
:redir @{a-z}>>
  Append messages to register {a-z}.
:redir @*>>
:redir @+>>
  Append messages to the selection or clipboard.

===
							*:redi* *:redir*
:redi[r][!] > {file}	Redirect messages to file {file}.  The messages which
			are the output of commands are written to that file,
			until redirection ends.  The messages are also still
			shown on the screen.  When [!] is included, an
			existing file is overwritten.  When [!] is omitted,
			and {file} exists, this command fails.

			Only one ":redir" can be active at a time.  Calls to
			":redir" will close any active redirection before
			starting redirection to the new target.  For recursive
			use check out |execute()|.

			To stop the messages and commands from being echoed to
			the screen, put the commands in a function and call it
			with ":silent call Function()".
			An alternative is to use the 'verbosefile' option,
			this can be used in combination with ":redir".

:redi[r] >> {file}	Redirect messages to file {file}.  Append if {file}
			already exists.

:redi[r] @{a-zA-Z}
:redi[r] @{a-zA-Z}>	Redirect messages to register {a-z}.  Append to the
			contents of the register if its name is given
			uppercase {A-Z}.  The ">" after the register name is
			optional.
:redi[r] @{a-z}>>	Append messages to register {a-z}.

:redi[r] @*>
:redi[r] @+>		Redirect messages to the selection or clipboard. For
			backward compatibility, the ">" after the register
			name can be omitted. See |quotestar| and |quoteplus|.
:redi[r] @*>>
:redi[r] @+>>		Append messages to the selection or clipboard.

:redi[r] @">		Redirect messages to the unnamed register. For
			backward compatibility, the ">" after the register
			name can be omitted.
:redi[r] @">>		Append messages to the unnamed register.

:redi[r] => {var}	Redirect messages to a variable.  If the variable
			doesn't exist, then it is created.  If the variable
			exists, then it is initialized to an empty string.
			The variable will remain empty until redirection ends.
			Only string variables can be used.  After the
			redirection starts, if the variable is removed or
			locked or the variable type is changed, then further
			command output messages will cause errors.
			To get the output of one command the |execute()|
			function can be used.

:redi[r] =>> {var}	Append messages to an existing variable.  Only string
			variables can be used.

:redi[r] END		End redirecting messages.


]]]
