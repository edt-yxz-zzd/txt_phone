
e others/我的叶子/待办事项牜短期.txt


:r !date +@\%Y\%m\%d

@20250312
整数分解牜尸方法:
  x:=(g0:=g0**e0)*(g1:=g1**e1) + (g2:=g2**e2)
  [x==(g0**e0**k)*(g1**e1**k) + (g2**e2**k)]
  或者:矩阵...
  x:=U * (M:=M**2) * V
  [x==U * (M**2**k) * V]

@20250226
制表冫间歇性素数数量扌
  num_primes_le
    [num_primes_le(PRIMES_S1[n]) == n]
    [PRIMES_S1[1+num_primes_le(x)] == min_prime_gt_(x)]
    [PRIMES_S1[num_primes_le(x)] == max_prime_le_(x)]
  [1..=2**40]
    记录每2**16或2**20
  即:[num_primes_le(j) for j in range(2**16, 2**40+1, 2**16)]
  或:[num_primes_le(j) for j in range(2**20, 2**40+1, 2**20)]
  配合:is_prime__le_{2**81}:扫描小区间
  >>> 2**16 # 6万
  65536
  >>> 2**20 # 1百万
  1048576
  >>> 2**24 # 1千万
  16777216
  >>> 2**40 # 1万亿
  1099511627776

  1 0995 1162 7776
  >>> 2**40/10**12
  1.099511627776


@20250226
数值计算冫前缀峰值纟比率纟素数间距与该素数对数平方扌:(diff_PRIMES_S1[n] / (ln(PRIMES_S1[n])**2))
  !! [素数间距猜想冫素数间距估计约不超过对数平方:conjecture_Cramer_1937:diff_PRIMES_S1[n] == O(ln(PRIMES_S1[n])**2)]

@20250225
prome gap:
  [n..<2*n]
  [n..<n+sqrt(n)]
  [n..<n+log2(n)**k]
  =>用于更新素数筛:view ../../python3_src/seed/math/prime_gens.py
  =>用于搜索素数
  /sdcard/0my_files/book/math/factorint/snd/The new book of prime number records(3ed)(1996)(Ribenboim).djvu
  e ../../python3_src/seed/math/prime_pint/generate_primes.py
    生成PRIMES[?]
    估算PRIMES[n]的上限
  e ../../python3_src/seed/math/prime_pint/num_primes_le.py
    估算num_primes_le(x)
    精确计算num_primes_le(x)

e ../lots/NOTE/math-book/prime/The_new_book_of_prime_number_records-note.txt





@20250225
枚举冫正整数牜不含平方因子扌
  /sdcard/0my_files/book/math/factorint/202308/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance)/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance).pdf
  e script/辅助冫素性判定牜高斯和.py
  squarefree
  view ../../python3_src/seed/math/iter_sorted_products_of_uints.py
  grep 'square[a-z_ -]*free'  -i  -r ../../python3_src/seed/math/ script/辅助冫素性判定牜高斯和.py
  grep 'merge[a-z_]*_ex'  -i  -r ../../python3_src/seed/math/

  view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
    from seed.for_libs.for_heapq import iter_merge_sorted_iterable_exs_, merge_ex
    #def merge_ex(*sorted_iterable_exs, key4stable:[False,callable]=False, key4le=None, __le__=None, reverse=False, unique:[bool,callable]=False, obj2value_:[None,callable]=None):
    #   '# [sorted_iterable_exs :: [sorted<fst> Iter (x, may sorted_iterable_exs{all <= x})]] # [[key4stable := False] -> [unstable sort]]'



@20250225
计算冫圆周率扌
  e others/数学/BBP-type-formulas[浮点数片段截取].txt



@20250226
列表冫分圆多项式扌
[n>=1]:
  cyclotomic polynomial
  [PHI(n;x) =[def]= the polynomial of smallest degree having as roots all the primitive n-th roots of 1]
  a primitive nth root of 1
  [r(n) =[def]= cos(2*pi/n) +1j*sin(2*pi/n)]
  [PHI(n;x) == II[(x-r(n)**e) | [[e:<-[1..=n]][gcd(e,n)==1]]]]
  [(x**n - 1) == II[PHI(m;x) | [[m:<-[1..=n]][n%m==0]]]]
  [PHI(n;x) == (x**n - 1)/gcd((x**n - 1), II[(x**m - 1) | [[m:<-[1..<n]][n%m==0]]])]
[is_prime_(p)]:
  [PHI(p;x) == (x**p - 1)/(x-1)]
  [m>=1][m%p==0]:
    [PHI(p*m;x) == PHI(m;x**p)]
    也就是说，重点在于squarefree部分
  [m>=1][m%p=!=0]:
    [PHI(p*m;x) == PHI(m;x**p)/PHI(m;x)]
      计算squarefree部分
    =>:
    [e>=1]:
      [PHI(m*p**e;x) == PHI(m;x**p**e)/PHI(m;x**p**(e-1))]
[n::int][y::real][n>=2][y>1]:
  [{p | [[p:<-[1..]][is_prime_(p)][(y**n-1)%p==0][@[m:<-[1..<n]] -> [(y**m-1)%p=!=0]]]}
  # <=
  == {p | [[p:<-[1..]][is_prime_(p)][p%n==1][PHI(n;y)%p==0]]}
  # <=
  == {p | [[p:<-[1..]][is_prime_(p)][p%n=!=0][PHI(n;y)%p==0]]}
  ]
monic polynomial with integer coefficients.
coincide
extensive calculations
surpass



@20250314
TODO:转化为%m不相等？phi(m):费马大定理: Fermat's last theorem
  [[n:<-[3..]] -> [@[x,y,z:<-[1..]] -> [x**n+y**n=!=z**n]]]
  <<==
  ??? [[n:<-[3..]] -> ?[m:<-[3..]] -> [e:=phi(m)] -> [n%e == 0] -> [@[x,y,z:<-[1..]] -> [x**e+y**e=!=z**e]]]
    但是:[x**e=[%m]=0/1]
    只能说:
  [[n:<-[3..]] -> @[m:<-[3..]] -> [e:=phi(m)] -> [n%e == 0] -> [@[x,y,z:<-[1..]] -> [gcd(x*y*z,m) == 1] -> [x**e+y**e=!=z**e]]]
  考虑:
    [phi(q)%p == 0][phi(q) < p**2]
    是否每个p必有q？
    是否[x**p+y**p=[%q]=z**p]不成立？


G be the multiplicative group of invertible residue classes modulo n
primality certificate of p
primality certification algorithm
ECPP (elliptic curve prime proving)
  Elliptic curve primality proving (ECPP)
the last condition is superfluous(多余)
Then q**e is called the exact power of q dividing a.
curious primes
lexicon
pertaining
The wonderful properties, known results, and open conjectures pertaining to the primes are manifold.
a skeletal version
start from scratch
prime-counting function
the celebrated “prime number theorem” (PNT)
Riemann hypothesis (RH)
Cunningham numbers (k**n+(+/-1))
attention
more weeding out of
established a profound theorem


Mersenne Numbers
[q::prime]:
  [M[q] =[def]= (2**q-1)]
[[m:<-[1..]] -> [is_prime_(2**m-1)] -> [is_prime_(m)]]
[[m:<-[1..]] -> [is_prime_power_(2**m-1)] -> [[is_prime_(2**m-1)][is_prime_(m)]]]
[[q::prime] -> [d:<-[2..]] -> [(2**q-1)%d==0] -> [[d%8 <- {1,7}][d%q==1]]]
<==>[[q::prime] -> [dp::prime] -> [(2**q-1)%dp==0] -> [[dp%8 <- {1,7}][dp%q==1]]]
  proof:
    !! [(2**q-1)%dp==0]
    [2**q%dp==1]
    [gcd(phi(dp), q) > 1]
    !! [q::prime]
    !! [dp::prime]
    [(dp-1)%q == 0]
    [dp%q == 1]

    !! [(2**q-1)%2==1]
    !! [(2**q-1)%dp==0]
    [dp%2==1]
    [k:=(dp-1)///(2*q)]
    [k*q==((dp-1)///2)]
    !! [2**q%dp==1]
    [2**((dp-1)///2)%dp == 2**(k*q)%dp == 1]
    !! [dp::prime]
    [is_quadratic_residue_mod_(dp;2)]
    [dp%8 <- {1,7}]
[[m:<-[3,5..]] -> [m%2==1] -> [(2**m-1)%12==7]]
[[m:<-[1..]] -> [m%12==7] -> [Jacobi_symbol(m;3%m) == Jacobi_symbol(3;m%3)*(-1)**((m-1)///2) == -1]]
  Primality Test for Mersenne Numbers:
    Let P = 2, Q = -2, and consider the associated Lucas sequences (U[m]){m>=0}, (V[m]){m>=0}, which have discriminant D = 12. Then N = M[q] is a prime if and only if N divides V[(N+1)///2]
  [[(U(P,Q;m),V(P,Q;m))=[def]=...associated_Lucas_sequences...] => @[n:<-[1..]] -> [[is_prime_(2**n-1)] <-> [V(P:=2,Q:=-2;2**(n-1))%(2**n-1)==0]]]
    #n
  [[(U(P,Q;m),V(P,Q;m))=[def]=...associated_Lucas_sequences...] => @[q::prime] -> [[is_prime_(2**q-1)] <-> [V(P:=2,Q:=-2;2**(q-1))%(2**q-1)==0]]]
    #q
    # [(P,Q):=(2,-2)] -> [D==12]
  [S[0]:=4][]
  []
  [k:<-[0..]]:
    [S[k] =[def]= if k==0 then 4 else S[k-1]**2-2]
    [S[k] == V(P:=2,Q:=-2;2**(k+1))/(2**(2**k))]
  [@[n:<-[1..]] -> [[is_prime_(2**n-1)] <-> [S[n-2]%(2**n-1)==0]]]
    #n



[[q::prime] -> [q%4==3] -> [[is_prime_(2*q+1)] <-> [(2**q-1)%(2*q+1)==1]]]
<==>[[q::prime] -> [q%4==3] -> [[is_Sophie_Germain_prime_(q)] <-> [(2**q-1)%(2*q+1)==1]]]
  proof:
    !! [q%4==3]
    [(2*q+1)%8==7]
    * (<<==):
      [(2**q-1)%(2*q+1)==1]:
        !! [(2**q-1)%(2*q+1)==1]
        [(2**(2*q)-1)%(2*q+1) == (2**q+1)*(2**q-1)%(2*q+1) == 0]
        [(2**(2*q)-1)%(2*q+1) == 0]
        [2**(2*q)%(2*q+1) == 1]
        [(-2)**(2*q)%(2*q+1) == 1]

        !! [q::prime]
        [q >= 2]
        [(2*q+1) >= 5]
        [2**2%(2*q+1) == 4 =!= 1]
        [(-2)**(2*q///q)%(2*q+1) =!= 1]

        !! [(2*q+1)%8==7]
        [Jacobi_symbol((2*q+1);2)==+1]
        !! [(2*q+1)%4==3]
        [Jacobi_symbol((2*q+1);-1)==-1]
        #view ../../python3_src/seed/math/Jacobi_symbol.py
        #.注意:
        #.    [[Jacobi_symbol(M;x)==-1] -> [is_square_nonresidual_mod_(M;x)]]
        #.    但是:[Jacobi_symbol(M;x)==+1]无用，可能是也可能不是平方剩余
        #.    [MAYBE:[Jacobi_symbol(M;x)==+1][is_square_nonresidual_mod_(M;x)]]
        [Jacobi_symbol((2*q+1);-2)==Jacobi_symbol((2*q+1);-1)*Jacobi_symbol((2*q+1);2)==-1]
        [Jacobi_symbol((2*q+1);-2)==-1]
        [is_quadratic_nonresidue_mod_((2*q+1);-2)]
        !! [(2*q+1) >= 5]
        [@[odd:<-[1,3..]] -> [(-2)**odd%(2*q+1) =!= 1]]
        !! [q%4==3]
        [q%2==1]
        [(-2)**q%(2*q+1) =!= 1]
        [(-2)**(2*q///2)%(2*q+1) =!= 1]

        !! [(-2)**(2*q)%(2*q+1) == 1]
        !! [(-2)**(2*q///q)%(2*q+1) =!= 1]
        !! [(-2)**(2*q///2)%(2*q+1) =!= 1]
        !! [q::prime]
        !! [2::prime]
        [is_a_primitive_kth_root_of_unity_mod_(2*q+1, 2*q;-2)]
        [phi(2*q+1)%(2*q) == 0]
        [phi(2*q+1) >= (2*q)]
        [phi(2*q+1) == (2*q)]
        [is_prime_(2*q+1)]
    * (==>>):
      [is_prime_(2*q+1)]:
        !! [(2*q+1)%8==7]
        !! [is_prime_(2*q+1)]
        [is_quadratic_residue_mod_((2*q+1);2)]
        ?rt :=> [rt**2%(2*q+1)==2]
        [2**q%(2*q+1)==rt**(2*q)%(2*q+1)==1]
        [(2**q-1)%(2*q+1)==0]

Sophie Germain prime
Sophie_Germain_prime
  [[is_Sophie_Germain_prime_(p)] =[def]= [[p::prime][(2*p+1)::prime]]]
  [[is_extended_Sophie_Germain_prime_(k;p)] =[def]= [[p::prime][k<-[1..]][(2*k*p+1)::prime]]]
  [[is_snd_extended_Sophie_Germain_prime_(k;p)] =[def]= [[p::prime][k<-[1..]][k%3=!=1][(2*k*p+1)::prime][3**(k)<(2*k*p+1)**2][2**(2*k)%(2*k*p+1)=!=1]]]
    ??? [[is_3rd_extended_Sophie_Germain_prime_(k;p)] =[def]= [[p::prime][k<-[1..]][k%3=!=1][(2*k*p+1)::prime][3**phi(2*k)<(2*k*p+1)]]]
    /sdcard/0my_files/book/math/factorint/snd/The new book of prime number records(3ed)(1996)(Ribenboim).djvu
        page329[354/567]
  [@[p::prime] -> [is_Sophie_Germain_prime_(p)] -> [First_FLT(p)]]
  [@[p::prime] -> [k:<-[1..=100]] -> [k%3=!=0] -> [is_extended_Sophie_Germain_prime_(k;p)] -> [First_FLT(p)]]
  [@[p::prime] -> [k:<-[1..]] -> [k%3=!=0] -> [is_snd_extended_Sophie_Germain_prime_(k;p)] -> [First_FLT(p)]]

  ==>>:
  [@[p::prime] -> [not First_FLT(p)] -> [not is_Sophie_Germain_prime_(p)]]
  [@[p::prime] -> [not First_FLT(p)] -> [not [?[k:<-[1..=100]] -> [[k%3=!=0][is_extended_Sophie_Germain_prime_(k;p)]]]]]
  [@[p::prime] -> [not First_FLT(p)] -> [not [?[k:<-[1..]] -> [[k%3=!=0][is_snd_extended_Sophie_Germain_prime_(k;p)]]]]]
Wilson prime
  [[is_Wilson_prime_(p)] =[def]= [[p::prime][((p-1)!+1)%p**2==0]]]
  [[n:<-[1..=5*10**8]] -> [[is_Wilson_prime_(n)] <-> [n <- {5, 13, 563}]]]

Wall–Sun–Sun prime
  [[is_Wall_Sun_Sun_prime_(p)] =[def]= [[p::prime][Fibonacci_number[p-Jacobi_Symbol(p/5)]%p**2==0]]]
  <==>
  [[is_Wall_Sun_Sun_prime_(p)] =[def]= [[p::prime][Fibonacci_number[p-([0,1,-1,-1,1][p%5])]%p**2==0]]]
  <==>
  [[is_Wall_Sun_Sun_prime_(p)] =[def]= [[p::prime][Fibonacci_number[p+((abs(p%5)+1)%3-1)]%p**2==0]]]

  [[n:<-[1..=3.2*10**12]] -> [[is_Wall_Sun_Sun_prime_(n)] <-> [n <- {}]]]
  [@[p::prime] -> [?[x,y,z::int] -> [[(x*y*z)%p=!=0][x**p+y**p==z**p]]] -> [[is_Wall_Sun_Sun_prime_(p)][is_Wieferich_prime_(p)]]]
  [@[p::prime] -> [not First_FLT(p)] -> [is_Wall_Sun_Sun_prime_(p)]]

Wieferich prime
Mirimanoff prime
  # first case of FLT # Fermat's last theorem
  the first case of Fermat's last theorem (which I abbreviate First FLT)
    #First_FLT
  [[is_Wieferich_prime_(p)] =[def]= [[p::prime][(2**(p-1)-1)%p**2==0]]]
    #@1909
  [[is_Mirimanoff_prime_(p)] =[def]= [[p::prime][(3**(p-1)-1)%p**2==0]]]
    #@1910

  [[n:<-[1..=16*10**12]] -> [[is_Wieferich_prime_(n)] <-> [n <- {1093, 3511}]]]
  [[n :<- {1093, 3511}] -> [not is_Mirimanoff_prime_(n)]]
  [@[p::prime] -> [?[x,y,z::int] -> [[(x*y*z)%p=!=0][x**p+y**p==z**p]]] -> [is_Wieferich_prime_(p)]]
    注意:[p==2][x**p+y**p==z**p] ==>> xyz必偶
    @page31[45/604] /sdcard/0my_files/book/math/factorint/202308/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance)/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance).pdf
  so??? => [First_FLT =[def]= [@[p::prime] -> @[x,y,z::int] -> [(x*y*z)%p=!=0] -> [x**p+y**p=!=z**p]]]
  so??? => [First_FLT(p) =[def]= [[p::prime][@[x,y,z::int] -> [(x*y*z)%p=!=0] -> [x**p+y**p=!=z**p]]]]

  [@[p::prime] -> [not First_FLT(p)] -> [[is_Wall_Sun_Sun_prime_(p)][is_Wieferich_prime_(p)][is_Mirimanoff_prime_(p)][not is_Sophie_Germain_prime_(p)][not [?[k:<-[1..]] -> [[k%3=!=0][is_snd_extended_Sophie_Germain_prime_(k;p)]]]][not [?[k:<-[1..=100]] -> [[k%3=!=0][is_extended_Sophie_Germain_prime_(k;p)]]]][@[n:<-{2,3}] -> [(n**(p-1)-1)%p**2==0]][p > 16*10**12]]]


  ??? [[is_Wieferich_prime_(p)] <-> [[p::prime][?[r:<-[2..<p]] -> [r**p%p**2==2]]]]
  ??? [[is_Wieferich_prime_(p)] <-> [[p::prime][?[r:<-[2..<p]] -> [r**p**2=[%p**2]=2**p]]]]
  !! [x**p**2=[%p**2]=x**p]
  ??? [[is_Wieferich_prime_(p)] <-> [[p::prime][?[r:<-[2..<p]] -> [r**p=[%p**2]=2**p]]]]

  ??? [@[p::odd_prime] -> [?[x,y,z:<-[1..<p]] -> [x**p+y**p=[%p]=z**p]] -> [is_Wieferich_prime_(p)]]
    bug@[p==3]
  ??? [@[p::odd_prime] -> [?[x,y,z:<-[1..]] -> [(x*y*z)%p=!=0] -> [x**p+y**p=[%p**2]=z**p]] -> [is_Wieferich_prime_(p)]]
    !! [(x+k*p)**p%p**2 == x**p%p**2]
    ??? [@[p::odd_prime] -> [?[x,y,z:<-[1..<p]] -> [x**p+y**p=[%p**2]=z**p]] -> [is_Wieferich_prime_(p)]]
  ??? [@[p::odd_prime] -> [?[x,y,z:<-[1..]] -> [(x*y*z)%p=!=0] -> [x**p+y**p==z**p]] -> [is_Wieferich_prime_(p)]]



@20250314
泛化冫配对纟循环对抗赛
  view ../../python3_src/seed/algo/round_robin_schedule.py
  两队配对:[C(2*n;2)///n == (2*n-1)]
  -->
  三队配对:[C(3*n;3)///n == (3*n-1)*(3*n-2)///2]



@20250315
整数分解牜二次根数域最大公约数
  [r:=a**2%N]
  [a**2==r*1**2+k*N]
  [a**2-r*1**2==k*N]
  [(a-sqrt(r)*1)*(a+sqrt(r)*1)==k*N]
  gcd(N,(a+sqrt(r)*1))
  view ../../python3_src/seed/math/GaussInteger.py
  不太行:因为[N:=p*q]同时有效:
      [r%p==a**2%p]
      [r%q==a**2%q]
  任选D:
    [P([is_square_nonresidual_(p;D) =!= is_square_nonresidual_(q;D)]) == 1/2]




@20250321
分布纟素幂模幺元根纟素数减一次凵该素数进制数表达
e script/分布纟素幂模幺元根纟素数减一次凵该素数进制数表达.py
  list_all_Pmmth_roots_of_unity_mod_PpowK__in_radixP_(p, k, g=None, /):
  [rs[p,k] := {r | [r:<-[1..<p**k]][r**(p-1)%p**k==1]}]
  [g[p] <- 本原根集%p]
  [1 <= len({g,g+p}/-\本原根集%p**k)]
  [gg[p,k;g] :<- ({g,g+p}/-\本原根集%p**k)]
  [ggg[p,k;g] := (gg**p**(k-1)%p**k)]
  [ggg 是 本原(p-1)次幺元根%p**k]
  [(p-1)次幺元根集%p**k == {ggg**i%p**k | [i:<-[1..<p]]}]


@20250322
整数分解牜阶乘差
  [i,j:<-[1..<4*ln(p)]]:
    (i!%p)
    ((i!-j!)%p)
e script/尝试冫整数分解牜阶乘差.py



@20250405
  view others/数学/我的猜想.txt
  (p,radix) -> digits8coeffs{polynomial}
    多项式生成最小4*deg个素数
    [deg>=2] -> [radix**2<p]
    [radix:<-[2..<sqrt(p)]]
    求解冫有限域上多项式:
      gcd(f(x), x**q-x)
      [g(x) := gcd(f(x), (x**q%f(x))-x)]
      [roots_of(g(x)) == roots_of(f(x)) /-\ [0..<q]]
      xxx:[h(a;x) := gcd(g(x), (x**((q+1)///2)%g(x))-a)]
      [h(a;x) := gcd(g(x), ((x+a)**((q-1)///2)%g(x))-1)]
        # [a:<-[0..<q]]
    素数筛纟多项式:
      [[r:<-roots_of(g(x))] -> [f(r)%q==0]]
      [[r:<-roots_of(g(x))] -> [f(r+k*q)%q==0]]




@20250405
设计冫识别器
e ../../python3_src/seed/recognize/rgnr/abc/IRecognizer.py
  主要目标:py.re+py.str
    用于:e script/对称多项式讠基表达.py
  极简:simple_text_rgnr
    *极简递归:simple_text_recursive_rgnr
      view ../../python3_src/seed/func_tools/recur5yield.py
    *极简非递归:simple_text_nonrecursive_rgnr
      no:yield#using "return"
      *极简非递归无环境变量无缓存:simple_text_nonrecursive_nogctx_nocache_rgnr
  参数:识别器.识别扌(通行包,讫限址,欤忽略结果) -> 讫讫错果
    语境无关(无:识别器动态参数)
    静态资源(无:资源解锁器:址==虚址==实址)
    使用语言内建数据类型:输入串::(str,uint) # (文本,起址)
    讫限址唯一(讫限址==讫限址牜虚==移驻型讫限址牜虚==前瞻型讫限址牜虚)
        因为py.re前瞻不越界<<==:
        >>> import re
        >>> rex = re.compile(r'a(?=b)')
        >>> rex.match('ab', 0, 2)
        <re.Match object; span=(0, 1), match='a'>
        >>> rex.match('ab', 0, 1)
        >>> rex.match('ab', 0, 1) is None
        True
        >>> rex.match('ab', 0, 2) is None
        False

  <<==:
  下面过于复杂:
  参数:识别器.识别扌(通行包,移驻型讫限址牜虚,前瞻型讫限址牜虚,欤忽略结果,识别器动态参数,资源解锁器) -> 讫讫错果
      讫讫错果==(讫址牜虚牜移至,讫址牜虚牜远至,错误屮成果)
      识别结果/错误屮成果==(错误丷成果,错误丨成果)
      通行包==(递归组,输入串,环境变量)
      递归组:
        +纯核递归组/识别器构造器名解析包::(识别器构造器名,识别器静态参数)->识别器
        +递归组配置
      识别器动态参数(语境相关:输入串+起址牜实:前文/前情提要:串联后件)
      输入串{定位于:,起址牜实(实址:锁定资源)}
      移驻型讫限址牜虚,前瞻型讫限址牜虚(虚址:资源无关)
        前后关系？考虑到:前瞻长度上限...可能没有前后关系...
      资源解锁器/分支排他器:管理-动态资源{输入串}
      环境变量:
        #变量环境初始化:一次:本次识别过程
        #变量环境初始化:每:识别器
        +变量环境纟缓存效率
          +回顾长度上限
          +前瞻长度上限
        +变量环境纟递归组
          比如:缓存:递归组-解析结果{(识别器构造器名,识别器静态参数):识别器}
          比如:缓存:递归组-识别器属性{递归组配置}{(识别器构造器名,识别器静态参数,符号冃属性名):识别器属性(浅|深)}
        +变量环境纟丮递归组丶输入串厈
          比如:缓存:识别结果{(识别器,起址牜虚,移驻型讫限址牜虚,前瞻型讫限址牜虚,欤忽略结果,识别器动态参数):讫讫错果}
          比如:缓存:输入串-回顾串&前瞻串
        +变量环境纟动态运行期#每次识别过程
    识别器-属性:
    识别器构造器-属性:
      +浅枚举冫子识别器构造器
        +深枚举冫后裔识别器构造器
      #(浅属性,深属性)@缓存于:变量环境纟递归组
      +回顾长度需求
      +前瞻长度需求
      +欤讫址无关:即:右侧自刹/合法语句不是合法语句的真前缀
      +欤语境无关:即:识别器动态参数-无用
      +欤识别结果不可改动:immutable




@20250423
统计字频(区分繁简):汉语大辞典-词条|释义
grep 字频 -r script/ -l
已有:
view script/字频统计冫词汇纟汉语大辞典.py
  #订正版冫汉字行每频数:goto
  #订正版冫前二六一九汉字乊频数不小于七十:goto




@20250426
view script/爻元数纟累积纟素数牜对比机器字长.py
  /sdcard/0my_files/book/math/factorint/202308/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance)/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance).pdf
  Algorithm 3.3.1 (Batch smoothness test (Bernstein)).
    pg129 [142/604]“product tree”
      IIps = II(PRIMES[:k])
    pg130 [143/604]“remainder tree”
      II(modulus) => tree/forest:only height:root <= IIps
        go down to leaves
          => IIps%remainder_tree
          => r:=IIps%modulus
          => rr:=r**2**e%modulus

@20250426
e ../../python3_src/seed/math/prime_pint/easy_primes.py
easy number:
  view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
    欤幺链素数扌
    欤扩展幺链素数扌#允许多个小素数纟减一
    欤再扩展幺链素数扌#允许素幂
  view script/爻元数纟累积纟素数牜对比机器字长.py
  4.5.4 A quartic time primality test
    pg213
    222?
  (p-1)分解是必要的，如用于:求本原根
    分解部分>=sqrt(p-1)都没用...
easy number:
    easy number:easy factor and recur easy-prime
        easy-prime:(p-1) is easy number
      easy factor:
        trial_division lt f4td(B)
            and sqare diff detect: 0 <= a**2-n < f4sd(B)
        perfect_power
        Pollard rho?
        Pollard(p-1)?++second stage?
            e:=lcm([1..=f4me(B)])
            (odd,ez) :=> [odd*2**ez==e]
            [c:<-[isqrt(n)-f4mn(B)..=isqrt(n)+f4mp(B)]]:
                c:=pow(c,odd,n)
                for _ in range(ez):
                    if gcd(c-1,n) > 1:break
                    c = pow(c,2,n)
                else:
                    #second stage
                    p = max_prime_le(f4me(B)) or 0
                    c0 = c
                    # eg:f4me2(B)==f4me(B)*ln(f4me(B))
                    for q in prime_between_(f4me(B)+1, f4me2(B)):
                        c = c*pow(c0,(q-p),n)%n
                        if gcd(c-1,n) > 1:break
                        p = q

@20250507
尸方法rho:??考虑使用:
  *牛顿迭代:
    x[k+1]:=x[k]-f(x[k])/Df(x[k])
  *分式多项式:
    x:=(x*x+1)/(x+1)==(x+1)-2*x/(x+1)
    x:=f(x)+g(x)/h(x)
  *:
    [Jacobi_Symbol(M;D)==-1]:
      x:=D*(x+1)**2

  #哪些迭代公式[x':=f(x)+g(x)/h(x)]将GF(p)切成许多小环？
  =>:
    可逆...
  展开成连分式:(f0(x)+1/(f1(x)+1/(f2(x)+1/(f3(x)+1/(f4(x)+...)))))


@20250507
3**3==27==1+6+12+8#魔方
  泛化此类拆分
e script/拆分冫幂方纟奇数.py



@20250512
1,2,4,6,8,12,16,24,30,...
  [],[1],[2],[1,1],[3],[2,1],[4],[3,1],[1,1,1],...
e script/枚举冫相关最小正整数纟递降指数序列扌.py

@20250516
加密相关:泛化冫奇偶校验和:进制数位数和
  已有:
view script/数字和纟进制数.py
e script/位数和纟进制数牜多次选基数.py
  有点随机感耂容易计算耂有递增趋势耂整数序列::uint->uint
    容易:耗时少，空间占用少(与前面无关:无需使用前面的结果:非递推关系)
1:
  第一次选基数:2+floor_log2()
    甚至考虑loglog
  第(k+1)次选基数:2+位数和纟进制数{第(k)次基数}
  必然循环？
2:基数<-[2..2*floor_log2()]
  ??这样一来，至少是O(log()**2)有点难


@20250516
类似prime_gens.IIps_gt
求min L :=> [II(PRIMES[:L]) > n]
求min L :=> [II(?pint_seq?[:L]) > n]
  /sdcard/0my_files/book/math/factorint/202308/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance)/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance).pdf
Exercise 1.25:
  [[x::real{>0}] -> [II[p | [[p::prime][p<=x]]] < 4**x]]
Exercise 1.28:
  [[x::real{>=31}] -> [II[p | [[p::prime][p<=x]]] > 2**x]]
Exercise 1.29:
  [[x::real{>=5}] -> [num_primes_le(x) > x/log2(x)]]
    #近似性素数计数定理
    #~PNT

Exercise 1.58:
  “Mertens paradox”?It has been said that the sieve of Eratosthenes is “more ef i cient than random,” and that is one way to envision the “paradox.”
  [lim{II[1-1/p | [[p::prime][p<=sqrt(x)]]] / (1/ln_(x)) | x-->+oo} == 2*exp(-Euler_constant) ~= 1.1229189...]
  vs:PNT:
  [lim{num_primes_le(x) / (x/ln_(x)) | x-->+oo} == 1]

$ gp
? Euler
%2 = 0.57721566490153286060651209008240243104
? -log(1.1229189/2)
%6 = 0.57721572468658798155088866912474583763
? 2*exp(-Euler)
%8 = 1.1229189671337703396482864295817615735

@20250518
句式:
  {名称}者，{定义体}也。
  x兮(==逗号)，其...。

@20250518
TODO:
e ../../python3_src/seed/math/float/IFloatNumber.py
e ../../python3_src/seed/int_tools/digits/codecs4int.py
e ../../python3_src/seed/recognize/rgnr/abc/IRecognizer.py
  各具象识别器对输入提出特色接口需求
e 古籍整理/道德经/道德经-2-1.txt
  整理出:我版
加密基础+证明+相应py框架/脚本
mv -iv '/sdcard/0my_files/book/cryptography/Introduction to Modern Cryptography, Second Edition by Jonathan Katz, Yehuda Lindell (z-lib.org).pdf' '/sdcard/0my_files/book/cryptography/Introduction to Modern Cryptography(2th)(2015)(Jonathan Katz)(Yehuda Lindell).pdf'
  good:严格证明(+正式定义+精密假设)
e ../lots/NOTE/cryptography-book/Introduction to Modern Cryptography(2th)(2015)(Jonathan Katz)(Yehuda Lindell).txt



@20250522
floor(uint*float):从后往前:
  [u**((B*a+b)/B**2)
  ==kth_root_(B;u**((B*a+b)/B))
  ==kth_root_(B;u**a * u**(b/B))
  ==kth_root_(B;u**a * kth_root_(B;u**b))
  ]
  [interval_(prec; u**((B*a+b)/B**2))
  ==interval_(prec; kth_root_(B;u**a * kth_root_(B;u**b)))
  ==interval_(prec; kth_root_(B;interval_(prec; u**a * kth_root_(B;u**b))))
  ==interval_(prec; kth_root_(B;interval_(prec; interval_(prec; u**a) * interval_(prec; kth_root_(B;u**b)))))
  ]



@20250522
ops-framework
obj.opss
自由函数
  def fxxxx(a,b,c):
      if a.opss[fxxxx,0]:
        return a.opss[fxxxx,0](a,b,c)
      if b.opss[fxxxx,1]:
        return a.opss[fxxxx,1](a,b,c)
      if c.opss[fxxxx,2]:
        return a.opss[fxxxx,2](a,b,c)
      return default_impl_(a,b,c)

@20250523
概率论-变量环境-配置模型
  [[var2typ :: Varable->Type][var2set :: @[nm::Varable]->Set (var2typ(nm))][event2prob :: {(@[nm::Varable]->(var2set(nm))):Real{0~~>1}}][sum(event2prob.values()) == 1]]
(2p+1)型素数-论文:
  view others/数学/术语/费马大定理/费马大定理之第一子类-[6germain]section6-Sophie Germain and Fermat_s Last Theorem.pdf
      # 6*?*p+1 不行:排除 6,12,18,...
      #     TODO:尝试:找出反例:哪些(k,p)不行？
view others/数学/术语/费马大定理/费马大定理之第一子类-\[S0002-9947-1988-0927694-5]THE\ FIRST\ CASE\ OF\ FERMAT_S\ LAST\ THEOREM\ IS\ TRUE\ FOR\ ALL\ PRIME\ EXPONENTS\ UP\ TO\ 714591416091389(new-156442236847241650)(1988)(ANDREW\ GRANVILLE)(MICHAEL\ B.\ MONAGAN).pdf
  ...

@20250524
smooth number
  PRIMES[:log2(x)**k] 有没有可能在x附加生成 非零比例的数字？
e others/数学/术语/smooth_number.txt


@20250613
整数分解牜余数公约数
  for D in count(isqrt(N)):
    g = gcd(N, N%D)
    if g > 1:break
  [1 < p < q][N==p*q][D>1][(Q,R):=N/%D]:
    [N==Q*D+R]
    [p*(q%D) < D]:
      [R%p == 0]
      [gcd(N,R)%p == 0]
    [D >= ceil_sqrt(N)]:
      [D > p]
    [D >= ceil_sqrt(N)]:
      [Q <= D]
      [R >= 0 >= Q-D > Q-1-D]

    [N
    ==Q*(D+1)+(R-Q)
        # for:[R>=Q]
    ==(Q-1)*(D+1)+(R-Q+D+1)
        # for:[R<Q][R>=Q-1-D]
    ]
    [(A,B):=R/%Q]
    [(A2,B2):=(B+D+A)/%(Q-1)]
    [N
    ==Q*(D+A)+(R-A*Q)
    ==Q*(D+A)+B
    ==(Q-1)*(D+A)+(B+D+A)

    ==(Q-1)*(D+A+A2)+(B+D+A -A2*(Q-1))
    ==(Q-1)*(D+A+A2)+B2
    ==(Q-2)*(D+A+A2)+(B2+D+A+A2)
    ... ...
    ]
[D:=ceil_sqrt(N)][K:<-[D..]][KD=K*D+1][???:=gcd(N,N*K%KD)]
  ??? [K:=2**e]
  无用:永远是1/q的成功率
xxx:e script/尝试冫整数分解牜余数公约数.py


@20250614
类似素数n[j]~j*log2(j)增长数列
  计算简单:
    [n[j] == f(n[j//2],j%2)]
    [[i < j] -> [n[i] < n[j]]]
    ==>>:
    [[(a,b) < (c,d)] -> [(a,b) < f(c,d)]]
    or: [c-a>???]
  [n[2*j]
  ~ 2*j*log2(2*j)
  ~ 2*j + 2*j*log2(j)
  ~ 2*j + 2*n[j]
  ~ 2*j*log2(n[j])/log2(n[j]) + 2*n[j]
  ~ 2*j*log2(j)/log2(n[j]) + 2*n[j]
  ~ 2*n[j]/log2(n[j]) + 2*n[j]
  ~ (1/log2(n[j]) + 1)*2*n[j]
  ]
  [[a:<-[2..]][b:<-[0,1]]]:
    [f?(a,b) =[def]= 2*a+2*a//ceil_log2(a)+[b==1]*(1+a%ceil_log2(a))]
      除非保证:[a[j+1]-a[j] > ceil_log2(a)]
e script/构造冫数列牜类似素数增长.py



@20250702
现代韵母/-\平水韵
grep 平水 -l -r ../../python3_src/nn_ns/CJK/
../../python3_src/nn_ns/CJK/CJK_data/raw/一百零六部平 水韵.txt
../../python3_src/nn_ns/CJK/cjk_subsets/hanzi.py
grep 今韵 -l -r ../../python3_src/nn_ns/CJK/
  <None>



@20250704
e script/列表冫统合码大块汉字分区.py

view /sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-词汇繁简对照-补空.txt
  查无:司阍#但 汉英翻译有，『守门人』

@20250704
e ../lots/NOTE/大脑如何思维/003-动物智力的进化.txt
e ../../python3_src/seed/recognize/rgnr/abc/IRecognizer.py
@20250707
识别器:步进型-不可更改的多线栈(反向单向链表作栈)
  [栈==(None|([栈],?序号纟料符?,may 位置纟料符,标准代表纟识别器,缓存数据,步进状态))]
  缓存数据:初始化 为 调用参数；若无需，则透明传递。
    #view others/数学/编程/设计/通用树状数据-语境纟遍历.txt
    缓存数据==(背景语境{继承性传递},调用参数{自用性消耗})
  [全局状态::{标准代表纟识别器:栈{底层代表匹配}}]
  序号纟料符 用于 排序 子部件返回 次序，同步-融合...
  位置纟料符:用户自定义，只有显示作用
  ops:
    .步进牜结束扌(标准代表纟识别器,缓存数据,步进状态{欤允许结束})
      -> 结果 # 还是得避免 超长数组#可控的定长元组没问题
    .步进牜码符扌(标准代表纟识别器,缓存数据,步进状态{欤继续},料符,may 讫位置)
      #xxx:-> Iter (继续-缓存数据-步进状态|成功-数据|失败-信息|调用-子部件-位置)
      -> Iter ((欤继续,欤允许结束)-步进状态|失败-信息|调用-子部件-位置)
      #料符~LL1
      #Iter~多种右端内敛的可能性/平行宇宙 => eof:随处都是文件结尾，无需特意标明
      #两种位置:料符vs子部件
    .步进牜子部件返回扌(标准代表纟识别器,缓存数据,步进状态,子部件位置,成功数据)
      -> Iter (继续-缓存数据-步进状态|成功-数据|失败-信息)
      #不允许失败？反转成败-识别器-特色支持
      # !! 步进 不回头 不缓存输入料符串
      # => 没有lookahead,not_followed_by(反转成败)
    没有 优先级联 但可以有 失败信息替换
归一化{标准代表纟识别器}:类似 sys.intern :: str->str

@20250722
e ../lots/NOTE/cryptography-book/Introduction to Modern Cryptography(2th)(2015)(Jonathan Katz)(Yehuda Lindell).txt
e ../../python3_src/seed/recognize/rgnr/abc/IRecognizer.py
e ../lots/NOTE/大脑如何思维/006-大脑“达尔文机”的运作机制.txt
e ../../python3_src/seed/int_tools/digits/codecs4int.py
    e ../../python3_src/seed/int_tools/StepDecoder.py

@20250722
编码 有理数 # 词典序
  标准连分数形式:
    [i;]
    [i; uint{>=1}..., uint{>=2}]
  正负交替变体纟标准连分数形式:
    #追附 正负无穷，以确保不是真前缀，同时也当作 后刹/结束符
    [i;-oo]
    [i; (int{<=-1}, int{>=1})..., int{<=-2}, +oo]
    [i; (int{<=-1}, int{>=1})..., int{<=-1}, int{>=2}, -oo]

@20250726
binary-finger_tree
  内部节点长度恒为2。
  侧翼节点长度为[1,2]
  主干节点长度为[0,1,2]
  只考虑 受限制的合并(用于 替换等长子串):条件是？
    分裂的逆过程:
    假设 整个合并过程 不触及主干:
      不考虑上层下降而来的新节点=>{1+1}, {1+2}, {2+2} 即 {2,3,4}
      第一层: {1+1} | {2+2}
        => {1,2}
      第二层: 1+{1+2} | 2+{1+1}
        => {2}
      第三层诸后: 2+{1+1}



@20250726
费马大定理:
  ???[[p>=3] -> [2*a**p < (a+1)**p]]???
  [2*a**3 < (a+1)**3]
    <==>[a**3 < 3*a**2+3*a+1]
    <==> _L
  当a远大于p，上面的命题就不成立
  结论:行不通！


@20250729
虚词:用作 编码用字母表
e others/数学/编程/设计/自定义编码纟自然数冃中文序数.txt


[[[[[
@20250807
提取字典中的信息
[[
view /sdcard/0my_files/tmp/out4py/汉语字典囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
view /sdcard/0my_files/tmp/out4py/script.中文字典囗..格式化囗新华字典囗..新华字典.out.txt
view /sdcard/0my_files/tmp/out4py/汉语辞海囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
view /sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.现代汉语词典.out.词典.txt
view /sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-初步清理.txt
]]

[[
view /sdcard/0my_files/tmp/out4py/script.中文字典囗..格式化囗新华字典囗..新华字典.out.txt
  有的拼音包含在解释里
  繁体字包含在解释里
  部首含『难检字』
格式: ,字:带声调拼音:笔画数:部首:五笔码？:释义

,卝
:guàn
:4
:难检字
:
:卝
/guàn
/古代儿童将头发束成两角的样子。
/卝
/kuàng
/古同“矿”。
:


,重
:chóng,zhòng
:9
:里
:tgjf
:重
/zhòng
...

,万
:mǒ,wàn
:3
:一
:dnv
:
/万
/（萬）
/wàn
...

]]

[[
cp -iv /sdcard/0my_files/tmp/out4py/汉语字典囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt  /sdcard/0my_files/tmp/0tmp
e /sdcard/0my_files/tmp/0tmp
  :%s/\n\([:/].*\)/\1/g
  :w

===
view /sdcard/0my_files/tmp/0tmp
  有的拼音包含在解释里
  繁体字包含在解释里
  部首含『难检字』
  ===
  格式:,字:序号:部首:笔画数:笔顺码:五笔码？:无声调拼音:带声调拼音:释义
  ===
  ,龜:6:难检字:16:3251253415511511:tmgg:gui:guī:龜guī//龜/jūn//龜/qiū/均见“龟”。
  ,忔:8374:忄:6:442315:ntnn:yi:yì:忔yì/厌烦：“数忔食饮。”//忔/qì/〔忔憎（
  ,忕:8375:忄:6:442134:ndy:shi:shì:忕shì/习惯于：“诸侯或骄奢，忕邪臣计谋为淫乱。”//忕/tài/奢侈：“楚王忕侈已甚。”
  ,重:16867:里:9:312511211:tgjf:chong,zhong:chóng,zhòng:重zhòng/分量较大，与“轻”相对：重负。重荷。重量。重力。举重。负重。/程度深：重色。重病。重望。重创。/价格高：重价收买。/数量多：重金聘请。眉毛重。重兵。/主要，要紧：重镇。重点。重任。重托（国家重大的托付）。重柄。/认为重要而认真对待：重视。尊重。器重。隆重。/言行不轻率：慎重。自重。/沉轻//重/chóng/　ㄔㄨㄥˊ/再：重复。重申。重版。重沓（重复繁冗）。重阳。重逢。/〔重庆〕地名，在中国四川省。/层：重叠。重霄。重洋。重唱。重峦叠嶂。/沉轻
  ,乐:45:丿:5:35234:qii:le,yue:lè,yuè:乐（樂）/lè/欢喜，快活：快乐。乐境。乐融融。乐不可支。其乐无穷。乐观（精神愉快，对事物的发展充满信心）。乐天（安于自己的处境而没有任何忧虑）。/使人快乐的事情：取乐。逗乐。/对某事甘心情愿：乐此不疲。乐善好施。/笑：这事太可乐了。/忧苦哀悲//乐/（樂）/yuè/　ㄩㄝˋ/声音，和谐成调的：音乐。声乐。乐池。乐音（有一定频率，和谐悦耳的声音）。乐歌（a.音乐与歌曲；b.有音乐伴奏的歌曲）。乐正（周代乐官之长）。乐府（原是中国汉代朝廷的音乐官署，主要任务是采集民间诗歌和乐曲；后世把这类民歌或文人模拟的作品亦称作“乐府”）。/姓。/忧苦哀悲
  ,万:68:一:3:153:dnv:mo,wan:mǒ,wàn:万（萬）/wàn/数目，十个一千：万户侯（中国汉代侯爵的最高一级，享有万户农民的赋税。后泛指高官）。/喻极多：万物。万方（a.指全国和世界各地；b.指姿态多种多样）。日理万机。气象万千。/极，很，绝对：万万。万幸。/姓。//万/（萬）/mò/〔万俟（/（萬）q?）〕原为中国古代鲜卑族部落名；后为复姓。
]]

[[
script.中文字典囗..格式化囗新华字典囗..新华字典.out.txt
汉语辞海囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..义未详.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..仅提取拼音.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..仅提取笔顺码.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.现代汉语词典.out.词典.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-初步清理.txt
]]
<<==:
[[
ls /sdcard/0my_files/tmp/out4py/ -1 > /sdcard/0my_files/tmp/3tmp
view /sdcard/0my_files/tmp/3tmp
cjk.parse__PropList_txt.ver13_0.decimal.txt
cjk.parse__PropList_txt.ver13_0.hex.txt
cjk.parse__PropList_txt.ver13_0.txt
cjk.reformat__Unihan_Variants_txt.ver13_0.compact.txt
cjk.reformat__Unihan_Variants_txt.ver13_0.txt
collect_hz_components.py.拓扑排序.out.u8
collect_hz_components.py.汉字分解成字根囗字根反向索引汉字.阈值2.out.u8
collect_hz_components.py.汉字分解成字根囗字根反向索引汉字.阈值28.out.u8
collect_hz_components.py.辅助人工定义哪些部件是字根.30.out.u8
collect_hz_components.py.辅助估算被引用次数的阈值.out.u8
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..APP.古汉语字典囗.dump.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..APP.汉语字典囗.dump.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..APP.汉语辞海囗.dump.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..APP.英语词霸囗.dump.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..TXT.中文字典囗.新华字典.格式化.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..TXT.现代汉语词典囗第五版囗文本囗.原文件.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.中华成语大词典.词典.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.中华成语大词典.词汇.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.二十一世纪英汉汉英双向词典.词典.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.新世纪汉英科技大词典.词典.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.新世纪英汉科技大词典.词典.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.汉语大辞典.词典-词汇繁简对照-补空.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.汉语大辞典.词典.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.现代汉语词典.词典.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.现代汉语词典.词汇.out.txt
nn_ns.CJK.CJK_common.is_hz..show_partition_charset_by_is_hz__5path_..欧路词典.计算机词汇.词典.out.txt
nn_ns.CJK.CJK_common.化繁为简..化繁为简囗囗文件路径囗..输出囗简体版..欧路词典.汉语大辞典.姓氏提取.out.txt
nn_ns.CJK.CJK_common.化繁为简..化繁为简囗囗文件路径囗..输出囗繁简对照表..欧路词典.汉语大辞典.姓氏提取.out.txt
nn_ns.CJK.CJK_data.笔画数到依笔顺排序的汉字串..out.all.txt
nn_ns.CJK.CJK_pinyin__ucd.normal_pinyin_prime2full_pinyin_prime..out.txt
nn_ns.cjk.cjk_data.笔画数到依笔顺排序的汉字串.py.out.all.txt
nn_ns.fileformat.font.freetype2.freetype2_ftdump.accumulate_font_char_rngs_..cjk.out.txt
nn_ns.fileformat.sqlite3_dump_cmd.古汉语字典._dump.out.txt
nn_ns.fileformat.sqlite3_dump_cmd.汉语字典.dump.GHY_DAT.out.txt
nn_ns.fileformat.sqlite3_dump_cmd.汉语字典.dump.x0x1x2x3.out.txt
script.hz.部件拆分..提取基本面编码空间里的汉字囗.out.txt
script.hz.部件拆分..比较笔顺码囗囗汉语字典囗囗汉字笔顺表囗.out.txt
script.hz.部件拆分..生成拆分囗囗规范部件名囗.out.txt
script.hz.部件拆分..迭代囗囗规范部件名囗.out.txt
script.中文字典囗..格式化囗新华字典囗..新华字典.out.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.中华成语大词典.out.杂项.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.中华成语大词典.out.词典.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.中华成语大词典.out.词汇.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.新世纪汉英科技大词典.out.杂项.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.新世纪汉英科技大词典.out.词典.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.新世纪汉英科技大词典.out.词汇.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.新世纪汉英科技大词典.out.词汇囗依词义序囗附词义字节串信息.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.新世纪英汉科技大词典.out.杂项.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.新世纪英汉科技大词典.out.词典.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.新世纪英汉科技大词典.out.词汇.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.新世纪英汉科技大词典.out.词汇囗依词义序囗附词义字节串信息.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.杂项.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.杂项.单列校验.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-初步清理.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-词汇繁简对照-补空.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典-词汇繁简对照.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词典.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词汇.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词汇.单列校验.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.汉语大辞典.out.词汇囗依词义序囗附词义字节串信息.单列校验.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.现代汉语词典.out.全文.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.现代汉语词典.out.杂项.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.现代汉语词典.out.词典.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.现代汉语词典.out.词汇.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.计算机词汇.out.杂项.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.计算机词汇.out.杂项.单列校验.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.计算机词汇.out.词典.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.计算机词汇.out.词典.单列校验.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.计算机词汇.out.词汇.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.计算机词汇.out.词汇.单列校验.txt
script.欧路词典囗.试读囗囗假设简介字节数地址固定囗.计算机词汇.out.词汇囗依词义序囗附词义字节串信息.单列校验.txt
script.欧路词典囗.试读囗囗定位关键位置全过程囗自动化囗.二十一世纪英汉汉英双向词典.out.杂项.txt
script.欧路词典囗.试读囗囗定位关键位置全过程囗自动化囗.二十一世纪英汉汉英双向词典.out.词典.txt
script.欧路词典囗.试读囗囗定位关键位置全过程囗自动化囗.二十一世纪英汉汉英双向词典.out.词汇.txt
script.欧路词典囗.试读囗囗定位关键位置全过程囗自动化囗.二十一世纪英汉汉英双向词典.out.词汇囗依词义序囗附词义字节串信息.txt
script.欧路词典囗汉语大辞典.看看有哪些直接存储的字符串.out.select.txt
script.汇编冫牛津英汉双解..牛津英汉双解.4ed.out.词典.txt
script.汉语辞海囗.dump8dic.out.txt
unzip
去除冗余-欧路词典囗.二十一世纪英汉汉英双向词典.out.词典.txt
古汉语字典囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..义未详.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..仅提取拼音..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..仅提取拼音.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..仅提取笔顺码..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语字典囗.py..仅提取笔顺码.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
汉语辞海囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
英语词霸囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
]]
]]]]]




DONE:
@20250822
最长同序字符串牜一龥区
e script/最长同序字符串牜一龥区.py
  unicode vs gb18030/gbk/gb2312
    编码字节串次序
view ../../python3_src/nn_ns/LCS/longest_common_subsequence_problem.py
  推广:多个字符串的最长共同子串
其实可以更简单:
e ../../python3_src/seed/seq_tools/longest_sorted_subsequence.py
longest_sorted_subsequence_of_(xs, /,, *, key, __lt__):
  sz2cs = 最长字串长度讠递降字符序列 :: [[char]]
    [sz2cs[j][k] > sz2cs[j][k+1]]
    [sz2cs[j][-1] <= sz2cs[j+1][-1]]
    [min:sz2cs[0][-1]]
  for ch in 一龥区.sort{by gbk/2bytes}:
      bisect find j :=>
          [[j>0] -> [sz2cs[j-1][-1] <= ch]]
          [sz2cs[j][-1] > ch]
      sz2cs[j].append(ch)
view ../../python3_src/seed/seq_tools/bisearch.py
++输出:字集同序 合并而非迭代 删去可选节 只保留共同区
  ++to_refine=False




@20250926
TODO
收集:代词;英汉对照
  代词:『所』:所见世，所闻世，所传闻世
高维空间切面数量公式：n,n(n+1)/2+1,...
康熙字典字序ucd
order_mod_(M;2):3->2;5->4;7->3;11->10;13->12;15->4;17->8;  2^12,2^60,2^120
2^1440=64^(2*3*5*8)=256^180;15×16×6=1440;1440÷8=180

2357.^2357 共4^4=256种组合
  e script/pow_2357_2357.py
may_kth_root_; sqrt九九乘法表
  e script/整数分解冫九九乘法表牜进制基数.py
近似对称字：女人心见门我月云笑舌白首手子予血
  e script/手选冫近似对称字牜一龥区.txt
汉字排序 按字义数量
  e script/排序冫汉字牜按字义的字数.py
自然数记数法：贪婪幂方分解：树状结构，除了根节点，其余节点默认加一，叶节点 0~3
  e ../../python3_src/seed/math/max_nontrivial_power_ex_le.py
  tree2digits_(radix, tree, /)
  tree5digits_(radix, digits, /)
    tree==(uint%(radix-1), [tree])
    digits==[uint%radix]
doctest:doc{nm4section,begin,end}
  xxx.yyy:__doc__[nm4section,nm4section],T.doc[-nm4section]
    included vs excluded
    '\n[begin:nm4section]\n'
    '\n[end:nm4section]\n'

博弈论：多数投票：是否存在比例阈值使得传递性保持？
诗经？黄鸟？
  e others/杂/词语解释/黄鸟-诗经.txt
不法 非法 无法？
  e others/杂/词语解释/不法vs非法vs无法.txt
？承负？反作用
  查无
墨守成规？
  e others/杂/词语解释/墨守.txt
盈数、肭数？
  e others/杂/词语解释/盈数vs朒数vs肭数.txt



@20250927
词典 编目-目录文件(词条+范围) 查询程序(模糊查词+释义)
  由于错误，词条可能重复出现
  简繁等原因，多个等价词条
  目录格式:
    词条{等价多个}:范围{冗余多个}
  内存模式:
    使用 某些分隔符(词条绝不可能使用的非法字符)
    <begin>词条<sep>等价词条<sep>等价词条...<rng>范围<rng>冗余范围<rng>冗余范围...<end>
      但这样一来，正则表达式『.』『[^]』全选/取反 等操作 都必须避开 这些内用字符
      不使用正则表达式，只用 通配符 『?』『*』
  生成目录的程序:
    特定于 词典格式
  查询词语的程序:
    路径参数:多个词典:词典的目录文件+词典文件
      词典昵称
    加载:多个:词典的目录文件
    交互方式查询:
      避免每次查询都得加载目录
      先模糊查询，列出候选词条
      再查询指定词条的含义
view /sdcard/0my_files/tmp/out4py/script.汇编冫牛津英汉双解..牛津英汉双解.4ed.out.词典.txt

@20250927
重提:
  庄子 通读 白话
  老子 翻译
    view  ./古籍整理/道德经/道德经-2-1.txt
  加密 证明
    e ../lots/NOTE/cryptography-book/Introduction to Modern Cryptography(2th)(2015)(Jonathan Katz)(Yehuda Lindell).txt
  e ../../python3_src/seed/int_tools/StepDecoder.py
    ++泛化:平行识别器，但是 序列的平坦化 导致O(n**2)，看来还是得靠 endBy 显式平坦化，其他情况使用Rope
  e script/手选冫近似对称字牜一龥区.txt
  [[
失败快照@20250929
===
e script/手选冫近似对称字牜一龥区.txt
  @20250924:近似对称字：女人心见门我月云笑舌白首手子予亏五此之亝亟亥九今兦亾免农衣止兼弗佛圭佳耳剘民無
失败:木字旁-上下对称 类似水？弓弗儿兆并共其典且月冊册揣瑞-上下对称？
失败:無舞每牛？人字头？
失败:夂冬愛夏客各？夂字底，牛字底:牵？
失败:亥家象？
失败:孟了？
失败:巴-上下对称？壯？奘
多则惑少则得

view script/手选对称字.txt
view script/列表冫统合码大块汉字分区.py








from seed.text.print_txt_as_multilines import print_txt_without_space_as_py_src_varable_, print_txt_as_multilines_
print_txt_as_multilines_(None, 16, s)

from itertools import pairwise
from seed.text.join_between import join_between, join_between_ex
s = join_between(*'一龥')
t = '一丨丶丿乙亅二亠人儿入八冂冖冫几凵刀力勹匕匚匸十卜卩厂厶又口囗土士夂夊夕大女子宀寸小尢尸屮山巛工己巾干幺广廴廾弋弓彐彡彳心戈戶手支攴文斗斤方无日曰月木欠止歹殳毋比毛氏气水火爪父爻爿片牙牛犬玄玉瓜瓦甘生用田疋疒癶白皮皿目矛矢石示禸禾穴立竹米糸纟缶网羊羽老而耒耳聿肉臣自至臼舌舛舟艮色艸虍虫血行衣襾見见角言讠谷豆豕豸貝贝赤走足身車车辛辰辵邑酉釆里金钅長长門门阜隶隹雨靑非面革韋韦韭音頁页風风飛飞食饣首香馬马骨高髟鬥鬯鬲鬼魚鱼鳥鸟鹵鹿麥麻黃黍黑黹黽鼎鼓鼠鼻齊齐齒齿龍龙龜龟龠'

def _4cut_at_(heads, s, /):
    j = 0
    yield j
    for h in heads:
        j = s.index(h, j)
        yield j
    else:
        j = len(s)
        yield j

def cut_at_(heads, s, /):
    for i, j in pairwise(_4cut_at_(heads, s)):
        if i < j: yield s[i:j]

ls = tuple(cut_at_(t, s))
for _ in map(print, ls):pass


s = join_between(*'人仹')

一丁丄丅丈三丌不与丑丒且丕丗丙业丛丝丞丟丠両丢丣两並
丨个丫丬中丯丰丱串丳丵
丶丷丹主丼丽举
丿乀乁乂乄义乊之乎乏乑乔乖乗乘
乙乚乛乜九习乡乥乮乯乶
亅了亇予
二亍于亏亐云互亓五井亖亗亘亙亚些亜亝亞亟
亠亢亣交亥亦产亨亩享京亭亮亯亰亲亴亶亹
人亻亼亽亾什仁仄仆今介仌从仐仒仚仜仝仡令仦仨仲仹任仼仾企伍众会伞伥伩伵伸伹伾佀佂佃佄何佘余佛佢佥佧佪佱佳佴來侈侌侍侎侖侣侮侶侻俎俴俹倂倅倓倕倖倗倛倝倡倬倲偅偉偳傔傘僉僰僵
儿兀允元兄充兆兇光兊克兌免兑兒兓兕兖兗党兜兟兠兢
入兦內全兩
八公六兮兯兰共兲关兴其具典兹养兼兽兾冀
冂冃冄内円冈冉冊冋册再冎冏冐冑冒冓冕
冖冗冘写冚农冝冞冥冧冨冩冪
冫冭冮冰冱冲况冶冷
几凡凢凣凤凧凨凩凪凬凮凰凲凳
凵凶凷凸凹出击凼函凾凿
刀刁刂刃刄刅分刈刕刖刜刞刯刱刲刵券剏剕剗剘剙剟剡剾
办劣劦劳労劵勞募
勹勺勻勽勾勿匀匁匃匆匇匊
匕北
匚匞匡匪
匸匹区區
十卂千卄卅卆卉半卋卌卍卐卒单南単卛
卜卝卞卟卡卦卧
卩卪卬卯卵卷卿
厂厵
厶厸厹厺去厼厽县叀叁参參叄叅
又叉双叏叒叓叕受变叜叟叠
口古句另叧叩只召叭可台史右叴叵叶号叾叿吅合吉吊同吏向吕吜吝吞吢否含吲吳吴吾呂呆呇呈呉呑呕员呙呣周呬呸呻命咀咁咄咅咈咒咔咖咠咡咢咪咷咺咼哀品哄哆哇哐哑員哥哪哾唇唈唓唖唭唱唺唾商啇啈問啓啖啙啚啜啝啞啠啡啩啬啯啲啻善喆喌喜喠喡喦喬單営喿嗇嘂嘓嘔嘗嘦嘼噐噕器噩嚚嚞嚢嚣嚵嚻囁囂囊囍
囗囙囚四囜囝回囟因囡团団囥囦囧囨囩囪囫囬园囯困囱囲図囶囷囸囹固囻囼圀圁圂圃圄圅圆圇圈圉圊國圌圍圎圏圐園圓圔圕圖圗圙圚圛圜圝圞
土圣圥圩圭圱圲圵圶圷圼坌坐坒坓坔坕坖坙坣坴垂垒垔垚垦垩埀埊埜基堂堃堇堊堯塁塋塞墓墨壃壄壆壐壘壨
士壬壱売壳壴壵壶壷壸壹壺壼壽夀夁
夋夌夎夏夐夑夒夓夔
夕夗夘夙多夢夣夤
大夨天太夫夭央夯夰夲夳夵夶夷夸夹夻夼夽夾夿奀奁奂奃奅奈奉奋奍奎奏奐奒奓奔奕奚奜奝奟奠奡奤奥奧奭奮奰奱
女奻妀如妃妄妅妆妇妊妌妕妛妝妞妟妥妦妪妴妻妽妾姃姆姏姐委姖姘姙姚姜姟姦姫姬姭姮姼娂娃娄娅娈娥娧娷娸娺娼婁婒婓婔婞婣婪婭婯婰婳婴媁媏媑媢媰媺嫈嫐嫑嫗嫩嫴嫿嬊嬍嬰嬲孁孌
子孑孒孓孕孖字孚孛孞孟季孥学孨孪孳孴孶學孿
宀宁宂它宄宆宇安宋完宍宎宐宑宔宗官宙宛宜実审客宣室宨宩宫宮宰宲害宴宵家宷宸容宺宻宽寀寅寈富寍寏寒寓寕寗寘寙寚寛寜寞察寠寡寥實寧寨審寪寫寬寭寮寰寳寶寷
寸
小尐少尒尓尔尕尖尘尙尚尛尜尝尞
尢尣尤尭
尺尽局屭
屮
山屲屳屴屶屾岀岁岂岇岑岔岕岗岙岚岡岦岧岪岺峀峁峃峇峊峑峕峚峜峝峦峩峷峹崇崈崋崑崒崗崙崟崣崩崬崮崽嵏嵐嵒嵓嵔嵞嵡嵤嵩嵾嶚嶜嶤嶨嶪嶳嶴嶽巒巔
巛巜川州巟巠巢巣巤
工左巨巫
己巷巸巹巺巻巽
巾巿帀币市布帇帋帑帘帚帛帝帟帠帣帤带帯帶常幂幕
干平幵并幷幸
幺幽幾
廾廿开弁异弃弄弅弆弇弈弉
弋弌弍弎式
弓弔引弖弗弚弜弟张弡弩弫弬弭弮弯弱弸弻弼弿彁彄彊彎
彐彑归当彔录彖彗彘彙彚
彡
彳
心忄忈忋忌忍忎志忝忞忠忡忢忩念忽忿态怂怄怅怇怌怒怔怘怚思怠怨怫怬怱怷怸总恆恇恊恋恌恒恖恙恚恛恧恩恭息恲恴恵恶恿悅悆悉悌悐患悤悥悦悪悫悬悱悲悶悹悻惌惎惔惖惙惠惡惢惥惪惷愆愇意愙愚愛愳慁慈慐慕慖慧慪慸憂憃憙憥憲懋懾戀
戈戋戌戍戎我戔或戨
戶戺戼
手扌才扑扛扣扫扭扸找承抂抇抈抙抠抯抷抸抻拂拇拏拑拒拙拜拝拤拯拰拱拲拳拸拹拼拿挂挊挋挑挕挙挛挜挧挩挮挷捙捛捝捧捵捶掇掌掑排掗掛掝掞掤掰掱掴揯揰揶搄搊搟搴搻搿摑摳摹撬擓擧攀攂攙攝攣
支
攵敻
文斈斉斊斋斍斎斐斑斖
斗
斦
无
日旦旧早旪旮旯旱旲旵旹旺旻昂昆昊昋昌昍明昏易昔昗昙昚昛昜昢春昦昪昬昰昱昲昴昷昺昻昼显晀晁晃晅晆晉晋晎晏晐晑晕晜晝晨晪普景晱晵晶晿暃暅暈暐暒暗暜暠暮暴曅曇曌曐曑曓曟曡曩曫
曰曱曲曳更曶曷書曹曺曻曼曽曾替朁會
月朋朏朒朓朕朝朞期朢朤
木朩未末本朮术朰朵朿杀杂李杏束杢来杰東杲杳枀枈林果枣枩枲枽某查柬柰柴査栄栆栗栞栾桀案桊桑桒桼桽梥梦梵棄棊棐棗棘棠棥棨森棻棼棽棾椉椕椘楍楙業楽榃榮槀槑槖樂樊橐橤檒檾櫐櫜欁欒
欠
止正此步歨歪歬歮歯歰歶
殳
毋毌母毐毒
比毕毘毚
毳
氏氐民氒
水氵氶永氺氼氽汁汆汇汌汖汞江汨汩汪汫汬沍沑沓沖沗沜沝沣沤沮沸沺泉泏泔泗泛泟泪泰泴泶洄洆洍洣洪洭洮洰洱洲洳洴洹洼浂浅浌浺涁涐涕涗涚涨涬涰涶淇淐淕淜淟淡淢淵淺淼淾渁渄渆渊渕渳渼湋滎滒漍潮潹潿澁澎澩瀺灄灓灥
火灬灭灮灯灰灳灵灷灻災灾炃炅炋炎炏炗炱為烉烎烝烡烹烾焈焋焏焚焛無焭焱焸焽煛熏熒熭熹燅燊燓燕燚燛燢燮燹燾爂爕爨
爪爫爭爯爲爳
父爸爹
爻爼爽爾
爿牀
片牋
牛牜牟牪犇犓犨犫
犬犭犾狂狃狅狆狇狉狒狙狟狣狦猅猆猉猋猖猠獄
玄玆率


  ]]


@20250929
编译就是生成静态数据，函数的二进制代码也是静态数据的一种，但是由于函数过程本来就是动态生成数据的过程，想要区分开来『哪些是静态数据』有点麻烦
  静态只读数据vs惰性缓存动态只读数据
    匿名数据，立即数
    只求值一次的匿名缓存数据，但问题是内层函数相对于哪个函数(绑定于哪一层函数 类似跳出循环break)？
      函数内层定义函数 lisp
      『if {x!!绑定于某外层函数实例} then ... else ...』导致只保留一个分支的代码
    调用函数 就地生成/注入 源代码或语法树

@20250929
私版awk
  先分段落，再分句...
view others/app/termux/help/awk-see-gawk.txt





@20251008
平行识别器/投喂型识别器
  注意:忽略庇护 的出现 必然是 由于 其输出值 被用作 后续识别器 的 语境参数。语境参数的递送 由 串联式 内部定义，所以 忽略庇护 只作用于 串联式 的 子部件。
  区分:后处理系统
    * 内禀硬编码牜不可忽略:不影响识别成败流程
    * 可忽略:不影响识别成败流程
      * 用户外赋:每次识别过程附加不同后处理
      * 内禀硬编码牜可忽略:所有识别过程一致
  封装所有输出值:
    #只有 键值{词典/记录},况态{Union,Cased}是简单数据？
    #惰性求值
    #欤可忽略-->忽略深度-->筛选输出值，但是 要能够 递归向下递送，还需要 额外考虑:该参数的类型 可能需要 对应于 识别器 的 嵌套循环模式。
    #外赋后处理
    Raw:任意类型
      忽略:指 忽略 Raw的内容，其余结构依然保持
    Unpack{Tuple/Array/Union/...}
      解包:只用作 子部件的输出
    Tuple:定长串
      NamedTuple/Record:定键词典/记录
      静态长度=>Tuple允许解包Tuple#但不允许解包Array
      内部庇护:可以指定某些子部件不被忽略
        => 前文输出 用作 下文参数
        => 受庇护子部件 全系统 禁用:外赋后处理
    Rope/Array:变长串
      LookupList/Dict:变键词典/词典
      动态长度=>Array允许解包Array,Tuple
      不可以指定某些子部件不被忽略
        =>只记录长度的形态(<==>[None]*length)
          ???但是 也许 子部件的结构有用？
          =>忽略深度:
            第0层 开始忽略 <==> 忽略自身
            第1层 开始忽略 <==> 忽略子部件，本层结构保持 #只影响Array/Dict之类
      ？？？内敛识别endBy!!!
      变长=>三种状态:树状结构vs平坦结构vs仅长度
        iter全遍历时 无需平坦化
        惰性平坦化
    Union:定况分立
      Union允许融并Union#但不允许融并Cased
      内部庇护:可以指定某些子部件不被忽略
    Cased:变况分立
      Cased允许融并Union,Cased
      不可以指定某些子部件不被忽略
      实例:料符 Cased(key, Raw)
  参数设置:
    识别器{静态参数}(每次识别过程的语境参数)
      状态等效:
        注意:前导噪声 不应当 改变 初始状态
    语境参数/context:分两类:
      kwds:简单参数，参与Hash
        可选，提供default
          default有助于id归一化
        无需确认总长度/键表
      args:复杂参数，不参与Hash,只用id区分
        可选，提供default
          default有助于id归一化
          default=>需要确认总长度
        上面出现的Tuple/Raw...都禁止__hash__
          因为必然是语境输出=>是复杂参数
          键值Hashable=>只有 键值{词典/记录},况态{Union,Cased}是简单数据
          静态参数:简单参数:Hashable
    intern()
      归一化{标准代表纟识别器}:类似 sys.intern :: str->str
  提示性与实用性:
    料符位置信息:外赋:不透明数据，假设用户可以解读，识别过程只搬运不涉及解读
      外用不内用
    料符位次信息:内禀:uint:识别过程内部使用，可用作外部提示(虽然不保证语义)
      内用不外用


@20251010
e script/trial_impl___lazy_import__with.py
    with ctx4lazy_import4funcs:
        from seed.tiny_.types5py import mk_MapView,curry1,kwargs2Attrs #,MapView

