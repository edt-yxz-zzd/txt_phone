TODO:goto
writings:goto
explain:goto


view TODO3\[20220407].txt
view TODO3[20220407].txt
  search:
    #def__backup_cmds:goto
    #文本质量评估
    #TODO
    #DOING
    #writing
    #explain
    #？下载
    #待查
    #design
    #lang
    #意必固我

e ../../python3_src/自己的相关数据/on_working.txt
e ../../python3_src/自己的相关数据/on_working4grep.txt
e others/book/read.txt
  各书 的 阅读进度
e others/book/已读小说.txt
  读完 的 小说

download:
  https://librarygenesis.pro/#!
    入口
    libgen 镜像网址收集
    https://libgen.lc

  https://sci-hub.ru/
    只有 摘要？
https://www.computerhope.com/
  https://www.computerhope.com/jargon/u/uuid.htm
https://translate.google.cn/?sl=auto&tl=zh-CN&text=multiset&op=translate
https://cn.bing.com/search?q=define+mapping
  或 搜索『define mapping』
    再 点击 底部 『More definitions』展开所有隐藏解释



view others/app/手机卡顿.txt
view others/app/手机自动关机重启掉电卡顿.txt
  [20220408] 占用空间大的APP的列表 以及 挑选出来的被删APP
  [[
[20220408]
  内部存储: 26.3 GB / 32.0 GB
  /sdcard/ 才 8.9G
  看来得删APP 共 15G
6.4G	/sdcard/0my_files
1.1G	/sdcard/autonavi 地图
353M	/sdcard/Android
186M	/sdcard/Download
156M	/sdcard/DraSticCN 模拟器
]]

133
0230
9373

[[[[[[[explain
e ./0explain.txt
[[
]]
[[
]]
[[
]]
[[
]]
[[
]]
[[
]]
[[
]]
[[
LP 线性规划 linear programming
  slack inequality (<=/>=) vs strict inequality(</>)
  slack variable
vs: slack relaxed lax
  slack: adj-Synonyms: [slow, moderate, easy]
  lax: adj-Synonyms: [permissive, lenient][loose, slack]
  lax: adj-Antonyms: [strict][taut, tight]
  relaxed: adj-Synonyms: [calm]
  relaxed: adj-Antonyms: [stressed, nervous, anxious]


[[
凸包（Convex Hull）
https://baike.baidu.com/item/%E5%87%B8%E5%8C%85/179150


目录
2
凸包

    科普中国 | 本词条由“科普中国”科学百科词条编写与应用工作项目审核
    审阅专家孙和军

凸包（Convex Hull）是一个计算几何（图形学）中的概念。

在一个实数向量空间V中，对于给定集合X，所有包含X的凸集的交集S被称为X的凸包。X的凸包可以用X内所有点(X1，...Xn)的凸组合来构造.

在二维欧几里得空间中，凸包可想象为一条刚好包著所有点的橡皮圈。

用不严谨的话来讲，给定二维平面上的点集，凸包就是将最外层的点连接起来构成的凸多边形，它能包含点集中所有的点。

    中文名
    凸包
    外文名
    Convex Hull
    定义
    包含集合X的所有凸集的交集
    内容
    一个计算几何（图形学）中的概念
    条件
    n维欧几里得空间中

快速
导航

    平面求法
    代码实例

定义
⒈对于一个集合D，D中任意有限个点的凸组合的全体称为D的凸包。
⒉对于一个集合D，所有包含D的凸集之交称为D的凸包。
可以证明，上述两种定义是等价的
概念
1 　点集Q的凸包（convex hull）是指一个最小凸多边形，满足Q中的点或者在多边形边上或者在其内。图1中由红色线段表示的多边形就是点集Q={p0,p1,...p12}的凸包。
图1 示例图
2 　一组平面上的点，求一个包含所有点的最小的凸多边形，这就是凸包问题了。这可以形象地想成这样：在地上放置一些不可移动的木桩，用一根绳子把他们尽量紧地圈起来，并且为凸边形，这就是凸包了。
数学定义：设S为欧几里得空间
的任意子集。包含S的最小凸集称为S的凸包，记作conv(S)。[1]
平面求法
常见求法
凸包最常用的凸包算法是Graham扫描法和Jarvis步进法
Graham's Scan法
这个算法是由数学大师葛立恒（Graham）发明的，他曾经是美国数学学会（AMS）主席、AT&T首席科学家以及国际杂技师协会（IJA）主席。
问题
给定平面上的二维点集，求解其凸包。
过程
⒈ 在所有点中选取y坐标最小的一点H，当作基点。如果存在多个点的y坐标都为最小值，则选取x坐标最小的一点。坐标相同的点应排除。然后按照其它各点p和基点构成的向量<H,p>；与x轴的夹角进行排序，夹角由大至小进行顺时针扫描，反之则进行逆时针扫描。实现中无需求得夹角，只需根据余弦定理求出向量夹角的余弦值即可。以图2为例，基点为H，根据夹角由小至大排序后依次为H，K，C，D，L，F，G，E，I，B，A，J。下面进行逆时针扫描。
图2 示例图
⒉ 线段<H,K>；一定在凸包上，接着加入C。假设线段<K,C>；也在凸包上，因为就H，K，C三点而言，它们的凸包就是由此三点所组成。但是接下来加入D时会发现，线段<K,D>；才会在凸包上，所以将线段<K,C>；排除，C点不可能是凸包。
⒊ 即当加入一点时，必须考虑到前面的线段是否在凸包上。从基点开始，凸包上每条相临的线段的旋转方向应该一致，并与扫描的方向相反。如果发现新加的点使得新线段与上线段的旋转方向发生变化，则可判定上一点必然不在凸包上。实现时可用向量叉积进行判断，设新加入的点为
，上一点为
，再上一点为
。顺时针扫描时，如果向量
与
的叉积为正（逆时针扫描判断是否为负），则将上一点删除。删除过程需要回溯，将之前所有叉积符号相反的点都删除，然后将新点加入凸包。
在图2中，加入K点时，由于线段<H,C>要旋转到<H,K>的角度，为顺时针旋转，所以C点不在凸包上，应该删除，保留K点。接着加入D点，由于线段<K,D>要旋转到<H,K>的角度，为逆时针旋转，故D点保留。按照上述步骤进行扫描，直到点集中所有的点都遍历完成，即得到凸包。
复杂度
这个算法可以直接在原数据上进行运算，因此空间复杂度为O⑴。但如果将凸包的结果存储到另一数组中，则可能在代码级别进行优化。由于在扫描凸包前要进行排序，因此时间复杂度至少为快速排序的O(nlgn)。后面的扫描过程复杂度为O(n)，因此整个算法的复杂度为O(nlgn)。
Jarvis步进法
对于一个有三个或以上点的点集Q，过程如下：
图3 示例图
计算点集最右边的点为凸包的顶点的起点，如图3的P3点。
Do
For i = 0 To 总顶点数
计算有向向量P3->Pi
If 其余顶点全部在有向向量P3->Pi的左侧或右侧，则Pi点为凸包的下一顶点
Pi点加入凸包列表
GoTo 1
End If
Next
Exit Do
1:
Loop
此过程执行后，点按极角自动顺时针或逆时针排序，只需要按任意两点的次序就可以了。而左侧或右侧的判断可以用前述的矢量点积性质实现。
中心法
先构造一个中心点，然后将它与各点连接起来，按斜率递增的方法，求出凸包上部；再按斜率递减的方法，求出凸包下部。
水平法
从最左边的点开始，按斜率递增的方法，求出凸包上部；再按斜率递减的方法，求出凸包下部。水平法较中心法减少了斜率无限大的可能，减少了代码的复杂度。
快包法
选择最左、最右、最上、最下的点，它们必组成一个凸四边形（或三角形）。这个四边形内的点必定不在凸包上。然后将其余的点按最接近的边分成四部分，再进行快包法(QuickHull)。
代码实例
C代码一

#include<stdio.h>
#include<math.h>
#include<stdlib.h>
typedefstruct
{
    doublex;
    doubley;
}POINT;
POINTresult[102];//保存凸包上的点，相当于所说的栈S
POINTa[102];
intn,top;
doubleDistance(POINTp1,POINTp2)//两点间的距离
{
    returnsqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}
doubleMultiply(POINTp1,POINTp2,POINTp3)//叉积
{
    return((p2.x-p1.x)*(p3.y-p1.y)-(p2.y-p1.y)*(p3.x-p1.x));
}
intCompare(constvoid*p1,constvoid*p2)//根据p0->p1的极值和p0->p2的极值进行比较，如果极值相同则用距离长度比较
{
    POINT*p3,*p4;
    doublem;
    p3=(POINT*)p1;
    p4=(POINT*)p2;
    m=Multiply(a[0],*p3,*p4);
    if(m<0)return1;
    elseif(m==0&&(Distance(a[0],*p3)<Distance(a[0],*p4)))
        return1;
    elsereturn-1;
}
//寻找凸包的过程，p0,p1,p2..的寻找过程在下面main中进行了
voidTubao()
{
    inti;
    result[0].x=a[0].x;
    result[0].y=a[0].y;
    result[1].x=a[1].x;
    result[1].y=a[1].y;
    result[2].x=a[2].x;
    result[2].y=a[2].y;
    top=2;
    for(i=3;i<=n;i++)
    {
        while(Multiply(result[top-1],result[top],a[i])<=0&&top>2)
            top--;
        result[top+1].x=a[i].x;
        result[top+1].y=a[i].y;
        top++;
    }
}
intmain()
{
    inti,p;
    doublepx,py,len,temp;
    while(scanf("%d",&n)!=EOF,n)
    {
        for(i=0;i<n;i++)
            scanf("%lf%lf",&a[i].x,&a[i].y);
        if(n==1)
        {
            printf("0.00/n");
            continue;
        }
        elseif(n==2)
        {
            printf("%.2lf/n",Distance(a[0],a[1]));
            continue;
        }
        //这里的目的好像是找出y坐标最小的点，之后把他定义为P0
        py=-1;
        for(i=0;i<n;i++)
        {
            if(py==-1||a[i].y<py)
            {
                px=a[i].x;
                py=a[i].y;
                p=i;
            }
            elseif(a[i].y==py&&a[i].x<px)
            {
                px=a[i].x;
                py=a[i].y;
                p=i;
            }
        }
        //swap(a[0],a[p])
        temp=a[0].x;
        a[0].x=a[p].x;
        a[p].x=temp;
        temp=a[0].y;
        a[0].y=a[p].y;
        a[p].y=temp;
        //用叉乘来实现排序的比较
        qsort(&a[1],n-1,sizeof(double)*2,Compare);
        a[n].x=a[0].x;
        a[n].y=a[0].y;
        //调用tubao（）
        Tubao();
        len=0.0;
        for(i=0;i<top;i++)
            len=len+Distance(result[i],result[i+1]);
        printf("%.2lf/n",len);
    }
    return0;
}


C代码二

#include<iostream>//求点集合的凸包的gram算法。n是顶点个数，x,y是顶点坐标。
#include<fstream>//order是按照顶点和左下脚的角度的排序后数组。
#include<deque>//tu即是逆时针的凸包上的顶点。
#include<math.h>

usingnamespacestd;//使用条件：1。点可以任意给，可重复。
//2。三个以及以上的点。
ifstreamfin("input.txt");//3。已经考虑了边上有点的情况。

#defineNN1000
#definepi3.1415827

typedefstructCseg
{
    doublex,y,tg;
}Cseg;
intn;
doublex[NN],y[NN];

deque<Cseg>order;
deque<int>tu;

Csegseg1;

deque<Cseg>::iteratorp1;
deque<int>::iteratorp,q;

voidin();
voidgram();
voidmakeorder(ints);
doubledist(doublex1,doubleyy1,doublex2,doubleyy2);

doublecross(doublex1,doubleyy1,doublex2,doubleyy2);
voidout();

intmain()
{
    in();
    gram();
    out();
    return0;
}
voidout()
{
    for(inti=0;i<tu.size();i++)
        cout<<order[tu].x<<""<<order[tu].y<<endl;
    cout<<tu.size()<<"EdgesPolydgon"<<endl;
    return;
}
voidin()
{
    fin>>n;
    for(inti=0;i<n;i++)
        fin>>x>>y;
    return;
}
voidgram()
{
    intmm;
    mm=0;
    for(inti=1;i<n;i++)
        if(y[mm]>y+1e-9)
            mm=i;
    elseif(fabs(y[mm]-y)<1e-9&&x[mm]>x+1e-9)
        mm=i;
    makeorder(mm);
    seg1.x=x[mm];
    seg1.y=y[mm];
    tu.clear();
    tu.push_back(0);
    tu.push_back(1);
    tu.push_back(2);
    for(inti=3;i<order.size();i++)
    {
        p=tu.end();
        seg1.x=order.x;
        seg1.y=order.y;
        p--;
        q=p-1;
        if(cross(order[*p].x-order[*q].x,order[*p].y-order[*q].y,order.x-order[*q].x,order.y-order[*q].y)>1e-9)
            tu.push_back(i);
        else
        {
            tu.pop_back();
            i--;
            continue;
        }
    }
    return;
}
voidmakeorder(ints)
{
    doubletg;
    order.clear();
    for(inti=0;i<n;i++)
    {
        if(i==s)
            continue;
        tg=atan2(y-y[s],x-x[s]);
        seg1.x=x;
        seg1.y=y;
        seg1.tg=tg;
        p1=order.begin();
        while(p1!=order.end())
        {
            if(fabs(tg-p1->tg)<1e-9)
            {
                if(dist(x[s],y[s],x,y)>dist(x[s],y[s],p1->x,p1->y)+1e-9)
                {
                    p1->x=x;
                    p1->y=y;
                }
                break;
            }
            elseif(tg<p1->tg)
            {
                order.insert(p1,seg1);
                break;
            }
            p1++;
        }
        if(p1==order.end())
            order.insert(p1,seg1);
    }
    seg1.x=x[s];
    seg1.y=y[s];
    order.insert(order.begin(),seg1);
    return;
}

doublecross(doublex1,doubleyy1,doublex2,doubleyy2)
{
    return(x1*yy2-x2*yy1);
}
doubledist(doublex1,doubleyy1,doublex2,doubleyy2)
{
    returnpow((x1-x2)*(x1-x2)+(yy1-yy2)*(yy1-yy2),0.5);
}


Pascal代码三

const
  pi=3.1415926575;
  zero=1e-6;
  maxn=1000;
  maxnum=100000000;

var
  ans,temp:extended;
  n,tot:longint;
  x,y:array[0..maxn] of extended;
  zz,num:array[0..maxn]of longint;


procedure swap(var ii,jj:extended);
 var
  t:extended;
    begin
      t:=ii;ii:=jj;jj:=t;
    end;

procedure init;
var
  i,j:longint;
    begin
      readln(n);
       for i:=1 to n do readln(x[i],y[i]);
   end;

function ok(x,midx,y,midy:extended):longint;
begin
if  abs(x-midx)<=zero then
  begin
    if abs(midy-y)<=zero then exit(0);
    if midy>y then exit(1)
    else exit(2);
  end
else
   begin
     if x<midx then exit(1)
     else exit (2);
   end;
end;

procedure qsort(head,tail:longint);
var
  i,j:longint;
  midx,midy:extended;
    begin
      i:=head;
      j:=tail;
      midx:=x[(head+tail)div 2];
      midy:=y[(head+tail)div 2];
      repeat
        while ok(x[i],midx,y[i],midy)=1 do inc(i);
        while ok(x[j],midx,y[j],midy)=2 do dec(j);
        if i<=j then
            begin
              swap(x[i],x[j]);
              swap(y[i],y[j]);
              inc(i);
              dec(j);
            end;
     until i>j;
      if i<tail then qsort(i,tail);
      if j>head then qsort(head,j);
end;

function Plot(x1,y1,x2,y2:extended):extended;
  begin
     Plot:=x1*y2-x2*y1;
  end;

function check(first,last,new:longint):boolean;
var
ax,ay,bx,by:extended;
Pt:extended;
begin
  ax:=x[last]-x[first];ay:=y[last]-y[first];
  bx:=x[new]-x[first];by:=y[new]-y[first];
  if Plot(ax,ay,bx,by)<=0 then exit(true)
   else exit(false);
end;

procedure Tbao;
var
i,j,tail:longint;
begin
 tot:=0;
 zz[1]:=1;tail:=1;
 for i:=2 to n do
    begin
      while(zz[tail]<>1)and check(zz[tail-1],zz[tail],i) do dec(tail);
      inc(tail);
      zz[tail]:=i;
    end;  
  inc(tot,tail-1);
  for i:=1 to tail-1 do
   num[i]:=zz[i];
  zz[1]:=n;tail:=1;
  for i:=n-1 downto 1 do
  begin
    while (zz[tail]<>n) and check(zz[tail-1],zz[tail],i) do dec(tail);
    inc(tail);
    zz[tail]:=i;
  end;
  for i:=1 to tail-1 do
  num[tot+i]:=zz[i];
  inc(tot,tail-1);
end;

function dist(a,b:longint):extended;
   begin
     dist:=sqrt((x[a]-x[b])*(x[a]-x[b])+(y[a]-y[b])*(y[a]-y[b]));
   end;
   
procedure main;
 var 
   i,j:longint;
  begin
    qsort(1,n);
    Tbao;
    ans:=0;
   for i:=1 to tot-1 do
        ans:=ans+dist(num[i],num[i+1]);
  ans:=ans+dist(num[tot],num[1]）;
  ans:=ans+temp*pi*2;
  writeln(ans:0:1);
 end;
 
begin
init;
main;
end.

参考资料

    [1]  王元，文兰，陈木法．数学大词典．科学出版社，2010

词条目录

        百科名片
        定义
        平面求法
        代码实例
        TA说
]]
[[
hull
[həl]
NOUN
hull (noun) · hulls (plural noun)

    the main body of a ship or other vessel, including the bottom, sides, and deck but not the masts, superstructure, rigging, engines, and other fittings.
    synonyms:
    framework · body · frame · skeleton · shell · structure · basic structure · exterior

VERB
hull (verb) · hulls (third person present) · hulled (past tense) · hulled (past participle) · hulling (present participle)

    hit and pierce the hull of (a ship) with a shell or other missile:
    "the ship was being hulled and all would die"

ORIGIN
Middle English: perhaps the same word as hull, or related to hold.
hull
[həl]
NOUN
hull (noun) · hulls (plural noun)

    the outer covering of a fruit or seed, especially the pod of peas and beans, or the husk of grain.
    synonyms:
    shell · husk · pod · case · casing · covering · seed case · rind · skin · peel · shuck · pericarp · capsule · legume · integument
        the green calyx of a strawberry or raspberry.

VERB
hull (verb) · hulls (third person present) · hulled (past tense) · hulled (past participle) · hulling (present participle)

    remove the hulls from (fruit, seeds, or grain):
    "first, rinse and hull the berries"
    synonyms:
    shell · husk · peel · pare · skin · shuck · decorticate

ORIGIN
Old English hulu, of Germanic origin; related to Dutch huls, German Hülse ‘husk, pod’, and German Hülle ‘covering’, also to heel.
Hull
[həl]
DEFINITION

    a city and port in northeastern England, situated at the junction of the Hull and Humber Rivers; population 263,000 (est. 2009). Official name Kingston upon Hull.

Translate hull to
noun

    船体
    赫尔
    船身
    船壳
    壳
    壳体
]]
[[
convex
con·vex
[ˌkänˈveks, ˈkänveks]
ADJECTIVE
convex (adjective)

    having an outline or surface curved like the exterior of a circle or sphere: Compare with concave.
    "a convex lens"
    synonyms:
    curved outward · cambered · rounded · bulging · swelling · protuberant · curvilinear · gibbous · outcurved
    antonyms:
    concave
    (of a polygon) having only interior angles measuring less than 180°.

ORIGIN
late 16th century: from Latin convexus ‘vaulted, arched’.
Translate convex to
noun

    凸
    凸面
    凸形
    凹凸
    凸起
    广角
]]
[[
simplex

sim·plex
[ˈsimpleks]
ADJECTIVE
technical
simplex (adjective)

    composed of or characterized by a single part or structure.
        (of a communications system, computer circuit, etc.) only allowing transmission of signals in one direction at a time.

NOUN
simplex (noun) · simplexes (plural noun)

    a simple or uncompounded word.

ORIGIN
late 16th century: from Latin, literally ‘single’, variant of simplus ‘simple’.
Translate simplex to
noun

    单纯形
    单缸
    单面

adjective

    单纯型
    单纯
]]
[[
slack
[slak]
ADJECTIVE
slack (adjective) · slacker (comparative adjective) · slackest (superlative adjective)

    not taut or held tightly in position; loose:
    "a slack rope" · "her mouth went slack"
    synonyms:
    loose · limp · not taut · not tight · hanging · flapping · relaxed · flexible · pliant · flaccid · flabby · sagging · saggy · drooping · droopy · soft · baggy · loose-fitting · generously cut · roomy · shapeless · sacklike · oversized · ill-fitting · bagging
    antonyms:
    tight · taut · stretched · toned · firm · tailored
    (of business) characterized by a lack of work or activity; quiet:
    "business was rather slack"
        slow or sluggish:
        "they were working at a slack pace"
        synonyms:
        sluggish · slow · quiet · slow-moving · not busy · inactive · flat · depressed · stagnant
        antonyms:
        busy · thriving
    having or showing laziness or negligence:
    "slack accounting procedures"
    synonyms:
    lax · negligent · neglectful · remiss · careless · slapdash · slipshod · lackadaisical · lazy · inefficient · incompetent · inattentive · offhand · casual · disorderly · disorganized · derelict · delinquent · otiose · pococurante
    antonyms:
    meticulous · diligent
    (of a tide) neither ebbing nor flowing:
    "soon the water will become slack, and the tide will turn"

NOUN
slack (noun) · slacks (plural noun)

    the part of a rope or line which is not held taut; the loose or unused part:
    "I picked up the rod and wound in the slack"
    synonyms:
    looseness · play · give
    a spell of inactivity or laziness:
    "he slept deeply, refreshed by a little slack in the daily routine"
    synonyms:
    lull · pause · respite · spell of inactivity · interval · break · hiatus · breathing space
    (slacks)
    casual trousers:
    "he put on a gray shirt and loose cotton slacks"

VERB
slack (verb) · slacks (third person present) · slacked (past tense) · slacked (past participle) · slacking (present participle)

    loosen (something, especially a rope):
    "slacking the outhaul allows you to adjust the sail"
    decrease or reduce in intensity, quantity, or speed:
    "the flow of blood slacked off" · "the horse slacked his pace"
    synonyms:
    reduce · lessen · slacken · slow · ease up/off · decrease · subside · get less · let up · ease off · abate · moderate · diminish · dwindle · die down · fall off · drop off · taper off · ebb · recede · wane · relax · take things easy · do less · loosen up · slow down · be less active · decelerate · reduce speed · drop speed · put the brakes on
    antonyms:
    increase · intensify · work harder · speed up · accelerate
    BRITISH
    informal
    work slowly or lazily:
    "she reprimanded her girls if they were slacking"
    synonyms:
    idle · shirk · be inactive · be lazy · be indolent · sit back and do nothing · waste time · lounge around
    antonyms:
    work hard
    slake (lime):
    "150 sacks of lime were slacked by the inrushing water"

ADVERB
slack (adverb)

    loosely:
    "their heads were hanging slack in attitudes of despair"

ORIGIN
Old English slæc ‘inclined to be lazy, unhurried’, of Germanic origin; related to Latin laxus ‘loose’.
slack
[slak]
NOUN
slack (noun)

    coal dust or small pieces of coal:
    "the fire was stoked with a mixture of slack and cement"

ORIGIN
late Middle English: probably from Low German or Dutch.
Translate slack to
noun

    可宽延时间
    懈怠
    松弛
    时差
    农闲
    呆滞
    松懈
    疲弱
    萧条

adjective

    松
]]
[[
tableau
  The Simplex Tableau

tab·leau
[ˌtaˈblō]
NOUN
tableau (noun) · tableaus (noun) · tableaux (plural noun)

    a group of models or motionless figures representing a scene from a story or from history; a tableau vivant:
    "in the first act the action is presented in a series of tableaux"
    synonyms:
    picture · painting · representation · portrayal · illustration · image · pageant · tableau vivant · human representation · parade · diorama · scene

ORIGIN
late 17th century (in the sense ‘picture’, figuratively ‘picturesque description’): from French, literally ‘picture’, diminutive of table (see table).
Translate tableau to
noun

    抽穗
]]
]]
[[
必要，必需，必须

不必 不必 [bu4 bi4] /need not/does not have to/not necessarily/
不必要 不必要 [bu4 bi4 yao4] /needless/unnecessary/

必要 必要 [bi4 yao4] /necessary/essential/indispensable/required/
必要性 必要性 [bi4 yao4 xing4] /necessity/
必要條件 必要条件 [bi4 yao4 tiao2 jian4] /requirement/necessary condition (math)/
必需 必需 [bi4 xu1] /to need/to require/essential/indispensable/
必需品 必需品 [bi4 xu1 pin3] /necessity/essential (thing)/
必須 必须 [bi4 xu1] /to have to/must/compulsory/necessarily/

非必要 非必要 [fei1 bi4 yao4] /inessential/unnecessary/
非必需 非必需 [fei1 bi4 xu1] /inessential/

生活 生活 [sheng1 huo2] /life/activity/to live/livelihood/
生活作風 生活作风 [sheng1 huo2 zuo4 feng1] /behavior/conduct/
生活垃圾 生活垃圾 [sheng1 huo2 la1 ji1] /domestic garbage/
生活必需品 生活必需品 [sheng1 huo2 bi4 xu1 pin3] /life's necessities/
生活方式 生活方式 [sheng1 huo2 fang1 shi4] /way of life/lifestyle/
生活水平 生活水平 [sheng1 huo2 shui3 ping2] /living standards/
生活污水 生活污水 [sheng1 huo2 wu1 shui3] /domestic sewage/

]]
[[
indirect
間接 间接 [jian4 jie1] /indirect/
間接稅 间接税 [jian1 jie1 shui4] /indirect tax/
間接證據 间接证据 [jian4 jie1 zheng4 ju4] /indirect testimony/circumstantial evidence/
間接賓語 间接宾语 [jian4 jie1 bin1 yu3] /indirect object (grammar)/
間接選舉 间接选举 [jian1 jie1 xuan3 ju3] /indirect election/
間斷 间断 [jian4 duan4] /disconnected/interrupted/suspended/
間歇 间歇 [jian4 xie1] /to stop in the middle of sth/intermittent/intermittence/
]]
[[
equation:
線性 线性 [xian4 xing4] /linear/linearity/
線性代數 线性代数 [xian4 xing4 dai4 shu4] /linear algebra/
線性回歸 线性回归 [xian4 xing4 hui2 gui1] /linear regression (statistics)/
線性方程 线性方程 [xian4 xing4 fang1 cheng2] /linear equation (math.)/
等式 等式 [deng3 shi4] /an equality/an equation/
聯立方程式 联立方程式 [lian2 li4 fang1 cheng2 shi4] /simultaneous equations (math.)/
薛定諤方程 薛定谔方程 [Xue1 ding4 e4 fang1 cheng2] /Schrödinger's wave equation/
解答 解答 [jie3 da2] /answer/explanation/solution (to a math equation)/
配方 配方 [pei4 fang1] /prescription/cooking recipe/formulation/completing the square (to solve quadratic equation, math)/
配方法 配方法 [pei4 fang1 fa3] /completing the square (method of solving quadratic equation, math)/
關係式 关系式 [guan1 xi4 shi4] /equation expressing a relation/
高次 高次 [gao1 ci4] /higher degree (e.g. equation in math.)/
一次性 一次性 [yi1 ci4 xing4] /one-off (offer)/one-time/single-use/disposable (goods)/
一次方程 一次方程 [yi1 ci4 fang1 cheng2] /linear equation/
一次方程式 一次方程式 [yi1 ci4 fang1 cheng2 shi4] /linear equation (math.)/
三次 三次 [san1 ci4] /third/three times/(math.) degree three, cubic (equation)/
三次冪 三次幂 [san1 ci4 mi4] /cube (third power, math.)/
三次方 三次方 [san1 ci4 fang1] /cube (third power, math.)/
三次方程 三次方程 [san1 ci4 fang1 cheng2] /cubic equation (math.)/
三次曲線 三次曲线 [san1 ci4 qu1 xian4] /cubic curve (geometry)/
不定方程 不定方程 [bu4 ding4 fang1 cheng2] /(math.) indeterminate equation/
不定積分 不定积分 [bu4 ding4 ji1 fen1] /indefinite integral (math.)/
二次函數 二次函数 [er4 ci4 han2 shu4] /quadratic function/
二次型 二次型 [er4 ci4 xing2] /quadratic form (math.)/
二次多項式 二次多项式 [er4 ci4 duo1 xiang4 shi4] /quadratic polynomial/
二次方 二次方 [er4 ci4 fang1] /square (i.e. x times x)/
二次方程 二次方程 [er4 ci4 fang1 cheng2] /quadratic equation/
二次曲 二次曲 [er4 ci4 qu1] /quadratic curve/conic section (geometry)/
二次曲線 二次曲线 [er4 ci4 qu1 xian4] /quadratic curve (geometry)/conic/
二次曲面 二次曲面 [er4 ci4 qu1 mian4] /quadric surface (geometry)/
二重根 二重根 [er4 chong2 gen1] /a double root of an equation/
代數 代数 [dai4 shu4] /algebra/
代數函數 代数函数 [dai4 shu4 han2 shu4] /(math.) algebraic function/
代數函數論 代数函数论 [dai4 shu4 han2 shu4 lun4] /algebraic function theory (math.)/
代數和 代数和 [dai4 shu4 he2] /algebraic sum/
代數基本定理 代数基本定理 [dai4 shu4 ji1 ben3 ding4 li3] /fundamental theorem of algebra/
代數學 代数学 [dai4 shu4 xue2] /algebra (as branch of math.)/
代數學基本定理 代数学基本定理 [dai4 shu4 xue2 ji1 ben3 ding4 li3] /fundamental theorem of algebra (every polynomial has a complex root)/
代數幾何 代数几何 [dai4 shu4 ji3 he2] /algebraic geometry/
代數幾何學 代数几何学 [dai4 shu4 ji3 he2 xue2] /algebraic geometry/
代數式 代数式 [dai4 shu4 shi4] /algebraic formula/
代數拓撲 代数拓扑 [dai4 shu4 tuo4 pu1] /algebraic topology (math.)/
代數數域 代数数域 [dai4 shu4 shu4 yu4] /algebraic number field (math.)/
代數方程 代数方程 [dai4 shu4 fang1 cheng2] /algebraic equation/polynomial equation/
代數曲線 代数曲线 [dai4 shu4 qu1 xian4] /algebraic curve/
代數曲面 代数曲面 [dai4 shu4 qu1 mian4] /algebraic surface/
代數簇 代数簇 [dai4 shu4 cu4] /algebraic variety (math.)/
代數結構 代数结构 [dai4 shu4 jie2 gou4] /algebraic structure/
代數群 代数群 [dai4 shu4 qun2] /algebraic group (math.)/
代數量 代数量 [dai4 shu4 liang4] /algebraic quantity/
偏微分 偏微分 [pian1 wei1 fen1] /(math.) partial differential/(math.) partial derivative/
偏微分方程 偏微分方程 [pian1 wei1 fen1 fang1 cheng2] /partial differential equation (PDE)/
偏心 偏心 [pian1 xin1] /partial/biased/prejudiced/eccentric/
偏心率 偏心率 [pian1 xin1 lu:4] /(math.) eccentricity/
公共零點 公共零点 [gong1 gong4 ling2 dian3] /common zeros (of system of equations)/
刁藩都 刁藩都 [Diao1 fan1 dou1] /Diophantus of Alexandria (3rd century AD), Greek mathematician/
刁藩都方程 刁藩都方程 [Diao1 fan1 dou1 fang1 cheng2] /Diophantine equation/
判別 判别 [pan4 bie2] /to differentiate/to discriminate/
判別式 判别式 [pan4 bie2 shi4] /discriminant (e.g. b^2-4ac in the formula for the root of a quadratic equation)/
化學方程式 化学方程式 [hua4 xue2 fang1 cheng2 shi4] /chemical equation/
反應 反应 [fan3 ying4] /to react/to respond/reaction/response/reply/chemical reaction/CL:個|个[ge4]/
反應堆 反应堆 [fan3 ying4 dui1] /reactor/
反應堆燃料元件 反应堆燃料元件 [fan3 ying4 dui1 ran2 liao4 yuan2 jian4] /fuel element/
反應堆芯 反应堆芯 [fan3 ying4 dui1 xin1] /reactor core/
反應式 反应式 [fan3 ying4 shi4] /equation of a chemical reaction/
反應時 反应时 [fan3 ying4 shi2] /response time/
反應時間 反应时间 [fan3 ying1 shi2 jian1] /response time (technology)/
反應鍋 反应锅 [fan3 ying4 guo1] /reaction pot (chemical engineering)/cauldron (at Hogwarts 霍格沃茨)/
反戰 反战 [fan3 zhan4] /anti-war/
反戰抗議 反战抗议 [fan3 zhan4 kang4 yi4] /antiwar protest/
同餘 同余 [tong2 yu2] /congruent (math.)/having same residue modulo some number/
同餘式 同余式 [tong2 yu2 shi4] /congruence (math.)/equation for residue modulo some number/
同餘類 同余类 [tong2 yu2 lei4] /congruence class (of integers modulo n)/
多項式 多项式 [duo1 xiang4 shi4] /polynomial (math.)/multinomial/
多項式方程 多项式方程 [duo1 xiang4 shi4 fang1 cheng2] /(math.) polynomial equation/
多項式方程組 多项式方程组 [duo1 xiang4 shi4 fang1 cheng2 zu3] /(math.) system of polynomial equations/
奇解 奇解 [qi2 jie3] /singular solution (to a math. equation)/
差分 差分 [cha1 fen1] /(math.) increment/difference/(engineering) differential/
差分方程 差分方程 [cha1 fen1 fang1 cheng2] /difference equation (math.)/
常微分方程 常微分方程 [chang2 wei1 fen1 fang1 cheng2] /ordinary differential equation (ODE)/
微分 微分 [wei1 fen1] /(math.) differential (of a function)/differential (equation etc)/to differentiate/differentiation/
微分學 微分学 [wei1 fen1 xue2] /differential calculus/
微分幾何 微分几何 [wei1 fen1 ji3 he2] /differential geometry/
微分幾何學 微分几何学 [wei1 fen1 ji3 he2 xue2] /differential geometry/
微分方程 微分方程 [wei1 fen1 fang1 cheng2] /differential equation (math.)/
微創手術 微创手术 [wei1 chuang1 shou3 shu4] /minimally invasive surgery/
方程 方程 [fang1 cheng2] /mathematical equation/
方程式 方程式 [fang1 cheng2 shi4] /equation/
方程組 方程组 [fang1 cheng2 zu3] /(math.) simultaneous equations/system of equations/
求解 求解 [qiu2 jie3] /to require a solution/to seek to solve (an equation)/
波方程 波方程 [bo1 fang1 cheng2] /wave equation (math. physics)/
消元 消元 [xiao1 yuan2] /elimination (math)/to eliminate one variable from equations/
特解 特解 [te4 jie3] /particular solution (to a math. equation)/
相平面 相平面 [xiang4 ping2 mian4] /phase plane (math., ordinary differential equations)/
相空間 相空间 [xiang4 kong1 jian1] /phase space (math., ordinary differential equations)/
積 积 [ji1] /to amass/to accumulate/to store/measured quantity (such as area of volume)/product (the result of multiplication)/to integrate (math.)/to solve (or integrate) an ordinary differential equation (math.)/old/long-standing/
積冰 积冰 [ji1 bing1] /ice accretion/
積分 积分 [ji1 fen1] /integral (calculus)/accumulated points (in sports, at school etc)/total credits earned by student/bonus points in a benefit scheme/
積分學 积分学 [ji1 fen1 xue2] /integral calculus/
積分常數 积分常数 [ji1 fen1 chang2 shu4] /constant of integration (math.)/
積分方程 积分方程 [ji1 fen1 fang1 cheng2] /integral equation (math.)/
積分榜 积分榜 [ji1 fen1 bang3] /table of scores (in exams or sports league)/
積分變換 积分变换 [ji1 fen1 bian4 huan4] /integral transform (math.)/
積勞成疾 积劳成疾 [ji1 lao2 cheng2 ji2] /to accumulate work causes sickness (idiom); to fall ill from constant overwork/
積厚流廣 积厚流广 [ji1 hou4 liu2 guang3] /deep rooted and influential/
積垢 积垢 [ji1 gou4] /deeply accumulated filth/
積壓 积压 [ji1 ya1] /to pile up/to accumulate without being dealt with/
等價 等价 [deng3 jia4] /equal/equal in value/equivalent/
等價關係 等价关系 [deng3 jia4 guan1 xi4] /equivalence relation (math.)/
等分 等分 [deng3 fen1] /division into equal parts/equipartition/
等到 等到 [deng3 dao4] /to wait until/by the time when (sth is ready etc)/
等同 等同 [deng3 tong2] /to equate/equal to/
等周 等周 [deng3 zhou1] /isoperimetric/
等周不等式 等周不等式 [deng3 zhou1 bu4 deng3 shi4] /the isoperimetric inequality/
等因奉此 等因奉此 [deng3 yin1 feng4 ci3] /officialese/official routine/(old) (conventional phrase used in response to one's superior) in view of the above, we therefore.../
等壓 等压 [deng3 ya1] /constant pressure/equal pressure/
等壓線 等压线 [deng3 ya1 xian4] /isobar (line of equal pressure)/
等差 等差 [deng3 cha1] /degree of disparity/equal difference/
等差數列 等差数列 [deng3 cha1 shu4 lie4] /arithmetic progression/
等差級數 等差级数 [deng3 cha1 ji2 shu4] /arithmetic series (such as 2+4+6+8+...)/
等式 等式 [deng3 shi4] /an equality/an equation/
等待 等待 [deng3 dai4] /to wait/to wait for/
等效百萬噸當量 等效百万吨当量 [deng3 xiao4 bai3 wan4 dun1 dang1 liang4] /equivalent megatonnage (EMT)/
等於 等于 [deng3 yu2] /to equal/to be tantamount to/
等比 等比 [deng3 bi3] /geometric (of mathematical sequences or progressions)/
等比數列 等比数列 [deng3 bi3 shu4 lie4] /geometric progression/
等比級數 等比级数 [deng3 bi3 ji2 shu4] /geometric series (such as 1+2+4+8+...)/
等溫 等温 [deng3 wen1] /constant temperature/equal temperature/
等熵線 等熵线 [deng3 shang1 xian4] /isentropic curve (physics})/
等第 等第 [deng3 di4] /level/rank/grade/rating/
等等 等等 [deng3 deng3] /et cetera/and so on .../wait a minute!/hold on!/
等級 等级 [deng3 ji2] /grade/rank/status/
等級制度 等级制度 [deng3 ji2 zhi4 du4] /hierarchy/
等而下之 等而下之 [deng3 er2 xia4 zhi1] /going from there to lower grades (idiom)/
等腰三角形 等腰三角形 [deng3 yao1 san1 jiao3 xing2] /isosceles triangle/
等著瞧 等着瞧 [deng3 zhe5 qiao2] /wait and see (who is right)/
等號 等号 [deng3 hao4] /(math.) equals sign =/
等變壓線 等变压线 [deng3 bian4 ya1 xian4] /isallobar (line of equal pressure gradient)/
等距 等距 [deng3 ju4] /equidistant/
等軸晶系 等轴晶系 [deng3 zhou2 jing1 xi4] /cubical system (crystallography)/crystal system based on cubic lattice/equiaxial crystal system/
等邊三角形 等边三角形 [deng3 bian1 san1 jiao3 xing2] /equilateral triangle/
線性 线性 [xian4 xing4] /linear/linearity/
線性代數 线性代数 [xian4 xing4 dai4 shu4] /linear algebra/
線性回歸 线性回归 [xian4 xing4 hui2 gui1] /linear regression (statistics)/
線性方程 线性方程 [xian4 xing4 fang1 cheng2] /linear equation (math.)/
線性波 线性波 [xian4 xing4 bo1] /linear wave/
線性算子 线性算子 [xian4 xing4 suan4 zi5] /linear operator (math.)/
線性系統 线性系统 [xian4 xing4 xi4 tong3] /linear system/
線性規劃 线性规划 [xian4 xing4 gui1 hua4] /linear programming/
線桿 线杆 [xian4 gan3] /telephone pole/utility pole/
線條 线条 [xian4 tiao2] /line (in drawing, calligraphy etc)/the lines or contours of a three-dimensional object (hairstyle, clothing, car etc)/
線段 线段 [xian4 duan4] /line segment/
線狀 线状 [xian4 zhuang4] /linear/
線粒體 线粒体 [xian4 li4 ti3] /mitochondrion/
線索 线索 [xian4 suo3] /trail/clues/thread (of a story)/
線繩 线绳 [xian4 sheng2] /string/cotton rope/
線纜 线缆 [xian4 lan3] /cable/wire/cord (computer)/

等式:
恆等 恒等 [heng2 deng3] /identity ≡ (math., logic)/identical/
恆等式 恒等式 [heng2 deng3 shi4] /identity (math.)/
不等式 不等式 [bu4 deng3 shi4] /inequality (math.)/
不等號 不等号 [bu4 deng3 hao4] /inequality sign (≠, < , ≤, >, ≥)/
不等邊三角形 不等边三角形 [bu4 deng3 bian1 san1 jiao3 xing2] /scalene triangle/
等同 等同 [deng3 tong2] /to equate/equal to/
等周 等周 [deng3 zhou1] /isoperimetric/
等周不等式 等周不等式 [deng3 zhou1 bu4 deng3 shi4] /the isoperimetric inequality/


]]
[[
特解 特解 [te4 jie3] /particular solution (to a math. equation)/
不可解 不可解 [bu4 ke3 jie3] /insoluble (i.e. impossible to solve)/
待解 待解 [dai4 jie3] /unresolved/awaiting solution/
近似解 近似解 [jin4 si4 jie3] /approximate solution/
週期解 周期解 [zhou1 qi1 jie3] /periodic solution (math.)/

齐次解？
齊次 齐次 [qi2 ci4] /homogeneous (mathematics)/
可逆 可逆 [ke3 ni4] /reversible/(math.) invertible/
可逆性 可逆性 [ke3 ni4 xing4] /reversibility/
分量 分量 [fen1 liang4] /(vector) component/
分量 分量 [fen4 liang5] /quantity/weight/measure/
對角 对角 [dui4 jiao3] /opposite angle/
對角線 对角线 [dui4 jiao3 xian4] /(geometry) a diagonal/
diagnose vt/vi 诊断
diagram n/v 图解
dialog/dialogue 对话，对白
dialect 方言
dialectic 辩证法


典型 典型 [dian3 xing2] /model/typical case/archetype/typical/representative/
典型化 典型化 [dian3 xing2 hua4] /stereotype/exemplar/typification/

代表:
  deputy n. 代表 adj. 副的，代理的
  representative n. 代表，典型，众议员 adj. 代表性的，典型的，代议制的
  delegate n. 代表 vt. 委任，派...为代表

代表 代表 [dai4 biao3] /representative/delegate/CL:位[wei4],個|个[ge4],名[ming2]/to represent/to stand for/on behalf of/in the name of/
代表人物 代表人物 [dai4 biao3 ren2 wu4] /representative individual (of a school of thought)/
代表作 代表作 [dai4 biao3 zuo4] /representative work (of an author or artist)/
代表團 代表团 [dai4 biao3 tuan2] /delegation/CL:個|个[ge4]/
代表性 代表性 [dai4 biao3 xing4] /representativeness/representative/typical/
代表處 代表处 [dai4 biao3 chu4] /representative office/
代表隊 代表队 [dai4 biao3 dui4] /delegation/
法定代表人 法定代表人 [fa3 ding4 dai4 biao3 ren2] /(law) legal representative of a corporation (e.g. chairman of the board of a company, principal of a school etc)/
首席代表 首席代表 [shou3 xi2 dai4 biao3] /chief representative/

]]
[[
pivot
piv·ot
[ˈpivət]
NOUN
pivot (noun) · pivots (plural noun) · pivotman (noun) · pivotmen (plural noun)

    the central point, pin, or shaft on which a mechanism turns or oscillates.
    synonyms:
    central shaft · fulcrum · axis · axle · swivel · pin · hub · spindle · hinge · pintle · kingpin · gudgeon · trunnion
        a person or thing that plays a central part in an activity or organization:
        "the pivot of community life was the chapel"
        synonyms:
        center · focal point · focus · central point · hub · heart · nucleus · raison d'être · crux · keystone · cornerstone · linchpin · kingpin
        the person or people about whom a body of troops wheels.
        NORTH AMERICAN
        a player in a central position in a team sport.
        basketball
        a movement in which the player holding the ball may move in any direction with one foot, while keeping the other (the pivot foot) in contact with the floor.

VERB
pivot (verb) · pivots (third person present) · pivoted (past tense) · pivoted (past participle) · pivoting (present participle)

    turn on or as if on a pivot:
    "the sail pivots around the axis of the mast" · "he swung around, pivoting on his heel"
    synonyms:
    rotate · turn · revolve · spin · swivel · twirl · whirl · wheel · oscillate
        provide (a mechanism) with a pivot; fix (a mechanism) on a pivot.
        (pivot on)
        depend on:
        "your escape pivots on my disappearing with you"
        synonyms:
        depend · hinge · turn · center · hang · rely · rest · be contingent · revolve around
    (especially in a business context) completely change the way in which one does something:
    "the teams performed exceptionally by quickly pivoting to meet the increased demand from our customers" · "she sold off her equipment and pivoted back to her original model of running classes"
        begin to run or manage (something) in a completely different way:
        "practice creativity in pivoting your business from its current platforms to new ways of service deliveries" · "Mike had a passion for cooking and pivoted his career into food service"

ORIGIN
late Middle English: from French, probably from the root of dialect pue ‘tooth of a comb’ and Spanish pu(y)a ‘point’. The verb dates from the mid 19th century.
Translate pivot to
noun

    枢轴
    透视
    支点
    数据透视表
    枢纽

adjective

    先导
]]
[[
closure
clo·sure
[ˈklōZHər]
NOUN
closure (noun) · closures (plural noun)

    an act or process of closing something, especially an institution, thoroughfare, or frontier, or of being closed:
    "hospitals that face closure" · "road closures"
    synonyms:
    closing down · shutting down · shutdown · winding up · termination · discontinuation · discontinuance · cessation · finish · finishing · conclusion · concluding · stoppage · stopping · halting · ceasing · failure
        a thing that closes or seals something, such as a cap or zipper.
    (in a legislative assembly) a procedure for ending a debate and taking a vote; cloture:
    "a closure motion"
    a sense of resolution or conclusion at the end of an artistic work:
    "he brings modernistic closure to his narrative"
        a feeling that an emotional or traumatic experience has been resolved:
        "I am desperately trying to reach closure but I don't know how to do it without answers from him"

ORIGIN
late Middle English: from Old French, from late Latin clausura, from claus- ‘closed’, from the verb claudere.
Translate closure to
noun

    闭包
    封闭
    关闭
    闭合
    截流
    收尾
    封
    封锁
    倒闭
]]
[[
rank
[raNGk]
NOUN
rank (noun) · ranks (plural noun) · the ranks (plural noun)

    a position in the hierarchy of the armed forces:
    "an army officer of fairly high rank" · "he was promoted to the rank of Captain"
        a position within the hierarchy of an organization or society:
        "only two cabinet members had held ministerial rank before"
        synonyms:
        position · grade · level · echelon · gradation · point on the scale · rung on the ladder · class · stratum · status · station · standing
        high social position:
        "persons of rank and breeding"
        synonyms:
        high standing · nobility · aristocracy · blue blood · high birth · eminence · distinction · prestige · prominence · influence · importance · consequence · power
        statistics
        a number specifying position in a numerically ordered series.
    a single line of soldiers or police officers drawn up abreast:
    "they were drawn up outside their barracks in long ranks"
    synonyms:
    row · line · file · column · series · succession · string · train · procession · queue
        a regular row or line of things or people:
        "conifer plantations growing in serried ranks"
        chess
        each of the eight rows of eight squares running from side to side across a chessboard. Compare with file.
    (ranks)
    the people belonging to or constituting a group or class:
    "the ranks of the unemployed"
        (the ranks)
        common soldiers as opposed to officers:
        "he was fined and reduced to the ranks"
    mathematics
    the value or the order of the largest nonzero determinant of a given matrix.
        an analogous quantity in other kinds of groups.

VERB
rank (verb) · ranks (third person present) · ranked (past tense) · ranked (past participle) · ranking (present participle)

    give (someone or something) a rank or place within a grading system:
    "she is ranked number four in the world" · "rank them in order of preference"
    synonyms:
    classify · class · categorize · rate · grade · type · order · sort · bracket · group · pigeonhole · designate · codify · catalog · file · list · tabulate · triage
        have a specified rank or place within a grading system:
        "he ranks with Newman as one of the outstanding English theologians"
        synonyms:
        have a rank · be graded · be placed · be positioned · have a status · be classed · be classified · be categorized · belong
        US
        take precedence over (someone) in respect of rank; outrank:
        "the Secretary of State ranks all the other members of the cabinet"
    arrange in a rank or ranks:
    "the tents were ranked in orderly rows"
    synonyms:
    line up · align · draw up · put/set in order · order · place · position · arrange · dispose · set out · array · range

ORIGIN
Middle English (in the sense ‘row of things’): from Old French ranc, of Germanic origin; related to ring.
rank
[raNGk]
ADJECTIVE
rank (adjective) · ranker (comparative adjective) · rankest (superlative adjective)

    (of vegetation) growing too thickly and coarsely:
    "clumps of rank grass"
    synonyms:
    abundant · lush · luxuriant · dense · profuse · flourishing · exuberant · vigorous · productive · spreading · overgrown
    antonyms:
    sparse
    (especially of air or water) having a foul or offensive smell:
    "breathing rank air"
    synonyms:
    offensive · unpleasant · nasty · disagreeable · revolting · sickening · obnoxious · noxious · foul-smelling · evil-smelling · fetid · smelly · stinking · reeking · reeky · high · off · rancid · putrid · malodorous · ill-smelling · fusty · musty · stale · noisome · mephitic · miasmic · miasmal · olid
    antonyms:
    pleasant
        informal
        very unpleasant:
        "the tea at work is nice but the coffee's pretty rank"
    (especially of something bad or deficient) complete and utter (used for emphasis):
    "rank stupidity" · "a rank outsider" · "rank amateurs"
    synonyms:
    downright · utter · outright · out-and-out · absolute · complete · sheer · stark · thorough · thoroughgoing · categorical · unequivocal · undeniable · unqualified · unmodified · unrestricted · unmitigated · unconditional · positive · simple · wholesale · all-out · perfect · consummate · patent · pure · total · entire · flat · direct · dead · final · conclusive · arrant · right-down

ORIGIN
Old English ranc ‘proud, rebellious, sturdy’, also ‘fully grown’, of Germanic origin. An early sense ‘luxuriant’ gave rise to ‘too luxuriant’, whence the negative connotation of modern usage.
Translate rank to
noun

    排名
    秩
    等级
    军衔
    茂盛
    职级
    级别

verb

    排列
]]
[[
threshold
thresh·old
[ˈTHreSHˌ(h)ōld]
NOUN
threshold (noun) · thresholds (plural noun)

    a strip of wood, metal, or stone forming the bottom of a doorway and crossed in entering a house or room:
    "he stood on the threshold of Sheila's bedroom"
    synonyms:
    doorstep · sill · doorsill · doorway · entrance · entry · way in · door · gate · gateway · portal · approach
        a point of entry or beginning:
        "she was on the threshold of a dazzling career"
        synonyms:
        start · starting point · beginning · brink · verge · edge · dawn · birth · origin · inception · conception · opening · launch · inauguration · institution · initiation · debut · creation · day one · commencement
        antonyms:
        end
        the beginning of an airport runway on which an aircraft is attempting to land.
    the magnitude or intensity that must be exceeded for a certain reaction, phenomenon, result, or condition to occur or be manifested:
    "nothing happens until the signal passes the threshold" · "a threshold level"
        the maximum level of radiation or a concentration of a substance considered to be acceptable or safe:
        "their water would meet the safety threshold of 50 milligrams of nitrates per liter"
        synonyms:
        lower limit · starting point · minimum · margin · limen
        a limit below which a stimulus causes no reaction:
        "everyone has a different pain threshold"
        a level, rate, or amount at which something comes into effect:
        "the tax threshold has risen to $10,492 of adjusted gross income"

ORIGIN
Old English therscold, threscold; related to German dialect Drischaufel; the first element is related to thresh (in a Germanic sense ‘tread’), but the origin of the second element is unknown.
Translate threshold to
noun

    阈值
    门槛
    门限
    阈
    临界
]]
[[
universal 通用/万能 #普适

u·ni·ver·sal
[ˌyo͞onəˈvərsəl]
ADJECTIVE
universal (adjective)

    of, affecting, or done by all people or things in the world or in a particular group; applicable to all cases:
    "universal adult suffrage" · "the incidents caused universal concern"
    synonyms:
    general · ubiquitous · comprehensive · common · omnipresent · all-embracing · all-inclusive · all-around · across the board · global · worldwide · international · widespread · blanket · sweeping · rampant · catholic · inescapable · pervading · pervasive · permeating
    antonyms:
    particular · restricted · local
        logic
        denoting a proposition in which something is asserted of all of a class. Contrasted with particular.
        linguistics
        denoting or relating to a grammatical rule, set of rules, or other linguistic feature that is found in all languages.
        (of a tool or machine) adjustable to or appropriate for all requirements; not restricted to a single purpose or position.

NOUN
universal (noun) · universals (plural noun)

    a person or thing having universal effect, currency, or application.
        logic
        a universal proposition.
        philosophy
        a term or concept of general application.
        philosophy
        a nature or essence signified by a general term.
        linguistics
        a universal grammatical rule or linguistic feature.

ORIGIN
late Middle English: from Old French, or from Latin universalis, from universus (see universe).
U·ni·ver·sal
[ˌyo͞onəˈvərsəl]
DEFINITION

    a movie production company formed by Carl Laemmle in 1912, one of the first studios to move from New York to the Los Angeles area. The company merged with MCA (Music Corporation of America) in 1962. The company produced movies starring Abbott and Costello, the series of Sherlock Holmes movies featuring Basil Rathbone and Nigel Bruce, and blockbusters such as ET The Extra-Terrestrial (1982).

Translate universal to
noun

    环球

adjective

    普遍
    通用
    万能
    普世
    普及
    普遍性
    全民
    宇宙
]]
[[
subscribe 订阅，赞同
sub·scribe
[səbˈskrīb]
VERB
subscribe (verb) · subscribes (third person present) · subscribed (past tense) · subscribed (past participle) · subscribing (present participle)

    arrange to receive something regularly, typically a publication, by paying in advance:
    "subscribe to the magazine for twelve months and receive a free T-shirt"
    synonyms:
    pay a subscription · buy regularly · take · take regularly · read · read regularly · contract to buy · be a member of · support
        arrange for access to an electronic mailing list or online service:
        "some 40,000 users have subscribed to the service at $ 2.99 per month"
        BRITISH
        contribute or undertake to contribute a certain sum of money to a particular fund, project, or charitable cause, typically on a regular basis:
        "he is one of the millions who subscribe to the NSPCC" · "he subscribed £400 to the campaign"
        synonyms:
        donate · make a donation · make a subscription · give · give money · make a contribution · pay · pledge · contribute toward · sponsor · finance · back · subsidize · underwrite
        apply to participate in:
        "the course has been fully subscribed"
        apply for or undertake to pay for an offering of shares of stock:
        "yesterday's offering was fully subscribed" · "investors would subscribe electronically to the initial stock offerings"
        (of a bookseller) agree before publication to take (a certain number of copies of a book):
        "most of the first print run of 15,000 copies has been subscribed"
    (subscribe to)
    express or feel agreement with (an idea or proposal):
    "we prefer to subscribe to an alternative explanation"
    synonyms:
    agree with · be in agreement with · accede to · consent to · accept · believe in · endorse · back · support · advocate · champion
    formal
    sign (a will, contract, or other document):
    "he subscribed the will as a witness"
    synonyms:
    sign · write · inscribe · initial · autograph · countersign · witness · put one's mark on · add · append · set one's hand to · underwrite · style · side-sign · chirographate
        sign (one's name) on a legal document:
        "he was ordered to subscribe his name"
        synonyms:
        sign · write · inscribe · initial · autograph · countersign · witness · put one's mark on · add · append · set one's hand to · underwrite · style · side-sign · chirographate
        archaic
        (subscribe oneself)
        sign oneself as:
        "he ventured still to subscribe himself her most obedient servant"

ORIGIN
late Middle English (in the sense ‘sign at the bottom of a document’): from Latin subscribere, from sub- ‘under’ + scribere ‘write’.
Translate subscribe to
verb

    订阅
    认购
    预订
    赞同
    订
    订购
]]
[[[
requirements vs dependencies
[[
]]
[[
project charter # 来自 project management
charter 章程

char·ter
[ˈCHärdər]
NOUN
charter (noun) · charters (plural noun)

    a written grant by a country's legislative or sovereign power, by which a body such as a company, college, or city is founded and its rights and privileges defined:
    "the town received a charter from the Emperor"
    synonyms:
    authority · authorization · sanction · covenant · dispensation · consent · permission · sufferance · prerogative · privilege · right · droit · permit · license · warrant · warranty · deed · bond · document · indenture · concession · franchise
        a written constitution or description of an organization's functions:
        "the impending review of the BBC's Charter"
        synonyms:
        constitution · code · canon · body of law · system of rules · fundamental principles · rules · laws
    the reservation of an aircraft, boat, or bus for private use:
    "a plane on charter to a multinational company"
    synonyms:
    hire · hiring · lease · leasing · rent · rental · renting · booking · reservation · reserving · engaging · engagement · bespeaking
        an aircraft, boat, or bus that is reserved for private use:
        "the fifty foot charter Capricorn will join the team" · "his use of expensive private charter jets for government travel"
        a trip made by an aircraft, boat, or bus under charter:
        "he liked to see the boat sparkling clean before each charter"

VERB
charter (verb) · charters (third person present) · chartered (past tense) · chartered (past participle) · chartering (present participle)

    grant a charter to (a company, college, city, or other body):
    "the company was chartered in 1864"
    synonyms:
    permit · allow · authorize · grant/give a license to · grant/give a permit to · grant/give authorization to · grant/give authority to · grant/give the right to · grant/give leave to · grant/give permission to · warrant · certify · accredit · empower · give power to · entitle · enable · validate · franchise · give the stamp of approval to · give approval to · let · recognize · qualify · sanction
    antonyms:
    ban · forbid
    reserve (an aircraft, boat, or bus) for private use:
    "he chartered a plane to take him to Paris"
    synonyms:
    hire · lease · rent · pay for the use of · book · reserve · engage · bespeak

ORIGIN
Middle English: from Old French chartre, from Latin chartula, diminutive of charta ‘paper’ (see card).
Translate charter to
noun

    《宪章》
    《联合国宪章》
    包机
    约章
    章程
    特许
    包租
]]
[[
https://www.inloox.com/company/blog/articles/a-guide-to-dependencies-constraints-and-assumptions-part-1-project-dependencies/

A Guide to Dependencies, Constraints and Assumptions (Part 1): Project Dependencies
Linh Tran, Wednesday 31 August 2016 | Reading time: 6 min.
Project Management

A Guide to Dependencies, Constraints and Assumptions (Part 1): Project Dependencies Explained

Dependencies, constraints and assumptions – you’ve probably heard about all of these terms before, but do you really know the difference? Let's take a closer look at these three aspects.

In this blog series, we’ll take a closer look at the three factors that are the keys to a successful and timely project delivery. Projects are a risky business because their successful implementation depends on so many internal and external factors. Planning a project is challenging, because you have to consider project dependencies, constraints and assumptions. In this first part of the series, we’ll concentrate on explaining the different types of project dependencies and their relationships to each other.
What are project dependencies?

    “Dependencies describe the relationship between two or more sequential tasks. These relationships determine in which order the project team needs to do the tasks. Thus, the project manager needs to identify the dependencies between tasks in order to draw up the project schedule.“

(Source: InLoox Project Management Glossary)

So in short, dependencies define in which order project tasks and activities should be carried out. Why is this so important? Let’s use a simple example to illustrate it: Imagine you’re building a house and start with building the roof, then you build the walls, and only then you start with the foundation. That doesn’t sound logical, does it? The same goes for projects, as every project has a logical sequence of tasks. Some of these tasks can be done simultaneously, while others depend on predecessor tasks to finish before you can start them. The difficulty of accurately determining dependencies is that they could occur between tasks of the same projects, but a task of one project could also be dependent on a task of another project. Furthermore, a task can be preceded or succeeded by multiple tasks.
Mandatory vs. discretionary dependencies

Project dependencies can be mandatory or discretionary. Mandatory dependencies are activities that must be carried out at a specific time, either because the client requires it, legal regulations, or because it would make no sense to carry them out at any other time (see the house example).

Discretionary dependencies are not defined by these requirements and are more of a recommendation. The project team can decide themselves on when they would like to finish the task or the activity, based on their experience and best practice. Discretionary allow the team much more flexibility to plan the schedule according to their needs and capacity.
Internal vs. external dependencies

Internal dependencies exist between two activities within the project, thus the project team can control the dependency completely and is not dependent on any outside sources.

External dependencies are relationships between project activities and activities outside of the project, i.e. activities over which the project team has no control over, but which still have to be considered in the project schedule.
How to plan and manage dependencies?

    Determine whether the dependency is between tasks within the project or outside of it.
    List and sort all tasks and activities and determine their dependency to each other.
    Determine the critical path, i.e. the sequence of tasks that has to be completed before the project can be finished.
    Visualize dependencies and the critical path in a network diagram such as a Gantt chart.
    Regularly review your project schedule and make adjustments when necessary.

Screenshot: Gantt chart with project dependencies in InLoox 9 for Outlook
Gantt chart with dependencies in InLoox 9 for Outlook
The 4 dependency relationships
End-to-Start
Project Dependency Relationships: End to Start or Finish to Start

The most common type of dependency, the End-to-Start relationship is saying that the predecessor task must finish before the successor task can start. So if we take the home building example, this means that you will need to buy land first, before you can start building a house.
Start-to-Start
Project Dependency Relationships: Start to Start

Start-to-Start dependencies state that the predecessor task must start before successor can start. The tasks don’t have to start simultaneously, the successor task can start any time after the predecessor has started. An example would be: The moment you start cooking the rice, you can start preparing the vegetables.
End-to-End
Project Dependency Relationships: End to End or Finish to Finish

End-to-End dependencies say that the predecessor must finish before the successor can finish. The tasks don’t have to finish at the same time, the successor can finish any time after the predecessor has ended. For example, if you didn’t build your house from scratch, but ordered a prefabricated house, some tasks can only be finished after the house was “delivered” (e.g. adding the patio).
Start-to-End
Project Dependency Relationships: Start to End or Start to Finish

This scenario almost never happens, but for the sake of completeness, should also be mentioned here. The Start-to-End is saying that the successor task can’t finish before the predecessor task has started. The easiest example here is billing, you can only finish the billing process, after you have started the delivery of your product or service.



What are your tips for managing project dependencies?  Share your experiences with other readers in the comment section.


Coming up: In part 2, we’re going to take a closer look at project constraints and their impact on the project’s implementation, as well as how they differentiate from dependencies.
Subscribe to our newsletter
How can I unsubscribe?

]]
[[
https://www.inloox.com/company/blog/articles/a-guide-to-dependencies-constraints-and-assumptions-part-2-managing-constraints/

A Guide to Dependencies, Constraints and Assumptions (Part 2): Managing Constraints
Linh Tran, Thursday 15 September 2016 | Reading time: 5 min.
Project ManagementProductivity

A Guide to Dependencies, Constraints and Assumptions (Part 2): Managing Constraints

A project is always dependent on various internal and external aspects. In the first part of this series, we defined what dependencies are. Part 2 will be all about the factors that restrict a project: The project constraints.
What are constraints?

Constraints are very similar to dependencies in that they also have an impact on the project’s delivery. However, the two concepts are not the same, as dependencies are about the order or sequence of tasks. Whereas constraints are limitations to the project, such as the limited availability of resources like time and funds. A huge part of a project manager’s job is to balance project constraints. The PMI differentiates between six competing constraints:

    Scope
    Schedule
    Budget/Costs
    Quality
    Resources
    Risks

‘Competing’ means that each constraint has an impact on one or more of the other constraints. So let’s say you’re building a house: Your cement delivery is one week late because the supplier has a shortage of manpower right now. You can’t start laying your house’s foundation until the cement arrives, so your project’s schedule is delayed for one week. This delay has a direct impact on your budget because you will have to pay the construction crew one extra week. The change in the schedule has a direct impact on the costs and also an impact on the resources.

The Magic Triangle (aka Iron Triangle or Project Triangle)
The project triangle, often called ‘magic triangle’
Why is it so important to manage constraints?

Project managers have to carefully identify, assess and manage constraints because they have a direct impact on whether or not the team can finish the project on time, within budget and within scope. Constraints are restrictions, which means that you have to take them into account when making project decisions from the very start. The clearer you define the constraints the easier will it for your team to work around them. Just like dependencies, constraints serve as a guide to help you plan your projects more accurately. Which is why they can’t be vague, you need to define them clearly and communicate it to your team. A bad practice example would be: “We have to finish the project by around the third quarter of the year.” This time limit is extremely vague, does it mean the project must be completed by the beginning of July or by the end of September? A better way to phrase it: “We have to finish the project by July 23rd and no later.” This is precise and leaves no room for interpretation, thus it helps your team put the project into perspective and focus on getting things done on time.
How to manage constraints more effectively

Managing constraints can be challenging, but it is possible to plan your project around them and not let them affect your project’s schedule, budget or scope too much. Here are a few best practice tips that help you manage constraints better:

    Make a list of all constraints that could affect your project. Documenting everything makes sure that you won’t overlook any constraints.
    Include the biggest constraints in your project charter and/or your project scope statement. This ensures that everyone on the team has access to the information.
    Communicate with important stakeholders, particularly the project sponsor and upper management. Be open about the constraints the project is facing and how important it is to not just manage risks, but all constraints.
    Constantly monitor and assess constraints. Sometimes constraints might change during the course of the project, or they might even disappear. For example, a past legal regulation might have been overturned and does not apply to your project anymore. Keep changes to a minimum though, because while they can have positive effect, changes can also have a negative impact on your project. The keyword here is ‘scope creep’.

Stay tuned for more: The next part of this series will be all about project assumptions and how they differentiate from dependencies and constraints.
Subscribe to our newsletter
How can I unsubscribe?

]]
[[
https://www.inloox.com/company/blog/articles/a-guide-to-dependencies-constraints-and-assumptions-part-3-project-assumptions/

A Guide to Dependencies, Constraints and Assumptions (Part 3): Project Assumptions
Linh Tran, Wednesday 28 September 2016 | Reading time: 5 min.
Project Management

A Guide to Dependencies, Constraints and Assumptions (Part 3): Making Project Assumptions

Assumptions are events that are expected to occur during a project’s life cycle, often without any proof. They are accepted as truths at the start of a project, though they can turn out to be false.

In part 1 and part 2 of this series, we’ve covered the concepts dependencies and constraints. While there’s never complete certainty in project planning, which is why we can’t emphasize the importance of change and risk management enough, there are events and issues you can anticipate with a certain degree of certainty as a result of previous experiences. Which is why project managers have to make assumptions at the start of any project.
What are project assumptions?

An assumption is something that is believed to be true. It’s an event that you can expect to happen during a project. However, that certainty isn’t supported by factual proof, it comes from experience. Just like dependencies and constraints, assumptions are events that are outside of the project manager’s and team’s control. But unlike constraints, which put restrictions on a project and can pose a danger to its successful completion, assumptions open possibilities for it and make it possible for the project to finish successfully. This is how you can differentiate assumptions from constraints and dependencies.

You need to make assumptions in a project to be able to move forward with it. As we’ve established, planning is never certain and there are many external factors you can’t control or anticipate. But you can’t just wait and delay the start of a project until you have all necessary information and certainty – because that will never happen. Making assumptions, documenting them and managing them is an important, but often overlooked part of project planning.
Managing project assumptions in 5 steps
1. Define

You will realize that you will have to make a lot of assumptions during the course of a project. There are some assumptions you definitely need to define:

    Human resource availability: All key project team members are available and have the necessary skills and knowledge to work on the project.
    Budget availability: The determined budget is accurate and covers all project expenses.
    Scheduling accuracy: The set deadlines and milestones are achievable and the project can be finished on time.
    Performance of contractors, suppliers and vendors: All necessary equipment and goods are available whenever you need them.
    Upper management support: You have the support and buy-in from the C-Level and the project sponsor, who will back you up when issues arise.

2. Assess

Make a list of all project assumptions and prioritize them. Which assumptions are almost 100% certain to occur, and which are less certain? The whole project team should be involved in this step as they are the ones who actively work on the project and can contribute their combined experiences, this will allow for more accurate assumptions. There are two factors on which you can assess an assumption:

    The probability of its occurrence
    Its possible impact on the project.

3. Document

Write the key assumptions down in the project initiation document, along with the project dependencies and constraints. This will help you keep an overview of all aspects that might restrict your projects and also help you identify all the possibilities that enable you to deliver the project on schedule and on budget.
4. Monitor

Documenting assumptions also enables you to monitor and control them better. Assumptions are often true, but that doesn’t mean that they can’t turn out to be false during the course of the project. Remember, that assumptions are not facts. You need to constantly track and monitor assumptions. At one point or another in the project’s life cycle, you will be able to prove whether an assumption was true or false. Include the regular monitoring of assumptions in your project plan, e.g. schedule dates on which you will test whether your assumption was right or not.
5. Review

As assumptions are based on experiences, it’s vital that you review them at the end of the project. Which assumptions proved to be true and had the biggest impact on the project’s outcome? Which turned out to be false and had to be dismissed? Answering these questions will help you make more accurate assumptions in future project.
Subscribe to our newsletter
How can I unsubscribe?

]]
[[
https://www.michaelmanagement.com/help/what-is-the-difference-between-independent-and-dependent-requirements

What is the difference between independent and dependent requirements?
Michael Management

Overview

Imagine a scenario where a production technician wants to produce 10 bicycles. He requires two tires to produce one bicycle. In this scenario, the forecast or independent requirement, assuming a pure make-to-stock strategy, is 10 bicycles while the dependent requirements is 20 tires. Basically, a dependent requirement is based on the demand for another item while an independent requirement is not based on the demand for another item.

]]
[[
dependencies
dependency
de·pend·en·cy
[dəˈpendənsē]
NOUN
dependencies (plural noun)

    a dependent or subordinate thing, especially a country or province controlled by another:
    "the islands became dependencies of Norway and Denmark"
    synonyms:
    colony · protectorate · province · dominion · outpost · satellite · satellite state · holding · possession · tributary · fief · demesne
    dependence:
    "the country's dependency on the oil industry"
    synonyms:
    dependence · reliance · need for · seeking support from · leaning on · clinging to

Translate dependency to
noun

    依赖性
    相关性
    依赖
    相依性
    依存关系
    扶养
    依存
    从属关系
    抚养
    从属
]]
[[
requirements
requirement

re·quire·ment
[rəˈkwī(ə)rmənt]
NOUN
requirements (plural noun)

    a thing that is needed or wanted:
    "choose the type of window that suits your requirements best"
        a thing that is compulsory; a necessary condition:
        "applicants must satisfy the normal entry requirements"
        synonyms:
        need · wish · demand · want · necessity · essential · necessary/essential item · prerequisite · requisite · precondition · condition · stipulation · specification · desideratum · sine qua non

Translate requirement to
noun

    要求
    需求
    规定
    需要量
]]
]]]
[[
huge
[(h)yo͞oj]
ADJECTIVE
huge (adjective) · huger (comparative adjective) · hugest (superlative adjective)

    extremely large; enormous:
    "a huge area" · "he made a huge difference to the team"
    synonyms:
    enormous · vast · immense · very large · very big · great · massive · cosmic · colossal · prodigious · gigantic · gargantuan · mammoth · monumental · tremendous · stupendous · giant · towering · hefty · bulky · weighty · heavy · gross · monstrous · elephantine · mountainous · titanic · epic · Herculean · Brobdingnagian · princely · generous · handsome
    antonyms:
    insignificant · tiny
        of considerable importance or seriousness:
        "this could be the start of something huge for you" · "I have huge news to share with you"
        informal
        very popular or successful:
        "while he may be unknown in the American mainstream, he's huge in Britain"

ORIGIN
Middle English: shortening of Old French ahuge, of unknown origin.
Translate huge to
adjective

    巨大
    庞大
    巨额
    大
    巨型
    丰厚
    巨
    大型
]]
[[
amortized 摊销
  Finger Tree
  In computer science, a finger tree is a purely functional data structure that can be used to efficiently implement other functional data structures. A finger tree gives amortized constant time access to the "fingers" (leaves) of the tree, which is where data is stored, and concatenation and splitting logarithmic time in the size of the smaller piece. It also stores in each internal node the result of applying some associative operation to its descendants. This "summary" data stored in the internal nodes can be used to provide the functionality of data structures other than trees.

am·or·tize
[ˈamərˌtīz]
VERB
amortized (past tense) · amortized (past participle)

    gradually write off the initial cost of (an asset) over a period:
    "they want to amortize the tooling costs quickly"
        reduce or pay off (a debt) with regular payments:
        "loan fees can be amortized over the life of the mortgage"
        synonyms:
        lessen · make less · make smaller · lower · bring down · decrease · turn down · diminish · take the edge off · minimize · shrink · narrow · contract · shorten · foreshorten · truncate · taper · close · abbreviate · condense · concentrate · abridge · deplete · axe · cut · cut back/down · make cutbacks in · scale down · trim · slim (down) · prune · chop · curtail · limit · moderate · lighten · ease · dilute · mitigate · commute · qualify · alleviate · relax · abate
        antonyms:
        increase · enlarge

ORIGIN
late Middle English (in the senses ‘deaden’ and ‘transfer (land) to a corporation in mortmain’): from Old French amortiss-, lengthened stem of amortir, based on Latin ad ‘to, at’ + mors, mort- ‘death’.
Translate amortize to
verb

    摊销
]]
[[
scratch 草稿/从无到有/划痕
[skraCH]
VERB
scratch (verb) · scratches (third person present) · scratched (past tense) · scratched (past participle) · scratching (present participle)

    score or mark the surface of (something) with a sharp or pointed object:
    "the car's paintwork was battered and scratched" · "he scratched at a stain on his jacket"
    synonyms:
    score · abrade · scrape · roughen · scuff (up) · lacerate · groove · gash · engrave · incise · gouge
        make a long, narrow superficial wound in the skin of:
        "her arms were scratched by the thorns" · "I scratched myself on the tree"
        synonyms:
        graze · scrape · abrade · rasp · skin · rub raw · cut · lacerate · bark · chafe · strip · flay · wound · excoriate
        rub (a part of one's body) with one's fingernails to relieve itching:
        "Jessica lifted her sunglasses and scratched her nose"
        synonyms:
        rub · claw (at) · scrape · tear at
        make (a mark or hole) by scoring a surface with a sharp or pointed object:
        "I found two names scratched on one of the windowpanes"
        write (something) hurriedly or awkwardly:
        "pass me my writing things—I'll scratch a few letters before I get up"
        remove (something) from something else by pulling a sharp implement over it:
        "he scratched away the plaster"
        make a rasping or grating noise by scraping something over a hard surface:
        "the dog scratched to be let in"
        (of a bird or mammal, especially a chicken) rake the ground with the beak or claws in search of food:
        "the hens cannot do anything that comes naturally to them, such as scratch around"
        accomplish (something) with great effort or difficulty:
        "he scratches out a living growing strawberries"
        synonyms:
        scrape · scrimp · survive · live · stay alive · exist · support oneself · cope · manage · fare · get along · get by · get through · make (both) ends meet · keep body and soul together
    cancel or strike out (writing) with a pen or pencil:
    "the name of Dr. McNab was scratched out and that of Dr. Daniels substituted"
    synonyms:
    cross out · strike out · score out · delete · erase · remove · strike off · eliminate · cancel · expunge · obliterate
        withdraw (a competitor) from a competition:
        "Oswald's Zephyr was the second horse to be scratched from a race today"
        synonyms:
        withdraw · pull out (of) · back out (of) · bow out (of) · stand down · give up · leave · quit
        (of a competitor) withdraw from a competition:
        "due to a knee injury she was forced to scratch from the race"
        cancel or abandon (an undertaking or project):
        "the original filming schedule has been scratched"
        synonyms:
        call off · abandon · scrap · drop · postpone · mothball
    play a record using the scratch technique. See scratch.
    "he raps and scratches simultaneously to dazzling effect"

NOUN
scratch (noun) · scratches (plural noun)

    a mark or wound made by scratching:
    "the scratches on her arm were throbbing" · "scratch marks on the door"
    synonyms:
    score · mark · line · abrasion · scrape · scuff · laceration · groove · gash · gouge
        informal
        a slight or insignificant wound or injury:
        "it's nothing—just a scratch"
        synonyms:
        graze · scrape · abrasion · cut · laceration · wound
        an act or spell of scratching oneself to relieve itching:
        "he gave his scalp a good scratch"
        a rasping or grating noise produced by something rubbing against a hard surface:
        "the scratch of a match lighting a cigarette"
        synonyms:
        grate · grating · creak · creaking · grind · grinding · jar · jarring · rasp · rasping · scratching · rub · rubbing · squeak · squeaking · screech · screeching
        a rough hiss, caused by the friction of the stylus in the groove, heard when a record is played.
    a technique, used especially in rap music, of stopping a record by hand and moving it back and forth to give a rhythmic scratching effect:
    "a scratch mix"
    the starting point in a handicap for a competitor receiving no odds:
    "a 631-meters handicap, when the excellent stayer, Too Fast, will be off scratch"
        golf
        a handicap of zero, indicating that a player is good enough to achieve par on a course:
        "he plays off scratch in University golf"
    informal
    money:
    "he was working to get some scratch together"
    synonyms:
    cash · hard cash · ready money · the means · the wherewithal · funds · capital · finances · (filthy) lucre · banknotes · notes · paper money · coins · change · coin · coinage · silver · copper · currency · legal tender · sterling · bills · roll · l.s.d. · specie · pelf

ADJECTIVE
scratch (adjective)

    assembled or made from whatever is available, and so unlikely to be of the highest quality:
    "at least two vessels set sail with scratch crews"
    (of a sports competitor or event) with no handicap given:
    "he was a scratch player at many courses"

ORIGIN
late Middle English: probably a blend of the synonymous dialect words scrat and cratch, both of uncertain origin; compare with Middle Low German kratsen and Old High German krazzōn.
Translate scratch to
noun

    划伤
    划痕
    刮
    刮伤
    从无到有
    擦伤
    从头
    草稿

verb

    挠
    抓伤
    抓
]]
[[
homogeneous 同质化
  array? Python:A list is used to store homogeneous elements where we want to add/update/delete elements.

ho·mo·ge·ne·ous
[ˌhōməˈjēnēəs]
ADJECTIVE
homogeneous (adjective) · homogenous (adjective)

    of the same kind; alike:
    "timbermen prefer to deal with homogeneous woods"
    synonyms:
    similar · comparable · equivalent · like · analogous · corresponding · correspondent · parallel · matching · kindred · related · correlative · congruent · cognate
    antonyms:
    different · dissimilar
        consisting of parts all of the same kind:
        "culturally speaking the farmers constitute an extremely homogeneous group"
        synonyms:
        uniform · identical · unvaried · unvarying · consistent · similar · undistinguishable · alike · all alike · of the same kind · much the same · all the same · the same · all one · all of a piece
        antonyms:
        heterogeneous
        mathematics
        containing terms all of the same degree.

ORIGIN
early 17th century (as homogeneity): from medieval Latin homogeneus, from Greek homogenēs, from homos ‘same’ + genos ‘race, kind’.
Translate homogeneous to
adjective

    均质
    均匀
    同类
    同构
    齐
    同质化
]]
]]]]]]]explain


命令行cmd:
wget:
  cd /sdcard/0my_files/tmp/wget_/
  !mkdir /sdcard/0my_files/tmp/wget_/zxcs.me/
  cd /sdcard/0my_files/tmp/wget_/zxcs.me/

curl -L -C - -O https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/clang-14.0.0.src.tar.xz

view others/app/termux/apt_update__fail/\[details]\[20220430]20220427_fix_termux.py
    xargs -n 1 curl -O < /sdcard/Download/downs4termux/binary-all-index.html.urls.txt
    wget -r -l inf --no-remove-listing --no-parent -p -k -nc -N --no-use-server-timestamps -c --random-wait --wait=8 --tries=30 --limit-rate=200K --compression=auto -U "Mozilla/5.0 (iPhone; CPU iPhone OS 12_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Mobile/15E148 Safari/604.1"    https://free.nchc.org.tw/osdn//storage/g/t/te/termux-old/zzzzzzzzzzzz-packages-21/ --reject-regex='[^?]*[?].*|(https://free.nchc.org.tw/osdn//storage/g/t/te/termux-old/zzzzzzzzzzzz-packages-21/|)(aarch64|i686|x86_64)(/.*)?' --accept-regex='(https://free.nchc.org.tw/osdn//storage/g/t/te/termux-old/zzzzzzzzzzzz-packages-21/|)(all|arm|dists)(/.*)?'


本地备份:
  见:
  view TODO3[20220407].txt
    search:
      #def__backup_cmds:goto
上传github:
  g0,g1,g2,g3,g5,g6_,g7
    口令 改为 密钥: ghp_...
      g-h-p ??? git-hub-PAT(personal-access-token)
    edt-yxz-zzd

7z打包:
  view others/app/termux/tar_7zip.txt
  !mkdir  /sdcard/0my_files/tmp/out4zip/
  7z a  /sdcard/0my_files/tmp/out4zip/20220415敏感词.7z    /storage/emulated/0/Download/20220415敏感词/
  view ../../python3_src/raw_data/20220415敏感词.7z
    288K
tar
  man tar >> others/app/termux/tar_7zip.txt
  tar -x -f clang-14.0.0.src.tar.xz
   Overwrite control
       --skip-old-files
              Don't replace existing files when extracting, silently skip over
       -k, --keep-old-files
              Don't replace existing files when extracting.

       --keep-newer-files
              Don't replace existing files that are newer than their archive
              copies.


git 下载命令
[[
cd /sdcard/0my_files/tmp/git_/
https://github.com/zhansliu/writemdict/
git clone https://github.com/zhansliu/writemdict.git

https://gitee.com/xstudio/badwords
git clone https://gitee.com/xstudio/badwords.git
]]

def sketchy_check_stack(ops, stack, /):

[[[[[
writing
writings
已还:20220318 欠房东1元1毛
20220408周五测核酸，电信卡29元月租
20220526周四晚 电信卡 坏掉，前几天也有一次出问题
20220527周五 到电信营业厅换卡:(广州电信卡+身份证)，+20元工本费，只能办理90元以上套餐，还是买新卡算了。
20220528周六 早 电饭煲 煮水坏了(前几天 烧水壶 坏了)；晚，于 宜万家li左 2元店 买 60元 带 蒸笼 电饭煲
20220530周一晚 于嘉乐源买烧水壶33元
20220601买50元电信手机卡29元/月租

认命
  『认命』是因为站着的收益小于躺平，反正都是唯利是图斤斤计较患得患失，『认命』即是『不认命』。

青帝
  资源-人善假于物，故此能掌握超越自身的力量。但优点就是缺点，凭恃外物难免患得患失，忧虑资源匮乏，费心费力谋夺资源，嫌贫爱富，自私自利，大迷不觉，战祸频仍，。。。

损人不利己-哄抬物价
  旧势力不能接纳他，外部势力扶植他是将之当成傀儡。简单来说，当前仅有的两个买方开价极低，我们可以去帮忙喊喊价，就当给贫困户送温暖。


错误
  一是方向错，一是操之过急。

取法乎上--适得其反，一旦失败，自弃，无底线
强者就像核武，只能用来威慑起保护作用，一旦主动进攻，别人也不会再有顾忌，越有价值的东西越先被摧毁。


刻舟求剑
  人口增长好不好？
  入侵他国坏不坏？
  无条件地要求杀人偿命？
  任何问题不能脱离实际情况来讨论。
  自卫杀人、见义勇为、执行死刑、警匪交火、军队作战，死人怎么算？交通事故，医疗事故，...
  以百姓利益为重来评判，侵略无道之国也可能是拔诸水火登于衽席。
  古代语境下，人口增长意味着安居乐业，健康长寿，政通人和。
  现代语境下就比较微妙，国家现代化，卫生医疗条件改善，婴儿存活率高，平均寿命长，食物廉价，人口增长极快。以埃及为例，斗地主分田地，提供人民币2分钱一张的能管一顿饭的廉价大饼，人口暴涨，但政策没有长期规划，十分糟糕，即使不断垦荒，耕地也无法承载过量人口，粮食极度依赖进口。可见，人口有隐形的软上限，一旦超过，人与人之间的资源矛盾将不可调和。


众念国
  神笔马良-无中生有？
    其实是 灵性赋予，不是没有代价
    从 众念国 的角度看，就是 开垦荒地，迁徙民众。。短期内 殖民地独立性不高，亲近。同时 短期内 国力下降，若是 过于频繁，呕心沥血，亡国可期。
优待有功之人
  有学问本身没有功劳，但人们期待他们的表现，所以优待，福及学生乃至小孩。
  有的学问功利性不强，但后世可能发现现实功用




仁智勇 三种品性虽然不可分离，但 仁者、智者、勇者 所做所为 却不相同。重点是 价值观不同，同样的场景，同样的彻悟，不同的道路。

  不屈不争，宠辱不惊，遗世独立，没有舞台没有他人
  随波逐流，和光同尘，迁就世界，上了舞台便入戏
  人定胜天，逆天改命，让世界适应自己，就算扮演角色也不能践踏自己的底线

残、病、丑、穷、贱、懒、坏、蠢


生存法则
  没人倾听你的倡议。自己去做，或可引来同好。存在而非发声。

害怕被抛弃？为何如此卑微？这不是正常的人际关系。
  感谢？感谢农夫种植出美味多汁的水果，感谢食品厂生产干净卫生合格的食物，感谢医生药到病除，感谢官员断案公正无私，这是病。

外物
  心法口诀也是外物。指望它清心宁神？
  血统天赋也是外物。指望它超凡脱俗？


一治一乱
  乱世怎么来的？总不能无缘无故凭空冒出来。根源自然在于乱世之前。这么一看，所谓治世就很有问题。治世乱世，只是表象。治世之下，有人获益有人吃亏，有人享福有人受苦，有人作恶有人含冤，不正不公，压制矛盾。治世养蛊，乱世断罪，治世既得利益集团粉饰治世，引导价值观，桎梏大众思维视角。

第一个
  爱得死去活来，只是因为接触的异性少。要多出门多交往，优秀的人遍地都是。阅尽世情，便会彻悟，只有修仙才是出路，什么情啊爱啊，虚无缥缈没前途。

仰慕的人、敬佩的人、想要成为的人、喜爱的人、欣赏的人...不仅可能是不同类型，甚至可能截然相反。

--它为何发笑？--没见过世面，少见多怪，大家不要怼它，要像包容智障一样包容它。


正极则邪
  人至察则无徒

刻舟求剑
  『非我族类其心必异』，是之非之，不问实际，皆是刻舟求剑。
  兄弟阋墙，同室操戈，有斯时。
  族类杀伐，屠戮无算，有斯时。


除非人类死光，从此不再创造新字符，否则，有上限的编码字符集，像unicode，注定无法包含所有字符。本来字符集规模就该无限制。字符的内存表达确实是个难点。可以这样:立即字符 或 大整数指针。靠指针空闲比特位区分。

形近字:
  入人曰日，待侯侍候


无数极品装备？为何爆出这么多？捡起来是成就无敌，还是落得眼前下场？




遗迹废墟:
  数据只增不删，最多是在废墟上重建，但历史一直存在。




三千世缘尽:爱情蛊-消耗缘份，相见不相识，永远路人，路人围观，事不关己，各扫门前雪。

覆巢之下焉有完卵？
  屠戮无算，只为杀你救世--曹操


没头脑是我，不高兴是我，何必排斥？何必困扰？天有不测风云，人也非人自个的私有物，观察自己的喜怒哀乐上窜下跳的表演，也不用太投入。
  又蠢又坏，又穷又懒，讨厌这样不合群的自己？喜欢这样天真蒙昧的自己？
  自重自爱，自暴自弃，都是我，不必强求一致，反反复复，方生方死，人的观点于事实而言无足轻重。
  无端地: 多疑 猜忌 仇视 蔑视 嫉恨

龙虾经过亿万年进化，几十年的打拼攒肉，只为怕是餐盘，你竟然还挑三拣四！

鱼与熊掌
  学识是个人的努力，美貌是上天的钟爱，你说那样更难得更可贵？




名:
  『--每月一日，物稀则贵，小别新婚。保持距离，尊重自生。--每月一日，避免天天劳碌，还有大把时间搞外遇，何乐不为？』
  --小枝小节，未现其要。
  --人各不同：灭世创世，坚韧不拔；破门自立，才能出众；修饰点缀，安全方便。岂有甘愿寄人篱下仰人鼻息者？已然，非不愿实不能。『何不食肉糜』，纯属废话。

  『--卖主只有你，你不要着急。--买主只有你，你不要着急。』
  --玩弄众人于鼓掌之间，这样的言辞虽非废话，却也有害。
  --既然舍得其父曝尸，已说明其子之贵贱轻重，怎能说是我在玩弄？为何人们偏爱虚假厌恶真实？葬礼无论如何都要嚎丧，仿佛在戏台上表演，嚎的人观礼的人都知道是表演，人们不喜真情流露，这又有何好处？



全系最差
  --总有人垫底
  --你是样样垫底！

大梦宗
  大梦谁先觉
  幽-天人无知-再醒-为道日损屡屡失败-建立大梦宗-探索无尽世界
  相互发现:大梦宗vs痕印宗，大战以至于为世人察觉两宗的存在。


人道-传承为重
  黄帝
  ===
  --有了传承，才能突破个人局限，拥有无限可能。纵使人人蠢笨如猪，千万年积累，照样飞天遁地。要有传承，必先有历史；要有历史，需有文字、风者。立巨头--『史官』。
  ===
  --希望从轻发落，虽则罪孽深重，但顾念其先祖披荆斩棘，开拓生存空间，累世承传，人族煊赫有赖此辈，乃人族支柱之一，未可轻易绝嗣。
  --是指恃强凌弱么？赏功罚过，功过不相抵。有功已赏，有过必惩。论罪当族灭，保护即是伤害，勿复求情。
  --人道，传承为重，余者皆轻。功过得失不过一时，众人高兴也好不满也罢，如声散落无痕。刑罚亦不过是维护人道传承的工具，岂能以众人好恶为准？已灭一族，再灭岂可？人道乌存？
  --罪罚不相当，莫非是纵容？杀人者人恒杀之，夷人族者人夷之。若不严惩，人人自危，争相效仿，流害无穷。
  --能禁绝否？我看不能。今日有此，昨日已有，来日再有。即使以灭族重惩，收效恐微，不如另议。

人都一样，人皆平凡
  为五斗米折腰，汲汲钻营，并不更庸俗。
  为民请命，功利千秋，也不更浮夸。
  只是所求不同，大仁大义也罢灭绝人性也罢，人还是人，并无不同。



小说
  老妈曾是天下第一美人，是什么鬼设定？类似，老婆未婚妻之类，统统都是妓女？

  不知所起，不知所终
    没有主线任务中心思想
    随时断更太监




这是心病，不是残疾。消费品也分必需、奢侈。在乎你外形的人，不在乎你；在乎你的人，不在乎你的外貌。



黄赌毒
  合法化？因为地下交易更不规范危害更大？合法化后还能收税创收节约警力利国利民？这不就是议罪银？若是一切罪行皆可以罚金揭过，想必也可减少各种明争暗斗打击报复，黑社会团伙黑保护伞没有存在的意义，前途一片光明。
  ===
  善恶
    『杀人全家成人，奴役孩童及其后裔』与『灭人满门鸡犬不留』相比谁更仁慈？如果允许翻案复仇，岂非逼着凶手斩尽杀绝？实在应该将凶手供起来，歌颂他高抬贵手的品行，足以为万世楷模。

  侵占你家园，屠你父母乡亲，奴役你兄弟姐妹，压榨你剥削你，赏你口饭吃，你当感激涕零，不杀之恩也是恩，不要不识好歹，包吃包住，恩同再造。牢记仇恨的人不幸，懂得感恩的人过得更好，不要盯着过去，要和仇敌之后共创美好未来。

傻逼神拳:
  --作者不公，以愚凌贤！我不服！为何精明计较偏要倒霉吃亏，糊涂蠢蛋偏偏顺风顺水？我意不屈我志不改！纵晓作者偏心，偏要逆作而行！我不信，这世间万千作品你能一手遮天，一生成败不过一隅得失，尚贤尚愚岂能由你！
  ---
  乱披风剑法、疯魔棍法、王八拳

诸事太顺，屈打成招
  诸事顺心，当需警惕。
  有屈打成招，自以为意料之中。
  有处处高歌，自以为太平盛世。
    敌人糖衣炮弹掌控价值观提供便利搭桥牵线
    公仆阿谀奉承大放卫星
    亲友美言或是照顾脸面或是灯下黑或是行外话。
  没有发现问题，才是最大的问题。不知道自己自大自满，才是真的傲慢。

牺牲-多数暴政
  当少数派有异议，而现实只能一刀切选择一方时，会怎样？哪方更强，便会压倒对方。
  抗疫，围封。要么，放任自流，要么，处处严防日日死守。没有折中方案。
  --我年富力强，区区感冒何能惧我？
  --我有钱有势，花钱能治好的病也算病？
  --我怕麻烦怕不自由怕穷，就是不怕死，活着很累很难受，请不要再指手画脚！
  --死亡率怎么低，还没车祸让我惊心，轮到谁算谁倒霉，怕个球！
  --有人怕死，关我屁事！为何要强迫我为别人的癖好做出牺牲？人生有很多重要的事情，娱乐、闲逛、发呆，人生的意义就在于此！牺牲？谁自愿谁去，别代表我！



无数次，幻想拥有超凡力量之后，会如何造福人类，但最终难免大肆屠杀。终究无法相信和和美美，世上必有憎恨我的人，世上必有我不能容忍之人，无法想象没有纷争的世界。我亦不能相信隔离开便能各过各的再不相干，世界很大不能全知，世界很小无处立锥。
只是弱小，若我强大，世人当晓我的残忍邪恶。

就事论事
  --就事论事，没必要针对人。某类错误，虽然不是人人会犯，但人人会犯这类那类的错。别人之道或许确实是很有问题，但谁也未必更高明。
  --针对人，是因为成本。粗筛的成本，公议的成本，专家组队深入考察的成本。


小孩子 频繁无端干嚎 似是不满又似要引起重视
我 经常没由来地疑虑怨怒，莫名其妙，想来大概是老妈带娃的方式不对。

云养猫、云玩家，云游天下？

敏感词违禁词:
  只是字与字的组合而已，能有什么力量？纸老虎都不怕的。

  为何对现实失望？一切都在高速变化，或者说迅速失效过时腐朽。感觉所谓真实的东西，没有一点价值。反而古籍经典，人们细心装裱，仿佛那些死去的言论虚拟的世界，才是永恒无价之宝。真实？虚妄？我都怀疑自己分没分清过。逝水无痕，没有一点点熟悉的感觉，世界是新的，我找不到位置放置手脚，我想我该死了，我，老了，再也提不起兴趣。




煎蛋评论:
  台下都是请来的演员
  没有演员
  演员在开会

最后一句话？
  大意是，你做好做坏，都和我没关系了，自己能承受就行。


小偷小摸，不一定是穷人，虽穷但有自己的活计及清楚相应的消费水平。反倒是，人前衣冠楚楚，虚荣心强，强撑门面，人有我也要有，一旦入不敷出，习惯又无法即时调整，就比较难说了。



质疑真理
  守护贞操--至少那里还是处女地。
  习以为常，赖为凭仗，视逾性命，...



梁祝
  --为什么魔改得面目全非？--悲剧不再是悲剧，人们无法产生共鸣，这是时代的进步！--也可能是退步。

]]]]]


[[[
TODO
太麻烦不值得

view others/数学/编程/python/Python_interpreter--CPython.txt



ops = type_ctor+tmpl_args
ops+obj hash
  ops.mk_hash_wrapper
  ops.hash
  ops.eq
  obj {cache {ops:(hash, weakref<hash_wrapper>}}
bind ops+obj
bind ops+ctx
  ops 有 语境
  interpreter也有自己的语境
  help==>>语境关键词 深度收集 #并支持类似的 深度收集 框架，向前兼容
bind ops+ctx+obj
  ops immutable
  ctx mutable?
  obj opaque
public symbol
  get('pkg.mod', 'attr....get_tmay_descript', spec--hashable--repr-literal_eval_able)->public symbol
    if cache:
      raise or return sym
    import pkg...mod as M
    tm = M.attr...get_tmay_descript(spec)
    if not tm:
      set cache err
    else:
      mk new public symbol
      set cache sym
    recur...
DONE:
  page_rank 添加一个 虚拟节点，与其他节点 双向 连通所有节点，保证 有进有出 动态平衡存在，重点是 没有 不连通分量，有向图强连通分量唯一，保证 解唯一，虚拟点 不 参与 概率分配。

view ../../python3_src/seed/algo/page_rank.py
    mk_pseudo_mapping_opss
    之前肯定有！重构代码！！
view ../../python3_src/nn_ns/app/crypt/involution/InvolutoryCipher.py
  from seed.seq_tools.seq_as_mapping import SeqAsMapping
  from seed.mapping_tools.mapping_as_seq import MappingAsSeq
TODO:
  不允许嵌套但允许内嵌原貌字符串的通用单点转义方案
  e ../../python3_src/自己的相关数据/on_working.txt
  e ../../python3_src/seed/seq_tools/escape_schemes/universal_single_point_escape_scheme__enable_raw_text__disable_recur.py
TODO:备份:浏览器收藏；阅读APP记录；当前编辑中未完成的代码文件
  ===编辑中的代码:
  e ../../python3_src/seed/seq_tools/lsls52ls.py
      bisearch 替代数组
  e ../../python3_src/seed/math/matrix/solve_matrix.py
    线性规划/不等式组/凸包切割
  e ../../python3_src/nn_ns/app/crypt/involution/InvolutoryCipher.py
    填充...
  e ../../python3_src/seed/seq_tools/escape_schemes/universal_single_point_escape_scheme__enable_raw_text__disable_recur.py
    结束串 合格判定
  ===论文:下载地址
  e /sdcard/0my_files/book/math/linear_programming/
    --> 复制到:view others/book/linear_programming.txt
  ===阅读APP
  view /storage/emulated/0/0my_files/tmp/xxx/阅读app备份json/\[20211017]阅读app备份json/myBookShelf.json
  view others/app/备份app配置信息/阅读app备份json-delta\[20220315]\[20211017].zip
  view others/app/备份app配置信息/阅读app备份json-delta\[20220604]\[20220315].zip
  ===备份:公历农历节气对照表？
  view /sdcard/0my_files/tmp/out4py/农历/农历.py.打印公历农历日期对照表.out.txt
    view script/农历/农历.py.打印公历农历日期对照表.out.txt.zip
      已备份！
  ===备份:知轩藏书-小说列表自建页面？
  !mv /sdcard/0my_files/tmp/out4py/download_zxcs_novel/collect_links_from_zxcs_sort_pages/saved_sortss/sorts\[20220420]/zxcs-sorts-37-39-42[20220420].zip script/download_zxcs_novel/zips/
  view script/download_zxcs_novel/merge_link_iinfos_and_scores.py
  view /sdcard/0my_files/tmp/out4py/download_zxcs_novel/collect_links_from_zxcs_sort_pages/saved_sortss/sorts\[20220420]/42.scored.html
    xxx view /sdcard/0my_files/tmp/out4py/download_zxcs_novel/collect_links_from_zxcs_sort_pages/sorts/42.scored.html
    xxx file:///sdcard/0my_files/tmp/out4py/download_zxcs_novel/collect_links_from_zxcs_sort_pages/sorts/42.scored.html
  === org.mozilla.firefox如何导出导入收藏夹？
  [[
https://android.stackexchange.com/questions/171240/export-firefox-for-android-bookmarks-to-html-file
As of 2019, Firefox for Android has no built-in support for exporting bookmarks. However there are some workarounds/alternatives: According to the "Chosen Solution" on the Firefox Support Forum, use Firefox Sync for Android to transparently move bookmarks across devices.
  好恶心！有一不干人事的蠢货！
  ]]
[[2022手机价格
[
https://zhuanlan.zhihu.com/p/429282569
realmeQ3s

    处理器：骁龙778G
    屏幕：6.6英寸，LCD，144Hz
    摄像头：4800w主摄+黑白镜头+微距镜头

realme 真我Q3s 骁龙778G 5G 144Hz变帧屏 5000mAh大
京东
¥1199.00
去购买

优点：

    搭载骁龙778G处理器，在高分辨率下玩王者荣耀，半小时平均帧数是47帧，有时候打团会降到35帧左右，千元机主流表现水平。续航能力好，5000mAh的大电池容量，玩一个小时的游戏耗电15%左右，不玩游戏可以撑一整天，没有续航焦虑。电量完全充满需要65分钟。屏幕是LCD屏，支持144hz的高刷新率，支持7档智能变帧，但是由于应用适配问题，使用起来会有割裂感，建议全局144hz。

缺点：使用转子马达。
]
[
https://zhuanlan.zhihu.com/p/95806258
[
Redmi Note 11 4G（综合产品力最强4G百元机）
Redmi Note 11 4G 4GB+128GB 梦幻晴空
京东
¥969.00
去购买​

推荐指数：⭐️⭐️⭐️⭐️⭐️

优势：

    外观设计、机身轻薄，配色挺漂亮；Helio G88处理器，同价位性能很不错；90Hz三档变速刷新率屏幕，在百元机中比较少见；5000万像素三摄，超广角、微距等拍照功能较全面；支持红外遥控、立体声双扬声器；支持18W有线快充，标配22.5W充电器；5000mAh超大容量电池带来长续航；

不足：

    采用eMMC5.1闪存规格；

点评：

Redmi Note 11 4G是当前小米旗下1000元以内综合产品力最强的一款4G入门机。

与另外几款入门级4G手机相比，Redmi Note 11 4G不仅拥有性能更强的处理器、90Hz刷新率屏幕，而且在具备5000mAh大电池的基础上拥有比较轻薄的机身，181g的机身重量在千元机中手感很不错。

另外，Redmi Note 11 4G的外观设计做得很不错，晴空、白色、黑色三款配色在百元机中都比较出彩，是当前非常值得入手的一款产品。
]
[

Redmi Note11 SE（综合产品力最强的5G百元机）
Redmi Note11SE 4GB+128GB 暗影黑
京东
¥1099
去购买​
【定金100抵200 享6重好礼】红米Note 11 SE
天猫
¥999.00
去购买​

推荐指数：⭐️⭐️⭐️⭐️⭐️

优势：

    天玑700，百元机中性能好；90Hz四档变速刷新率，触控流畅；5000mAh大电池带来长续航；

不足：

    同价位无明显不足；

点评：

Redmi Note11 SE本质上是Redmi Note 10 5G这款千元机的套娃机。

Redmi Note 10 5G虽然是Redmi Note 9 5G的迭代机型，但是除了屏幕刷新率升级到90Hz和机身更轻薄以外，在处理器性能、相机、扬声器等方面其实是缩水的，综合产品力不如Redmi Note 9 5G。尤其在Redmi Note 11 5G发布之后，产品力更是相对偏弱，在1000-1500价位竞争力比较一般。

所以，小米将Redmi Note 10 5G换了个壳、改个名字、降低了100块钱售价就成了Redmi Note11 SE。

那么降价之后的Redmi Note11 SE顿时就成为1000元以内性能最强的小米机型，瞬间变得值得选购了。

在999元价位，Redmi Note11 SE拥有天玑700处理器、1080p高刷屏幕、18W快充、5000mAh大电池以及相对轻薄的机身，是一款性价比颇高的5G入门级手机。

不过只建议选购4GB+128GB版本，因为8GB+128GB版本同价位竞争力一般。

]
[
realme Q3s（1500以内价位性能最强的手机）
realme Q3s 8+128GB 星云色
京东
¥1419
去购买​

推荐指数：⭐️⭐️⭐️⭐️⭐️

优势：

    星光纹理设计，外观比较漂亮；高通骁龙778G处理器，同价位性能最强；7档144Hz智能变速刷新率屏幕，兼顾屏幕流畅与低功耗；电竞级VC液冷散热系统，同价位散热不错；30W有线快充，同价位充电速度较快；5000mAh大电池带来长续航；

不足：

    塑料机身；不支持NFC；后置相机缺乏超广角镜头；

点评：

原本realme Q3就是1500-2000价位产品力最强的机型之一，如今升级到realme Q3s之后产品力更上一层楼。

相对于realme Q3，relame Q3s主要升级了三点：

    处理器升级，从高通骁龙750G升级为高通骁龙778G，后者这款处理器常见于1500-2000价位机型；屏幕升级，120Hz高刷屏升级为144Hz变速高刷屏；手感升级，机身厚度从8.8mm降为8.5mm，手感更好一些。

总体来说，realme Q3s不仅是一款性能超强的机型，而且是屏幕、续航、外观兼顾的产品，在1000-1500价位非常值得选购。
]
]
]]
[[[[[
TODO:线性不等式组 解方程。。。
  solve linear inequality algorithm source code
  linear programming线性规划
    我的算法:切割凸包
      face_idx->ordered[vertex]
        {face:{vtx:vtx}}
          仅限于？三维？
      vertex_idx->ordered[face_idx]
        {vtx:{face:face}}
      vertex_idx->point/coor
      #vertex_idx->ordered[edge_idx]
      #edge_idx -> {vertex_idx, vertex_idx}
      E+2=V+F
      F:切面数
      M:不等式的数目
      N:变量囗数目(标准/非负)
      F <= M
      V0 = 原点+各维无穷原点=1+N
      V <= V0 -1+N
    另:证明无解:
      等式方程组:
        行的线性组合 得 左零=右非零
      不等式组:
        大于等于零行*正系数+小于等于零的行*负系数 < 0
[[我的算法:切割凸包
自造词:单锥simplex(k+1个端点的k-convex_hull), 延伸空间span_space, 次平面hyperplane(比主空间低一维的延伸空间), 主空间space(相对于hyperplane而言, RR**d), facet次切面(k-convex_hull的低一维外表面, 是(k-1)-convex_hull)
凸包convex_hull
  m-vertices
  k-convex_hull k维凸包，即 m个端点的延伸空间 k维
  d维 实数 主空间, d>=k
k-simplex共有k+1个端点/0-face，k+1个facet/(k-1)-face, C(k+1,k-i)个 i-face
  i-face 是 i-convex_hull
  k-simplex 的 i-face 是 i-simplex
k-convex_hull的k个共点facet的交点是 端点
k-convex_hull的k-1个共边facet的交边是 棱边


* [d>k]:
  如果d>k,则 重立坐标系，令d'=k
* [d==k]:
  记录 当前凸包 的 以下信息:
    vtc = 所有端点
    edges = 所有棱边
    facets = 所有次切面
    edge2vtc = 棱边的所有端点#==2#棱边的表达
    facet2linear_equality = 次切面的表达#(d+1)个系数, 坐标向量变量=d个实数变量
    vtc2point = 端点的坐标#端点的表达#坐标向量=d个实数

    facet2vtc = 次切面的所有端点#>=k
    vtx2facets = 端点的所有次切面#==k
    vtx2edges = 端点的所有棱边#>=k
    edge2facets = 棱边的所有次切面#==k-1
  ##约束:==大概率降维;</>/<=/>=大概率不降维;!=无影响
  #以下不考虑==,!=
  TODO:

]]
[[凸包
  D = 空间维数
  点 :: [Real]{len=D}
  M = len(点集)
  N = len(凸包端点集)
  ====
  难题零 任意非唯一拆分凸包为单锥: 凸包端点集 -> {单锥端点集} #结果非唯一
    m-vertices k-convex_hull -> {k-simplex}{len=m-k}
  ====
  ### 难题一 求凸包端点集: 点集 -> 凸包端点集
  难题一 求凸包端点集: 点集 -> (凸包端点到分割面系数, 点到凸组合系数)
    [凸包端点集 <= 点集]
    [@点 <- 点集\-\凸包端点集. [难题二(点,凸包端点集)===Right _]]
    [@点 <- 凸包端点集. [难题二(点,凸包端点集\-\{点})===Left _]]
  ====
  难题二 内外判定证明: 点 -> 凸包端点集 -> Either 分割面系数<D> 凸组合系数<N>
    分割面系数 :: [Real%1]{len=D}
      @凸包端点. [内积(凸包端点 - 点, 分割面系数) > 0]
    凸组合系数 :: [Real]{len=N}
      ## 凸组合 = 凸组合(凸组合系数, sorted(凸包端点集)) =[def]= 矩阵(sorted(凸包端点集))*向量(凸组合系数)
      [凸组合 === 点][sum 凸组合系数 === 1][min 凸组合系数 >= 0]
      ###需要 线性规划？
      #分割面系数 <<== [X:slack] X.>0 && A*X.>b 无目标函数，只求任意解
      #     改求 距离, 最短距离？找出 由凸包外的点 指向 凸包上距其最近的点 的 这条射线，则 凸包任意点 在此射线上的投影 只能 处于 最近点 外侧
      #     分解为 多个 k-simplex
      #         ??找出 facet 再求 最近点??
      #         见下面:计算点到单锥距离的最近点
      #     xxx 二次方程？奇异矩阵？偏导？
      #凸组合系数 <<== [X==凸组合系数] X.>=0 && A'*X==b' <<== X.>0 && A''*X.>b'' 无目标函数，只求任意解
      #     可以 将 k-convex_hull<N> 分割成 (N-k)个 k-simplex
      #     simplex 生成空间内部点 线性组合 解 唯一(判断 唯一的 线性组合系数 是否为 凸组合系数 容易)，生成空间外部点 无解
  ====
  问题三 两端点是否相邻: 两端点->凸包端点集->Either (端点,凸组合系数<N-1>) 分割面系数<D>
    输出-端点 <- 输入-两端点 |<=| 凸包端点集
    凸组合系数<N-1> 用于组合除了 输出-端点  的其余端点，结果为 输入-两端点 的 中点
    分割面系数<D> 分隔 输入-两端点 与 其余端点
    ###即：判断 输入-两端点 的 中点 是否在 凸包内部 <==> 中点 是否在 (凸包\-\输入两端点其一)内部

]]
[[
face? 各维切面？
simplex? 多维三角单锥体？
  k-simplex in RR**d, -1<=k<=d
    d维实数欧几里得空间
  k-simplex <- convex k-polytype
  k-simplex is a k-polytype formed by the convex hull of (k+1) points in RR**d, d>=k
  ===
  number of i-faces of k-simplex is C(k+1,k-i)===C(k+1, i+1)
    ##i.e. choose (k-i) from total (k+1) facets
    #   i-face is intersection of (k-i) facets
    #   i-face is i-simplex
    #   all faces form a lattice
    #
    1 k-face is the k-simplex itself
    1 -1-face is the empty set of vertex
    k+1 (k-1)-faces/facets
    k+1 0-faces/vertices
    C(k+1,2) (k-2)-faces/ridges
    C(k+1,2) 1-faces/edges
standard perturbation techniques?
  the line L through the origin spanned by a is an admissible shelling line for P. This assumption is justified since admissibility of the shelling line can be simulated using standard perturbation techniques.


k-simplex 的 (k+1)个facet 将 k维空间 分割成 (2**(k+1)-1) 个 块。假设块内的点 可以 见到 i个facet(不被其他facet挡住)，则 这样的块共有C(k+1,i)个，i<-[1..k+1]; i=/=0; i===k+1时，唯一的块即是k-simplex的内部
计算点到单锥距离的最近点
  #自造词:单锥simplex, 次平面hyperplane
  外部点u到k-simplex的距离的计算:
    * [k==0]:
        点到点的距离，直接计算
    * [k>0]:
      * [u不在 k-simplex的延伸空间内]:
        求点z，分解uv为 两个正交分量: uz, zv
          [uz+zv=uv]
            令 uz=uv-zv
          [@x<-f端点集. [xv*uz=0=xv*(uv-zv)]] #正交
            d new vars, k new equalities
            d >= k, 是 点坐标系统的维数
          [?C::mx<k,1>. [(x-v) | x<-f端点集]*C == zv] #共面
            k new vars, d new equalities
          ==>> (d+k)vars, (d+k) equalities
        [uz 是否为 零向量] 决定 [u在不在 k-simplex的延伸空间内]
        问题转化为 [z到k-simplex的距离 且 z在k-simplex的延伸空间内]

      * [u在 k-simplex的延伸空间内]:
        从k-simplex的(k+1)个端点中排除一个v，由剩下的k个端点确定一个facet, f.
        判断 u,v,f的位置关系:
          * u在f的延伸空间内
          * f对于u可见，即 线段uv 穿过f的延伸空间
          * f对于u不可见，即 线段uv 不穿过f的延伸空间
          ###如何计算？
            以v为原点，以f的k个端点为 单位长度的轴向量，构建坐标系统，得到 k维空间RR**k
            f的延伸空间 是 新空间内 的 次平面(？自造词)，由于 端点 坐标 是 echo_mx<k,k>[:,i]，f的延伸空间 可表达为 [k-sum x[i] {i<-[1..k]}===0]
                !!次平面 总是将 空间(仅高出次平面1维) 分成3部分: [===0],[>0],[<0]
            记 lhs<X> = k-sum x[i] {i<-[1..k]}
            [f的延伸空间 === {X | [lhs<X>===0]}]
            [lhs<v> > 0]
            根据lhs<u>与0的大小关系，可知u,v,f的位置关系

        如果『u在f的延伸空间内』，则 这样的 f只有一个，问题转化为 u 到 (k-1)-simplex f 的距离计算(降维)
        否则 问题转化为 u到 所有对于u可见的f的交集『某一维face』(即 排除所有相应的端点v) 的 距离，假设 可见的f共有w个，w<-[1..k],则 该face(not facet)是一个(k-w)-simplex (必定降维，可能一步到位直接成端点)
]]
[[[
[[
https://www.researchgate.net/publication/258121773_A_Simple_Algorithm_for_Convex_Hull_Determination_in_High_Dimensions
    Algorithm: Determining an approximation convex hull based on a user defined threshold
    近似算法 无用

[4] V. Bayer, “Survey of Algorithms for the Convex Hull Problem”, Department of Computer Science, Oregon State University, 1999.
]]
[[
n**(d/2)
  n - num_vertices
  d - num_dimensios
https://libgen.lc/edition.php?id=13339536
  https://link.springer.com/article/10.1007/BF02573985
    An optimal convex hull algorithm in any fixed dimension (1993)(Chazelle)[nlogn+n^(d//2)].pdf
ls /sdcard/Download/Chazelle1993_Article_AnOptimalConvexHullAlgorithmIn.pdf
!mv /sdcard/Download/Chazelle1993_Article_AnOptimalConvexHullAlgorithmIn.pdf  '/sdcard/0my_files/book/math/linear_programming/An optimal convex hull algorithm in any fixed dimension (1993)(Chazelle)[nlogn+n^floor_half(d)].pdf'
view /sdcard/0my_files/book/math/linear_programming/An optimal convex hull algorithm in any fixed dimension (1993)(Chazelle)[nlogn+n^floor_half(d)].pdf
  20. Seidel, R. Constructing higher-dimensional convex hulls at logarithmic cost per face, Proc. 18th Annual ACM Syrup. on Theory of Computing, 1986, pp. 404-413.
    https://doi.org/10.1145/12130.12172
      https://dl.acm.org/doi/10.1145/12130.12172
        https://dl.acm.org/doi/pdf/10.1145/12130.12172

!mv /sdcard/Download/12130.12172.pdf  '/sdcard/0my_files/book/math/linear_programming/Constructing higher-dimensional convex hulls at logarithmic cost per face (1986)(Seidel)[m^2+Flogm].pdf'
  very good!
  很多清晰的基础的定义与基础事实
]]
[[
http://www.math.louisville.edu/~ewa/m107/chapter5.pdf
  good!!!
!mkdir /sdcard/0my_files/book/math/linear_programming/
!mv /sdcard/Download/chapter5.pdf  /sdcard/0my_files/book/math/linear_programming/[LP]linear_programming[Simplex-Method][Big-M-Method].pdf
view /sdcard/0my_files/book/math/linear_programming/[LP]linear_programming[Simplex-Method][Big-M-Method].pdf

[
The Simplex Method:
  Maximization with < constraints
  The Simplex Tableau
  When are we finished? ！！流程图！！
  [[
[!Start!] Write standard max problem in standard form ; Initial Simplex Tableau
  -> <?end1?>
<?end1?> negative indicators?
  No -> [Stop! Optimal solution]
  Yes -> [!select pivot column!]
          -> <?end2?>
<?end2?> positive elements in pivot column?
  No -> [Stop! No solution]
  Yes -> [!Select pivot perform pivot operation!]
          -> <?end1?>
  ]]

The Dual Problem
  Minimization with >= Constraints
Mixed Problems
  The Big M Method
  Modified Problem
  Big M, slack, surplus, artificial variables
  Minimization using Big M

]
[
SUMMARY
(Type, Constraints, Right side constants, coeff. of objective function, Solution method)

(Max, <, nonnegative, any, Simplex + slack)
(Min, >, any, nonnegative, dual + above)
(Max, Mixed (<,>,=), nonnegative, any,,modified with slack+surplus+artificial)
(Min, Mixed (<,>,=), nonnegative, any, Max negative of objective)
]
]]
]]]
[[[
[[
https://www.geeksforgeeks.org/simplex-algorithm-tabular-method/

Simplex Algorithm – Tabular Method

    Difficulty Level : Expert
    Last Updated : 16 May, 2020

Simplex Algorithm is a well-known optimization technique in Linear Programming.
The general form of an LPP (Linear Programming Problem) is
Max/Min Z = c^tX s.t. AX \leq b X \geq 0

Example: Let’s consider the following maximization problem.
Max x_1 + x_2 s.t. x_1 + x_2 + x4 = 8 2x_1 + x_2 + x_3 = 10
Initial construction steps :

    Build your matrix A. A will contain the coefficients of the constraints.
    Matrix b will contain the amount of resources.
    And matrix c will contain the coefficients of objective function or cost.

For the above problem –
Matrix A – At Iteration 0

At Iteration 0

Explanation of table-
B : Basis and contains the basic variables. Simplex algorithm starts with those variables which form an indentity matrix. In the above eg x4 and x3 forms a 2×2 identity matrix.
CB : Its the coefficients of the basic variables in the objective function. The objective functions doesn’t contain x4 and x3, so these are 0.
XB : The number of resources or we can say the RHS of the constraints.
yi : The complete Matrix A.

Simplex Algorithm
1. Start with the initial basis associated with identity matrix.
2. Calculate the relative profits.

For MAX problem-
If all the relative profits are less than or equal to 0, then the current basis is the optimal one. STOP.
Else continue to 3.

For MIN problem
If all the relative profits are greater than or equal to 0, then the current basis is the optimal one. STOP.
Else continue to 3.

3. Find the column corresponding to max relative profit. Say column k has the max
Rel. profit. So xk will enter the basis.

4. Perform a min ratio test to determine which variable will leave the basis.
    min ratio test:  XBr/y_{rk} = min\{XB_i/y_{ik}\}
Index of the min element i.e 'r' will determine the leaving variable.
The basic variable at index r, will leave the basis.
NOTE: Min ratio test is always performed on positive elements.

5. It's evident that the entered variable will not form an identity matrix, so
we will have to perform row operations to make it identity again.
Find the pivot element. The element at index (r, k) will be the pivot element and
row r will be the pivot row.

6. Divide the rth row by pivot to make it 1. And subtract c*(rth row) from other
rows to make them 0, where c is the coefficient required to make that row 0.

Table at Iteration 1

Table at iteration 1

Calculation of relative profits – (Cj – Zj), where Cj is the coefficient in Z and Zj is yi*CB
C1 – Z1 = 1 – (1*0 + 2*0)
C2 – Z2 = 1 – (1*0 + 1*0)
C3 – Z3 = 0 – (0*0 + 1*0)
C4 – Z4 = 0 – (1*0 + 0*0)

So Relative profits are- 1, 1, 0, 0 (As shown in the table)
Clearly not all the relative profits are less or equal to 0. So will perform the next iteration.
Determination of entering variable and leaving variable.
Max relative profit 1 at index 1. So x1 will enter the basis.
min ratio test: XBr/y_{rk} = min\{8/1, 10/2\}
Min of (8, 5) is 5 which is at index 2. So x3 will leave the basis.

Since x1 entered perform required row operations to make an identity matrix.

Pivot index = [2, 4]
Pivot element = 2

Divide the 2nd row by pivot element i.e 2 to make it 1.
And subtract 1*R2 from R1 to make it 0
See the next table.

Table At Iteration 2

Table at iteration 2

Relative profits = 0, 1/2, -1/2, 0
Pivot index = [1, 5]
Pivot element = 1/2
Perform necessary row operations.
See next table

Table At iteration 3

Relative profits = 0, 0, 0, -1
Since all relative profits are less than or equal to 0. So optimality is reached.
This will be the final simplex table and the optimal one.
Value of Z at optimality = 6*1 + 2*1 = 8

Following cases can occur while performing this algorithm.

    Case 1 – Unbounded Solution
    If the column corresponding to the max relative profit contains only non-positive real numbers then we won’t be able to perform the min ratio test. Therefore it is reported as unbounded solution.
    Case 2 – Alternate Solution
    If at any iteration any one of the non-basic variable’s relative profit comes out to be 0, then it contains alternate solutions. Many optimal solutions will exist.

Example 2
The above example was an equality case where we were able to find the initial basis. Now we will perform simplex on an example where there is no identity forming.
MAX 2x_1 + 5x_2 s.t. x_1 + x_2 \leq 6 x_2 \leq 3 x_1 + 2x_2 \leq 9
Convert the above problem into standard form i.e
MAX 2x_1 + 5x_2 s.t. x_1 + x_2 + x_3 = 6 x_2 + x_4 = 3 x_1 + 2x_2 + x_5 = 9
where x3, x4 and x5 are slack variables. These will form identity and hence the initial basis.
Table at Iteration 0

Table at iteration 0

Now continuing as the previous example.
Table at iteration 1

Table at iteration 1

Relative profits = 2, 5, 0, 0, 0
Pivot Index = [2, 5]
Pivot element = 1

Table at Iteration 2

Table at iteration 2

Relative Profits = 2, 0, 0, -5, 0
Pivot Index = [1, 4]
Pivot Element = 1

Table at iteration 3

Table at iteration 3

Relative profits = 0, 0, 0, -2, -3, 0
Since all relative profits are less than equal to 0. Optimality is reached.
This is the final simplex table and the optimal one.
Value of Z at optimality = 3*2 + 3*5 + 0*0 = 21

Code Implementation of Simplex Algorithm
import numpy as np
from fractions import Fraction # so that numbers are not displayed in decimal.

print("\n                 ****SiMplex Algorithm ****\n\n")

# inputs

# A will contain the coefficients of the constraints
A = np.array([[1, 1, 0, 1], [2, 1, 1, 0]])
# b will contain the amount of resources
b = np.array([8, 10])
# c will contain coefficients of objective function Z
c = np.array([1, 1, 0, 0])

# B will contain the basic variables that make identity matrix
cb = np.array(c[3])
B = np.array([[3], [2]])
 # cb contains their corresponding coefficients in Z
cb = np.vstack((cb, c[2]))
xb = np.transpose([b])
# combine matrices B and cb
table = np.hstack((B, cb))
table = np.hstack((table, xb))
# combine matrices B, cb and xb
# finally combine matrix A to form the complete simplex table
table = np.hstack((table, A))
# change the type of table to float
table = np.array(table, dtype ='float')
# inputs end

# if min problem, make this var 1
MIN = 0

print("Table at itr = 0")
print("B \tCB \tXB \ty1 \ty2 \ty3 \ty4")
for row in table:
    for el in row:
                # limit the denominator under 100
        print(Fraction(str(el)).limit_denominator(100), end ='\t')
    print()
print()
print("Simplex Working....")

# when optimality reached it will be made 1
reached = 0
itr = 1
unbounded = 0
alternate = 0

while reached == 0:

    print("Iteration: ", end =' ')
    print(itr)
    print("B \tCB \tXB \ty1 \ty2 \ty3 \ty4")
    for row in table:
        for el in row:
            print(Fraction(str(el)).limit_denominator(100), end ='\t')
        print()

    # calculate Relative profits-> cj - zj for non-basics
    i = 0
    rel_prof = []
    while i<len(A[0]):
        rel_prof.append(c[i] - np.sum(table[:, 1]*table[:, 3 + i]))
        i = i + 1

    print("rel profit: ", end =" ")
    for profit in rel_prof:
        print(Fraction(str(profit)).limit_denominator(100), end =", ")
    print()
    i = 0

    b_var = table[:, 0]
    # checking for alternate solution
    while i<len(A[0]):
        j = 0
        present = 0
        while j<len(b_var):
            if int(b_var[j]) == i:
                present = 1
                break;
            j+= 1
        if present == 0:
            if rel_prof[i] == 0:
                alternate = 1
                print("Case of Alternate found")
                # print(i, end =" ")
        i+= 1
    print()
    flag = 0
    for profit in rel_prof:
        if profit>0:
            flag = 1
            break
        # if all relative profits <= 0
    if flag == 0:
        print("All profits are <= 0, optimality reached")
        reached = 1
        break

    # kth var will enter the basis
    k = rel_prof.index(max(rel_prof))
    min = 99999
    i = 0;
    r = -1
    # min ratio test (only positive values)
    while i<len(table):
        if (table[:, 2][i]>0 and table[:, 3 + k][i]>0):
            val = table[:, 2][i]/table[:, 3 + k][i]
            if val<min:
                min = val
                r = i     # leaving variable
        i+= 1

        # if no min ratio test was performed
    if r ==-1:
        unbounded = 1
        print("Case of Unbounded")
        break

    print("pivot element index:", end =' ')
    print(np.array([r, 3 + k]))

    pivot = table[r][3 + k]
    print("pivot element: ", end =" ")
    print(Fraction(pivot).limit_denominator(100))

        # perform row operations
    # divide the pivot row with the pivot element
    table[r, 2:len(table[0])] = table[
            r, 2:len(table[0])] / pivot

    # do row operation on other rows
    i = 0
    while i<len(table):
        if i != r:
            table[i, 2:len(table[0])] = table[i,
                 2:len(table[0])] - table[i][3 + k] *
                 table[r, 2:len(table[0])]
        i += 1


    # assign the new basic variable
    table[r][0] = k
    table[r][1] = c[k]

    print()
    print()
    itr+= 1


print()

print("***************************************************************")
if unbounded == 1:
    print("UNBOUNDED LPP")
    exit()
if alternate == 1:
    print("ALTERNATE Solution")

print("optimal table:")
print("B \tCB \tXB \ty1 \ty2 \ty3 \ty4")
for row in table:
    for el in row:
        print(Fraction(str(el)).limit_denominator(100), end ='\t')
    print()
print()
print("value of Z at optimality: ", end =" ")

basis = []
i = 0
sum = 0
while i<len(table):
    sum += c[int(table[i][0])]*table[i][2]
    temp = "x"+str(int(table[i][0])+1)
    basis.append(temp)
    i+= 1
# if MIN problem make z negative
if MIN == 1:
    print(-Fraction(str(sum)).limit_denominator(100))
else:
    print(Fraction(str(sum)).limit_denominator(100))
print("Final Basis: ", end =" ")
print(basis)

print("Simplex Finished...")
print()

For the above just plug in the required values and you will get a detailed step by step solution of your LPP by the simplex algorithm.

]]
[[
https://optimization.cbe.cornell.edu/index.php?title=Simplex_algorithm


Simplex algorithm
Jump to navigation
Jump to search

Author: Guoqing Hu (SysEn 6800 Fall 2020)
Contents

    1 Introduction
    2 Algorithmic Discussion
    3 Numerical Example
    4 Application
        4.1 Mathematical Problem
        4.2 Industrial Application
    5 Conclusion
    6 References

Introduction

Simplex algorithm (or Simplex method) is a widely-used algorithm to solve the Linear Programming(LP) optimization problems. The simplex algorithm can be thought of as one of the elementary steps for solving the inequality problem, since many of those will be converted to LP and solved via Simplex algorithm.[1] Simplex algorithm has been proposed by George Dantzig, initiated from the idea of step by step downgrade to one of the vertices on the convex polyhedral.[2] "Simplex" could be possibly referred to as the top vertex on the simplicial cone which is the geometric illustration of the constraints within LP problems.[3]
Algorithmic Discussion

There are two theorems in LP:

    The feasible region for an LP problem is a convex set (Every linear equation's second derivative is 0, implying the monotonicity of the trend). Therefore, if an LP has an optimal solution, there must be an extreme point of the feasible region that is optimal
    For an LP optimization problem, there is only one extreme point of the LP's feasible region regarding every basic feasible solution. Plus, there will be a minimum of one basic feasible solution corresponding to every extreme point in the feasible region.[4]

Geometric Illustration of LP problem

Based on the two theorems above, the geometric illustration of the LP problem could be depicted. Each line of this polyhedral will be the boundary of the LP constraints, in which every vertex will be the extreme points according to the theorem. The simplex method is the way to adjust the nonbasic variables to travel to different vertex till the optimum solution is found.[5]

Consider the following expression as the general linear programming problem standard form:

max ∑ i = 1 n c i x i {\displaystyle \max \sum _{i=1}^{n}c_{i}x_{i}} {\displaystyle \max \sum _{i=1}^{n}c_{i}x_{i}}

With the following constraints:

s . t . ∑ j = 1 n a i j x j ≤ b i i = 1 , 2 , . . . , m x j ≥ 0 j = 1 , 2 , . . . , n {\displaystyle {\begin{aligned}s.t.\quad \sum _{j=1}^{n}a_{ij}x_{j}&\leq b_{i}\quad i=1,2,...,m\\x_{j}&\geq 0\quad j=1,2,...,n\end{aligned}}} {\displaystyle {\begin{aligned}s.t.\quad \sum _{j=1}^{n}a_{ij}x_{j}&\leq b_{i}\quad i=1,2,...,m\\x_{j}&\geq 0\quad j=1,2,...,n\end{aligned}}}

The first step of the simplex method is to add slack variables and symbols which represent the objective functions:

ϕ = ∑ i = 1 n c i x i z i = b i − ∑ j = 1 n a i j x j i = 1 , 2 , . . . , m {\displaystyle {\begin{aligned}\phi &=\sum _{i=1}^{n}c_{i}x_{i}\\z_{i}&=b_{i}-\sum _{j=1}^{n}a_{ij}x_{j}\quad i=1,2,...,m\end{aligned}}} {\displaystyle {\begin{aligned}\phi &=\sum _{i=1}^{n}c_{i}x_{i}\\z_{i}&=b_{i}-\sum _{j=1}^{n}a_{ij}x_{j}\quad i=1,2,...,m\end{aligned}}}

The new introduced slack variables may be confused with the original values. Therefore, it will be convenient to add those slack variables z i {\displaystyle z_{i}} {\displaystyle z_{i}} to the end of the list of x-variables with the following expression:

ϕ = ∑ i = 1 n c i x i x n + i = b i − ∑ j = 1 n a i j x i j i = 1 , 2 , . . . , m {\displaystyle {\begin{aligned}\phi &=\sum _{i=1}^{n}c_{i}x_{i}\\x_{n+i}&=b_{i}-\sum _{j=1}^{n}a_{ij}x_{ij}\quad i=1,2,...,m\end{aligned}}} {\displaystyle {\begin{aligned}\phi &=\sum _{i=1}^{n}c_{i}x_{i}\\x_{n+i}&=b_{i}-\sum _{j=1}^{n}a_{ij}x_{ij}\quad i=1,2,...,m\end{aligned}}}

With the progression of simplex method, the starting dictionary (which is the equations above) switches between the dictionaries in seeking for optimal values. Every dictionary will have m basic variables which form the feasible area, as well as n non-basic variables which compose the objective function. Afterward, the dictionary function will be written in the form of:








              ϕ
              = ϕ ¯ + ∑ j = 1 n c j ¯ x j


              x i
              = b i ¯ − ∑ j = 1 n a i j ¯ x i j i = 1 , 2 , . . . , n + m





    {\displaystyle {\begin{aligned}\phi &={\bar {\phi }}+\sum _{j=1}^{n}{\bar {c_{j}}}x_{j}\\x_{i}&={\bar {b_{i}}}-\sum _{j=1}^{n}{\bar {a_{ij}}}x_{ij}\quad i=1,2,...,n+m\end{aligned}}}

{\displaystyle {\begin{aligned}\phi &={\bar {\phi }}+\sum _{j=1}^{n}{\bar {c_{j}}}x_{j}\\x_{i}&={\bar {b_{i}}}-\sum _{j=1}^{n}{\bar {a_{ij}}}x_{ij}\quad i=1,2,...,n+m\end{aligned}}}

Where the variables with bar suggest that those corresponding values will change accordingly with the progression of the simplex method. The observation could be made that there will specifically one variable goes from non-basic to basic and another acts oppositely. This kind of variable is referred to as the entering variable. Under the goal of increasing ϕ {\displaystyle \phi } {\displaystyle \phi }, the entering variables are selected from the set {1,2,...,n}. As long as there are no repetitive entering variables can be selected, the optimal values will be found. The decision of which entering variable should be selected at first place should be made based on the consideration that there usually are multiple constraints (n>1). For the Simplex algorithm, the coefficient with the least value is preferred since the major objective is maximization.

The leaving variables are defined as which go from basic to non-basic. The reason of their existence is to ensure the non-negativity of those basic variables. Once the entering variables are determined, the corresponding leaving variables will change accordingly from the equation below:

x i = b i ¯ − a i k ¯ x k i ϵ { 1 , 2 , . . . , n + m } {\displaystyle x_{i}={\bar {b_{i}}}-{\bar {a_{ik}}}x_{k}\quad i\,\epsilon \,\{1,2,...,n+m\}} {\displaystyle x_{i}={\bar {b_{i}}}-{\bar {a_{ik}}}x_{k}\quad i\,\epsilon \,\{1,2,...,n+m\}}

Since the non-negativity of entering variables should be ensured, the following inequality can be derived:

b i ¯ − a i ¯ x k ≥ 0 i ϵ { 1 , 2 , . . . , n + m } {\displaystyle {\bar {b_{i}}}-{\bar {a_{i}}}x_{k}\geq 0\quad i\,\epsilon \,\{1,2,...,n+m\}} {\displaystyle {\bar {b_{i}}}-{\bar {a_{i}}}x_{k}\geq 0\quad i\,\epsilon \,\{1,2,...,n+m\}}

Where x k {\displaystyle x_{k}} {\displaystyle x_{k}} is immutable. The minimum x i {\displaystyle x_{i}} {\displaystyle x_{i}} should be zero to get the minimum value since this cannot be negative. Therefore, the following equation should be derived:

x k = b i ¯ a i k ¯ {\displaystyle x_{k}={\frac {\bar {b_{i}}}{\bar {a_{ik}}}}} {\displaystyle x_{k}={\frac {\bar {b_{i}}}{\bar {a_{ik}}}}}

Due to the nonnegativity of all variables, the value of x k {\displaystyle x_{k}} {\displaystyle x_{k}} should be raised to the largest of all of those values calculated from above equation. Hence, the following equation can be derived:

x k = min a i k ¯ > 0 b i ¯ a i k ¯ i = 1 , 2 , . . . , n + m {\displaystyle x_{k}=\min _{{\bar {a_{ik}}}>0}\,{\frac {\bar {b_{i}}}{\bar {a_{ik}}}}\quad i=1,2,...,n+m} {\displaystyle x_{k}=\min _{{\bar {a_{ik}}}>0}\,{\frac {\bar {b_{i}}}{\bar {a_{ik}}}}\quad i=1,2,...,n+m}

Once the leaving-basic and entering-nonbasic variables are chosen, reasonable row operation should be conducted to switch from the current dictionary to the new dictionary, as this step is called pivot.[4]

As in the pivot process, the coefficient for the selected pivot element should be one, meaning the reciprocal of this coefficient should be multiplied to every element within this row. Afterward, multiplying this specific row with corresponding coefficients and adding this to different rows, one should get 0 values for all other entries in this pivot element's column.

If there are any negative variables after the pivot process, one should continue finding the pivot element by repeating the process above. At once there are no more negative values for basic and non-basic variables. The optimal solution is found.[6][7]
Numerical Example

Considering the following numerical example to gain better understanding:

max 4 x 1 + x 2 + 4 x 3 {\displaystyle \max {4x_{1}+x_{2}+4x_{3}}} {\displaystyle \max {4x_{1}+x_{2}+4x_{3}}}

with the following constraints:

2 x 1 + x 2 + x 3 ≤ 2 x 1 + 2 x 2 + 3 x 3 ≤ 4 2 x 1 + 2 x 2 + x 3 ≤ 8 x 1 , x 2 , x 3 ≥ 0 {\displaystyle {\begin{aligned}2x_{1}+x_{2}+x_{3}&\leq 2\\x_{1}+2x_{2}+3x_{3}&\leq 4\\2x_{1}+2x_{2}+x_{3}&\leq 8\\x_{1},x_{2},x_{3}&\geq 0\end{aligned}}} {\displaystyle {\begin{aligned}2x_{1}+x_{2}+x_{3}&\leq 2\\x_{1}+2x_{2}+3x_{3}&\leq 4\\2x_{1}+2x_{2}+x_{3}&\leq 8\\x_{1},x_{2},x_{3}&\geq 0\end{aligned}}}

With adding slack variables to get the following equations:

z − 4 x 1 − x 2 − 4 x 3 = 0 2 x 1 + x 2 + x 3 + s 1 = 2 x 1 + 2 x 2 + 3 x 3 + s 2 = 4 2 x 1 + 2 x 2 + x 3 + s 3 = 8 x 1 , x 2 , x 3 , s 1 , s 2 , s 3 ≥ 0 {\displaystyle {\begin{aligned}z-4x_{1}-x_{2}-4x_{3}&=0\\2x_{1}+x_{2}+x_{3}+s_{1}&=2\\x_{1}+2x_{2}+3x_{3}+s_{2}&=4\\2x_{1}+2x_{2}+x_{3}+s_{3}&=8\\x_{1},x_{2},x_{3},s_{1},s_{2},s_{3}&\geq 0\end{aligned}}} {\displaystyle {\begin{aligned}z-4x_{1}-x_{2}-4x_{3}&=0\\2x_{1}+x_{2}+x_{3}+s_{1}&=2\\x_{1}+2x_{2}+3x_{3}+s_{2}&=4\\2x_{1}+2x_{2}+x_{3}+s_{3}&=8\\x_{1},x_{2},x_{3},s_{1},s_{2},s_{3}&\geq 0\end{aligned}}}


The simplex tableau can be derived as following:

x 1 x 2 x 3 s 1 s 2 s 3 z b 2 1 1 1 0 0 0 2 1 2 3 0 1 0 0 4 2 2 1 0 0 1 0 8 − 4 − 1 − 4 0 0 0 1 0 {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 2&1&1&1&0&0&0&2\\1&2&3&0&1&0&0&4\\2&2&1&0&0&1&0&8\\\hline -4&-1&-4&0&0&0&1&0\end{array}}} {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 2&1&1&1&0&0&0&2\\1&2&3&0&1&0&0&4\\2&2&1&0&0&1&0&8\\\hline -4&-1&-4&0&0&0&1&0\end{array}}}

In the last row, the column with the smallest value should be selected. Although there are two smallest values, the result will be the same no matter of which one is selected first. For this solution, the first column is selected. After the least coefficient is found, the pivot process will be conducted by searching for the coefficient b i x 1 {\displaystyle {\frac {b_{i}}{x_{1}}}} {\displaystyle {\frac {b_{i}}{x_{1}}}}. Since the coefficient in the first row is 1 and 4 for the second row, the first row should be pivoted. And following tableau can be created:

x 1 x 2 x 3 s 1 s 2 s 3 z b 1 0.5 0.5 0.5 0 0 0 1 1 2 3 0 1 0 0 4 2 2 1 0 0 1 0 8 − 4 − 1 − 4 0 0 0 1 0 {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 1&0.5&0.5&0.5&0&0&0&1\\1&2&3&0&1&0&0&4\\2&2&1&0&0&1&0&8\\\hline -4&-1&-4&0&0&0&1&0\end{array}}} {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 1&0.5&0.5&0.5&0&0&0&1\\1&2&3&0&1&0&0&4\\2&2&1&0&0&1&0&8\\\hline -4&-1&-4&0&0&0&1&0\end{array}}}

By performing the row operation still every other rows (other than first row) in column 1 are zeroes:

x 1 x 2 x 3 s 1 s 2 s 3 z b 1 0.5 0.5 0.5 0 0 0 1 0 1.5 2.5 − 0.5 1 0 0 3 0 1 0 − 1 0 1 0 6 0 1 − 2 2 0 0 1 4 {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 1&0.5&0.5&0.5&0&0&0&1\\0&1.5&2.5&-0.5&1&0&0&3\\0&1&0&-1&0&1&0&6\\\hline 0&1&-2&2&0&0&1&4\end{array}}} {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 1&0.5&0.5&0.5&0&0&0&1\\0&1.5&2.5&-0.5&1&0&0&3\\0&1&0&-1&0&1&0&6\\\hline 0&1&-2&2&0&0&1&4\end{array}}}

Because there is one negative value in last row, the same processes should be performed again. The smallest value in the last row is in the third column. And in the third column, the second row has the smallest coefficients of b i x 3 {\displaystyle {\frac {b_{i}}{x_{3}}}} {\displaystyle {\frac {b_{i}}{x_{3}}}} which is 1.2. Thus, the second row will be selected for pivoting. The simplex tableau is the following:

x 1 x 2 x 3 s 1 s 2 s 3 z b 1 0.5 0.5 0.5 0 0 0 1 0 0.6 1 − 0.2 0.4 0 0 1.2 0 1 0 − 1 0 1 0 6 0 1 − 2 2 0 0 1 4 {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 1&0.5&0.5&0.5&0&0&0&1\\0&0.6&1&-0.2&0.4&0&0&1.2\\0&1&0&-1&0&1&0&6\\\hline 0&1&-2&2&0&0&1&4\end{array}}} {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 1&0.5&0.5&0.5&0&0&0&1\\0&0.6&1&-0.2&0.4&0&0&1.2\\0&1&0&-1&0&1&0&6\\\hline 0&1&-2&2&0&0&1&4\end{array}}}

By performing the row operation to make other columns 0's, the following could be derived

x 1 x 2 x 3 s 1 s 2 s 3 z b 1 0.2 0 0.6 − 0.2 0 0 0.4 0 0.6 1 − 0.2 0.4 0 0 1.2 0 − 0.1 0 0.2 0.6 − 1 0 − 4.2 0 2.2 0 1.6 0.8 0 1 6.4 {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 1&0.2&0&0.6&-0.2&0&0&0.4\\0&0.6&1&-0.2&0.4&0&0&1.2\\0&-0.1&0&0.2&0.6&-1&0&-4.2\\\hline 0&2.2&0&1.6&0.8&0&1&6.4\end{array}}} {\displaystyle {\begin{array}{c c c c c c c | r}x_{1}&x_{2}&x_{3}&s_{1}&s_{2}&s_{3}&z&b\\\hline 1&0.2&0&0.6&-0.2&0&0&0.4\\0&0.6&1&-0.2&0.4&0&0&1.2\\0&-0.1&0&0.2&0.6&-1&0&-4.2\\\hline 0&2.2&0&1.6&0.8&0&1&6.4\end{array}}}

There is no need to further conduct calculation since all values in the last row are non-negative. From the tableau above, x 1 {\displaystyle x_{1}} {\displaystyle x_{1}}, x 3 {\displaystyle x_{3}} {\displaystyle x_{3}} and z {\displaystyle z} {\displaystyle z} are basic variables since all rows in their columns are 0's except one row is 1.Therefore, the optimal solution will be x 1 = 0.4 {\displaystyle x_{1}=0.4} {\displaystyle x_{1}=0.4}, x 2 = 0 {\displaystyle x_{2}=0} {\displaystyle x_{2}=0}, x 3 = 1.2 {\displaystyle x_{3}=1.2} {\displaystyle x_{3}=1.2}, achieving the maximum value: z = 6.4 {\displaystyle z=6.4} {\displaystyle z=6.4}
Application

The simplex method can be used in many programming problems since those will be converted to LP (Linear Programming) and solved by the simplex method. Besides the mathematical application, much other industrial planning will use this method to maximize the profits or minimize the resources needed.
Mathematical Problem

The simplex method is commonly used in many programming problems. Due to the heavy load of computation on the non-linear problem, many non-linear programming(NLP) problems cannot be solved effectively. Consequently, many NLP will rely on the LP solver, namely the simplex method, to do some of the work in finding the solution (for instance, the upper or lower bound of the feasible solution), or in many cases, those NLP will be wholly linearized to LP and solved from the simplex method.[1] Other than solving the problems, simplex method can also be used reliably to support the LP's solution from other theorem, for instance the Farkas' theorem in which Simplex method proves the suggested feasible solutions.[1] Besides solving the problems, the Simplex method can also enlighten the scholars with the ways of solving other problems, for instance, Quadratic Programming (QP).[8] For some QP problems, they have linear constraints to the variables which can be solved analogous to the idea of the Simplex method.
Industrial Application

The industries from different fields will use the simplex method to plan under the constraints. With considering that it is usually the case that the constraints or tradeoffs and desired outcomes are linearly related to the controllable variables, many people will develop the models to solve the LP problem via the simplex method, for instance, the agricultural and economic problems

Farmers usually need to rationally allocate the existed resources to obtain the maximum profits. The potential constraints are raised from multiple perspectives including policy restriction, budget concerns as well as farmland area. Farmers may incline to use the simplex-method-based model to have a better plan, as those constraints may be constant in many scenarios and the profits are usually linearly related to the farm production, thereby forming the LP problem. Currently, there is an existing plant-model that can accept inputs such as price, farm production, and return the optimal plan to maximize the profits with given information.[9]

Besides agricultural purposes, the Simplex method can also be used by enterprises to make profits. The rational sale-strategy will be indispensable to the successful practice of marketing. Since there are so many enterprises international wide, the marketing strategy from enamelware is selected for illustration. After widely collecting the data of the quality of varied products manufactured, cost of each and popularity among the customers, the company may need to determine which kind of products well worth the investment and continue making profits as well as which won't. Considering the cost and profit factors are linearly dependent on the production, economists will suggest an LP model that can be solved via the simplex method.[10]

The above professional fields are only the tips of the iceberg to the simplex method application. Many other fields will use this method since the LP problem is gaining popularity in recent days and the simplex method plays a crucial role in solving those problems.
Conclusion

It is indisputable to acknowledge the influence of the Simplex method to programming, as this method won the 'National Medal of Science' to its inventor, George Dantzig.[11] Not only for its wide usage in the mathematic models and industrial manufacture, but the Simplex method also provides a new perspective in solving the inequality problems. As its contribution to the programming substantially boosts the advancement of the current technology and economy from making the optimal plan with the constraints. Nowadays, with the development of technology and economics, the Simplex method is substituted with some more advanced solvers which can solve the problems with faster speed and handle a larger amount of constraints and variables, but this innovative method marks the creativity at that age and continuously offer the inspiration to the upcoming challenges.
References

Linear complementarity, linear and nonlinear programming Internet Edition.
Dantzig, G. B. (1987, May). Origins of the simplex method.
Strang, G. (1987). Karmarkar’s algorithm and its place in applied mathematics. The Mathematical Intelligencer, 9(2), 4-10. doi:10.1007/bf03025891.
Vanderbei, R. J. (2000). Linear programming: Foundations and extensions. Boston: Kluwer.
Sakarovitch M. (1983) Geometric Interpretation of the Simplex Method. In: Thomas J.B. (eds) Linear Programming. Springer Texts in Electrical Engineering. Springer, New York, NY. https://doi.org/10.1007/978-1-4757-4106-3_8
Evar D. Nering and Albert W. Tucker, 1993, Linear Programs and Related Problems, Academic Press. (elementary)
Robert J. Vanderbei, Linear Programming: Foundations and Extensions, 3rd ed., International Series in Operations Research & Management Science, Vol. 114, Springer Verlag, 2008. ISBN 978-0-387-74387-5.
Wolfe, P. (1959). The simplex method for quadratic programming. Econometrica, 27(3), 382. doi:10.2307/1909468
Hua, W. (1998). Application of the revised simplex method to the farm planning model.
Nikitenko, A. V. (1996). Economic analysis of the potential use of a simplex method in designing the sales strategy of an enamelware enterprise. Glass and Ceramics, 53(12), 367-369. doi:10.1007/bf01129674.

    Cottle, R., Johnson, E. and Wets, R. (2007). George B. Dantzig (1914–2005). Notices Amer. Math. Soc. 54, 344–362.

Navigation menu

    Log in
    Request account

    Page
    Discussion

    Read
    View source
    View history

Search

    Textbook Home
    About This Text
    Wiki Editing Help
    Feedback (2021)
    Feedback (2020)
    Recent Changes

Tools

    What links here
    Related changes
    Special pages
    Printable version
    Permanent link
    Page information

    This page was last edited on 5 October 2021, at 08:26.

    Privacy policy
    About Cornell University Computational Optimization Open Textbook - Optimization Wiki
    Disclaimers

    Powered by MediaWiki
]]
[[Simplex algorithm
https://google.github.io/or-tools/cpp_linear/linear__solver_8h.html
  https://google.github.io/or-tools/cpp_linear/linear__solver_8h_source.html

Google OR-Tools 9.3
C++ Reference

    Algorithms
    CP-SAT
    Graph
    Routing
    Linear solver

C++ Reference: Linear solver
Toggle main menu visibility
Classes | Namespaces | Functions | Variables
linear_solver.h File Reference
Detailed Description

A C++ wrapper that provides a simple and unified interface to several linear programming and mixed integer programming solvers: GLOP, GLPK, CLP, CBC, and SCIP.

The wrapper can also be used in Java, C#, and Python via SWIG.

What is Linear Programming?

In mathematics, linear programming (LP) is a technique for optimization of a linear objective function, subject to linear equality and linear inequality constraints. Informally, linear programming determines the way to achieve the best outcome (such as maximum profit or lowest cost) in a given mathematical model and given some list of requirements represented as linear equations.

The most widely used technique for solving a linear program is the Simplex algorithm, devised by George Dantzig in 1947. It performs very well on most instances, for which its running time is polynomial. A lot of effort has been put into improving the algorithm and its implementation. As a byproduct, it has however been shown that one can always construct problems that take exponential time for the Simplex algorithm to solve. Research has thus focused on trying to find a polynomial algorithm for linear programming, or to prove that linear programming is indeed polynomial.

Leonid Khachiyan first exhibited in 1979 a weakly polynomial algorithm for linear programming. "Weakly polynomial" means that the running time of the algorithm is in O(P(n) * 2^p) where P(n) is a polynomial of the size of the problem, and p is the precision of computations expressed in number of bits. With a fixed-precision, floating-point-based implementation, a weakly polynomial algorithm will thus run in polynomial time. No implementation of Khachiyan's algorithm has proved efficient, but a larger breakthrough in the field came in 1984 when Narendra Karmarkar introduced a new interior point method for solving linear programming problems. Interior point algorithms have proved efficient on very large linear programs.

Check Wikipedia for more detail: http://en.wikipedia.org/wiki/Linear_programming

Example of a Linear Program

maximize: 3x + y subject to: 1.5 x + 2 y <= 12 0 <= x <= 3 0 <= y <= 5

A linear program has: 1) a linear objective function 2) linear constraints that can be equalities or inequalities 3) bounds on variables that can be positive, negative, finite or infinite.

What is Mixed Integer Programming?

Here, the constraints and the objective are still linear but there are additional integrality requirements for variables. If all variables are required to take integer values, then the problem is called an integer program (IP). In most cases, only some variables are required to be integer and the rest of the variables are continuous: this is called a mixed integer program (MIP). IPs and MIPs are generally NP-hard.

Integer variables can be used to model discrete decisions (build a datacenter in city A or city B), logical relationships (only place machines in datacenter A if we have decided to build datacenter A) and approximate non-linear functions with piecewise linear functions (for example, the cost of machines as a function of how many machines are bought, or the latency of a server as a function of its load).

How to use the wrapper

The user builds the model and solves it through the MPSolver class, then queries the solution through the MPSolver, MPVariable and MPConstraint classes. To be able to query a solution, you need the following:

    A solution exists: MPSolver::Solve has been called and a solution has been found.
    The model has not been modified since the last time MPSolver::Solve was called. Otherwise, the solution obtained before the model modification may not longer be feasible or optimal.

See also
    ../examples/linear_programming.cc for a simple LP example.
    ../examples/integer_programming.cc for a simple MIP example.

All methods cannot be called successfully in all cases. For example: you cannot query a solution when no solution exists, you cannot query a reduced cost value (which makes sense only on continuous problems) on a discrete problem. When a method is called in an unsuitable context, it aborts with a LOG(FATAL). TODO(user): handle failures gracefully.

For developers: How the wrapper works

MPSolver stores a representation of the model (variables, constraints and objective) in its own data structures and a pointer to a MPSolverInterface that wraps the underlying solver (GLOP, CBC, CLP, GLPK, or SCIP) that does the actual work. The underlying solver also keeps a representation of the model in its own data structures. The model representations in MPSolver and in the underlying solver are kept in sync by the 'extraction' mechanism: synchronously for some changes and asynchronously (when MPSolver::Solve is called) for others. Synchronicity depends on the modification applied and on the underlying solver.

Definition in file linear_solver.h.

Go to the source code of this file.
Classes
class  	MPSolver
 	This mathematical programming (MP) solver class is the main class though which users build and solve problems. More...

class  	MPObjective
 	A class to express a linear objective. More...

class  	MPVariable
 	The class for variables of a Mathematical Programming (MP) model. More...

class  	MPConstraint
 	The class for constraints of a Mathematical Programming (MP) model. More...

class  	MPSolverParameters
 	This class stores parameter settings for LP and MIP solvers. More...

class  	MPSolverInterface

Namespaces
namespace  	operations_research

Functions
 	ABSL_DECLARE_FLAG (bool, linear_solver_enable_verbose_output)

bool 	SolverTypeIsMip (MPModelRequest::SolverType solver_type)

bool 	SolverTypeIsMip (MPSolver::OptimizationProblemType solver_type)

const absl::string_view 	ToString (MPSolver::OptimizationProblemType optimization_problem_type)

std::ostream & 	operator<< (std::ostream &os, MPSolver::OptimizationProblemType optimization_problem_type)

std::ostream & 	operator<< (std::ostream &os, MPSolver::ResultStatus status)

bool 	AbslParseFlag (absl::string_view text, MPSolver::OptimizationProblemType *solver_type, std::string *error)

std::string 	AbslUnparseFlag (MPSolver::OptimizationProblemType solver_type)

bool 	MPSolverResponseStatusIsRpcError (MPSolverResponseStatus status)

Variables
constexpr double 	kDefaultPrimalTolerance = 1e-07

Function Documentation
ABSL_DECLARE_FLAG 	( 	bool  	,
		linear_solver_enable_verbose_output  	
	) 		

]]
]]]
]]]]]
DONE:
e ../../python3_src/seed/math/matrix/solve_matrix.py
  matrix:solve
    unify-std row:
      coeff *= ??
    pivot below column nonzreos
      which?


[[
语法:
  码流多个层次
  缓存cfg运算结果
    无副作用函数
    语境无关
    指导裁剪 缓存的码流
  句法符号: 功能=识别+生成
  检查符号: 功能=检查局部变量locals

  码流 -> 树
  树 -> 受限通用数据类型
    基本数据类型:
      没有内建类型
      真值类型-并不需要，直接使用case of 而非 if-else
      整数类型 用 List<Digit>表达
      Monad?表达 出错
        字符串 用于 io？
          List<List<Hex>>
      其他都是:Disjoint_Union互斥并联
        可移植？类似 集合
          T a b = T1 a | T2 b
          S b = (T _ b) .T2 b? | S0
        缓存属性:
          Tree a = Leaf a | Fork [Tree a]@children {sz::UInt}{sz=f children}
          公开可读，可不读，按名读取(向后兼容，随时可以新增缓存属性！)
          构造时 不能赋值！自动生
            序列化时，不显示
            因为 表达成 构造表达式的样子，而构造表达式并不包含缓存属性
      IO:
        输出至 外部哪些 数据类型？
          List v <-> Array<v>
          List v <-> Set<v>
          List (k, v) <-> Lookup<k,v> #eq? bool? class?
          List<List<Hex> > <-> 字符串
          整数#真值? 0/1? 外部弱类型，内部有类型指引，可以正确转为
          没有 元组？不够通用
    区分:惰性求值，勤性求值
      惰性求值-如何实现-无循环引用:
        使用 内部时间戳！
          使用 惰性表达式 时:
            生成一个时间戳t0，用以递归约束 内部子表达式构造时间
            可以引用任何 固实勤性表达式
            只能引用 构造时间t>t0的 惰性表达式/或/半固实构造(自身时间戳=所有子表达式时间戳的最小值)
                ??既然 半固实没有产生 新的时间戳，那到底哪个构造产生新的时间戳？
        或者:用户显式提供 一个 rank 以 对 惰性表达式 分层
        或者:使用 依赖于 类型的rank
        或者:使用 依赖于 模块包的rank
          A模块依赖B 意味着 A有可能 使用 B类型构造器，因此 无法从参数上 看出是否 发生 类型循环
            只有没有 发生类型循环，就不会出现 循环引用
          没有类型循环的一个充分条件是:
            类型T 定义于 模块A
            类型S 定义于 模块B
            T 的 子数据 是属于 类型S
              ==>> A头文件 依赖于 B头文件
              ==>> B头文件 不依赖于 A头文件
              因此 如果 S的对象实例 引用 类型T，则 该类型 必然 是 通过 类型参数 直接 传递，而非 另行 构造(因为 没有 T的构造器)
            可见，出现 循环引用，必然 是 同一模块中的 一组 循环引用 类型(没有子类型...)+可修改性(包括 惰性求值 在内:惰性表达式闭包)！！！
              高阶类型参数，也可能传递 类型构造器，造成循环，这其实是 循环类型的实现细节(隐参数)...
              相似的结构:分形？
    xxx 局部并行裸指针循环?
      bug:其实就是：
        obj{
        .x = f<raw obj>(...)
        .y = f<raw obj>(...)
        }
      !!! 类似
        x = f x
        y = f z
        z = f y
        等，惰性表达式 其实 就已经 产生了 循环引用！！
          f x 是 一个 包含 x的对象！
        除非 即时传参 即时运算，
          即：f x 是 lambda x: f x
          但 这样一来，很多计算都重复了！
  ===
  子类:只允许 并联分支 减少，不允许 增加 串联分量 (除了 缓存属性)
    序列化/反序列化 等 等价变换中，信息损失
  ===
  其实 不需要 完整的类型定义，只需要 类型构造器 声明 就 可以了
  函数 也 不需要 定义，只要 声明 就可以了
  唯一的表达式 就是 函数调用，能够 匹配类型就可以了
    具体实现 由 运行库 或 用户 提供！
  构造器 也是 函数
  解析 复杂 字面值，可仿 C++带单位字面值
    其实就是 函数+字符串
    看来 字符串 少不了要 内建
  注意:句法符号 是 函数
    也有 输入输出
      输入:模版参数
      输出:解析结果
      中间变量:可选命名序列/属性语法？

  ===
  命名(可选):
    并联分支:
      ; = x {
        | w
        | expr
        | [ ... ]
        | = y [ ... ]
        | { ... }
        | = z { ... }
      }
      优先: 『/』替代『|』
    串联分量:
      ; = x [
        , w
        , expr
        , [ ... ]
        , = y [ ... ]
        , { ... }
        , = z { ... }
      ]
  ===
  模版
    ; = x(...) ...
  ===
  局部私有命名空间"where"
  ===
  自举？
    精简版-->>复杂版

]]


[[
view others/数学/编程/术语/控控非门CCNOT--Toffoli门.txt

===

Yaoyun Shi发现只用Toffoli门加上单比特的Hadamard 门就可以构造出任意的量子电路。

这个结论有可以用下面这句话概括：量子计算超越经典计算的地方就在于多了单比特的Hadamard门，或者说所有的量子计算算法不过就是经典计算机加上Hadamard门。
]]



cmake 之类 的 自动生成 的 中间文件，应该 独立 配置 一个 属性文件(本文件.(虚拟修改时刻+hash) / + 所有[依赖文件.(相对路径+虚拟修改时刻+hash)] #本文件.虚拟修改时刻=1+max(所有[依赖文件.虚拟修改时刻], default=-1)#)
  独立于 文件系统 的 好处是：解压/复制/移动，权限不足 等等 问题 不再


cross-?-compiler
  executable<host_exec_lang> :: script_lang -> source_code_lang -> exec_lang_id -> exec_lang<exec_lang_id>
  executable<host_exec_lang>(script8compiler, source_code, name4target_exec_lang) -> executable<target_exec_lang>

语法-语言:
  命名空间
    ==>>export
      ???export until some-a-ancestor-X
        在X之下 的 所有包 可见
        强调向上传递，避免 错误定位
      export to some-a-pkg-X
        在X之下 的 所有包 可见

    ==>>import
    铁律:import 的 所有对象名 必须是 固定不变的集合
      显式枚举
      隐式计算 的前提是 所有输入 固定不变
        即 锚定 头文件 的 特定版本
    禁止:
      from xxx import *
      import xxx (*)
      #why?多个输出也会冲突！除非只有一条输出指令 或者 引入包自己 声明 命名规则(比如：正则表达式，版本演进，接口只增不减，约束只强不弱(命名规则 不断 缩减 许可的命名空间))并限定版本下限、或者 本地 就地 声明 转发的标识过滤规则（版本演进，过滤规则 不断弱化，允许越来越大的转发空间），或者 锚定 版本(反正，新版本 必须 声明 所覆盖 的 所有旧版本==>>整个历史无缺无漏)
      #     有意义吗？版本下限 其实 就是 唯一的约束，新版本的新接口，用户事实上看不到！！所以锚定 版本全部引入是合理的，锚定的是 头文件/接口文件 版本，而非 源文件/具化实现
      #bug:但 允许 全部 向外转发:
      #bug:export from xxx (*)
      #bug:重点在于: 只要内部使用，就必须显式声明
        ?(？即使使用 限定词前缀？)
        import xxx as X (x)
        X.x
        import xxx as X (*)？？行不行？
          可以，反正命名无冲突，且只要 包内容 立即可见，完全可以反推（除非是 头文件，而且 还没用上，既然 只在 源文件 中 使用，头文件不用，头文件 便不该 引入，减少依赖；源文件 可 自动生成 的 requirements需求文件/依赖？）
          requirements vs dependencies

编译器自举:
  逆推 则是 语言 不断剥离复杂特性，形成一序列缩水语言子集
  ===
  最初的编译器 只能使用 某个平台上的 某种固有语言 来实现
    机器语言/汇编语言
    这个 最初的编译器 代码量 应该尽量小
      适合 在任何新机器上 直接使用 汇编语言 实现
      只做一件事: 将 某种高级语言 翻译成 汇编语言
      即 实现 文本文件 的 翻译
        文本文件 -> 文本文件
      弱类型 脚本语言
      数据 不可修改(父节点 必需 在 子节点 构造 之后 才能 构造)，但 对象/公开共享节点 允许 多个拥有者/父节点，使用 用户不可见 的 可修改 引用计数 以实现 内存自动管理/无需垃圾回收
        循环引用 只能 使用 私有独占的裸指针 私有子引用=(父节点/独占拥有者，私有子裸指针)
      使用 用户不可见 不可修改 的 类指针 以 区分 公开共享节点/私有独占节点
      ===
      底层构造，更高层不可见:
        第一，指针/计数器
              #指针下限>=字节
              #?机器字?可以用指针替代?用作 引用计数#因为 引用 来自于 其他地址，数量不超过指针表达范围
              #?单字符?除非 预设固定字符集，这样一来，字符数量固定，但如果使用机器字表达字符，则 隐含了 对 机器字 的 下限要求
        ??第二，整块字节串??#似乎没有用武之地
        第三，内存管理
        第四，底层元组=四指针大小(类指针/不可修改，引用计数/可修改，左节点/不可修改，右节点/不可修改)
          带不带长度？
          ===
          大整数.最低位.底层元组=四指针大小(类指针/不可修改，引用计数/可修改，低位计数/不可修改，高位节点/不可修改)
          大整数.非最低位.底层元组=四指针大小(低位计数{*3}/不可修改，高位节点/不可修改)
          ####第四，底层元组=四指针大小(引用计数/可修改，类指针/不可修改，子树节点数/不可修改，左节点/不可修改，右节点/不可修改)
      高层构造:
        第一，读写 本地 二进制文件
        第二，通用容器
              底层元组
              ==>>中层短元组
              ==>>以下节点
              序列finger_tree
                序列.树节点(?深度?，整树节点数，左翼{深度-1}{n,m}，中间子树{深度+1}，右翼{深度}{n,m})
                序列.树.翼节点(?深度?, 翼节点{深度-1}{p,q})
                序列.树.翼节点{深度=-1}===序列.树.叶节点(元素)
              序列==>>高层长元组/高层数组...有序集合/有序词典
                带不带长度？
        第三，大整数操作
              ==>>弱类型，与其他类型区分开来，内部完全私有，再无需 引用计数
              <<==序列<计数器>
                #除法 受限制，除数 在 字节 范围？比特位右移？
        第四，字符串操作
              #未来的字符数量没有上限，只能使用大整数
              <<==序列<自然数><<==序列<大整数>
              类似 Haskell:
                []
                Char:Str
              唯一的 空字符串:
                字符串.唯一空元组=(#再次使用 类指针#)
        第五，限制 字符集 及 编码方案，字符串编解码
        第六，语言 表达 应该是 易于 解析 的 通用数据 表达形式
              甚至于 指定 编码:
                比如：采用 6(7*)6 或 (7*)7 动态字节编码
              指定 区分 关键词：
                自然数 是 普通字符/用户数据
                负数 是 转义字符/保留字符/特殊字符/关键字/带外信息
              二进制文件
                ==>> 序列<大整数>===含带外信息的字符串
                ==>> 序列<(负字符串，正字符串)>
                ==>> (允空正字符串，序列<(非空负字符串，非空正字符串)>，允空负字符串)
        第七，使用 通用容器+基本数据类型(字符串+大整数) 实现 (数据 即 函数)通用函数/解释性脚本函数



反排版:
  从 已排版 的 多行多列/阵列 数据(带空位？) 中 提取数据
  该依照什么次序？
  若是 偶然性多列，行 并非 记录，类似『ls』输出多列文件名，则 应该 按 列 读取？
    不太对，输出/排版 也 可能 是 先填满当前行再换行 flow。但这样一来就无分列的必要。
  若是 每行记录一条数据，哪怕 有 空缺，也该 行优先。




https://www.microsoft.com/en-us/research/uploads/prod/2016/12/paxos-simple-Copy.pdf
  [分布式系统][共识协议]Paxos Made Simple.pdf
  view /mnt/m_external_sd/000edt/0my_files/book/并发/\[分布式系统]\[共识协议]Paxos\ Made\ Simple.pdf


标识/命名
  名称/译名 既重要也不重要
  统一形式 有助于 记忆
    译名 保持 同构，方便 自造词
    但 形式化 意味浓厚，自动造词 等于 随机命名，变成 行内黑话，是对 自然语言 直观易理解 的 背叛。
  重要:
    外行/入门 直观
    外行人 遇到问题 能够 直觉 与 该 名称 有关，进一步了解
  不重要:
    内行人是知道 是什么，有哪些特性，用在哪里



并行作用:
  单个 差量 作用于 单个 基量，没问题
  问题在于: 多个差量无优先次序地作用到多个基量融合上。
      缺失？覆盖？整合？删除？碰撞？
      首先是 输入状态判断
        某个 属性 于 各个差量 各个基量 中的 存在性
      其次是 输出状态检查
        怎样的输出才算合格？
      再次是 输入输出状态比照，更进一步检查
        怎样的修改才算合理？
      还有：给出 修改意见/指令
        根据 中间状态，给出 修改步骤
        是 继续循环 填充/修改，还是 中止(局部个人终止 vs 全局出错中止)？

  幂等差量作用:
    ##!!!幂等 注定 不可逆！！
    什么数据结构？怎样支持？
    词典/映射:
      针对预先指定 键值:
        删、新增、覆盖、整合/深入整合
      过滤/针对符合条件的 所有已存在 键值:
    集合:
      缺失则填充默认值
      存在则删除
    multiset/排序序列:
      绝对位置不重要，相对位置重要
      在指定的两元素间插入某些新元素(仅当不存在才插入)
      删除？
    数组/序列:
      ？矩阵？
      绝对位置重要，相对位置不重要
      深入元素
      尾部增删

    树:
      不相干分支独立更新，独占互斥
      ===节点构造器 到底 需不需要 静态类型/固化？
      注解/修饰==>>多重用途
        ==>>节点 拥有 多种视图
          ，比如应用A需要属性.a，应用B需要属性.b
            ==>> {.a{A}=1, .b{B}=2, .c{A,B}=3, .d{A}=4, .d{B}=5}
            应用A看到:过滤后的结果:{.a=1, .c=3, .d=4}
            应用B看到:过滤后的结果:{.b=2, .c=3, .d=5}
        ==>>节点不存在特定于应用的预先设计的构造器，只有最泛化的弱类型构造器
      ====
      ##??可是 全局约束 比如 id唯一性 如何表达？
      ##??有序 结构 中，给 元素 贴上 唯一id 作为 标签，供 外部 定位 而不因 增删元素 而 错失。
      ##    ==>>即使是 有序 结构，元素 也要 命名？问题是 不自然/太麻烦/无描述性质强调外延区别与内涵大纲的自动命名成为必然 导致难用
      ##        可用 补丁/锚定固址差量 来 渐进 按需命名
      ##    局部 唯一 命名 对于构成 路径 很重要
      ##    全局 唯一 命名 对于 在版本修订间 不断漂移 的 对象 #比如 在 向上路径 中 插入 新节点，所有 子节点 路径 改变
      树节点=史节点|野节点
      史节点=[无序可见性]树节点{无序修饰词}
      可见性=用途名#哪个应用会使用？#比较『feature:on='特性选择表达式'』
      修饰词=树节点
      野节点=丫节点|叶节点
      叶节点=内建基础数据类型
        真值/枚举/三态/四态，整数.../标志位集，字节串，字符串
        带单位？带解码方案？data_URI？
      丫节点=自定义丫节点|内建丫节点
      自定义丫节点=(伪构造器别名, 有序参数, 无名无序参数, 命名独占无序参数)
      内建丫节点=内建容器丫节点|内建运算丫节点|内建约束定义丫节点
      内建容器丫节点=自动有序(可选/optional/Maybe|单选/Either|空缺)|有序(元组|数组|多维阵列/张量|递增/排序？==>>相邻约束)|无序(集合|多选/词典映射|多重集合|多重多选|双射==>>无序阵列+列约束+行约束+记录集合约束)
      内建运算丫节点
        模版
        组合算子
        匿名函数
      内建约束定义丫节点
        定义数据类型#用于读取时动态自动检查


    到底都有哪些数据结构？
        逻辑-程序流程==>>真值
        计数、数组索引、地址指针、数学运算==>>自然数/整数/有理数/多项式(根)？
        码流/序列化/存储/阅读:字节串、字符串
        表达运算==>>组合算子/函数？
        语法树/高阶反省==>>树
        ===
        串联:元组、数组、正则表达式序列/空间重叠？
        并联:枚举量/单选vs标志位集/集合/多选、多选/词典映射(任意数量键值)、单选/互斥并联(单键词典)

幂等 注定 不可逆！！
  差量作用
    幂等 则 不可逆
    不幂等 则 不稳定、不可移植？
  ===差量 分类
  幂等差量
    终态判定，不可逆
    终态=limit (f**i)(始态) {i<-0..+oo}
  锚定固址差量=补丁
    可逆，由于 输入 只有一个允许值，必然可逆
    始态检查: 始态 是否是 指定值
  可移植差量
    始态检查: 始态 是否 符合 假设
    * 可逆可移植差量
      始态检查 包含 可逆性检查
补丁打到哪里？
    不可控，不可预测，否则可在设计阶段隔离开来，成为 参数 或 底层支持库API
    跨函数跨对象跨模块，跨越一切人为预设边界，散落各处



一切都是数据
  说到底，编程语言 也不过是 在 试图简化 抽象语法树 的 表达
  没有 声明式语言，没有 命令式语言
    Haskell IO 显然就是这样
  ===
  一切都是数据，但 更重要的是 类型/约束，即 数据 的 接口
    在得到实际数据之前 便知道 可以怎么使用，通常 数据 的 实际值 有很多可能
    弱类型+强约束==>>泛用性
      弱类型==>>通用函数可接受
      强约束==>>静态价值更高，更有用
    抽取分享信息: 提供 多层次变换函数，不断 弱化类型，通过增强静态约束，尽量减少信息损失

Haskell show/read
  [[
  show 无需 显示类型信息，显示了也没用，动态按需加载模块？静态链接的程序...
  read 必须 知道 完整的类型信息
    ==>> 不支持 子类
    如：[C <: B][ls :: [B]][ls含C的对象] ==>> [(read :: str->[B]) 并不能读取C对象]
    其实 最外派生类/子类 相当于 单选互斥并联 的 一个分支
      最糟糕的是 分支空间开放，未来或第三方 子类 无法 读取
  ]]
  [[
  ===
  读取read:
    要么 类似 json，指定一个 固定数据类型集合，只使用它们作为通用数据结构。
      data_obj :: 固定类型(外部静态依赖)
      外部静态依赖 意外着 恒定不变，旧解析器永不过时
    要么 动态导入模块与类型，则 所谓数据实际上 变成脚本，并且 需要 运行环境 恰好安装了该模块 或 能够自动收缩下载安装。
      外部动态依赖(file_type+version+import_stmts) + data_obj
      外部动态依赖 意味着 易扩展(支持版本更新、支持第三方扩展)，版本更新则旧解析器(或 运行期支持库)会过时失效，导入外部资源则离线情形数据失效。
    要么 独立自足(standalone/self-contained)，离线内嵌 所有 类型定义
      datatype_def_stmts + data_obj
      但 既然 与 解析器 的 预编译固有静态类型 不匹配，就只能是 弱类型/运行期检查模拟动态强类型
    ==>> 其实都一样，即 读取需预先指定类型
      区别在于:
        第一种情况:自由构造数据，或有 预设的固定约束
        第二种情况:只保留极小固定格式，其他内容的解析 允许引用未来特性(允许语法扩展、允许语义扩展)、允许引用外部资源
        第三种情况:包含 自定义约束 读取时 检查
    ===无忧扩展:别名
      alias
      ===可疑扩展:模版、运算
  ]]
  [[
  ===
  序列化show:
    多态:
      show :: legal_cls_set, __class__ => base_cls -> str
        在 固定的类型集合 下，填充 __class__ 至 base_cls 的 差距
      show :: legal_cls2identifier, __class__ => base_cls -> str
      show :: identifier4cls -> base_cls -> str
      show :: identifier4cls -> base_cls -> tail/str -> str
      read :: legal_cls_set => str -> base_cls
      read :: identifier2legal_cls => str -> (__class__<:)base_cls
      read :: identifier2legal_cls_reader => str -> ((__class__<:)base_cls, tail/str)

  ]]
  [[
  ]]
static_cast:
  newtype/alias
  类型参数 的 角色role
  子类？
  函数输入输出 的 角色 相当不同
  ===
  隐含约束？
    若只是 自由构造的数据自然无妨
    但类似 Haskell.Set 之类，通过 私有化/不导出 构造器，控制 构造，进而 实现 排序 约束。
    static_cast 可能导致乱序、逆序


cache:
  自动缓存 deep-immutable-lazy-property:
  幂等？
  比如:hash
  比如:deep-frozen/burn 初始化结束，禁止修改，深度冻结


迭代:流访问 树访问
  StateMonad
    自定义语境context
      非全局状态global/static/thread_local/nonlocal
    隐式传递implicit
      非显式参数parameter
    跨对象
      业务无关/隔离
      非对象指针this/self
  StateMonad:
    position:
      流访问：
        索引号+各低层地址
      树访问：
        路径
        部分拆解树
        更新操作:新半树+已访问旧半树+未访问旧半树
  就地异常处理:
    how = StateMonad::yield_where
    ===
    哪里where:
      where = StateMonad::position
    怎么处理how:
      * 中止
      * 忽略/替换...


分层树有向无环图:
  ##==>>文件系统:文件hard_link泛化至 部分文件夹(否则只能 symbol_link)
  DAG节点 赋值一个 偏序类型值
    约束:
      子节点.偏序类型值 ~<=~ 父节点.偏序类型值
      [子节点.偏序类型值 ~==~ 父节点.偏序类型值] <==> [父子 为 同层文件夹，不可使用 hard_link，即 子节点 只有 唯一父节点，即 同层文件夹 构成 一片 森林]
      [子节点.偏序类型值 ~<~ 父节点.偏序类型值] <==> [父子 为 不同层文件夹，可使用 hard_link，即 子节点 可有多个 父节点，即 子节点 相当于 文件，父节点 相当于 文件夹]
  真副本:写时复制
  真引用:读写共享同一对象






端午节
  view /sdcard/0my_files/tmp/out4py/农历/农历.py.打印公历农历日期对照表.out.txt

对称卷积?:
  输入输出的近期历史/完整历史？:
    y[n] = f(y[n-1]..y[n-p],x[n-1]..x[n-q]; x[n])
    可逆:x[n] = g(y[n-1]..y[n-p],x[n-1]..x[n-q]; y[n])

view others/数学/编程/差量编程-可逆计算-声明式语言.txt



编译器:
  bootstrap? 目标平台是？虚拟机？基础部件是什么？约束假设-内存并行假设？
  全局命名-局部命名--跨语言跨层次命名映射
  shell? 命令行？控制台？
    实现了计算，但关键是：输入输出，人机交互，组件组合

充电宝 使用
  https://zhuanlan.zhihu.com/p/378421765
  https://zhuanlan.zhihu.com/p/162140252
  接口类型
  快充协议
  100元内 小米，品胜，京造，绿联，罗马仕
村里-65元-龙奇？

2+3+5+7=17
2+3+5+7+11=28




xxxxxx
https://www.microsoft.com/en-us/research/uploads/prod/2016/12/paxos-simple-Copy.pdf
  [分布式系统][共识协议]Paxos Made Simple.pdf
共识协议？
  其余宕机，突然 单机？
  连 参与者的数目 都不确定，如何 确认 大多数 的 数量？
    参与者 加入 作为一个事件 需要 申请批准，但 掉线宕机 却不需要。
  新参与者 试图申请加入，但其实只有自己？
  多个新参与者 独立起源初始化，多个系统 如何 互动 合并？
  连线中断，失联等效宕机，但 实际各自存活
    此后是 大陆隔离，独立演化，不再一致，没有共识
    还是 苦苦等待，停滞不前？


obj_cls_tower[obj, level, ...]
  level=0: as obj
  level=1: as cls<obj>
DONE:
  view ../../python3_src/seed/func_tools/recur5yield.py


CANCELLED:加密网页 第二版
  e ../../python3_src/自己的相关数据/on_working.txt

整理 通假字 生僻字
  view 0未整理复制粘贴文本/3未整理复制粘贴文本.txt
DONE: 整理 敏感词
  view /storage/emulated/0/Download/\[20220415]敏感词违禁词与形近字/unzip
  e /storage/emulated/0/Download/\[20220415]敏感词违禁词与形近字/parse_banned_words.py



歌曲下载:
  https://www.musicenc.com/?search
歌词 干了这杯酒 荣华富贵

下载:《汉语字典》相关
  https://www.52pojie.cn/thread-1203253-1-1.html
    https://pan.baidu.com/s/1qWBGsEg#/home/%2F/%2F
    view /sdcard/hugh.android/GuHanYu.apk

欧路词典文件格式



unicode 兼容字符 的 『原字符』属性名 是什么？

DONE:邓力群自述：十二个春秋
  view ++enc=gb18030 /sdcard/0my_files/book/邓力群自述：十二个春秋.txt


py merge folder



[设计]DAG:[
  类似 程序语句，靠 输入输出 参数 决定 拓扑偏序
  实际参数+虚拟参数
  实际节点+虚拟节点

  语句格式:
    『节点名:输入参数列表->输出参数列表』
      多个输入 以 实现AND
      多个输出 以 实现OR
      比如：节点X运行，当且仅当[(a&&b)||(c&&d)]

        A: ... -> a
        B: ... -> b
        C: ... -> c
        D: ... -> d
        $A_B: a b -> a_b__c_d
        $C_D: c d -> a_b__c_d
        X: a_b__c_d -> ...

]

[设计]可追踪性数据:[
  从哪来？输入/参考资料/底本
  做了哪些处理？步骤/生成数据的程序
  有怎样的要求/目的/约束/定义？规范/控制参数
  ===
  重点是：别人能否重现/复刻？别人能否判断所见数据符合规范声明与否？别人能否更正错误？别人能否推广输入范围？别人能否独立更新合并数据以使之不断进化壮大？
  ===
  比如：《说文解字》定义了『六书』，后人可以：
    + 依此类推，分类更多汉字
    + 判断《说文解字》自身的归类有没有出错
    + 根据『六书』归类的歧义程度，评价『六书』这个定义的好坏。
]


[设计]PTS lambda lang design:[
  数据 即是 函数 LocalRouter naive解释 类似 Lisp:
    (...)数据/函数
    [...]调用 #反身赋值 ls[:] = [...]
]

view ../../txt_phone/lots/NOTE/unicode/note4UnicodeStandard_14_0_annex/unicode_ver14_0_UAX31_UAX38摘要.txt
  抽取 Unihan 中感兴趣的属性？




古籍？下载？


DONE:更新 外部存储器:
  密码
  歌
DONE:github? 搞定上传？
  view others/app/termux/github/GitHub不再支持密码验证解决方案-ver2.txt
DONE:文本质量评估？继续？
  e 文本质量评估.txt

DONE:汉字笔划 --> 4bit/8bit


[
doing:
e ../../python3_src/自己的相关数据/on_working.txt
e script/collect_hz_components.py
拆字:
  拆否？
    天，矢/知，广，之，鬼...
    呆果男
    ===
    点 视为 附加物
      其他单笔，如果接触其他部件，也视为 附加物，不拆出
      土士王玉主义互母舟
    部件 并非 稳定，一个 代表 多个，不断精细化归类
      月:月，青字底，肉月
      日:日，子曰，冒头
      火:火，火左旁，火底，四点水，
      木:木，木左旁，木底(带钩？)
      耳:耳，戢，左立耳，右立耳，取，最，聽
    不同地区，字形不同，部件不同
    字形有特别约束的，不拆:
      二三土士未末曰冃日
    字形排版复杂的，不拆:
      兔鬼包
  命名:
    例子减去其余部分:
      打丁==>>提手
    近似叠加+所在例子:
      口木刺==>>朿 #不是『束/呆/杏』
]


]]]


[[TODO 整理一下
[[[[[[[
目录
  e ./0未整理复制粘贴文本/0未整理复制粘贴文本.txt
  e 0未整理复制粘贴文本/1未整理复制粘贴文本.txt
  e 0未整理复制粘贴文本/2未整理复制粘贴文本.txt

======================
======================
======================
e ./0未整理复制粘贴文本/0未整理复制粘贴文本.txt
  [[
有大伪 出处？
？乐浪郡？->取名
?下载《老子想尔注》
?下载《云笈七签》《雲笈七籤》
?《春秋策：先秦诸子与史记评述》 第2章 诸子天人论导源 『兹为图以明五者之相关如下：』下面没有了。
  看来真是『图』，而非『文本』
孙子吴起列传-马陵？桂陵？-间隔 十年？十三年？-田忌？田朌？-襄陵？大梁？
  田忌+田朌
？郑公克段？
  郑伯克段于鄢
？商圣白圭？
?秦伯让王？秦伯/仲雍/季历 三兄弟，之父-古公亶父，季历之子-姬昌
  泰伯 非 秦伯
  无情对: 庄子*让王
?天民 真人

？歌词:爱恨情仇 人憔悴
  https://www.musicenc.com/?search
  口是心非 - 黄静美/尚雅
    https://www.musicenc.com/article/398290.html
  口是心非 - 童珺
    https://www.musicenc.com/article/1147455.html
  口是心非 - 丫蛋蛋（马启涵）&崔铭嘉
    https://www.musicenc.com/article/34866.html
  口是心非-张雨生#竟然是 国语版？
  口是心非 粤语版
    http://www.shiyinren.com/kw/antiserver.kuwo.cn/anti.s?rid=MUSIC_148624884&response=res&format=mp3|aac&type=convert_url&br=128kmp3&agent=iPhone&callback=getlink&jpcallback=getlink.mp3
      难听！
     口是心非（粤语版） (cover: 绝版雪碧) - 壹聲憂傷
     http://www.shiyinren.com/kw/antiserver.kuwo.cn/anti.s?rid=MUSIC_182229646&response=res&format=mp3|aac&type=convert_url&br=128kmp3&agent=iPhone&callback=getlink&jpcallback=getlink.mp3
永乐:
  纪纲 死期 与 (刘永福xx 而是:) 邱福？战败于北漠，孰先孰后？
    #拖后腿？
    #土木堡？

古代每户人家平均几人？
?毕竟空 胜义有
无印subtitle?
账户vs帐户
  帐户account 但 账户 似乎也行
起讫 qi3 qi4 开始+终结
  起迄
?servo n 伺服机构，随动系统
？一家 白藕 青叶 红莲


麻将规则
  麻将玩法 学习 入门

grep 与 字符 的unicode 转义？
  DONE
  e others/app/termux/grep/grep_regex_pattern_howto_escape_char.txt
  e others/app/termux/shell_string_howto_escape_char.txt

]]

!mkdir 0未整理复制粘贴文本
!mv 0未整理复制粘贴文本.txt 0未整理复制粘贴文本/
view 0未整理复制粘贴文本/0未整理复制粘贴文本.txt
e 0未整理复制粘贴文本/1未整理复制粘贴文本.txt
[[

py unicode 库？
  py lib parse unihan ?

unicode annex 下载
  下载 unicode标准+annex

unicode标准的中文版翻译？
  Unicode®标准英文术语翻译对照表及部分术语汇释
  Unicode Standard 译介尝试（一）・文种名、符号名与块名
  统一码 百度百科
]]


[[
e 0未整理复制粘贴文本/2未整理复制粘贴文本.txt
四角号码，仓颉码
]]



[[
e 0未整理复制粘贴文本/3未整理复制粘贴文本.txt
  在下面 搜索:已下载
收集 敏感词/屏蔽词 大全
形近字 近似字 替换字 大全
罕见字、罕用字、生僻字 大全
收集 形近字/易错字/错别字/混淆字 大全
古今字 通假字 大全
]]



[[
e 0未整理复制粘贴文本/4未整理复制粘贴文本.txt
六书
  象形
  指事
  会意
代词
量词
象声词/拟声词
叹词
虚词
语气词
助词
副词
连词
介词
汉语语法相关名词
偏旁部首大全
]]



[[

e 0未整理复制粘贴文本/5未整理复制粘贴文本.txt
文选
  绕梁三日
  纪昌学射
  九方皋相马

]]



[[
e 0未整理复制粘贴文本/6未整理复制粘贴文本.txt
止戈为武
  趾-行动-炫耀？
  止-平息？

我的termux故障:
  DONE:
    #err: view others/app/termux/apt_update_fail__solved.txt
    view others/app/termux/apt_update__fail/apt_update_fail__solved_ver2.txt

欧路词典文件格式
]]

TODO
]]]]]]]




[[[失败:
  www待查 无印subtitle? 毕竟空 胜义有，外挂/外接/内嵌/内接/内联

  =======
  外挂/外接/内嵌/内接/内联
    attach 附加
    embed 嵌入
  外挂 cheating program 作弊器  ##-英语点津 - China Daily
    plug
    plugin



?下载《论语疏证》杨树达
  view /storage/72A2-151D/000edt/0my_files/book_txt/小说天堂txt/重命名/小说天堂txt-3/《论语疏证》.txt
    #子罕第九 诸后缺失
?下载 老子他说
  view  /storage/72A2-151D/000edt/0my_files/book_txt/小说天堂txt/重命名/小说天堂txt-6/《老子他说》.txt
    共26章，也只解说了 道德经 前26章，似乎不全
?下载《云笈七签》《雲笈七籤》
?下载《春秋策：先秦诸子与史记评述》 第2章 诸子天人论导源 『兹为图以明五者之相关如下：』下面没有了。
view ++enc=gbk /mnt/m_external_sd/000edt/0my_files/novel/《逍遥小书生》（校对版全本）作者：荣小荣.txt
  一百多章后，尾丢头前插
  第91章~第120章 完全缺失
    第91章 我家小姐有请
    第120章 如仪视察



婚礼新娘跑路，份子钱咋整？
外挂接口？外挂 翻译 ？attachment?

四书五经，大学
搜你妹-->轻心搜？安装失败

天气晚来秋
  语法问题？
  [[我试试:
唐代王维的《山居秋暝》
空山新雨后，天气晚来秋。
明月松间照，清泉石上流。
竹喧归浣女，莲动下渔舟。
随意春芳歇，王孙自可留。

空山，新雨后的空山；天气，？？的天气。
  ]]


download: cppreference.com
  termux
  update clang c++20
  [[

apt update
  !!失败！！
apt upgrade clang

已解决:
  #err: view others/app/termux/apt_update_fail__solved.txt
  view others/app/termux/apt_update__fail/apt_update_fail__solved_ver2.txt

e 0未整理复制粘贴文本/clang.txt
]]






小说下载？
  e others/book/小说下载进程.txt
    view  /sdcard/0my_files/tmp/list_book_novel_txt.txt
  @20220417
]]]
]]

[[ ]]
[[ ]]
[[ ]]
[[ ]]
TODO










[[
https://f-droid.en.softonic.com/android
F-Droid 闭式商店
下载了 UserLAnd
]]








[[
DONE:邓力群自述：十二个春秋
  https://github.com/hankinghu/literature-books/master/邓力群自述：十二个春秋.txt
    ===
    svn ls https://github.com/hankinghu/literature-books/trunk/
      ok！
    $ cd ~/1tmp/svn_
    $ svn export https://github.com/hankinghu/literature-books/trunk/邓力群自述：十二个春秋.txt
      A    邓力群自述：十二个春秋.txt
      Export complete.
    mv 邓力群自述：十二个春秋.txt /sdcard/0my_files/book/
  view ++enc=gb18030 /sdcard/0my_files/book/邓力群自述：十二个春秋.txt
]]




[[[
范畴论 教科书
可计算性
e others/book/category-theory.txt
e others/book/computability.txt
  view /mnt/m_external_sd/000edt/0my_files/book/math/category\ theory/
  view /mnt/m_external_sd/000edt/0my_files/book/math/computability/

[[
ls /mnt/m_external_sd/000edt/0my_files/book/math/category\ theory/
'Abstract and concrete categories--the joy of cats(1990ed+2004update-web)(Adamek).pdf'
'Axiomatic Method and Category Theory (2014)(Andrei Rodin).pdf'
'Basic Category Theory (2014)(Leinster).pdf'
'Categorical Logic and Type Theory (1999)(Bart Jacobs).djvu'
'Categories for the Working Mathematician (2ed)(1998)(Mac Lane).pdf'
'Category Theory (2ed)(2010)(Steve Awodey).pdf'
'Category Theory for Computing Science (1995-rev20200423)(Michael Barr).pdf'
'Category Theory for Programmers (20181021)(v1.0.0-0-g41e0fc3)(Milewski).pdf'
'Category Theory for Programmers (20190812)(v1.3.0-0-g6bb0bc0)(Milewski).pdf'
'Category Theory for Scientists (dynamic-20130514).pdf'
'Category Theory for Scientists (static-20130205).pdf'
'Category Theory in Context (2014)(Emily).pdf'
'Conceptual Mathematics--A First Introduction to Categories (2ed)(2009)(Lawvere).pdf'
'Introduction to CATEGORY THEORY and CATEGORICAL LOGIC (Thomas Streicher).pdf'
'Introduction to Categories and Categorical Logic (Samson Abramsky)(2006-2011).pdf'
'Introduction to Categories and Categorical Logic (Samson Abramsky).pdf'
'Topoi--The Categorial Analysis of Logic (1983)(Robert Goldblatt).pdf'
'范畴论(2006)(贺伟)(书签+去水印).pdf'
]]
[[
ls /mnt/m_external_sd/000edt/0my_files/book/math/computability/
'Higher-Order Computability (2015)(Longley).pdf'
'Hilbert Tenth Problem--Intro to Logic,Number Theory,Computability (2019)(Murty).pdf'
'The Foundations of Computability Theory (2ed)(2020)(Borut).pdf'
'The Incomputable--Journeys Beyond the Turing Barrier (2017)(Cooper).pdf'
]]
]]]

[[
方人

人道 注重 集体，个人 需时刻关注 与其他人的关系，自己在社会中的位置
修天道者，不关心别人，不与别人比较，没有奖状/排行榜之类的东西。


“天道远，人道迩”，谚语，字面意思是天道悠远、人道切近，[3]典出《左传·昭公十八年》子产所言：“天道远，人道迩，非所及也，何以知之？”[2]

释义
天道：上天的意思的体现。人道：人事。迩：近。[1] 鲁昭公十八年（前524年，郑定公六年），包括郑国在内的多个诸侯国发生火灾。据《左传》记载，此前一年（前525年，郑定公五年），郑国人裨灶就曾经预言火灾的发生，并要求用瓘、斝、玉瓒祭神，子产不答应。[6] [4] [5] 这次火灾后，裨灶又说：“不采纳我的意见，郑国还要发生火灾。”郑国人请求采纳他的意见，子产不同意。子太叔说：“宝物是用来保护百姓的。如果有了火灾，国家差不多会灭亡。可以挽救灭亡，您爱惜它干什么？”子产说：“天道悠远，人道切近，两不相关。如何由天道而知人道？灶哪里懂得天道？这个人的话多了，难道不会偶尔也说中的？”于是就不给。后来也没有再发生火灾。[2]
出处
《左传·昭公十八年》：裨灶曰：“不用吾言，郑又将火。”子产不可。子大叔曰：“宝，以保民也。若有火，国几亡。可以救亡，子何爱焉？”子产曰：“天道远，人道迩，非所及也，何以知之？灶焉知天道？是亦多言矣，岂不或信？”遂不与，亦不复火。[2]

]]








[[
]]
[[
]]
[[
]]
[[
]]
[[
]]
[[
]]
[[
]]
[[
]]
