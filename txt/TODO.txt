TODO:goto
writing:goto

177
0209
4285

view TODO3\[20220407].txt
view TODO3[20220407].txt
  search:
    #def__backup_cmds:goto
    #文本质量评估
    #TODO
    #DOING
    #writing
    #explain
    #？下载
    #待查
    #design
    #lang
    #意必固我

e ../../python3_src/自己的相关数据/on_working.txt
e ../../python3_src/自己的相关数据/on_working4grep.txt
e others/book/read.txt
  各书 的 阅读进度
e others/book/已读小说.txt
  读完 的 小说


view others/app/手机卡顿.txt
view others/app/手机自动关机重启掉电卡顿.txt
  [20220408] 占用空间大的APP的列表 以及 挑选出来的被删APP
  [[
[20220408]
  内部存储: 26.3 GB / 32.0 GB
  /sdcard/ 才 8.9G
  看来得删APP 共 15G
6.4G	/sdcard/0my_files
1.1G	/sdcard/autonavi 地图
353M	/sdcard/Android
186M	/sdcard/Download
156M	/sdcard/DraSticCN 模拟器
]]

[[[[[[[explain

[[#知轩藏书 之 评分
//mood: 心情，情绪
mood
[mo͞od]
NOUN

    a temporary state of mind or feeling:
    "he appeared to be in a very good mood about something"
    synonyms:
    frame of mind · state of mind · emotional state · humor · temper · disposition · spirit · tenor · vein

ADJECTIVE

    (especially of music) inducing or suggestive of a particular feeling or state of mind:
    "mood music" · "a Chekhov mood piece"
]]

[[
ETL tool
  Extract, transform, load
  In computing, extract, transform, load is a three-phase process where data is first extracted then transformed and finally loaded into an output data container.
  The data can be collated from one or more sources and it can also be outputted to one or more destinations.
  ETL processing is typically executed using software applications but it can be also be done manually by system operators.
  ETL software typically automates the entire process and can be run manually or on reoccurring schedules either as single jobs or aggregated into a batch of jobs.
]]

加噪，降噪
  降噪
    denoise
    noise reduction
    noise cancellation
  加入噪声:
    add noise
    #noised

]]]]]]]explain



命令行cmd:
wget:
  cd /sdcard/0my_files/tmp/wget_/
  !mkdir /sdcard/0my_files/tmp/wget_/zxcs.me/
  cd /sdcard/0my_files/tmp/wget_/zxcs.me/

本地备份:
  见:
  view TODO3[20220407].txt
    search:
      #def__backup_cmds:goto
上传github:
  g0,g1,g2,g3,g5,g6_,g7
    口令 改为 密钥: ghp_...
      g-h-p ??? git-hub-PAT(personal-access-token)
    edt-yxz-zzd

7z打包:
  view others/app/termux/tar_7zip.txt
  !mkdir  /sdcard/0my_files/tmp/out4zip/
  7z a  /sdcard/0my_files/tmp/out4zip/20220415敏感词.7z    /storage/emulated/0/Download/20220415敏感词/
  view ../../python3_src/raw_data/20220415敏感词.7z
    288K

git 下载命令
[[
cd /sdcard/0my_files/tmp/git_/
https://github.com/zhansliu/writemdict/
git clone https://github.com/zhansliu/writemdict.git

https://gitee.com/xstudio/badwords
git clone https://gitee.com/xstudio/badwords.git
]]


[[[[[
writing
已还:20220318 欠房东1元1毛
20220408周五测核酸，电信卡29元月租



大梦宗
  大梦谁先觉
  幽-天人无知-再醒-为道日损屡屡失败-建立大梦宗-探索无尽世界
  相互发现:大梦宗vs痕印宗，大战以至于为世人察觉两宗的存在。


人道-传承为重
  黄帝
  ===
  --有了传承，才能突破个人局限，拥有无限可能。纵使人人蠢笨如猪，千万年积累，照样飞天遁地。要有传承，必先有历史；要有历史，需有文字、风者。立巨头--『史官』。
  ===
  --希望从轻发落，虽则罪孽深重，但顾念其先祖披荆斩棘，开拓生存空间，累世承传，人族煊赫有赖此辈，乃人族支柱之一，未可轻易绝嗣。
  --是指恃强凌弱么？赏功罚过，功过不相抵。有功已赏，有过必惩。论罪当族灭，保护即是伤害，勿复求情。
  --人道，传承为重，余者皆轻。功过得失不过一时，众人高兴也好不满也罢，如声散落无痕。刑罚亦不过是维护人道传承的工具，岂能以众人好恶为准？已灭一族，再灭岂可？人道乌存？
  --罪罚不相当，莫非是纵容？杀人者人恒杀之，夷人族者人夷之。若不严惩，人人自危，争相效仿，流害无穷。
  --能禁绝否？我看不能。今日有此，昨日已有，来日再有。即使以灭族重惩，收效恐微，不如另议。


小说
  老妈曾是天下第一美人，是什么鬼设定？类似，老婆未婚妻之类，统统都是妓女？

  不知所起，不知所终
    没有主线任务中心思想
    随时断更太监




这是心病，不是残疾。消费品也分必需、奢侈。在乎你外形的人，不在乎你；在乎你的人，不在乎你的外貌。



侵占你家园，屠你父母乡亲，奴役你兄弟姐妹，压榨你剥削你，赏你口饭吃，你当感激涕零，不杀之恩也是恩，不要不识好歹，包吃包住，恩同再造。牢记仇恨的人不幸，懂得感恩的人过得更好，不要盯着过去，要和仇敌之后共创美好未来。

傻逼神拳:
  --作者不公，以愚凌贤！我不服！为何精明计较偏要倒霉吃亏，糊涂蠢蛋偏偏顺风顺水？我意不屈我志不改！纵晓作者偏心，偏要逆作而行！我不信，这世间万千作品你能一手遮天，一生成败不过一隅得失，尚贤尚愚岂能由你！

诸事太顺，屈打成招
  诸事顺心，当需警惕。
  有屈打成招，自以为意料之中。
  有处处高歌，自以为太平盛世。
    敌人糖衣炮弹掌控价值观提供便利搭桥牵线
    公仆阿谀奉承大放卫星
    亲友美言或是照顾脸面或是灯下黑或是行外话。
  没有发现问题，才是最大的问题。不知道自己自大自满，才是真的傲慢。

牺牲-多数暴政
  当少数派有异议，而现实只能一刀切选择一方时，会怎样？哪方更强，便会压倒对方。
  抗疫，围封。要么，放任自流，要么，处处严防日日死守。没有折中方案。
  --我年富力强，区区感冒何能惧我？
  --我有钱有势，花钱能治好的病也算病？
  --我怕麻烦怕不自由怕穷，就是不怕死，活着很累很难受，请不要再指手画脚！
  --死亡率怎么低，还没车祸让我惊心，轮到谁算谁倒霉，怕个球！
  --有人怕死，关我屁事！为何要强迫我为别人的癖好做出牺牲？人生有很多重要的事情，娱乐、闲逛、发呆，人生的意义就在于此！牺牲？谁自愿谁去，别代表我！



无数次，幻想拥有超凡力量之后，会如何造福人类，但最终难免大肆屠杀。终究无法相信和和美美，世上必有憎恨我的人，世上必有我不能容忍之人，无法想象没有纷争的世界。我亦不能相信隔离开便能各过各的再不相干，世界很大不能全知，世界很小无处立锥。

就事论事
  --就事论事，没必要针对人。某类错误，虽然不是人人会犯，但人人会犯这类那类的错。别人之道或许确实是很有问题，但谁也未必更高明。
  --针对人，是因为成本。粗筛的成本，公议的成本，专家组队深入考察的成本。


小孩子 频繁无端干嚎 似是不满又似要引起重视
我 经常没由来地疑虑怨怒，莫名其妙，想来大概是老妈带娃的方式不对。

云养猫、云玩家，云游天下？

敏感词违禁词:
  只是字与字的组合而已，能有什么力量？纸老虎都不怕的。

  为何对现实失望？一切都在高速变化，或者说迅速失效过时腐朽。感觉所谓真实的东西，没有一点价值。反而古籍经典，人们细心装裱，仿佛那些死去的言论虚拟的世界，才是永恒无价之宝。真实？虚妄？我都怀疑自己分没分清过。逝水无痕，没有一点点熟悉的感觉，世界是新的，我找不到位置放置手脚，我想我该死了，我，老了，再也提不起兴趣。




煎蛋评论:
  台下都是请来的演员
  没有演员
  演员在开会

最后一句话？
  大意是，你做好做坏，都和我没关系了，自己能承受就行。


小偷小摸，不一定是穷人，虽穷但有自己的活计及清楚相应的消费水平。反倒是，人前衣冠楚楚，虚荣心强，强撑门面，人有我也要有，一旦入不敷出，习惯又无法即时调整，就比较难说了。



质疑真理
  守护贞操--至少那里还是处女地。
  习以为常，赖为凭仗，视逾性命，...



梁祝
  --为什么魔改得面目全非？--悲剧不再是悲剧，人们无法产生共鸣，这是时代的进步！--也可能是退步。

]]]]]


[[[
TODO



CANCELLED:加密网页 第二版
  e ../../python3_src/自己的相关数据/on_working.txt

整理 通假字 生僻字
  view 0未整理复制粘贴文本/3未整理复制粘贴文本.txt
DONE: 整理 敏感词
  view /storage/emulated/0/Download/\[20220415]敏感词违禁词与形近字/unzip
  e /storage/emulated/0/Download/\[20220415]敏感词违禁词与形近字/parse_banned_words.py



歌曲下载:
  https://www.musicenc.com/?search
歌词 干了这杯酒 荣华富贵

下载:《汉语字典》相关
  https://www.52pojie.cn/thread-1203253-1-1.html
    https://pan.baidu.com/s/1qWBGsEg#/home/%2F/%2F
    view /sdcard/hugh.android/GuHanYu.apk

欧路词典文件格式



unicode 兼容字符 的 『原字符』属性名 是什么？
TODO:github 单文件下载，svn pip 替代版？
  邓力群自述：十二个春秋
  https://github.com/hankinghu/literature-books



py merge folder





[设计]可追踪性数据:[
  从哪来？输入/参考资料/底本
  做了哪些处理？步骤/生成数据的程序
  有怎样的要求/目的/约束/定义？规范/控制参数
  ===
  重点是：别人能否重现/复刻？别人能否判断所见数据符合规范声明与否？别人能否更正错误？别人能否推广输入范围？别人能否独立更新合并数据以使之不断进化壮大？
  ===
  比如：《说文解字》定义了『六书』，后人可以：
    + 依此类推，分类更多汉字
    + 判断《说文解字》自身的归类有没有出错
    + 根据『六书』归类的歧义程度，评价『六书』这个定义的好坏。
]


[设计]PTS lambda lang design:[
  数据 即是 函数 LocalRouter naive解释 类似 Lisp:
    (...)数据/函数
    [...]调用 #反身赋值 ls[:] = [...]
]

view ../../txt_phone/lots/NOTE/unicode/note4UnicodeStandard_14_0_annex/unicode_ver14_0_UAX31_UAX38摘要.txt
  抽取 Unihan 中感兴趣的属性？




古籍？下载？


DONE:更新 外部存储器:
  密码
  歌
DONE:github? 搞定上传？
  view others/app/termux/github/GitHub不再支持密码验证解决方案-ver2.txt
DONE:文本质量评估？继续？
  e 文本质量评估.txt

DONE:汉字笔划 --> 4bit/8bit


[
doing:
e ../../python3_src/自己的相关数据/on_working.txt
e script/collect_hz_components.py
拆字:
  拆否？
    天，矢/知，广，之，鬼...
    呆果男
    ===
    点 视为 附加物
      其他单笔，如果接触其他部件，也视为 附加物，不拆出
      土士王玉主义互母舟
    部件 并非 稳定，一个 代表 多个，不断精细化归类
      月:月，青字底，肉月
      日:日，子曰，冒头
      火:火，火左旁，火底，四点水，
      木:木，木左旁，木底(带钩？)
      耳:耳，戢，左立耳，右立耳，取，最，聽
    不同地区，字形不同，部件不同
    字形有特别约束的，不拆:
      二三土士未末曰冃日
    字形排版复杂的，不拆:
      兔鬼包
  命名:
    例子减去其余部分:
      打丁==>>提手
    近似叠加+所在例子:
      口木刺==>>朿 #不是『束/呆/杏』
]


]]]


[[TODO 整理一下
[[[[[[[
目录
  e ./0未整理复制粘贴文本/0未整理复制粘贴文本.txt
  e 0未整理复制粘贴文本/1未整理复制粘贴文本.txt
  e 0未整理复制粘贴文本/2未整理复制粘贴文本.txt

======================
======================
======================
e ./0未整理复制粘贴文本/0未整理复制粘贴文本.txt
  [[
有大伪 出处？
？乐浪郡？->取名
?下载《老子想尔注》
?下载《云笈七签》《雲笈七籤》
?《春秋策：先秦诸子与史记评述》 第2章 诸子天人论导源 『兹为图以明五者之相关如下：』下面没有了。
  看来真是『图』，而非『文本』
孙子吴起列传-马陵？桂陵？-间隔 十年？十三年？-田忌？田朌？-襄陵？大梁？
  田忌+田朌
？郑公克段？
  郑伯克段于鄢
？商圣白圭？
?秦伯让王？秦伯/仲雍/季历 三兄弟，之父-古公亶父，季历之子-姬昌
  泰伯 非 秦伯
  无情对: 庄子*让王
?天民 真人

？歌词:爱恨情仇 人憔悴
  https://www.musicenc.com/?search
  口是心非 - 黄静美/尚雅
    https://www.musicenc.com/article/398290.html
  口是心非 - 童珺
    https://www.musicenc.com/article/1147455.html
  口是心非 - 丫蛋蛋（马启涵）&崔铭嘉
    https://www.musicenc.com/article/34866.html
  口是心非-张雨生#竟然是 国语版？
  口是心非 粤语版
    http://www.shiyinren.com/kw/antiserver.kuwo.cn/anti.s?rid=MUSIC_148624884&response=res&format=mp3|aac&type=convert_url&br=128kmp3&agent=iPhone&callback=getlink&jpcallback=getlink.mp3
      难听！
     口是心非（粤语版） (cover: 绝版雪碧) - 壹聲憂傷
     http://www.shiyinren.com/kw/antiserver.kuwo.cn/anti.s?rid=MUSIC_182229646&response=res&format=mp3|aac&type=convert_url&br=128kmp3&agent=iPhone&callback=getlink&jpcallback=getlink.mp3
永乐:
  纪纲 死期 与 (刘永福xx 而是:) 邱福？战败于北漠，孰先孰后？
    #拖后腿？
    #土木堡？

古代每户人家平均几人？
?毕竟空 胜义有
无印subtitle?
账户vs帐户
  帐户account 但 账户 似乎也行
起讫 qi3 qi4 开始+终结
  起迄
?servo n 伺服机构，随动系统
？一家 白藕 青叶 红莲


麻将规则
  麻将玩法 学习 入门

grep 与 字符 的unicode 转义？
  DONE
  e others/app/termux/grep/grep_regex_pattern_howto_escape_char.txt
  e others/app/termux/shell_string_howto_escape_char.txt

]]

!mkdir 0未整理复制粘贴文本
!mv 0未整理复制粘贴文本.txt 0未整理复制粘贴文本/
view 0未整理复制粘贴文本/0未整理复制粘贴文本.txt
e 0未整理复制粘贴文本/1未整理复制粘贴文本.txt
[[

py unicode 库？
  py lib parse unihan ?

unicode annex 下载
  下载 unicode标准+annex

unicode标准的中文版翻译？
  Unicode®标准英文术语翻译对照表及部分术语汇释
  Unicode Standard 译介尝试（一）・文种名、符号名与块名
  统一码 百度百科
]]


[[
e 0未整理复制粘贴文本/2未整理复制粘贴文本.txt
四角号码，仓颉码
]]



[[
e 0未整理复制粘贴文本/3未整理复制粘贴文本.txt
  在下面 搜索:已下载
收集 敏感词/屏蔽词 大全
形近字 近似字 替换字 大全
罕见字、罕用字、生僻字 大全
收集 形近字/易错字/错别字/混淆字 大全
古今字 通假字 大全
]]



[[
e 0未整理复制粘贴文本/4未整理复制粘贴文本.txt
六书
  象形
  指事
  会意
代词
量词
象声词/拟声词
叹词
虚词
语气词
助词
副词
连词
介词
汉语语法相关名词
偏旁部首大全
]]



[[

e 0未整理复制粘贴文本/5未整理复制粘贴文本.txt
文选
  绕梁三日
  纪昌学射
  九方皋相马

]]



[[
e 0未整理复制粘贴文本/6未整理复制粘贴文本.txt
止戈为武
  趾-行动-炫耀？
  止-平息？

我的termux故障:
  DONE:
    view others/app/termux/apt_update_fail__solved.txt

欧路词典文件格式
]]

TODO
]]]]]]]




[[[失败:
  www待查 无印subtitle? 毕竟空 胜义有，外挂/外接/内嵌/内接/内联

  =======
  外挂/外接/内嵌/内接/内联
    attach 附加
    embed 嵌入
  外挂 cheating program 作弊器  ##-英语点津 - China Daily
    plug
    plugin



?下载《论语疏证》杨树达
  view /storage/72A2-151D/000edt/0my_files/book_txt/小说天堂txt/重命名/小说天堂txt-3/《论语疏证》.txt
    #子罕第九 诸后缺失
?下载 老子他说
  view  /storage/72A2-151D/000edt/0my_files/book_txt/小说天堂txt/重命名/小说天堂txt-6/《老子他说》.txt
    共26章，也只解说了 道德经 前26章，似乎不全
?下载《云笈七签》《雲笈七籤》
?下载《春秋策：先秦诸子与史记评述》 第2章 诸子天人论导源 『兹为图以明五者之相关如下：』下面没有了。
view ++enc=gbk /mnt/m_external_sd/000edt/0my_files/novel/《逍遥小书生》（校对版全本）作者：荣小荣.txt
  一百多章后，尾丢头前插
  第91章~第120章 完全缺失
    第91章 我家小姐有请
    第120章 如仪视察



婚礼新娘跑路，份子钱咋整？
外挂接口？外挂 翻译 ？attachment?

四书五经，大学
搜你妹-->轻心搜？安装失败

天气晚来秋
  语法问题？
  [[我试试:
唐代王维的《山居秋暝》
空山新雨后，天气晚来秋。
明月松间照，清泉石上流。
竹喧归浣女，莲动下渔舟。
随意春芳歇，王孙自可留。

空山，新雨后的空山；天气，？？的天气。
  ]]


download: cppreference.com
  termux
  update clang c++20
  [[

apt update
  !!失败！！
apt-get update
  !!失败！！
apt list
apt upgrade clang

不知道怎么回事。

已解决:
  view others/app/termux/apt_update_fail__solved.txt
  #详见下面『我的步骤』
  #
  摘要如下：[[[
    #旧库另命名
    #
    mv /data/data/com.termux/files/usr/etc/apt/sources.list.d/  /data/data/com.termux/files/usr/etc/apt/sources.list.d[old]
    mkdir /data/data/com.termux/files/usr/etc/apt/sources.list.d/

    #删失效库:https://dl.bintray.com/
    #
    pkg remove game-repo
    pkg remove science-repo

    #另存 主仓库 原配置: deb https://termux.net stable main
    #
    mv /data/data/com.termux/files/usr/etc/apt/sources.list /data/data/com.termux/files/usr/etc/apt/sources.list[old]

    #更改 主仓库
    #   主仓库链接 来自 脚本: https://github.com/termux/termux-packages/blob/master/packages/termux-tools/termux-change-repo
    #
    echo $'# The main termux repository:\ndeb https://packages-cf.termux.org/apt/termux-main stable main\n' > /data/data/com.termux/files/usr/etc/apt/sources.list

  ]]]
]]






小说下载？
  e others/book/小说下载进程.txt
    view  /sdcard/0my_files/tmp/list_book_novel_txt.txt
  @20220417
]]]
]]

[[ ]]
[[ ]]
[[ ]]
[[ ]]
TODO










[[
https://f-droid.en.softonic.com/android
F-Droid 闭式商店
下载了 UserLAnd
]]









[[[
https://github.com/hankinghu/literature-books
  如何 单文件下载:『邓力群自述：十二个春秋』？
  https://github.com/hankinghu/literature-books/blob/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt
    path:
      邓力群自述：十二个春秋.txt
    permalink:
      https://github.com/hankinghu/literature-books/blob/864c0e77c64fba4ce8538282ecaa4af2baec9d69/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt
    download:
      https://github.com/hankinghu/literature-books/raw/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt
      wget https://github.com/hankinghu/literature-books/raw/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt
          --> https://raw.githubusercontent.com/hankinghu/literature-books/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt
          --> Connecting to raw.githubusercontent.com|::|:443... failed: Connection refused.

    view-raw:
      https://github.com/hankinghu/literature-books/blob/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt?raw=true
      wget https://github.com/hankinghu/literature-books/blob/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt?raw=true
          #结果同上！
          --> https://raw.githubusercontent.com/hankinghu/literature-books/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt
          --> Connecting to raw.githubusercontent.com|::|:443... failed: Connection refused.
[
Permalink
A permalink or permanent link is a URL that is intended to remain unchanged for many years into the future, yielding a hyperlink that is less susceptible to link rot. Permalinks are often rendered simply, that is, as clean URLs, to be easier to type and remember. Most modern blogging and content-syndication software systems support such links. Sometimes URL shortening is used to create them.
]

  cd /sdcard/0my_files/tmp/wget_/
  wget https://github.com/hankinghu/literature-books/raw/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt
  wget -L https://raw.githubusercontent.com/hankinghu/literature-books/master/%E9%82%93%E5%8A%9B%E7%BE%A4%E8%87%AA%E8%BF%B0%EF%BC%9A%E5%8D%81%E4%BA%8C%E4%B8%AA%E6%98%A5%E7%A7%8B.txt
  wget -L https://raw.githubusercontent.com/hankinghu/literature-books/master/邓力群自述：十二个春秋.txt
  wget -L https://raw.githubusercontent.com/hankinghu/literature-books/blob/master/邓力群自述：十二个春秋.txt
https://www.cloudsavvyit.com/14656/how-to-download-single-files-from-a-github-repository/
wget https://raw.githubusercontent.com/username/repository/branch/path/filename.md

https://careerkarma.com/blog/git-download-a-single-file-from-github/#:~:text=To%20download%20an%20individual%20file%20from%20a%20repository%2C,the%20README.md%20file%20in%20a%20repository%20called%20ck-git.
  https://raw.githubusercontent.com/Career-Karma-Tutorials/ck-git/master/README.md


https://raw.githubusercontent.com/Career-Karma-Tutorials/ck-git/master/README.md

This URL follows a standard format:

<owner-name>/<repo-name>/<branch>/<file>



[[ ]]
[[ ]]
[[
  * DownGit
    https://downgit.github.io/
  * GitZip online tool
    https://kinolien.github.io/gitzip/
  * svn
    svn ls <repo>/trunk/folder
    svn export <repo>/trunk/<folder>
    [[svn-subversion
install subversion on linux
https://www.rosehosting.com/blog/getting-started-with-svn-on-linux/#:~:text=1%20SVN%20Linux%20%7C%20Getting%20Started%20With%20Subversion,Create%20a%20new%20directory%20for%20your%20project%2Fapplication%2Fwebsite%20files%3A

    ]]
  * git
    [[
  #https://github.community/t5/How-to-use-Git-and-GitHub/How-can-I-download-a-specific-folder-from-a-GitHub-repo/m-p/88#M20

    Create a directory

     mkdir github-project-name 
     cd github-project-name

    Set up a git repo

     git init
     git remote add origin <URL-link of the repo>

    Configure your git-repo to download only specific directories

     git config core.sparseCheckout true # enable this

    Set the folder you like to be downloaded, e.g. you only want to download the doc directory from https://github.com/project-tree/master/doc

     echo "/absolute/path/to/folder" > .git/info/sparse-checkout 

    E.g. if you only want to download the doc directory from your master repo https://github.com/project-tree/master/doc, then your command is echo "doc" > .git/info/sparse-checkout.

    Download your repo as usual

     git pull origin master


    ]]
[[
https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository/52269934#52269934
见下面:这里这里这里这里这里这里这里这里这里

Stack Overflow

    Products

    Log in
    Sign up

How do I clone a subdirectory only of a Git repository?
Ask Question
Asked 13 years, 1 month ago
Modified 9 days ago
Viewed 1.1m times
1746

I have my Git repository which, at the root, has two sub directories:

/finisht
/static

When this was in SVN, /finisht was checked out in one place, while /static was checked out elsewhere, like so:

svn co svn+ssh://admin@domain.com/home/admin/repos/finisht/static static

Is there a way to do this with Git?
git
repository
subdirectory
git-clone
sparse-checkout
Share
Improve this question
edited Nov 30, 2020 at 15:55
user avatar
Liam
25k2727 gold badges108108 silver badges171171 bronze badges
asked Mar 1, 2009 at 16:46
user avatar
Nick Sergeant
32.1k1212 gold badges3535 silver badges4444 bronze badges

    17
    possible duplicate of Checkout subdirectories in Git? – 
    Joachim Breitner
    Jul 4, 2013 at 8:43
    2
    For a 2014's user, what the git clone simplest command?? I used this simple answer. If there are something more simple, please comment – 
    Peter Krauss
    Nov 1, 2014 at 12:00 

    1
    For those trying to clone the contents of the repository (not creating the root folder), this is a very easy solution: stackoverflow.com/questions/6224626/… – 
    Marc
    Mar 29, 2015 at 12:38
    1
    @JoachimBreitner: That question is about checking out subdirectories in Git (which is easy), whereas this question is about cloning subdirectories in Git (which is impossible). – 
    Jörg W Mittag
    Aug 31, 2018 at 14:48
    2
    @NickSergeant: As of Git 2.19, released 3 weeks ago, this is finally possible, as can be seen in this answer: stackoverflow.com/a/52269934/2988 Consider accepting that one now. Note: in Git 2.19, only client-side support is implemented, server-side support is still missing, so it only works when cloning local repositories. Also note that large Git hosters, e.g. GitHub don't actually use the Git server, they use their own implementation, so even if support shows up in the Git server, it does not automatically mean that it works on Git hosters. (OTOH, they could implement it faster.) – 
    Jörg W Mittag
    Nov 4, 2018 at 9:22

Show 5 more comments
26 Answers
Sorted by:
Reset to default

Help us improve our answers.

Are the answers below sorted in a way that puts the best answer at or near the top?
[[[这里这里这里这里这里这里这里这里这里
[[
944

git clone --filter from git 2.19 now works on GitHub (tested 2021-01-14, git 2.30.0)

This option was added together with an update to the remote protocol, and it truly prevents objects from being downloaded from the server.

E.g., to clone only objects required for d1 of this minimal test repository: https://github.com/cirosantilli/test-git-partial-clone I can do:

git clone \
  --depth 1  \
  --filter=blob:none  \
  --sparse \
  https://github.com/cirosantilli/test-git-partial-clone \
;
cd test-git-partial-clone
git sparse-checkout set d1

Here's a less minimal and more realistic version at https://github.com/cirosantilli/test-git-partial-clone-big-small

git clone \
  --depth 1  \
  --filter=blob:none  \
  --sparse \
  https://github.com/cirosantilli/test-git-partial-clone-big-small \
;
cd test-git-partial-clone-big-small
git sparse-checkout set small

That repository contains:

    a big directory with 10 10MB files
    a small directory with 1000 files of size one byte

All contents are pseudo-random and therefore incompressible.

Clone times on my 36.4 Mbps internet:

    full: 24s
    partial: "instantaneous"

The sparse-checkout part is also needed unfortunately. You can also only download certain files with the much more understandable:

git clone \
  --depth 1  \
  --filter=blob:none  \
  --no-checkout \
  https://github.com/cirosantilli/test-git-partial-clone \
;
cd test-git-partial-clone
git checkout master -- d1

but that method for some reason downloads files one by one very slowly, making it unusable unless you have very few files in the directory.

Analysis of the objects in the minimal repository

The clone command obtains only:

    a single commit object with the tip of the master branch
    all 4 tree objects of the repository:
        toplevel directory of commit
        the the three directories d1, d2, master

Then, the git sparse-checkout set command fetches only the missing blobs (files) from the server:

    d1/a
    d1/b

Even better, later on GitHub will likely start supporting:

  --filter=blob:none \
  --filter=tree:0 \

where --filter=tree:0 from Git 2.20 will prevent the unnecessary clone fetch of all tree objects, and allow it to be deferred to checkout. But on my 2020-09-18 test that fails with:

fatal: invalid filter-spec 'combine:blob:none+tree:0'

presumably because the --filter=combine: composite filter (added in Git 2.24, implied by multiple --filter) is not yet implemented.

I observed which objects were fetched with:

git verify-pack -v .git/objects/pack/*.pack

as mentioned at: How to list ALL git objects in the database? It does not give me a super clear indication of what each object is exactly, but it does say the type of each object (commit, tree, blob), and since there are so few objects in that minimal repo, I can unambiguously deduce what each object is.

git rev-list --objects --all did produce clearer output with paths for tree/blobs, but it unfortunately fetches some objects when I run it, which makes it hard to determine what was fetched when, let me know if anyone has a better command.

TODO find GitHub announcement that saying when they started supporting it. https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/ from 2020-01-17 already mentions --filter blob:none.

git sparse-checkout

I think this command is meant to manage a settings file that says "I only care about these subtrees" so that future commands will only affect those subtrees. But it is a bit hard to be sure because the current documentation is a bit... sparse ;-)

It does not, by itself, prevent the fetching of blobs.

If this understanding is correct, then this would be a good complement to git clone --filter described above, as it would prevent unintentional fetching of more objects if you intend to do git operations in the partial cloned repo.

When I tried on Git 2.25.1:

git clone \
  --depth 1 \
  --filter=blob:none \
  --no-checkout \
  https://github.com/cirosantilli/test-git-partial-clone \
;
cd test-git-partial-clone
git sparse-checkout init

it didn't work because the init actually fetched all objects.

However, in Git 2.28 it didn't fetch the objects as desired. But then if I do:

git sparse-checkout set d1

d1 is not fetched and checked out, even though this explicitly says it should: https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/#sparse-checkout-and-partial-clones With disclaimer:

    Keep an eye out for the partial clone feature to become generally available[1].

    [1]: GitHub is still evaluating this feature internally while it’s enabled on a select few repositories (including the example used in this post). As the feature stabilizes and matures, we’ll keep you updated with its progress.

So yeah, it's just too hard to be certain at the moment, thanks in part to the joys of GitHub being closed source. But let's keep an eye on it.

Command breakdown

The server should be configured with:

git config --local uploadpack.allowfilter 1
git config --local uploadpack.allowanysha1inwant 1

Command breakdown:

    --filter=blob:none skips all blobs, but still fetches all tree objects

    --filter=tree:0 skips the unneeded trees: https://www.spinics.net/lists/git/msg342006.html

    --depth 1 already implies --single-branch, see also: How do I clone a single branch in Git?

    file://$(path) is required to overcome git clone protocol shenanigans: How to shallow clone a local git repository with a relative path?

    --filter=combine:FILTER1+FILTER2 is the syntax to use multiple filters at once, trying to pass --filter for some reason fails with: "multiple filter-specs cannot be combined". This was added in Git 2.24 at e987df5fe62b8b29be4cdcdeb3704681ada2b29e "list-objects-filter: implement composite filters"

    Edit: on Git 2.28, I experimentally see that --filter=FILTER1 --filter FILTER2 also has the same effect, since GitHub does not implement combine: yet as of 2020-09-18 and complains fatal: invalid filter-spec 'combine:blob:none+tree:0'. TODO introduced in which version?

The format of --filter is documented on man git-rev-list.

Docs on Git tree:

    https://github.com/git/git/blob/v2.19.0/Documentation/technical/partial-clone.txt
    https://github.com/git/git/blob/v2.19.0/Documentation/rev-list-options.txt#L720
    https://github.com/git/git/blob/v2.19.0/t/t5616-partial-clone.sh

Test it out locally

The following script reproducibly generates the https://github.com/cirosantilli/test-git-partial-clone repository locally, does a local clone, and observes what was cloned:

#!/usr/bin/env bash
set -eu

list-objects() (
  git rev-list --all --objects
  echo "master commit SHA: $(git log -1 --format="%H")"
  echo "mybranch commit SHA: $(git log -1 --format="%H")"
  git ls-tree master
  git ls-tree mybranch | grep mybranch
  git ls-tree master~ | grep root
)

# Reproducibility.
export GIT_COMMITTER_NAME='a'
export GIT_COMMITTER_EMAIL='a'
export GIT_AUTHOR_NAME='a'
export GIT_AUTHOR_EMAIL='a'
export GIT_COMMITTER_DATE='2000-01-01T00:00:00+0000'
export GIT_AUTHOR_DATE='2000-01-01T00:00:00+0000'

rm -rf server_repo local_repo
mkdir server_repo
cd server_repo

# Create repo.
git init --quiet
git config --local uploadpack.allowfilter 1
git config --local uploadpack.allowanysha1inwant 1

# First commit.
# Directories present in all branches.
mkdir d1 d2
printf 'd1/a' > ./d1/a
printf 'd1/b' > ./d1/b
printf 'd2/a' > ./d2/a
printf 'd2/b' > ./d2/b
# Present only in root.
mkdir 'root'
printf 'root' > ./root/root
git add .
git commit -m 'root' --quiet

# Second commit only on master.
git rm --quiet -r ./root
mkdir 'master'
printf 'master' > ./master/master
git add .
git commit -m 'master commit' --quiet

# Second commit only on mybranch.
git checkout -b mybranch --quiet master~
git rm --quiet -r ./root
mkdir 'mybranch'
printf 'mybranch' > ./mybranch/mybranch
git add .
git commit -m 'mybranch commit' --quiet

echo "# List and identify all objects"
list-objects
echo

# Restore master.
git checkout --quiet master
cd ..

# Clone. Don't checkout for now, only .git/ dir.
git clone --depth 1 --quiet --no-checkout --filter=blob:none "file://$(pwd)/server_repo" local_repo
cd local_repo

# List missing objects from master.
echo "# Missing objects after --no-checkout"
git rev-list --all --quiet --objects --missing=print
echo

echo "# Git checkout fails without internet"
mv ../server_repo ../server_repo.off
! git checkout master
echo

echo "# Git checkout fetches the missing directory from internet"
mv ../server_repo.off ../server_repo
git checkout master -- d1/
echo

echo "# Missing objects after checking out d1"
git rev-list --all --quiet --objects --missing=print

GitHub upstream.

Output in Git v2.19.0:

# List and identify all objects
c6fcdfaf2b1462f809aecdad83a186eeec00f9c1
fc5e97944480982cfc180a6d6634699921ee63ec
7251a83be9a03161acde7b71a8fda9be19f47128
62d67bce3c672fe2b9065f372726a11e57bade7e
b64bf435a3e54c5208a1b70b7bcb0fc627463a75 d1
308150e8fddde043f3dbbb8573abb6af1df96e63 d1/a
f70a17f51b7b30fec48a32e4f19ac15e261fd1a4 d1/b
84de03c312dc741d0f2a66df7b2f168d823e122a d2
0975df9b39e23c15f63db194df7f45c76528bccb d2/a
41484c13520fcbb6e7243a26fdb1fc9405c08520 d2/b
7d5230379e4652f1b1da7ed1e78e0b8253e03ba3 master
8b25206ff90e9432f6f1a8600f87a7bd695a24af master/master
ef29f15c9a7c5417944cc09711b6a9ee51b01d89
19f7a4ca4a038aff89d803f017f76d2b66063043 mybranch
1b671b190e293aa091239b8b5e8c149411d00523 mybranch/mybranch
c3760bb1a0ece87cdbaf9a563c77a45e30a4e30e
a0234da53ec608b54813b4271fbf00ba5318b99f root
93ca1422a8da0a9effc465eccbcb17e23015542d root/root
master commit SHA: fc5e97944480982cfc180a6d6634699921ee63ec
mybranch commit SHA: fc5e97944480982cfc180a6d6634699921ee63ec
040000 tree b64bf435a3e54c5208a1b70b7bcb0fc627463a75    d1
040000 tree 84de03c312dc741d0f2a66df7b2f168d823e122a    d2
040000 tree 7d5230379e4652f1b1da7ed1e78e0b8253e03ba3    master
040000 tree 19f7a4ca4a038aff89d803f017f76d2b66063043    mybranch
040000 tree a0234da53ec608b54813b4271fbf00ba5318b99f    root

# Missing objects after --no-checkout
?f70a17f51b7b30fec48a32e4f19ac15e261fd1a4
?8b25206ff90e9432f6f1a8600f87a7bd695a24af
?41484c13520fcbb6e7243a26fdb1fc9405c08520
?0975df9b39e23c15f63db194df7f45c76528bccb
?308150e8fddde043f3dbbb8573abb6af1df96e63

# Git checkout fails without internet
fatal: '/home/ciro/bak/git/test-git-web-interface/other-test-repos/partial-clone.tmp/server_repo' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

# Git checkout fetches the missing directory from internet
remote: Enumerating objects: 1, done.
remote: Counting objects: 100% (1/1), done.
remote: Total 1 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1/1), 45 bytes | 45.00 KiB/s, done.
remote: Enumerating objects: 1, done.
remote: Counting objects: 100% (1/1), done.
remote: Total 1 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1/1), 45 bytes | 45.00 KiB/s, done.

# Missing objects after checking out d1
?8b25206ff90e9432f6f1a8600f87a7bd695a24af
?41484c13520fcbb6e7243a26fdb1fc9405c08520
?0975df9b39e23c15f63db194df7f45c76528bccb

Conclusions: all blobs from outside of d1/ are missing. E.g. 0975df9b39e23c15f63db194df7f45c76528bccb, which is d2/b is not there after checking out d1/a.

Note that root/root and mybranch/mybranch are also missing, but --depth 1 hides that from the list of missing files. If you remove --depth 1, then they show on the list of missing files.

I have a dream

This feature could revolutionize Git.

Imagine having all the code base of your enterprise in a single repo without ugly third-party tools like repo.

Imagine storing huge blobs directly in the repo without any ugly third party extensions.

Imagine if GitHub would allow per file / directory metadata like stars and permissions, so you can store all your personal stuff under a single repo.

Imagine if submodules were treated exactly like regular directories: just request a tree SHA, and a DNS-like mechanism resolves your request, first looking on your local ~/.git, then first to closer servers (your enterprise's mirror / cache) and ending up on GitHub.
Share
Improve this answer
edited Sep 15, 2021 at 10:37
user avatar
Ramon Crehuet
3,2292020 silver badges3636 bronze badges
answered Sep 11, 2018 at 6:32
user avatar
Ciro Santilli Путлер Капут 六四事
298k8585 gold badges10831083 silver badges877877 bronze badges

]]
    3
    Sadly, no luck with the macOS git version. fatal: invalid filter-spec 'combine:blob:none+tree:0' Thanks anyway! Maybe it will work with newer versions. – 
    muru
    Dec 6, 2019 at 7:51
    2
    This fails when trying it on Windows 10 using GIT 2.24.1 (throws tons of "unable to read sha1 file of.." + "Unlink of file xxx failed."). Worked as a charm with same version on Linux. – 
    Oyvind
    Dec 16, 2019 at 11:40 

3
@Ciro Santilli This still fails with "unable to read sha1 file of..." in git version 2.26.1.windows.1. I opened a bug report: github.com/git-for-windows/git/issues/2590 – 
nharrer
Apr 18, 2020 at 16:43
2
@CiroSantilli郝海东冠状病六四事件法轮功 some/path is a directory and git checkout master -- some/path correctly clones only files in that directory and its subdirs - but it does it one by one with a message like: remote: Enumerating objects: 1, done. remote: Counting objects: 100% (1/1), done. remote: Total 1 (delta 0), reused 1 (delta 0), pack-reused 0 Receiving objects: 100% (1/1), 51 bytes | 51.00 KiB/s, done. These 4 lines repeated for each of the 90 files in the dir and its subdirs (this is on git version 2.24.3 (Apple Git-128)) – 
Faboor
Jan 6, 2021 at 11:33

    3
    @CiroSantilli新疆棉花TRUMPBANBAD - you've already found the solution! Just remove the --cone line and it will work fine. In your test repository try creating an additional file at the top level. If you follow your instructions, then you'll also get a copy of that file as well as the directory you want. Remove the 'git sparse-checkout init --cone' but follow all your other instructions, and you'll just get the directory tree you want. I'm not quite sure in what circumstances you'd want to use --cone! – 
    Mike Moreton
    Apr 13, 2021 at 11:57

Show 16 more comments
]]]这里这里这里这里这里这里这里这里这里

[[[这里这里这里这里这里这里这里这里这里
[[
1702

What you are trying to do is called a sparse checkout, and that feature was added in git 1.7.0 (Feb. 2012). The steps to do a sparse clone are as follows:

mkdir <repo>
cd <repo>
git init
git remote add -f origin <url>

This creates an empty repository with your remote, and fetches all objects but doesn't check them out. Then do:

git config core.sparseCheckout true

Now you need to define which files/folders you want to actually check out. This is done by listing them in .git/info/sparse-checkout, eg:

echo "some/dir/" >> .git/info/sparse-checkout
echo "another/sub/tree" >> .git/info/sparse-checkout

Last but not least, update your empty repo with the state from the remote:

git pull origin master

You will now have files "checked out" for some/dir and another/sub/tree on your file system (with those paths still), and no other paths present.

You might want to have a look at the extended tutorial and you should probably read the official documentation for sparse checkout and read-tree.

As a function:

function git_sparse_clone() (
  rurl="$1" localdir="$2" && shift 2

  mkdir -p "$localdir"
  cd "$localdir"

  git init
  git remote add -f origin "$rurl"

  git config core.sparseCheckout true

  # Loops over remaining args
  for i; do
    echo "$i" >> .git/info/sparse-checkout
  done

  git pull origin master
)

Usage:

git_sparse_clone "http://github.com/tj/n" "./local/location" "/bin"

Note that this will still download the whole repository from the server – only the checkout is reduced in size. At the moment it is not possible to clone only a single directory. But if you don't need the history of the repository, you can at least save on bandwidth by creating a shallow clone. See udondan's answer below for information on how to combine shallow clone and sparse checkout.

As of git 2.25.0 (Jan 2020) an experimental sparse-checkout command is added in git:

git sparse-checkout init
# same as: 
# git config core.sparseCheckout true

git sparse-checkout set "A/B"
# same as:
# echo "A/B" >> .git/info/sparse-checkout

git sparse-checkout list
# same as:
# cat .git/info/sparse-checkout

Share
Improve this answer
edited Aug 10, 2021 at 7:20
user avatar
jskroch
31344 silver badges88 bronze badges
answered Dec 6, 2012 at 7:37
user avatar
Chronial
59.5k1313 gold badges8181 silver badges8787 bronze badges
]]
    17
    on Apple the '-f' perimeter does not work. just do git remote add origin <url> without -f – 
    Anno2001
    Feb 17, 2013 at 10:58 

    146
    It is an improvement but still needs to download and store a full copy of the remote repository in origin, which one might like to avoid at all if he is interested only in portions of the codebase (or if there is documentation subfolders as in my case) – 
    a1an
    Jun 13, 2013 at 12:42
    59
    Is there a way to clone desired directory contents (not directory itself) right into my repository? For example I want clone contents of https://github.com/Umkus/nginx-boilerplate/tree/master/src right into /etc/nginx – 
    mac
    Apr 10, 2014 at 5:40
    26
    @Chronial, @ErikE: you're both right / wrong :P The git remote add command does not imply a fetch, but git remote add -f, as used here, does! That's what the -f means. – 
    ntc2
    May 16, 2014 at 0:02
    24
    Using this and --depth=1 I cloned Chromium Devtools in 338 MB instead of 4.9 GB of full Blink source + history. Excellent. – 
    Rudie
    Oct 22, 2014 at 19:26

Show 25 more comments
]]]这里这里这里这里这里这里这里这里这里


190

For other users who just want to download a file/folder from github, simply use:

svn export <repo>/trunk/<folder>

e.g.

svn export https://github.com/lodash/lodash.com/trunk/docs

(yes, that's svn here. apparently in 2016 you still need svn to simply download some github files)

Courtesy: Download a single folder or directory from a GitHub repo

Important - Make sure you update the github URL and replace /tree/master/ with '/trunk/'.

As bash script:

git-download(){
    folder=${@/tree\/master/trunk}
    folder=${folder/blob\/master/trunk}
    svn export $folder
}

Note This method downloads a folder, does not clone/checkout it. You can't push changes back to the repository. On the other hand - this results in smaller download compared to sparse checkout or shallow checkout.
Share
Improve this answer
edited Jun 18, 2018 at 11:32
user avatar
Amit G
2,15322 gold badges2121 silver badges4343 bronze badges
answered Sep 4, 2016 at 13:02
user avatar
Anona112
3,52444 gold badges1919 silver badges3030 bronze badges

    12
    only version which worked for me with github. The git commands checked out >10k files, the svn export only the 700 i wanted. Thanks! – 
    Christopher Lörken
    Feb 1, 2017 at 18:19
    4
    Tried doing this with https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/trunk/udacity but got svn: E170000: URL 'https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/trunk/udacity' doesn't exist error :( – 
    zthomas.nc
    Feb 19, 2017 at 21:55 

    11
    @zthomas.nc You need to remove the 'trunk' preceding udacity, and replace /tree/master/ with /trunk/ instead. – 
    Speedy
    Mar 22, 2017 at 17:01
    2
    This command was the one that worked for me! I just wanted to get a copy of a file from a repo so I could modify it locally. Good old SVN to the rescue! – 
    Michael J
    Jun 2, 2017 at 0:32
    3
    it works, but seems slow. takes a bit to start and then the files roll by relatively slowly – 
    Aryeh Beitz
    Dec 24, 2017 at 10:15

Show 7 more comments
437

You can combine the sparse checkout and the shallow clone features. The shallow clone cuts off the history and the sparse checkout only pulls the files matching your patterns.

git init <repo>
cd <repo>
git remote add origin <url>
git config core.sparsecheckout true
echo "finisht/*" >> .git/info/sparse-checkout
git pull --depth=1 origin master

You'll need minimum git 1.9 for this to work. Tested it myself only with 2.2.0 and 2.2.2.

This way you'll be still able to push, which is not possible with git archive.
Share
Improve this answer
edited Feb 25, 2015 at 0:22
answered Jan 20, 2015 at 7:33
user avatar
udondan
52.5k1919 gold badges183183 silver badges167167 bronze badges

    25
    This is useful, and may be the best available answer, but it still clones the content that you don't care about (if it is on the branch that you pull), even though it doesn't show up in the checkout. – 
    Brent Bradburn
    Aug 25, 2015 at 21:54
    1
    This does not work for me. --depth=1 is ignored, still tries to pull several thousand commits and about 100x too many files. – 
    Tyguy7
    Sep 18, 2015 at 21:46
    2
    doesn't work for me when the last command is not git pull --depth=1 origin master but git pull --depth=1 origin <any-other-branch>. this is so strange, see my question here： stackoverflow.com/questions/35820630/… – 
    Shuman
    Mar 6, 2016 at 0:15
    5
    On Windows, the second-to-last line needs to omit the quotes, or the pull fails. – 
    nateirvin
    Mar 31, 2016 at 17:01
    4
    This still downloads all data! Found this solution, using svn: stackoverflow.com/a/18324458/2302437 – 
    electronix384128
    May 18, 2016 at 0:09

Show 12 more comments
742

EDIT: As of Git 2.19, this is finally possible, as can be seen in this answer.

Consider upvoting that answer.

Note: in Git 2.19, only client-side support is implemented, server-side support is still missing, so it only works when cloning local repositories. Also note that large Git hosters, e.g. GitHub, don't actually use the Git server, they use their own implementation, so even if support shows up in the Git server, it does not automatically mean that it works on Git hosters. (OTOH, since they don't use the Git server, they could implement it faster in their own implementations before it shows up in Git server.)

No, that's not possible in Git.

Implementing something like this in Git would be a substantial effort and it would mean that the integrity of the clientside repository could no longer be guaranteed. If you are interested, search for discussions on "sparse clone" and "sparse fetch" on the git mailinglist.

In general, the consensus in the Git community is that if you have several directories that are always checked out independently, then these are really two different projects and should live in two different repositories. You can glue them back together using Git Submodules.
Share
Improve this answer
edited Dec 16, 2019 at 17:12
user avatar
Saurabh P Bhandari
5,10411 gold badge1313 silver badges3939 bronze badges
answered Mar 1, 2009 at 18:00
user avatar
Jörg W Mittag
350k7373 gold badges422422 silver badges625625 bronze badges

    6
    Depending on the scenario, you may want to use git subtree instead of git submodule. See alumnit.ca/~apenwarr/log/?m=200904#30 – 
    C Pirate
    Aug 3, 2009 at 17:12
    10
    @StijndeWitt: Sparse checkouts happen during git-read-tree, which is long after get-fetch. The question was not about checking out only a subdirectory, it was about cloning only a subdirectory. I don't see how sparse checkouts could possibly do that, since git-read-tree runs after the clone has already completed. – 
    Jörg W Mittag
    Mar 6, 2014 at 14:53
    13
    Rather than this "stub", would you like for me to delete this answer so Chronial's can float to the top? You can't delete it yourself, because it's accepted, but a moderator can. You would keep the reputation you've earned from it, since it's so old. (I came across this because someone flagged it as "link-only". :-) – 
    Cody Gray
    ♦
    Aug 21, 2017 at 17:49
    1
    @CodyGray: Chronial answer still clones the entire repository, and not only a subdirectory. (The last paragraph even explicitly says so.) Cloning only a subdirectory is not possible in Git. The network protocol doesn't support it, the storage format doesn't support it. Every single answer to this question always clones the whole repository. The question is a simple Yes/No question, and the answer is two characters: No. If at all, my answer is unnecessarily long, not short. – 
    Jörg W Mittag
    Aug 31, 2018 at 14:45 

    2
    @JörgWMittag: Ciro Santili's answer seems to contradict you. – 
    Dan Dascalescu
    Nov 4, 2018 at 0:53

Show 7 more comments
77

If you never plan to interact with the repository from which you cloned, you can do a full git clone and rewrite your repository using

git filter-branch --subdirectory-filter <subdirectory>

This way, at least the history will be preserved.
Share
Improve this answer
edited Nov 18, 2021 at 12:49
user avatar
justarandomguy
33144 silver badges1515 bronze badges
answered Mar 1, 2009 at 21:17
user avatar
hillu
9,11544 gold badges2323 silver badges2828 bronze badges

    13
    For people that doesn't know the command, it is git filter-branch --subdirectory-filter <subdirectory> – 
    Jaime Hablutzel
    Oct 26, 2014 at 14:32
    9
    This method has the advantage that the subdirectory you choose becomes the root of the new repository, which happens to be exactly what I want. – 
    Andrew Schulman
    Dec 23, 2014 at 21:27
    That's defenitly the best and easiest approach to use. Here's a one-step command using subdirectory-filter git clone https://github.com/your/repo_xx.git && cd repo_xx && git filter-branch --subdirectory-filter repo_xx_subdir – 
    Alex
    Nov 3, 2019 at 4:55
    1
    If you repo is tens of GB big, this would not help too much. – 
    Adrian Maire
    Nov 11, 2021 at 10:12

Add a comment
5

here is what I do

git init
git sparse-checkout init
git sparse-checkout set "YOUR_DIR_PATH"
git remote add origin https://github.com/AUTH/REPO.git
git pull --depth 1 origin <SHA1_or_BRANCH_NAME>

Simple note

    sparse-checkout

    git sparse-checkout init many articles will tell you to set git sparse-checkout init --cone If I add --cone will get some files that I don't want.

    git sparse-checkout set "..." will set the .git\info\sparse-checkout file contents as ...

    Suppose you don't want to use this command. Instead, you can open the git\info\sparse-checkout and then edit.

Example

Suppose I want to get 2 folderfull repo size>10GB↑ (include git), as below total size < 2MB

    chrome/common/extensions/api
    chrome/common/extensions/permissions

git init
git sparse-checkout init
// git sparse-checkout set "chrome/common/extensions/api/"
start .git\info\sparse-checkout   👈 open the "sparse-checkut" file

/* .git\info\sparse-checkout  for example you can input the contents as below 👇
chrome/common/extensions/api/
!chrome/common/extensions/api/commands/     👈 ! unwanted : https://www.git-scm.com/docs/git-sparse-checkout#_full_pattern_set
!chrome/common/extensions/api/devtools/
chrome/common/extensions/permissions/
*/

git remote add origin https://github.com/chromium/chromium.git
start .git\config

/* .git\config
[core]
    repositoryformatversion = 1
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[extensions]
    worktreeConfig = true
[remote "origin"]
    url = https://github.com/chromium/chromium.git
    fetch = +refs/heads/*:refs/remotes/Github/*
    partialclonefilter = blob:none  // 👈 Add this line, This is important. Otherwise, your ".git" folder is still large (about 1GB)
*/
git pull --depth 1 origin 2d4a97f1ed2dd875557849b4281c599a7ffaba03
// or
// git pull --depth 1 origin master

    partialclonefilter = blob:none

    I know to add this line because I know from: git clone --filter=blob:none it will write this line. so I imitate it.

git version: git version 2.29.2.windows.3
Share
Improve this answer
edited Feb 25 at 1:25
user avatar
Vitaly Zdanevich
10.7k66 gold badges4141 silver badges7474 bronze badges
answered Aug 15, 2021 at 19:29
user avatar
Carson
3,44911 gold badge2222 silver badges3232 bronze badges

    1
    Very interesting example. Upvoted. So you did not need git read-tree -mu I mention in the begining of stackoverflow.com/a/59515426/6309? Where you using the new cone mode, which, as explained in stackoverflow.com/a/59515444/6309, does the read-tree for you? – 
    VonC
    Aug 15, 2021 at 20:24 

Add a comment
10

This will clone a specific folder and remove all history not related to it.

git clone --single-branch -b {branch} git@github.com:{user}/{repo}.git
git filter-branch --subdirectory-filter {path/to/folder} HEAD
git remote remove origin
git remote add origin git@github.com:{user}/{new-repo}.git
git push -u origin master

Share
Improve this answer
answered Mar 22, 2019 at 4:01
user avatar
BARJ
1,16522 gold badges1515 silver badges2525 bronze badges

    Here be dragons. You get greeted by WARNING: git-filter-branch has a glut of gotchas generating mangled history rewrites... Then the git-filter-branch docs has a rather long warning list. – 
    Oyvind
    Dec 16, 2019 at 12:05 

Add a comment
1

You can still use svn:

svn export https://admin@domain.com/home/admin/repos/finisht/static static --force

to "git clone" a subdirectory and then to "git pull" this subdirectory.

(It is not intended to commit&push.)
Share
Improve this answer
answered Sep 27, 2021 at 8:56
user avatar
Friedrich
1,62911 gold badge88 silver badges2222 bronze badges
Add a comment
6

Using Linux? And only want easy to access and clean working tree ? without bothering rest of code on your machine. try symlinks!

git clone https://github.com:{user}/{repo}.git ~/my-project
ln -s ~/my-project/my-subfolder ~/Desktop/my-subfolder

Test

cd ~/Desktop/my-subfolder
git status

Share
Improve this answer
answered Dec 11, 2019 at 0:31
user avatar
Nasir Iqbal
88777 silver badges2424 bronze badges
Add a comment
0

It worked for me- (git version 2.35.1)

git init
git remote add origin <YourRepoUrl>
git config core.sparseCheckout true
git sparse-checkout set <YourSubfolderName>
git pull origin <YourBranchName>

Share
Improve this answer
answered Apr 16 at 12:10
user avatar
Abdul97j
3944 bronze badges
Add a comment
2

Lots of great responses here, but I wanted to add that using the quotations around the directory names was failing for me on Windows Sever 2016. The files simply were not being downloaded.

Instead of

"mydir/myfolder"

I had to use

mydir/myfolder

Also, if you want to simply download all sub directories just use

git sparse-checkout set *

Share
Improve this answer
answered Apr 8, 2021 at 13:15
user avatar
Eric Stricklin
2122 bronze badges
Add a comment
2

If you're actually ony interested in the latest revision files of a directory, Github lets you download a repository as Zip file, which does not contain history. So downloading is very much faster.
Share
Improve this answer
answered Jan 25, 2020 at 14:07
user avatar
weberjn
1,6881818 silver badges2323 bronze badges
Add a comment
1

While I hate actually having to use svn when dealing with git repos :/ I use this all the time;

function git-scp() (
  URL="$1" && shift 1
  svn export ${URL/blob\/master/trunk}
)

This allows you to copy out from the github url without modification. Usage;

--- /tmp » git-scp https://github.com/dgraph-io/dgraph/blob/master/contrib/config/kubernetes/helm                                                                                                                  1 ↵
A    helm
A    helm/Chart.yaml
A    helm/README.md
A    helm/values.yaml
Exported revision 6367.

--- /tmp » ls | grep helm
Permissions Size User    Date Modified    Name
drwxr-xr-x     - anthony 2020-01-07 15:53 helm/

Share
Improve this answer
answered Jan 7, 2020 at 13:52
user avatar
expelledboy
1,6361515 silver badges1818 bronze badges
Add a comment
1

Lots of good ideas and scripts above. I could not help myself and combined them into a bash script with help and error checking:

#!/bin/bash

function help {
  printf "$1
Clones a specific directory from the master branch of a git repository.

Syntax:
  $(basename $0) [--delrepo] repoUrl sourceDirectory [targetDirectory]

If targetDirectory is not specified it will be set to sourceDirectory.
Downloads a sourceDirectory from a Git repository into targetdirectory.
If targetDirectory is not specified, a directory named after `basename sourceDirectory`
will be created under the current directory.

If --delrepo is specified then the .git subdirectory in the clone will be removed after cloning.


Example 1:
Clone the tree/master/django/conf/app_template directory from the master branch of
git@github.com:django/django.git into ./app_template:

\$ $(basename $0) git@github.com:django/django.git django/conf/app_template

\$ ls app_template/django/conf/app_template/
__init__.py-tpl  admin.py-tpl  apps.py-tpl  migrations  models.py-tpl  tests.py-tpl  views.py-tpl


Example 2:
Clone the django/conf/app_template directory from the master branch of
https://github.com/django/django/tree/master/django/conf/app_template into ~/test:

\$ $(basename $0) git@github.com:django/django.git django/conf/app_template ~/test

\$ ls test/django/conf/app_template/
__init__.py-tpl  admin.py-tpl  apps.py-tpl  migrations  models.py-tpl  tests.py-tpl  views.py-tpl

"
  exit 1
}

if [ -z "$1" ]; then help "Error: repoUrl was not specified.\n"; fi
if [ -z "$2" ]; then help "Error: sourceDirectory was not specified."; fi

if [ "$1" == --delrepo ]; then
  DEL_REPO=true
  shift
fi

REPO_URL="$1"
SOURCE_DIRECTORY="$2"
if [ "$3" ]; then
  TARGET_DIRECTORY="$3"
else
  TARGET_DIRECTORY="$(basename $2)"
fi

echo "Cloning into $TARGET_DIRECTORY"
mkdir -p "$TARGET_DIRECTORY"
cd "$TARGET_DIRECTORY"
git init
git remote add origin -f "$REPO_URL"
git config core.sparseCheckout true

echo "$SOURCE_DIRECTORY" > .git/info/sparse-checkout
git pull --depth=1 origin master

if [ "$DEL_REPO" ]; then rm -rf .git; fi

Share
Improve this answer
answered Mar 8, 2021 at 12:52
user avatar
Mike Slinn
6,88055 gold badges4242 silver badges7474 bronze badges
Add a comment
68

This looks far simpler:

git archive --remote=<repo_url> <branch> <path> | tar xvf -

Share
Improve this answer
edited Sep 2, 2016 at 19:22
user avatar
Peter Mortensen
29.9k2121 gold badges9999 silver badges124124 bronze badges
answered Sep 10, 2014 at 17:03
user avatar
ErichBSchulz
13.9k55 gold badges5353 silver badges5555 bronze badges

    18
    When I do this on github I get fatal: Operation not supported by protocol. Unexpected end of command stream – 
    Michael Fox
    Sep 25, 2014 at 17:37 

    1
    The protocol error could be because of HTTPS or : in the repo url. It could also be because of missing ssh key. – 
    Umair A.
    Dec 7, 2014 at 17:34
    2
    If you're using github you can use svn export instead – 
    Milo Wielondek
    Jul 5, 2015 at 15:25
    3
    Won't work wiht Github --> Invalid command: 'git-upload-archive 'xxx/yyy.git'' You appear to be using ssh to clone a git:// URL. Make sure your core.gitProxy config option and the GIT_PROXY_COMMAND environment variable are NOT set. fatal: The remote end hung up unexpectedly – 
    Nianliang
    Jul 14, 2015 at 15:19
    4
    The reason why this doesn't work with GitHub: "We don't support using git-archive to pull an archive directly from GitHub. You can either clone the repo locally and run git-archive, or click on the Download ZIP button on the repo page." github.com/xuwupeng2000/capistrano-scm-gitcopy/issues/16 – 
    Donn Lee
    Aug 29, 2016 at 23:17

Show 2 more comments
7

Just to clarify some of the great answers here, the steps outlined in many of the answers assume that you already have a remote repository somewhere.

Given: an existing git repository, e.g. git@github.com:some-user/full-repo.git, with one or more directories that you wish to pull independently of the rest of the repo, e.g. directories named app1 and app2

Assuming you have a git repository as the above...

Then: you can run steps like the following to pull only specific directories from that larger repo:

mkdir app1
cd app1
git init
git remote add origin git@github.com:some-user/full-repo.git
git config core.sparsecheckout true
echo "app1/" >> .git/info/sparse-checkout
git pull origin master

I had mistakenly thought that the sparse-checkout options had to be set on the original repository, but this is not the case: you define which directories you want locally, prior to pulling from the remote. The remote repo doesn't know or care about your only wanting to track a part of the repo.

Hope this clarification helps someone else.
Share
Improve this answer
edited Dec 21, 2020 at 13:21
answered Mar 5, 2020 at 18:17
user avatar
Everett
6,25044 gold badges3030 silver badges4343 bronze badges

    this is a bit late but what do i do if i need all contents inside app1 and not the app1 directory – 
    Swapnil Shende
    Aug 3, 2020 at 15:26
    That seems more like a cosmetic question, although it does seem like you don't have full freedom to "escape" the structure of the original repo. Maybe you could use symlinks? – 
    Everett
    Dec 21, 2020 at 13:23
    you still have to download the whole repo it seems ``` $ mkdir com.unity.render-pipelines.core $ cd com.unity.render-pipelines.core/ $ git init $ git remote add origin github.com/Oculus-VR/Unity-Graphics.git $ git config core.sparsecheckout true $ echo "com.unity.render-pipelines.core/" >> .git/info/sparse-checkout $ git pull origin 2021.2/oculus-appsw-particles ``` The folder size is around 7mb , however ... ``` $ ... $ Receiving objects: 6% (24305/375290), 27.30 MiB | 121.00 KiB/s ``` – 
    Vlad
    Apr 15 at 21:50 

Add a comment
3

I wrote a .gitconfig [alias] for performing a "sparse checkout". Check it out (no pun intended):

On Windows run in cmd.exe

git config --global alias.sparse-checkout "!f(){ [ $# -eq 2 ] && L=${1##*/} L=${L%.git} || L=$2; mkdir -p \"$L/.git/info\" && cd \"$L\" && git init --template= && git remote add origin \"$1\" && git config core.sparseCheckout 1; [ $# -eq 2 ] && echo \"$2\" >> .git/info/sparse-checkout || { shift 2; for i; do echo $i >> .git/info/sparse-checkout; done }; git pull --depth 1 origin master;};f"

Otherwise:

git config --global alias.sparse-checkout '!f(){ [ $# -eq 2 ] && L=${1##*/} L=${L%.git} || L=$2; mkdir -p "$L/.git/info" && cd "$L" && git init --template= && git remote add origin "$1" && git config core.sparseCheckout 1; [ $# -eq 2 ] && echo "$2" >> .git/info/sparse-checkout || { shift 2; for i; do echo $i >> .git/info/sparse-checkout; done }; git pull --depth 1 origin master;};f'

Usage:

# Makes a directory ForStackExchange with Plug checked out
git sparse-checkout https://github.com/YenForYang/ForStackExchange Plug

# To do more than 1 directory, you have to specify the local directory:
git sparse-checkout https://github.com/YenForYang/ForStackExchange ForStackExchange Plug Folder

The git config commands are 'minified' for convenience and storage, but here is the alias expanded:

# Note the --template= is for disabling templates.
# Feel free to remove it if you don't have issues with them (like I did)
# `mkdir` makes the .git/info directory ahead of time, as I've found it missing sometimes for some reason
f(){
    [ "$#" -eq 2 ] && L="${1##*/}" L=${L%.git} || L=$2;
    mkdir -p "$L/.git/info"
        && cd "$L"
        && git init --template=
        && git remote add origin "$1"
        && git config core.sparseCheckout 1;
    [ "$#" -eq 2 ]
        && echo "$2" >> .git/info/sparse-checkout
        || {
            shift 2;
            for i; do
                echo $i >> .git/info/sparse-checkout;
            done
        };
    git pull --depth 1 origin master;
};
f

Share
Improve this answer
answered Jul 26, 2019 at 23:48
user avatar
YenForYang
2,1721919 silver badges1616 bronze badges

    Why does this work: L=${1##*/} L=${L%.git} ? Is space an operator? – 
    Gulzt
    Dec 13, 2019 at 12:33
    You ought to mention this is for git < 2.25.0 (Jan 2020), which includes its own version of git sparse-checkout. – 
    Nickolay
    Aug 19, 2020 at 19:09

Add a comment
40

It's not possible to clone subdirectory only with Git, but below are few workarounds.
Filter branch

You may want to rewrite the repository to look as if trunk/public_html/ had been its project root, and discard all other history (using filter-branch), try on already checkout branch:

git filter-branch --subdirectory-filter trunk/public_html -- --all

Notes: The -- that separates filter-branch options from revision options, and the --all to rewrite all branches and tags. All information including original commit times or merge information will be preserved. This command honors .git/info/grafts file and refs in the refs/replace/ namespace, so if you have any grafts or replacement refs defined, running this command will make them permanent.

    Warning! The rewritten history will have different object names for all the objects and will not converge with the original branch. You will not be able to easily push and distribute the rewritten branch on top of the original branch. Please do not use this command if you do not know the full implications, and avoid using it anyway, if a simple single commit would suffice to fix your problem.

Sparse checkout

Here are simple steps with sparse checkout approach which will populate the working directory sparsely, so you can tell Git which folder(s) or file(s) in the working directory are worth checking out.

    Clone repository as usual (--no-checkout is optional):

    git clone --no-checkout git@foo/bar.git
    cd bar

    You may skip this step, if you've your repository already cloned.

    Hint: For large repos, consider shallow clone (--depth 1) to checkout only latest revision or/and --single-branch only.

    Enable sparseCheckout option:

    git config core.sparseCheckout true

    Specify folder(s) for sparse checkout (without space at the end):

    echo "trunk/public_html/*"> .git/info/sparse-checkout

    or edit .git/info/sparse-checkout.

    Checkout the branch (e.g. master):

    git checkout master

Now you should have selected folders in your current directory.

You may consider symbolic links if you've too many levels of directories or filtering branch instead.
Share
Improve this answer
edited Jul 21, 2016 at 22:12
answered Mar 22, 2016 at 23:06
user avatar
kenorb
135k7474 gold badges640640 silver badges688688 bronze badges

    Would Filter branch still allow you to pull? – 
    sam
    Dec 17, 2016 at 19:21
    2
    @sam: no. filter-branch would rewrite the parent commits so they'd have different SHA1 IDs, and thus your filtered tree would have no commits in common with the remote tree. git pull wouldn't know where to try to merge from. – 
    Peter Cordes
    Jun 15, 2017 at 4:06 

    This approach is mostly satisfying answer to my case. – 
    Abbas
    Dec 15, 2019 at 11:16

Add a comment
9

I just wrote a script for GitHub.

Usage:

python get_git_sub_dir.py path/to/sub/dir <RECURSIVE>

Share
Improve this answer
edited Sep 2, 2016 at 19:22
user avatar
Peter Mortensen
29.9k2121 gold badges9999 silver badges124124 bronze badges
answered Jan 23, 2014 at 18:49
user avatar
david_adler
7,15466 gold badges4444 silver badges7575 bronze badges

    11
    FYI, that's for GitHub only. – 
    Sz.
    May 25, 2014 at 14:49
    9
    And apparently this is for downloading a directory, not cloning a piece of a repo with all its metadata... right? – 
    LarsH
    Oct 15, 2015 at 19:18
    11
    You should include you code here and not somewhere else. – 
    jww
    Dec 31, 2018 at 7:13
    urllib2.HTTPError: HTTP Error 403: rate limit exceeded – 
    diyism
    May 18, 2020 at 9:32

Add a comment
6

Here's a shell script I wrote for the use case of a single subdirectory sparse checkout
coSubDir.sh

localRepo=$1
remoteRepo=$2
subDir=$3


# Create local repository for subdirectory checkout, make it hidden to avoid having to drill down to the subfolder
mkdir ./.$localRepo
cd ./.$localRepo
git init
git remote add -f origin $remoteRepo
git config core.sparseCheckout true

# Add the subdirectory of interest to the sparse checkout.
echo $subDir >> .git/info/sparse-checkout

git pull origin master

# Create convenience symlink to the subdirectory of interest
cd ..
ln -s ./.$localRepo/$subDir $localRepo

Share
Improve this answer
edited Oct 28, 2019 at 9:03
user avatar
fduff
3,45122 gold badges2626 silver badges3535 bronze badges
answered Mar 8, 2018 at 19:39
user avatar
jxramos
6,08266 gold badges4747 silver badges8686 bronze badges

    2
    Nice script, only something which should be fixed is the symlink, should be ln -s ./.$localRepo/$subDir $localRepo instead of ln -s ./.$localRepo$subDir $localRepo – 
    valentin_nasta
    Mar 16, 2018 at 8:33

Add a comment
63

Git 1.7.0 has “sparse checkouts”. See “core.sparseCheckout” in the git config manpage, “Sparse checkout” in the git read-tree manpage, and “Skip-worktree bit” in the git update-index manpage.

The interface is not as convenient as SVN’s (e.g. there is no way to make a sparse checkout at the time of an initial clone), but the base functionality upon which simpler interfaces could be built is now available.
Share
Improve this answer
edited Jun 6, 2012 at 4:42
user avatar
CommunityBot
111 silver badge
answered May 18, 2010 at 21:15
user avatar
Chris Johnsen
200k2626 gold badges202202 silver badges185185 bronze badges
Add a comment
-1

So i tried everything in this tread and nothing worked for me ... Turns out that on version 2.24 of Git (the one that comes with cpanel at the time of this answer), you don't need to do this

echo "wpm/*" >> .git/info/sparse-checkout

all you need is the folder name

wpm/*

So in short you do this

git config core.sparsecheckout true

you then edit the .git/info/sparse-checkout and add the folder names (one per line) with /* at the end to get subfolders and files

wpm/*

Save and run the checkout command

git checkout master

The result was the expected folder from my repo and nothing else Upvote if this worked for you
Share
Improve this answer
edited Apr 23, 2020 at 17:45
answered Apr 23, 2020 at 17:34
user avatar
Patrick Simard
2,15933 gold badges2323 silver badges3434 bronze badges
Add a comment
0

    degit makes copies of git repositories. When you run degit some-user/some-repo, it will find the latest commit on https://github.com/some-user/some-repo and download the associated tar file to ~/.degit/some-user/some-repo/commithash.tar.gz if it doesn't already exist locally. (This is much quicker than using git clone, because you're not downloading the entire git history.)

degit <https://github.com/user/repo/subdirectory> <output folder>

Find out more https://www.npmjs.com/package/degit
Share
Improve this answer
answered Feb 12 at 14:17
user avatar
Parables Boltnoel
2155 bronze badges
Add a comment
0

    If you want to clone

    git clone --no-checkout <REPOSITORY_URL>
    cd <REPOSITORY_NAME>

        Now set the specific file / directory you wish to pull into the working-directory:

        git sparse-checkout set <PATH_TO_A_SPECIFIC_DIRECTORY_OR_FILE_TO_PULL>

        Afterwards, you should reset hard your working-directory to the commit you wish to pull.

            For example, we will reset it to the default origin/master's HEAD commit.

        git reset --hard HEAD

    If you want to git init and then remote add

    git init
    git remote add origin <REPOSITORY_URL>

        Now set the specific file / directory you wish to pull into the working-directory:

        git sparse-checkout set <PATH_TO_A_SPECIFIC_DIRECTORY_OR_FILE_TO_PULL>

        Pull the last commit:

        git pull origin master

    NOTE:

    If you want to add another directory/file to your working-directory, you may do it like so:

    git sparse-checkout add <PATH_TO_ANOTHER_SPECIFIC_DIRECTORY_OR_FILE_TO_PULL>

    If you want to add all the repository to the working-directory, do it like so:

    git sparse-checkout add *

    If you want to empty the working-directory, do it like so:

    git sparse-checkout set empty

If you want, you can view the status of the tracked files you have specified, by running:

git status

If you want to exit the sparse mode and clone all the repository, you should run:

git sparse-checkout set *
git sparse-checkout set init
git sparse-checkout set disable

Share
Improve this answer
answered Feb 19 at 12:12
user avatar
Tal Jacob - Sir Jacques
6344 bronze badges
Add a comment
0

I don't know if anyone succeeded pulling specific directory, here is my experience: git clone --filter=blob:none --single-branch <repo>, cancel immediately while downloading objects, enter repo, then git checkout origin/master <dir>, ignore errors (sha1), enter dir, repeat checkout (using new dir) for every sub-directory. I managed to quickly get source files in this way
Share
Improve this answer
answered Apr 6 at 11:03
user avatar
Ilir Liburn
22211 gold badge22 silver badges55 bronze badges
Add a comment
]]

[[
https://stackoverflow.com/questions/33066582/how-to-download-a-folder-from-github

Stack Overflow

    Products

    Log in
    Sign up

How to download a folder from github?
Ask Question
Asked 6 years, 6 months ago
Modified 1 year ago
Viewed 163k times
56

I wished to download the mysite folder from this link: https://github.com/username/repository/master/
git
github
ubuntu-14.04
Share
Improve this question
edited Oct 11, 2015 at 17:02
user avatar
C1sc0
1,47144 gold badges2727 silver badges3030 bronze badges
asked Oct 11, 2015 at 15:15
user avatar
Gangesh
65311 gold badge66 silver badges1010 bronze badges

    10
    Possible duplicate of Download a single folder or directory from a GitHub repo – 
    Helen
    Jul 21, 2017 at 9:37
    2
    Go to DownGit > Enter GitHub Folder URL > Download (no command, no tool, no fuss!) – 
    Minhas Kamal
    May 13, 2020 at 15:47 

    2
    github UI sucks. should have download folder option. – 
    JGFMK
    Dec 13, 2020 at 20:09

Add a comment
10 Answers
Sorted by:
Reset to default

Help us improve our answers.

Are the answers below sorted in a way that puts the best answer at or near the top?
47

You can download a file/folder from github

Simply use: svn export <repo>/trunk/<folder>

Ex: svn export https://github.com/lodash/lodash/trunk/docs

Note: You may first list the contents of the folder in terminal using svn ls <repo>/trunk/folder

(yes, that's svn here. apparently in 2016 you still need svn to simply download some github files)
Share
Improve this answer
edited Feb 13, 2021 at 12:37
user avatar
Vishwajith.K
8311 silver badge99 bronze badges
answered Dec 5, 2016 at 23:22
user avatar
Anona112
3,52444 gold badges1919 silver badges3030 bronze badges

    4
    I had to use <repo>/branches/<branch_name>/<folder> for a non-master branch, but otherwise worked flawlessly. – 
    coreyward
    Oct 18, 2019 at 2:06 

    1
    <repo>/tags/<tag_name>/<folder> also seems to work – 
    skube
    Jan 27, 2020 at 18:57

Add a comment
26

You can use Github Contents API to get an archive link and tar to retrieve a specified folder.
Command line:

    curl https://codeload.github.com/[owner]/[repo]/tar.gz/master | \ tar -xz --strip=2 [repo]-master/[folder_path]

For example,
if you want to download examples/with-apollo/ folder from zeit/next.js, you can type this:

curl https://codeload.github.com/zeit/next.js/tar.gz/master | \
  tar -xz --strip=2 next.js-master/examples/with-apollo

Share
Improve this answer
edited Aug 7, 2017 at 2:36
answered May 22, 2017 at 9:35
user avatar
chuyik
75877 silver badges1212 bronze badges

    3
    Nice! It's also optional with WGET, and with the regular github archive url: wget -O - https://github.com/zeit/next.js/archive/master.tar.gz | tar -xz --strip=2 "next.js-master/examples/with-apollo" – 
    Noam Manos
    May 21, 2020 at 12:02 

    1
    zip might works as well. wget -c https://github.com/user/project/archive/master.zip – 
    Nick Dong
    Jul 18, 2020 at 6:29
    1
    This option is rubbish. If you only what images - it downloads whole repo first then trims it. Makes it less painful to individually download 15 images manually! – 
    JGFMK
    Dec 13, 2020 at 19:59

Add a comment
19

Use GitZip online tool. It allows to download a sub-directory of a github repository as a zip file. No git commands needed!
Share
Improve this answer
edited Aug 11, 2019 at 9:09
answered Feb 23, 2018 at 13:12
user avatar
gdrt
2,81733 gold badges3636 silver badges5353 bronze badges

    3
    perfect solution – 
    dvdmn
    Aug 10, 2019 at 15:28
    2
    Why does it need write access to all my public repos? Isn't this a security risk? – 
    Jared Thirsk
    Oct 22, 2019 at 5:24
    @JaredThirsk, but it doesn't. Can you tell us when did it happen in your case? – 
    gdrt
    May 15, 2020 at 9:54
    @gdrt When I click Get Token: Normal, Github asks: "This application will be able to read and write all public repository data. This includes the following: - Code, ..." – 
    Jared Thirsk
    May 18, 2020 at 2:53
    1
    Rare to find such an easy solution to what you want to do. This really helped me. Thanks! – 
    ZeroKelvin
    Dec 10, 2021 at 21:31

Show 2 more comments
9
How to download a specific folder from a GitHub repo

Here a proper solution according to this post:
  #https://github.community/t5/How-to-use-Git-and-GitHub/How-can-I-download-a-specific-folder-from-a-GitHub-repo/m-p/88#M20

    Create a directory

     mkdir github-project-name 
     cd github-project-name

    Set up a git repo

     git init
     git remote add origin <URL-link of the repo>

    Configure your git-repo to download only specific directories

     git config core.sparseCheckout true # enable this

    Set the folder you like to be downloaded, e.g. you only want to download the doc directory from https://github.com/project-tree/master/doc

     echo "/absolute/path/to/folder" > .git/info/sparse-checkout 

    E.g. if you only want to download the doc directory from your master repo https://github.com/project-tree/master/doc, then your command is echo "doc" > .git/info/sparse-checkout.

    Download your repo as usual

     git pull origin master

Share
Improve this answer
edited Jun 24, 2020 at 14:41
answered Apr 28, 2020 at 0:15
user avatar
abu_bua
1,1231212 silver badges1717 bronze badges

    The best answer of all! However, I believe there should no be "-f" in "git remote add origin", since "-f" means a immediate fetch from server, which should be avoided since only the "sparse" path is wanted! – 
    Robert
    Jun 24, 2020 at 14:36
    Awesome answer! – 
    canmustu
    Jun 24, 2021 at 12:20
    2
    in my case, I could see from git pull origin's verbose that doing this downloaded the entire repository; but retained only the folder specified in .git/info/sparse-checkout. and using https://downgit.github.io/ did it for me. – 
    Naveen Reddy Marthala
    Sep 18, 2021 at 5:39 

Add a comment
1

If you want to automate the steps, the suggestions here will work only to an extent.

I came across this tool called fetch and it worked quite fine for me. You can even specify the release. So, it takes a step to download and set it as executable, then fetch the required folder:

curl -sSLfo ./fetch \
https://github.com/gruntwork-io/fetch/releases/download/v0.3.12/fetch_linux_amd64

chmod +x ./fetch

./fetch --repo="https://github.com/foo/bar" --tag="${VERSION}" --source-path="/baz" /tmp/baz

Share
Improve this answer
answered Jan 17, 2021 at 22:57
user avatar
matrik
7633 bronze badges

    My vote goes to matrik. This fetch utility is exactly what I was looking for: github.com//gruntwork-io/fetch. Its a command line tool that not only fits the use case of the OP, but also provides many other useful features and switches for specifying exactly what you are after. – 
    nelsestu
    Aug 30, 2021 at 18:21
]]
https://stackoverflow.com/questions/7106012/download-a-single-folder-or-directory-from-a-github-repo

===
https://zhuanlan.zhihu.com/p/423702402
https://minhaskamal.github.io/DownGit/#/home?url=https:%2F%2Fgithub.com%2FNLP-LOVE%2FML-NLP%2Ftree%2Fmaster%2FNLP%2F16.8%20BERT

神器！最简单下载GitHub单个文件的方法
虹膜小马甲
神器！最简单下载GitHub单个文件的方法
6 个月前 · 来自专栏 python编程及工程问题
解决的问题：
方便、快捷下载GitHub单个文件的代码和数据


问题详细描述：

当我们想下载GitHub单个文件（如图1，16.8 BERT）的数据和代码时，并没有下载的按钮。必须要退回到初始页面，才能下载（如图2，ML-NLP），而且是下载所有的文件夹（然而我们并不需要下载那么多）。此时，急需要一个方法，只下载单个文件。
图1：想下载GitHub单个文件（如：16.8 BERT文件夹中的数据和代码）
图2 必须要退回到初始页面，才能下载（如：ML-NLP）


解决方法：

把需下载文件夹的网址，粘贴到下面的网站，即可下载了。非常简单。

DownGit


示例如下：

打开网址，把需要下载文件夹的网址，粘贴到空白框，点击"Download"（图3）。

下载成功（图4）。
图3 打开网址，把需要下载文件夹的网址，粘贴到空白框，点击&amp;amp;amp;amp;amp;quot;Download&amp;amp;amp;amp;amp;quot;


图4 下载成功



分享了这么好用的神器，可以给我一个小小的赞 嘛~~~

编辑于 2021-10-21 09:33
]]


]]]
[[
为学日益，为道日损

目录
1
道德经·为学日益，为道日损

为学日益①，为道日损②，损之又损，以至于无为。无为而无不为③，取④天下常以无事⑤；及其有事⑥，不足以取天下。

    中文名
    道德经·为学日益，为道日损
    出处
    道德经
    作者
    老子
    朝代
    春秋战国时期

快速
导航

    注释
    引语
    评析
    作者简介
    作品出处

译文
求学的人，其情欲文饰一天比一天增加；求道的人，其情欲文饰则一天比一天减少。减少又减少，到最后以至于“无为”的境地。如果能够做到无为，即不妄为，任何事情都可以有所作为。治理国家的人，要经常以不骚扰人民为治国之本，如果经常以繁苛之政扰害民众，那就不配治理国家了。
注释
1、为学日益：为学，是反映探求外物的知识。此处的“学”当指政教礼乐。日益：指增加人的知见智巧。
2、为道日损：为道，是通过冥想或体验的途径，领悟事物未分化状态的“道”。此处的“道”，指自然之道，无为之道。损，指情欲文饰日渐泯损。
3、无为而无不为：不妄为，就没有什么事情做不成。
4、取：治、摄化之意。
5、无事：即无扰攘之事。
6、有事：繁苛政举在骚扰民生。
引语
本章讲“为学”和“为道”的问题。他先讲“为学”，是求外在的经验知识，经验知识愈积累愈多。老子轻视外在的经验知识，认为这种知识掌握得越多，私欲妄见也就层出不穷。“为道”和“为学”就不同一。它是透过直观体悟以把握事物未分化的状态或内索自身虚静的心境，它不断地除去私欲妄见，使人日渐返朴归真，最终可以达到“无为”的境地。这一章所讲的“为学”是反映“政教礼乐之学”，老子认为它足以产生机智巧变。只有“清静无为”，没有私欲妄见的人才可以治理国家。因而，老子希望人们走“为道”的路子。
评析
任继愈先生认为：“老子承认求学问，天天积累知识，越积累，知识越丰富。至于要认识宇宙变化的总规律或是认识宇宙的最后的根源，就不能靠积累知识，而要靠‘玄览’、‘静观’。他注重理性思维这一点是对的，指出认识总规律和认识个别的东西的方法应有所不同，也是对的。老子的错误在于把理性思维绝对化使他倒向了唯心主义，甚至陷于排斥感性知识的错误。”（《老子的研究》，《老子哲学讨论集》第23页）张松如先生说：“‘为学者日益，为道者日损’，并不是老子的一种什么神秘的、蒙昧的反理性的主张，而是一定发展中的历史现象在观念形态上的客观反映。”“本章正是从认识论和方法论上，概括了对‘礼’所作的探源与批判，而且是具有相当深刻性的。”“在这剖析过程中，由于受着不得突破的阶级的和历史的局限，在所推导的结论中，还带有一定程度的复古主义色彩，显示了骸骨迷恋的情绪，而不曾投射出向前看的目光。然而，这并不能掩盖它有关‘学’与‘道’，有关‘日益’和‘日损’的辩证思维的光辉。“（《老子校读》第281页）“无为而无不为”是老子提出来的极富智慧的命题。事实上，在中国古代，主张“无为”的学者不止老子一人，例如孔子就曾说过“无为而治者，其舜也与，夫何为哉，恭已正南面而已。”这句话的意思是，自己不做什么事情而使得天下太平的人，大概只有舜了，他做了什么呢？他只是庄重端坐在他的王位上罢了。老子把“无为”的思想发挥到极高的程度，从哲学高度来论证“无为”的社会意义。“无为”表面看来，似乎是一种后退的手段，但真正的目的，则在于避开前进中所存在的矛盾和问题，从而占据主动，以达到“无不为”的最终目的。
作者简介
老子，又称老聃、李耳，是我国古代伟大的哲学家和思想家、道家学派创始人。其被唐皇武后封为太上老君，世界文化名人，世界百位历史名人之一，存世有《道德经》（又称《老子》），其作品的精华是朴素的辨证法，主张无为而治，其学说对中国哲学发展具有深刻影响。在道教中老子被尊为道祖。
老子像
老聃（dān）（约前571～前471），字伯阳，谥号聃。又称李耳（古时“老”和“李”同音；“聃”和“耳”同义）。楚国苦县厉乡曲仁里(此地本是封于西周的陈国，今河南鹿邑，安徽涡阳存有争议）人。我国最伟大的哲学家和思 想家之一，被道教尊为教祖，世界文化名人。
作品出处
《为学日益，为道日损》出自老子的《道德经》第四十八章。
《道德经》，又称《道德真经》、《老子》、《五千言》、《老子五千文》，是中国古代先秦诸子分家前的一部著作，为其时诸子所共仰，传说是春秋时期的老子（即李耳，河南鹿邑人）所撰写，是道家哲学思想的重要来源。道德经分上下两篇，原文上篇《德经》、下篇《道经》，不分章，后改为《道经》37章在前，第38章之后为《德经》，并分为81章。是中国历史上首部完整的哲学著作。
《道德经》到了公元前206年-公元200年，被奉为道教经典，所以有学者认为《道德经》被分为八十一章有明显的道教的九九归一的思想，在内容的分割上未免牵强。但道德经前三十七章讲道，后四十四章言德，简单说来，道是体，德是用，二者不能等同。至清代魏源首次破此惯例而分《道德经》为六十八章，相对保持了每章的完整性。

词条目录

        百科名片
        译文
        注释
        引语
        评析
        作者简介
        作品出处

]]
[[
方人

人道 注重 集体，个人 需时刻关注 与其他人的关系，自己在社会中的位置
修天道者，不关心别人，不与别人比较，没有奖状/排行榜之类的东西。



===


天道远，人道迩，非所及也，何以知之？摘自先秦左氏的《左传·昭公·昭公十八年》

解释：天道远离人间，人道则存在于身边的社会人事之中，可以就近掌握。对于人所难及的事物，如何能知道呢？ 


===

哲理(一)类名言赏析

《天道远，人道迩。》出自哪里,什么意思,注释与翻译

注释 天道： 指日月星辰等天体运行现象和过程。人道： 指人事。迩(er)：近。

句意 天体运行现象和过程是很遥远的， 而人间祸福等事情的变化是很切近的。

《天道远，人道迩。》出自：春秋·郑·子产语,见《左传·昭公十八年》

[[


目录
1
天道远，人道迩

“天道远，人道迩”，谚语，字面意思是天道悠远、人道切近，[3]典出《左传·昭公十八年》子产所言：“天道远，人道迩，非所及也，何以知之？”[2]

    中文名
    天道远，人道迩
    典出
    《左传·昭公十八年》[2]  

快速
导航

    出处
    例句

释义
天道：上天的意思的体现。人道：人事。迩：近。[1] 鲁昭公十八年（前524年，郑定公六年），包括郑国在内的多个诸侯国发生火灾。据《左传》记载，此前一年（前525年，郑定公五年），郑国人裨灶就曾经预言火灾的发生，并要求用瓘、斝、玉瓒祭神，子产不答应。[6] [4] [5] 这次火灾后，裨灶又说：“不采纳我的意见，郑国还要发生火灾。”郑国人请求采纳他的意见，子产不同意。子太叔说：“宝物是用来保护百姓的。如果有了火灾，国家差不多会灭亡。可以挽救灭亡，您爱惜它干什么？”子产说：“天道悠远，人道切近，两不相关。如何由天道而知人道？灶哪里懂得天道？这个人的话多了，难道不会偶尔也说中的？”于是就不给。后来也没有再发生火灾。[2]
出处
《左传·昭公十八年》：裨灶曰：“不用吾言，郑又将火。”子产不可。子大叔曰：“宝，以保民也。若有火，国几亡。可以救亡，子何爱焉？”子产曰：“天道远，人道迩，非所及也，何以知之？灶焉知天道？是亦多言矣，岂不或信？”遂不与，亦不复火。[2]
例句
明代邝瑶《便民图纂》一引《省心法言》：“天道远，人道迩。顺人情，合天理。”[1] 宋朝邵雍的《大人吟》也出现这句。
参考资料

    [1]  张鲁原编著,中华古谚语大辞典,上海大学出版社,2011.10,第276页
    [2]  春秋左传正义-卷四十八 昭十七年，尽十九年．国学导航 [引用日期2021-04-19]
    [3]  左传·昭公·昭公十八年段译．古诗文网 [引用日期2021-04-19]


词条目录

        百科名片
        释义
        出处
        例句
]]
]]





