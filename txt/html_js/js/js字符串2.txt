
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Text_formatting
`it
 is ${x+y}`
 === "it\n is "+(x+y)


String.fromCodePoint()
String.prototype.codePointAt()
============see below
charAt, codePointAt
concat
startsWith, endsWith, includes
split
slice
match, matchAll, replace, search
trim
============
const five = 5;
const ten = 10;
console.log(`Fifteen is ${five + ten} and not ${2 * five + ten}.`);
// "Fifteen is 15 and not 20."


============
Unicode code point escapes

New in ECMAScript 2015. With Unicode code point escapes, any character can be escaped using hexadecimal numbers so that it is possible to use Unicode code points up to 0x10FFFF. With simple Unicode escapes it is often necessary to write the surrogate halves separately to achieve the same result.

See also String.fromCodePoint() or String.prototype.codePointAt().

'\u{2F804}'

// the same with simple Unicode escapes
'\uD87E\uDC04'



============
Methods of String

Method 	Description
charAt, charCodeAt, codePointAt 	Return the character or character code at the specified position in string.
indexOf, lastIndexOf 	Return the position of specified substring in the string or last position of specified substring, respectively.
startsWith, endsWith, includes 	Returns whether or not the string starts, ends or contains a specified string.
concat 	Combines the text of two strings and returns a new string.
fromCharCode, fromCodePoint 	Constructs a string from the specified sequence of Unicode values. This is a method of the String class, not a String instance.
split 	Splits a String object into an array of strings by separating the string into substrings.
slice 	Extracts a section of a string and returns a new string.
substring, substr 	Return the specified subset of the string, either by specifying the start and end indexes or the start index and a length.
match, matchAll, replace, search 	Work with regular expressions.
toLowerCase, toUpperCase 	Return the string in all lowercase or all uppercase, respectively.
normalize 	Returns the Unicode Normalization Form of the calling string value.
repeat 	Returns a string consisting of the elements of the object repeated the given times.
trim 	Trims whitespace from the beginning and end of the string.


charAt, codePointAt
concat
startsWith, endsWith, includes
split
slice
match, matchAll, replace, search
trim
============
Multi-line template literals

Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them.

Template literals are enclosed by the back-tick (` `) (grave accent) character instead of double or single quotes. Template literals can contain place holders. These are indicated by the Dollar sign and curly braces (${expression}).
Multi-lines

Any new line characters inserted in the source are part of the template literal. Using normal strings, you would have to use the following syntax in order to get multi-line strings:

console.log('string text line 1\n\
string text line 2');
// "string text line 1
// string text line 2"

To get the same effect with multi-line strings, you can now write:

console.log(`string text line 1
string text line 2`);
// "string text line 1
// string text line 2"

Embedded expressions

In order to embed expressions within normal strings, you would use the following syntax:

const five = 5;
const ten = 10;
console.log('Fifteen is ' + (five + ten) + ' and not ' + (2 * five + ten) + '.');
// "Fifteen is 15 and not 20."

Now, with template literals, you are able to make use of the syntactic sugar making substitutions like this more readable:

const five = 5;
const ten = 10;
console.log(`Fifteen is ${five + ten} and not ${2 * five + ten}.`);
// "Fifteen is 15 and not 20."

For more information, read about Template literals in the JavaScript reference.
Internationalization

The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for Collator, NumberFormat, and DateTimeFormat objects are properties of the Intl object.
Date and time formatting

The DateTimeFormat object is useful for formatting date and time. The following formats a date for English as used in the United States. (The result is different in another time zone.)

const msPerDay = 24 * 60 * 60 * 1000;
 
// July 17, 2014 00:00:00 UTC.
const july172014 = new Date(msPerDay * (44 * 365 + 11 + 197));

const options = { year: '2-digit', month: '2-digit', day: '2-digit',
                hour: '2-digit', minute: '2-digit', timeZoneName: 'short' };
const americanDateTime = new Intl.DateTimeFormat('en-US', options).format;
 
console.log(americanDateTime(july172014)); // 07/16/14, 5:00 PM PDT

Number formatting

The NumberFormat object is useful for formatting numbers, for example currencies.

const gasPrice = new Intl.NumberFormat('en-US',
                        { style: 'currency', currency: 'USD',
                          minimumFractionDigits: 3 });
 
console.log(gasPrice.format(5.259)); // $5.259

const hanDecimalRMBInChina = new Intl.NumberFormat('zh-CN-u-nu-hanidec',
                        { style: 'currency', currency: 'CNY' });
 
console.log(hanDecimalRMBInChina.format(1314.25)); // ￥ 一,三一四.二五

Collation

The Collator object is useful for comparing and sorting strings.

For example, there are actually two different sort orders in German, phonebook and dictionary. Phonebook sort emphasizes sound, and it’s as if “ä”, “ö”, and so on were expanded to “ae”, “oe”, and so on prior to sorting.

const names = ['Hochberg', 'Hönigswald', 'Holzman'];
 
const germanPhonebook = new Intl.Collator('de-DE-u-co-phonebk');
 
// as if sorting ["Hochberg", "Hoenigswald", "Holzman"]:
console.log(names.sort(germanPhonebook.compare).join(', '));
// logs "Hochberg, Hönigswald, Holzman"

Some German words conjugate with extra umlauts, so in dictionaries it’s sensible to order ignoring umlauts (except when ordering words differing only by umlauts: schon before schön).

const germanDictionary = new Intl.Collator('de-DE-u-co-dict');
 
// as if sorting ["Hochberg", "Honigswald", "Holzman"]:
console.log(names.sort(germanDictionary.compare).join(', '));
// logs "Hochberg, Holzman, Hönigswald"

For more information about the Intl API, see also Introducing the JavaScript Internationalization API.









============
============
============
============
============
============
============
============
============
============



