js大整数
<->bytes
0n
BigInt("0")
asUintN
toString

asUintN
asIntN

BigInt.asUintN(64, x)->BigInt!!!!!!

console.log(1024n.toString());
// expected output: "1024"
console.log(1024n.toString(2));
// expected output: "10000000000"
console.log(1024n.toString(16));
// expected output: "400"


const max = 2n ** 64n - 1n;
function check64bit(number) {
  (number > max) ?
    console.log("Number doesn't fit in unsigned 64-bit integer!") :
    console.log(BigInt.asUintN(64, number));
}



https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
BigInt

    Web technology for developersJavaScriptJavaScript referenceStandard built-in objectsBigInt

On this Page

    Description
    Constructor
    Static methods
    Instance methods
    Usage recommendations
    Examples
    Specifications
    Browser compatibility
    See also

BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers.

Description

A BigInt is created by appending n to the end of an integer literal — 10n — or by calling the function BigInt().

const theBiggestInt = 9007199254740991n

const alsoHuge = BigInt(9007199254740991)
// ↪ 9007199254740991n

const hugeString = BigInt("9007199254740991")
// ↪ 9007199254740991n

const hugeHex = BigInt("0x1fffffffffffff")
// ↪ 9007199254740991n

const hugeBin = BigInt("0b11111111111111111111111111111111111111111111111111111")
// ↪ 9007199254740991n

BigInt is similar to Number in some ways, but also differs in a few key matters — it cannot be used with methods in the built-in Math object and cannot be mixed with instances of Number in operations; they must be coerced to the same type. Be careful coercing values back and forth, however, as the precision of a BigInt may be lost when it is coerced to a Number.
Type information

When tested against typeof, a BigInt will give "bigint":

typeof 1n === 'bigint'           // true
typeof BigInt('1') === 'bigint'  // true

When wrapped in an Object, a BigInt will be considered as a normal "object" type:

typeof Object(1n) === 'object'  // true

Operators

The following operators may be used with BigInts (or object-wrapped BigInts): +, *, -, **, %.

Bitwise operators are supported as well, except >>> (zero-fill right shift) as all BigInts are signed.

Also unsupported is the unary operator (+), in order to not break asm.js.

const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER) 
// ↪ 9007199254740991n

const maxPlusOne = previousMaxSafe + 1n 
// ↪ 9007199254740992n
 
const theFuture = previousMaxSafe + 2n 
// ↪ 9007199254740993n, this works now!

const multi = previousMaxSafe * 2n 
// ↪ 18014398509481982n

const subtr = multi – 10n 
// ↪ 18014398509481972n

const mod = multi % 10n 
// ↪ 2n

const bigN = 2n ** 54n 
// ↪ 18014398509481984n

bigN * -1n
// ↪ –18014398509481984n

The / operator also works as expected with whole numbers.

However, since these are BigInts and not BigDecimals, this operation will round towards 0 (which is to say, it will not return any fractional digits).

An operation with a fractional result will be truncated when used with a BigInt.

const expected = 4n / 2n
// ↪ 2n

const rounded = 5n / 2n
// ↪ 2n, not 2.5n

Comparisons

A BigInt is not strictly equal to a Number, but it is loosely so:

0n === 0
// ↪ false

0n == 0
// ↪ true

A Number and a BigInt may be compared as usual:

1n < 2
// ↪ true

2n > 1
// ↪ true

2 > 2
// ↪ false

2n > 2
// ↪ false

2n >= 2
// ↪ true

They may be mixed in arrays and sorted:

const mixed = [4n, 6, -12n, 10, 4, 0, 0n] 
// ↪  [4n, 6, -12n, 10, 4, 0, 0n]

mixed.sort() 
// ↪ [-12n, 0, 0n, 4n, 4, 6, 10]

Note that comparisons with Object-wrapped BigInts act as with other objects, only indicating equality when the same object instance is compared:

0n === Object(0n)          // false
Object(0n) === Object(0n)  // false

const o = Object(0n) 
o === o                    // true

Conditionals

A BigInt behaves like a Number in cases where:

    it is converted to a Boolean: via the Boolean function;
    when used with logical operators ||, &&, and !; or
    within a conditional test like an if statement.

if (0n) {
  console.log('Hello from the if!') 
} else {
  console.log('Hello from the else!') 
}

// ↪ "Hello from the else!"

0n || 12n
// ↪ 12n

0n && 12n
// ↪ 0n

Boolean(0n)
// ↪ false

Boolean(12n)
// ↪ true

!12n
// ↪ false

!0n
// ↪ true

Constructor

BigInt()
    Creates BigInt objects.

Static methods

BigInt.asIntN()
    Wraps a BigInt value to a signed integer between -2width-1 and 2width-1 - 1.
BigInt.asUintN()
    Wraps a BigInt value to an unsigned integer between 0 and 2width - 1.

Instance methods

BigInt.prototype.toLocaleString()
    Returns a string with a language-sensitive representation of this number. Overrides the Object.prototype.toLocaleString() method.
BigInt.prototype.toString()
    Returns a string representing the specified object in the specified radix (base). Overrides the Object.prototype.toString() method.
BigInt.prototype.valueOf()
    Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf() method.

Usage recommendations
Coercion

Because coercing between Number and BigInt can lead to loss of precision, it is recommended to only use BigInt when values greater than 253 are reasonably expected and not to coerce between the two types.
Cryptography

The operations supported on BigInts are not constant time. BigInt is therefore unsuitable for use in cryptography.
Use within JSON

Using JSON.stringify() with any BigInt value will raise a TypeError as BigInt values aren't serialized in JSON by default. However, you can implement your own toJSON method if needed:

BigInt.prototype.toJSON = function() { return this.toString()  }

Instead of throwing, JSON.stringify now produces a string like this:

JSON.stringify(BigInt(1)) 
// '"1"'

Examples
Calculating Primes

// Returns true if passed BigInt is a prime number
function isPrime(p) {
  for (let i = 2n; i * i <= p; i++) {
    if (p % i === 0n) return false;
  }
  return true
}

// Takes a BigInt as an argument, returns nth prime number as BigInt
function nthPrime(nth) {
  let maybePrime = 2n
  let prime = 0n
  
  while (nth >= 0n) {
    if (isPrime(maybePrime)) {
      nth--
      prime = maybePrime
    }
    maybePrime++
  }
  
  return prime
}

nthPrime(20n)
// ↪ 73n

Specifications
Specification
ECMAScript (ECMA-262)
The definition of 'BigInt objects' in that specification.
Browser compatibility
Update compatibility data on GitHub
BigInt
	Chrome Full support 67
	Edge Full support 79
	Firefox Full support 68
	IE No support No
	Opera Full support 54
	Safari No support No
	WebView Android Full support 67
	Chrome Android Full support 67
	Firefox Android Full support 68
	Opera Android Full support 48
	Safari iOS No support No
	Samsung Internet Android Full support 9.0
	nodejs Full support 10.4.0
BigInt() constructor
	Chrome Full support 67
	Edge Full support 79
	Firefox Full support 68
	IE No support No
	Opera Full support 54
	Safari No support No
	WebView Android Full support 67
	Chrome Android Full support 67
	Firefox Android Full support 68
	Opera Android Full support 48
	Safari iOS No support No
	Samsung Internet Android Full support 9.0
	nodejs Full support 10.4.0
asIntN
	Chrome Full support 67
	Edge Full support 79
	Firefox Full support 68
	IE No support No
	Opera Full support 54
	Safari No support No
	WebView Android Full support 67
	Chrome Android Full support 67
	Firefox Android Full support 68
	Opera Android Full support 48
	Safari iOS No support No
	Samsung Internet Android Full support 9.0
	nodejs Full support 10.4.0
asUintN
	Chrome Full support 67
	Edge Full support 79
	Firefox Full support 68
	IE No support No
	Opera Full support 54
	Safari No support No
	WebView Android Full support 67
	Chrome Android Full support 67
	Firefox Android Full support 68
	Opera Android Full support 48
	Safari iOS No support No
	Samsung Internet Android Full support 9.0
	nodejs Full support 10.4.0
toLocaleString
	Chrome Full support 67
	Edge Full support 79
	Firefox Full support 68
	IE No support No
	Opera Full support 54
	Safari No support No
	WebView Android Full support 67
	Chrome Android Full support 67
	Firefox Android Full support 68
	Opera Android Full support 48
	Safari iOS No support No
	Samsung Internet Android Full support 9.0
	nodejs Full support 10.4.0
toString
	Chrome Full support 67
	Edge Full support 79
	Firefox Full support 68
	IE No support No
	Opera Full support 54
	Safari No support No
	WebView Android Full support 67
	Chrome Android Full support 67
	Firefox Android Full support 68
	Opera Android Full support 48
	Safari iOS No support No
	Samsung Internet Android Full support 9.0
	nodejs Full support 10.4.0
valueOf
	Chrome Full support 67
	Edge Full support 79
	Firefox Full support 68
	IE No support No
	Opera Full support 54
	Safari No support No
	WebView Android Full support 67
	Chrome Android Full support 67
	Firefox Android Full support 68
	Opera Android Full support 48
	Safari iOS No support No
	Samsung Internet Android Full support 9.0
	nodejs Full support 10.4.0
Thank you!
Report sent
What happens next?

Our team will review your report. Once we verify the information you have supplied we will update this browser compatability table accordingly.
Can I keep track of my report?

You can join the GitHub repository to see updates and commits for this table data:

https://github.com/mdn/browser-compat-data
Tell us what’s wrong with this table

Our goal is to provide accurate, real values for all our compatibility data tables. Notifying MDN of inaccurate data or supplying new data pushes us further towards our goal of providing 100% real values to the developer community.
Thank you for helping.
1Which browsers are affected?
Please select the browser or browsers which are affected.
Chrome
Chrome
Edge
Edge
Firefox
Firefox
Internet Explorer
Internet Explorer
Opera
Opera
Safari
Safari
Android webview
Android webview
Chrome for Android
Chrome for Android
Firefox for Android
Firefox for Android
Opera for Android
Opera for Android
Safari on iOS
Safari on iOS
Samsung Internet
Samsung Internet
Node.js
Node.js
2Which table row is affected?
3Can you provide a brief explanation?
Briefly outline the issue you are highlighting. Minimum 10 and maximum 1,000 characters.
4Do you have any supporting material?
Optional
Browser documentation and release notes are good supporting items to accompany your message. A demo hosted on services like Codepen or JSBin are perfect for providing real examples of your findings.
What are we missing?
Legend

Full support  
    Full support
No support  
    No support

Implementation Progress

The following table provides a daily implementation status for this feature, because this feature has not yet reached cross-browser stability. The data is generated by running the relevant feature tests in Test262, the standard test suite of JavaScript, in the nightly build, or latest release of each browser's JavaScript engine.
See also

    Number
    Number.MAX_SAFE_INTEGER

Metadata

    Last modified: Mar 24, 2020, by MDN contributors

Related Topics

    Standard built-in objects
    BigInt
    Methods
        BigInt.asIntN()
        BigInt.asUintN()
        BigInt.prototype.toLocaleString()
        BigInt.prototype.toString()
        BigInt.prototype.valueOf()
    Inheritance:
    Function
    Properties
        Function.arguments
        Function.arity
        Function.caller
        Function.displayName
        Function.length
        Function.name
    Methods
        Function.prototype.apply()
        Function.prototype.bind()
        Function.prototype.call()
        Function.prototype.isGenerator()
        Function.prototype.toSource()
        Function.prototype.toString()
    Object
    Properties
        Object.prototype.__count__
        Object.prototype.__noSuchMethod__
        Object.prototype.__parent__
        Object.prototype.__proto__
        Object.prototype.constructor
    Methods
        Object.prototype.__defineGetter__()
        Object.prototype.__defineSetter__()
        Object.prototype.__lookupGetter__()
        Object.prototype.__lookupSetter__()
        Object.prototype.hasOwnProperty()
        Object.prototype.isPrototypeOf()
        Object.prototype.propertyIsEnumerable()
        Object.prototype.toLocaleString()
        Object.prototype.toSource()
        Object.prototype.toString()
        Object.prototype.unwatch()
        Object.prototype.valueOf()
        Object.prototype.watch()
        Object.setPrototypeOf()

Learn the best of web development

Get the latest and greatest from MDN delivered straight to your inbox.
E-mail
MDN Web Docs

    Web Technologies
    Learn Web Development
    About MDN
    Feedback

Mozilla

    About
    Contact Us
    Firefox

    TermsPrivacyCookies

© 2005-2020 Mozilla and individual contributors.

Content is available under these licenses.

