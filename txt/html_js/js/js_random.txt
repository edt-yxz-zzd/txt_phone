js_random



function getRandomInt(max) {
  return Math.floor(Math.random() * Math.floor(max));
}
console.log(getRandomInt(3));
// expected output: 0, 1 or 2
console.log(getRandomInt(1));
// expected output: 0
console.log(Math.random());
// expected output: a number between 0 and 1



Math.random()

    Web technology for developersJavaScriptJavaScript referenceStandard built-in objectsMathMath.random()

On this Page

    Syntax
    Examples
    Specifications
    Browser compatibility

The Math.random() function returns a floating-point, pseudo-random number in the range 0 to less than 1 (inclusive of 0, but not 1) with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.

Math.random() does not provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the window.crypto.getRandomValues() method.
Syntax

Math.random()

Return value

A floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive).
Examples

Note that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, the ranges claimed for the functions below (excluding the one for Math.random() itself) aren't exact. If extremely large bounds are chosen (253 or higher), it's possible in extremely rare cases to calculate the usually-excluded upper bound.
Getting a random number between 0 (inclusive) and 1 (exclusive)

function getRandom() {
  return Math.random();
}

Getting a random number between two values

This example returns a random number between the specified values. The returned value is no lower than (and may possibly equal) min, and is less than (and not equal) max.

function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}

Getting a random integer between two values

This example returns a random integer between the specified values. The value is no lower than min (or the next integer greater than min if min isn't an integer), and is less than (but not equal to) max.

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
}

It might be tempting to use Math.round() to accomplish that, but doing so would cause your random numbers to follow a non-uniform distribution, which may not be acceptable for your needs.
Getting a random integer between two values, inclusive

While the getRandomInt() function above is inclusive at the minimum, it's exclusive at the maximum. What if you need the results to be inclusive at both the minimum and the maximum? The getRandomIntInclusive() function below accomplishes that.

function getRandomIntInclusive(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive 
}

Specifications
Specification
ECMAScript (ECMA-262)
The definition of 'Math.random' in that specification.
Browser compatibility
Update compatibility data on GitHub
random
	Chrome Full support 1
	Edge Full support 12
	Firefox Full support 1
	IE Full support 3
	Opera Full support 3
	Safari Full support 1
	WebView Android Full support 1
	Chrome Android Full support 18
	Firefox Android Full support 4
	Opera Android Full support 10.1
	Safari iOS Full support 1
	Samsung Internet Android Full support 1.0
	nodejs Full support 0.1.100
Thank you!
Report sent
What happens next?

Our team will review your report. Once we verify the information you have supplied we will update this browser compatability table accordingly.
Can I keep track of my report?

You can join the GitHub repository to see updates and commits for this table data:

https://github.com/mdn/browser-compat-data
Tell us what’s wrong with this table

Our goal is to provide accurate, real values for all our compatibility data tables. Notifying MDN of inaccurate data or supplying new data pushes us further towards our goal of providing 100% real values to the developer community.
Thank you for helping.
1Which browsers are affected?
Please select the browser or browsers which are affected.
Chrome
Chrome
Edge
Edge
Firefox
Firefox
Internet Explorer
Internet Explorer
Opera
Opera
Safari
Safari
Android webview
Android webview
Chrome for Android
Chrome for Android
Firefox for Android
Firefox for Android
Opera for Android
Opera for Android
Safari on iOS
Safari on iOS
Samsung Internet
Samsung Internet
Node.js
Node.js
2Which table row is affected?
3Can you provide a brief explanation?
Briefly outline the issue you are highlighting. Minimum 10 and maximum 1,000 characters.
4Do you have any supporting material?
Optional
Browser documentation and release notes are good supporting items to accompany your message. A demo hosted on services like Codepen or JSBin are perfect for providing real examples of your findings.
What are we missing?
Legend

Full support  
    Full support

Metadata

    Last modified: Jan 31, 2020, by MDN contributors

Related Topics

    Standard built-in objects
    Math
    Properties
        Math.E
        Math.LN10
        Math.LN2
        Math.LOG10E
        Math.LOG2E
        Math.PI
        Math.SQRT1_2
        Math.SQRT2
    Methods
        Math.abs()
        Math.acos()
        Math.acosh()
        Math.asin()
        Math.asinh()
        Math.atan()
        Math.atan2()
        Math.atanh()
        Math.cbrt()
        Math.ceil()
        Math.clz32()
        Math.cos()
        Math.cosh()
        Math.exp()
        Math.expm1()
        Math.floor()
        Math.fround()
        Math.hypot()
        Math.imul()
        Math.log()
        Math.log10()
        Math.log1p()
        Math.log2()
        Math.max()
        Math.min()
        Math.pow()
        Math.random()
        Math.round()
        Math.sign()
        Math.sin()
        Math.sinh()
        Math.sqrt()
        Math.tan()
        Math.tanh()
        Math.trunc()
    Inheritance:
    Object
    Properties
        Object.prototype.__count__
        Object.prototype.__noSuchMethod__
        Object.prototype.__parent__
        Object.prototype.__proto__
        Object.prototype.constructor
    Methods
        Object.prototype.__defineGetter__()
        Object.prototype.__defineSetter__()
        Object.prototype.__lookupGetter__()
        Object.prototype.__lookupSetter__()
        Object.prototype.hasOwnProperty()
        Object.prototype.isPrototypeOf()
        Object.prototype.propertyIsEnumerable()
        Object.prototype.toLocaleString()
        Object.prototype.toSource()
        Object.prototype.toString()
        Object.prototype.unwatch()
        Object.prototype.valueOf()
        Object.prototype.watch()
        Object.setPrototypeOf()






