#__all__:goto
# 更新数据:goto
#   [拟泛化梅森指数(269;[2,3,5,7]) /-\ [2..<5000] == {/}]
#   [拟泛化梅森指数(887;[2,3,5,7]) /-\ [2..<2000] == {1201}]
# #补丁前:整理输出牜再四版:goto
# #补丁前:  再四版非平凡牜多个素因子:goto
# #补丁前:  再四版非平凡牜单个素因子幂方:goto
# #补丁前:  非平凡再四泛化梅森数牜指数多数受限于五千牜指数生成子多数受限于一千:goto
# 补丁后整理输出牜再四版:goto
#   补丁后:分类冫再四泛化梅森数牜指数多数受限于五千牜指数生成子多数受限于一千:goto
r'''[[[
e script/辅助冫有限域本原根判定牜泛化梅森指数.py
view script/辅助冫有限域本原根判定.py

script.辅助冫有限域本原根判定牜泛化梅森指数
py -m nn_ns.app.debug_cmd   script.辅助冫有限域本原根判定牜泛化梅森指数 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.辅助冫有限域本原根判定牜泛化梅森指数:__doc__ -ht # -ff -df
py -m nn_ns.app.doctest_cmd script.辅助冫有限域本原根判定牜泛化梅森指数:__doc__ -ht >> /sdcard/0my_files/tmp/0tmp

[[
Mersenne_number
梅森数:(2**n-1)
Mersenne_prime
梅森素数:(2**p-1)
    p:梅森指数
==>>:
泛化梅森数[b]:(b**n-1)///(b-1)
泛化梅森素数[b]:(b**p-1)///(b-1)
    p[b]:泛化梅森指数
再泛化梅森数(k,b):(b**m**(k+1)-1)///(b**m**k-1)
再泛化梅森素数(k,b):(b**p**(k+1)-1)///(b**p**k-1)
    p(k,b):再泛化梅森指数
再三泛化梅森数(b):(b**e-1)///gcd((b**e-1),II[(b**(e///ep)-1) | [[ep:<-PRIMES][e%ep==0]]])
再三泛化梅森素数(b):同上
    e(b):再三泛化梅森指数
再四泛化梅森数(b):(b**e-1)///gcd((b**e-1),((II[(b**(e///ep)-1) | [[ep:<-PRIMES][e%ep==0]]])**(+oo)))
再四泛化梅森素数(b):同上
    e(b):再四泛化梅森指数



[b:<-[2..]][e:<-[2..]]:
    [(b**e-1)
    == (1+(b-1))**e-1
    == (1+e*(b-1)+kkk*(b-1)**2)-1
    == (e+kkk*(b-1))*(b-1)
    ]
    [((b**e-1)///(b-1)) == (e+kkk*(b-1))]
    [((b**e-1)///(b-1)) %e == kkk*(b-1)%e]
    !! [[b%e==1] <-> [(b-1)%e==0]]
    [[b%e==1] -> [((b**e-1)///(b-1)) %e == 0]]
[[b:<-[2..]] -> [e:<-[2..]] -> [b%e==1] -> [((b**e-1)///(b-1)) %e == 0]]
[(b**ep-1)%dp == 0][b%dp=!=1][is_prime_(ep)][is_prime_(dp)]:
    !! [(b**ep-1)%dp == 0]
    [b**ep%dp == 1]
    !! [b%dp=!=1]
    [gcd(phi(dp),ep) > 1]
    !! [is_prime_(ep)]
    [gcd(phi(dp),ep) == ep]
    [phi(dp)%ep==0]
    !! [is_prime_(dp)]
    [(dp-1)%ep==0]
    [dp%ep==1]
        #e.g. [269**347%13187==1==pow(269,347,13187)][1+38*347==13187]
[@[ep,dp::prime] -> @[b::int] -> [b%dp=!=1] -> [(b**ep-1)%dp == 0] -> [dp%ep==1]]
[@[ep,dp::prime] -> @[b::int] -> [b%dp=!=1] -> [dp%ep=!=1] -> [(b**ep-1)%dp =!= 0]]
    #_detect_b_psprime()/_try_div():goto

[b:<-[2..]][ep:<-[2..]]:
    [泛化梅森数(b,ep) =[def]= ((b**ep-1)///(b-1))]
[b:<-[2..]]:
    [泛化梅森指数[b] =[def]= {ep | [[ep:<-[2..]][is_prime_(泛化梅森数(b,ep))]]}]
    [@[ep :<- 泛化梅森指数[b]] -> [b%ep=!=1]]
    [@[ep :<- 泛化梅森指数[b]] -> [is_prime_(ep)]]
        #若考虑到b**ep是某有限域的规模，则要求b也是素数bp
            #view script/辅助冫有限域本原根判定.py

[b:<-[2..]][bases::[pint]]:
    [拟泛化梅森指数(b;bases) =[def]= {ep | [[ep:<-[2..]][is_prime_(ep)][is_SPRP_(bases;泛化梅森数(b,ep))]]}]
        # probable prime

[k:<-[0..]][b:<-[2..]][ep:<-[2..]]:
    [再泛化梅森数(k,b,ep) =[def]= ((b**ep**(k+1)-1)///(b**ep**k-1))]
[k:<-[0..]][b:<-[2..]]:
    [再泛化梅森指数(k,b) =[def]= {ep | [[ep:<-[2..]][is_prime_(再泛化梅森数(k,b,ep))]]}]
    [稠再泛化梅森指数(k,b) =[def]= {ep | [[ep:<-[2..]][@[_k:<-[0..=k]] -> [is_prime_(再泛化梅森数(_k,b,ep))]]]}]

    [稠再泛化梅森指数(k,b) == {ep | [[ep:<-[2..]][@[_k:<-[0..=k]] -> [ep <- 再泛化梅森指数(k,b)]]]}]
    [稠再泛化梅森指数(k,b) == /-\~ [再泛化梅森指数(_k,b) | [_k:<-[0..=k]]]]

    [泛化梅森指数[b] == 再泛化梅森指数(0,b) == 稠再泛化梅森指数(0,b)]
    [稠再泛化梅森指数(k+1,b) |<=| 稠再泛化梅森指数(k,b)]
[k:<-[0..]][b:<-[2..]][bases::[pint]]:
    [拟再泛化梅森指数(k,b;bases) =[def]= {ep | [[ep:<-[2..]][is_prime_(ep)][is_SPRP_(bases;再泛化梅森数(k,b,ep))]]}]
        # probable prime
    [拟稠再泛化梅森指数(k,b;bases) =[def]= {ep | [[ep:<-[2..]][is_prime_(ep)][[_k:<-[0..=k]] -> [is_SPRP_(bases;再泛化梅森数(_k,b,ep))]]]}]
        # probable prime



[b:<-[2..]][e:<-[2..]]:
    [再三泛化梅森数(b,e) =[def]= ((b**e-1)///gcd((b**e-1),II[(b**(e///ep)-1) | [[ep:<-PRIMES][e%ep==0]]]))]
[b:<-[2..]]:
    [再三泛化梅森指数(b) =[def]= {e | [[e:<-[2..]][(eq_one_ or is_prime_)(再三泛化梅森数(b,e))]]}]
    [稠再三泛化梅森指数(b) =[def]= {e | [[e:<-再三泛化梅森指数(b)][@[ep:<-PRIMES] -> [e%ep==0] -> [(e///ep) <- ({1} \-/ 稠再三泛化梅森指数(b))]]]}]

    [[k:<-[0..]] -> [{ep**(k+1) | [ep:<-再泛化梅森指数(k,b)]} |<=| 再三泛化梅森指数(b)]]
    [[k:<-[0..]] -> [{ep**(k+1) | [ep:<-稠再泛化梅森指数(k,b)]} |<=| 稠再三泛化梅森指数(b)]]
    [稠再三泛化梅森指数(b) |<=| 再三泛化梅森指数(b)]

[b:<-[2..]][bases::[pint]]:
    [拟再三泛化梅森指数(b;bases) =[def]= {e | [[e:<-[2..]][(eq_one_ or is_SPRP_)(bases;再三泛化梅森数(b,e))]]}]
        # probable prime
    [拟稠再三泛化梅森指数(b;bases) =[def]= {e | [[e:<-拟再三泛化梅森指数(b;bases)][@[ep:<-PRIMES] -> [e%ep==0] -> [(e///ep) <- ({1} \-/ 拟稠再三泛化梅森指数(b;bases))]]]}]
        # probable prime


#再三丷再四:再四 相当于 排除所有已知公因子
[b:<-[2..]][e:<-[2..]]:
    [再四泛化梅森数(b,e) =[def]= ((b**e-1)///gcd((b**e-1),(II[(b**(e///ep)-1) | [[ep:<-PRIMES][e%ep==0]]]**+oo)))]
[b:<-[2..]]:
    [再四泛化梅森指数(b) =[def]= {e | [[e:<-[2..]][(eq_one_ or is_prime_)(再四泛化梅森数(b,e))]]}]
    [稠再四泛化梅森指数(b) =[def]= {e | [[e:<-再四泛化梅森指数(b)][@[ep:<-PRIMES] -> [e%ep==0] -> [(e///ep) <- ({1} \-/ 稠再四泛化梅森指数(b))]]]}]

    [[k:<-[0..]] -> [{ep**(k+1) | [ep:<-再泛化梅森指数(k,b)]} |<=| 再四泛化梅森指数(b)]]
    [[k:<-[0..]] -> [{ep**(k+1) | [ep:<-稠再泛化梅森指数(k,b)]} |<=| 稠再四泛化梅森指数(b)]]
    [稠再四泛化梅森指数(b) |<=| 再四泛化梅森指数(b)]

    [再三泛化梅森指数(b) |<=| 再四泛化梅森指数(b)]
    [稠再三泛化梅森指数(b) |<=| 稠再四泛化梅森指数(b)]

[b:<-[2..]][bases::[pint]]:
    [拟再四泛化梅森指数(b;bases) =[def]= {e | [[e:<-[2..]][(eq_one_ or is_SPRP_)(bases;再四泛化梅森数(b,e))]]}]
        # probable prime
    [拟稠再四泛化梅森指数(b;bases) =[def]= {e | [[e:<-拟再四泛化梅森指数(b;bases)][@[ep:<-PRIMES] -> [e%ep==0] -> [(e///ep) <- ({1} \-/ 拟稠再四泛化梅森指数(b;bases))]]]}]
        # probable prime





[梅森数=[def]=(2**n-1)]
    # [b==2]
[梅森数==泛化梅森数[2]]

/sdcard/0my_files/book/math/factorint/snd/The new book of prime number records(3ed)(1996)(Ribenboim).djvu
page350[375/567]
[repunit=[def]=(10**n-1)///9]
    # [b==10]
[repunit==泛化梅森数[10]]

page351[376/567]
[(泛化梅森指数[10] /-\ [1..<23000]) == {2,19,23,317,1031}]

page352[377/567]
Table47. Primes of the form (a**n - 1)///(a - 1), а =!= 2,10.
[带星号『*』]: probable prime
    ???拟泛化梅森指数(b;bases)???
===
begin:Table47
===
a:n #行数==32-3[#1,2,10#]==29==22+7 # {4,8,9,16,25,27,32}#7*(Algebraic factors)=>无max_n
3:3,7,13, 71,103, 541,1091* 1367* 1627* 4177* 9011*9551*
4:2 Algebraic factors
5:3, 7,11,13,47,127,149,181, 619,929, 3407* 10949*
6:2, 3, 7,29, 71,127,271, 509,1049* 6389* 6883* 10613*
7:5,13,131,149,1699*
8:3 Algebraic factors
9:Algebraic factors
11:17,19, 73,139, 907* 1907* 2029* 4801* 5153* 10867*
12:2, 3, 5,19, 97,109, 317, 353, 701* 9739*
13:3,7,137, 283* 883* 991* 1021* 1193* 3671*
14:3, 7,19, 31,41,2687*
15:3,43, 73,487* 2579* 8741*
16:2 Algebraic factors
17:3,5,7,11,47,71,419,4799*
18:2
19:19, 31,47, 59, 61,107, 337* 1061*
20:3,11,17,1487*
21:3,11,17,43,271
22:2, 5, 79,101, 359* 857* 4463*
23:5,3181*
24:3, 5,19, 53, 71, 653* 661*
25:Algebraic factors
26:7,43, 347
27:3 Algebraic factors
28:2, 5,17,457* 1423*
29:5,151, 3719*
30:2,5,11,163,569*1789*
31:7,17, 31, 5581*
32:Algebraic factors
===
max n tested #行数==22==29-7
12006
#4
12238
12658
10738
#8
#9
11092
10486
9550
9282
8836
#16
8446
8286
8010
7872
8218
7698
7458
7918
#25
7498
7392
7186
6976
6826
#32
===
continued:Table47
===
a:n #行数==51-32==19==17+2 # {36,49}#2*(Algebraic factors)=>无max_n
33:3,197, 3581*
34:13,1492* 5851* 6379*
35:313* 1297*
36:2 Algebraic factors
37:13, 71,181,251,463* 521* 7321*
38:3, 7,401* 449*
39:349, 631* 4493*
40:2, 5, 7,19, 23,29, 541* 751* 1277*
41:3, 83, 269* 409* 1759*
42:2,1319*
43:5,13
44:5, 31,167
45:19, 53,167
46:2,7,19,67,211*433*
47:127
48:19,269* 349* 383* 1303*
49:Algebraic factors
50:3, 5,127,139, 347, 661* 2203*
51:none
===
max n tested #行数==17==19-2
6760
6568
6690
#36
7488
6562
6378
6636
2698
2788
2088
2140
2112
2136
2052
2016
#49
2520
2616
===
end:Table47
===

===
]]

py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   @list.枚举冫拟泛化梅森指数扌  --radix=2 --bases4SPRP=[2,3,5,7] --may_end4exp=100
[2, 3, 5, 7, 13, 17, 19, 31, 61, 89]
    vs:
view ../../python3_src/nn_ns/math_nn/numbers/Mersenne_exponents.py
    [2,3,5,7,13,17,19,31,61,89,107,127,521,607,1279,2203,2281,3217,4253,4423,9689,9941,11213,19937,21701,23209,44497,86243,110503,132049,216091,756839,859433,1257787,1398269,2976221,3021377,6972593,13466917,20996011,24036583,25964951,30402457,32582657,37156667,42643801,43112609,57885161        ,74207281,77232917,82589933]


py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   @list.枚举冫拟泛化梅森指数扌  --radix=10 --bases4SPRP=[2,3,5,7] --may_end4exp=1050
[2, 19, 23, 317, 1031]


[[
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数扌  --bases4SPRP=[2,3,5,7] --may_end4exp=10000  --radix=3
3
7
13
71
103
541
1091
1367
1627
4177
... ...
... ...
KeyboardInterrupt
]]
[[
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数扌  --bases4SPRP=[2,3,5,7] --may_end4exp=10000  --radix=5
3
7
11
13
47
127
149
181
619
929
^C(5, (2, 3, 5, 7), 2927)
KeyboardInterrupt
... ...
... ...
]]
[[
===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬扌  --bases4SPRP=[2,3,5,7] --begin4radix=2  --end4radix=10  --begin4exp=2  --end4exp=100
(2, [2, 3, 5, 7, 13, 17, 19, 31, 61, 89])
(3, [3, 7, 13, 71])
(5, [3, 7, 11, 13, 47])
(7, [5, 13])
]]
[[
py_adhoc_call   seed.math.prime_pint.num_primes_le   @num_primes_le__via_the_Meissel_formula_1871_ +with_stats  =1000
(168, (0.0005000769999999877, 9, 10))
    小于1000=>共168个素数
===
%s/^\d\+: \.\.\. \.\.\.$\n//g
%s/\n\n    resting\.\.\.\n\n//g
    补偿:[
^(\d\+, \[])$
    补偿:\]
===
py_adhoc_call { +flush4print +to_show_timedelta }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬扌  --bases4SPRP=[2,3,5,7] --begin4radix=2  --end4radix=1000  --begin4exp=2  --end4exp=1000 >> /sdcard/0my_files/tmp/0tmp
===
0:duration: 0.3620710009999999 *(unit: 0:00:01)
1:duration: 0.7301095400000002 *(unit: 0:00:01)
2:duration: 2.24135715 *(unit: 0:00:01)
3:duration: 3.661958782 *(unit: 0:00:01)
4:duration: 7.073457253000001 *(unit: 0:00:01)
5:duration: 9.282102076000001 *(unit: 0:00:01)
6:duration: 10.902588422000001 *(unit: 0:00:01)
7:duration: 12.133398024999998 *(unit: 0:00:01)
8:duration: 14.370178727999999 *(unit: 0:00:01)
9:duration: 17.713628279000005 *(unit: 0:00:01)
10:duration: 18.511637183999994 *(unit: 0:00:01)
11:duration: 21.692632145000005 *(unit: 0:00:01)
12:duration: 23.145205737000012 *(unit: 0:00:01)
13:duration: 23.861931581999983 *(unit: 0:00:01)
14:duration: 25.442620913000013 *(unit: 0:00:01)
15:duration: 27.754707515999996 *(unit: 0:00:01)
16:duration: 30.178609069999993 *(unit: 0:00:01)
17:duration: 31.837544439000027 *(unit: 0:00:01)
18:duration: 32.85282607600004 *(unit: 0:00:01)
19:duration: 34.036782776999985 *(unit: 0:00:01)
20:duration: 34.692685154 *(unit: 0:00:01)
21:duration: 37.478699156999994 *(unit: 0:00:01)
22:duration: 37.813210174000005 *(unit: 0:00:01)
23:duration: 40.073726542999964 *(unit: 0:00:01)
24:duration: 41.65375197599997 *(unit: 0:00:01)
25:duration: 43.95267550699998 *(unit: 0:00:01)
26:duration: 43.43998133499997 *(unit: 0:00:01)
27:duration: 44.301343563000046 *(unit: 0:00:01)
28:duration: 44.79231060500001 *(unit: 0:00:01)
29:duration: 45.69426415800001 *(unit: 0:00:01)
30:duration: 49.11614762800002 *(unit: 0:00:01)
31:duration: 50.065762898 *(unit: 0:00:01)
32:duration: 51.39620293300004 *(unit: 0:00:01)
33:duration: 51.935898216000055 *(unit: 0:00:01)
34:duration: 54.06671382100001 *(unit: 0:00:01)
35:duration: 54.40305320499988 *(unit: 0:00:01)
36:duration: 55.575439751999966 *(unit: 0:00:01)
37:duration: 56.897222803999966 *(unit: 0:00:01)
38:duration: 57.86875991900001 *(unit: 0:00:01)
39:duration: 58.73305737299984 *(unit: 0:00:01)
40:duration: 59.85344100200018 *(unit: 0:00:01)
41:duration: 60.23417035399984 *(unit: 0:00:01)
42:duration: 62.14597532800008 *(unit: 0:00:01)
43:duration: 62.59414144399989 *(unit: 0:00:01)
44:duration: 63.651008191000074 *(unit: 0:00:01)
45:duration: 64.47178314500002 *(unit: 0:00:01)
46:duration: 65.45931893400007 *(unit: 0:00:01)
^C(223, (2, 3, 5, 7), 433)
KeyboardInterrupt
... ...
... ...
===
py_adhoc_call { +flush4print +to_show_timedelta +to_postpone_KeyboardInterrupt_until_yield --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n' }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬扌  --bases4SPRP=[2,3,5,7] --begin4radix=211+1  --end4radix=1000  --begin4exp=2  --end4exp=1000 >> /sdcard/0my_files/tmp/0tmp
===
0:duration: 68.893796788 *(unit: 0:00:01)
1:duration: 68.53806754600001 *(unit: 0:00:01)
2:duration: 68.75304249700002 *(unit: 0:00:01)
3:duration: 69.37098065099997 *(unit: 0:00:01)
4:duration: 70.37041770299999 *(unit: 0:00:01)
5:duration: 70.83144625799997 *(unit: 0:00:01)
6:duration: 72.98009116900005 *(unit: 0:00:01)
7:duration: 79.03883891600003 *(unit: 0:00:01)
8:duration: 73.98508932899995 *(unit: 0:00:01)
9:duration: 74.87257086399995 *(unit: 0:00:01)
10:duration: 81.19582721099994 *(unit: 0:00:01)
11:duration: 76.17989172 *(unit: 0:00:01)
12:duration: 76.6384757909999 *(unit: 0:00:01)
13:duration: 79.21085950999998 *(unit: 0:00:01)
14:duration: 78.29763617200001 *(unit: 0:00:01)
15:duration: 80.27057818200001 *(unit: 0:00:01)
16:duration: 80.78843003300017 *(unit: 0:00:01)
17:duration: 82.82228076399997 *(unit: 0:00:01)
18:duration: 81.602756344 *(unit: 0:00:01)
19:duration: 83.54371213400009 *(unit: 0:00:01)
20:duration: 84.39246300699983 *(unit: 0:00:01)
21:duration: 86.10903475999999 *(unit: 0:00:01)
22:duration: 85.59945562500002 *(unit: 0:00:01)
23:duration: 86.13185313300005 *(unit: 0:00:01)
24:duration: 87.0467425469999 *(unit: 0:00:01)
25:duration: 87.67762852799979 *(unit: 0:00:01)
26:duration: 88.21369291999986 *(unit: 0:00:01)
27:duration: 88.74048868599994 *(unit: 0:00:01)
28:duration: 89.62819048100027 *(unit: 0:00:01)
29:duration: 89.97035895199997 *(unit: 0:00:01)
30:duration: 90.81573777499989 *(unit: 0:00:01)
31:duration: 91.16269388699993 *(unit: 0:00:01)
32:duration: 92.02935569100009 *(unit: 0:00:01)
33:duration: 93.4418580030001 *(unit: 0:00:01)
34:duration: 175.5009556340001 *(unit: 0:00:01)
35:duration: 177.45373015699988 *(unit: 0:00:01)
36:duration: 180.91125786799967 *(unit: 0:00:01)
37:duration: 178.74445673000037 *(unit: 0:00:01)
38:duration: 179.81107851599972 *(unit: 0:00:01)
39:duration: 180.8447294399998 *(unit: 0:00:01)
40:duration: 182.1792244510002 *(unit: 0:00:01)
41:duration: 185.59693175699977 *(unit: 0:00:01)
42:duration: 185.5324835399997 *(unit: 0:00:01)
43:duration: 183.95753071699983 *(unit: 0:00:01)
44:duration: 186.0655774400002 *(unit: 0:00:01)
45:duration: 187.4417103679998 *(unit: 0:00:01)
46:duration: 187.94164576899948 *(unit: 0:00:01)
47:duration: 189.46277723100047 *(unit: 0:00:01)
48:duration: 190.3675446369998 *(unit: 0:00:01)
49:duration: 190.93348162999973 *(unit: 0:00:01)
50:duration: 193.27655374500046 *(unit: 0:00:01)
51:duration: 193.641572257 *(unit: 0:00:01)
52:duration: 196.31063806699967 *(unit: 0:00:01)
53:duration: 206.17466548999982 *(unit: 0:00:01)
54:duration: 199.0183566149999 *(unit: 0:00:01)
55:duration: 200.3898963239999 *(unit: 0:00:01)
56:duration: 200.70030938299988 *(unit: 0:00:01)
57:duration: 201.0800283819999 *(unit: 0:00:01)
58:duration: 202.18273724699975 *(unit: 0:00:01)
59:duration: 203.52815291800016 *(unit: 0:00:01)
60:duration: 204.5042884249997 *(unit: 0:00:01)
61:duration: 205.19820525399973 *(unit: 0:00:01)
62:duration: 205.42318559499927 *(unit: 0:00:01)
63:duration: 218.21364664999965 *(unit: 0:00:01)
64:duration: 207.87047379199976 *(unit: 0:00:01)
65:duration: 209.39040114599993 *(unit: 0:00:01)
66:duration: 208.16022200600128 *(unit: 0:00:01)
67:duration: 209.88232941000024 *(unit: 0:00:01)
68:duration: 215.3780226609997 *(unit: 0:00:01)
69:duration: 214.47370380099892 *(unit: 0:00:01)
70:duration: 212.13976251499844 *(unit: 0:00:01)
71:duration: 213.49995661399953 *(unit: 0:00:01)
72:duration: 215.2535393879989 *(unit: 0:00:01)
73:duration: 228.82732700400084 *(unit: 0:00:01)
74:duration: 216.39436763599952 *(unit: 0:00:01)
75:duration: 216.62905319200036 *(unit: 0:00:01)
76:duration: 217.34803789299986 *(unit: 0:00:01)
77:duration: 218.47156292100044 *(unit: 0:00:01)
78:duration: 220.02598150499944 *(unit: 0:00:01)
79:duration: 221.4242034580002 *(unit: 0:00:01)
80:duration: 232.63660276100018 *(unit: 0:00:01)
81:duration: 224.39477520699984 *(unit: 0:00:01)
82:duration: 232.25596779499938 *(unit: 0:00:01)
83:duration: 224.89520204600012 *(unit: 0:00:01)
84:duration: 225.66366580700014 *(unit: 0:00:01)
85:duration: 242.45367462099966 *(unit: 0:00:01)
86:duration: 228.6644807190005 *(unit: 0:00:01)
87:duration: 156.60128318900024 *(unit: 0:00:01)
88:duration: 173.01983478299917 *(unit: 0:00:01)
89:duration: 228.89900199300064 *(unit: 0:00:01)
90:duration: 230.7546869889993 *(unit: 0:00:01)
91:duration: 126.87866917700012 *(unit: 0:00:01)
92:duration: 131.24943924800027 *(unit: 0:00:01)
93:duration: 123.94592872499925 *(unit: 0:00:01)
94:duration: 128.41359085600016 *(unit: 0:00:01)
95:duration: 124.84070643700034 *(unit: 0:00:01)
96:duration: 132.88908069699937 *(unit: 0:00:01)
97:duration: 125.27345459599928 *(unit: 0:00:01)
98:duration: 126.03283512300004 *(unit: 0:00:01)
^C
... postpone_KeyboardInterrupt_until_yield ...
99:duration: 129.75162369699865 *(unit: 0:00:01)
KeyboardInterrupt
... ...
... ...
===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,_iter_apply_case4trial_division_to_outputs  --case4trial_division:bit_length
    empty@([2..=853]x[2..=1000])
===
py_adhoc_call { +flush4print +to_show_timedelta +to_postpone_KeyboardInterrupt_until_yield --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n' }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7] --begin4radix=853+1  --end4radix=1000  --begin4exp=2  --end4exp=1000 >> /sdcard/0my_files/tmp/0tmp
===
0:duration: 83.384454245 *(unit: 0:00:01)
1:duration: 82.165606584 *(unit: 0:00:01)
2:duration: 80.947326904 *(unit: 0:00:01)
3:duration: 84.40138196699996 *(unit: 0:00:01)
4:duration: 79.31355188700002 *(unit: 0:00:01)
5:duration: 84.367031 *(unit: 0:00:01)
6:duration: 78.94086642399998 *(unit: 0:00:01)
7:duration: 85.50002195800005 *(unit: 0:00:01)
8:duration: 90.17214957600004 *(unit: 0:00:01)
9:duration: 82.52912661699997 *(unit: 0:00:01)
10:duration: 92.053205649 *(unit: 0:00:01)
11:duration: 80.880725891 *(unit: 0:00:01)
12:duration: 95.11302011700002 *(unit: 0:00:01)
13:duration: 88.40764682199983 *(unit: 0:00:01)
14:duration: 84.74063308400014 *(unit: 0:00:01)
15:duration: 97.20416877799994 *(unit: 0:00:01)
16:duration: 93.49455654199983 *(unit: 0:00:01)
17:duration: 84.41653596999981 *(unit: 0:00:01)
18:duration: 71.03421771700005 *(unit: 0:00:01)
19:duration: 98.58232593499997 *(unit: 0:00:01)
20:duration: 91.03634376100013 *(unit: 0:00:01)
21:duration: 0.00275230800002646 *(unit: 0:00:01)
===
view /sdcard/0my_files/tmp/0tmp
===
#在下面两标记间:共:168+3+3==174行:
#def _iter_outputs5doc(marker):
###begin:output_1000x1000
(2, [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607])
(3, [3, 7, 13, 71, 103, 541])
(5, [3, 7, 11, 13, 47, 127, 149, 181, 619, 929])
(7, [5, 13, 131, 149])
(11, [17, 19, 73, 139, 907])
(13, [5, 7, 137, 283, 883, 991])
(17, [3, 5, 7, 11, 47, 71, 419])
(19, [19, 31, 47, 59, 61, 107, 337])
(23, [5])
(29, [5, 151])
(31, [7, 17, 31])
(37, [13, 71, 181, 251, 463, 521])
(41, [3, 83, 269, 409])
(43, [5, 13])
(47, [127])
(53, [11, 31, 41])
(59, [3, 13, 479])
(61, [7, 37, 107, 769])
(67, [19, 367])
(71, [3, 31, 41, 157])
(73, [5, 7])
(79, [5, 109, 149, 659])
(83, [5])
(89, [3, 7, 43, 47, 71, 109, 571])
(97, [17, 37])
(101, [3, 337, 677])
(103, [19, 313])
(107, [17])
(109, [17])
(113, [23, 37])
(127, [5, 23, 31, 167])
(131, [3, 31, 263])
(137, [11, 19])
(139, [163, 173])
(149, [7, 13, 17, 317])
(151, [13, 29, 127])
(157, [17, 107])
(163, [7, 43, 241])
(167, [3, 19, 373])
(173, [3])
(179, [19])
(181, [17, 19, 157])
(191, [17])
(193, [5, 317])
(197, [31, 47, 283])
(199, [577])
(211, [41])
    # 以上:PRIMES[0:47]
    # 第一次:KeyboardInterrupt
    # 以下:PRIMES[47:...?168+1]
(223, [239, 241, 449])
(227, [5])
(229, [11, 29])
(233, [113])
(239, [5, 109])
(241, [17, 31])
(251, [7, 13, 17, 89, 227, 461])
(257, [23, 59, 487, 967])
(263, [5, 19])
(269, [])
(271, [41, 79, 97, 313, 709, 829])
(277, [5, 19, 109])
(281, [])
(283, [29, 31, 719])
(293, [3, 31])
(307, [53])
(311, [])
(313, [109, 173])
(317, [157])
(331, [])
(337, [5, 19])
(347, [337, 401])
(349, [7, 17, 107])
(353, [7])
(359, [5, 59, 101, 383])
(367, [239])
(373, [5, 13, 23])
(379, [17, 31])
(383, [3, 17, 199, 307])
(389, [11, 19])
(397, [5, 13])
(401, [127, 199])
(409, [43])
(419, [17, 347])
(421, [71, 97, 103, 109])
(431, [17, 19])
(433, [41, 599])
(439, [5, 41, 47, 151])
(443, [47])
(449, [19, 167])
(457, [5, 43])
(461, [7, 31, 59, 307, 521])
(463, [313, 397])
(467, [11])
(479, [5])
(487, [])
(491, [31, 67])
(499, [])
(503, [5, 37])
(509, [19, 181])
(521, [19, 139])
(523, [7, 19, 37, 227])
(541, [])
(547, [19, 503, 751])
(557, [5, 17])
(563, [5, 37, 263])
(569, [31])
(571, [17, 167, 181])
(577, [109, 139, 227])
(587, [29, 47])
(593, [83, 131, 197])
(599, [7, 17])
(601, [])
(607, [887])
(613, [131])
(617, [5, 101, 103, 313, 317])
(619, [11])
(631, [])
(641, [113, 613])
(643, [13, 541])
(647, [7])
(653, [17, 43, 59, 211])
(659, [29, 409])
(661, [223, 947])
(673, [19, 193])
(677, [3, 41, 107])
(683, [])
(691, [])
(701, [3])
(709, [11, 17, 37, 43, 257])
(719, [113, 827])
(727, [347])
(733, [67, 757])
(739, [])
(743, [3, 191, 227])
(751, [967])
(757, [37, 449])
(761, [3, 103, 541])
(769, [13])
(773, [3])
(787, [11, 19, 37])
(797, [19, 157, 383, 661])
(809, [107, 911])
(811, [19])
(821, [43, 709])
(823, [107])
(827, [3, 929])
(829, [211])
(839, [3, 103])
(853, [13, 619])
    # 以上:PRIMES[0:147]+[case4trial_division:="none"] # _iter_apply_case4trial_division_to_outputs=>empty
    # 第二次:KeyboardInterrupt
    # 以下:PRIMES[147:...?168+1]+[case4trial_division:="bit_length"]
(857, [3, 19, 23])
(859, [29, 673])
(863, [7, 151])
(877, [31, 43])
(881, [])
(883, [131])
(887, [])
(907, [])
(911, [3, 47, 487])
(919, [5, 71, 131])
(929, [53, 79, 167, 571])
(937, [61])
(941, [7, 277])
(947, [7, 41, 71])
(953, [131])
(967, [5, 227, 503])
(971, [19, 61])
(977, [211, 311])
(983, [199])
(991, [31])
(997, [23, 821])
###end:output_1000x1000
===
grep '^([0-9]*, \[\])$' script/辅助冫有限域本原根判定牜泛化梅森指数.py
    #15行:
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,_sorted_outputs5doc__by_len_exps
    #269,23,29,31,7,11,3,17,5,2
    #{269:0,23:1,29:2,31:3,7:4,11:5,3:6,17:7,5:10,2:14}#{min-radix:len(exps)}@output_1000x1000
    # [269, 281, 311, 331, 487, 499, 541, 601, 631, 683, 691, 739, 881, 887, 907]=>empty@[2..<1000]
    # 见下面:更新数据:goto
    #       见下面: => [拟泛化梅森指数(269;[2,3,5,7]) /-\ [2..<5000] == {/}]
    (269, [])
    (281, [])
    (311, [])
    (331, [])
    (487, [])
    (499, [])
    (541, [])
    (601, [])
    (631, [])
    (683, [])
    (691, [])
    (739, [])
    (881, [])
    (887, [])
    (907, [])
    (23, [5])
    (47, [127])
    (83, [5])
    (107, [17])
    (109, [17])
    (173, [3])
    (179, [19])
    (191, [17])
    (199, [577])
    (211, [41])
    (227, [5])
    (233, [113])
    (307, [53])
    (317, [157])
    (353, [7])
    (367, [239])
    (409, [43])
    (443, [47])
    (467, [11])
    (479, [5])
    (569, [31])
    (607, [887])
    (613, [131])
    (619, [11])
    (647, [7])
    (701, [3])
    (727, [347])
    (751, [967])
    (769, [13])
    (773, [3])
    (811, [19])
    (823, [107])
    (829, [211])
    (883, [131])
    (937, [61])
    (953, [131])
    (983, [199])
    (991, [31])
    (29, [5, 151])
    (43, [5, 13])
    (67, [19, 367])
    (73, [5, 7])
    (97, [17, 37])
    (103, [19, 313])
    (113, [23, 37])
    (137, [11, 19])
    (139, [163, 173])
    (157, [17, 107])
    (193, [5, 317])
    (229, [11, 29])
    (239, [5, 109])
    (241, [17, 31])
    (263, [5, 19])
    (293, [3, 31])
    (313, [109, 173])
    (337, [5, 19])
    (347, [337, 401])
    (379, [17, 31])
    (389, [11, 19])
    (397, [5, 13])
    (401, [127, 199])
    (419, [17, 347])
    (431, [17, 19])
    (433, [41, 599])
    (449, [19, 167])
    (457, [5, 43])
    (463, [313, 397])
    (491, [31, 67])
    (503, [5, 37])
    (509, [19, 181])
    (521, [19, 139])
    (557, [5, 17])
    (587, [29, 47])
    (599, [7, 17])
    (641, [113, 613])
    (643, [13, 541])
    (659, [29, 409])
    (661, [223, 947])
    (673, [19, 193])
    (719, [113, 827])
    (733, [67, 757])
    (757, [37, 449])
    (809, [107, 911])
    (821, [43, 709])
    (827, [3, 929])
    (839, [3, 103])
    (853, [13, 619])
    (859, [29, 673])
    (863, [7, 151])
    (877, [31, 43])
    (941, [7, 277])
    (971, [19, 61])
    (977, [211, 311])
    (997, [23, 821])
    (31, [7, 17, 31])
    (53, [11, 31, 41])
    (59, [3, 13, 479])
    (101, [3, 337, 677])
    (131, [3, 31, 263])
    (151, [13, 29, 127])
    (163, [7, 43, 241])
    (167, [3, 19, 373])
    (181, [17, 19, 157])
    (197, [31, 47, 283])
    (223, [239, 241, 449])
    (277, [5, 19, 109])
    (283, [29, 31, 719])
    (349, [7, 17, 107])
    (373, [5, 13, 23])
    (547, [19, 503, 751])
    (563, [5, 37, 263])
    (571, [17, 167, 181])
    (577, [109, 139, 227])
    (593, [83, 131, 197])
    (677, [3, 41, 107])
    (743, [3, 191, 227])
    (761, [3, 103, 541])
    (787, [11, 19, 37])
    (857, [3, 19, 23])
    (911, [3, 47, 487])
    (919, [5, 71, 131])
    (947, [7, 41, 71])
    (967, [5, 227, 503])
    (7, [5, 13, 131, 149])
    (41, [3, 83, 269, 409])
    (61, [7, 37, 107, 769])
    (71, [3, 31, 41, 157])
    (79, [5, 109, 149, 659])
    (127, [5, 23, 31, 167])
    (149, [7, 13, 17, 317])
    (257, [23, 59, 487, 967])
    (359, [5, 59, 101, 383])
    (383, [3, 17, 199, 307])
    (421, [71, 97, 103, 109])
    (439, [5, 41, 47, 151])
    (523, [7, 19, 37, 227])
    (653, [17, 43, 59, 211])
    (797, [19, 157, 383, 661])
    (929, [53, 79, 167, 571])
    (11, [17, 19, 73, 139, 907])
    (461, [7, 31, 59, 307, 521])
    (617, [5, 101, 103, 313, 317])
    (709, [11, 17, 37, 43, 257])
    (3, [3, 7, 13, 71, 103, 541])
    (13, [5, 7, 137, 283, 883, 991])
    (37, [13, 71, 181, 251, 463, 521])
    (251, [7, 13, 17, 89, 227, 461])
    (271, [41, 79, 97, 313, 709, 829])
    (17, [3, 5, 7, 11, 47, 71, 419])
    (19, [19, 31, 47, 59, 61, 107, 337])
    (89, [3, 7, 43, 47, 71, 109, 571])
    (5, [3, 7, 11, 13, 47, 127, 149, 181, 619, 929])
    (2, [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607])

===
TODO: [269, 281, 311, 331, 487, 499, 541, 601, 631, 683, 691, 739, 881, 887, 907] 求出三个相应指数
    见下面:更新数据
        只是稍微尝试一下，感觉会很耗时...
def 枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌(*, bases4SPRP, radix2begin4exp, num_exps_per_radix=1, case4trial_division='none', verbose=False):
py_adhoc_call { +flush4print +to_show_timedelta +to_postpone_KeyboardInterrupt_until_yield --may_args4PeriodicToilLeisureTime='(120,120)' --may_prompt_string6resting:$'\n\n    resting...\n\n' }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='dict.fromkeys([269, 281, 311, 331, 487, 499, 541, 601, 631, 683, 691, 739, 881, 887, 907], 1000)'  >> /sdcard/0my_files/tmp/0tmp
{269:1000, 281:1000, 311:1000, 331:1000, 487:1000, 499:1000, 541:1000, 601:1000, 631:1000, 683:1000, 691:1000, 739:1000, 881:1000, 887:1000, 907:1000}
===
#fail: (269, (2, 3, 5, 7), -1009)
#fail: (269, (2, 3, 5, 7), -1013)
#fail: (269, (2, 3, 5, 7), -1019)
#fail: (269, (2, 3, 5, 7), -1021)
... ...
... ...
#fail: (269, (2, 3, 5, 7), -2543)
#fail: (269, (2, 3, 5, 7), -2549)
#fail: (269, (2, 3, 5, 7), -2551)
!!!manaully-kill!!!
===
only:269:
    ++verbose@_try_div() to show divisor
    -to_postpone_KeyboardInterrupt_until_yield
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(120,120)' --may_prompt_string6resting:$'\n\n    resting...\n\n' }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='{269:2551+1}'  >> /sdcard/0my_files/tmp/0tmp
#start: (269, 2552)
#fail: (269, (2, 3, 5, 7), -2557)
#fail: (269, (2, 3, 5, 7), -2579)
#fail: (269, (2, 3, 5, 7), -2591)
#fail: (269, (2, 3, 5, 7), -2593)
#[divisor==36527]@ ((2, 3, 5, 7), (269, 2609))
#fail: (269, (2, 3, 5, 7), -2609)
#fail: (269, (2, 3, 5, 7), -2617)
#[divisor==15727]@ ((2, 3, 5, 7), (269, 2621))
#fail: (269, (2, 3, 5, 7), -2621)
#fail: (269, (2, 3, 5, 7), -2633)
#fail: (269, (2, 3, 5, 7), -2647)
#fail: (269, (2, 3, 5, 7), -2657)
#fail: (269, (2, 3, 5, 7), -2659)
#[divisor==111847]@ ((2, 3, 5, 7), (269, 2663))
#fail: (269, (2, 3, 5, 7), -2663)
#[divisor==42737]@ ((2, 3, 5, 7), (269, 2671))
#fail: (269, (2, 3, 5, 7), -2671)
#fail: (269, (2, 3, 5, 7), -2677)
#fail: (269, (2, 3, 5, 7), -2683)
#fail: (269, (2, 3, 5, 7), -2687)
#fail: (269, (2, 3, 5, 7), -2689)
#[divisor==70019]@ ((2, 3, 5, 7), (269, 2693))
#fail: (269, (2, 3, 5, 7), -2693)
#fail: (269, (2, 3, 5, 7), -2699)
#fail: (269, (2, 3, 5, 7), -2707)
#fail: (269, (2, 3, 5, 7), -2711)
#fail: (269, (2, 3, 5, 7), -2713)
#fail: (269, (2, 3, 5, 7), -2719)
#fail: (269, (2, 3, 5, 7), -2729)
#fail: (269, (2, 3, 5, 7), -2731)
#[divisor==5483]@ ((2, 3, 5, 7), (269, 2741))
#fail: (269, (2, 3, 5, 7), -2741)
#fail: (269, (2, 3, 5, 7), -2749)
#[divisor==5507]@ ((2, 3, 5, 7), (269, 2753))
#fail: (269, (2, 3, 5, 7), -2753)
#fail: (269, (2, 3, 5, 7), -2767)
#fail: (269, (2, 3, 5, 7), -2777)
#fail: (269, (2, 3, 5, 7), -2789)
#fail: (269, (2, 3, 5, 7), -2791)
#[divisor==44753]@ ((2, 3, 5, 7), (269, 2797))
#fail: (269, (2, 3, 5, 7), -2797)
#fail: (269, (2, 3, 5, 7), -2801)
#[divisor==61667]@ ((2, 3, 5, 7), (269, 2803))
#fail: (269, (2, 3, 5, 7), -2803)
#fail: (269, (2, 3, 5, 7), -2819)
#fail: (269, (2, 3, 5, 7), -2833)
#fail: (269, (2, 3, 5, 7), -2837)
#fail: (269, (2, 3, 5, 7), -2843)
#[divisor==79829]@ ((2, 3, 5, 7), (269, 2851))
#fail: (269, (2, 3, 5, 7), -2851)
#fail: (269, (2, 3, 5, 7), -2857)
#fail: (269, (2, 3, 5, 7), -2861)
#[divisor==34549]@ ((2, 3, 5, 7), (269, 2879))
#fail: (269, (2, 3, 5, 7), -2879)
#fail: (269, (2, 3, 5, 7), -2887)
#fail: (269, (2, 3, 5, 7), -2897)
#[divisor==58061]@ ((2, 3, 5, 7), (269, 2903))
#fail: (269, (2, 3, 5, 7), -2903)
#fail: (269, (2, 3, 5, 7), -2909)
#fail: (269, (2, 3, 5, 7), -2917)
#fail: (269, (2, 3, 5, 7), -2927)
#fail: (269, (2, 3, 5, 7), -2939)
#fail: (269, (2, 3, 5, 7), -2953)
#fail: (269, (2, 3, 5, 7), -2957)
#[divisor==5927]@ ((2, 3, 5, 7), (269, 2963))
#fail: (269, (2, 3, 5, 7), -2963)
#[divisor==5939]@ ((2, 3, 5, 7), (269, 2969))
#fail: (269, (2, 3, 5, 7), -2969)
#fail: (269, (2, 3, 5, 7), -2971)
#[divisor==251917]@ ((2, 3, 5, 7), (269, 2999))
#fail: (269, (2, 3, 5, 7), -2999)
#[divisor==30011]@ ((2, 3, 5, 7), (269, 3001))
#fail: (269, (2, 3, 5, 7), -3001)
#fail: (269, (2, 3, 5, 7), -3011)
#fail: (269, (2, 3, 5, 7), -3019)
#[divisor==36277]@ ((2, 3, 5, 7), (269, 3023))
#fail: (269, (2, 3, 5, 7), -3023)
#[divisor==12149]@ ((2, 3, 5, 7), (269, 3037))
#fail: (269, (2, 3, 5, 7), -3037)
#[divisor==24329]@ ((2, 3, 5, 7), (269, 3041))
#fail: (269, (2, 3, 5, 7), -3041)
#fail: (269, (2, 3, 5, 7), -3049)
#fail: (269, (2, 3, 5, 7), -3061)
#[divisor==12269]@ ((2, 3, 5, 7), (269, 3067))
#fail: (269, (2, 3, 5, 7), -3067)
#fail: (269, (2, 3, 5, 7), -3079)
#fail: (269, (2, 3, 5, 7), -3083)
#fail: (269, (2, 3, 5, 7), -3089)
#fail: (269, (2, 3, 5, 7), -3109)
#[divisor==24953]@ ((2, 3, 5, 7), (269, 3119))
#fail: (269, (2, 3, 5, 7), -3119)
#fail: (269, (2, 3, 5, 7), -3121)
#fail: (269, (2, 3, 5, 7), -3137)
#[divisor==75913]@ ((2, 3, 5, 7), (269, 3163))
#fail: (269, (2, 3, 5, 7), -3163)
#fail: (269, (2, 3, 5, 7), -3167)
!!!manaully-kill!!!

???269@[2..<3000]还没有，不知道还有没有...
===
[bp**ep%divisor == 1]
[b**ep%dp == 1][b%dp=!=1][is_prime_(ep)][is_prime_(dp)]:
    !! [b**ep%dp == 1][b%dp=!=1]
    [gcd(phi(dp),ep) > 1]
    !! [is_prime_(ep)]
    [gcd(phi(dp),ep) == ep]
    [phi(dp)%ep==0]
    !! [is_prime_(dp)]
    [(dp-1)%ep==0]
    [dp%ep==1]
        #e.g. [269**347%13187==1==pow(269,347,13187)][1+38*347==13187]
[269-1==288==2*2*67]
==>>:
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(120,120)' --may_prompt_string6resting:$'\n\n    resting...\n\n' }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='{269:2}'  >> /sdcard/0my_files/tmp/0tmp
#start: (269, 2)
#[divisor==2]@ (269, 2)
#fail: (269, (2, 3, 5, 7), -2)
#[divisor==13]@ ((2, 3, 5, 7), (269, 3))
#fail: (269, (2, 3, 5, 7), -3)
#[divisor==11]@ ((2, 3, 5, 7), (269, 5))
#fail: (269, (2, 3, 5, 7), -5)
#[divisor==43]@ ((2, 3, 5, 7), (269, 7))
#fail: (269, (2, 3, 5, 7), -7)
#[divisor==23]@ ((2, 3, 5, 7), (269, 11))
#fail: (269, (2, 3, 5, 7), -11)
#fail: (269, (2, 3, 5, 7), -13)
#[divisor==307]@ ((2, 3, 5, 7), (269, 17))
#fail: (269, (2, 3, 5, 7), -17)
#fail: (269, (2, 3, 5, 7), -19)
#[divisor==47]@ ((2, 3, 5, 7), (269, 23))
#fail: (269, (2, 3, 5, 7), -23)
#[divisor==349]@ ((2, 3, 5, 7), (269, 29))
#fail: (269, (2, 3, 5, 7), -29)
#fail: (269, (2, 3, 5, 7), -31)
#fail: (269, (2, 3, 5, 7), -37)
#fail: (269, (2, 3, 5, 7), -41)
#[divisor==173]@ ((2, 3, 5, 7), (269, 43))
#fail: (269, (2, 3, 5, 7), -43)
#fail: (269, (2, 3, 5, 7), -47)
#fail: (269, (2, 3, 5, 7), -53)
#fail: (269, (2, 3, 5, 7), -59)
#[divisor==977]@ ((2, 3, 5, 7), (269, 61))
#fail: (269, (2, 3, 5, 7), -61)
#[divisor==67]@ (269, 67)
#fail: (269, (2, 3, 5, 7), -67)
#fail: (269, (2, 3, 5, 7), -71)
#fail: (269, (2, 3, 5, 7), -73)
#fail: (269, (2, 3, 5, 7), -79)
#fail: (269, (2, 3, 5, 7), -83)
#fail: (269, (2, 3, 5, 7), -89)
#[divisor==389]@ ((2, 3, 5, 7), (269, 97))
#fail: (269, (2, 3, 5, 7), -97)
#fail: (269, (2, 3, 5, 7), -101)
#fail: (269, (2, 3, 5, 7), -103)
#[divisor==2141]@ ((2, 3, 5, 7), (269, 107))
#fail: (269, (2, 3, 5, 7), -107)
#fail: (269, (2, 3, 5, 7), -109)
#fail: (269, (2, 3, 5, 7), -113)
#fail: (269, (2, 3, 5, 7), -127)
#[divisor==263]@ ((2, 3, 5, 7), (269, 131))
#fail: (269, (2, 3, 5, 7), -131)
#[divisor==823]@ ((2, 3, 5, 7), (269, 137))
#fail: (269, (2, 3, 5, 7), -137)
#[divisor==7229]@ ((2, 3, 5, 7), (269, 139))
#fail: (269, (2, 3, 5, 7), -139)
#[divisor==1193]@ ((2, 3, 5, 7), (269, 149))
#fail: (269, (2, 3, 5, 7), -149)
#fail: (269, (2, 3, 5, 7), -151)
#[divisor==1571]@ ((2, 3, 5, 7), (269, 157))
#fail: (269, (2, 3, 5, 7), -157)
#[divisor==653]@ ((2, 3, 5, 7), (269, 163))
#fail: (269, (2, 3, 5, 7), -163)
#[divisor==5011]@ ((2, 3, 5, 7), (269, 167))
#fail: (269, (2, 3, 5, 7), -167)
#[divisor==347]@ ((2, 3, 5, 7), (269, 173))
#fail: (269, (2, 3, 5, 7), -173)
#fail: (269, (2, 3, 5, 7), -179)
#fail: (269, (2, 3, 5, 7), -181)
#fail: (269, (2, 3, 5, 7), -191)
#[divisor==773]@ ((2, 3, 5, 7), (269, 193))
#fail: (269, (2, 3, 5, 7), -193)
#fail: (269, (2, 3, 5, 7), -197)
#fail: (269, (2, 3, 5, 7), -199)
#fail: (269, (2, 3, 5, 7), -211)
#fail: (269, (2, 3, 5, 7), -223)
#[divisor==12713]@ ((2, 3, 5, 7), (269, 227))
#fail: (269, (2, 3, 5, 7), -227)
#fail: (269, (2, 3, 5, 7), -229)
#fail: (269, (2, 3, 5, 7), -233)
#fail: (269, (2, 3, 5, 7), -239)
#fail: (269, (2, 3, 5, 7), -241)
#fail: (269, (2, 3, 5, 7), -251)
#fail: (269, (2, 3, 5, 7), -257)
#fail: (269, (2, 3, 5, 7), -263)
#fail: (269, (2, 3, 5, 7), -269)
#[divisor==7589]@ ((2, 3, 5, 7), (269, 271))
#fail: (269, (2, 3, 5, 7), -271)
#fail: (269, (2, 3, 5, 7), -277)
#[divisor==563]@ ((2, 3, 5, 7), (269, 281))
#fail: (269, (2, 3, 5, 7), -281)
#fail: (269, (2, 3, 5, 7), -283)
#[divisor==587]@ ((2, 3, 5, 7), (269, 293))
#fail: (269, (2, 3, 5, 7), -293)
#fail: (269, (2, 3, 5, 7), -307)
#[divisor==1867]@ ((2, 3, 5, 7), (269, 311))
#fail: (269, (2, 3, 5, 7), -311)
#[divisor==1879]@ ((2, 3, 5, 7), (269, 313))
#fail: (269, (2, 3, 5, 7), -313)
#[divisor==9511]@ ((2, 3, 5, 7), (269, 317))
#fail: (269, (2, 3, 5, 7), -317)
#fail: (269, (2, 3, 5, 7), -331)
#fail: (269, (2, 3, 5, 7), -337)
#[divisor==13187]@ ((2, 3, 5, 7), (269, 347))
#fail: (269, (2, 3, 5, 7), -347)
#fail: (269, (2, 3, 5, 7), -349)
^C(269, (2, 3, 5, 7), 349)
KeyboardInterrupt

===
DONE:py_adhoc_call:++smay_kwd4supply_func4resting
++kw:smay_kwd4supply_func4resting@py_adhoc_call
++kw:try_resting_@枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌,枚举冫拟泛化梅森指数扌
++kw:may_radix_ep,is_ok_(d)@_try_div()
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='{269:3167+1}'  >> /sdcard/0my_files/tmp/0tmp
0: ... ...
#start: (269, 3168)
#fail: (269, (2, 3, 5, 7), -3169)
#[divisor==57259]@ ((2, 3, 5, 7), (269, 3181))
#fail: (269, (2, 3, 5, 7), -3181)
#fail: (269, (2, 3, 5, 7), -3187)
#fail: (269, (2, 3, 5, 7), -3191)
    resting...
#[divisor==19219]@ ((2, 3, 5, 7), (269, 3203))
#fail: (269, (2, 3, 5, 7), -3203)
#fail: (269, (2, 3, 5, 7), -3209)
#[divisor==154417]@ ((2, 3, 5, 7), (269, 3217))
#fail: (269, (2, 3, 5, 7), -3217)
#[divisor==122399]@ ((2, 3, 5, 7), (269, 3221))
#fail: (269, (2, 3, 5, 7), -3221)
#[divisor==12917]@ ((2, 3, 5, 7), (269, 3229))
#fail: (269, (2, 3, 5, 7), -3229)
#fail: (269, (2, 3, 5, 7), -3251)
#fail: (269, (2, 3, 5, 7), -3253)
    resting...
^C(269, (2, 3, 5, 7), 3253)
KeyboardInterrupt

===
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='{269:3253+1}'  >> /sdcard/0my_files/tmp/0tmp
#start: (269, 3254)
#fail: (269, (2, 3, 5, 7), -3257)
#[divisor==13037]@ ((2, 3, 5, 7), (269, 3259))
#fail: (269, (2, 3, 5, 7), -3259)
#fail: (269, (2, 3, 5, 7), -3271)
#[divisor==6599]@ ((2, 3, 5, 7), (269, 3299))
#fail: (269, (2, 3, 5, 7), -3299)
#fail: (269, (2, 3, 5, 7), -3301)
#fail: (269, (2, 3, 5, 7), -3307)
#fail: (269, (2, 3, 5, 7), -3313)
#fail: (269, (2, 3, 5, 7), -3319)
#fail: (269, (2, 3, 5, 7), -3323)
#[divisor==6659]@ ((2, 3, 5, 7), (269, 3329))
#fail: (269, (2, 3, 5, 7), -3329)
#fail: (269, (2, 3, 5, 7), -3331)
#fail: (269, (2, 3, 5, 7), -3343)
#fail: (269, (2, 3, 5, 7), -3347)
#[divisor==6719]@ ((2, 3, 5, 7), (269, 3359))
#fail: (269, (2, 3, 5, 7), -3359)
#fail: (269, (2, 3, 5, 7), -3361)
#fail: (269, (2, 3, 5, 7), -3371)
#[divisor==141667]@ ((2, 3, 5, 7), (269, 3373))
#fail: (269, (2, 3, 5, 7), -3373)
#[divisor==6779]@ ((2, 3, 5, 7), (269, 3389))
#fail: (269, (2, 3, 5, 7), -3389)
#[divisor==20347]@ ((2, 3, 5, 7), (269, 3391))
#fail: (269, (2, 3, 5, 7), -3391)
#[divisor==20443]@ ((2, 3, 5, 7), (269, 3407))
#fail: (269, (2, 3, 5, 7), -3407)
#fail: (269, (2, 3, 5, 7), -3413)
^C(269, (2, 3, 5, 7), 3413)
===
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='{269:3413+1}'  >> /sdcard/0my_files/tmp/0tmp
#start: (269, 3414)
#fail: (269, (2, 3, 5, 7), -3433)
#fail: (269, (2, 3, 5, 7), -3449)
#fail: (269, (2, 3, 5, 7), -3457)
#fail: (269, (2, 3, 5, 7), -3461)
#fail: (269, (2, 3, 5, 7), -3463)
#[divisor==27737]@ ((2, 3, 5, 7), (269, 3467))
#fail: (269, (2, 3, 5, 7), -3467)
#fail: (269, (2, 3, 5, 7), -3469)
#[divisor==6983]@ ((2, 3, 5, 7), (269, 3491))
#fail: (269, (2, 3, 5, 7), -3491)
#fail: (269, (2, 3, 5, 7), -3499)
#fail: (269, (2, 3, 5, 7), -3511)
#fail: (269, (2, 3, 5, 7), -3517)
#fail: (269, (2, 3, 5, 7), -3527)
#fail: (269, (2, 3, 5, 7), -3529)
#[divisor==42397]@ ((2, 3, 5, 7), (269, 3533))
#fail: (269, (2, 3, 5, 7), -3533)
#[divisor==49547]@ ((2, 3, 5, 7), (269, 3539))
#fail: (269, (2, 3, 5, 7), -3539)
#[divisor==21247]@ ((2, 3, 5, 7), (269, 3541))
#fail: (269, (2, 3, 5, 7), -3541)
#[divisor==99317]@ ((2, 3, 5, 7), (269, 3547))
#fail: (269, (2, 3, 5, 7), -3547)
#fail: (269, (2, 3, 5, 7), -3557)
#[divisor==42709]@ ((2, 3, 5, 7), (269, 3559))
#fail: (269, (2, 3, 5, 7), -3559)
#fail: (269, (2, 3, 5, 7), -3571)
#fail: (269, (2, 3, 5, 7), -3581)
#[divisor==21499]@ ((2, 3, 5, 7), (269, 3583))
#fail: (269, (2, 3, 5, 7), -3583)
#[divisor==71861]@ ((2, 3, 5, 7), (269, 3593))
#fail: (269, (2, 3, 5, 7), -3593)
#[divisor==108211]@ ((2, 3, 5, 7), (269, 3607))
#fail: (269, (2, 3, 5, 7), -3607)
#fail: (269, (2, 3, 5, 7), -3613)
#fail: (269, (2, 3, 5, 7), -3617)
#[divisor==7247]@ ((2, 3, 5, 7), (269, 3623))
#fail: (269, (2, 3, 5, 7), -3623)
#fail: (269, (2, 3, 5, 7), -3631)
#[divisor==341879]@ ((2, 3, 5, 7), (269, 3637))
#fail: (269, (2, 3, 5, 7), -3637)
#fail: (269, (2, 3, 5, 7), -3643)
#fail: (269, (2, 3, 5, 7), -3659)
#[divisor==132157]@ ((2, 3, 5, 7), (269, 3671))
#fail: (269, (2, 3, 5, 7), -3671)
#fail: (269, (2, 3, 5, 7), -3673)
#[divisor==22063]@ ((2, 3, 5, 7), (269, 3677))
#fail: (269, (2, 3, 5, 7), -3677)
#fail: (269, (2, 3, 5, 7), -3691)
#fail: (269, (2, 3, 5, 7), -3697)
#fail: (269, (2, 3, 5, 7), -3701)
#[divisor==311557]@ ((2, 3, 5, 7), (269, 3709))
#fail: (269, (2, 3, 5, 7), -3709)
#[divisor==275207]@ ((2, 3, 5, 7), (269, 3719))
#fail: (269, (2, 3, 5, 7), -3719)
#fail: (269, (2, 3, 5, 7), -3727)
#fail: (269, (2, 3, 5, 7), -3733)
#fail: (269, (2, 3, 5, 7), -3739)
#[divisor==7523]@ ((2, 3, 5, 7), (269, 3761))
#fail: (269, (2, 3, 5, 7), -3761)
#fail: (269, (2, 3, 5, 7), -3767)
#fail: (269, (2, 3, 5, 7), -3769)
#fail: (269, (2, 3, 5, 7), -3779)
#[divisor==60689]@ ((2, 3, 5, 7), (269, 3793))
#fail: (269, (2, 3, 5, 7), -3793)
#fail: (269, (2, 3, 5, 7), -3797)
#fail: (269, (2, 3, 5, 7), -3803)
#fail: (269, (2, 3, 5, 7), -3821)
#fail: (269, (2, 3, 5, 7), -3823)
#fail: (269, (2, 3, 5, 7), -3833)
#fail: (269, (2, 3, 5, 7), -3847)
KeyboardInterrupt
===
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='{269:3847+1}' --may_end4exp=5000 >> /sdcard/0my_files/tmp/0tmp
#start: (269, 3848)
#fail: (269, (2, 3, 5, 7), -3851)
#fail: (269, (2, 3, 5, 7), -3853)
#fail: (269, (2, 3, 5, 7), -3863)
#fail: (269, (2, 3, 5, 7), -3877)
#fail: (269, (2, 3, 5, 7), -3881)
#fail: (269, (2, 3, 5, 7), -3889)
#fail: (269, (2, 3, 5, 7), -3907)
#fail: (269, (2, 3, 5, 7), -3911)
#fail: (269, (2, 3, 5, 7), -3917)
#fail: (269, (2, 3, 5, 7), -3919)
#fail: (269, (2, 3, 5, 7), -3923)
#fail: (269, (2, 3, 5, 7), -3929)
#fail: (269, (2, 3, 5, 7), -3931)
#fail: (269, (2, 3, 5, 7), -3943)
#fail: (269, (2, 3, 5, 7), -3947)
#[divisor==63473]@ ((2, 3, 5, 7), (269, 3967))
#fail: (269, (2, 3, 5, 7), -3967)
#fail: (269, (2, 3, 5, 7), -3989)
#fail: (269, (2, 3, 5, 7), -4001)
#[divisor==24019]@ ((2, 3, 5, 7), (269, 4003))
#fail: (269, (2, 3, 5, 7), -4003)
#fail: (269, (2, 3, 5, 7), -4007)
#fail: (269, (2, 3, 5, 7), -4013)
#fail: (269, (2, 3, 5, 7), -4019)
#[divisor==193009]@ ((2, 3, 5, 7), (269, 4021))
#fail: (269, (2, 3, 5, 7), -4021)
#fail: (269, (2, 3, 5, 7), -4027)
#fail: (269, (2, 3, 5, 7), -4049)
#fail: (269, (2, 3, 5, 7), -4051)
#[divisor==16229]@ ((2, 3, 5, 7), (269, 4057))
#fail: (269, (2, 3, 5, 7), -4057)
#fail: (269, (2, 3, 5, 7), -4073)
#fail: (269, (2, 3, 5, 7), -4079)
#fail: (269, (2, 3, 5, 7), -4091)
#fail: (269, (2, 3, 5, 7), -4093)
#fail: (269, (2, 3, 5, 7), -4099)
#fail: (269, (2, 3, 5, 7), -4111)
#fail: (269, (2, 3, 5, 7), -4127)
#fail: (269, (2, 3, 5, 7), -4129)
#[divisor==24799]@ ((2, 3, 5, 7), (269, 4133))
#fail: (269, (2, 3, 5, 7), -4133)
#fail: (269, (2, 3, 5, 7), -4139)
^C(269, (2, 3, 5, 7), 4139)
KeyboardInterrupt
===
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='{269:4139+1}' --may_end4exp=5000 >> /sdcard/0my_files/tmp/0tmp
#start: (269, 4140)
#fail: (269, (2, 3, 5, 7), -4153)
#fail: (269, (2, 3, 5, 7), -4157)
#fail: (269, (2, 3, 5, 7), -4159)
#fail: (269, (2, 3, 5, 7), -4177)
#fail: (269, (2, 3, 5, 7), -4201)
#[divisor==8423]@ ((2, 3, 5, 7), (269, 4211))
#fail: (269, (2, 3, 5, 7), -4211)
#fail: (269, (2, 3, 5, 7), -4217)
#fail: (269, (2, 3, 5, 7), -4219)
#fail: (269, (2, 3, 5, 7), -4229)
#[divisor==93083]@ ((2, 3, 5, 7), (269, 4231))
#fail: (269, (2, 3, 5, 7), -4231)
#[divisor==50893]@ ((2, 3, 5, 7), (269, 4241))
#fail: (269, (2, 3, 5, 7), -4241)
#fail: (269, (2, 3, 5, 7), -4243)
#fail: (269, (2, 3, 5, 7), -4253)
#fail: (269, (2, 3, 5, 7), -4259)
#fail: (269, (2, 3, 5, 7), -4261)
#[divisor==8543]@ ((2, 3, 5, 7), (269, 4271))
#fail: (269, (2, 3, 5, 7), -4271)
#fail: (269, (2, 3, 5, 7), -4273)
#fail: (269, (2, 3, 5, 7), -4283)
#[divisor==34313]@ ((2, 3, 5, 7), (269, 4289))
#fail: (269, (2, 3, 5, 7), -4289)
#fail: (269, (2, 3, 5, 7), -4297)
#fail: (269, (2, 3, 5, 7), -4327)
#fail: (269, (2, 3, 5, 7), -4337)
#fail: (269, (2, 3, 5, 7), -4339)
#fail: (269, (2, 3, 5, 7), -4349)
#fail: (269, (2, 3, 5, 7), -4357)
#fail: (269, (2, 3, 5, 7), -4363)
#fail: (269, (2, 3, 5, 7), -4373)
#[divisor==131731]@ ((2, 3, 5, 7), (269, 4391))
#fail: (269, (2, 3, 5, 7), -4391)
#[divisor==167087]@ ((2, 3, 5, 7), (269, 4397))
#fail: (269, (2, 3, 5, 7), -4397)
#[divisor==8819]@ ((2, 3, 5, 7), (269, 4409))
#fail: (269, (2, 3, 5, 7), -4409)
#fail: (269, (2, 3, 5, 7), -4421)
#[divisor==26539]@ ((2, 3, 5, 7), (269, 4423))
#fail: (269, (2, 3, 5, 7), -4423)
#fail: (269, (2, 3, 5, 7), -4441)
#[divisor==26683]@ ((2, 3, 5, 7), (269, 4447))
#fail: (269, (2, 3, 5, 7), -4447)
#fail: (269, (2, 3, 5, 7), -4451)
#fail: (269, (2, 3, 5, 7), -4457)
#fail: (269, (2, 3, 5, 7), -4463)
#fail: (269, (2, 3, 5, 7), -4481)
#[divisor==152423]@ ((2, 3, 5, 7), (269, 4483))
#fail: (269, (2, 3, 5, 7), -4483)
#fail: (269, (2, 3, 5, 7), -4493)
#fail: (269, (2, 3, 5, 7), -4507)
#fail: (269, (2, 3, 5, 7), -4513)
#fail: (269, (2, 3, 5, 7), -4517)
#[divisor==18077]@ ((2, 3, 5, 7), (269, 4519))
#fail: (269, (2, 3, 5, 7), -4519)
#fail: (269, (2, 3, 5, 7), -4523)
#fail: (269, (2, 3, 5, 7), -4547)
#fail: (269, (2, 3, 5, 7), -4549)
#fail: (269, (2, 3, 5, 7), -4561)
#[divisor==18269]@ ((2, 3, 5, 7), (269, 4567))
#fail: (269, (2, 3, 5, 7), -4567)
#fail: (269, (2, 3, 5, 7), -4583)
#fail: (269, (2, 3, 5, 7), -4591)
#[divisor==183881]@ ((2, 3, 5, 7), (269, 4597))
#fail: (269, (2, 3, 5, 7), -4597)
#fail: (269, (2, 3, 5, 7), -4603)
#fail: (269, (2, 3, 5, 7), -4621)
#fail: (269, (2, 3, 5, 7), -4637)
#fail: (269, (2, 3, 5, 7), -4639)
#fail: (269, (2, 3, 5, 7), -4643)
#[divisor==204557]@ ((2, 3, 5, 7), (269, 4649))
#fail: (269, (2, 3, 5, 7), -4649)
#[divisor==213947]@ ((2, 3, 5, 7), (269, 4651))
#fail: (269, (2, 3, 5, 7), -4651)
#fail: (269, (2, 3, 5, 7), -4657)
#fail: (269, (2, 3, 5, 7), -4663)
#fail: (269, (2, 3, 5, 7), -4673)
#fail: (269, (2, 3, 5, 7), -4679)
#[divisor==37529]@ ((2, 3, 5, 7), (269, 4691))
#fail: (269, (2, 3, 5, 7), -4691)
#[divisor==56437]@ ((2, 3, 5, 7), (269, 4703))
#fail: (269, (2, 3, 5, 7), -4703)
#fail: (269, (2, 3, 5, 7), -4721)
#fail: (269, (2, 3, 5, 7), -4723)
#fail: (269, (2, 3, 5, 7), -4729)
#[divisor==9467]@ ((2, 3, 5, 7), (269, 4733))
#fail: (269, (2, 3, 5, 7), -4733)
#fail: (269, (2, 3, 5, 7), -4751)
#[divisor==19037]@ ((2, 3, 5, 7), (269, 4759))
#fail: (269, (2, 3, 5, 7), -4759)
#fail: (269, (2, 3, 5, 7), -4783)
#fail: (269, (2, 3, 5, 7), -4787)
#[divisor==19157]@ ((2, 3, 5, 7), (269, 4789))
#fail: (269, (2, 3, 5, 7), -4789)
#[divisor==9587]@ ((2, 3, 5, 7), (269, 4793))
#fail: (269, (2, 3, 5, 7), -4793)
#fail: (269, (2, 3, 5, 7), -4799)
#[divisor==28807]@ ((2, 3, 5, 7), (269, 4801))
#fail: (269, (2, 3, 5, 7), -4801)
^C(269, (2, 3, 5, 7), 4801)
KeyboardInterrupt
===
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='{269:4801+1}' --may_end4exp=5000 >> /sdcard/0my_files/tmp/0tmp
#start: (269, 4802)
#fail: (269, (2, 3, 5, 7), -4813)
#fail: (269, (2, 3, 5, 7), -4817)
#fail: (269, (2, 3, 5, 7), -4831)
#fail: (269, (2, 3, 5, 7), -4861)
#fail: (269, (2, 3, 5, 7), -4871)
#[divisor==68279]@ ((2, 3, 5, 7), (269, 4877))
#fail: (269, (2, 3, 5, 7), -4877)
#[divisor==68447]@ ((2, 3, 5, 7), (269, 4889))
#fail: (269, (2, 3, 5, 7), -4889)
#[divisor==49031]@ ((2, 3, 5, 7), (269, 4903))
#fail: (269, (2, 3, 5, 7), -4903)
#fail: (269, (2, 3, 5, 7), -4909)
#[divisor==59029]@ ((2, 3, 5, 7), (269, 4919))
#fail: (269, (2, 3, 5, 7), -4919)
#fail: (269, (2, 3, 5, 7), -4931)
#fail: (269, (2, 3, 5, 7), -4933)
#fail: (269, (2, 3, 5, 7), -4937)
#[divisor==9887]@ ((2, 3, 5, 7), (269, 4943))
#fail: (269, (2, 3, 5, 7), -4943)
#fail: (269, (2, 3, 5, 7), -4951)
#fail: (269, (2, 3, 5, 7), -4957)
#fail: (269, (2, 3, 5, 7), -4967)
#fail: (269, (2, 3, 5, 7), -4969)
#fail: (269, (2, 3, 5, 7), -4973)
#[divisor==19949]@ ((2, 3, 5, 7), (269, 4987))
#fail: (269, (2, 3, 5, 7), -4987)
#[divisor==19973]@ ((2, 3, 5, 7), (269, 4993))
#fail: (269, (2, 3, 5, 7), -4993)
#fail: (269, (2, 3, 5, 7), -4999)
#finish: (269, 4802) (269, [])
0:duration: 2912.4040537260003 *(unit: 0:00:01)
(269, [])
    即:[拟泛化梅森指数(269)@[2..<5000] ==>> empty]
    即:[拟泛化梅森指数(269;[2,3,5,7]) /-\ [2..<5000] == {/}]
===
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1  --radix2begin4exp='dict.fromkeys([281, 311, 331, 487, 499, 541, 601, 631, 683, 691, 739, 881, 887, 907], 1000)' --may_end4exp=2000 >> /sdcard/0my_files/tmp/0tmp
    #excludes:269
(281, [])
(311, [])
(331, [])
(487, [])
(499, [])
(541, [])
(601, [])
(631, [])
(683, [])
(691, [])
(739, [])
(881, [])
(887, [1201])
(907, [])
===
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  +verbose --num_exps_per_radix=1000  --radix2begin4exp='{887:1201+1}' --may_end4exp=2000 >> /sdcard/0my_files/tmp/0tmp
(887, []) #1201+1之后
===
@20250406
更新数据:here
###begin:updated_output__ver2
    # implict:--bases4SPRP=[2,3,5,7]
    # fmt:(bp, [ep], max1_ep) where [[bp,ep::prime][bp < 1000][ep < max1_ep <- {1000,2000,5000}][is_SPRP_([2,3,5,7];(bp**ep-1)///(bp-1))]]
(269, [], 5000)
    # [拟泛化梅森指数(269;[2,3,5,7]) /-\ [2..<5000] == {/}]
(281, [], 2000)
(311, [], 2000)
(331, [], 2000)
(487, [], 2000)
(499, [], 2000)
(541, [], 2000)
(601, [], 2000)
(631, [], 2000)
(683, [], 2000)
(691, [], 2000)
(739, [], 2000)
(881, [], 2000)
(907, [], 2000)
(887, [1201], 2000)
    #old: [拟泛化梅森指数(887;[2,3,5,7]) /-\ [2..<1202] == {1201}]
    # [拟泛化梅森指数(887;[2,3,5,7]) /-\ [2..<2000] == {1201}]
(23, [5], 1000)
(47, [127], 1000)
(83, [5], 1000)
(107, [17], 1000)
(109, [17], 1000)
(173, [3], 1000)
(179, [19], 1000)
(191, [17], 1000)
(199, [577], 1000)
(211, [41], 1000)
(227, [5], 1000)
(233, [113], 1000)
(307, [53], 1000)
(317, [157], 1000)
(353, [7], 1000)
(367, [239], 1000)
(409, [43], 1000)
(443, [47], 1000)
(467, [11], 1000)
(479, [5], 1000)
(569, [31], 1000)
(607, [887], 1000)
(613, [131], 1000)
(619, [11], 1000)
(647, [7], 1000)
(701, [3], 1000)
(727, [347], 1000)
(751, [967], 1000)
(769, [13], 1000)
(773, [3], 1000)
(811, [19], 1000)
(823, [107], 1000)
(829, [211], 1000)
(883, [131], 1000)
(937, [61], 1000)
(953, [131], 1000)
(983, [199], 1000)
(991, [31], 1000)
(29, [5, 151], 1000)
(43, [5, 13], 1000)
(67, [19, 367], 1000)
(73, [5, 7], 1000)
(97, [17, 37], 1000)
(103, [19, 313], 1000)
(113, [23, 37], 1000)
(137, [11, 19], 1000)
(139, [163, 173], 1000)
(157, [17, 107], 1000)
(193, [5, 317], 1000)
(229, [11, 29], 1000)
(239, [5, 109], 1000)
(241, [17, 31], 1000)
(263, [5, 19], 1000)
(293, [3, 31], 1000)
(313, [109, 173], 1000)
(337, [5, 19], 1000)
(347, [337, 401], 1000)
(379, [17, 31], 1000)
(389, [11, 19], 1000)
(397, [5, 13], 1000)
(401, [127, 199], 1000)
(419, [17, 347], 1000)
(431, [17, 19], 1000)
(433, [41, 599], 1000)
(449, [19, 167], 1000)
(457, [5, 43], 1000)
(463, [313, 397], 1000)
(491, [31, 67], 1000)
(503, [5, 37], 1000)
(509, [19, 181], 1000)
(521, [19, 139], 1000)
(557, [5, 17], 1000)
(587, [29, 47], 1000)
(599, [7, 17], 1000)
(641, [113, 613], 1000)
(643, [13, 541], 1000)
(659, [29, 409], 1000)
(661, [223, 947], 1000)
(673, [19, 193], 1000)
(719, [113, 827], 1000)
(733, [67, 757], 1000)
(757, [37, 449], 1000)
(809, [107, 911], 1000)
(821, [43, 709], 1000)
(827, [3, 929], 1000)
(839, [3, 103], 1000)
(853, [13, 619], 1000)
(859, [29, 673], 1000)
(863, [7, 151], 1000)
(877, [31, 43], 1000)
(941, [7, 277], 1000)
(971, [19, 61], 1000)
(977, [211, 311], 1000)
(997, [23, 821], 1000)
(31, [7, 17, 31], 1000)
(53, [11, 31, 41], 1000)
(59, [3, 13, 479], 1000)
(101, [3, 337, 677], 1000)
(131, [3, 31, 263], 1000)
(151, [13, 29, 127], 1000)
(163, [7, 43, 241], 1000)
(167, [3, 19, 373], 1000)
(181, [17, 19, 157], 1000)
(197, [31, 47, 283], 1000)
(223, [239, 241, 449], 1000)
(277, [5, 19, 109], 1000)
(283, [29, 31, 719], 1000)
(349, [7, 17, 107], 1000)
(373, [5, 13, 23], 1000)
(547, [19, 503, 751], 1000)
(563, [5, 37, 263], 1000)
(571, [17, 167, 181], 1000)
(577, [109, 139, 227], 1000)
(593, [83, 131, 197], 1000)
(677, [3, 41, 107], 1000)
(743, [3, 191, 227], 1000)
(761, [3, 103, 541], 1000)
(787, [11, 19, 37], 1000)
(857, [3, 19, 23], 1000)
(911, [3, 47, 487], 1000)
(919, [5, 71, 131], 1000)
(947, [7, 41, 71], 1000)
(967, [5, 227, 503], 1000)
(7, [5, 13, 131, 149], 1000)
(41, [3, 83, 269, 409], 1000)
(61, [7, 37, 107, 769], 1000)
(71, [3, 31, 41, 157], 1000)
(79, [5, 109, 149, 659], 1000)
(127, [5, 23, 31, 167], 1000)
(149, [7, 13, 17, 317], 1000)
(257, [23, 59, 487, 967], 1000)
(359, [5, 59, 101, 383], 1000)
(383, [3, 17, 199, 307], 1000)
(421, [71, 97, 103, 109], 1000)
(439, [5, 41, 47, 151], 1000)
(523, [7, 19, 37, 227], 1000)
(653, [17, 43, 59, 211], 1000)
(797, [19, 157, 383, 661], 1000)
(929, [53, 79, 167, 571], 1000)
(11, [17, 19, 73, 139, 907], 1000)
(461, [7, 31, 59, 307, 521], 1000)
(617, [5, 101, 103, 313, 317], 1000)
(709, [11, 17, 37, 43, 257], 1000)
(3, [3, 7, 13, 71, 103, 541], 1000)
(13, [5, 7, 137, 283, 883, 991], 1000)
(37, [13, 71, 181, 251, 463, 521], 1000)
(251, [7, 13, 17, 89, 227, 461], 1000)
(271, [41, 79, 97, 313, 709, 829], 1000)
(17, [3, 5, 7, 11, 47, 71, 419], 1000)
(19, [19, 31, 47, 59, 61, 107, 337], 1000)
(89, [3, 7, 43, 47, 71, 109, 571], 1000)
(5, [3, 7, 11, 13, 47, 127, 149, 181, 619, 929], 1000)
(2, [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607], 1000)
###end:updated_output__ver2

===
]]
[[
def _过滤冫拟稠再三泛化梅森指数巛输出乊文档扌(*, bases4SPRP, case4trial_division, to_output_fails=False, marker='output_1000x1000', _doc = __doc__, verbose=False, 再三丷再四=False):
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,_过滤冫拟稠再三泛化梅森指数巛输出乊文档扌  --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  --marker:updated_output__ver2 +verbose +to_output_fails +再三丷再四 >> /sdcard/0my_files/tmp/0tmp
(2, 2, [(2, 1)])
(2, 3, [(3, 1)])
(2, 4, [(2, 2)])
(2, 5, [(5, 1)])
(2, 6, [(2, 1), (3, 1)])
(2, 7, [(7, 1)])
(2, 8, [(2, 3)])
(2, 9, [(3, 2)])
(2, 10, [(2, 1), (5, 1)])
(2, 12, [(2, 2), (3, 1)])
(2, 13, [(13, 1)])
(2, 14, [(2, 1), (7, 1)])
(2, 15, [(3, 1), (5, 1)])
(2, 16, [(2, 4)])
(2, 17, [(17, 1)])
(2, 18, [(2, 1), (3, 2)])
(2, 19, [(19, 1)])
(2, 20, [(2, 2), (5, 1)])
(2, 21, [(3, 1), (7, 1)])
(2, 24, [(2, 3), (3, 1)])
(2, 26, [(2, 1), (13, 1)])
(2, 27, [(3, 3)])
(2, 30, [(2, 1), (3, 1), (5, 1)])
(2, 31, [(31, 1)])
(2, 32, [(2, 5)])
(2, 34, [(2, 1), (17, 1)])
(2, 38, [(2, 1), (19, 1)])
(2, 40, [(2, 3), (5, 1)])
(2, 42, [(2, 1), (3, 1), (7, 1)])
(2, 49, [(7, 2)])
(2, 54, [(2, 1), (3, 3)])
(2, 61, [(61, 1)])
(2, 62, [(2, 1), (31, 1)])
(2, 65, [(5, 1), (13, 1)])
(2, 80, [(2, 4), (5, 1)])
(2, 85, [(5, 1), (17, 1)])
(2, 89, [(89, 1)])
(2, 93, [(3, 1), (31, 1)])
(2, 98, [(2, 1), (7, 2)])
(2, 107, [(107, 1)])
(2, 122, [(2, 1), (61, 1)])
(2, 127, [(127, 1)])
(2, 133, [(7, 1), (19, 1)])
(2, 147, [(3, 1), (7, 2)])
(2, 170, [(2, 1), (5, 1), (17, 1)])
(2, 254, [(2, 1), (127, 1)])
(2, 521, [(521, 1)])
(2, 607, [(607, 1)])
(2, 889, [(7, 1), (127, 1)]) # 49行
... ...
#testing: (2, [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607]) [(64949, 107, 607), (64949, 607, 107)]
... ...
KeyboardInterrupt
===
--excluded_radixes='[2]'
--radix2begin4exp_and_skipped_exps='{2:???}'
    #bug:--radix2begin4exp='{}'
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,_过滤冫拟稠再三泛化梅森指数巛输出乊文档扌  \
    --excluded_radixes='[2]' --radix2begin4exp_and_skipped_exps='{2:(64949-1, [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 30, 31, 32, 34, 38, 40, 42, 49, 54, 61, 62, 65, 80, 85, 89, 93, 98, 107, 122, 127, 133, 147, 170, 254, 521, 607, 889])}'  \
    --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  --marker:updated_output__ver2 +verbose +to_output_fails +再三丷再四  >> /sdcard/0my_files/tmp/0tmp
(3, 3, [(3, 1)])
(3, 7, [(7, 1)])
(3, 9, [(3, 2)])
(3, 13, [(13, 1)])
(3, 21, [(3, 1), (7, 1)])
(3, 63, [(3, 2), (7, 1)])
(3, 71, [(71, 1)])
(3, 103, [(103, 1)])
(3, 541, [(541, 1)])
(3, 1623, [(3, 1), (541, 1)]) # 49+10=59行
... ...
#testing: (3, [3, 7, 13, 71, 103, 541]) [(38411, 71, 541), (38411, 541, 71)]
... ...
KeyboardInterrupt
===
--excluded_radixes='[2,3]'
--radix2begin4exp_and_skipped_exps='{2:???, 3:???}'
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,_过滤冫拟稠再三泛化梅森指数巛输出乊文档扌  \
    --excluded_radixes='[2,3]' --radix2begin4exp_and_skipped_exps='{2:(64949-1, [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 30, 31, 32, 34, 38, 40, 42, 49, 54, 61, 62, 65, 80, 85, 89, 93, 98, 107, 122, 127, 133, 147, 170, 254, 521, 607, 889]), 3:(38411-1, [3, 7, 9, 13, 21, 63, 71, 103, 541, 1623])}'  \
    --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  --marker:updated_output__ver2 +verbose +to_output_fails +再三丷再四  >> /sdcard/0my_files/tmp/0tmp
(5, 3, [(3, 1)])
(5, 7, [(7, 1)])
(5, 11, [(11, 1)])
(5, 13, [(13, 1)])
(5, 47, [(47, 1)])
(5, 49, [(7, 2)])
(5, 127, [(127, 1)])
(5, 141, [(3, 1), (47, 1)])
(5, 149, [(149, 1)])
(5, 181, [(181, 1)])
(5, 619, [(619, 1)])
(5, 929, [(929, 1)]) # 49+10+12=71行
... ...
#testing: (5, [3, 7, 11, 13, 47, 127, 149, 181, 619, 929]) [(12077, 929, 13), (12077, 13, 929)]
KeyboardInterrupt
===
--excluded_radixes='[2,3,5]'
--radix2begin4exp_and_skipped_exps='{2:???, 3:???, 5:???}'
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,_过滤冫拟稠再三泛化梅森指数巛输出乊文档扌  \
    --excluded_radixes='[2,3,5]' --radix2begin4exp_and_skipped_exps='{2:(64949-1, [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 30, 31, 32, 34, 38, 40, 42, 49, 54, 61, 62, 65, 80, 85, 89, 93, 98, 107, 122, 127, 133, 147, 170, 254, 521, 607, 889]), 3:(38411-1, [3, 7, 9, 13, 21, 63, 71, 103, 541, 1623]), 5:(12077-1, [3, 7, 11, 13, 47, 49, 127, 141, 149, 181, 619, 929])}'  \
    --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  --marker:updated_output__ver2 +verbose +to_output_fails +再三丷再四  >> /sdcard/0my_files/tmp/0tmp
(7, 5, [(5, 1)])
(7, 13, [(13, 1)])
(7, 131, [(131, 1)])
(7, 149, [(149, 1)]) # 49+10+12+4=75行
... ...
#testing: (7, [5, 13, 131, 149]) [(17161, 131, 131)]
... ...
KeyboardInterrupt
==>>: --radix2max1_exp='{2:64949,3:38411,5:12077,7:17161}'
===
--excluded_radixes='[2,3,5,7]'
--may_end4exp=5000
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,_过滤冫拟稠再三泛化梅森指数巛输出乊文档扌 --excluded_radixes='[2,3,5,7]' --may_end4exp=5000 --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  --marker:updated_output__ver2 +verbose +to_output_fails +再三丷再四  >> /sdcard/0my_files/tmp/0tmp
(11, 17, [(17, 1)])
(11, 19, [(19, 1)])
(11, 73, [(73, 1)])
(11, 139, [(139, 1)])
(11, 907, [(907, 1)])
(13, 5, [(5, 1)])
(13, 7, [(7, 1)])
(13, 137, [(137, 1)])
(13, 283, [(283, 1)])
(13, 883, [(883, 1)])
(13, 991, [(991, 1)])
(17, 3, [(3, 1)])
(17, 5, [(5, 1)])
(17, 7, [(7, 1)])
(17, 11, [(11, 1)])
(17, 15, [(3, 1), (5, 1)])
(17, 47, [(47, 1)])
(17, 71, [(71, 1)])
(17, 77, [(7, 1), (11, 1)])
(17, 235, [(5, 1), (47, 1)])
(17, 419, [(419, 1)])
(19, 19, [(19, 1)])
(19, 31, [(31, 1)])
(19, 47, [(47, 1)])
(19, 59, [(59, 1)])
(19, 61, [(61, 1)])
(19, 107, [(107, 1)])
(19, 337, [(337, 1)])
(23, 5, [(5, 1)])
(29, 5, [(5, 1)])
(29, 151, [(151, 1)])
(31, 7, [(7, 1)])
(31, 17, [(17, 1)])
(31, 31, [(31, 1)])
(37, 13, [(13, 1)])
(37, 71, [(71, 1)])
(37, 181, [(181, 1)])
(37, 251, [(251, 1)])
(37, 463, [(463, 1)])
(37, 521, [(521, 1)])
(41, 3, [(3, 1)])
(41, 83, [(83, 1)])
(41, 269, [(269, 1)])
(41, 409, [(409, 1)])
(43, 5, [(5, 1)])
(43, 13, [(13, 1)])
(43, 25, [(5, 2)])
(47, 127, [(127, 1)])
(53, 11, [(11, 1)])
(53, 31, [(31, 1)])
(53, 41, [(41, 1)])
(59, 3, [(3, 1)])
(59, 13, [(13, 1)])
(59, 479, [(479, 1)])
(61, 7, [(7, 1)])
(61, 37, [(37, 1)])
(61, 107, [(107, 1)])
(61, 769, [(769, 1)])
(61, 1369, [(37, 2)])
(67, 19, [(19, 1)])
(67, 367, [(367, 1)])
(71, 3, [(3, 1)])
(71, 31, [(31, 1)])
(71, 41, [(41, 1)])
(71, 157, [(157, 1)])
(73, 5, [(5, 1)])
(73, 7, [(7, 1)])
(79, 5, [(5, 1)])
(79, 109, [(109, 1)])
(79, 149, [(149, 1)])
(79, 659, [(659, 1)])
(83, 5, [(5, 1)])
(89, 3, [(3, 1)])
(89, 7, [(7, 1)])
(89, 43, [(43, 1)])
(89, 47, [(47, 1)])
(89, 71, [(71, 1)])
(89, 109, [(109, 1)])
(89, 571, [(571, 1)])
(97, 17, [(17, 1)])
(97, 37, [(37, 1)])
(101, 3, [(3, 1)])
(101, 337, [(337, 1)])
(101, 677, [(677, 1)])
(103, 19, [(19, 1)])
(103, 313, [(313, 1)])
(107, 17, [(17, 1)])
(109, 17, [(17, 1)])
(113, 23, [(23, 1)])
(113, 37, [(37, 1)])
(127, 5, [(5, 1)])
(127, 23, [(23, 1)])
(127, 31, [(31, 1)])
(127, 167, [(167, 1)])
(131, 3, [(3, 1)])
(131, 31, [(31, 1)])
(131, 263, [(263, 1)])
(137, 11, [(11, 1)])
(137, 19, [(19, 1)])
(139, 163, [(163, 1)])
(139, 173, [(173, 1)])
(149, 7, [(7, 1)])
(149, 13, [(13, 1)])
(149, 17, [(17, 1)])
(149, 317, [(317, 1)])
(151, 13, [(13, 1)])
(151, 29, [(29, 1)])
(151, 127, [(127, 1)])
(157, 17, [(17, 1)])
(157, 107, [(107, 1)])
(163, 7, [(7, 1)])
(163, 43, [(43, 1)])
(163, 241, [(241, 1)])
(167, 3, [(3, 1)])
(167, 19, [(19, 1)])
(167, 373, [(373, 1)])
(173, 3, [(3, 1)])
(179, 19, [(19, 1)])
(181, 17, [(17, 1)])
(181, 19, [(19, 1)])
(181, 157, [(157, 1)])
(191, 17, [(17, 1)])
(193, 5, [(5, 1)])
(193, 317, [(317, 1)])
(197, 31, [(31, 1)])
(197, 47, [(47, 1)])
(197, 283, [(283, 1)])
(199, 577, [(577, 1)])
(211, 41, [(41, 1)])
(223, 239, [(239, 1)])
(223, 241, [(241, 1)])
(223, 449, [(449, 1)])
(227, 5, [(5, 1)])
(229, 11, [(11, 1)])
(229, 29, [(29, 1)])
(233, 113, [(113, 1)])
(239, 5, [(5, 1)])
(239, 109, [(109, 1)])
(241, 17, [(17, 1)])
(241, 31, [(31, 1)])
(251, 7, [(7, 1)])
(251, 13, [(13, 1)])
(251, 17, [(17, 1)])
(251, 89, [(89, 1)])
(251, 227, [(227, 1)])
(251, 461, [(461, 1)])
(257, 23, [(23, 1)])
(257, 59, [(59, 1)])
(257, 487, [(487, 1)])
(257, 967, [(967, 1)])
(263, 5, [(5, 1)])
(263, 19, [(19, 1)])
(271, 41, [(41, 1)])
(271, 79, [(79, 1)])
(271, 97, [(97, 1)])
(271, 313, [(313, 1)])
(271, 709, [(709, 1)])
(271, 829, [(829, 1)])
(277, 5, [(5, 1)])
(277, 19, [(19, 1)])
(277, 109, [(109, 1)])
(283, 29, [(29, 1)])
(283, 31, [(31, 1)])
(283, 719, [(719, 1)])
(293, 3, [(3, 1)])
(293, 31, [(31, 1)])
(293, 93, [(3, 1), (31, 1)])
(307, 53, [(53, 1)])
(313, 109, [(109, 1)])
(313, 173, [(173, 1)])
(317, 157, [(157, 1)])
(337, 5, [(5, 1)])
(337, 19, [(19, 1)])
(347, 337, [(337, 1)])
(347, 401, [(401, 1)])
(349, 7, [(7, 1)])
(349, 17, [(17, 1)])
(349, 107, [(107, 1)])
(353, 7, [(7, 1)])
(359, 5, [(5, 1)])
(359, 59, [(59, 1)])
(359, 101, [(101, 1)])
(359, 383, [(383, 1)])
(367, 239, [(239, 1)])
(373, 5, [(5, 1)])
(373, 13, [(13, 1)])
(373, 23, [(23, 1)])
(379, 17, [(17, 1)])
(379, 31, [(31, 1)])
(383, 3, [(3, 1)])
(383, 9, [(3, 2)])
(383, 17, [(17, 1)])
(383, 199, [(199, 1)])
(383, 307, [(307, 1)])
(389, 11, [(11, 1)])
(389, 19, [(19, 1)])
(397, 5, [(5, 1)])
(397, 13, [(13, 1)])
(401, 127, [(127, 1)])
(401, 199, [(199, 1)])
(409, 43, [(43, 1)])
(419, 17, [(17, 1)])
(419, 347, [(347, 1)])
(421, 71, [(71, 1)])
(421, 97, [(97, 1)])
(421, 103, [(103, 1)])
(421, 109, [(109, 1)])
(431, 17, [(17, 1)])
(431, 19, [(19, 1)])
(433, 41, [(41, 1)])
(433, 599, [(599, 1)])
(439, 5, [(5, 1)])
(439, 41, [(41, 1)])
(439, 47, [(47, 1)])
(439, 151, [(151, 1)])
(443, 47, [(47, 1)])
(449, 19, [(19, 1)])
(449, 167, [(167, 1)])
(457, 5, [(5, 1)])
(457, 43, [(43, 1)])
(461, 7, [(7, 1)])
(461, 31, [(31, 1)])
(461, 59, [(59, 1)])
(461, 307, [(307, 1)])
(461, 521, [(521, 1)])
(463, 313, [(313, 1)])
(463, 397, [(397, 1)])
(467, 11, [(11, 1)])
(479, 5, [(5, 1)])
(491, 31, [(31, 1)])
(491, 67, [(67, 1)]) # 49+10+12+4+231=306行 # [2,3,5,7]+[11..=491@67] => 共306行
... ...
#testing: (491, [31, 67]) [(4489, 67, 67)]
... ...
KeyboardInterrupt
===
--begin4radix='491'
--may_end4exp=5000
py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,_过滤冫拟稠再三泛化梅森指数巛输出乊文档扌 --begin4radix='491' --may_end4exp=5000 --case4trial_division:bit_length --bases4SPRP=[2,3,5,7]  --marker:updated_output__ver2 +verbose +to_output_fails +再三丷再四  >> /sdcard/0my_files/tmp/0tmp
(491, 31, [(31, 1)])
(491, 67, [(67, 1)])
(503, 5, [(5, 1)])
(503, 37, [(37, 1)])
(509, 19, [(19, 1)])
(509, 181, [(181, 1)])
(521, 19, [(19, 1)])
(521, 139, [(139, 1)])
(523, 7, [(7, 1)])
(523, 19, [(19, 1)])
(523, 37, [(37, 1)])
(523, 227, [(227, 1)])
(547, 19, [(19, 1)])
(547, 503, [(503, 1)])
(547, 751, [(751, 1)])
(557, 5, [(5, 1)])
(557, 17, [(17, 1)])
(563, 5, [(5, 1)])
(563, 37, [(37, 1)])
(563, 263, [(263, 1)])
(569, 31, [(31, 1)])
(571, 17, [(17, 1)])
(571, 167, [(167, 1)])
(571, 181, [(181, 1)])
(577, 109, [(109, 1)])
(577, 139, [(139, 1)])
(577, 227, [(227, 1)])
(587, 29, [(29, 1)])
(587, 47, [(47, 1)])
(593, 83, [(83, 1)])
(593, 131, [(131, 1)])
(593, 197, [(197, 1)])
(599, 7, [(7, 1)])
(599, 17, [(17, 1)])
(607, 887, [(887, 1)])
(613, 131, [(131, 1)])
(617, 5, [(5, 1)])
(617, 101, [(101, 1)])
(617, 103, [(103, 1)])
(617, 313, [(313, 1)])
(617, 317, [(317, 1)])
(619, 11, [(11, 1)])
(641, 113, [(113, 1)])
(641, 613, [(613, 1)])
(643, 13, [(13, 1)])
(643, 541, [(541, 1)])
(647, 7, [(7, 1)])
(653, 17, [(17, 1)])
(653, 43, [(43, 1)])
(653, 59, [(59, 1)])
(653, 211, [(211, 1)])
(659, 29, [(29, 1)])
(659, 409, [(409, 1)])
(661, 223, [(223, 1)])
(661, 947, [(947, 1)])
(673, 19, [(19, 1)])
(673, 193, [(193, 1)])
(677, 3, [(3, 1)])
(677, 41, [(41, 1)])
(677, 107, [(107, 1)])
(701, 3, [(3, 1)])
(709, 11, [(11, 1)])
(709, 17, [(17, 1)])
(709, 37, [(37, 1)])
(709, 43, [(43, 1)])
(709, 257, [(257, 1)])
(719, 113, [(113, 1)])
(719, 827, [(827, 1)])
(727, 347, [(347, 1)])
(733, 67, [(67, 1)])
(733, 757, [(757, 1)])
(743, 3, [(3, 1)])
(743, 191, [(191, 1)])
(743, 227, [(227, 1)])
(751, 967, [(967, 1)])
(757, 37, [(37, 1)])
(757, 449, [(449, 1)])
(761, 3, [(3, 1)])
(761, 103, [(103, 1)])
(761, 541, [(541, 1)])
(769, 13, [(13, 1)])
(773, 3, [(3, 1)])
(787, 11, [(11, 1)])
(787, 19, [(19, 1)])
(787, 37, [(37, 1)])
(787, 121, [(11, 2)])
(797, 19, [(19, 1)])
(797, 157, [(157, 1)])
(797, 383, [(383, 1)])
(797, 661, [(661, 1)])
(809, 107, [(107, 1)])
(809, 911, [(911, 1)])
(811, 19, [(19, 1)])
(821, 43, [(43, 1)])
(821, 709, [(709, 1)])
(823, 107, [(107, 1)])
(827, 3, [(3, 1)])
(827, 9, [(3, 2)])
(827, 929, [(929, 1)])
(829, 211, [(211, 1)])
(839, 3, [(3, 1)])
(839, 103, [(103, 1)])
(853, 13, [(13, 1)])
(853, 619, [(619, 1)])
(857, 3, [(3, 1)])
(857, 19, [(19, 1)])
(857, 23, [(23, 1)])
(859, 29, [(29, 1)])
(859, 673, [(673, 1)])
(863, 7, [(7, 1)])
(863, 151, [(151, 1)])
(877, 31, [(31, 1)])
(877, 43, [(43, 1)])
(883, 131, [(131, 1)])
(887, 1201, [(1201, 1)])
(911, 3, [(3, 1)])
(911, 47, [(47, 1)])
(911, 487, [(487, 1)])
(919, 5, [(5, 1)])
(919, 71, [(71, 1)])
(919, 131, [(131, 1)])
(929, 53, [(53, 1)])
(929, 79, [(79, 1)])
(929, 167, [(167, 1)])
(929, 571, [(571, 1)])
(937, 61, [(61, 1)])
(941, 7, [(7, 1)])
(941, 277, [(277, 1)])
(947, 7, [(7, 1)])
(947, 41, [(41, 1)])
(947, 71, [(71, 1)])
(953, 131, [(131, 1)])
(967, 5, [(5, 1)])
(967, 227, [(227, 1)])
(967, 503, [(503, 1)])
(971, 19, [(19, 1)])
(971, 61, [(61, 1)])
(977, 211, [(211, 1)])
(977, 311, [(311, 1)])
(983, 199, [(199, 1)])
(991, 31, [(31, 1)])
(997, 23, [(23, 1)])
(997, 821, [(821, 1)]) # 49+10+12+4+231-2+143=447行
#DONE
===
再四版非平凡:
===
补丁前:再四版非平凡牜多个素因子:here
grep '^([0-9]*, [0-9]*, \[([0-9]*, [0-9]*), .*\])$'   /sdcard/0my_files/tmp/0tmp
(2, 6, [(2, 1), (3, 1)])
(2, 10, [(2, 1), (5, 1)])
(2, 12, [(2, 2), (3, 1)])
(2, 14, [(2, 1), (7, 1)])
(2, 15, [(3, 1), (5, 1)])
(2, 18, [(2, 1), (3, 2)])
(2, 20, [(2, 2), (5, 1)])
(2, 21, [(3, 1), (7, 1)])
(2, 24, [(2, 3), (3, 1)])
(2, 26, [(2, 1), (13, 1)])
(2, 30, [(2, 1), (3, 1), (5, 1)])
(2, 34, [(2, 1), (17, 1)])
(2, 38, [(2, 1), (19, 1)])
(2, 40, [(2, 3), (5, 1)])
(2, 42, [(2, 1), (3, 1), (7, 1)])
(2, 54, [(2, 1), (3, 3)])
(2, 62, [(2, 1), (31, 1)])
(2, 65, [(5, 1), (13, 1)])
(2, 80, [(2, 4), (5, 1)])
(2, 85, [(5, 1), (17, 1)])
(2, 93, [(3, 1), (31, 1)])
(2, 98, [(2, 1), (7, 2)])
(2, 122, [(2, 1), (61, 1)])
(2, 133, [(7, 1), (19, 1)])
(2, 147, [(3, 1), (7, 2)])
(2, 170, [(2, 1), (5, 1), (17, 1)])
(2, 254, [(2, 1), (127, 1)])
(2, 889, [(7, 1), (127, 1)])
(3, 21, [(3, 1), (7, 1)])
(3, 63, [(3, 2), (7, 1)])
(3, 1623, [(3, 1), (541, 1)])
(5, 141, [(3, 1), (47, 1)])
(17, 15, [(3, 1), (5, 1)])
(17, 77, [(7, 1), (11, 1)])
(17, 235, [(5, 1), (47, 1)])
(293, 93, [(3, 1), (31, 1)])
===
补丁前:再四版非平凡牜单个素因子幂方:here
grep '^([0-9]*, [0-9]*, \[([0-9]*, \([0-9][0-9][0-9]*\|[2-9]\))\])$'   /sdcard/0my_files/tmp/0tmp
(2, 4, [(2, 2)])
(2, 8, [(2, 3)])
(2, 9, [(3, 2)])
(2, 16, [(2, 4)])
(2, 27, [(3, 3)])
(2, 32, [(2, 5)])
(2, 49, [(7, 2)])
(3, 9, [(3, 2)])
(5, 49, [(7, 2)])
(43, 25, [(5, 2)])
(61, 1369, [(37, 2)])
(383, 9, [(3, 2)])
(787, 121, [(11, 2)])
(827, 9, [(3, 2)])
===
###begin:输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千
(2, 2, [(2, 1)])
(2, 3, [(3, 1)])
(2, 4, [(2, 2)])
(2, 5, [(5, 1)])
(2, 6, [(2, 1), (3, 1)])
(2, 7, [(7, 1)])
(2, 8, [(2, 3)])
(2, 9, [(3, 2)])
(2, 10, [(2, 1), (5, 1)])
(2, 12, [(2, 2), (3, 1)])
(2, 13, [(13, 1)])
(2, 14, [(2, 1), (7, 1)])
(2, 15, [(3, 1), (5, 1)])
(2, 16, [(2, 4)])
(2, 17, [(17, 1)])
(2, 18, [(2, 1), (3, 2)])
(2, 19, [(19, 1)])
(2, 20, [(2, 2), (5, 1)])
(2, 21, [(3, 1), (7, 1)])
(2, 24, [(2, 3), (3, 1)])
(2, 26, [(2, 1), (13, 1)])
(2, 27, [(3, 3)])
(2, 30, [(2, 1), (3, 1), (5, 1)])
(2, 31, [(31, 1)])
(2, 32, [(2, 5)])
(2, 34, [(2, 1), (17, 1)])
(2, 38, [(2, 1), (19, 1)])
(2, 40, [(2, 3), (5, 1)])
(2, 42, [(2, 1), (3, 1), (7, 1)])
(2, 49, [(7, 2)])
(2, 54, [(2, 1), (3, 3)])
(2, 61, [(61, 1)])
(2, 62, [(2, 1), (31, 1)])
(2, 65, [(5, 1), (13, 1)])
(2, 80, [(2, 4), (5, 1)])
(2, 85, [(5, 1), (17, 1)])
(2, 89, [(89, 1)])
(2, 93, [(3, 1), (31, 1)])
(2, 98, [(2, 1), (7, 2)])
(2, 107, [(107, 1)])
(2, 122, [(2, 1), (61, 1)])
(2, 127, [(127, 1)])
(2, 133, [(7, 1), (19, 1)])
(2, 147, [(3, 1), (7, 2)])
(2, 170, [(2, 1), (5, 1), (17, 1)])
(2, 254, [(2, 1), (127, 1)])
(2, 521, [(521, 1)])
(2, 607, [(607, 1)])
(2, 889, [(7, 1), (127, 1)])
(3, 3, [(3, 1)])
(3, 7, [(7, 1)])
(3, 9, [(3, 2)])
(3, 13, [(13, 1)])
(3, 21, [(3, 1), (7, 1)])
(3, 63, [(3, 2), (7, 1)])
(3, 71, [(71, 1)])
(3, 103, [(103, 1)])
(3, 541, [(541, 1)])
(3, 1623, [(3, 1), (541, 1)])
(5, 3, [(3, 1)])
(5, 7, [(7, 1)])
(5, 11, [(11, 1)])
(5, 13, [(13, 1)])
(5, 47, [(47, 1)])
(5, 49, [(7, 2)])
(5, 127, [(127, 1)])
(5, 141, [(3, 1), (47, 1)])
(5, 149, [(149, 1)])
(5, 181, [(181, 1)])
(5, 619, [(619, 1)])
(5, 929, [(929, 1)])
(7, 5, [(5, 1)])
(7, 13, [(13, 1)])
(7, 131, [(131, 1)])
(7, 149, [(149, 1)])
(11, 17, [(17, 1)])
(11, 19, [(19, 1)])
(11, 73, [(73, 1)])
(11, 139, [(139, 1)])
(11, 907, [(907, 1)])
(13, 5, [(5, 1)])
(13, 7, [(7, 1)])
(13, 137, [(137, 1)])
(13, 283, [(283, 1)])
(13, 883, [(883, 1)])
(13, 991, [(991, 1)])
(17, 3, [(3, 1)])
(17, 5, [(5, 1)])
(17, 7, [(7, 1)])
(17, 11, [(11, 1)])
(17, 15, [(3, 1), (5, 1)])
(17, 47, [(47, 1)])
(17, 71, [(71, 1)])
(17, 77, [(7, 1), (11, 1)])
(17, 235, [(5, 1), (47, 1)])
(17, 419, [(419, 1)])
(19, 19, [(19, 1)])
(19, 31, [(31, 1)])
(19, 47, [(47, 1)])
(19, 59, [(59, 1)])
(19, 61, [(61, 1)])
(19, 107, [(107, 1)])
(19, 337, [(337, 1)])
(23, 5, [(5, 1)])
(29, 5, [(5, 1)])
(29, 151, [(151, 1)])
(31, 7, [(7, 1)])
(31, 17, [(17, 1)])
(31, 31, [(31, 1)])
(37, 13, [(13, 1)])
(37, 71, [(71, 1)])
(37, 181, [(181, 1)])
(37, 251, [(251, 1)])
(37, 463, [(463, 1)])
(37, 521, [(521, 1)])
(41, 3, [(3, 1)])
(41, 83, [(83, 1)])
(41, 269, [(269, 1)])
(41, 409, [(409, 1)])
(43, 5, [(5, 1)])
(43, 13, [(13, 1)])
(43, 25, [(5, 2)])
(47, 127, [(127, 1)])
(53, 11, [(11, 1)])
(53, 31, [(31, 1)])
(53, 41, [(41, 1)])
(59, 3, [(3, 1)])
(59, 13, [(13, 1)])
(59, 479, [(479, 1)])
(61, 7, [(7, 1)])
(61, 37, [(37, 1)])
(61, 107, [(107, 1)])
(61, 769, [(769, 1)])
(61, 1369, [(37, 2)])
(67, 19, [(19, 1)])
(67, 367, [(367, 1)])
(71, 3, [(3, 1)])
(71, 31, [(31, 1)])
(71, 41, [(41, 1)])
(71, 157, [(157, 1)])
(73, 5, [(5, 1)])
(73, 7, [(7, 1)])
(79, 5, [(5, 1)])
(79, 109, [(109, 1)])
(79, 149, [(149, 1)])
(79, 659, [(659, 1)])
(83, 5, [(5, 1)])
(89, 3, [(3, 1)])
(89, 7, [(7, 1)])
(89, 43, [(43, 1)])
(89, 47, [(47, 1)])
(89, 71, [(71, 1)])
(89, 109, [(109, 1)])
(89, 571, [(571, 1)])
(97, 17, [(17, 1)])
(97, 37, [(37, 1)])
(101, 3, [(3, 1)])
(101, 337, [(337, 1)])
(101, 677, [(677, 1)])
(103, 19, [(19, 1)])
(103, 313, [(313, 1)])
(107, 17, [(17, 1)])
(109, 17, [(17, 1)])
(113, 23, [(23, 1)])
(113, 37, [(37, 1)])
(127, 5, [(5, 1)])
(127, 23, [(23, 1)])
(127, 31, [(31, 1)])
(127, 167, [(167, 1)])
(131, 3, [(3, 1)])
(131, 31, [(31, 1)])
(131, 263, [(263, 1)])
(137, 11, [(11, 1)])
(137, 19, [(19, 1)])
(139, 163, [(163, 1)])
(139, 173, [(173, 1)])
(149, 7, [(7, 1)])
(149, 13, [(13, 1)])
(149, 17, [(17, 1)])
(149, 317, [(317, 1)])
(151, 13, [(13, 1)])
(151, 29, [(29, 1)])
(151, 127, [(127, 1)])
(157, 17, [(17, 1)])
(157, 107, [(107, 1)])
(163, 7, [(7, 1)])
(163, 43, [(43, 1)])
(163, 241, [(241, 1)])
(167, 3, [(3, 1)])
(167, 19, [(19, 1)])
(167, 373, [(373, 1)])
(173, 3, [(3, 1)])
(179, 19, [(19, 1)])
(181, 17, [(17, 1)])
(181, 19, [(19, 1)])
(181, 157, [(157, 1)])
(191, 17, [(17, 1)])
(193, 5, [(5, 1)])
(193, 317, [(317, 1)])
(197, 31, [(31, 1)])
(197, 47, [(47, 1)])
(197, 283, [(283, 1)])
(199, 577, [(577, 1)])
(211, 41, [(41, 1)])
(223, 239, [(239, 1)])
(223, 241, [(241, 1)])
(223, 449, [(449, 1)])
(227, 5, [(5, 1)])
(229, 11, [(11, 1)])
(229, 29, [(29, 1)])
(233, 113, [(113, 1)])
(239, 5, [(5, 1)])
(239, 109, [(109, 1)])
(241, 17, [(17, 1)])
(241, 31, [(31, 1)])
(251, 7, [(7, 1)])
(251, 13, [(13, 1)])
(251, 17, [(17, 1)])
(251, 89, [(89, 1)])
(251, 227, [(227, 1)])
(251, 461, [(461, 1)])
(257, 23, [(23, 1)])
(257, 59, [(59, 1)])
(257, 487, [(487, 1)])
(257, 967, [(967, 1)])
(263, 5, [(5, 1)])
(263, 19, [(19, 1)])
(271, 41, [(41, 1)])
(271, 79, [(79, 1)])
(271, 97, [(97, 1)])
(271, 313, [(313, 1)])
(271, 709, [(709, 1)])
(271, 829, [(829, 1)])
(277, 5, [(5, 1)])
(277, 19, [(19, 1)])
(277, 109, [(109, 1)])
(283, 29, [(29, 1)])
(283, 31, [(31, 1)])
(283, 719, [(719, 1)])
(293, 3, [(3, 1)])
(293, 31, [(31, 1)])
(293, 93, [(3, 1), (31, 1)])
(307, 53, [(53, 1)])
(313, 109, [(109, 1)])
(313, 173, [(173, 1)])
(317, 157, [(157, 1)])
(337, 5, [(5, 1)])
(337, 19, [(19, 1)])
(347, 337, [(337, 1)])
(347, 401, [(401, 1)])
(349, 7, [(7, 1)])
(349, 17, [(17, 1)])
(349, 107, [(107, 1)])
(353, 7, [(7, 1)])
(359, 5, [(5, 1)])
(359, 59, [(59, 1)])
(359, 101, [(101, 1)])
(359, 383, [(383, 1)])
(367, 239, [(239, 1)])
(373, 5, [(5, 1)])
(373, 13, [(13, 1)])
(373, 23, [(23, 1)])
(379, 17, [(17, 1)])
(379, 31, [(31, 1)])
(383, 3, [(3, 1)])
(383, 9, [(3, 2)])
(383, 17, [(17, 1)])
(383, 199, [(199, 1)])
(383, 307, [(307, 1)])
(389, 11, [(11, 1)])
(389, 19, [(19, 1)])
(397, 5, [(5, 1)])
(397, 13, [(13, 1)])
(401, 127, [(127, 1)])
(401, 199, [(199, 1)])
(409, 43, [(43, 1)])
(419, 17, [(17, 1)])
(419, 347, [(347, 1)])
(421, 71, [(71, 1)])
(421, 97, [(97, 1)])
(421, 103, [(103, 1)])
(421, 109, [(109, 1)])
(431, 17, [(17, 1)])
(431, 19, [(19, 1)])
(433, 41, [(41, 1)])
(433, 599, [(599, 1)])
(439, 5, [(5, 1)])
(439, 41, [(41, 1)])
(439, 47, [(47, 1)])
(439, 151, [(151, 1)])
(443, 47, [(47, 1)])
(449, 19, [(19, 1)])
(449, 167, [(167, 1)])
(457, 5, [(5, 1)])
(457, 43, [(43, 1)])
(461, 7, [(7, 1)])
(461, 31, [(31, 1)])
(461, 59, [(59, 1)])
(461, 307, [(307, 1)])
(461, 521, [(521, 1)])
(463, 313, [(313, 1)])
(463, 397, [(397, 1)])
(467, 11, [(11, 1)])
(479, 5, [(5, 1)])
(491, 31, [(31, 1)])
(491, 67, [(67, 1)])
(503, 5, [(5, 1)])
(503, 37, [(37, 1)])
(509, 19, [(19, 1)])
(509, 181, [(181, 1)])
(521, 19, [(19, 1)])
(521, 139, [(139, 1)])
(523, 7, [(7, 1)])
(523, 19, [(19, 1)])
(523, 37, [(37, 1)])
(523, 227, [(227, 1)])
(547, 19, [(19, 1)])
(547, 503, [(503, 1)])
(547, 751, [(751, 1)])
(557, 5, [(5, 1)])
(557, 17, [(17, 1)])
(563, 5, [(5, 1)])
(563, 37, [(37, 1)])
(563, 263, [(263, 1)])
(569, 31, [(31, 1)])
(571, 17, [(17, 1)])
(571, 167, [(167, 1)])
(571, 181, [(181, 1)])
(577, 109, [(109, 1)])
(577, 139, [(139, 1)])
(577, 227, [(227, 1)])
(587, 29, [(29, 1)])
(587, 47, [(47, 1)])
(593, 83, [(83, 1)])
(593, 131, [(131, 1)])
(593, 197, [(197, 1)])
(599, 7, [(7, 1)])
(599, 17, [(17, 1)])
(607, 887, [(887, 1)])
(613, 131, [(131, 1)])
(617, 5, [(5, 1)])
(617, 101, [(101, 1)])
(617, 103, [(103, 1)])
(617, 313, [(313, 1)])
(617, 317, [(317, 1)])
(619, 11, [(11, 1)])
(641, 113, [(113, 1)])
(641, 613, [(613, 1)])
(643, 13, [(13, 1)])
(643, 541, [(541, 1)])
(647, 7, [(7, 1)])
(653, 17, [(17, 1)])
(653, 43, [(43, 1)])
(653, 59, [(59, 1)])
(653, 211, [(211, 1)])
(659, 29, [(29, 1)])
(659, 409, [(409, 1)])
(661, 223, [(223, 1)])
(661, 947, [(947, 1)])
(673, 19, [(19, 1)])
(673, 193, [(193, 1)])
(677, 3, [(3, 1)])
(677, 41, [(41, 1)])
(677, 107, [(107, 1)])
(701, 3, [(3, 1)])
(709, 11, [(11, 1)])
(709, 17, [(17, 1)])
(709, 37, [(37, 1)])
(709, 43, [(43, 1)])
(709, 257, [(257, 1)])
(719, 113, [(113, 1)])
(719, 827, [(827, 1)])
(727, 347, [(347, 1)])
(733, 67, [(67, 1)])
(733, 757, [(757, 1)])
(743, 3, [(3, 1)])
(743, 191, [(191, 1)])
(743, 227, [(227, 1)])
(751, 967, [(967, 1)])
(757, 37, [(37, 1)])
(757, 449, [(449, 1)])
(761, 3, [(3, 1)])
(761, 103, [(103, 1)])
(761, 541, [(541, 1)])
(769, 13, [(13, 1)])
(773, 3, [(3, 1)])
(787, 11, [(11, 1)])
(787, 19, [(19, 1)])
(787, 37, [(37, 1)])
(787, 121, [(11, 2)])
(797, 19, [(19, 1)])
(797, 157, [(157, 1)])
(797, 383, [(383, 1)])
(797, 661, [(661, 1)])
(809, 107, [(107, 1)])
(809, 911, [(911, 1)])
(811, 19, [(19, 1)])
(821, 43, [(43, 1)])
(821, 709, [(709, 1)])
(823, 107, [(107, 1)])
(827, 3, [(3, 1)])
(827, 9, [(3, 2)])
(827, 929, [(929, 1)])
(829, 211, [(211, 1)])
(839, 3, [(3, 1)])
(839, 103, [(103, 1)])
(853, 13, [(13, 1)])
(853, 619, [(619, 1)])
(857, 3, [(3, 1)])
(857, 19, [(19, 1)])
(857, 23, [(23, 1)])
(859, 29, [(29, 1)])
(859, 673, [(673, 1)])
(863, 7, [(7, 1)])
(863, 151, [(151, 1)])
(877, 31, [(31, 1)])
(877, 43, [(43, 1)])
(883, 131, [(131, 1)])
(887, 1201, [(1201, 1)])
(911, 3, [(3, 1)])
(911, 47, [(47, 1)])
(911, 487, [(487, 1)])
(919, 5, [(5, 1)])
(919, 71, [(71, 1)])
(919, 131, [(131, 1)])
(929, 53, [(53, 1)])
(929, 79, [(79, 1)])
(929, 167, [(167, 1)])
(929, 571, [(571, 1)])
(937, 61, [(61, 1)])
(941, 7, [(7, 1)])
(941, 277, [(277, 1)])
(947, 7, [(7, 1)])
(947, 41, [(41, 1)])
(947, 71, [(71, 1)])
(953, 131, [(131, 1)])
(967, 5, [(5, 1)])
(967, 227, [(227, 1)])
(967, 503, [(503, 1)])
(971, 19, [(19, 1)])
(971, 61, [(61, 1)])
(977, 211, [(211, 1)])
(977, 311, [(311, 1)])
(983, 199, [(199, 1)])
(991, 31, [(31, 1)])
(997, 23, [(23, 1)])
(997, 821, [(821, 1)])
###end:输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千
===
def _辅助冫整理输出牜再四版扌(*, radix2max1_prime_generator_exp, radix2max1_exp, default_max1_exp=5000, marker='输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千', _doc=__doc__, radixes4empty_exps=None, default_max1_prime_generator_exp=1000, default_max1_prime_generator_exp4radixes4empty_exps=2000):
# implict:--bases4SPRP=[2,3,5,7]
# now-explicit:指数生成子多数受限于一千#{269:5000,其余radixes4empty_exps:2000,887:2000,其余radix:1000}
--radix2max1_prime_generator_exp='{269:5000,887:2000}'
--default_max1_prime_generator_exp4radixes4empty_exps=2000
--default_max1_prime_generator_exp=1000
--radix2max1_exp='{2:64949,3:38411,5:12077,7:17161}'
--radixes4empty_exps='[269, 281, 311, 331, 487, 499, 541, 601, 631, 683, 691, 739, 881, 907]'
    #excludes:887
py_adhoc_call  script.辅助冫有限域本原根判定牜泛化梅森指数   ,_辅助冫整理输出牜再四版扌 --radix2max1_prime_generator_exp='{269:5000,887:2000}' --default_max1_prime_generator_exp4radixes4empty_exps=2000 --default_max1_prime_generator_exp=1000  --radix2max1_exp='{2:64949,3:38411,5:12077,7:17161}' --radixes4empty_exps='[269, 281, 311, 331, 487, 499, 541, 601, 631, 683, 691, 739, 881, 907]' --default_max1_exp=5000  --marker:输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千  >> /sdcard/0my_files/tmp/1tmp

==>>:
@20250406
补丁前:整理输出牜再四版:here
###begin:整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千
    # implict:--bases4SPRP=[2,3,5,7]
    # fmt:(bp, [e], max1_e, max1_ep) where [[bp::prime][e::uint][gs:=filter(is_prime_,es)][ep:<-gs][bp < 1000][ep < max1_ep <- {1000,2000,5000}][2 <= e < max1_e <- {5000,64949,38411,12077,17161}][e <- gen_(gs)][is_SPRP_([2,3,5,7];(bp**ep-1)///(bp-1))][e <- 拟稠再四泛化梅森指数(bp;[2,3,5,7])][gs == (拟泛化梅森指数(bp;[2,3,5,7]) /-\ [2..<max1_ep])][es == (拟稠再四泛化梅森指数(bp;[2,3,5,7]) /-\ gen_(gs) /-\ [2..<max1_e])]]
    #   [es := (拟稠再四泛化梅森指数(bp;[2,3,5,7]) /-\ gen_(拟泛化梅森指数(bp;[2,3,5,7]) /-\ [2..<max1_ep]) /-\ [2..<max1_e])]
    # fmt:(radix, exps, max1_exp, max1_prime_generator_exp)
(2, [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 30, 31, 32, 34, 38, 40, 42, 49, 54, 61, 62, 65, 80, 85, 89, 93, 98, 107, 122, 127, 133, 147, 170, 254, 521, 607, 889], 64949, 1000)
(3, [3, 7, 9, 13, 21, 63, 71, 103, 541, 1623], 38411, 1000)
(5, [3, 7, 11, 13, 47, 49, 127, 141, 149, 181, 619, 929], 12077, 1000)
(7, [5, 13, 131, 149], 17161, 1000)
(11, [17, 19, 73, 139, 907], 5000, 1000)
(13, [5, 7, 137, 283, 883, 991], 5000, 1000)
(17, [3, 5, 7, 11, 15, 47, 71, 77, 235, 419], 5000, 1000)
(19, [19, 31, 47, 59, 61, 107, 337], 5000, 1000)
(23, [5], 5000, 1000)
(29, [5, 151], 5000, 1000)
(31, [7, 17, 31], 5000, 1000)
(37, [13, 71, 181, 251, 463, 521], 5000, 1000)
(41, [3, 83, 269, 409], 5000, 1000)
(43, [5, 13, 25], 5000, 1000)
(47, [127], 5000, 1000)
(53, [11, 31, 41], 5000, 1000)
(59, [3, 13, 479], 5000, 1000)
(61, [7, 37, 107, 769, 1369], 5000, 1000)
(67, [19, 367], 5000, 1000)
(71, [3, 31, 41, 157], 5000, 1000)
(73, [5, 7], 5000, 1000)
(79, [5, 109, 149, 659], 5000, 1000)
(83, [5], 5000, 1000)
(89, [3, 7, 43, 47, 71, 109, 571], 5000, 1000)
(97, [17, 37], 5000, 1000)
(101, [3, 337, 677], 5000, 1000)
(103, [19, 313], 5000, 1000)
(107, [17], 5000, 1000)
(109, [17], 5000, 1000)
(113, [23, 37], 5000, 1000)
(127, [5, 23, 31, 167], 5000, 1000)
(131, [3, 31, 263], 5000, 1000)
(137, [11, 19], 5000, 1000)
(139, [163, 173], 5000, 1000)
(149, [7, 13, 17, 317], 5000, 1000)
(151, [13, 29, 127], 5000, 1000)
(157, [17, 107], 5000, 1000)
(163, [7, 43, 241], 5000, 1000)
(167, [3, 19, 373], 5000, 1000)
(173, [3], 5000, 1000)
(179, [19], 5000, 1000)
(181, [17, 19, 157], 5000, 1000)
(191, [17], 5000, 1000)
(193, [5, 317], 5000, 1000)
(197, [31, 47, 283], 5000, 1000)
(199, [577], 5000, 1000)
(211, [41], 5000, 1000)
(223, [239, 241, 449], 5000, 1000)
(227, [5], 5000, 1000)
(229, [11, 29], 5000, 1000)
(233, [113], 5000, 1000)
(239, [5, 109], 5000, 1000)
(241, [17, 31], 5000, 1000)
(251, [7, 13, 17, 89, 227, 461], 5000, 1000)
(257, [23, 59, 487, 967], 5000, 1000)
(263, [5, 19], 5000, 1000)
(269, [], 5000, 5000)
(271, [41, 79, 97, 313, 709, 829], 5000, 1000)
(277, [5, 19, 109], 5000, 1000)
(281, [], 5000, 2000)
(283, [29, 31, 719], 5000, 1000)
(293, [3, 31, 93], 5000, 1000)
(307, [53], 5000, 1000)
(311, [], 5000, 2000)
(313, [109, 173], 5000, 1000)
(317, [157], 5000, 1000)
(331, [], 5000, 2000)
(337, [5, 19], 5000, 1000)
(347, [337, 401], 5000, 1000)
(349, [7, 17, 107], 5000, 1000)
(353, [7], 5000, 1000)
(359, [5, 59, 101, 383], 5000, 1000)
(367, [239], 5000, 1000)
(373, [5, 13, 23], 5000, 1000)
(379, [17, 31], 5000, 1000)
(383, [3, 9, 17, 199, 307], 5000, 1000)
(389, [11, 19], 5000, 1000)
(397, [5, 13], 5000, 1000)
(401, [127, 199], 5000, 1000)
(409, [43], 5000, 1000)
(419, [17, 347], 5000, 1000)
(421, [71, 97, 103, 109], 5000, 1000)
(431, [17, 19], 5000, 1000)
(433, [41, 599], 5000, 1000)
(439, [5, 41, 47, 151], 5000, 1000)
(443, [47], 5000, 1000)
(449, [19, 167], 5000, 1000)
(457, [5, 43], 5000, 1000)
(461, [7, 31, 59, 307, 521], 5000, 1000)
(463, [313, 397], 5000, 1000)
(467, [11], 5000, 1000)
(479, [5], 5000, 1000)
(487, [], 5000, 2000)
(491, [31, 67], 5000, 1000)
(499, [], 5000, 2000)
(503, [5, 37], 5000, 1000)
(509, [19, 181], 5000, 1000)
(521, [19, 139], 5000, 1000)
(523, [7, 19, 37, 227], 5000, 1000)
(541, [], 5000, 2000)
(547, [19, 503, 751], 5000, 1000)
(557, [5, 17], 5000, 1000)
(563, [5, 37, 263], 5000, 1000)
(569, [31], 5000, 1000)
(571, [17, 167, 181], 5000, 1000)
(577, [109, 139, 227], 5000, 1000)
(587, [29, 47], 5000, 1000)
(593, [83, 131, 197], 5000, 1000)
(599, [7, 17], 5000, 1000)
(601, [], 5000, 2000)
(607, [887], 5000, 1000)
(613, [131], 5000, 1000)
(617, [5, 101, 103, 313, 317], 5000, 1000)
(619, [11], 5000, 1000)
(631, [], 5000, 2000)
(641, [113, 613], 5000, 1000)
(643, [13, 541], 5000, 1000)
(647, [7], 5000, 1000)
(653, [17, 43, 59, 211], 5000, 1000)
(659, [29, 409], 5000, 1000)
(661, [223, 947], 5000, 1000)
(673, [19, 193], 5000, 1000)
(677, [3, 41, 107], 5000, 1000)
(683, [], 5000, 2000)
(691, [], 5000, 2000)
(701, [3], 5000, 1000)
(709, [11, 17, 37, 43, 257], 5000, 1000)
(719, [113, 827], 5000, 1000)
(727, [347], 5000, 1000)
(733, [67, 757], 5000, 1000)
(739, [], 5000, 2000)
(743, [3, 191, 227], 5000, 1000)
(751, [967], 5000, 1000)
(757, [37, 449], 5000, 1000)
(761, [3, 103, 541], 5000, 1000)
(769, [13], 5000, 1000)
(773, [3], 5000, 1000)
(787, [11, 19, 37, 121], 5000, 1000)
(797, [19, 157, 383, 661], 5000, 1000)
(809, [107, 911], 5000, 1000)
(811, [19], 5000, 1000)
(821, [43, 709], 5000, 1000)
(823, [107], 5000, 1000)
(827, [3, 9, 929], 5000, 1000)
(829, [211], 5000, 1000)
(839, [3, 103], 5000, 1000)
(853, [13, 619], 5000, 1000)
(857, [3, 19, 23], 5000, 1000)
(859, [29, 673], 5000, 1000)
(863, [7, 151], 5000, 1000)
(877, [31, 43], 5000, 1000)
(881, [], 5000, 2000)
(883, [131], 5000, 1000)
(887, [1201], 5000, 2000)
(907, [], 5000, 2000)
(911, [3, 47, 487], 5000, 1000)
(919, [5, 71, 131], 5000, 1000)
(929, [53, 79, 167, 571], 5000, 1000)
(937, [61], 5000, 1000)
(941, [7, 277], 5000, 1000)
(947, [7, 41, 71], 5000, 1000)
(953, [131], 5000, 1000)
(967, [5, 227, 503], 5000, 1000)
(971, [19, 61], 5000, 1000)
(977, [211, 311], 5000, 1000)
(983, [199], 5000, 1000)
(991, [31], 5000, 1000)
(997, [23, 821], 5000, 1000)
###end:整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千

===
def 再三再四泛化梅森数扌(radix, e, ep2c, /, *, 再三丷再四):

###begin:补丁前:非平凡再四泛化梅森数牜指数多数受限于五千牜指数生成子多数受限于一千
>>> for (radix, e, ep_c_pairs) in _iter_outputs5doc(marker='输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千'):
...     if ep_c_pairs == [(e,1)]:continue
...     n = 再三再四泛化梅森数扌(radix, e, ep2c:=dict(ep_c_pairs), 再三丷再四=True)
...     print((radix, e, ep_c_pairs, n))
...     #50行:
(2, 4, [(2, 2)], 5)
(2, 6, [(2, 1), (3, 1)], 1)
(2, 8, [(2, 3)], 17)
(2, 9, [(3, 2)], 73)
(2, 10, [(2, 1), (5, 1)], 11)
(2, 12, [(2, 2), (3, 1)], 13)
(2, 14, [(2, 1), (7, 1)], 43)
(2, 15, [(3, 1), (5, 1)], 151)
(2, 16, [(2, 4)], 257)
(2, 18, [(2, 1), (3, 2)], 19)
(2, 20, [(2, 2), (5, 1)], 41)
(2, 21, [(3, 1), (7, 1)], 337)
(2, 24, [(2, 3), (3, 1)], 241)
(2, 26, [(2, 1), (13, 1)], 2731)
(2, 27, [(3, 3)], 262657)
(2, 30, [(2, 1), (3, 1), (5, 1)], 331)
(2, 32, [(2, 5)], 65537)
(2, 34, [(2, 1), (17, 1)], 43691)
(2, 38, [(2, 1), (19, 1)], 174763)
(2, 40, [(2, 3), (5, 1)], 61681)
(2, 42, [(2, 1), (3, 1), (7, 1)], 5419)
(2, 49, [(7, 2)], 4432676798593)
(2, 54, [(2, 1), (3, 3)], 87211)
(2, 62, [(2, 1), (31, 1)], 715827883)
(2, 65, [(5, 1), (13, 1)], 145295143558111)
(2, 80, [(2, 4), (5, 1)], 4278255361)
(2, 85, [(5, 1), (17, 1)], 9520972806333758431)
(2, 93, [(3, 1), (31, 1)], 658812288653553079)
(2, 98, [(2, 1), (7, 2)], 4363953127297)
(2, 122, [(2, 1), (61, 1)], 768614336404564651)
(2, 133, [(7, 1), (19, 1)], 163537220852725398851434325720959)
(2, 147, [(3, 1), (7, 2)], 2741672362528725535068727)
(2, 170, [(2, 1), (5, 1), (17, 1)], 26831423036065352611)
(2, 254, [(2, 1), (127, 1)], 56713727820156410577229101238628035243)
(2, 889, [(7, 1), (127, 1)], 1504004909926131633188840257128563607541163140104723054723183378190537555932072058265677602337213984792802468007992843498623739068694344880627731976582462714986041644019253711037305513830373917224858668705029882514901678735617)
(3, 9, [(3, 2)], 757)
(3, 21, [(3, 1), (7, 1)], 368089)
(3, 63, [(3, 2), (7, 1)], 144542918285300809)
(3, 1623, [(3, 1), (541, 1)], 135286435544069818634699069106531268173679575006803733343735744660881556853655686872745748254238667257132432217596478995325283113710338740090646026637765317081908732182057132432444245059560190671721186831150264872333210333832978394264051162262670697142772797734006187890909872549437558879811648305555717577050059086722803774545473966803647231670257707455714164410235835876751263411346022496029462936025692026376806830899330473655400347470660525531887835511266079683189646295188648408706996816372026841131320015559601)
(5, 49, [(7, 2)], 227376585863531112677002031251)
(5, 141, [(3, 1), (47, 1)], 16286160623917663079467944573580125726889931566772922392814390121)
(17, 15, [(3, 1), (5, 1)], 6566760001)
(17, 77, [(7, 1), (11, 1)], 63183887777606431620036734659574373415341987361849452469359581232953058529)
(17, 235, [(5, 1), (47, 1)], 23783343082333791175948510366475121237461374639606255885138155776996588731553569390464569633536290550992699444321071546696536806124275456640593250722790120233384795540636553758144046951385780081613595430228429366725955535683521)
(43, 25, [(5, 2)], 467056170954468301850494793701001)
(61, 1369, [(37, 2)], 114641070912053814639130171211014320728951327379857948953121845363295423062293861061895654919100225568044141029461024866954775572243838741695750078804289816555966400425649630372281411591100937567708909925675101350515196849421145230116591521548863150731463188027592137949650992902681947891231930128910171515005985282295366361534342314060346284058246315106194756778557790981024753268403932839304894378290357254109122561789831567095156492521470719552738385467249695655041635816206183254840068057709074232201772616726913208466313026588491144132015605978065988777173075812070337307762954029890234129247969064812039667125729944174517936044611689392986315733079204121794104970732014795239824115067105505542760415778088026162758319419191293099557958415903918833785831574377350851780291410641464183987161086226823867513228911888038999715282736226361080489810392491738526073562414208471748959147332702143119943042517050138638907057595494256278319300469726544592193904261547554516837293780213115142897784631576537879379264535867192262751611595775816342911957297630877723506789024760466318402380147996229804793233130576631213310188804497516297749236669129884150623610137733365800827286570418964816479517566055969357015499523970225728675904166378384651749390630928202602327844681343240910343554984237158983243971895719282482130605015457346961355807802027292951840929689922806523808874858881280185800603613865855889743651683103117026942384517409592212792979492621317681718698699026268637387630889047109780822559202757511193367962374463626585771718526502261108674598342547134648235457157552212083089293090753517671055066790404723111407640277925227976245226069407671000533827070567038296427797174219862762148998853021364004312536754673329867537491825866455758900100822558645306880712369414198689358575857776132307090649943793242535005634389288525914191457545768586756014817943023945200222431056728452745454089746017233045761869357110909230245276894665324586702209076476537353037573463966724029625494920228738840546114634278607155182442153806608401811229560529201650566693416282899682338038629674530054418624177332581521706931177099775503390531105634396879852034502281266924774084699157820337814198071159497293755171645534611562778823830076567851458098751492578282723290030136325393678986489386680254613102568097760388294554014684191382814206067119332937072080908335413776850930737863510114628157)
(293, 93, [(3, 1), (31, 1)], 10246427455530215817894809913385894711852036607760186033884031035053289959917569795579148957822110140042739612436077321421060471938631185255263980649)
(383, 9, [(3, 2)], 3156404483062657)
(787, 121, [(11, 2)], 3607618119210770865761340243762738748052619810913195895888820221403283180846423135747835000931869716834628608106948639478797536869328949127232137227823027125403378957843720064089391536508694616856481036332701115532401897887546730915062428485611217665853152675617524957365798688514974633340218305373775638709306482838453)
(827, 9, [(3, 2)], 319913861581383373)

###end:补丁前:非平凡再四泛化梅森数牜指数多数受限于五千牜指数生成子多数受限于一千
===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,_iter_outputs5doc --marker:补丁前:非平凡再四泛化梅森数牜指数多数受限于五千牜指数生成子多数受限于一千
===

]]
[[
小毛病:再四泛化梅森指数即使是素数也不一定是泛化梅森指数
[泛化梅森指数(b) |<=| 再四泛化梅森指数(b) /-\ PRIMES]
[泛化梅森指数(b) =?=  再四泛化梅森指数(b) /-\ PRIMES]

def 枚举冫拟再四泛化梅森指数牜额外素数候选扌(*, radix, may_end4exp=None, may_begin4exp=None, verbose=False, try_resting_=None, to_output_fails=False):
枚举冫拟再四泛化梅森指数牜额外素数候选扌
===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟再四泛化梅森指数牜额外素数候选扌 --radix=2 --may_end4exp=1000 --may_begin4exp=None -verbose -to_output_fails
    <none>
===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟再四泛化梅森指数牜额外素数候选扌 --radix=2 --may_end4exp=64949 --may_begin4exp=None -verbose -to_output_fails
    <none>
===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟再四泛化梅森指数牜额外素数候选纟素基灬扌 --radixes='range(2,1000)' --may_end4exp=1000 --may_begin4exp=None +verbose +composite_radix_ok  >> /sdcard/0my_files/tmp/0tmp
(2, [])
(3, [2])
(4, [3])
(5, [2])
(6, [5])
(7, [2, 3])
(8, [7])
(9, [2])
(10, [3])
(11, [2, 5])
(12, [11])
(13, [2, 3])
(14, [13])
(15, [2, 7])
(16, [3, 5])
(17, [2])
(18, [17])
(19, [2, 3])
(20, [19])
(21, [2, 5])
(22, [3, 7])
(23, [2, 11])
(24, [23])
(25, [2, 3])
(26, [5])
(27, [2, 13])
(28, [3])
(29, [2, 7])
(30, [29])
(31, [2, 3, 5])
(32, [31])
(33, [2])
(34, [3, 11])
(35, [2, 17])
(36, [5, 7])
(37, [2, 3])
(38, [37])
(39, [2, 19])
(40, [3, 13])
(41, [2, 5])
(42, [41])
(43, [2, 3, 7])
(44, [43])
(45, [2, 11])
(46, [3, 5])
(47, [2, 23])
(48, [47])
(49, [2, 3])
(50, [7])
(51, [2, 5])
(52, [3, 17])
(53, [2, 13])
(54, [53])
(55, [2, 3])
(56, [5, 11])
(57, [2, 7])
(58, [3, 19])
(59, [2, 29])
(60, [59])
(61, [2, 3, 5])
(62, [61])
(63, [2, 31])
(64, [3, 7])
(65, [2])
(66, [5, 13])
(67, [2, 3, 11])
(68, [67])
(69, [2, 17])
(70, [3, 23])
(71, [2, 5, 7])
(72, [71])
(73, [2, 3])
(74, [73])
(75, [2, 37])
(76, [3, 5])
(77, [2, 19])
(78, [7, 11])
(79, [2, 3, 13])
(80, [79])
(81, [2, 5])
(82, [3])
(83, [2, 41])
(84, [83])
(85, [2, 3, 7])
(86, [5, 17])
(87, [2, 43])
(88, [3, 29])
(89, [2, 11])
(90, [89])
(91, [2, 3, 5])
(92, [7, 13])
(93, [2, 23])
(94, [3, 31])
(95, [2, 47])
(96, [5, 19])
(97, [2, 3])
(98, [97])
(99, [2, 7])
(100, [3, 11])
(101, [2, 5])
(102, [101])
(103, [2, 3, 17])
(104, [103])
(105, [2, 13])
(106, [3, 5, 7])
(107, [2, 53])
(108, [107])
(109, [2, 3])
(110, [109])
(111, [2, 5, 11])
(112, [3, 37])
(113, [2, 7])
(114, [113])
(115, [2, 3, 19])
(116, [5, 23])
(117, [2, 29])
(118, [3, 13])
(119, [2, 59])
(120, [7, 17])
(121, [2, 3, 5])
(122, [11])
(123, [2, 61])
(124, [3, 41])
(125, [2, 31])
(126, [5])
(127, [2, 3, 7])
(128, [127])
(129, [2])
(130, [3, 43])
(131, [2, 5, 13])
(132, [131])
(133, [2, 3, 11])
(134, [7, 19])
(135, [2, 67])
(136, [3, 5])
(137, [2, 17])
(138, [137])
(139, [2, 3, 23])
(140, [139])
(141, [2, 5, 7])
(142, [3, 47])
(143, [2, 71])
(144, [11, 13])
(145, [2, 3])
(146, [5, 29])
(147, [2, 73])
(148, [3, 7])
(149, [2, 37])
(150, [149])
(151, [2, 3, 5])
(152, [151])
(153, [2, 19])
(154, [3, 17])
(155, [2, 7, 11])
(156, [5, 31])
(157, [2, 3, 13])
(158, [157])
(159, [2, 79])
(160, [3, 53])
(161, [2, 5])
(162, [7, 23])
(163, [2, 3])
(164, [163])
(165, [2, 41])
(166, [3, 5, 11])
(167, [2, 83])
(168, [167])
(169, [2, 3, 7])
(170, [13])
(171, [2, 5, 17])
(172, [3, 19])
(173, [2, 43])
(174, [173])
(175, [2, 3, 29])
(176, [5, 7])
(177, [2, 11])
(178, [3, 59])
(179, [2, 89])
(180, [179])
(181, [2, 3, 5])
(182, [181])
(183, [2, 7, 13])
(184, [3, 61])
(185, [2, 23])
(186, [5, 37])
(187, [2, 3, 31])
(188, [11, 17])
(189, [2, 47])
(190, [3, 7])
(191, [2, 5, 19])
(192, [191])
(193, [2, 3])
(194, [193])
(195, [2, 97])
(196, [3, 5, 13])
(197, [2, 7])
(198, [197])
(199, [2, 3, 11])
(200, [199])
(201, [2, 5])
(202, [3, 67])
(203, [2, 101])
(204, [7, 29])
(205, [2, 3, 17])
(206, [5, 41])
(207, [2, 103])
(208, [3, 23])
(209, [2, 13])
(210, [11, 19])
(211, [2, 3, 5, 7])
(212, [211])
(213, [2, 53])
(214, [3, 71])
(215, [2, 107])
(216, [5, 43])
(217, [2, 3])
(218, [7, 31])
(219, [2, 109])
(220, [3, 73])
(221, [2, 5, 11])
(222, [13, 17])
(223, [2, 3, 37])
(224, [223])
(225, [2, 7])
(226, [3, 5])
(227, [2, 113])
(228, [227])
(229, [2, 3, 19])
(230, [229])
(231, [2, 5, 23])
(232, [3, 7, 11])
(233, [2, 29])
(234, [233])
(235, [2, 3, 13])
(236, [5, 47])
(237, [2, 59])
(238, [3, 79])
(239, [2, 7, 17])
(240, [239])
(241, [2, 3, 5])
(242, [241])
(243, [2, 11])
(244, [3])
(245, [2, 61])
(246, [5, 7])
(247, [2, 3, 41])
(248, [13, 19])
(249, [2, 31])
(250, [3, 83])
(251, [2, 5])
(252, [251])
(253, [2, 3, 7])
(254, [11, 23])
(255, [2, 127])
(256, [3, 5, 17])
(257, [2])
(258, [257])
(259, [2, 3, 43])
(260, [7, 37])
(261, [2, 5, 13])
(262, [3, 29])
(263, [2, 131])
(264, [263])
(265, [2, 3, 11])
(266, [5, 53])
(267, [2, 7, 19])
(268, [3, 89])
(269, [2, 67])
(270, [269])
(271, [2, 3, 5])
(272, [271])
(273, [2, 17])
(274, [3, 7, 13])
(275, [2, 137])
(276, [5, 11])
(277, [2, 3, 23])
(278, [277])
(279, [2, 139])
(280, [3, 31])
(281, [2, 5, 7])
(282, [281])
(283, [2, 3, 47])
(284, [283])
(285, [2, 71])
(286, [3, 5, 19])
(287, [2, 11, 13])
(288, [7, 41])
(289, [2, 3])
(290, [17])
(291, [2, 5, 29])
(292, [3, 97])
(293, [2, 73])
(294, [293])
(295, [2, 3, 7])
(296, [5, 59])
(297, [2, 37])
(298, [3, 11])
(299, [2, 149])
(300, [13, 23])
(301, [2, 3, 5])
(302, [7, 43])
(303, [2, 151])
(304, [3, 101])
(305, [2, 19])
(306, [5, 61])
(307, [2, 3, 17])
(308, [307])
(309, [2, 7, 11])
(310, [3, 103])
(311, [2, 5, 31])
(312, [311])
(313, [2, 3, 13])
(314, [313])
(315, [2, 157])
(316, [3, 5, 7])
(317, [2, 79])
(318, [317])
(319, [2, 3, 53])
(320, [11, 29])
(321, [2, 5])
(322, [3, 107])
(323, [2, 7, 23])
(324, [17, 19])
(325, [2, 3])
(326, [5, 13])
(327, [2, 163])
(328, [3, 109])
(329, [2, 41])
(330, [7, 47])
(331, [2, 3, 5, 11])
(332, [331])
(333, [2, 83])
(334, [3, 37])
(335, [2, 167])
(336, [5, 67])
(337, [2, 3, 7])
(338, [337])
(339, [2, 13])
(340, [3, 113])
(341, [2, 5, 17])
(342, [11, 31])
(343, [2, 3, 19])
(344, [7])
(345, [2, 43])
(346, [3, 5, 23])
(347, [2, 173])
(348, [347])
(349, [2, 3, 29])
(350, [349])
(351, [2, 5, 7])
(352, [3, 13])
(353, [2, 11])
(354, [353])
(355, [2, 3, 59])
(356, [5, 71])
(357, [2, 89])
(358, [3, 7, 17])
(359, [2, 179])
(360, [359])
(361, [2, 3, 5])
(362, [19])
(363, [2, 181])
(364, [3, 11])
(365, [2, 7, 13])
(366, [5, 73])
(367, [2, 3, 61])
(368, [367])
(369, [2, 23])
(370, [3, 41])
(371, [2, 5, 37])
(372, [7, 53])
(373, [2, 3, 31])
(374, [373])
(375, [2, 11, 17])
(376, [3, 5])
(377, [2, 47])
(378, [13, 29])
(379, [2, 3, 7])
(380, [379])
(381, [2, 5, 19])
(382, [3, 127])
(383, [2, 191])
(384, [383])
(385, [2, 3])
(386, [5, 7, 11])
(387, [2, 193])
(388, [3, 43])
(389, [2, 97])
(390, [389])
(391, [2, 3, 5, 13])
(392, [17, 23])
(393, [2, 7])
(394, [3, 131])
(395, [2, 197])
(396, [5, 79])
(397, [2, 3, 11])
(398, [397])
(399, [2, 199])
(400, [3, 7, 19])
(401, [2, 5])
(402, [401])
(403, [2, 3, 67])
(404, [13, 31])
(405, [2, 101])
(406, [3, 5])
(407, [2, 7, 29])
(408, [11, 37])
(409, [2, 3, 17])
(410, [409])
(411, [2, 5, 41])
(412, [3, 137])
(413, [2, 103])
(414, [7, 59])
(415, [2, 3, 23])
(416, [5, 83])
(417, [2, 13])
(418, [3, 139])
(419, [2, 11, 19])
(420, [419])
(421, [2, 3, 5, 7])
(422, [421])
(423, [2, 211])
(424, [3, 47])
(425, [2, 53])
(426, [5, 17])
(427, [2, 3, 71])
(428, [7, 61])
(429, [2, 107])
(430, [3, 11, 13])
(431, [2, 5, 43])
(432, [431])
(433, [2, 3])
(434, [433])
(435, [2, 7, 31])
(436, [3, 5, 29])
(437, [2, 109])
(438, [19, 23])
(439, [2, 3, 73])
(440, [439])
(441, [2, 5, 11])
(442, [3, 7])
(443, [2, 13, 17])
(444, [443])
(445, [2, 3, 37])
(446, [5, 89])
(447, [2, 223])
(448, [3, 149])
(449, [2, 7])
(450, [449])
(451, [2, 3, 5])
(452, [11, 41])
(453, [2, 113])
(454, [3, 151])
(455, [2, 227])
(456, [5, 7, 13])
(457, [2, 3, 19])
(458, [457])
(459, [2, 229])
(460, [3, 17])
(461, [2, 5, 23])
(462, [461])
(463, [2, 3, 7, 11])
(464, [463])
(465, [2, 29])
(466, [3, 5, 31])
(467, [2, 233])
(468, [467])
(469, [2, 3, 13])
(470, [7, 67])
(471, [2, 5, 47])
(472, [3, 157])
(473, [2, 59])
(474, [11, 43])
(475, [2, 3, 79])
(476, [5, 19])
(477, [2, 7, 17])
(478, [3, 53])
(479, [2, 239])
(480, [479])
(481, [2, 3, 5])
(482, [13, 37])
(483, [2, 241])
(484, [3, 7, 23])
(485, [2, 11])
(486, [5, 97])
(487, [2, 3])
(488, [487])
(489, [2, 61])
(490, [3, 163])
(491, [2, 5, 7])
(492, [491])
(493, [2, 3, 41])
(494, [17, 29])
(495, [2, 13, 19])
(496, [3, 5, 11])
(497, [2, 31])
(498, [7, 71])
(499, [2, 3, 83])
(500, [499])
(501, [2, 5])
(502, [3, 167])
(503, [2, 251])
(504, [503])
(505, [2, 3, 7])
(506, [5, 101])
(507, [2, 11, 23])
(508, [3, 13])
(509, [2, 127])
(510, [509])
(511, [2, 3, 5, 17])
(512, [7, 73])
(513, [2])
(514, [3, 19])
(515, [2, 257])
(516, [5, 103])
(517, [2, 3, 43])
(518, [11, 47])
(519, [2, 7, 37])
(520, [3, 173])
(521, [2, 5, 13])
(522, [521])
(523, [2, 3, 29])
(524, [523])
(525, [2, 131])
(526, [3, 5, 7])
(527, [2, 263])
(528, [17, 31])
(529, [2, 3, 11])
(530, [23])
(531, [2, 5, 53])
(532, [3, 59])
(533, [2, 7, 19])
(534, [13, 41])
(535, [2, 3, 89])
(536, [5, 107])
(537, [2, 67])
(538, [3, 179])
(539, [2, 269])
(540, [7, 11])
(541, [2, 3, 5])
(542, [541])
(543, [2, 271])
(544, [3, 181])
(545, [2, 17])
(546, [5, 109])
(547, [2, 3, 7, 13])
(548, [547])
(549, [2, 137])
(550, [3, 61])
(551, [2, 5, 11])
(552, [19, 29])
(553, [2, 3, 23])
(554, [7, 79])
(555, [2, 277])
(556, [3, 5, 37])
(557, [2, 139])
(558, [557])
(559, [2, 3, 31])
(560, [13, 43])
(561, [2, 5, 7])
(562, [3, 11, 17])
(563, [2, 281])
(564, [563])
(565, [2, 3, 47])
(566, [5, 113])
(567, [2, 283])
(568, [3, 7])
(569, [2, 71])
(570, [569])
(571, [2, 3, 5, 19])
(572, [571])
(573, [2, 11, 13])
(574, [3, 191])
(575, [2, 7, 41])
(576, [5, 23])
(577, [2, 3])
(578, [577])
(579, [2, 17])
(580, [3, 193])
(581, [2, 5, 29])
(582, [7, 83])
(583, [2, 3, 97])
(584, [11, 53])
(585, [2, 73])
(586, [3, 5, 13])
(587, [2, 293])
(588, [587])
(589, [2, 3, 7])
(590, [19, 31])
(591, [2, 5, 59])
(592, [3, 197])
(593, [2, 37])
(594, [593])
(595, [2, 3, 11])
(596, [5, 7, 17])
(597, [2, 149])
(598, [3, 199])
(599, [2, 13, 23])
(600, [599])
(601, [2, 3, 5])
(602, [601])
(603, [2, 7, 43])
(604, [3, 67])
(605, [2, 151])
(606, [5, 11])
(607, [2, 3, 101])
(608, [607])
(609, [2, 19])
(610, [3, 7, 29])
(611, [2, 5, 61])
(612, [13, 47])
(613, [2, 3, 17])
(614, [613])
(615, [2, 307])
(616, [3, 5, 41])
(617, [2, 7, 11])
(618, [617])
(619, [2, 3, 103])
(620, [619])
(621, [2, 5, 31])
(622, [3, 23])
(623, [2, 311])
(624, [7, 89])
(625, [2, 3, 13])
(626, [5])
(627, [2, 313])
(628, [3, 11, 19])
(629, [2, 157])
(630, [17, 37])
(631, [2, 3, 5, 7])
(632, [631])
(633, [2, 79])
(634, [3, 211])
(635, [2, 317])
(636, [5, 127])
(637, [2, 3, 53])
(638, [7, 13])
(639, [2, 11, 29])
(640, [3, 71])
(641, [2, 5])
(642, [641])
(643, [2, 3, 107])
(644, [643])
(645, [2, 7, 23])
(646, [3, 5, 43])
(647, [2, 17, 19])
(648, [647])
(649, [2, 3])
(650, [11, 59])
(651, [2, 5, 13])
(652, [3, 7, 31])
(653, [2, 163])
(654, [653])
(655, [2, 3, 109])
(656, [5, 131])
(657, [2, 41])
(658, [3, 73])
(659, [2, 7, 47])
(660, [659])
(661, [2, 3, 5, 11])
(662, [661])
(663, [2, 331])
(664, [3, 13, 17])
(665, [2, 83])
(666, [5, 7, 19])
(667, [2, 3, 37])
(668, [23, 29])
(669, [2, 167])
(670, [3, 223])
(671, [2, 5, 67])
(672, [11, 61])
(673, [2, 3, 7])
(674, [673])
(675, [2, 337])
(676, [3, 5])
(677, [2, 13])
(678, [677])
(679, [2, 3, 113])
(680, [7, 97])
(681, [2, 5, 17])
(682, [3, 227])
(683, [2, 11, 31])
(684, [683])
(685, [2, 3, 19])
(686, [5, 137])
(687, [2, 7])
(688, [3, 229])
(689, [2, 43])
(690, [13, 53])
(691, [2, 3, 5, 23])
(692, [691])
(693, [2, 173])
(694, [3, 7, 11])
(695, [2, 347])
(696, [5, 139])
(697, [2, 3, 29])
(698, [17, 41])
(699, [2, 349])
(700, [3, 233])
(701, [2, 5, 7])
(702, [701])
(703, [2, 3, 13])
(704, [19, 37])
(705, [2, 11])
(706, [3, 5, 47])
(707, [2, 353])
(708, [7, 101])
(709, [2, 3, 59])
(710, [709])
(711, [2, 5, 71])
(712, [3, 79])
(713, [2, 89])
(714, [23, 31])
(715, [2, 3, 7, 17])
(716, [5, 11, 13])
(717, [2, 179])
(718, [3, 239])
(719, [2, 359])
(720, [719])
(721, [2, 3, 5])
(722, [7, 103])
(723, [2, 19])
(724, [3, 241])
(725, [2, 181])
(726, [5, 29])
(727, [2, 3, 11])
(728, [727])
(729, [2, 7, 13])
(730, [3])
(731, [2, 5, 73])
(732, [17, 43])
(733, [2, 3, 61])
(734, [733])
(735, [2, 367])
(736, [3, 5, 7])
(737, [2, 23])
(738, [11, 67])
(739, [2, 3, 41])
(740, [739])
(741, [2, 5, 37])
(742, [3, 13, 19])
(743, [2, 7, 53])
(744, [743])
(745, [2, 3, 31])
(746, [5, 149])
(747, [2, 373])
(748, [3, 83])
(749, [2, 11, 17])
(750, [7, 107])
(751, [2, 3, 5])
(752, [751])
(753, [2, 47])
(754, [3, 251])
(755, [2, 13, 29])
(756, [5, 151])
(757, [2, 3, 7])
(758, [757])
(759, [2, 379])
(760, [3, 11, 23])
(761, [2, 5, 19])
(762, [761])
(763, [2, 3, 127])
(764, [7, 109])
(765, [2, 191])
(766, [3, 5, 17])
(767, [2, 383])
(768, [13, 59])
(769, [2, 3])
(770, [769])
(771, [2, 5, 7, 11])
(772, [3, 257])
(773, [2, 193])
(774, [773])
(775, [2, 3, 43])
(776, [5, 31])
(777, [2, 97])
(778, [3, 7, 37])
(779, [2, 389])
(780, [19, 41])
(781, [2, 3, 5, 13])
(782, [11, 71])
(783, [2, 17, 23])
(784, [3, 29])
(785, [2, 7])
(786, [5, 157])
(787, [2, 3, 131])
(788, [787])
(789, [2, 197])
(790, [3, 263])
(791, [2, 5, 79])
(792, [7, 113])
(793, [2, 3, 11])
(794, [13, 61])
(795, [2, 397])
(796, [3, 5, 53])
(797, [2, 199])
(798, [797])
(799, [2, 3, 7, 19])
(800, [17, 47])
(801, [2, 5])
(802, [3, 89])
(803, [2, 401])
(804, [11, 73])
(805, [2, 3, 67])
(806, [5, 7, 23])
(807, [2, 13, 31])
(808, [3, 269])
(809, [2, 101])
(810, [809])
(811, [2, 3, 5])
(812, [811])
(813, [2, 7, 29])
(814, [3, 271])
(815, [2, 11, 37])
(816, [5, 163])
(817, [2, 3, 17])
(818, [19, 43])
(819, [2, 409])
(820, [3, 7, 13])
(821, [2, 5, 41])
(822, [821])
(823, [2, 3, 137])
(824, [823])
(825, [2, 103])
(826, [3, 5, 11])
(827, [2, 7, 59])
(828, [827])
(829, [2, 3, 23])
(830, [829])
(831, [2, 5, 83])
(832, [3, 277])
(833, [2, 13])
(834, [7, 17])
(835, [2, 3, 139])
(836, [5, 167])
(837, [2, 11, 19])
(838, [3, 31])
(839, [2, 419])
(840, [839])
(841, [2, 3, 5, 7])
(842, [29])
(843, [2, 421])
(844, [3, 281])
(845, [2, 211])
(846, [5, 13])
(847, [2, 3, 47])
(848, [7, 11])
(849, [2, 53])
(850, [3, 283])
(851, [2, 5, 17])
(852, [23, 37])
(853, [2, 3, 71])
(854, [853])
(855, [2, 7, 61])
(856, [3, 5, 19])
(857, [2, 107])
(858, [857])
(859, [2, 3, 11, 13])
(860, [859])
(861, [2, 5, 43])
(862, [3, 7, 41])
(863, [2, 431])
(864, [863])
(865, [2, 3])
(866, [5, 173])
(867, [2, 433])
(868, [3, 17])
(869, [2, 7, 31])
(870, [11, 79])
(871, [2, 3, 5, 29])
(872, [13, 67])
(873, [2, 109])
(874, [3, 97])
(875, [2, 19, 23])
(876, [5, 7])
(877, [2, 3, 73])
(878, [877])
(879, [2, 439])
(880, [3, 293])
(881, [2, 5, 11])
(882, [881])
(883, [2, 3, 7])
(884, [883])
(885, [2, 13, 17])
(886, [3, 5, 59])
(887, [2, 443])
(888, [887])
(889, [2, 3, 37])
(890, [7, 127])
(891, [2, 5, 89])
(892, [3, 11])
(893, [2, 223])
(894, [19, 47])
(895, [2, 3, 149])
(896, [5, 179])
(897, [2, 7])
(898, [3, 13, 23])
(899, [2, 449])
(900, [29, 31])
(901, [2, 3, 5])
(902, [17, 53])
(903, [2, 11, 41])
(904, [3, 7, 43])
(905, [2, 113])
(906, [5, 181])
(907, [2, 3, 151])
(908, [907])
(909, [2, 227])
(910, [3, 101])
(911, [2, 5, 7, 13])
(912, [911])
(913, [2, 3, 19])
(914, [11, 83])
(915, [2, 457])
(916, [3, 5, 61])
(917, [2, 229])
(918, [7, 131])
(919, [2, 3, 17])
(920, [919])
(921, [2, 5, 23])
(922, [3, 307])
(923, [2, 461])
(924, [13, 71])
(925, [2, 3, 7, 11])
(926, [5, 37])
(927, [2, 463])
(928, [3, 103])
(929, [2, 29])
(930, [929])
(931, [2, 3, 5, 31])
(932, [7, 19])
(933, [2, 233])
(934, [3, 311])
(935, [2, 467])
(936, [5, 11, 17])
(937, [2, 3, 13])
(938, [937])
(939, [2, 7, 67])
(940, [3, 313])
(941, [2, 5, 47])
(942, [941])
(943, [2, 3, 157])
(944, [23, 41])
(945, [2, 59])
(946, [3, 5, 7])
(947, [2, 11, 43])
(948, [947])
(949, [2, 3, 79])
(950, [13, 73])
(951, [2, 5, 19])
(952, [3, 317])
(953, [2, 7, 17])
(954, [953])
(955, [2, 3, 53])
(956, [5, 191])
(957, [2, 239])
(958, [3, 11, 29])
(959, [2, 479])
(960, [7, 137])
(961, [2, 3, 5])
(962, [31])
(963, [2, 13, 37])
(964, [3, 107])
(965, [2, 241])
(966, [5, 193])
(967, [2, 3, 7, 23])
(968, [967])
(969, [2, 11])
(970, [3, 17, 19])
(971, [2, 5, 97])
(972, [971])
(973, [2, 3])
(974, [7, 139])
(975, [2, 487])
(976, [3, 5, 13])
(977, [2, 61])
(978, [977])
(979, [2, 3, 163])
(980, [11, 89])
(981, [2, 5, 7])
(982, [3, 109])
(983, [2, 491])
(984, [983])
(985, [2, 3, 41])
(986, [5, 197])
(987, [2, 17, 29])
(988, [3, 7, 47])
(989, [2, 13, 19])
(990, [23, 43])
(991, [2, 3, 5, 11])
(992, [991])
(993, [2, 31])
(994, [3, 331])
(995, [2, 7, 71])
(996, [5, 199])
(997, [2, 3, 83])
(998, [997])
(999, [2, 499])

===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟再四泛化梅森指数牜额外素数候选纟素基灬扌 --radixes='range(2,1000)' --may_end4exp=1000 --may_begin4exp=None +verbose -composite_radix_ok  >> /sdcard/0my_files/tmp/0tmp
(2, [])
(3, [2])
(5, [2])
(7, [2, 3])
(11, [2, 5])
(13, [2, 3])
(17, [2])
(19, [2, 3])
(23, [2, 11])
(29, [2, 7])
(31, [2, 3, 5])
(37, [2, 3])
(41, [2, 5])
(43, [2, 3, 7])
(47, [2, 23])
(53, [2, 13])
(59, [2, 29])
(61, [2, 3, 5])
(67, [2, 3, 11])
(71, [2, 5, 7])
(73, [2, 3])
(79, [2, 3, 13])
(83, [2, 41])
(89, [2, 11])
(97, [2, 3])
(101, [2, 5])
(103, [2, 3, 17])
(107, [2, 53])
(109, [2, 3])
(113, [2, 7])
(127, [2, 3, 7])
(131, [2, 5, 13])
(137, [2, 17])
(139, [2, 3, 23])
(149, [2, 37])
(151, [2, 3, 5])
(157, [2, 3, 13])
(163, [2, 3])
(167, [2, 83])
(173, [2, 43])
(179, [2, 89])
(181, [2, 3, 5])
(191, [2, 5, 19])
(193, [2, 3])
(197, [2, 7])
(199, [2, 3, 11])
(211, [2, 3, 5, 7])
(223, [2, 3, 37])
(227, [2, 113])
(229, [2, 3, 19])
(233, [2, 29])
(239, [2, 7, 17])
(241, [2, 3, 5])
(251, [2, 5])
(257, [2])
(263, [2, 131])
(269, [2, 67])
(271, [2, 3, 5])
(277, [2, 3, 23])
(281, [2, 5, 7])
(283, [2, 3, 47])
(293, [2, 73])
(307, [2, 3, 17])
(311, [2, 5, 31])
(313, [2, 3, 13])
(317, [2, 79])
(331, [2, 3, 5, 11])
(337, [2, 3, 7])
(347, [2, 173])
(349, [2, 3, 29])
(353, [2, 11])
(359, [2, 179])
(367, [2, 3, 61])
(373, [2, 3, 31])
(379, [2, 3, 7])
(383, [2, 191])
(389, [2, 97])
(397, [2, 3, 11])
(401, [2, 5])
(409, [2, 3, 17])
(419, [2, 11, 19])
(421, [2, 3, 5, 7])
(431, [2, 5, 43])
(433, [2, 3])
(439, [2, 3, 73])
(443, [2, 13, 17])
(449, [2, 7])
(457, [2, 3, 19])
(461, [2, 5, 23])
(463, [2, 3, 7, 11])
(467, [2, 233])
(479, [2, 239])
(487, [2, 3])
(491, [2, 5, 7])
(499, [2, 3, 83])
(503, [2, 251])
(509, [2, 127])
(521, [2, 5, 13])
(523, [2, 3, 29])
(541, [2, 3, 5])
(547, [2, 3, 7, 13])
(557, [2, 139])
(563, [2, 281])
(569, [2, 71])
(571, [2, 3, 5, 19])
(577, [2, 3])
(587, [2, 293])
(593, [2, 37])
(599, [2, 13, 23])
(601, [2, 3, 5])
(607, [2, 3, 101])
(613, [2, 3, 17])
(617, [2, 7, 11])
(619, [2, 3, 103])
(631, [2, 3, 5, 7])
(641, [2, 5])
(643, [2, 3, 107])
(647, [2, 17, 19])
(653, [2, 163])
(659, [2, 7, 47])
(661, [2, 3, 5, 11])
(673, [2, 3, 7])
(677, [2, 13])
(683, [2, 11, 31])
(691, [2, 3, 5, 23])
(701, [2, 5, 7])
(709, [2, 3, 59])
(719, [2, 359])
(727, [2, 3, 11])
(733, [2, 3, 61])
(739, [2, 3, 41])
(743, [2, 7, 53])
(751, [2, 3, 5])
(757, [2, 3, 7])
(761, [2, 5, 19])
(769, [2, 3])
(773, [2, 193])
(787, [2, 3, 131])
(797, [2, 199])
(809, [2, 101])
(811, [2, 3, 5])
(821, [2, 5, 41])
(823, [2, 3, 137])
(827, [2, 7, 59])
(829, [2, 3, 23])
(839, [2, 419])
(853, [2, 3, 71])
(857, [2, 107])
(859, [2, 3, 11, 13])
(863, [2, 431])
(877, [2, 3, 73])
(881, [2, 5, 11])
(883, [2, 3, 7])
(887, [2, 443])
(907, [2, 3, 151])
(911, [2, 5, 7, 13])
(919, [2, 3, 17])
(929, [2, 29])
(937, [2, 3, 13])
(941, [2, 5, 47])
(947, [2, 11, 43])
(953, [2, 7, 17])
(967, [2, 3, 7, 23])
(971, [2, 5, 97])
(977, [2, 61])
(983, [2, 491])
(991, [2, 3, 5, 11])
(997, [2, 3, 83])
===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟再四泛化梅森指数牜额外素数候选纟素基灬扌 --radixes='range(2,1000)' --may_end4exp=1000 --may_begin4exp=None +verbose -composite_radix_ok  --may_case4trial_division:bit_length --may_bases4SPRP='[2,3,5,7]' >> /sdcard/0my_files/tmp/0tmp
(2, [])
(3, [2])
(5, [2])
(7, [2, 3])
(11, [2, 5])
(13, [2, 3])
(17, [])
(19, [2, 3])
(23, [2, 11])
(29, [7])
(31, [2, 3])
(37, [2])
(41, [5])
(43, [2, 3])
(47, [2])
(53, [])
(59, [])
(61, [2])
(67, [2])
(71, [])
(73, [2, 3])
(79, [2])
(83, [])
(89, [])
(97, [3])
(101, [])
(103, [2, 3])
(107, [])
(109, [])
(113, [])
(127, [2, 3])
(131, [])
(137, [])
(139, [])
(149, [])
(151, [2, 5])
(157, [2, 3])
(163, [2])
(167, [])
(173, [])
(179, [])
(181, [])
(191, [2])
(193, [2])
(197, [])
(199, [3])
(211, [2])
(223, [2, 3])
(227, [])
(229, [])
(233, [])
(239, [])
(241, [3])
(251, [])
(257, [])
(263, [])
(269, [])
(271, [2, 3])
(277, [2])
(281, [])
(283, [2])
(293, [])
(307, [])
(311, [])
(313, [2])
(317, [])
(331, [2])
(337, [])
(347, [])
(349, [])
(353, [])
(359, [])
(367, [2])
(373, [31])
(379, [])
(383, [2])
(389, [])
(397, [2])
(401, [])
(409, [3])
(419, [])
(421, [2, 3, 7])
(431, [])
(433, [])
(439, [])
(443, [13])
(449, [])
(457, [2])
(461, [])
(463, [2])
(467, [])
(479, [])
(487, [2])
(491, [])
(499, [])
(503, [])
(509, [])
(521, [])
(523, [2])
(541, [2])
(547, [2])
(557, [])
(563, [])
(569, [])
(571, [])
(577, [])
(587, [])
(593, [])
(599, [23])
(601, [5])
(607, [2])
(613, [2])
(617, [])
(619, [])
(631, [2])
(641, [])
(643, [])
(647, [])
(653, [])
(659, [])
(661, [2, 3])
(673, [2, 3])
(677, [13])
(683, [])
(691, [2])
(701, [7])
(709, [])
(719, [])
(727, [3])
(733, [2])
(739, [])
(743, [])
(751, [2])
(757, [2])
(761, [5, 19])
(769, [])
(773, [])
(787, [2])
(797, [])
(809, [101])
(811, [])
(821, [])
(823, [2])
(827, [])
(829, [])
(839, [])
(853, [])
(857, [])
(859, [3])
(863, [])
(877, [2])
(881, [])
(883, [3])
(887, [])
(907, [2])
(911, [7])
(919, [])
(929, [])
(937, [3])
(941, [5])
(947, [])
(953, [])
(967, [])
(971, [])
(977, [])
(983, [])
(991, [2, 5])
(997, [2])
===
py_adhoc_call   script.辅助冫有限域本原根判定牜泛化梅森指数   ,枚举冫拟再四泛化梅森指数牜额外素数候选纟素基灬扌 --radixes='range(2,1000)' --may_end4exp=1000 --may_begin4exp=None +verbose -composite_radix_ok  --may_case4trial_division:bit_length --may_bases4SPRP='[2,3,5,7]' +nonempty_only >> /sdcard/0my_files/tmp/0tmp
    #74行:
###begin:再四泛化梅森数牜仅额外素指数牜指数受限于一千
(3, [2])
(5, [2])
(7, [2, 3])
(11, [2, 5])
(13, [2, 3])
(19, [2, 3])
(23, [2, 11])
(29, [7])
(31, [2, 3])
(37, [2])
(41, [5])
(43, [2, 3])
(47, [2])
(61, [2])
(67, [2])
(73, [2, 3])
(79, [2])
(97, [3])
(103, [2, 3])
(127, [2, 3])
(151, [2, 5])
(157, [2, 3])
(163, [2])
(191, [2])
(193, [2])
(199, [3])
(211, [2])
(223, [2, 3])
(241, [3])
(271, [2, 3])
(277, [2])
(283, [2])
(313, [2])
(331, [2])
(367, [2])
(373, [31])
(383, [2])
(397, [2])
(409, [3])
(421, [2, 3, 7])
(443, [13])
(457, [2])
(463, [2])
(487, [2])
(523, [2])
(541, [2])
(547, [2])
(599, [23])
(601, [5])
(607, [2])
(613, [2])
(631, [2])
(661, [2, 3])
(673, [2, 3])
(677, [13])
(691, [2])
(701, [7])
(727, [3])
(733, [2])
(751, [2])
(757, [2])
(761, [5, 19])
(787, [2])
(809, [101])
(823, [2])
(859, [3])
(877, [2])
(883, [3])
(907, [2])
(911, [7])
(937, [3])
(941, [5])
(991, [2, 5])
(997, [2])
###end:再四泛化梅森数牜仅额外素指数牜指数受限于一千
===
TODO:打补丁:
    +再四泛化梅森数牜仅额外素指数牜指数受限于一千:goto
    +整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千:goto
def _打补丁冫整理输出牜再四版扌(*, case4trial_division, bases4SPRP, marker='整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千', _doc=__doc__, verbose=False, try_resting_=None):

py_adhoc_call { +flush4print +to_show_timedelta  --may_args4PeriodicToilLeisureTime='(60,60)' --may_prompt_string6resting:$'\n\n    resting...\n\n'  --smay_kwd4supply_func4resting:try_resting_ }  script.辅助冫有限域本原根判定牜泛化梅森指数   ,_打补丁冫整理输出牜再四版扌 --case4trial_division:bit_length --bases4SPRP='[2,3,5,7]'  --marker:整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千  +verbose >> /sdcard/0my_files/tmp/0tmp
    #168+40==208行
@20250407
补丁后整理输出牜再四版:here
###begin:补丁后整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千
    ##补丁:拟泛化梅森指数(bp;[2,3,5,7]) --> (再四拟泛化梅森指数(bp;[2,3,5,7]) /-\ PRIMES)
    # implict:--bases4SPRP=[2,3,5,7]
    # fmt:(bp, [e], max1_e, max1_ep) where [[bp::prime][e::uint][gs:=filter(is_prime_,es)][ep:<-gs][bp < 1000][ep < max1_ep <- {1000,2000,5000}][2 <= e < max1_e <- {5000,64949,38411,12077,17161}][e <- gen_(gs)][is_SPRP_([2,3,5,7];(bp**ep-1)///(bp-1))][e <- 拟稠再四泛化梅森指数(bp;[2,3,5,7])][gs == ((再四拟泛化梅森指数(bp;[2,3,5,7]) /-\ PRIMES) /-\ [2..<max1_ep])][es == (拟稠再四泛化梅森指数(bp;[2,3,5,7]) /-\ gen_(gs) /-\ [2..<max1_e])]]
    #   [es := (拟稠再四泛化梅森指数(bp;[2,3,5,7]) /-\ gen_((再四拟泛化梅森指数(bp;[2,3,5,7]) /-\ PRIMES) /-\ [2..<max1_ep]) /-\ [2..<max1_e])]
    # fmt:(radix, exps, max1_exp, max1_prime_generator_exp)
(2, [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 30, 31, 32, 34, 38, 40, 42, 49, 54, 61, 62, 65, 80, 85, 89, 93, 98, 107, 122, 127, 133, 147, 170, 254, 521, 607, 889], 64949, 1000)
##(3, 6, {3: 1, 2: 1})
##(3, 14, {7: 1, 2: 1})
##(3, 26, {13: 1, 2: 1})
##(3, 4, {2: 2})
##(3, 12, {3: 1, 2: 2})
##(3, 8, {2: 3})
##(3, 24, {3: 1, 2: 3})
(3, [2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 21, 24, 26, 63, 71, 103, 541, 1623], 38411, 1000)
##(5, 6, {3: 1, 2: 1})
##(5, 4, {2: 2})
##(5, 12, {3: 1, 2: 2})
##(5, 8, {2: 3})
##(5, 24, {3: 1, 2: 3})
##(5, 48, {3: 1, 2: 4})
(5, [2, 3, 4, 6, 7, 8, 11, 12, 13, 24, 47, 48, 49, 127, 141, 149, 181, 619, 929], 12077, 1000)
##(7, 6, {2: 1, 3: 1})
##(7, 18, {2: 1, 3: 2})
##(7, 54, {2: 1, 3: 3})
(7, [2, 3, 5, 6, 13, 18, 54, 131, 149], 17161, 1000)
##(11, 4, {2: 2})
##(11, 8, {2: 3})
##(11, 10, {2: 1, 5: 1})
##(11, 20, {2: 2, 5: 1})
(11, [2, 4, 5, 8, 10, 17, 19, 20, 73, 139, 907], 5000, 1000)
##(13, 6, {2: 1, 3: 1})
##(13, 9, {3: 2})
(13, [2, 3, 5, 6, 7, 9, 137, 283, 883, 991], 5000, 1000)
(17, [3, 5, 7, 11, 15, 47, 71, 77, 235, 419], 5000, 1000)
##(19, 4, {2: 2})
(19, [2, 3, 4, 19, 31, 47, 59, 61, 107, 337], 5000, 1000)
##(23, 22, {2: 1, 11: 1})
(23, [2, 5, 11, 22], 5000, 1000)
(29, [5, 7, 151], 5000, 1000)
(31, [2, 3, 7, 17, 31], 5000, 1000)
(37, [2, 13, 71, 181, 251, 463, 521], 5000, 1000)
(41, [3, 5, 83, 269, 409], 5000, 1000)
##(43, 10, {5: 1, 2: 1})
##(43, 15, {5: 1, 3: 1})
(43, [2, 3, 5, 10, 13, 15, 25], 5000, 1000)
(47, [2, 127], 5000, 1000)
(53, [11, 31, 41], 5000, 1000)
(59, [3, 13, 479], 5000, 1000)
##(61, 14, {7: 1, 2: 1})
##(61, 4, {2: 2})
##(61, 8, {2: 3})
(61, [2, 4, 7, 8, 14, 37, 107, 769, 1369], 5000, 1000)
(67, [2, 19, 367], 5000, 1000)
(71, [3, 31, 41, 157], 5000, 1000)
##(73, 14, {7: 1, 2: 1})
(73, [2, 3, 5, 7, 14], 5000, 1000)
##(79, 4, {2: 2})
(79, [2, 4, 5, 109, 149, 659], 5000, 1000)
(83, [5], 5000, 1000)
(89, [3, 7, 43, 47, 71, 109, 571], 5000, 1000)
(97, [3, 17, 37], 5000, 1000)
(101, [3, 337, 677], 5000, 1000)
(103, [2, 3, 19, 313], 5000, 1000)
(107, [17], 5000, 1000)
(109, [17], 5000, 1000)
(113, [23, 37], 5000, 1000)
(127, [2, 3, 5, 23, 31, 167], 5000, 1000)
(131, [3, 31, 263], 5000, 1000)
(137, [11, 19], 5000, 1000)
(139, [163, 173], 5000, 1000)
(149, [7, 13, 17, 317], 5000, 1000)
##(151, 25, {5: 2})
(151, [2, 5, 13, 25, 29, 127], 5000, 1000)
(157, [2, 3, 17, 107], 5000, 1000)
(163, [2, 7, 43, 241], 5000, 1000)
(167, [3, 19, 373], 5000, 1000)
(173, [3], 5000, 1000)
(179, [19], 5000, 1000)
(181, [17, 19, 157], 5000, 1000)
(191, [2, 17], 5000, 1000)
(193, [2, 5, 317], 5000, 1000)
(197, [31, 47, 283], 5000, 1000)
(199, [3, 577], 5000, 1000)
(211, [2, 41], 5000, 1000)
(223, [2, 3, 239, 241, 449], 5000, 1000)
(227, [5], 5000, 1000)
(229, [11, 29], 5000, 1000)
(233, [113], 5000, 1000)
(239, [5, 109], 5000, 1000)
(241, [3, 17, 31], 5000, 1000)
(251, [7, 13, 17, 89, 227, 461], 5000, 1000)
(257, [23, 59, 487, 967], 5000, 1000)
(263, [5, 19], 5000, 1000)
(269, [], 5000, 5000)
##(271, 4, {2: 2})
(271, [2, 3, 4, 41, 79, 97, 313, 709, 829], 5000, 1000)
(277, [2, 5, 19, 109], 5000, 1000)
(281, [], 5000, 2000)
(283, [2, 29, 31, 719], 5000, 1000)
(293, [3, 31, 93], 5000, 1000)
(307, [53], 5000, 1000)
(311, [], 5000, 2000)
(313, [2, 109, 173], 5000, 1000)
(317, [157], 5000, 1000)
(331, [2], 5000, 2000)
(337, [5, 19], 5000, 1000)
(347, [337, 401], 5000, 1000)
(349, [7, 17, 107], 5000, 1000)
(353, [7], 5000, 1000)
(359, [5, 59, 101, 383], 5000, 1000)
(367, [2, 239], 5000, 1000)
(373, [5, 13, 23, 31], 5000, 1000)
(379, [17, 31], 5000, 1000)
(383, [2, 3, 9, 17, 199, 307], 5000, 1000)
(389, [11, 19], 5000, 1000)
##(397, 26, {13: 1, 2: 1})
(397, [2, 5, 13, 26], 5000, 1000)
(401, [127, 199], 5000, 1000)
(409, [3, 43], 5000, 1000)
(419, [17, 347], 5000, 1000)
(421, [2, 3, 7, 71, 97, 103, 109], 5000, 1000)
(431, [17, 19], 5000, 1000)
(433, [41, 599], 5000, 1000)
(439, [5, 41, 47, 151], 5000, 1000)
(443, [13, 47], 5000, 1000)
(449, [19, 167], 5000, 1000)
(457, [2, 5, 43], 5000, 1000)
(461, [7, 31, 59, 307, 521], 5000, 1000)
(463, [2, 313, 397], 5000, 1000)
(467, [11], 5000, 1000)
(479, [5], 5000, 1000)
(487, [2], 5000, 2000)
(491, [31, 67], 5000, 1000)
(499, [], 5000, 2000)
(503, [5, 37], 5000, 1000)
(509, [19, 181], 5000, 1000)
(521, [19, 139], 5000, 1000)
(523, [2, 7, 19, 37, 227], 5000, 1000)
(541, [2], 5000, 2000)
(547, [2, 19, 503, 751], 5000, 1000)
(557, [5, 17], 5000, 1000)
(563, [5, 37, 263], 5000, 1000)
(569, [31], 5000, 1000)
(571, [17, 167, 181], 5000, 1000)
(577, [109, 139, 227], 5000, 1000)
(587, [29, 47], 5000, 1000)
(593, [83, 131, 197], 5000, 1000)
(599, [7, 17, 23], 5000, 1000)
(601, [5], 5000, 2000)
(607, [2, 887], 5000, 1000)
(613, [2, 131], 5000, 1000)
(617, [5, 101, 103, 313, 317], 5000, 1000)
(619, [11], 5000, 1000)
##(631, 4, {2: 2})
(631, [2, 4], 5000, 2000)
(641, [113, 613], 5000, 1000)
(643, [13, 541], 5000, 1000)
(647, [7], 5000, 1000)
(653, [17, 43, 59, 211], 5000, 1000)
(659, [29, 409], 5000, 1000)
##(661, 4, {2: 2})
(661, [2, 3, 4, 223, 947], 5000, 1000)
(673, [2, 3, 19, 193], 5000, 1000)
(677, [3, 13, 41, 107], 5000, 1000)
(683, [], 5000, 2000)
(691, [2], 5000, 2000)
(701, [3, 7], 5000, 1000)
(709, [11, 17, 37, 43, 257], 5000, 1000)
(719, [113, 827], 5000, 1000)
(727, [3, 347], 5000, 1000)
(733, [2, 67, 757], 5000, 1000)
(739, [], 5000, 2000)
(743, [3, 191, 227], 5000, 1000)
##(751, 1934, {967: 1, 2: 1})
##(751, 4, {2: 2})
(751, [2, 4, 967, 1934], 5000, 1000)
(757, [2, 37, 449], 5000, 1000)
(761, [3, 5, 19, 103, 541], 5000, 1000)
(769, [13], 5000, 1000)
(773, [3], 5000, 1000)
(787, [2, 11, 19, 37, 121], 5000, 1000)
(797, [19, 157, 383, 661], 5000, 1000)
(809, [101, 107, 911], 5000, 1000)
(811, [19], 5000, 1000)
(821, [43, 709], 5000, 1000)
(823, [2, 107], 5000, 1000)
(827, [3, 9, 929], 5000, 1000)
(829, [211], 5000, 1000)
(839, [3, 103], 5000, 1000)
(853, [13, 619], 5000, 1000)
(857, [3, 19, 23], 5000, 1000)
(859, [3, 29, 673], 5000, 1000)
(863, [7, 151], 5000, 1000)
(877, [2, 31, 43], 5000, 1000)
(881, [], 5000, 2000)
(883, [3, 131], 5000, 1000)
(887, [1201], 5000, 2000)
(907, [2], 5000, 2000)
##(911, 21, {3: 1, 7: 1})
(911, [3, 7, 21, 47, 487], 5000, 1000)
(919, [5, 71, 131], 5000, 1000)
(929, [53, 79, 167, 571], 5000, 1000)
(937, [3, 61], 5000, 1000)
(941, [5, 7, 277], 5000, 1000)
(947, [7, 41, 71], 5000, 1000)
(953, [131], 5000, 1000)
(967, [5, 227, 503], 5000, 1000)
(971, [19, 61], 5000, 1000)
(977, [211, 311], 5000, 1000)
(983, [199], 5000, 1000)
##(991, 4, {2: 2})
(991, [2, 4, 5, 31], 5000, 1000)
(997, [2, 23, 821], 5000, 1000)
###end:补丁后整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千
===
###begin:补丁后:分类冫再四泛化梅森数牜指数多数受限于五千牜指数生成子多数受限于一千
>>> from seed.helper.stable_repr import stable_repr
>>> for (radix, exps, max1_exp, max1_prime_generator_exp) in _iter_outputs5doc(marker='补丁后整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千'):
...     for e in exps:
...         (case, ep2c, n) = _分类冫版本号纟再囜泛化梅森数扌(radix, e, may_ep2c:=None, subcasing=True)
...         print(stable_repr((radix, e, ep2c, -case, n)))
...         #581行:
(2, 2, {2: 1}, -1, 3)
(2, 3, {3: 1}, -1, 7)
(2, 4, {2: 2}, -2, 5)
(2, 5, {5: 1}, -1, 31)
(2, 6, {2: 1, 3: 1}, -43, 1)
(2, 7, {7: 1}, -1, 127)
(2, 8, {2: 3}, -2, 17)
(2, 9, {3: 2}, -2, 73)
(2, 10, {2: 1, 5: 1}, -3, 11)
(2, 12, {2: 2, 3: 1}, -3, 13)
(2, 13, {13: 1}, -1, 8191)
(2, 14, {2: 1, 7: 1}, -3, 43)
(2, 15, {3: 1, 5: 1}, -3, 151)
(2, 16, {2: 4}, -2, 257)
(2, 17, {17: 1}, -1, 131071)
(2, 18, {2: 1, 3: 2}, -43, 19)
(2, 19, {19: 1}, -1, 524287)
(2, 20, {2: 2, 5: 1}, -43, 41)
(2, 21, {3: 1, 7: 1}, -43, 337)
(2, 24, {2: 3, 3: 1}, -3, 241)
(2, 26, {2: 1, 13: 1}, -3, 2731)
(2, 27, {3: 3}, -2, 262657)
(2, 30, {2: 1, 3: 1, 5: 1}, -3, 331)
(2, 31, {31: 1}, -1, 2147483647)
(2, 32, {2: 5}, -2, 65537)
(2, 34, {2: 1, 17: 1}, -3, 43691)
(2, 38, {2: 1, 19: 1}, -3, 174763)
(2, 40, {2: 3, 5: 1}, -3, 61681)
(2, 42, {2: 1, 3: 1, 7: 1}, -3, 5419)
(2, 49, {7: 2}, -2, 4432676798593)
(2, 54, {2: 1, 3: 3}, -43, 87211)
(2, 61, {61: 1}, -1, 2305843009213693951)
(2, 62, {2: 1, 31: 1}, -3, 715827883)
(2, 65, {5: 1, 13: 1}, -3, 145295143558111)
(2, 80, {2: 4, 5: 1}, -3, 4278255361)
(2, 85, {5: 1, 17: 1}, -3, 9520972806333758431)
(2, 89, {89: 1}, -1, 618970019642690137449562111)
(2, 93, {3: 1, 31: 1}, -3, 658812288653553079)
(2, 98, {2: 1, 7: 2}, -3, 4363953127297)
(2, 107, {107: 1}, -1, 162259276829213363391578010288127)
(2, 122, {2: 1, 61: 1}, -3, 768614336404564651)
(2, 127, {127: 1}, -1, 170141183460469231731687303715884105727)
(2, 133, {7: 1, 19: 1}, -3, 163537220852725398851434325720959)
(2, 147, {3: 1, 7: 2}, -43, 2741672362528725535068727)
(2, 170, {2: 1, 5: 1, 17: 1}, -3, 26831423036065352611)
(2, 254, {2: 1, 127: 1}, -3, 56713727820156410577229101238628035243)
(2, 521, {521: 1}, -1, 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151)
(2, 607, {607: 1}, -1, 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127)
(2, 889, {7: 1, 127: 1}, -43, 1504004909926131633188840257128563607541163140104723054723183378190537555932072058265677602337213984792802468007992843498623739068694344880627731976582462714986041644019253711037305513830373917224858668705029882514901678735617)
(3, 2, {2: 1}, -41, 1)
(3, 3, {3: 1}, -1, 13)
(3, 4, {2: 2}, -42, 5)
(3, 6, {2: 1, 3: 1}, -3, 7)
(3, 7, {7: 1}, -1, 1093)
(3, 8, {2: 3}, -42, 41)
(3, 9, {3: 2}, -2, 757)
(3, 12, {2: 2, 3: 1}, -3, 73)
(3, 13, {13: 1}, -1, 797161)
(3, 14, {2: 1, 7: 1}, -3, 547)
(3, 21, {3: 1, 7: 1}, -3, 368089)
(3, 24, {2: 3, 3: 1}, -3, 6481)
(3, 26, {2: 1, 13: 1}, -3, 398581)
(3, 63, {3: 2, 7: 1}, -3, 144542918285300809)
(3, 71, {71: 1}, -1, 3754733257489862401973357979128773)
(3, 103, {103: 1}, -1, 6957596529882152968992225251835887181478451547013)
(3, 541, {541: 1}, -1, 663084395471818436731691851499754503355465637904740797172567784209623516341640238400510288503463008441736852119221000000301102907948169398408014645814376158251490141606616528088759064995410612765793960501606910585490086339893058591064091241255832207903808201)
(3, 1623, {3: 1, 541: 1}, -3, 135286435544069818634699069106531268173679575006803733343735744660881556853655686872745748254238667257132432217596478995325283113710338740090646026637765317081908732182057132432444245059560190671721186831150264872333210333832978394264051162262670697142772797734006187890909872549437558879811648305555717577050059086722803774545473966803647231670257707455714164410235835876751263411346022496029462936025692026376806830899330473655400347470660525531887835511266079683189646295188648408706996816372026841131320015559601)
(5, 2, {2: 1}, -41, 3)
(5, 3, {3: 1}, -1, 31)
(5, 4, {2: 2}, -42, 13)
(5, 6, {2: 1, 3: 1}, -43, 7)
(5, 7, {7: 1}, -1, 19531)
(5, 8, {2: 3}, -42, 313)
(5, 11, {11: 1}, -1, 12207031)
(5, 12, {2: 2, 3: 1}, -3, 601)
(5, 13, {13: 1}, -1, 305175781)
(5, 24, {2: 3, 3: 1}, -3, 390001)
(5, 47, {47: 1}, -1, 177635683940025046467781066894531)
(5, 48, {2: 4, 3: 1}, -3, 152587500001)
(5, 49, {7: 2}, -2, 227376585863531112677002031251)
(5, 127, {127: 1}, -1, 14693679385278593849609206715278070972733319459651094018859396328480215743184089660644531)
(5, 141, {3: 1, 47: 1}, -3, 16286160623917663079467944573580125726889931566772922392814390121)
(5, 149, {149: 1}, -1, 35032461608120426773093239582247903282006548546912894293926707097244777067146515037165954709053039550781)
(5, 181, {181: 1}, -1, 815663058499815565838786763657068444462645532258620818469829556933715405574685778402862015856733535201783524826169013977050781)
(5, 619, {619: 1}, -1, 1149139339972917612905859963756803959098341443304966913142347324923898626737719076860276030395228900386874376453787094334535897724625161448243286016083472616301829493727589186752415411518815513513188653607789335439056683481774870999044049378038610542097905774057044077931436914036888020005064547897035207825993485927279302571673236827045083340815370132092682949566420825990422295705880874452974385602210816159640671685338020324707031)
(5, 929, {929: 1}, -1, 5509016039626555102750433597331990169604225940558929822422390345689877069708514964293008457825789737049099302890500942018248417429545964133503170592940440726276547975639475016617516186843032093097304656022225792362707443263444662781304807328667506652585537427105052484227060716466072291841412861288516914472168090388096419737654884109599498783666101176941228364171080991550625301158170433832040404967589048438616962117215694992499357824095007364664275364387621749200734655594684777716853976532655915942037358303037157334647655433195811452366126548502804087019566986220509138690549500686036870379961039469169205642917752641096740262582898139953613281)
(7, 2, {2: 1}, -41, 1)
(7, 3, {3: 1}, -41, 19)
(7, 5, {5: 1}, -1, 2801)
(7, 6, {2: 1, 3: 1}, -3, 43)
(7, 13, {13: 1}, -1, 16148168401)
(7, 18, {2: 1, 3: 2}, -3, 117307)
(7, 54, {2: 1, 3: 3}, -3, 1628413557556843)
(7, 131, {131: 1}, -1, 85053461164796801949539541639542805770666392330682673302530819774105141531698707146930307290253537320447270457)
(7, 149, {149: 1}, -1, 138502212710103408700774381033135503926663324993317631729227790657325163310341833227775945426052637092067324133850503035623601)
(11, 2, {2: 1}, -41, 3)
(11, 4, {2: 2}, -42, 61)
(11, 5, {5: 1}, -41, 3221)
(11, 8, {2: 3}, -42, 7321)
(11, 10, {2: 1, 5: 1}, -3, 13421)
(11, 17, {17: 1}, -1, 50544702849929377)
(11, 19, {19: 1}, -1, 6115909044841454629)
(11, 20, {2: 2, 5: 1}, -3, 212601841)
(11, 73, {73: 1}, -1, 1051153199500053598403188407217590190707671147285551702341089650185945215953)
(11, 139, {139: 1}, -1, 567000232521795739625828281267171344486805385881217575081149660163046217465544573355710592079769932651989153833612198334843467861091902034340949)
(11, 907, {907: 1}, -1, 34927334101562340034078663724552099111555633973477127007404668848583991066254341050368683887239283891018145046062431794034292466475422310614329667649358199897817576309187135704241776357914996372480149103950268210361019030376687522116086055085401003198256584470788300799188542629901936592073593860983155500796244563716759124470467748921327677632313885004270934982881700970914714924634908528563264001387192961000223565932423767361433237866315850713422358304786810595892658233668802278456885083408926815233204918868261589814626352641233093194751339361440607526396810311070601958590720629554959729516954720753120864740442682601658489720037978428951726731166127491421425385238399930701325363280880843477599178900178387009860382335376148899809796788444602540959225054360163089797405604076162779912969313294744999061034474022615561335963033636155458949301232848891605802897491614189190800321509579422623556532523340241163979578504948606871724593388117)
(13, 2, {2: 1}, -41, 7)
(13, 3, {3: 1}, -41, 61)
(13, 5, {5: 1}, -1, 30941)
(13, 6, {2: 1, 3: 1}, -3, 157)
(13, 7, {7: 1}, -1, 5229043)
(13, 9, {3: 2}, -42, 1609669)
(13, 137, {137: 1}, -1, 33967064818628105570428371821852312061168411783811040488642021266092993085361339253601985446861169567884880567515689118116178162598657497243307737178361)
(13, 283, {283: 1}, -1, 146820756272062487216366287640580179803962738754552266169197323227128962051935865096811476677016967606874570764606509576841312374779155734443260532909628415461259388383980799054889303498854155818644545906739000979295237174958863309363866596379987124476448615559290086174278092808330138939663499757321836281358124383)
(13, 883, {883: 1}, -1, 34103491244661234780624787915466934210871998868665493973376224580302782319674338401720578738839223749737318657725900078279825500068227165570573678152198002703109693050302458743798313042011267847039534295390295615135832480028375531371914052265304346515920228235136654674687949790029086215922923506851298447529601132715395155763703045730626401158954409789365447424536262056052565183105574232679470967835671442594692903929617550066188231635863039216832747076682096782502521315921044423499190872402776158686498411630139573430660620437770800636014329391083885855748446773084039043391381658383574996686633108687436598644749949522260927711937107780710461159533709512458917589097792642514434269087423850250064255863791283517966737060935281672877247701127325998811563081433073897164670588713082701087299373679581156563304640971131264272447811790076764731795409323237172839563905638148901248092735233329106524250110673229436182668494040645860883888959965309677261961876508161379370534567933383)
(13, 991, {991: 1}, -1, 68973281719462518324506403915644079908352486684442341223026940925114345244285404846411238070340228071402806421028188955913405068469368922341502383952601283442731389788842010362889203946306728127263176123571934607008188905443842760710070767133593492352071090227083247462130532847125844833486121348014128959936067637336173830026811129442395026854920614735249214129144390440266824264915628972004916740555418305929358489393282678742216081137946500976637307431062704687649426564919515175890693153036414830953121629250581324686200359895051027063579921117255574877414191576210622457094271506219892660855336214675183046608123189107363549136749881999656582816754781925726004117850849806590589511277957345921933564890214991993202222387080915931369450145962201463034412889444964869962853018464601966850285295883508414143199972346506322202698509338061033131695623788068017065259078388991513668160020382810212397437339350546623737866866401249888679770183871028691222067312853934670765654072724772650289779874444460748150408670456114936352196126010809935444312662588741134657070908018958036471606724018956637091418203)
(17, 3, {3: 1}, -1, 307)
(17, 5, {5: 1}, -1, 88741)
(17, 7, {7: 1}, -1, 25646167)
(17, 11, {11: 1}, -1, 2141993519227)
(17, 15, {3: 1, 5: 1}, -3, 6566760001)
(17, 47, {47: 1}, -1, 423622795798733187216959754496018087627393990881167960767)
(17, 71, {71: 1}, -1, 143798195172461138521036839345269251740737334259640879028155379795667047030720519999127)
(17, 77, {7: 1, 11: 1}, -3, 63183887777606431620036734659574373415341987361849452469359581232953058529)
(17, 235, {5: 1, 47: 1}, -3, 23783343082333791175948510366475121237461374639606255885138155776996588731553569390464569633536290550992699444321071546696536806124275456640593250722790120233384795540636553758144046951385780081613595430228429366725955535683521)
(17, 419, {419: 1}, -1, 22593217065142772428593245270020676742262367560706995126021402014834317748620935297914791596283202010658672347687549742508440949226620129168967533331457330890001803662924832323469054605119284399522344856432919745253467588606759719131971488779190403046167791999602299223032935481084784493769727543451980349327946688030498782465626938235969694696414940663770081928569174036147198798432914173656655261384512176847166712353454139054094916387195012334423862229750784324992308549236265106053267143928178731201122132308947)
(19, 2, {2: 1}, -41, 5)
(19, 3, {3: 1}, -41, 127)
(19, 4, {2: 2}, -42, 181)
(19, 19, {19: 1}, -1, 109912203092239643840221)
(19, 31, {31: 1}, -1, 243270318891483838103593381595151809701)
(19, 47, {47: 1}, -1, 70169234660105574400577005075855017842743056666917902427141)
(19, 59, {59: 1}, -1, 155306613932666028670208812450645212905178047040045530562317564121001023821)
(19, 61, {61: 1}, -1, 56065687629692436349945381294682921858769274981456436532996640647681369599401)
(19, 107, {107: 1}, -1, 3727029213159221227481880371758988192479699585560736992193446518019059007305528138257031138276615655165685013865802400046939654576178541)
(19, 337, {337: 1}, -1, 4838280198759042104164150696652453597025649718339176199894470764125421216656929344614251020947854329968055045609171874304628353537088091664361356965818251685372838048069828329290338313624510603857058349807640848479815106031250787592586248135943256795991324043573261126460910555382128222887609416517382439988712627457079574583475333873449015643873076884899898353109724901083710631947688720778615224932409562153305986133847679862241)
(23, 2, {2: 1}, -41, 3)
(23, 5, {5: 1}, -1, 292561)
(23, 11, {11: 1}, -41, 3937230404603)
(23, 22, {2: 1, 11: 1}, -3, 39700406579747)
(29, 5, {5: 1}, -1, 732541)
(29, 7, {7: 1}, -41, 88009573)
(29, 151, {151: 1}, -1, 2371044207714477564967925829229152401500682180358149598143086363592429387617958004918161181418203988556157500511384608732775760661423264675805824179507569711072541711022438852792113081828770546775396346628482584198835251)
(31, 2, {2: 1}, -41, 1)
(31, 3, {3: 1}, -41, 331)
(31, 7, {7: 1}, -1, 917087137)
(31, 17, {17: 1}, -1, 751670559138758105956097)
(31, 31, {31: 1}, -1, 568972471024107865287021434301977158534824481)
(37, 2, {2: 1}, -41, 19)
(37, 13, {13: 1}, -1, 6765811783780036261)
(37, 71, {71: 1}, -1, 61097003103184669235517359417485905028897850322027200141703138362247062800773927423870139498763891657761796267)
(37, 181, {181: 1}, -1, 1941822617972922786499498229322628324625998602044144443712349674435647746067399436025456293752804765946258110978288830389116972324722451022736430480413148106697744794758256891092762375726414119007967102244857644367883254168602750915817190640585351673417413613495191251316525750407901)
(37, 251, {251: 1}, -1, 115433068394068386767134664054652958800252863220188325673598550830295699141517592521319801348724226567630809727277865694338629063781688754215890190691653797822700695394924223498380843789898363002725265914560136612592260516914926318353717153917905805060115779592608795294914781711562901374033895403003552473276192325893401240266639655633053622900440905733434006522775249218182395618451163243367)
(37, 463, {463: 1}, -1, 33196763330499316018908693072240691302748362839548648930589022160413608870565349516800445739049990288348255684939509110971671354049233268573002010785117696535589463337308170455200237330695674275290950759508568277324815911078782853942044008835913770167140942651101933277276051577686438437661042082942696343489612829625107678899020483269101017873682224025096648942033882237115872553713489114630435019739039363749233129046925339427529766958273513585432183197063762492299393514656198925836770508797489762112375095976326209091070473043363428212969955330272952659275555557353616823025334563924595199590641062818787242088521206251000618551534466324793369389442966046109680379685409976749389547220975802495626117032028810533177671107)
(37, 521, {521: 1}, -1, 299775225358994914906982741374513110305801142833126255290181075906947340810207044071172000625923856684374684079671664272985182791177666913858244103242681835163500671372076676966382012543330138228894326025205071042806472129506501380985640643311399831888463157721086959360228959374417485702064905570380064950754255617935681783110066350560087955608877999700256900594882600997104709379523316845944051352514706642924182108348726359818227147414181832765158232318673507242207884660363015322414566169003295210109372517094162115938427542548881455151321828877918703364793349655608907532361639291939004669404026501951335764586636692511353408743534475478465759821344319470748435365425841930527778948896461915164694410166008612249057689298051234552735175152593175001770040210227909594164804401888473758052966768039203456716080601)
(41, 3, {3: 1}, -1, 1723)
(41, 5, {5: 1}, -41, 579281)
(41, 83, {83: 1}, -1, 1815516149411504925816848838815851358994487656027133573770941622975018443816715265278378295348087618707241356050904372886003491785803)
(41, 269, {269: 1}, -1, 1725033233193437441013289649259461835199584797305915513409521712697029289803129624312733451212101607748667772493194716024274274173002757866083629352420078655217178042009669331258784578499130461145266457829106875296886539780887650896129477202808921042187411162699060929258673990594368456087128958643967805394700966957492363844539251174931171445185688732027177852315758818714843571638895791334605349598085987672828284548753266802936509)
(41, 409, {409: 1}, -1, 10630101394803255136128714939531945338497336479225726576106115294456078267505789693495135437291166620197187419099292833441659878282943427989835247131415929257624153258694920495728952824963055872457490752272270183621509384278021935208307854452460806137582348261014897281510277810568756875665398795344047170148287310978103092031663042205883579043159179986820759652349405143646504099682017572498132433267810999770649462691568278535974068405760949976018966035487458644317463367588657668033414361358990265466185067557634648874974287913821756982491282370711111509636260696484463373122762748127186155632828763351729525709094401921431173362486266858532852934995536249)
(43, 2, {2: 1}, -41, 11)
(43, 3, {3: 1}, -41, 631)
(43, 5, {5: 1}, -1, 3500201)
(43, 10, {2: 1, 5: 1}, -3, 3341101)
(43, 13, {13: 1}, -1, 40911050578149780601)
(43, 15, {3: 1, 5: 1}, -3, 11416525335601)
(43, 25, {5: 2}, -2, 467056170954468301850494793701001)
(47, 2, {2: 1}, -41, 3)
(47, 127, {127: 1}, -1, 4939353696332137648660158610486273245800498531219046056285398249895046060595791007616253627660064463584012737427605759732894439061580553419678353685587762357233722998146101218334328347614340561470069315963989297)
(53, 11, {11: 1}, -1, 178250690949465223)
(53, 31, {31: 1}, -1, 5451909197716512648567801549394409749475252856973123)
(53, 41, {41: 1}, -1, 953470608251114628059528312260750980775135610852327164630237682734201)
(59, 3, {3: 1}, -1, 3541)
(59, 13, {13: 1}, -1, 1809873235795386729241)
(59, 479, {479: 1}, -1, 2983222068148720733447992529353101234163734231410191731396727548181670720262190269345702480347705940346229827382842531270836541314696602627743858005677732364597123164800579005670498747102901211444034308248927174439156222961474322127159893703665371826296181146480969475908507738109919023732557391697878528174574458938343525252088423606489164629011645396325361060682918396211770408894844713251709361037354956791377038531878603818966571473883354877610174363797800954041315700704182381665628872915926224276270231154365507157448266791704901862743306244474262653558796172357504340597513677420101022602677801738717566033701613534473934853920842071905813751696138644819850020841897139522879364071068998674237224604150375556887838742907880054815948382322253362656028384625084277707945951721351552211948225601562158711775290476302859231308826141895998317261)
(61, 2, {2: 1}, -41, 31)
(61, 4, {2: 2}, -42, 1861)
(61, 7, {7: 1}, -1, 52379047267)
(61, 8, {2: 3}, -42, 6922921)
(61, 14, {2: 1, 7: 1}, -3, 50689400581)
(61, 37, {37: 1}, -1, 19013087418896543607659206142267856546797091624826498592389251997)
(61, 107, {107: 1}, -1, 1787068072183489959355917245074490852001974374710474511066168213268167897664877679792661268797505940832263998751724784843720723117733561936531170027436678181088514971669145376304688265206367)
(61, 769, {769: 1}, -1, 1381948544775221057422199956616209558587432278830005480956681538763014548805712819200519925961050402923187866833598891331715222102223997839995131670868941599425846604979708152439478784307163411010748083275847315684963648281914311686010688020053359256114126276198988408479150458131428160876329018384222169756557479336050444683893650567130549861807790572933247144551961154002722415244365126533387625983770267346251289011506666650195679133677412778071325337771045620017433880441456058697268001317572454352456252065310077450998227236468646914499742029065768863474817872002602589191239923595210196340709364257723437651212852954983752760072561418917217351505501602056904943659231529204030619790696348086236997917754507827915865255896189297571952357820248593875862692795092744500870322572274597589067235604561641859573520768578245953912897997205259530645726246774269150896026083351934302087103519624769698691111414102705916431004263219960082389572124796029953026390007135745197694873380733631502412386667569290139852956423049621834425818579061479824683108526324499093704138441542132241535395427650812342396186340597203737974534746293570684696794519717002459446391177049672486136265510714397315239114252431613997183804337778622110251703040833497810067713906274715872932928760857901257442572018756046701802724741641849213829915858749180254035903022305131955710525412441216439452929)
(61, 1369, {37: 2}, -2, 114641070912053814639130171211014320728951327379857948953121845363295423062293861061895654919100225568044141029461024866954775572243838741695750078804289816555966400425649630372281411591100937567708909925675101350515196849421145230116591521548863150731463188027592137949650992902681947891231930128910171515005985282295366361534342314060346284058246315106194756778557790981024753268403932839304894378290357254109122561789831567095156492521470719552738385467249695655041635816206183254840068057709074232201772616726913208466313026588491144132015605978065988777173075812070337307762954029890234129247969064812039667125729944174517936044611689392986315733079204121794104970732014795239824115067105505542760415778088026162758319419191293099557958415903918833785831574377350851780291410641464183987161086226823867513228911888038999715282736226361080489810392491738526073562414208471748959147332702143119943042517050138638907057595494256278319300469726544592193904261547554516837293780213115142897784631576537879379264535867192262751611595775816342911957297630877723506789024760466318402380147996229804793233130576631213310188804497516297749236669129884150623610137733365800827286570418964816479517566055969357015499523970225728675904166378384651749390630928202602327844681343240910343554984237158983243971895719282482130605015457346961355807802027292951840929689922806523808874858881280185800603613865855889743651683103117026942384517409592212792979492621317681718698699026268637387630889047109780822559202757511193367962374463626585771718526502261108674598342547134648235457157552212083089293090753517671055066790404723111407640277925227976245226069407671000533827070567038296427797174219862762148998853021364004312536754673329867537491825866455758900100822558645306880712369414198689358575857776132307090649943793242535005634389288525914191457545768586756014817943023945200222431056728452745454089746017233045761869357110909230245276894665324586702209076476537353037573463966724029625494920228738840546114634278607155182442153806608401811229560529201650566693416282899682338038629674530054418624177332581521706931177099775503390531105634396879852034502281266924774084699157820337814198071159497293755171645534611562778823830076567851458098751492578282723290030136325393678986489386680254613102568097760388294554014684191382814206067119332937072080908335413776850930737863510114628157)
(67, 2, {2: 1}, -41, 17)
(67, 19, {19: 1}, -1, 751410597400064602523400427092397)
(67, 367, {367: 1}, -1, 223825032209197185407092026397385187805854003540478387738142282840649305716895656783264971643652148144388300728760793249983887684597682613198181565701429835661656024348672811714387649312935757039626423679563792356382889563107970998582832274484761502088184593250307072253939557490888491803293030706752371062618246268387298244236307920974431565345535711629243513391579971658468529383803475100709231407623678511563619944403184114475348816340160614345358216368445595168149908419620289471877194334507489745303016774942363829066097009221745378473667988265499931090936701274968210480948863969203328611827928336509646215684841104080890379707008668323112715176164659848616552117)
(71, 3, {3: 1}, -1, 5113)
(71, 31, {31: 1}, -1, 34987327501952148741715973931001901034456358966279363081)
(71, 41, {41: 1}, -1, 113892272217800388917563305886676849934477281231425494342533202719055481441)
(71, 157, {157: 1}, -1, 6345454127809742332282075139035403643820845345994905278595570182571315403027225420702003104983015579906300919213786021263598682635998556766691974235565142852414098206644094572149455056656069935282717084179754446052570376821133875083776099150723765096304023618603591371173196561311931951377)
(73, 2, {2: 1}, -41, 37)
(73, 3, {3: 1}, -41, 1801)
(73, 5, {5: 1}, -1, 28792661)
(73, 7, {7: 1}, -1, 153436090543)
(73, 14, {2: 1, 7: 1}, -3, 149289169177)
(79, 2, {2: 1}, -41, 5)
(79, 4, {2: 2}, -42, 3121)
(79, 5, {5: 1}, -1, 39449441)
(79, 109, {109: 1}, -1, 8897302326689454765873261751919231594026440282052468492602662872131855867252692704996493352877225628000183400652380110002703992461155156863187368428343858110383937558499890161206451670068135155031146210081)
(79, 149, {149: 1}, -1, 71505920148918592801098673027660711818754071112642309519738494626016377334296442167111174817924656434291394874913937765300634722042376967855340265037782202642879423244085235963799140577058487780558567968433497622857274815873938637958470221909990931144192585949194099059435084512481)
(79, 659, {659: 1}, -1, 4407157362010280285226522596907673596172444640266255639599080927634170468473606847212498048422267619436301359408638346173174197802602566571519451983682869857384828221859239014065712883876190042562495418132267308343114987575677245092429087837966963352259518925217491232236558529322906859088238201172778912483378598630603103224381084046915373228455888098705025359682857866951369912534775309533527675078185255639331886249783153378473561580895057222127034407296372205300449047805705795999862002323145176692125216602724019646462657952003493622311334043861475115968302394365241584780582477428278929322596211007167228199554005776322999702991969842048908452753394191421817414520967132762496401362060208199295720122811667322110871959394323444098930987044480875302034275429668512226622916683958900694894636060395096188893710228884856155099257866845395499083994249499095599438119979816288686386574089410749055290556722019866925031382567997790107968825055032077560949151648021178049308537567371363472085026962268738462928734539648466886304755716178206959147488138321128035053570607601525417781296260459573475530990824280172455653616530119980976444774218470278351978061959931993876413027218329037932112042144077206826609174716058081433052809902566898029746668081)
(83, 5, {5: 1}, -1, 48037081)
(89, 3, {3: 1}, -1, 8011)
(89, 7, {7: 1}, -1, 502628805631)
(89, 43, {43: 1}, -1, 7573342771994130615522569017449106969771683171811814657814243611224093474194720211)
(89, 47, {47: 1}, -1, 475168497376063793664595366231925074732194660541461281907913805888132377764452416406845831)
(89, 71, {71: 1}, -1, 28987302297978853232099574652437415613020972905970153030166957882349456201761876270617872053290431240588599728184946817952685377877484351)
(89, 109, {109: 1}, -1, 3459617236203356197946835649484254544260562266884211182321696031246690133421022052391637573571832060892011131919412374281786951243102773652349551965312567981594535276686305935706071036257061400709275390053863741)
(89, 571, {571: 1}, -1, 14361874325794263253824719110159346834899195985255760957063465632729186366627422845473603457202412710348393386490215226921450903824809908947947735052162262457097164567039690460433946155857634144937525453495179623639755668439354413748842755600258742135285459876979489636726356689124331485491433915372819872135759889095734504946248584638327451622048793637245333903219638295324663819227271396060469781020704620291030753273299085347529715034160445302628567719166071736720238668795354827184245904204678383128910271955374915827430446707785586150282917422451305507690709009228871029000775835794961813443236089695500889077887929363545733076117413986684894663672794966945160112977272568187445761332267388876243058054265889612447152027654913840175824708126473616093067041336948143991478127927799593666366928946765858481422925660033755690930256536641368503252163059682553065695382989620896058124069481037007829378064151024116439832747586735587069721742713452515687744658342374015033906165922701280405644749521163455666751120520126124797661662482795177642307944624937661310327356925209510484031212007494795729273097029586851)
(97, 3, {3: 1}, -41, 3169)
(97, 17, {17: 1}, -1, 62065212901958868055012327674641)
(97, 37, {37: 1}, -1, 337507116686293990049793563249167463387817822419468016366663340756115941)
(101, 3, {3: 1}, -1, 10303)
(101, 337, {337: 1}, -1, 28595847000743753034983183847268613389106281331672766940321650891279429946334333321733538558750801571740203104012821709819326015583640564537596912168083499757995999029585376673979806179261533799019027890722388546839505223485039171143873255088192641729645928703382285863156379981173088943491761998074858527479036326234741949918242844949722489978213530573453435792537847839660122781342105470426864439761338623526645921160971147165917914209093252129199983663736895762846897873837712078543746536960103385420494530823769419432556350155036379896946601731398092286400120663920807797609005439986996311975399111008118978753713873683794327540800192806518959427816411308935153446861937)
(101, 677, {677: 1}, -1, 84250027412281653446284184944225829751222669583400346662804791805080245150783777319701927398706851942206090165038600438810835881273887313522147171222669309044110336419606692306533625152546299642250460795926274356843696148445851284137207782896704330651160158003369407748836825289588876815030088928598991536559257539818040550984338240637552534931271335403733197031953356711580451438409230942207223248688527453320589722100484027072002971431233271277022954528232052029690393865972440383737238103058463428126327272855674786690129854579391111455099075140545612774349922938634680197663170210964444842955190949836211662642950340340528169298604324188067944270483059800675190832037341919642607873908499792691286902774339412299305637496043985512708521346909498670402813361219132091873447267468424029346260697475453073949893987333926648044809014570063298158365068796815264153600101449996127010150015620659024214703321932761030163247641714035274871517468190072867006036174689310439671616485557147174996674287489534069877981042082794804631770316440958857879546927756151593186288386549332012314278409274620810920094134339559433981930810474739662748834804037677982337154015218109776935674555006487108443266473504413302406491775858034849602349699083865640186387889242979871641156240565144729174095928501187359917346564059377492832058045407030080346582834819433739106383277)
(103, 2, {2: 1}, -41, 13)
(103, 3, {3: 1}, -41, 3571)
(103, 19, {19: 1}, -1, 1719123581448138027562643544243028633)
(103, 313, {313: 1}, -1, 10220006239818029046501371664430620393431989963950340187216469478170966874281019702746889421772714626030333699317648628511332947799643907766350606125572799065412800408733395979102043566531591908964477354556779590674912943462261506450076132580503942140105383019558393090023744437867319559253852356369858794333778449982627678003268282243440579530259022628137325275311066726709039812457099759089602220647522208817020346623222181747813145756417000436335466337083102885570347891381398521812879371628463687942613724053699572313103473699234855163933593924520703102739636314487883433523490445479982127756611792416087266042754242564249761)
(107, 17, {17: 1}, -1, 298001434996696772340986314384801)
(109, 17, {17: 1}, -1, 400706797255068758036954693985521)
(113, 23, {23: 1}, -1, 1484520425576434196455942238665054573307722183)
(113, 37, {37: 1}, -1, 82164532059904939917487035097771458271804140310352688400187236361098038661)
(127, 2, {2: 1}, -41, 1)
(127, 3, {3: 1}, -41, 5419)
(127, 5, {5: 1}, -1, 262209281)
(127, 23, {23: 1}, -1, 19369349555573971915591022666834837417546889857)
(127, 31, {31: 1}, -1, 1310825268269643509279336731098526398390609803239319801398048897)
(127, 167, {167: 1}, -1, 17173185241060704934792150547842115064268123860306711438584345612929363427984704328747722509503476853683309508838583511960352968778796708926368577972757462474182728653381271917038440772877815088169725343118034728275116465773360152329873059116338712329964336724595798755342822200249703735244550593649299873775624823731641800725414486562670534702274177)
(131, 3, {3: 1}, -1, 17293)
(131, 31, {31: 1}, -1, 3322513949711572917671544532994959521608519126596370982543640981)
(131, 263, {263: 1}, -1, 535066061511640723522159358264668561660852386845829959751828325689788621120750009859516844975900051243556342105044663627500165778401506741132213715850841241458445536570975148212304148113139545152562077325342840294839920186865423141745204394121640803514176563176936911264504714159326297743661971983838752883191653407143227419441751145760460398672665080070064024049154658618846919023749957398461496865969535068786633103654561554246374404324139001590681014522981863682060852300908343090614981076001554686216060549347170183103563046733267949887986823459450053)
(137, 11, {11: 1}, -1, 2346320474383711003267)
(137, 19, {19: 1}, -1, 291173513911804236660449587340421782827)
(139, 163, {163: 1}, -1, 148433987709099265921762006627442954144316595836262688015117329918873010609468560649781757433775877630814593260034850893368573002234504504535616550065203549737173940998241935851761344791323418614663933575870131487187476219012844408512000030481412653243441574283620593533980637542505924257349636762940255389060078473778050827852390578769725093384261)
(139, 173, {173: 1}, -1, 399651417385105878388064125991028225879126384882579281020633222639031067109819342930088226419646129941350681007007360183249721462362498079488625361989916986040844357927928724511113154748766281920516253486585872271866036229315965097369761233094582859577525634039317673775708655727920756513556589589636117025212976542087410125757539604475571425234987273493505714986749561)
(149, 7, {7: 1}, -1, 11016462577051)
(149, 13, {13: 1}, -1, 120547934639675608922684101)
(149, 17, {17: 1}, -1, 59416196556663663338167408436938801)
(149, 317, {317: 1}, -1, 536766460367600662872631166963461026531054610807577144356652653332975140009083607983961238608225961226782853576235827097617573319075730105966393314652711342437264085298349015730050570744965506361160244033289924936793018660786467599205160381368695389454195457052834846449443458635153524650423178203017109006807598978089038742201588571743844263616355449996732674471303077477936345685554789425408980023869935636147808701859766717149770632288236240469320345349315265457177806141739540328378972494456237037892039043503109206598624977912824507833462880513351189706887884658244682733409887353001435439347427692862884523592386835840033039016467304655774387933269951953974146856271286111144041301)
(151, 2, {2: 1}, -41, 19)
(151, 5, {5: 1}, -41, 104670301)
(151, 13, {13: 1}, -1, 141451988078598368963321713)
(151, 25, {5: 2}, -42, 7595719904010033008065603640626272322201501)
(151, 29, {29: 1}, -1, 10333327940128053377465393536117755205850522803739374960650929)
(151, 127, {127: 1}, -1, 35808080994033043170075855674684961287228971926833393840955929816273060635279910906883323950636439776914395905195144078462413158797443108889204819347546722973108014405714466231300372780546114994992843947689674026917341224044091413569725456154821969620702648633274574517762777)
(157, 2, {2: 1}, -41, 79)
(157, 3, {3: 1}, -41, 8269)
(157, 17, {17: 1}, -1, 137141688616858069571325203831551601)
(157, 107, {107: 1}, -1, 58632472621049055847101165375497921866433360809284329392794362446084687835208803770965684209093379234310828005671420491638664246718182180666856919923193525297754679739401424194232640910576952350259270544981459239359141850174837969407)
(163, 2, {2: 1}, -41, 41)
(163, 7, {7: 1}, -1, 18871143464293)
(163, 43, {43: 1}, -1, 821394848582911951284928723134534070186021196058714034034875505865410262144035658384542674333)
(163, 241, {241: 1}, -1, 846637784816536635589785157829258433792395969817068038762656200338461326855879728215761588298833083045641162320625984369169837175240652046584871771851604207005581699748700720437558299347505189618930370691749399443577643186914524232341528398432532822228914974007917883422666562972908450519834561668066453010782580802074762288634439528090594224159283782225407405284092094247820778751377644846818114461520544860372683742925897958018714955018644888713751166089738699465586458159537120370007065454309355245081297791003788783986609082401)
(167, 3, {3: 1}, -1, 28057)
(167, 19, {19: 1}, -1, 10268449314768133715916636356439123166297)
(167, 373, {373: 1}, -1, 71307572147279967850799209926631543143243769336675532060175763806958527398227410962474796967312642097245333356942015612237843972356458964222073553432767551675766979825065255169683256287688442660070840962383693338417332683625345855328732718087178380146203966036287924480541420961753729048803218085226513651334567941099519649085154162267608854347621584879618789090708212664435688520463983245162697650013965102388940634815168798005527080002037382313217118747175742709089335586944910512640453667486420735457011241995161697293954357408045130974798038610502132455149583216292348909664974424517476342355536487441497984449488339095251387199631990432200149296250278335411551615023693760633443560927781620303578900710147382859896332042056311492318704733490011814045862591055521219654687696758518803202537912038775084845737954477519073521)
(173, 3, {3: 1}, -1, 30103)
(179, 19, {19: 1}, -1, 35792133474583554973841412894654212574781)
(181, 17, {17: 1}, -1, 1334330052880007782765169510725896497)
(181, 19, {19: 1}, -1, 43713986862401934971169718340891095138399)
(181, 157, {157: 1}, -1, 15858559988918209013150274488925481749238612452677829721741233086475405887997423360281681579798045194345533582689551567342780895322402340444694154288694001481243440612325729758921402761410117454362806176973241089464974801560201479646459909338556328519965096932344081840588053644459073103232304977298919843629698232677444129389430079859691416187627088437)
(191, 2, {2: 1}, -41, 3)
(191, 17, {17: 1}, -1, 3153651086937051299292748168322873857)
(193, 2, {2: 1}, -41, 97)
(193, 5, {5: 1}, -1, 1394714501)
(193, 317, {317: 1}, -1, 173127368048760681508385683180877286071022487690165877573008295448833781646030067477633537158897800186475413576201568841532447452132624928062692794000961401783679415291136507894583060340059981340120121441045797824432674312076308963328875813151908046615733017108606893431470327613508637661273211484295526612462223318425280664669330593069307629463559073340975455987874207308683707943924478364810400020033499917479713734329752659641859293083679569583237955742319629415392308993949871962322099072883388290111474473553472031207339351686083752320239735264701394602839819447242362255865130900480930419990193906501984397848997259717045248181804912353479760588068832392974289417622685230337548707273378262605218081407009996438445501)
(197, 31, {31: 1}, -1, 685799145501475964823899693223844630131862127626222024465618920034387)
(197, 47, {47: 1}, -1, 3529039815768376035816002104964212421023242532795651678514138191678180376657513026132586013645384177526147)
(197, 283, {283: 1}, -1, 110074300015371199666722483060518460143537582902375666219778717714107554832617078088031327964501502143377010483828273986832198606312661210065403068577301600551644949962049738912418436202042329550829129660643105055573528083934979926205085232555367226840860692739659468474274187657957775645481797222698720154709982433217630079467377538206388975875298441973574923816636261585929862270989402340250292751002760222437985754662917808861805441201693086992914773430780332287006807188410982040325514471694655584655590097167268554293136295914084237462253556575117141709553142879777026223104799095704943963346070644443606672596772115859449842310832342711648807)
(199, 3, {3: 1}, -41, 13267)
(199, 577, {577: 1}, -1, 13853512411712860641362519536340533164330683621656725809403511320680313825563973854131077737651484311329965133839084815251157494856192568650085675353184799244965265075738001673582601539859271381791206440885022590940379747463281484805497444750570498555041414660377475656411183058973100488014873719581276191419904482500880426314086828124386678665975329538671480138987722572783400573564974984128644162686955462766770211756925846103225592816567814692118947073486382312271686232731823351894073359868101988147093899180749948587427661996529602023747768324370852976786835236218229280324219007266473539679055739645344964406463013803930239468318609503324524954515619019865962475026407886362498957866066954187719845494108819693624181100049345731086808474396727832346548175427991652850244833429336264288242858141567625546184035939398228698411654357186419806827499301825109490361907368112161734271540991210345924016954055788946675508875671254863713393882146935641300155575302085432468808872852049907795054984171419857928885121352725963081427648762253668149156217467329140987059914617780314907499721684745973625065713832453631052636711581159614537428639770212114366741424914173940271637561903662358490334438815441960253840984756569834516081810262306038640924794403569321783808190428320450428617207101930607922213928603575115095231093702401)
(211, 2, {2: 1}, -41, 53)
(211, 41, {41: 1}, -1, 940505571158596006257530063034978910788595220007870645492148835077555475806265484532464928241)
(223, 2, {2: 1}, -41, 7)
(223, 3, {3: 1}, -41, 16651)
(223, 239, {239: 1}, -1, 7916063951075686275595982076218833965672702318436878926065909180604350810331568458517208216956302072592986003868049676562454865566230773411237780584190867147283571082132975018401198617970180243794461311850614362500541833793124764078363934034535283781975637325583501091744153198506047918017513324358209006567439523347109692372971390827816893730824470818111849013402170059147748931628156496038205704669662049248266813651167449033073423310309038878148109589142560446156083268492901299235795891024991800752181355903043531632522704442080190606255614029174786694113)
(223, 241, {241: 1}, -1, 393657944223042802799112592668286394278937813593547552114331597642273761446978567873602247421019945767976600986354242365774318009743090130967443590671227632367264706343390714690073206073039093343654766577019201632789444852698301392852960075603405127193866468563941925791344994408507256915092920107009375687592200056528417892015494294476506308340170109313884139587476514871358406620936594391483931487517624047067060376058906072965708267798358194371427341758470388426895864858883488709696893864781817259605226647702451784553721569200205798658485430056832967511545601)
(223, 449, {449: 1}, -1, 110288577230129222807827261710381147473301579528843181030300030030624931415630658518019337592495676613445994788412686266365731509955738142472578418018651160013389088372540299781059796569195021393533332515125097343019437450502545019431490080624517606513966705229549009756026802748663594744206384605294995780076925887368698646417838777186331552261462878727649429463298823682326766781683801229060831336046078007862134564981773836288306539664362564344723407033498073807062971108635208209793162249488992158099369907813940143497883666435755238045873879881616631355410517978276175351539890777929226590915410429294622900615402976043904476723919446402796154584942961528311157704128919243225677706741827488460448051831961896719193362454334510844977875586619294131060572879397432840449172568022092975574865436849549196052659805546619814376563760367597300107841994745760133583913073306489157932685058113130653877935999591595709184367424361893054965192968477450651601384303609757661446431842708346800826337428290457469141316669132991053469112417923918757296559569921)
(227, 5, {5: 1}, -1, 2666986681)
(229, 11, {11: 1}, -1, 398341412240537151131351)
(229, 29, {29: 1}, -1, 1194797047834069912723228638608549711969096625898073593709232532181)
(233, 113, {113: 1}, -1, 13987209862978737945678995338120946641251540947788280577417998571141274956846874228750592737723347489204651766868282783871462867458376225963513812019666116318523496773034540172204911672821777121311023233753056201028915233791006242645175569094643687720066081279067441)
(239, 5, {5: 1}, -1, 3276517921)
(239, 109, {109: 1}, -1, 73925495864171640450312238838113930696178405995720680710911832764806092649842210421605125368837373017824755311777072697515778218034276498664394974597524066278647286138432436742104522334312018568124726945196886775171401851434245683195959249645406118740492641)
(241, 3, {3: 1}, -41, 19441)
(241, 17, {17: 1}, -1, 130040455502022144850071352126349600657)
(241, 31, {31: 1}, -1, 289945970870243121331863344873437998077451275730175418235559774484943631)
(251, 7, {7: 1}, -1, 251059142817757)
(251, 13, {13: 1}, -1, 62779574892815645663533519513)
(251, 17, {17: 1}, -1, 249180043038801367302733789834105034017)
(251, 89, {89: 1}, -1, 14894337931244879523098229507308202833618931922116732112672472996010214485479720955781485495583425947356142260915693559668986958032663538236785318728104672368475091624328344012253131126486527404031794571567479089)
(251, 227, {227: 1}, -1, 212811340584526014344641482116137497137705746892105376019204653000359864500201837028870776231014219051529662703165846089163702607718355327854189231537415627018662462549456893077486763055442138922083524520611473843103231539281071129145849985406694130185613659889498413016028151556498459724882022239862793055433064098873005239335472874396777796495546590811338116127235344396204184316223073645640282717976037661929859678460447651165147887189364769014550711597932375232829096058626825721529365472701052967067401524609051183311117752290185870475477)
(251, 461, {461: 1}, -1, 710633364774197509051821195212357831519053769677142354106216952241130747320537597801355885900926563199739025759610155180747838140445426215070762862108966809234074589221196429482521960249622444365814146848261554695196419349571417681199525789058191654031456113788057226397143632177918419197732252997826478847966342352627382732453258529552590930935974983998965286381840215604683778886054853336615074121438115374713594096995121789673887263674657749049353045187755197244757093556482400874489919082330739617081229205892004372171982145462490571947449679212802176837910336607354980022372649173419302831432255151149690715477356083009255036642629398188739189024080223441243992596873595415682813636932154273619448001513695058068137527829571547147893802105516108771554929354925969531931293928689524393056837622040491854948575870834904629080860367643126673824020470814324769064109132916140880521374342368765263682309702066592197653312201930714544158694913955939249314330028541287704888366497615487859297576590354606967393143469747745934494651064045787704107158591380300197109510966409083752667884302626911456204007961)
(257, 23, {23: 1}, -1, 104766363920641215957168544536885389560421667434134807)
(257, 59, {59: 1}, -1, 59953468189026206880266128840644559351548007647411307933583721844415629343674260526657180804623871074332688161042502839878560830737497698107)
(257, 487, {487: 1}, -1, 16950835022189584123706826541925321943309993904810572534947439669629901557927256766786689127045165261813768511118826603600081896171065402631549740660780871104756829148272876286943706880574544233963915102777374142008265649052761159141737798749065225780087789238409760992062723260957830504352693912419071567067206461502712158572017158945885484967715819643497974332825967866754335769946601735029056261176186243100028869026486467340496784776379308864007762963937233627295241729765356811039096396075823748778596513259836299558573305595179877131394929161273426079965079063401251387674559937255455569867210360278128944760844399331758863838252004705698399117301707221956732122036076422198348636355982466680838573993518398641533497768703384944351885580140051183163473852931541875287965433347080689161468599409566676755148648544222135363444211902586642135407405593183669108039881628654243985057878910386461800690328334911901796991623905315797583145852815438992935524537629911451680152779833448158376323712598709884545221195880576374727574105628041086775289966896697340627142269833623875241558768133375053192917723226430995367493465411600790547459018622515904833878692166033809164007)
(257, 967, {967: 1}, -1, 993322552954189266675521465862046598473723647170181922763504635406452732045736672873167314596813724066348923955733977674417761396187736383236380262227481318536616875752676753535772404550014280936814144733752949084229921821675463386843966392641086081338944029250034987359481993867992953395206843780237930574854141953028685192792459679445675123452457636492117480271515370232833709856205372001463038877267166233849680153337664405149376714356047510595046414944255890617723535892368356705117651612215609050290751963407475727642023096749437819611383579789975634352722462574124505153120341900416990603364440742398871629512431678693925387842575174225255178365629140178455557143892077625903608457706436339623473045792752088795151363032312278418693549890534479708983775310928758380709429664116034034069099853411426924289893214054915619159184451908062375338052336159305526172990210927521568816706131448869624976002770012571391586184202219516347133691492672429828373330607560744238393161944045156631991325326684202446816244607512213772683025903757791940455597592873731605242921417335687429017985991009551595067919532223748207096930346962835502355366584460895189847650800942974154987546259453703363489362822376929365662816759832353028090216529557634061049847767127589473759140809791980711403955815335269658594378996175298402228065692842358720764713088048120292897929669406537509564570506423100086238666051999417692460110170340902334489204909879632433203771447519294342419923273648669868760316051868368433084087674475506448355833356681162133484919921808799352820240665800224193881690805362371775100236754972538423943845014338414877535815128276057589476515888792686496425813788834102282683561665474646330314600359230951850929451180214342538123071719272992360076562931264313120697522074410114659476748809304741668685911190529102612851922897501317102558620325317046069427263417133904944684063841258510585245398587439248459730342360646922235950909515343233551381057887551407094835195510597404818539858208981356120411254093811121223135504006298819319552551619808743851395790362135290758472462088973560024358257567045099190047505720903985591114519337773115046027011842525340071537897445583461746008963277947445891565088326998402497267047236670867182731130237425610773492609948801516720917347180098531994485022023197557855456581930661598300188408007)
(263, 5, {5: 1}, -1, 4802611441)
(263, 19, {19: 1}, -1, 36379600869079813407167833690281003289076473)
(271, 2, {2: 1}, -41, 17)
(271, 3, {3: 1}, -41, 24571)
(271, 4, {2: 2}, -42, 36721)
(271, 41, {41: 1}, -1, 20911113616804317302731216953113883813897064743789807789880721801735429998741433402731675601525441)
(271, 79, {79: 1}, -1, 5932123922836807518593373886754939460304412784118841108911575688393339249623865372820408954279570795758492844783218104995908427661757859176246401041483349052279836537400040485568649298524049)
(271, 97, {97: 1}, -1, 368686682600354343684842288007073828949661273423402261504614007253687501530853090461256429812139937362001688759945136715798800273286370884735122074725118669197319509867540021848451586700604535209229184048239711699494848414165754793217)
(271, 313, {313: 1}, -1, 1224684664184901970293742701916044527242299006805253901477143019034409369237044772509851096703695842156098491976567544503291582582221057297846751338391603272691598532014379455986639025702708862475137493308620122180285318000211792095374320711637905678552689329142736340369174919423378544274357044100453012781490701180996935190979838590749319664493652004293236034133021622323994807121130347659998234469887318793045674931749963446632660917683769179485664654000317242372254597893255284026268586187453225729068922162022884699495137186557057429601575934063616458949622286445327635535558448382876416905213305157802021508111348819316349268561246440778415262359356089318822712197524590147527714093196119002085997898946177612895214090789156576657510769650628987868318273)
(271, 709, {709: 1}, -1, 3498351679895275108825310727061638424154178891005624508138526216301281089496364718383558827313347069149497407562258021009454840170683177449609117259984086974785724303180967043651923428303402305595507930694420723076617026669006868716418980912200402517986071641415250666431569147795041854035106807226728413819951310667405416393902270628912312646284874651976240475925984116398534610533680267743234632391349101981535632935470363987407750031916137750810071469601158599261803543612180704202332529173078077346480962248414193022110158414158453779073389257479111643233880620423610373859635444246560012620755419690867153240822512023073668439092213503075025211335889297987575650368816652362545167921617606963686343328574762107885251078174028800385377508771807880521618148719148622402233251420881825912737436149758106485289086000062319678332408301036978129878967507099326097416614418425895266536873788607231263590107612198750811369210014905224542491141585183793510137748248458430954000197972043218155061590841304447809121558108979292323531373777380290815899883747918710447396548774169347532382898610359571925673051218697542113302525120275627768321006696515056944725291901628162617094563124697910673226723968573124229850564635140893126718671532195167427583396681356927162270227651658679484661954028968622321832236230202199830547797031485976665943040562136011209752970755643022883976958046425031336767740697628152543686761720524437207219627814493830990376018982392521355772770563444104374404915898785437897984099285869150858388044686248607450973645574154911185687108820123552434924296798467264153701086690547894910471941946923678051339797174446050764868688045539771060694094239412648323673251870859479703437331068572124777725120227138529)
(271, 829, {829: 1}, -1, 31635767178958626480927832282508180711752908145222869800323501321622254611231550393625239675463167886319152185922411916020572308470504644926899968042562545724329571433479913347977996712921410000269310610717239940126796010720404560398674332480626170498195342185395798564285300403102910274749799297673280217662808023907228305453283430674275981546254939810676300921255211815300025996113498828058155907238354185230825419931500511633368083398459949595322529073267521574927843054041175415099872126532425586352758169168794383313884977899634280651165355182462421638126997586873914984980730993867779452807166602712933959505409267406732230824739801333519001870814014757939563065905618236532350261717245569827582107149845761659142452626446894293354744011468778681083406091211464746779039239872799021949908935052606180246849205327390473777814695057941442961209910866514144646310717334130723879414320304355591183409402109883757957163779317407644975097739286812581066522447474315198108069968365030128573466048827892900958314501921044275048668890939101380713725760705955414777814862150913306106397252058507747796375258084040629911415654409388312921469118855882200689995229619034480747696287520516581225241655578422197003925537862153399288882598806443108848549802223907552302006639311633714561015540330128472247769370050848356336873917772313900739556631125583898318659882747087576888115218244408531373437480118485561914533179704033325842409904354336329561966191145524883103578542722111346158219171907015784187648564409303499166537546881997497452477284687133281067092682153494383060968022190852198101439607664545607692988941056651513302762842175747125894398011979338466710331852442186738949225273141461369584036974641656652131310264038638057386890006995348538953928718791980632855056373412651883618486846251052087284452033269155716206044500553764531198428031717552441189712309760592562105527778067885924591083766663063469005583133418217476372777464170713708046084406365047785948172775767437529117788153341579279367496348279077846049)
(277, 2, {2: 1}, -41, 139)
(277, 5, {5: 1}, -1, 5908670381)
(277, 19, {19: 1}, -1, 92513802175220980751340157602861154856405887)
(277, 109, {109: 1}, -1, 615723523476986096808888258221710274180206674796600174411317263819612694955428737465137703059710194133974437048350820739849691003637199100618929457172824322751767294795713732973692015768948292651877480070524805111019126960859208572668680718090581451013691779807461)
(283, 2, {2: 1}, -41, 71)
(283, 29, {29: 1}, -1, 448288421433531885925421614429617502426962861024966745881518216467961)
(283, 31, {31: 1}, -1, 35902971384190135211881091678053636151873028576628561710904912438702528813)
(283, 719, {719: 1}, -1, 242213326186000089936531143776843196737948654887214483357300914956714542326256387729463168525462014276927267811869837534541479886309888397922507440515408681358740811404953639602823831446908584796022150958699101664263763954804553417528216226365269811887529923538826122210105187959055943603267075156122505361774949925617205879096328768481407049230542607511983214217141135666725667099706664357855083193346549776177303180240766900701719247740298481700342362692363969809255902216760479128912459302213878180727653003608074859276496379048716150815171271543080334028586442757431621198415549363254890118237829515315162595245439093487300554683773206893801682661919641230619549025554530427910204905738778955779512876584484725244250567161293119349428338176350428296578069196001854482083657287199457216100957035812881088450436859552062246113326905044381455036939583152671044893617899091479603343160892357370451879646576678208938662990306813656482190397702652087514333219341484182158152987578374438162854819144967637366680505246996472832429019704151334006024992114947681143362042724830059244248380732937944531454267921046476296064075701435654232074223602713099691353210083755465112019570757180269278766085230373776934321821765469133684474924701841218637285392283537748860102234899273806728098074727505716780579414746415337073685294160839984097162918867443677775537090728288594858479060082568782556393942589769279608729816988241338429671718052899422947210538589640158245933804701331222215474257563486765621396104110542536310219196023311685928507858503975630851739067503319534625126876996296597966986312420523345463116771883820831564266427432514720840542617269809188897912014821047420187432092096240783512434529360779206469311250479448039346668729759403027766690673571179616653)
(293, 3, {3: 1}, -1, 86143)
(293, 31, {31: 1}, -1, 101745071081458891525915290025690764720478412865963094014869216600926456243)
(293, 93, {3: 1, 31: 1}, -3, 10246427455530215817894809913385894711852036607760186033884031035053289959917569795579148957822110140042739612436077321421060471938631185255263980649)
(307, 53, {53: 1}, -1, 2150861638474746717256814575971127873852220918080306308066957202841960887902013065901173841231460262440029802115429045163170739001)
(313, 2, {2: 1}, -41, 157)
(313, 109, {109: 1}, -1, 331267018192765604044172287773161036345970022131071947434861208183333331668760696032887255697563575609960353192416608429964225814561281857485981888424973541051946018549196353123852472997259988410115796263287040963094529750448478896666400274489283353410680614671882201981)
(313, 173, {173: 1}, -1, 1717970893253813351710719041879576564970198581409540477944689832792810640860722316945099185970176970045244513563909667902703046813283762574867740292537772711076681258727616727458431651174819237073542884179152799207630068090970268693499988388920054768252682838212267537702019792941548990468485309347401406524232398815175698590898725475732598077385220534598872893259300874035394066880509797425789156272470118032846975621680864543421)
(317, 157, {157: 1}, -1, 1467631706327889925569670986002817295445417300815893641105363220989547021783066447161151870454332867952269985883274587210905694618203646258929963395182261089444028842505666679264405016498772100482251958348488657698052206562636055953773540203622027233986296794398573554259497932972702279218815445333160023523411340688299979738522623468621361074286294543555384181511709483426719958995945551461)
(331, 2, {2: 1}, -41, 83)
(337, 5, {5: 1}, -1, 12936304421)
(337, 19, {19: 1}, -1, 3152309415518410958021327721956497713279754627)
(347, 337, {337: 1}, -1, 35641576516960152640517603932439193032298698439682559528054116572863521363159072022811869233105345001042843300169180785821705869745085913292041636586982869997670681141678594654574170094768909388021383140040310893920274284624788642507254845305943769951155214581185562317137889887088549880851433074613053450120023783823278851485578390795071968184745591444995651213077790641004223619857671528656528460742528429541678919556178536177745430844980191919966546040720455441721822326781316100880246777214261066790827460327233430129460739371764970724291387335867149767524409180547960320579185070410748374136513720343585772085915759451336031523911368163911443821178157657342554829563731708859207447687020918420119795758428135379138692362332323154929833079462554684287276638271435101126806051356992184080587341182640461836735641834199461989946892941314119364315489441)
(347, 401, {401: 1}, -1, 135844885588050980078497066610994593579774433402294512447837330582206485989490650392108891802007400811294588144338817433947674792577682802804885557476451675257790050977905775341171050433575996670772381908931930884209286483542197180485639747525275521775424447100302050437223970595021330379758610486220264683011242030078258323158086711738497453084383438829522167013662118120552111468640133766513635723721655798445787972156768895166896956110393859965735069331818056381360351666243342895893051107821615479158110523680264801124932497807480187379149147548179470084882022167594153845231218435696677419693336387563107348584696981592905287746458450818103694490754943950203554087315346080106803521659722332475849734377411440717677655359234011811071636062167873656836370224159071520044766465617508664076285936584164314029614811378921461837052731297356033140641688106123670489165916132678963366472290511712779932258579725888648141598312989156532814270192800305238960893980821784826822807268306111703686861368623050807710954356001)
(349, 7, {7: 1}, -1, 1812169199976451)
(349, 17, {17: 1}, -1, 48579497069650837158750489392148277337201)
(349, 107, {107: 1}, -1, 347329315692798043392582020738360763600180455322673108358287301928250465399208024131174810643558970876614789667512296082353536168775287246421079168828184616978594552680635224112274196529112945134028318518742337485732308644102794896119547931624394310291105615094827333951)
(353, 7, {7: 1}, -1, 1940350890330343)
(359, 5, {5: 1}, -1, 16656709681)
(359, 59, {59: 1}, -1, 15728577242005332413001599187629477264110712711746184875384413316417712765931488297936955002409297081355930772412755607798987356598648720135357239161)
(359, 101, {101: 1}, -1, 3240830219069522573138531995288546352504444777342884024602258221917957529849578636169801788926692314095925059966908184349212091495126526472944933064570859415569390260767748381320918474377640392673262555886187586810085558897627909706199775811753746264782001)
(359, 383, {383: 1}, -1, 11150408515713691500186963985097766707801709001273536400515386162103347462684521613443117264557601072471810648269834397801422268460968508008966967486184406641447699995134258163858238682169162890916942686715350556983627067650200071272379427516931725290404574890091961100555016758502633146825880710071538766148834217532077304366856337328158810551232977358077905004444951950275462760559438656848873445016587011151787855229702629631928772236788323569045164175850665790464378802397934848228900258918770936312468863284512027367948219930793320280919550654658716697600654247186388973957139535927549360376466526565680456733838945617890161583015265910863269700696856316635056925715834820746151268805847435857227403149414833555839685065659911530734459255963189226930611784149730400622848194723991950687092061508999496399775434024091672066085417641121315621819123204920662307243641984712608994224122802165280768367565711278428673453046990225833450744278325496137401284020551045390675068841)
(367, 2, {2: 1}, -41, 23)
(367, 239, {239: 1}, -1, 24643833779609277521994823147067473418391115988497138728071758046219151038076805205654292806296561793897336897613874663921042822459562739445179257180011845549951468252898052331214072137537207598973515379830684523835708907354515584745326959787997981882104290721915641234256952600994043101006276962331363713777046412244712755564557166419071197406533280458687900776002025474467851288709001839245338062562497796335579288666970215456583590975235754362254431655784017967483921734073249173709360825197711935943155638164998444783948572699266063777049411248377483546032156168198321378047538284385081563299689918057702897)
(373, 5, {5: 1}, -1, 19408913261)
(373, 13, {13: 1}, -1, 7272301462644558868950176734981)
(373, 23, {23: 1}, -1, 379105593030122174590165363122556059961483842535392588203)
(373, 31, {31: 1}, -41, 4582148420784897779652991193878772545718775341270554162686155498931758968093)
(379, 17, {17: 1}, -1, 181708301810403180598098328526470160822561)
(379, 31, {31: 1}, -1, 229257582854715839051345577627240467680610601053822909709792899323055284764301)
(383, 2, {2: 1}, -41, 3)
(383, 3, {3: 1}, -1, 147073)
(383, 9, {3: 2}, -2, 3156404483062657)
(383, 17, {17: 1}, -1, 214939282377498767802608909887974530872321)
(383, 199, {199: 1}, -1, 29818971288639315764373387697117852703776603645201098375726026367606345922363656505537227663818340495361811721695257418290610244558661601913528055867876180201298137118640560613735562143482030227270374169970328371257636133551453978013210975761925920351631981662847946619234164391998112864318711824546102303020898916947042373416021004258762611047497728127863464758273650150370071466053713138665591767271369115468733732264199881126238373289553375616416238232357513189722330476504604064177343817638909682139466541953)
(383, 307, {307: 1}, -1, 28837675160943853774713058101034123323862997293041433600231016114094948049326406104028055850595585141387979509287695667146137905039592008743009048805431986699788267507189345095389249289502360595754007054391133883127064191525013478079090816676687927933193221611485224913664044595992009302667939891921513716282309780676042507558977722935717007756242996191725725696080316723717045880950275905191697659141324575216173976119287376425638897688993473328979356742733349114434269985111963730365546317658922157982890175534362236343818977795307456605790551666007673706449514241031694155944232916257067055470400540213956672126755236929504714470385658778767058700643342586993987880015026107033421175337502715167822574644117069150870783227376209421430811019756159993367348476677669992580066488835251198593)
(389, 11, {11: 1}, -1, 79545183674814239059370551)
(389, 19, {19: 1}, -1, 41707167828089150697591988104771231428365840591)
(397, 2, {2: 1}, -41, 199)
(397, 5, {5: 1}, -1, 24903325661)
(397, 13, {13: 1}, -1, 15366727926360888685355234503381)
(397, 26, {2: 1, 13: 1}, -3, 15289508188037467134172544882761)
(401, 127, {127: 1}, -1, 9937458578528426011317891069083393219205702503661026062376230602044417075714570018733816829437936473124119838074887337131119859172493504164980458950355194652730991294176207528164709884381296657498534173041128990217961008290671630882232423502212052272032393424936026017729326641782224680057032889912169194799066368706909343200527)
(401, 199, {199: 1}, -1, 265259019571048139604611034737726845395305067727464312613919170188210464012265348369553785974232256168457068398340320038836396465958694807125558525224451324472947091500731379704103621539411553823372777046418319070455964510993778626962650282763651784232466208075928838647995293862491848946812126963118461451970385460195220724411278597283190076080811774971766880949051515581356524657883840063152745075573940653285511243563258891146198239163876314352560425406636865024376487302973642614811059358195703236138885463720599)
(409, 3, {3: 1}, -41, 55897)
(409, 43, {43: 1}, -1, 49367607578320050040231966539453970057358367403858615957911018582685129095461217107571619637326650397246073491)
(419, 17, {17: 1}, -1, 904611508702027525547740201335715879542241)
(419, 347, {347: 1}, -1, 19368219018763696768257852870242925230756028603969684307224216279426942671017778438590709021770923571885871808903222136149330720756432141038344095882386778272026848573186397705845626384622306339407795888543148787149567331586103443048549264205038258431525109909220161572839724622433216551121857129517417718069204790412962686917290934885771983916722751079201109147454827531116057187900900092013586202968989340993203494622855047592462598264745744463795545862951204538080109821967881356091633383495293010724339321727920513885680043312180427644240161592532652326316036123774303564123936961053570790157488050156843392491888730358269453097717107220277271993839421022365893959497816213387272732391952894990273143978394226961690512127241451916004953939675052650989151294271774809444527833598717679066633452562436880184744508417474938387425368668148223892820307404087562759910836804118072261808667311663747377841178941)
(421, 2, {2: 1}, -41, 211)
(421, 3, {3: 1}, -41, 59221)
(421, 7, {7: 1}, -41, 797310237403261)
(421, 71, {71: 1}, -1, 5020876209819090494995527781497049050443646220228350532684340600523326875042444144556866316398560681095584216251576469126573478064657272481466169351835433609062835190472821702530505771)
(421, 97, {97: 1}, -1, 855291203977071634329992457962769758516739660713917006300204756409782776642042405171878491236805842980698296596838433008598778573760590811920148638784721845120228839541394377969971954762977920845736671646030151097729663854652358576166234302252676931617)
(421, 103, {103: 1}, -1, 4762188486228330039583654240235997732076040401442624668314020101639137431616633390944558035087028818011679230049897739989289552099726026677335142688626084536671010630533774955448771542346584917064463239856737773332029279069933889973964427038241590133949589882548122763)
(421, 109, {109: 1}, -1, 26515459381450191688963822795035028844565847911334199869286692047719193402165588407571791502468698886062464125494727939800148598099299292376740850177289410795796851826704481974260887483841575568458709146304453710295724079635093595039719636686988357582300730102433328060973466379877829)
(431, 17, {17: 1}, -1, 1421167074249264287526395538876617467130497)
(431, 19, {19: 1}, -1, 263997416879617583315190761697259337311628253649)
(433, 41, {41: 1}, -1, 2887486774227116141947184785657293925026150525851487808587114581468218138044170842166966099807911170509801)
(433, 599, {599: 1}, -1, 41760546059458744691288361788603636507449221577120060887803793288556589034197283511944881924964228939639451088728799042587904688523070017082750699589886881678569396267961411294981635902509838803246182083636537994356099598549707304348026313081520882212144240767024358606343008514755256980377338289075380316473504094776897798042942149448916509841996248545313502963777074150448917135238112753706084726953170948533149045148093270161488089118791496130838924368407227715246367324268133498786582809505068450872653625653508618714363111822597063962664212975532493444246196663616047699077424697163752397022060487476870167748959170934097293944748429459749328483852048807701551028814741695015996609082030894632188588982342701027789492172102945581011857927825678958889964762295817679619568893012910657362334870593358907936278512053413458577044766593934532628876998280350977757504596444162943070568992546490519057216000496694308233025590491057146256910808560141777847954201214962438199852123127540356136301322040284182307177680807319420999103443674490941152306437715996787791822466233896076080106341366163667807728056493218095828793443471376091600912403642456857192139198124990747619152379184354695736989525169992838163132315142600263761488899246013943425146519606997357861490614549208193763725708486503132248729516188876954886104908021482831333341305735084814142524929874108917512830271123165019948626766602438606805648249226750050118552021914577581068209423124815986038487434289808176514418743870167721467983221095295644189602943185587161472175912895630649088258780189956847851619875896903)
(439, 5, {5: 1}, -1, 37226181521)
(439, 41, {41: 1}, -1, 5006926537749675245687161385712551051291228258190424886843956804338603931388904666426907074910983269111201)
(439, 47, {47: 1}, -1, 35839202811301996169676615848073161930235347321974260397118736454027833084161688182339794904226044151053270376112653252281)
(439, 151, {151: 1}, -1, 2347839722459136978591663300098216462857872331837823365664782867165401708155138733200580101579740554318628571128863533989714924801469639258971031633051414560746986689244192742520940651983537391834678378737570777846134049595234950373812616855373355585935054518692123643657170627635360015101133045826165762074251503630448330087966779702323743752842388679303327316338764114102793587464047431189767001)
(443, 13, {13: 1}, -41, 4404360096179607343163757878077)
(443, 47, {47: 1}, -1, 54394233736784900675892496784350144085607082604544750155230961290276548516441855901819200765775438809534323286636435091693)
(449, 19, {19: 1}, -1, 551318372025868502168119849942409248000031898451)
(449, 167, {167: 1}, -1, 187871513274571220121174905791642329097222789380695146912726492851750266055974525064069248929331926584755055884901749414745781169676031140035850629064272983825101291603498704748895936731944085078401438167302868039065933787681586050632540546155476466884439307314654381555018508544284655725226579429341029059476189698223750751779886741810169662948706891960831570018397581317983169472824758694737482898161025493188875905647021060985846856610151)
(457, 2, {2: 1}, -41, 229)
(457, 5, {5: 1}, -1, 43713558101)
(457, 43, {43: 1}, -1, 5217131222540619647047030726308041092883423652933503626720784079964235211539871478253984208275656291113436878307)
(461, 7, {7: 1}, -1, 9619414659135667)
(461, 31, {31: 1}, -1, 81652757404693752491620560089083502125789173713961967610887719427742702318355931)
(461, 59, {59: 1}, -1, 31303778816797947944269592196480410289020347664362333340451223719825352870192764082057814877758550195567455478903777120416385722202151346173412626682587519)
(461, 307, {307: 1}, -1, 124001307056636933497608712616255317023532793570022510554111492956021842978717787892271294171123243516681771470132269132026116564928649512748378863880433231926535485168030470839167125626347633542363958741623192664760635435783121902580848661648587314736903117303309757128019045478731787168315968740918411649384857179017044817181271453025383972754118406555425664645820559765817948981750263634340869651990775782741898621344148411383962771757198347586546752316342306625603938719587761015606440435223973260156595084981379674511945193183648049040992407314676483969496512858325833537663698287449696341616173848505823430030756939064918344510282722833065778246190087255824130859558640020596412411331909159254579987847291808117513222042720754199666508860097790647424746553587127018773148166387952037091722547162056087266992967)
(461, 521, {521: 1}, -1, 133482489041102355377968160061796849319184679176878592687981107532366436825763487183045697520492702430689336471385633994456985717176643767364016958652194065416727304242902725492632304573605293796830516528403292348495522858375959379935865973701833224806768568941469775606732548130681489420209637673450990180325921007912845555109047487213384456081366139952334463709074401482473294147840983915564091012513560263638073520551986434435774592920055779091090711996003108407508619938302377654915118971090919904434599426878106888271469711928640158041894115365166395177830622126296285851771747321744908230417452436408131214246020810158134608327535332981062301066300390356962565834665586010448303851504507269576401254432137399614215329164577791343212937205091843202755348556352339890924183035290793293711086648795968178304690059853267166292323127519299336720375388331443045304962460761054762276224080883419177695003182904356838680319987751229783005799991587455210019381771283366660883976968261519882093466236406280342223404485026450466862088002887391857862275019618766252173861239353534827918505555795039931111521230115402618732995461983030316107952101928977669098275748655042088322841331496210187494257131165524582807011176433970083196377543382715014226765211661883181975858477282905714210990920634387718299811431541164792212370496016191831656452680824372674540255945732834916317256859690498240121)
(463, 2, {2: 1}, -41, 29)
(463, 313, {313: 1}, -1, 4594182181395707099221896452086555839396462578278191564628495433922113590668935450415437123065280731993627924083248160110890019293230560591568579465351681734583024885164109848036796013167472840819645678641086480244510655501701028103449520477587143506655295964473535725986425261481807031070791182194498076434235783804042718402724754044399098039095857859709031019814756016255899435485039824428200085641464091926905083720220480570054266704535018964068312963949249904822834227581908727183333161360343945021762483151165325496895733470986246741191543360560259128577408589539360221396262544728911846564381032072191980442201178342768697748048524221534020548643777926225115178259974416083543657777833489398929586386631568821354377468402925082431277958186819449202767904809700737603588578116320442188000386778635529687824004013510551788262721)
(463, 397, {397: 1}, -1, 372401531691861723666597457144572150536546089179091846776635890060404064087492295864239221858472336928217631875396044686369316635877516237272501672218198691622426723311869850827745707971720487910023966958824031063211382094520673860299867784480785939405896723099499835936213903753889183762971953773596895356837554229494767131362220419373468623293025615214501921632013734429312110095522685191664311733733062093458167411928247099943124837518086796787298392050514527603057164924983996718626200625343878519327272770424567279607732928765834925982248877898493708342422028055753214305509668847731932395734209030002887093317974123678047936892276196977585536864956631036345492681395274195808268187715962886244850023221376227911055396214855842106777206317204914239053840966519068112264700842340481096843038305342139732972365959842508444538883918673858225085164006666237972507114784973330327854971041860860284879130159019768263949957135812443379580268343388444951041271015525261704767868328659341271076268739734811970797193210208055394867289429639531005832970439478561)
(467, 11, {11: 1}, -1, 494424256962371823779424877)
(479, 5, {5: 1}, -1, 52753304641)
(487, 2, {2: 1}, -41, 61)
(491, 31, {31: 1}, -1, 541165591973028196566527266142642212582514478782611339041871768418394202154272381)
(491, 67, {67: 1}, -1, 4095094161009233168795067466004721442340615291091000758626311322102433293367695908970822680919112138453611924895535770649973445785350711041295782246504964631100161959746627473957)
(503, 5, {5: 1}, -1, 64141071121)
(503, 37, {37: 1}, -1, 18084717535596153984267387972259790771297650508845365997722678646537399984184711444706653745697681)
(509, 19, {19: 1}, -1, 5269557552609774012126516027860901007524165579511)
(509, 181, {181: 1}, -1, 16220150916004711352912967256140903893222498937306622955730497992616218429860157549126298966479872198086236205238750950459842266404467964216082783909937141961439840614906988705495868374192436753741729907144678351932248685965750188381766391970199743352886017289573312664168442374548246771952726704422853855347386429426676510782233681574229120678109072142323108468738910142719464021447270229698005246708727383069686717882031552524465072798713084022802003943293332919734352346665513975929101)
(521, 19, {19: 1}, -1, 8015182198752615992593391757007409726234981594539)
(521, 139, {139: 1}, -1, 840311283139602320032782658244884482149948711399183677686891919743952245758797259057632176971003400460121394190278107021462623382753028720175244905216686966565027916916856759491943749186080053781865140279078597191166019137437419111432336943735184593418853784449778063592211026480957289862730924323623681856787722725124186897700853509861498921427953288782548054972238859741059)
(523, 2, {2: 1}, -41, 131)
(523, 7, {7: 1}, -1, 20504128695797293)
(523, 19, {19: 1}, -1, 8587397878814934502471755814823916938500312152613)
(523, 37, {37: 1}, -1, 73602401559803582147204491002463211787778817752048698797657831436643484198403243469122159628390441)
(523, 227, {227: 1}, -1, 241108693574601663539530972576043151732325075046565115329566678606384237861334192535000628663968593293605246596567029969649012904850070727020680835322925753924625167330655488875575308965391937046886936179908490743906203848751565802428177521472976391259795474175884066934090418505327357864848145010731160228544288955611798622067291080182809313233041980103418293479944012206322843111965526438754047668222964226852431903472129208533310052907566849174053717402759198597009687559429314895014738427742513556590911671003071417054224969029637371781995485819106493632400520415593061409851496901459305372260857075933258119493)
(541, 2, {2: 1}, -41, 271)
(547, 2, {2: 1}, -41, 137)
(547, 19, {19: 1}, -1, 19256021298645399074821884828797791764310604858317)
(547, 503, {503: 1}, -1, 2954149726054570354731268783695473648553698127757909236502323118900056116555914205497297344091986810122221210007572710278615085286498097552311614988305816499856582022217176321007436489169516307312818891102260508535776094473486907167506399067842981571386569864178477918920307000517575686240298671441199853838250704923468548690248282641521150718351326283680728364343422192884700319543567423072790330494282647808283049443276592637114280416530205207345583106758989821476527382904419515095192222213327845480382595555837276392087163072010179024459215421601341969203567571025180954074492972542694285952425148954139654840630077036199887325263617758695520225209333292710656533887983971858034770683386369937293866971215909381985868830304505589586102049994206235143351250478656926425105827037338731476463950165165119089008535900994291769384345487462243016414473341797435153993744359057671082009099028535015909926996363181603728991673883036726826081033472277530866242767449597292259643737413639341004880907248841369787058127217712552845138998955610283122098930681314819772614303864189179546722608707598654097840670755749805322234449657667660150148000429392644742499726071633692539881513336444400788370165391462213035036996865330409109432078354756319150747506161900593282683249657836796439404678179091791244479850436549383531511724799116692423680240159907033890916948393209227402066954757)
(547, 751, {751: 1}, -1, 30994842490857052364725734004603604876459752519624406687181943778312897666265833488067391313482842611824098985503541381996633660438052285883655860854057681424245433616981270172854407926577427050005406468025354745249871266953134054023370986108311697784496751812990992163379239732489770594780853605478020717924202829079566177323050337735416207470390946476300896224851937341166272801254020603524590596921419067518374348015944244438997312848373538345515466874149064926927993782733608315959019359706862841542175485483997959000136311259662824427256825164172628258952993097444781572877560734019692344515092247593299065029781419844178016097253121675943212023384196242157552678507488397832876894309212654674237585801368335313325479663108647647437055396762769587969162379572897076596202996110042732613881920740106843087930329326324225325975037603585870042081609375723239923884426034338140398103312820968221440314996188362269088433294560161114205694703697228693906078369922607480929127045739392114457433095837473881152036912756467660039888278998202491160346102489965037961768795167155889633511013021645141983834002764910648496359385698521072488769058653517964666828621925638567720669582382684658920923946963479481338552617221684609603320242007519751811181449912567868216234214932152099570539987500201482370604578369904687456015067932400720767714315164579559997326160167896279721577966822121694910062574128130859209241109048637922960597365339822401794177541804581213412494052956119612369044610615284304726643433099861922373628846653246297702402965168763413699348644088761529830019494964481664185390346293044830573167518133067109478015318232947393865171831588210128953725060223978719934349981586721826005394541607493594116834052933639829207220652128162720499877260854537839575447732250962759955131336195227862819325821379328670108283232140923473184952189548258604814604731657526684610751153954342897269387628390364248063172702321311780862941724281352921272306231570674733387467687848887269726007915411989950977383197052600460033568832147548357658481535044401004358037)
(557, 5, {5: 1}, -1, 96427561501)
(557, 17, {17: 1}, -1, 85993084373916853242025532990721548808246001)
(563, 5, {5: 1}, -1, 100648118041)
(563, 37, {37: 1}, -1, 1044898952808434400438811855567555333964531485399954423115840231441070556014830650526182139197580761)
(563, 263, {263: 1}, -1, 4304983887501272927583749492293220968452093242300118216362811641461354421884373906664293371351477001698044373542209140038887745438997995990548167275780483974190988015878421015393259199787082405070818861557965770523939748538831855261538541423528559093685078161331055473436878068642363054980636164360976006955178131900544414396941312453131683105004289741534059657775383749287381357129674874899145822146590528717234730350821896432313301896924470637767391751836023378069302520774001478497949736847457586525234826686229308201963050234809990745581764608936959090384831071914990496851629646168117618385886855000471099490957734669341563928929693371547165713134458332069713074547723957892235430875254081601326901876647143801114933)
(569, 31, {31: 1}, -1, 45095366671629476312412265314375780523328265133386474235814763439557720107812588951)
(571, 17, {17: 1}, -1, 127920157219911700633452265518208659917429537)
(571, 167, {167: 1}, -1, 40027200937500474133650823365810853311447518375639893310700629119693072328639989718086681944257975840516637969518465090502966544672848405354685732138055106348169676791135229480601210309831970053601787999358924302188432730687258788305181702327966923001915467961238327025913720219710024772390654550499517095480700407188613199751505536936506778100602531466120462686585257684853950430012734837591340307685930557440198648795731440105852489524743867629162853785437)
(571, 181, {181: 1}, -1, 15676919808748242057084270261098004405519333048989378053881452530015187525420578573832260441364048685167042003708340521649047481840151980554269748462065299542483853351337183493445049643824512818510267758721155454925943452454176462748545189631320055668280974033235119467936518636834208434799130471761499570999004945234586496448456316224208091333917842783271119569809060908827059422962453099738953946411203330329382787722998731696801277855983322216357921522584943410958999249369345047132854110293481)
(577, 109, {109: 1}, -1, 16133966488758607239639380232607681094483066539662168713855324076936496485419888635424557233523384273045671896326319296354663964832334048339805562863462059083762678855529531821679876906510417341970967628025569441071007505190813368869460773949424366083492860092613238557104550503251832245708000762861)
(577, 139, {139: 1}, -1, 1104118140220081741336838875574464985798008727676241584536641054008908445645165429595399720341777289703343309596237587019906854377287041966701363533028930214756153867775817368347107804882035050804129565031687276365939155633159223663994334693154999328017073833788402826987684065543762420396835198190534428613169040828185142255357322973493019286427619978964321931990652374821862874187)
(577, 227, {227: 1}, -1, 1062887018669845919950430985128576626198344949747902307008643489584032173413441255934743742269461657788601952815758523806632925347291421932861262796431507287397296518894024830900920917295518244309864382203737858959851989389181733893475698454465253760131444879979762924386039213664146767178354010129046918048902687312719980703246362260258867004567550004332170829004650637058358804033769202056093018533602914859537044618721414569535072891210875257774795662880116617267879765775898533233867667136142842179806946743646859132088367213617985848540557578462887190938516146489034937904100821018276100994848022904747064258698357867427)
(587, 29, {29: 1}, -1, 333125071943098249250611311318238929919025328725533205369689130143817977943641)
(587, 47, {47: 1}, -1, 22808311866941385522390523090503262333088679096032607762406394343883578709101725775807420081917817322801806400443032864210285437)
(593, 83, {83: 1}, -1, 246160203636717562842717398005307148918369690901287605941718247421447827954075849397555329980760212848242185140320481092322158864456109195687469306756819418582954107246195142709576894376533699749702081662711159672594508092866243)
(593, 131, {131: 1}, -1, 3146611488689905196253613936646391755654304539333199574138886125565960517756025249343516738861273068056223622546892961157228911541119739143357236605432555732217122737363339614672402107838910484453818893797727641522521218055206944470984826341710494242266288971970350220984640138934523488439714602763295492842504741295069244392155073731528576329440218996904854643)
(593, 197, {197: 1}, -1, 3307142329402840407938226295843789810786151576188534589971950934111248404565307661611800627254559891682846778197446256500059683494841128262369990254107176267138241928016635296772002912518300332316350544896853386000746242058945575060229493980157608069196431756786820777464261609204258032474431558384543277612489851218229481261416722500198337181479226578544281821281274209424513378815229259348408040873562648666801182455719430802649529000193706676844236660355898281903110286714769611511236366943417876174380523755891039747981160066994846551625701)
(599, 7, {7: 1}, -1, 46268622795238201)
(599, 17, {17: 1}, -1, 275140673881758047368636277847824439095035201)
(599, 23, {23: 1}, -41, 552570753659483252155491140976912526375481922756097645371887)
(601, 5, {5: 1}, -41, 26136721201)
(607, 2, {2: 1}, -41, 19)
(607, 887, {887: 1}, -1, 805186267918635372542712059165973291969519432878681384596068682043596409279946714273955710120815041268817675645164810195312351750171495172314330003147982806480173498286295224788999881624597874891915324848698896944945940472832098831316492631572066023031419228179764361037606520359478511485069412966837109712438855993037986298641195429382183292535098285034761192144850948987449684591822321857630929983991948549507045510727872306098130270359419008526552068234422002390077469328791552570304137290978015231052056299381182416724296056274011994399140891270068763238915284520211405582256797688485780740103166311018093425094533060215998955878838204465727209493511835330385267087637377751578605450094640206916402319454776237670112138667724288417113672126334741318878611462259709865476451505166626451663816494087099621250397567050485152937336235256800384444906520674926658522530673703104952348263003106790732814203746638113816500971338235704351758485404696489842335081377244999231078993318489475456178675983782202442874909056232829842494798752005373135477968738100108770726141959850078575053640835138179842619190084146177706224202046844856642755664423654063344085146731539871304020373514800223436991077586337682171944663926958284921737565655797967901267885690420292472346723247970663262947046553389383819757293694227224840759538942293142979186752097644122512473957145917029157438469442509763126450138304112693525068975696818411416412235361808938992732238130960082601005225990595183723486745501497737537022504024239849042401849690457902507503537212804918409430713601085003399119639026643359518744699467092088983510779979075191826770973991375936577613216350885322283711469978745232650526040892105797550011097667540413960045752517924063799243770213493149837352295952874629575737090441667030219494249074802252103543995698341470035468108019951304336221985733912333212714046800385973928658813212915056939266131435277033859579022810182742480260935107958635142609201121784712206890474331783377334855570184895871700008006102539943134858518388880373676091664033322555174999984814073041762111632185722643141132012498508621564178181249277835739217169213365536545161540235462635278856781264440341101892091752232555432982232321500707343417541714560001339138839120745411356590796383180393792453040474917376156835706213875881266546036777476548952815995417727041437610955042411289101606519030408810237698214023452236797547512933061153789850827099759983955348726071396982050936783053024890021857)
(613, 2, {2: 1}, -41, 307)
(613, 131, {131: 1}, -1, 234731157182816558611609943477520440289201632187219010312482642008392332972713348112986910503435017189071550951960272486585428235101270261957303582959342611162873590650812711594063668906457230102703653224922836192281156594891610734398861147303607672534893409095183465705930779572168562856921486454372289809247513031669016529911368757188405175289534594628270983103)
(617, 5, {5: 1}, -1, 145159381141)
(617, 101, {101: 1}, -1, 1069598672377266153258425744804447052940537670692678380735019901850899141646971613262842960837103399760518763195125078839284881851502581178605896864489514094151945441010445521194176481751904542813407173048755598758939848162307300478624943430950274400690780430622435870021063568501)
(617, 103, {103: 1}, -1, 407184448988629074617796838363860144136880345318325040083633991415716943334443976481418423918116056151432127441988971138248522387166666126302300271445648630988609957992825495017889850661650788499093163300757720135942051857060603911907251089785029011324572511353224488922448668829077807)
(617, 313, {313: 1}, -1, 3712578371346927430873008042162646511096966997349514456138471935316063844069821549173856750595428028490987034141659842583207165092565509623963900609263469903169208303909843085706872760961034130856105802147972598035709404645420661766601437418016295334155178396693237804117357689593094989060168049730076008863934998262089160608491172281893988726350275340835378435190783691856319311772590227043580545213483342146576176321753394145179207337983405420708384925969992669030739614689613738196914472619047639496229632859442599160195740755929033343643915527909884279793595511265011179580354134149741598465408108016467117514526686270073684497420841838622698056206097918400281190808598326888670681207905903143660026925024082871547492417869030159401073745275701696409642487570684109558674172536848675043861469670951521639662202861617432955661374978465038539637577763203900758403847321)
(617, 317, {317: 1}, -1, 538042133799785450282701614684734987915187244679031935975059829415384127932135073726469958497312096659126661450469454791887516181984150500951173902659540907561425105710575932194091463387666920590986803213806509015291569013451554313166685242652095617254522103578591642568838071953981206004006034410620368592646728567621945137155568818496979773337867979125163760317038599280481133388138631927387303601122587313272900174619312700967081173353752067984995246097902309770139891794756918201627292718068073436115833959481570508806625790127834489228885030140445346714641498075641128022850775175323775208506722196262040295799453865020134241227377311236952461732156240746001648095403794679222368798563773959364900285904139051763959897967128997174050128110916924424245341679289640490133028461390004981873429337424640443335919111204619341279795213807666149806122625517120686025618073996607778861)
(619, 11, {11: 1}, -1, 8271964541879648991904246901)
(631, 2, {2: 1}, -41, 79)
(631, 4, {2: 2}, -42, 199081)
(641, 113, {113: 1}, -1, 233763855561087749695705360423191250673230094960559823531190933581554178934864240364519854927990807858991837326827422496129737809176789153778312437824594402066255269141121220421435735336586921557869576441794081584852191983078435375845967298783311319650413004957290539805002407172250730869151874786628084219472235633)
(641, 613, {613: 1}, -1, 62775780498415450445271981101754828742244531359417040507090539023177479431935183189280128270790704184784563356399631928166094932850258195452484017987487928242919725144350622075130019212745603334398214685763705985882798426667871811654348104305244604334849408979539877489872587259000058868897293712912144436562233336979017872937149014255814103384443829440486415228560393904170970590658923989324228798376823664622414567326796258175085890718744628849790817067182049993097733222525386898772680545987126001481299426817777283391950078910054295144811492831972010925280014239623002367030456658777617970454087408748636218578578510924725548410254292540421788335639087844408923373318130179396213330351396514593052860403814601163650190012296891709350650875802644828096483729127364535784843128222113156292630839341627233788937610563902747637203141978049270117423897924785769795114893437322097692613036914373864588969588127630941618633775092467391704861605613473407162517489824330264930472750173202686034074125888402367897283315715840507888022789120744194117048480410324715385514090947922382133270938464014726433043716969536736677182114366369071288778662830883442390155140933450395644568479754628459374382329528443286113014506261200967897958913010022418968827522080552209957961203760493496865659057499562374269892067283467895204202212332669046179465300143239233943192190251234782770618036294387992840643645329467723355867992163759154538063252480332038754783019708213438425244431579548610471370519952390520090372300289957904125689984213782292211444871172194005699905735752721545313977721145730255974489153512996771930137174405813455252443902591863847683686549191433153890066664186044537832333890436981492539120805441297982197137036133)
(643, 13, {13: 1}, -1, 5002736399322454070215301405332201)
(643, 541, {541: 1}, -1, 27202030544390933096320321202175885963368076851336728867052163579957540109091782357879898149919061610623709426351473535904877435518829956926416088942507694170920074227763343122274854448810678571770103887978868573039809991255277625731573986638356625243155783191742982815382331574871105160487528509407896824988255527869488349647603707062368295337459156158996505905350001198958184460777103231453166716483291177090688705415834443476241704010062753413793149976202359100966457834538964704151422810090548681804720920757771761107022315407885988734197476391183034642970518100069599737186468572663564185630997917967265945105437626339456498607556656839259680702900497003449293335112799598876145084345553056503958384180512347960658259594539465898453458772061057723831851615149741656106906188463368349824122301300924260493017067082081168264152676990236673916385640442459030970359237062823470395275712899950352812037648829565812516637515634363406435157631655537757568933185743187010951429618901559922345702744429386512001000405969144600397702611140582020814143256610422120811162720212905591587723484867187877088616100439361641024039823393087903317161690706155839041827312971188046732616736966178764421279463866033166464386682707838310622904668647919755152286877266845574439425834845817810278554744220860757199312279146470290610261202403287942607932952967886740656669447235329590037753921905921954291217969849074513115791965408327633997005665854490837946083411753861115519447926194393803794691638895591927282713994974675855330349001)
(647, 7, {7: 1}, -1, 73467869634582697)
(653, 17, {17: 1}, -1, 1094653036091966342439610718377710184115447281)
(653, 43, {43: 1}, -1, 16866275854187806336295812055590366623059859535135993369267502020081098505485919022038032011535850409169806197525142863)
(653, 59, {59: 1}, -1, 18434446380583539056895728400137536171106897013031200491735893322676785132799382024559535452280431582021001039606220089501026615694686654676350556093841126104776383)
(653, 211, {211: 1}, -1, 1356543276841849234524680458016615899091648478100458649775160848443274464275674093349417129656988132839064995967400479455682749641920403558298731128019151904398633389331821083609500855695391465508231486230009683122523443264963458733771822359855097690697288223640913670713027916351617539313683321016736378485645131932107827534963288980959505645119210694372366971558793320442373693227735061646769773674119825515366272089694730185306297998050051393518381383700362067633776377622677105197669325256035931472486672755027772365238401000601918911677516766189635360087057046097647046860409577125794023)
(659, 29, {29: 1}, -1, 8500630317201662950878008702551826378706190523141198124277515841189828862544361)
(659, 409, {409: 1}, -1, 12761704238914840061207822045236632528746307395619611262553031964532316707784934925054007524056464892432749738646463668302658362389820881387329641122255986686264339140891559585463372282471415319947930335166849902206860354501601206428734051447729379813362229982794552761481444291029167782980619920138147277040960380040874066535339429822435561536611232907324020996455191791044411019866934991446369832545084236998912708274091593233201638070918999531616010328704058818545643965705363236831658527755240125040144149744420367243038043615025800109934702892470242424796240100462936571727728259342738614888482868297430418714831799974551821086326182979391039519898394989991522708405439309186351813099222880769234528385393323464216634777647195184678363598558908589532431701051139467662291332216599967520343495148558557636232136765959607692910450757467941272975154486922442746249409368922016464347024184916790549085460217287322878746520154901330511250955412012854459613287201837965240648780862530711583396631498622316640550395284404118923439488372239286508555231739846279691948153564027817656946515610072970520169116751223461309756918116709884269652404963489090961)
(661, 2, {2: 1}, -41, 331)
(661, 3, {3: 1}, -41, 145861)
(661, 4, {2: 2}, -42, 218461)
(661, 223, {223: 1}, -1, 121725489524437929507592531620838798813364654278649518950434583483589032837515983881306298482485200094146340296272966661744723044681925159923552318847279713177422638714500873707288210973104235451682255490096522324988856257364609639763599262537451708808590795548634337233041556852212214643426378768184549870769014455614921084977772175277201179670178003109274898231438277948337120763450826726530085684631861262402543495609475769472521553900669962146067150915797050116858518568575852651820351494177980090468721281188247412444420452214231853417081964571491652059551200813292505400131226346932748736130513101822693992550073038424803)
(661, 947, {947: 1}, -1, 8151512471878151099562429229101272884561917492288611624554166225185547470012529279372504562245535569080938915898780526819177585341587047374754215833216095383274102252012594953621579972407727831743584003834132403758314361249339451684059918035456120628343078914482730462927667495646008909757130053746952761385545577144987109598884466998661896846580210967546037389718287366882167345567728196306134537691298888636822749418517597670342470972707388409456270403789647417053834463487820302689824016599686539034487654045072103234279016868812414390267870370338970921141685311500898199104155225829888729648551606143658767748722170407300923086444546978622059855882208579449991259918405825460810408846581737259045001980510922433712840560934842745323482980386992428091649723894938872000050852243581611154247845843923272855950940700383014397098570456379161269665297487494230921106866950993327464448374957257581386149483928656197450704416929052112850601795515341681472298245771336765189781039131210749486030946729549649245965663083523634654293840362417553699651487957957362490415294165190009338613137470130219781342960936190012850143495645864328365903243212588255292877150976534141172752026704870807785162893334749247168828802530035975041599075835346700249784339659279289207702555387455565546253801449222467080396977046252741068361798858053775559598189466679959267894457666340097699493814473018494274803789018493299621541212492916416983203537876365066620749201896244560785693599676535334966992246295369384439170837337703528596276708246303636169850690246539445785831875731152695644801513971110409475877468535899500086268313209445404295469543727079606130406590464695793508795010684998588486170293039015095866662473097606823555734180095361717015447862792215280856783777235061758331384769301603095039412337997474009156374947433767528895809029659760091931664240256465411957468423025822095070855537595591762993446665828533889525846644565082524039825427429538396090897387018540262519025830259040042659332540420053898454828890830241819985030971452743700221610311113384017721019000229935057287021047899872109864095207545995339362656300387498835381466846682622951434510834113170832154982111190950662663129348076607155744278024021740076593587069258257106866871975459647707475772864739501145466213759997627444623582351563638372738541011669930149816268912702097565676740372412798555913572525055410504107651254360018673019722853137262892725733728473715446961163216338963798278546956697494998008840843708490770914384451697284013461907764171059202465633373016261511919200338104551661054256370033977487616714697063520129450788119402466203561383451296649519662960177591466699449519456597822879884349407)
(673, 2, {2: 1}, -41, 337)
(673, 3, {3: 1}, -41, 151201)
(673, 19, {19: 1}, -1, 803372473647509302428002115170516353259089422238963)
(673, 193, {193: 1}, -1, 953977478879080986303048911810520865538307587976590903763222559416516516539840475632806122815458754430031063180650156143296485286057169657506745741319540582788649170753270696101617261522027072895180568396840142661491802862315927902153266358304101695403566962415074961614224535462543489714728805570757886103799722491479468837346943667665482390929198548618994926261159343949176370323164435111162572490248351703264313017242651500904713802922552561782438317646450984148399278815913921462634593374161161154257946903573520089276581916401762273164481)
(677, 3, {3: 1}, -1, 459007)
(677, 13, {13: 1}, -41, 714105938465038330112414989105657)
(677, 41, {41: 1}, -1, 167567087090422463653605709909043107152147504356236403203977470714269700145329075781876397811546450609335919743801)
(677, 107, {107: 1}, -1, 1104182483650031932568031969557030403173656384276782138651650795872344451828187487201329175877927728703172821799527653283192703339217356133387371293846801805040320847262410313492731456335102732613069327697507705129434832519644047940538244179505961875646346725608011421042286074205098628648291093967927)
(691, 2, {2: 1}, -41, 173)
(701, 3, {3: 1}, -1, 492103)
(701, 7, {7: 1}, -41, 16975792017452101)
(709, 11, {11: 1}, -1, 32142180034067960734115528951)
(709, 17, {17: 1}, -1, 4082749557616409048778011086755017729353228721)
(709, 37, {37: 1}, -1, 4206079180048909169127997248920478020463029534111706069140197763352178582053859713677019728762108272621)
(709, 43, {43: 1}, -1, 534262700708011457394192386249346732073830659599820322409234120398737099986872482842197493033930059619589420022609743191)
(709, 257, {257: 1}, -1, 5835111838563368086260056668944046993054426292704843840458805128567690811027991942655058893893252434308794690044461220645956069140601382219941675477457474984292443604575368998272384364307175823714218686487465493221446609272252214911005811684494472228003968730714684117351102664942822281549136389393507983184593027724809922525079436502012337654226530786135185508916152057223061869656568757377300490433830242103504039190703229572655508944011948408078537774868601940802461412118058274933299128657024594979133696153541766140858793253249184653431624570285312602938353030403651081212855183780963244292412794167290559794224288743140177994457967052769238509924332233203582298281401425741341851904022848526453071062219407580679118339275521)
(719, 113, {113: 1}, -1, 89999514990700173651681115347482213455620007046398555249335050200575659756939656386696180814359726980058782794772152512087227923907977235645082161154786519856699067823088329831664922329790194457486305361004475087057196134464396525227105369753710184645601494912463051553384708002206597199898259301931691448178640729662081)
(719, 827, {827: 1}, -1, 45568832558121156594360764922243090995907116974612076815845404965358279911598792353405349859626983856764456960456300405243552601375547795914526062119827587818520785557768172972822777109370412761089923194560320397233854527768461035918281750186687474949126572522985313963278642496963568707584561466909947888727277497877615437283483262425686170927195092462381405958589581884379938219393587979741708118881835082530249173934492862316472108101095382631734615926335317500797077990681792695799325314208288384503813188613525119238574725547980477456190737687920165432074580753348669963452822958817714333668641074481602485897670221684995513553875815104955363825061739670108985058524369547676607301723328678239037112180818731871086135598135008047187036205892749056393830800206110290272446769606111344921684467153678564699367120166137556214654377105714456217439772443313536364025209581569993183018894864750185014861839922916684897078995960851627870308718723825595472149417915478771104830829952769425202657299321323580774029811936915605154147704720679648052347046440503256970909976498947952639273075785361049445192039472678164054245530122825060229762836302886220456694495805506713571692603529668693486109185552503493753132535000455032141862957429211414455143867235467283000841105338396176627712394566736805449705464106067452853662201771576751580906862178647690372171387564459288125073372972336462957206263052716886951844080107346357176165219418805643570267321194613600796474464730546986018722042920407204038664806756994949504177374912652548259254781926327562966018267978926639269507262197620318688583345247745482672914629099974733504716856470239709276313653969212468918201936692290244081890192219659797895876807923738869236521774280141083142261830260093169978747935560879654860385458310709527041868096116868968420113135891934857188966897349464713127094857925883535962844378414308825819207232781214729675983610313529392022769810740055229430467253675735212409139117005338483076454986147924725456295525438236834329830636415580795377178671973569275332405286220043361687072045003070409104083827763671670227090984503355929047717620755420519475041155155542166604461373645931428701485244535990316914366147507648020796493580426567532392928335714512053471095937548902070494891249540045786211713444462697549669903927741930773878231295894106186152180293584433914666748006376472175888241)
(727, 3, {3: 1}, -41, 176419)
(727, 347, {347: 1}, -1, 1234536536059600858220380051750954650858039592979953085150526577412188978239510400324034574414439634323758738446611626526541766224772381010826650107115804739236640373164188835872379295951249414760508163746394164563041344922930797358102791789949931516468140493283773093927485902004201561457019885203351701161339531234871914067136288824943910404855938380392044355012691998431534904495075310264500917088937917515795101586170351605452380362383057362633710927923699123320134039915311193072390642068139462464077617394502212429901250058522370259917520702826639367251131275183469674628977490779568498404913575908584247028024814088392800768811855229891346333668263017223034430657489679716657096493289724549662931324438397259503189610560146297808875715638088687726486071557994197067783600660046298140692732243984842402959342816540704144500277008359222448350928060600122872358119527662090252029586421267121929878048391122440958005219722590504918515999693038551725995646767398692602980296311304620591177)
(733, 2, {2: 1}, -41, 367)
(733, 67, {67: 1}, -1, 1251570216976767469615021611677188089487908037722667857674485475813778427710490210023752245418920130850428675877112957377662435961384760216573746315948443128969779446475951807424942902263143)
(733, 757, {757: 1}, -1, 1045195959752295142519375447738328492840084603418705384221016308293473340849849200255444516448362014432211599013994660894079259503767697875088460039372372171130505232035917404077958150779815531379411983619104426016480744922331851359556711083830047220251019802774117853172565018438200638214040767868592835986313448990227709651580063286828312305979282988942811516570605590118947843245405081671015266936280991730285972239809865758191546322729540426524020147573544413141455687105588840770979534371557166694845713943471185881283279122729934573549870501212654709621645370571318891372797208178304288924197207256717190492079903762437167197071152239034956896589287226136900014664734720933865192788785539407759479937482541773752061718432999267230567727884103865078858534981816519698627610004314333747201089911935564154497237082057261007188879024411845633603696746832327537463087756350054712090441189137664493792432093847852626472359034568161238161326602721797191200689691865904575598167903076456743276710572526153712095876353998601870264686557634025363191419270382454609792377272613020395153028720172753417028885348876283772096278645413556758413322418001432752212320073271221872130701597648659211570205059597767582037399374578353391832147838343945641714795577612731972180859729156670439382001076222295936274502482753250323999818070177798272115745316724356753974197591523285477641618465199811703227936628216355509921467901011503542399596352202528276271530992494942217127323588490599578278814710039452751778763104970314316147855092279393744776340046875156422416921826717653939448636688506378742736330693783792248139520643388126438564040918312908159024663596937579399581468497404575033217998886153605462174866064764017327706366286318655424885389983158000003029233558124515317757574678507680676394900411540384299639737499365514703027254921921051402404313576254076880563581457885729831179841123512774289297325761228984399710489263863031651015677259832356931676123270331688872919341580415857580834914599167132119718347122902050396763317476249118562981134506911695330465349711626083557398247421561184887850726140981122703226534597086382475147281244984544781721215280126569912254881421)
(743, 3, {3: 1}, -1, 552793)
(743, 191, {191: 1}, -1, 307935332698429635377241073237740623121788436578939032150705480467374395058245606752343874861866798350491491187432899618674005235218412903416448108294311603830170845552304392706593031999354083392625115530587045158438983391716840702869536106183424206758709337480103929965685664669975757080873182670444224841880446283618035872587022382407491632829735445457864198493907580080812771612063393069691119021823518034283228504374673765002577771711046384011441166112343103660688509850572782278979137277709747128699198767896571531910172606151623955130263593)
(743, 227, {227: 1}, -1, 6983237591947108383916728366605485062216985742725424640929078889339836412370133712768758483574987539070974622869378156046486644483277934941621497652632826286650212419247486212686942470873321528134452364781752715196473351417878188732306086408763095450349344931930212758421911385273856027329442271396965346836246130416476425014472785641229392171521127615268874526055815611018975202638026547974217484619587352572236890141170782306377643829554309971927430790807553630822188849845093824451938023251242672003868145870228048900629392267706189026020921539051575329162584608920966088391381982483878975320424346590667174609638699378868236798097311113486111193)
(751, 2, {2: 1}, -41, 47)
(751, 4, {2: 2}, -42, 282001)
(751, 967, {967: 1}, -1, 739192955889029803576105823646452976621422220498523950822243937836550158398383839761500137714991263548434618739890000261057143916879185515707651080794708511874387088883303693576009330264352998820449067982084132445737465922445099375139785459231510762328682573329393803197405238004712515106543946550582775100747447389972397699172174699554949454232390106405412724155948915276699652524906206099761332892489812050113207210361201189012605361587368868303065096016652533431519563953502830806050810815847890897126065694300860409591629577262387071141001128796240459930629920492371835419196647811240672491025361209583527321571121390115799465928170667283844351049023792130010896998194027809736912431150627512685261750722375611311384886809053568803097952463385414929983275508804353196997918664497605424507079617322268166037982932560064112344652369743632053507254131065837183892345473985161569952363626826154622066427913321762742348708214266135751172455745440666385316330495425134755652308805948514242004880397942960850327950531304842037249647187253088502568095890829821708582933359469456335206579454691440882573166083422995485341701037708547818722991768475502393979187441146998427671246181320036673088786613061452654649501872381942224719116966371974056399257446514328990690940370784457903163168009749430024808609201613030544493365456897010661547298569160021624549582259380096223608643936641729542185004571509272492906749457338739342244043642691160817972513722558875999914140579762126888519162098699664694178974962274443958043041121669441615924771861541293396448872880906101895656810604484251932314173546010342019543116628450882291503975422773924338879297108434747977529001576042472797619678979574397446156565125089663521577563855285698885848644113689966763346099206736533155481684974768804570835376512432206162934600966831325727425343659015583907267081740474410070760357938285819285482318233254275182716581425735362617280556698257869561394730674591466060595543646482675951380999425089822285505729965973887931916619009565355990335768747483189077071328867855721768238102866338191367296045085495828287646620723518159783585232761967721279299975755924424946913855692605696372686177613492407373216791030576773260064769636854766127105050611900360072919779317135248592766575209042232730958302716440744263571852345148594463814131510621852653705603649696920556046849135180480648643354615317313339499370050523167079407465867047523178567900961217397422367919139239471470148504332394204885939456802688331518096288157260759636974307352799989296495224028100161412350642493279061272550412003894120273227620435059583462875673481440575852368982311028172724493837846646045733726817902439781670380227557274139805344076668971664236108502923478966551572313929281621028116659270556895599771922814592723320684359217)
(751, 1934, {2: 1, 967: 1}, -3, 737227017176558979630424691136754963385726948635495961591333714597623163296260478485538701178515222953890909647496675792277736619227911086144598817281956627534295633859677885880328454385990357866139363014046674646679653513076894323610158370244192914556531821804581585635710011307891471183388244565075906018032693540530981747844589128545494801428580558250079179676810753267985025789467625764389627219903402975511842297567687356063103751583147142589493114378310372438350628942988195617736845893465316719208177221709634717012928434769667956590094210900505777856346330278296378410103039705359713255676889504238890280822262024716555318412404255934685190540914686299877889293411596884711016387450758822491949884364071420855769501471795447609472691951514709039212043393089448002325051859538835197314241639616623835809158509867085218428842124079420266130905050930023787126674342405413799819511595903744636369442732701226139310546756249470496515082192926196527908574297299004078110680325081629895616569545820772124662184705423712138214408763882734543784670103886125374251595770747463100272519402950240241928024684264955603731749705161450617077451896750833504633498112846075559512546058497377001085890903984161557163731920593692378376778889333750721142876442667216413588038933628116259803691499085202817295820347353421420704819272171220739575098307008000290441737625711532137907557117661299410423874240202066980957529378994753333355096718109535390265140015849942819063305099496802082964589859075463458290201092693926819856756437835214377584546404462726126777466304095181411891765895429772538877167765302867705661353020396491647111677615798461774148235148039974711631318061212572604008988343990422984863595536991020799445708632266322027109684953813131745358476602463297694961786876431653494849112213197014125267221708940816882405595404603308418152009714568893022699825071428676149084758876250939344464675624071172823085661600656119908305914901520744076391832094231392238744347830874157864533640258617574400182798214327150256318918298686691233781245546398658678428958975736228092383023688991850020924156306700292337352293313132700743982688586360796157161425225338128031269459056009714800415682543793324395011405887820577919320196753889986774853503308313080378424110913273503388588732762407657177764480397422135435984838607668071130690429171905173426908426664076277242662920161553171548702829172729222486111169415273460616922773565043946897308429992592557982195981714488901149540681651617351912994968241948895914535545897074457410068375028025426940509284401541616960655331120905040166117972508370595208985046690266531767655235017647778648098907426841136037626480620784356719129216313770751135649012635277590661012469671022905470318132243299489057297200070369244281687423019873061822491049751)
(757, 2, {2: 1}, -41, 379)
(757, 37, {37: 1}, -1, 44465762704095040272634069680112142272811700965114136318124819328507266017773346192251134927698828074701)
(757, 449, {449: 1}, -1, 684743786438917491055282496558597998370851522646948258252426245675762738859388700591368491595285548181560477700504453143409542959744645930364761159837545942674917976931305887657508242222254954205112738152547230950674258954028140090171208854325077827999982472673534185116077421251763444867771410970790785538137971152302704461635594269837811327368303581985085800979401700832843417332539858233255560660830906944186828512344606496811181349489614623360103592160643500679747922964061375766731121448691287395098100728580714644723858614551119030860289900095065072711712430261835703865399148944153345524149648051116123623437309779514733419880515678663964001265417269778805951860582847756462148563424997171706050868857353876484448336412590032806264533451265607165355765287562964712110551476981278938542078303523557501392227561949470243709464015043273447870068148976170328157270288952435705767795693164719478134025415523086003165748502921009893554176199384688698923753306276002094890832666508592221146502852411279927699155489554988555712939528205079703865349942265605352585706616867357610088610696407861822536645616799362417593997527172007310229535388924549969892942817908912721392440266458083297518769887601499100284293724047266340559971394683832362171752730477153760075496036298375765665959909089601)
(761, 3, {3: 1}, -1, 579883)
(761, 5, {5: 1}, -41, 67164484721)
(761, 19, {19: 1}, -41, 386136882010610219393289764679287179394645822488441)
(761, 103, {103: 1}, -1, 797638402619402945589457747834134447969397719815049478437522646115032936786581912308123265017472765719345885838264365739105831123343003414722425173514649393748823530607380559326328660572995214955094824865664291506772802080783983897696057203937809256403079131725623430473812122800648576714729983)
(761, 541, {541: 1}, -1, 88773986045750490041070421353701584170102845747845443279989700555631194604278135500794027489876820534010310271957340917872302238511879780498644810197043329817738412054813838321336515525263152673321405049979601024469340057724791131999839718618844949103890057532952198733448381676027988092274006732734315226743820746986102988054706544224417837795478364930132655182720515675233328655184700233247711405309520096263132912588038392926700631185608456082744343490499515335487993072470876970027656388095912196173240613531204535568054834862456411343747976126586240259461643333310228576540813077900615684107505550974067807026916283188387318796462690064843844360333702225154246227308924992472783758357080678410325292869924573775670767296080528091497855404542971099538063909267753625209501299798596232894460935832507969514377086903743641579553039024223844575697692687378554580901991708125304495639251985965920604334174432694618942251021462018392784037671813923474606748915014888945325088776465218370860893031667580918693753805985370633906668191250569242476298510916393833565853296795472419906940464131430753736242676514816158136877964312964632568434851138415123363884322076143792774160037658991367432484534222745582641200637012944312026937619808082758284321819214850138734269525278404768492860997457353167619883106201383946109549846859432667701594150612576154475035943953823604853276823036747708746500734438499873489459883798330347750936222013050275820227753629377446078751726477331767687553698261564707244318283843156579075631680620611623890099681866529713116502229741)
(769, 13, {13: 1}, -1, 42823405115868247139117302138464781)
(773, 3, {3: 1}, -1, 598303)
(787, 2, {2: 1}, -41, 197)
(787, 11, {11: 1}, -1, 91264002187709396686868598317)
(787, 19, {19: 1}, -1, 13430660426683680603639353203809311091648096694643677)
(787, 37, {37: 1}, -1, 180153436651274756680374734221966985068317753788986111101139666395466799278512177923310957001835174470681)
(787, 121, {11: 2}, -2, 3607618119210770865761340243762738748052619810913195895888820221403283180846423135747835000931869716834628608106948639478797536869328949127232137227823027125403378957843720064089391536508694616856481036332701115532401897887546730915062428485611217665853152675617524957365798688514974633340218305373775638709306482838453)
(797, 19, {19: 1}, -1, 16857572602825818524107056637858879074040496780500567)
(797, 157, {157: 1}, -1, 424661990872395764550228147921152473423440338820687489220331642227690205232071851849854791522634741076865498446478690221033669911710955031987846472332888228755658280246023142671247738212541282186612062929954756711038975934987964507272701227742268832219396127388526226110402272833593014048420114214420869246821825412781166974259920141713718828618352027093295149529566810563074629030963499404981020272144988584520581028937009163236661390599262655298603941)
(797, 383, {383: 1}, -1, 22783688115828294450428420155854639332047219184720059572906912716327289598514902607813710856576114031643115210885309787129996458146481269477733341531842401397833253439480738341844572030889848187155723273992799780264859422989566950191163371921998492078909150137524722624098073517541543777322082968407010118452714328872385036249464506832118390494587722143790949184245232311285896104801888516547719241946703446663194347089215458642227507315010277826629709015942158111446770659798416271836567551879775478740702353996915349667069669841778964387365312968830630792917866290993275621979950901943863112706351846758021494929626667188924033072107546789154432554935699026962732396240553106579268215835944167593440149345701470402610003606923944963744061039452101583866747357377423318303849355669839771995892937602069780394761743651342958019238064780679594716352468786142719044558721910100869571339296296383717567250934683802362468468967012586435671796784705507423036664635736248860800601974401033867204441496480638079651476843895707262228462205541493614555591259897171283939045419485161659681862315017847422968086879551307)
(797, 661, {661: 1}, -1, 9184116309732970862993836649052334164692485444694740645889749723955814481402215186769270294772412030446087721644711384092816371064215410490501469240138483984140337204018378097385676743329349582491415804778629434744274910354677023640424415226857673832258476812524353405090897255619356920393204067183172606050991815575917940345325440640435297897481570118689916542206197474008346713217378739204702957290171893226432332089512404166940579954580234377318437574575360796943539903738237064273078873661076734018839622216155045487753056472641402112130182431887833689289708979376745353003667888624610101976571960574930314899883967288454204593915199018956056342760687037469181723489605770421218245131246111554724828333299524155841412639865496717418606567772662994004890517030303013804689408778171949002311257528383566279297386341690502333418149160729510104979142130271683753234085898532497222119264105624309461160182164117028301186515448279099092398061835605440068567279567076471678992976378256557663813112414479520202399089119737177381732122918258513443899998090566764820800140145092022868073155624225039122939341307045099419367266014402814031414864851548920536351153998359518319826852242093304801019110346409655880036997058287846925548248320523710438320212586273049935492738967047718850073727251859037247010043425056995759170287878875236737415274722726317221450935809293222642924841991987995185584535162774019734490659395095918668436991358113380677218473714562512687951420817863912949744518165103532424129871921413531731835947157605076720844352395875852112629532225600349715838337324626028201128725078619720247679691608175665537348577626754808075609993590094587769636041049018119697798318118052237382175949239709640641649014428938057937274966667964536555381124490694529060292653073300706078079780242151993505686956855739633710990574182158250138847908874793492902865106681419555764046508591428046501718069853742810218086881901)
(809, 101, {101: 1}, -41, 6181131005105894896596610108398642920940795472759357310098274269066151851814682823121671873280225747377949073492113254723548525588752129883746053830331355964442976612271110717516616844752460757418683865789108713951203391615777183699413800845883222933240395213007328255653581223545653944401)
(809, 107, {107: 1}, -1, 175017087245460863231580173748232518378456538421949518586280117175737181877771936078106163547138796556133883297029310581936763858448374684895238626220862844879253857284249075965491729562261502220602852688544003746819453613643100289087460597926057365892014837145349958704483926238385020886646925357490658443971)
(809, 911, {911: 1}, -1, 1712741528107035991467016806739022288607978973037680101148907595216563053435311403050452045679713134447602490996739256279748663137568964281479891919580639692080205034048952594747476691113741922733011386893511163451581523073737259088891402849899712260717560589307038253210520565876398962243278885182565011269256967175344069430826778810904532487337217168203174569978352512660690631926232970387332394215075097128637270009584081347064936250971392177364148045009398472025718072724063406252171975162571022375345592092761725607390515353701148049651299248430736028721550892068563724737261532971164695009900835049398984994645416339492927676391656467859557663656411787861741469193490043514682553545834348675146060793855410652983170416702024107209387506033065977030626753736967430029246610323947516918826000374083192298314927565459674371882245408229770991045812526635571424434918931321400318619722650488396606208801959121787323044491313536708387517901819937100404877791513127043727973433050396853105759544100395927374619256032033821668940921871155292665282837690615457971696164609368988120595229492129998527190193319213148774175214511550513640042199904549241889489022206833659239320348016962663771012776279729822879709667067306994204411842826762554332284324084979918187945445140128522585845881253935040542466067597046093287890335525552040460284790392844876576425075608972097089637983985944608183841110804575268481513037279779878251224959103566704471842110171469820156649752101036043127587603855119738009983821477874890957509256011744461450056328982439677859088202730761059348019669279176191385153573691135841996331784253176056302818933222050314217327903589299600933637622043228993893697622743128757187163193812469600665438368802441603886099656005482840661625999989879795826924550975875325050001012628703034760338703349469941520560996085218982575462353582957665371698584189144148594476405397246413745533501953746421331233733439333399799095763196862558740145081454383755461482461632182055749965632132684743679891680654365834227366589678422799722061635293530893120170467614251987535293624456515595085044078104749233653971056467079826770855523266325676171244425118938828871939725473670645321333985862196762734945359619183784708247179410621454117803276114480150911607199605172851655479098074252519943920180004902043270481355602318809259976168973739766552315169252818777077570487208750191219965311709614250847509431478803168075751678586331687289861077845865147662124352590458549186931559321950581310738497408644703546975342434192795892637802920745555303849299822906985627709742592530624572043498361701990595182664803132116260858748641578413745529413967678689888951)
(811, 19, {19: 1}, -1, 23062756364850267321963255830354981138366945460295429)
(821, 43, {43: 1}, -1, 252895967095214943244797295309476046580400927896882208075315606059591337267269594790177295042690759654537424447496744988903)
(821, 709, {709: 1}, -1, 226717239665160063691222156460323714409250613411688519571514865471288515645470364259483135838588970772895069676284935190429176810525467536790172699627879830543211749441883514000955487661176241616313926591320934992983631783326106069975462972934282122987210318253135028869885591827641541033710965975508338306037020548328841415555794639276797508950745155987952923803293191961530925416235796609909594376563503105635024988971101214084194409980681618214521235808197711546821159989196629943339836466137353919807434131371518819435522263036460899041579137888867273153846119632906923999473092775005603980080285048845771455983444043852425621000052603701915545817869706655304660365743583287906002468802422678520882371995150040272626352044617436996867985980584125279562773766147509677655938999174312491446179915235025212605257257593803675338178495905920638167724206173700785579673201220044429957849135900503382368020060457755308024307681851950635469463297595669757490206347495948040376153701327258949735871134983788304471695241850185456001998480421694986492452363306686256717440734733783870598328772071180347850616232111377802116119843516083313086901483407193761626280572320576763710087057211172692907279331356552142445214708564263654562486649181765742535903454815960193193327770551349261276549879083181556339849516209964615388081064918830112875539384550247030646263754654948123214199167399988383739596163312976050871855706692331476963244289666832932858041311762352460956394855788114638887162950007406438884742508928017044515010953706444998069311069489585423765627366488371580532252356589202595024279918656954230791104317764588102019825699465819537500204898869845739144060254785639083786677027325977765517444795109813158209203644875749570345306783377909044709599157238458910076493417705564909929646043100501689156192787225989608334827772571391467800840031690470165988867675625768876989528810091727107642435251268610764509120107159549652759476910673844894070823230359197163148362005823376859487229721536771422749193926929280452005749864219641415477102337869535194443310056598829)
(823, 2, {2: 1}, -41, 103)
(823, 107, {107: 1}, -1, 1078724518947275961287243100477289757720523917198211728125297494460299956207704865044862688108371600254137028429378877552296218262933161895294613330430298942886264619134636478942551688963884411408099625795333379665302574052164167442080075804954076387415812018310936106064391045520709528194764738051628167162793)
(827, 3, {3: 1}, -1, 684757)
(827, 9, {3: 2}, -2, 319913861581383373)
(827, 929, {929: 1}, -1, 27902192266500511726077487628372394581914604307155850990356371020777868883096031602448715207811195509963630753507577580966655498942595387301372402525112033140268602634716777345755052342959914629596149873601067610890528703787440393393165553391428681544635991655934977407134834843105514456289452017969637505855842953711241117521201537636251836532241747786421484915413152301471014058307393391684078662369509041414659863598907947080503072734819146989860797973296023419000946335033870349568397886077765104062198091484560463670082858602331832212938631262248986339535888662114925076515313605147841184995899945838370728385254431172647332640986486953336009214415047455407343492357673164644993947419247134413451263476316190280995440046984987461655641644563644621954672465549943721432886422234925010711226144630554890983870584090392993816787704156256619598145250018723123897209341928637306673452516624799511194698276219976273010485260452645644356984332839449447780857951670980988350207285821824105752119804189960263410842428068475895102564136320779446262379379966283434613869599289215690479897887175151874065547186903252103047025010444181331887358152255530437722358676865018546336167709986040903934795603626472356479249129171521279449850429647745018574700883783706227287833070764074751121353648822887975456509980778654389855642588968973282779428019749489119312607228471016058310186485398818268310709726932664031203561958201975001134078282621747167553065406068709034919346709848993478185525366759992771027065383833320108903126088778235043994397333948414786969946157020461819031617980364456223828617268290360237831427498476192982614286825018581117362509822539255945535600411117973312002618366970664374075041188448667299219951288387740565303300657093436699666924311728311712639820701461282574566419188020046829204902806200388534948832773664995925456974997019033110625365584487578236470217399040403768094912732932501334841830880769213199770234040525887990752061825032875177610249411662710755284786823200106736249512597058014844732418211114295140389536463409541466644663275977751116915750467487634795916893659511398611975285333449091509144827881635223657624339426022345752295359806961921986401883373254092507346431278078966741295202829776849081616592481175369909725969043829338241787238676126361826329673609486285763608730521217136676535090033491176768659243772875281798866939217705479325837772789429539550974151921546156784180071751438737953619878068175737180095560762346588833399462631753060990333528512313819649309314717422748376409060385026576127434803829732648055924280103362056324918791814318364130608886457477750288821096177805452161277913553669205091861257014815977126752185730372398109015249618375556710079235517761)
(829, 211, {211: 1}, -1, 7888158152086289602129198078215434799973352546288353441997852916108729693304325734367503259907972664524994157348265200715503657779956876522154400268537302784927844281207286741702454376271383832105632748932444594210200050205369058424406812682545710522052588031311192333277257855305423054735983786256927941003655745997907341719881020097403421030563836694513360014501884187532280441611176470771757819515051333923924675891633301168935200081228732609176813409534383835223432801858801280861600450600998097113407544617801074741850232142166984517832618330586580436862131131537855542444884895991627547906369172705522895351)
(839, 3, {3: 1}, -1, 704761)
(839, 103, {103: 1}, -1, 16758608162499811201337513105440259377636720812556537693511382932133496762729764229089157963204783833175981143915715933332254291605121596818324031669406598724138183509185254091339345599884355376035343799897551800235150547070329904808924534702297577715459263072746335356284348802665420209148867222761)
(853, 13, {13: 1}, -1, 148558604242951050493396914115240261)
(853, 619, {619: 1}, -1, 212329676430074052636613098692051181474766143590039235540523226955386882267116831077820140326974325308750256454773597497333392260149026323287759358491909617203689744160871101592881905095328957441233635911425734979395705229602603143727692956247723626392238425151838432081789594145218661086243712363515429596033595532731291993769391476472731178401820495428623559127806234429085809399512433607857487169498672243805179231235685945874384971471517797698556928749502876299106105250143436260382657052952543636290252008953120050533968175849084945533137003229014440186516273649695056457411826512954643979864014047809121483122390235892774698151994769695411036927694691566093395434165233330212591340209142633656652520028237164730459383323920977827073774604799805723322952700455814496195862329734331418139084642509208531702426896187026883926633558484024336201645162761733719791650174057321600319696331227566714775830293932582458662427659948462632686238408463304675683527334559557600703324230873159473957400699807766239488762410210538378520362871748722322063103402775062362764096421815211257550841283511333755254740662698793590222895140680554198619913373341009186940196546045099048880409590207244330851638883971474390264608951053299243461623635652721301671795047918727820511971818612658210493664479796773062849009681275741807836479760897036560241639978372073709454821588104780202777173390425862199506801986879098600594251718116848866662006043863678173663576661332132874007755047807847282097064996027772029705656664021799093500965650297672141202267430801351795509263426804648453263082736329159515809510101391278364400294916733415788958733953723964544097791490174011207536693117155963658692002939727871585385485137354372540054363927178237092411332910344543615481363587947021066200083768849372984112900383571307194550516708117383)
(857, 3, {3: 1}, -1, 735307)
(857, 19, {19: 1}, -1, 62253224582153833276145923445565913878038850524308507)
(857, 23, {23: 1}, -1, 33580343905720483807753188050946144798756762183208447063877401807)
(859, 3, {3: 1}, -41, 246247)
(859, 29, {29: 1}, -1, 14200854026894226742429014931073785886317674804603175997815741627886208761890685561)
(859, 673, {673: 1}, -1, 4404655741839549660814393569890901503218441043287016309198608119796625720357219866798721223915845119210494187737654019590086438939960318095970098326083273156671895071206062785030096103955883310870548340631134007967034196854353229488702225998730257369734277294339070514213236274976441388738747448805974761485475306646371226256635230965187796723333541504388035643987458478391343859933496409873263376390177297793042697695633745777468035351608388078628041060966345356388301119607431096628736918961562412227112970874264557716301215820902308520726329721945710790196310533598723969735452567161928842705623318073239261885266441495733511668284346001456453644012221591995070889521915518303629243074514042800553322183968051649033351822797538701497646580216560637718148313118095260108898474884345630053424511308167489342555904803151672676048496399668244335378270514601902543990737635669407074054322599221040126024517460065095232298510539888691372994338200803006732039686961520389966114661686262598443194963858997014281231668868469518142265015671119247174973088564497059702981083931006950240246832547372473497698935534969072034065946277384276697918860790429923131067616380773647443879909671713736483192868209344960559694434871364549063567538508825818242096435144872649651370451354423857718996708953927643809015765718911076730225097792291763940354275761208369381645224057846542781065321853121034321282533607423584738020174312784779685246351240017665747934452711752001404448542979157880568268231669401543188266887692288956919716803324291324669533091001883580373209880929543522801890066071798180767161789459841978529751639211678155144458120036245434234552186109369193379554188374180296090802800335071895865321074548998544283347052221542693403620709056030041686655060595060454625995147084489650609623549460566037140154560630656656617527293481897089783942425438124457225396300312912111219892073704135189370371019670013973967680580363259988291079780754871446692731303509630767696656081592641)
(863, 7, {7: 1}, -1, 413588356833933793)
(863, 151, {151: 1}, -1, 252419491301372390766852268873158484393407182558099739994778778797037686388049625905109068936701170335462771179364594413125476332434911856591678159418994705796900065920826729003688653799300340816758362833438653212075198430594720261249857326630067281425935396622441147489997097137060410934787961612962011821850071421033637367121607018084044281172500778705530529711900314631116418720045269763017524085301700527737707896191341636999881324349153)
(877, 2, {2: 1}, -41, 439)
(877, 31, {31: 1}, -1, 19520156182767562508964575824709302893125186717478784129663602396049303634560742193409147)
(877, 43, {43: 1}, -1, 4040902842206940079874714544711440657008849880954960182583347580448666256600376348304914257506887768874367525586118899332207)
(883, 3, {3: 1}, -41, 260191)
(883, 131, {131: 1}, -1, 94489507102329584360890815952999806675573497748301065491623123589800248880648501291340859022252231829560247498505544834787543802892825430365667148442760991422570775195770207108973012498326946094304526464633139568151994583679753109021384532785164491323040381182726060111247353625131534849620425758494572641917996316687596687159450558955336142267205209083244997431224846679016344771613)
(887, 1201, {1201: 1}, -1, 3227258074123653006043441478977089988874418207230096558439684357030833064791100952466536335175584679328254914389793887962657308989124734831181284280792484390314948757434935335457352604220893403473388551506736319752992833969293958806910595723943559056214752682551064517905112658770467573591441184163484660878989723246841966315157868057615287231673093809516863097244598787323669413582156236566820716092896473890243071342322499551073982915285218546853199099190604039924905913195441687973766258698558136708794732791744718370742132767248154623435827279902077996822135395243454902039595702063310168615075379053627973081917590315232413628579864251173893203409761173152264964655313813941128049428460710886509382862701712485599429615919139489382196995013896302237863770776829653759092945539092769928646702477403423166693320176286494007462925784889141792222946454812675767758221018285708179527034609022026148039985804216503277317992953549618058731815457618832206216921534837930867684031306981096676002256765185324238473916064578004716054689839569597210880350244671520024204098637773959354590044323098332499606990368400530379345043445595732578677151675327327748582702900926829220496255900364370737072186393134009538321811150212820951978336509968498477234852725746338164297696732697728931969514484416430659539874104492662929394728965189491149195225046465280170634456685861840029446475964160335161184505333130741330739394558077383923225920530216002151623307221098405861988876502881884281600882276591335303792582587313207731868896784908589063172769959933594172578866751321640808107748388649063034005350366112454370056538292892132689084780699762566242566346838009417280645627898352756659830922649656881684291946115771843092321159012315091535707052946611093184045751503832098759127605229857725143246713298818179217092882465100714157775186337810728091963044704631054156702457088852239127466854008339776807476358195363943489780103321427330253447217376783581575854908921195544582261821650094337984326218955919380393132892486898284774378385887748493225443095352350222491244311869522744097722165381202331859098885394755136787397714162871020463045930645718841195715123970886173934995070961115950910628398794597595508957706290611742730661321294242732308982517052480173571450227412514272166668530596189396658438739557791781101202900517785208403701093994858804545950472209538612008109607042877356916854345377755541339627924678132133752153340895492271210181859436608620955096234228553932478739732695577689093291650138647794636211015908522577219188200463645121183101363227026222667733506161982013244490330016687156836853074446506562155894721167963249378080493283358362415455279013269310199792572842555231474922875493307575312003281385586119464225075575419923092830954983119363424124727725096091486756169538316365141417025056372953610682976151610575997483701896072376079412466610361636012176926797005508856843819454290618023840607919626221467367859988746344197668010444284879982110645926430556999076572401439359580568311967332165406947178785874549234614921484707665198464234139711982794159619440126266327887443620345827433419755509721221495964313880202664415859264838560731235925118612478406307765338050327042932022960596204104873322120562526337402015895312350447191068701557102066745511740576410883339890775091283825480277604300068619789396414873408953292811851511181435896829528033043332462711499160227900027331348846250403120755599338802534587520245409329108009431073146554929274295528606990975216940394186704464425613255398284806830956152614025109799523248056001)
(907, 2, {2: 1}, -41, 227)
(911, 3, {3: 1}, -1, 830833)
(911, 7, {7: 1}, -41, 81750272028928231)
(911, 21, {3: 1, 7: 1}, -3, 326395031838009217946234454430726561)
(911, 47, {47: 1}, -1, 13750621423269977545797375664534485249208795949678921216923216430349049728637490407903242134865022017278746237742464286632890576385130257)
(911, 487, {487: 1}, -1, 21203531195760105049266641352278658089470377927681422968854932781878224173074770279404360897039690946318023008244127613244239899832971797754571883506962499841893436803378421333832249567459679654089583553542350634643667050264251065381950818176046280495915430869952366662077328447652010990396049970235307115622442372103919631336614248911110498722965909102979964237738192090991683313827834388687856922427460163548526354483824688948358914185897612531061025507324513406634945472104068082185790913366030013745355856120715836398580440188477500494705977169932151179840781779714584395632120393837613906980343937697469446889451496506336347373440774583883593563735413762054165223700695861932559448660263702635092940836637888981357336620536473829162460236643292138754470705072974136331276038379607538076563855784161959697630435412460261105880982686121773879987508144614327389074374564657940097356403903777839002261695242120398332151852549401294206596800663795424946051119382263092374650373267520880806016125443265975386613972005455162753156168640717185073192749844192997744088062756995242803709758905398181725062022705146271817911862361834375637905441050273329467752782996274560481803585692282501394223360034657094687695391558455754287170719488444821890296992309785407324344458144954104654305717622712084607010169867578529884390090054470061719334607946742816980218280958229456516975295657422252764638123894149553041223723201261907410481739095891945297)
(919, 5, {5: 1}, -1, 714060279761)
(919, 71, {71: 1}, -1, 2707438667623607870383573675565330596845603673882083457251537249714988902759501950245660957935874718867848247427383718811946298845011022701538971565892110891308149213381942516028591947973273114673979254087801)
(919, 131, {131: 1}, -1, 17040773750457660164791151966553877534479893431059166340229399333069831703157005734251503992772040155979760025577523655405631784734138657332034302769432150871747889335673248418483882631556127878508561108582489782801581473370036926153202660271708150951884237376093197060711080073776662313923708048978899469905864243712853202186844436582515222555974892531508502736033508786022735792300201)
(929, 53, {53: 1}, -1, 21741267795612298502486095577772234558307836335843490396562271292212242907657374167779053882514604360889160364718063778183930768884722826404829461867023221)
(929, 79, {79: 1}, -1, 3204006801062328516706686261520821503637627677593190717117811911024421687463414348840879463844306658181128779999527447201250544755342364664405617515733786606050702531472905218216828701984816953804996618528098836580156499532445883631)
(929, 167, {167: 1}, -1, 4909940855713536403619995198930586239193893152277197443068005561566488341342347658330489469830761006312546748343847408270026052693981283079175221678198570838418415360686387824418848745148867744836202410090608870034067838858103048977138630879784780150060747172005187611947767757337771571079563072630717883686015230276500447112311512624814640362790951381859789641774290815284545237221499925756737941855474575284256251547368439111685453017292448617082463352641696994708803708755007758679255347911)
(929, 571, {571: 1}, -1, 588064163163918198488191995722132832266659112367262592616307391506285022948189634527970241374891488925485477198369448173610967859740948521198457947288500044578504288342823312890134648930066563010766916470867352503179977805337905100097626632248418160932960261640280806565617944029734414052761828591171940058906653164591686652580472301947228601688332144699396802655022574837902763839557946103164200376633202665864629725738835715181860075013409777696141264483297138057446251950407590080166598397345093209534675830413989366735325414678909047615238039123793618984285976418118522583411080733924427614065876027262624526368786519976035438860681666236197936897255132461684446489213137415196486177781867822388476134163592060850463313600177324996070895346367930838198195830520963069369816586383389199593756530361027203268260994063625755012287274657257199752703131398228551396204874489007102033792627417658257930281728047929762140844652045348591491243875529012724216197671946867472151847588556680109050343981949141993161855387013748438066051070318363958455616347396933857652212333245919205860014285341555456321992034915364880770885470669108547289539025904415650874082693179071077328292998840479462526016657846975333024428746334183449115699697202816265799180700032155688299429886614638317010667031008135878117234666823432019929669648775947042096028177813571072149456224969772021625832223129269694405235049853046453852996931196256927713386158248813963085488807792607356602767249970258905319971166754220106782094087783484227906881303890460683764142655282386198597156972105043338440221708775000806121439548282213309667386419287705976679051059943866524165919369249396132824599274189595042773525385822199607451)
(937, 3, {3: 1}, -41, 292969)
(937, 61, {61: 1}, -1, 20176191691018810830545746304516430167323403798673022492222277632225744581244706726987414753205841727647069679363385036044610095127956111914266785608820220367891790215030418928301)
(941, 5, {5: 1}, -41, 156982145081)
(941, 7, {7: 1}, -1, 695023534042345747)
(941, 277, {277: 1}, -1, 51427786910616153289215792489107729829123377784123920777475882455298123570758871553862991276284258899909929191968584854133498434123707223971656617948593680391782687791034316450714566006601256658636144455285115644067446768643472825094117388658070565832643931420288158409391638717316624836207648485204234043846781941635245617029855901255634356102268903278361899688477902646459976985509540023927939450281185268947302894957203105226184576105846701403783827921003103924941584818312942076251485637275990449601962132818201054243644160259644620251976520902139874533761363473822894388939468789925085935739145464424931418266709784943656453148802297956571437328589650493489480458950582760439378990941760146243915547755822815809248169212692466108386949748125604764633185296951067145637562983114281782935616035390967037027600773512717)
(947, 7, {7: 1}, -1, 722035775587170997)
(947, 41, {41: 1}, -1, 113359521156078552519215957615213929419816540441675886538892218077456751621496217051334662149503090671853757057586239601)
(947, 71, {71: 1}, -1, 22128774990783100421816634778608951233263451821309643595252980668523988839919012568217935702449944209430141685060966020941139402181703568909742802141861365687127311544560978224154841543174455257604779732010037)
(953, 131, {131: 1}, -1, 1916606846655398288833938479835154651602900073755873653363067484572034512599827272695168282367587473410464970781459542546748854862913463650950057072563439942540068759786917423208045966709965703318910004241750427961618709425369656837644689109417471606571567079832692673638747131444263161171363740907954233356832454032967720722708383864149153479791474499909638687394792970627511806973433323)
(967, 5, {5: 1}, -1, 875296605041)
(967, 227, {227: 1}, -1, 509134457450274922467990248371031369862410996110801236651356061394210997816917474119327577757098338559837844177651548349422648704700312658144226616035050252294149362289993174478962525916742251480868669030852536040401563587480935308116809146038200032052073658270681745167265151573686528160963929293013632095117182708935462801116245606605243891150829207231440116432949128260137022649799920456126766303923898542559961537004966703578267625291986631426662976482311267067920555479022844739112437810538395406583683909533399769517311212546595777862182006580721663826093926464201922010238161107353704960350770036427147672702761547388226634616612036391174052054564044485276665764743417)
(967, 503, {503: 1}, -1, 48365907097642360154201563672486620061283719473843709197581571374897319669779089998247969965131584510731237904456623204763948629612101032299187437955596664560397909378514933109673122869709303551334659193265383117288682045986553410915947080374531186975334295298526924737876358689292214017286987152391775415612325082619146268859203722361137005171065697406354952968185500305813231534780788912861551471343605657732161458508685957641669870874743773542008074977922466396022525899401997555592469376073562183286527509433184815298549641187440341097625052001670231673683227505436807332398189203232678294212305656075688794321352503381056755179461141987988959541655407198705875566853653581957198503286370381074590834717660776870136620216332320102990344235106135175627857703468785051549433283486417361971254421921366995634373283636811212197533509892495313818776679690567463387262201382964416253172096817603163075841197065859973953600508860677293003716372461724669359240581465836869033683321359051793889675611948866120423442332530260693140719474967814720739920948477160819117189499794347499551590051944747061249756982539921336637398582259749264272178647114866645599231017705191469141562267069464241316383301196862311291273579233026936905033474474020976208926372124257602214391000561787942037539286009803021355625920543319591955256996100131158633337282452726024993705845657367601398901425317509357800809107344054582312939034116306016734700200496356133507172623963039060123516606424222177319120634341343762410806057)
(971, 19, {19: 1}, -1, 589377610909740901536999454653184878294950970431525989)
(971, 61, {61: 1}, -1, 171238450807385578732557046572832322320736659282225157163989433098570550376232136362578740516167527215814561068582311095386193240910501845121307948635942697549585011186893196651161)
(977, 211, {211: 1}, -1, 7556194476625527942492735987990240713928467812265274567571886590736071881265842451504018755774210190839894568972823716919236518852838244622595986513422916671159696951809484566825813098583422914447457542403653924004728646006246611458842007723305831158757144363722515454034619365235830474070176211240526536544058953868949917817268222739197647856604230206676403030769231833579623078727354833172019105280861821591180913556134289419588945381499212929392750193885305338102225674133045562583275138821867493561463451862171125459055487623125504569929462815864788886854593710225091248465507652348744609090230998275268708159865078133367747)
(977, 311, {311: 1}, -1, 737495710845335207249297103959108312101168545332637064100654132012729323764486992834316438128107621225651797645460423363274864886658470570201209621608197418985666048498082145311495044946381678685362166167360764066439480278212569173980795370676967383399991028146300148114535377073303304499760323641064270876329845147556354327803328880216611846661363610550880646385929022423182455675855512936752492689878318725490855252781458342109243003052206764830668908223928610659518425076499884307352336492617394095051189479417668477885162964121893395789820498572800170841464622541804458114852207938882997235391661403743898705258547190929533474980449586931367359109420792599530178340913112499798151264010948154027833281851553244967879719516176114275046816997295651954578422778426020701498533285174038514340460087412144654883305095279700165254448012826562591152952000103964438995631328001903627108559432372261429393235138283266529545954978247)
(983, 199, {199: 1}, -1, 33576742555532337436112539840454840035931891999507802701346766881052733413078688213654980526704328298989986286015366476604791278869830925743722057767482672822845406178295476456307567942676358840348017281159034413849037556092411857748544577469442128997361530946102870877478899558866149585858738709521127061559244549584936283735740593253758568516077034724910632204213634653517420631138411941461946273560421527478591672746466664180215481227150098867770780969156467720728123372267371884237760756978925412363593256706443043705097820831953897309292414888003702488807622132297939036690968416809127353)
(991, 2, {2: 1}, -41, 31)
(991, 4, {2: 2}, -42, 491041)
(991, 5, {5: 1}, -41, 193091463181)
(991, 31, {31: 1}, -1, 763217103873759151009493612178482614881075163664064910743881286463836168744184108766054881)
(997, 2, {2: 1}, -41, 499)
(997, 23, {23: 1}, -1, 936977803364809644150321670082438986133840257217892088495462719707)
(997, 821, {821: 1}, -1, 85205108820067164936805678175437905614545333398172573905283119083602918006626854522752874349899485114406297783295557107036876117867652619251674821437812453631273225060265495331547193553061434251008685801642827352912025914206332843653654783764365922363052960156261531895870820325385539715357857717581859720492249406745633340413738195311484576498693837120200005473728093267066686169596745103785788353530031437033605816003998420924348482881043069713055847152990579272841405774403941206064661597490113712091850080699027400533125876250846131240510631044022958282153581197511357516536121281534593277939157512192846003603397468298666804953895853000728302586479305153157774947616775660531160296554852456413669940206421846912002317893318099578882149355414898935876021988481233579559771477665774063098614374168464355678244781228964933654958498780626551618661852964592037809816814954910302979783846735362102063234396615773291195688857765079994138387473502748942219466124016083638608804485934801855105910339474188769308833205743267805132986634831686236521192050337426759584864772484441303543818538205854362080922770332832274088537296427269801217918099188487152074225962553141069359308278758709246171208966961002607657192062010138080479340721009704764204411725247184334792322921584427384303107117935628953554527273071115080827552762591564525323653590154037041508417100495675500272588651385780384382174153271058936013717137701054705915656552559882744089022164356737765072398767438460816370742123855404290072806767097027067550309160672553037473245025647233478828916724823062098426748220678560899335986405174063440804300082728528361731939998713362106264036066742577108629611872090438715332350233788076672632146301672705136960430289008382657938764342143043001461698486387053045601251026113186963952828651204181569266223757448874361484278297836170658436965310359051367230340152328311348196071516984219828904725769001019065238008075602731976857750460400245645884829321992511434902126439448302089057129361953104643825154979357645252076824177671227184779131545595988750002144009175334861999967240400801228172647037070057284382200674811092187644957598290681047294968254601395127355289058726589459841739734698078962722003292423300147326333188019377349591613369280088196497344329849502704922517745007477860282945489557388388774291282580908302988340764366096572619860727765019906429615167525709167054651275589928446423228379476890162345496797820012209786094258449674452857645507790301)

###end:补丁后:分类冫再四泛化梅森数牜指数多数受限于五千牜指数生成子多数受限于一千
===
]]




]]]'''#'''
__all__ = r'''
枚举冫拟泛化梅森指数扌
枚举冫拟泛化梅森指数纟素基灬扌
枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌
再三再四泛化梅森数扌
泛化梅森数扌
枚举冫拟再四泛化梅森指数牜额外素数候选扌
枚举冫拟再四泛化梅森指数牜额外素数候选纟素基灬扌
'''.split()#'''
    #_过滤冫拟稠再泛化梅森指数巛输出乊文档扌
    #_过滤冫拟稠再三泛化梅森指数巛输出乊文档扌
    #_辅助冫整理输出牜再四版扌
    #_打补丁冫整理输出牜再四版扌
    #_蛮力分解冫小整数扌
    #_分类冫版本号纟再囜泛化梅森数扌
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from seed.math.factor_pint.factor_pint__naive_brute_force import factor_pint__naive_brute_force_
from seed.math.II import II, II_mod
from seed.math.prime_gens import prime_gen
from seed.math.prime_gens import is_strong_pseudoprime__basis_ as is_SPRP_, iter_pseudoprimes__ge_lt_, is_prime__le_pow2_81_
from seed.tiny_.check import check_type_is, check_int_ge
from seed.tiny import fst, print_err

from itertools import islice, count, groupby, chain
from math import isqrt, gcd
from ast import literal_eval
#.
#.from seed.abc.abc__ver1 import abstractmethod, override, ABC
#.from seed.helper.repr_input import repr_helper
___end_mark_of_excluded_global_names__0___ = ...

#.class __(ABC):
#.    __slots__ = ()
#.    ___no_slots_ok___ = True
#.    def __repr__(sf, /):
#.        return repr_helper(sf, *args, **kwargs)
#.if __name__ == "__main__":
#.    raise NotImplementedError

def _case4trial_division__none(n):
    '[case4trial_division=="none"] => n -> num_primes'
    return 0
def _case4trial_division__bit_length(n):
    '[case4trial_division=="bit_length"] => n -> num_primes'
    return n.bit_length()
def _mk__n2num_primes_(case4trial_division):
    if not callable(case4trial_division):
        check_type_is(str, case4trial_division)
        n2num_primes_ = globals()[f'_case4trial_division__{case4trial_division!s}']
    else:
        n2num_primes_ = case4trial_division
    n2num_primes_
    assert callable(n2num_primes_)
    return n2num_primes_
def 枚举冫拟泛化梅森指数扌(*, bases4SPRP, radix, may_end4exp=None, may_begin4exp=None, to_output_fails=False, case4trial_division='none', verbose=False, try_resting_=None):
  ''\
    '-> Iter exp # [is_prime_(exp)]'
  if 1:
    if try_resting_ is None:
        def try_resting_():pass

    check_type_is(bool, verbose)
    n2num_primes_ = _mk__n2num_primes_(case4trial_division)

    check_type_is(bool, to_output_fails)
    check_int_ge(2, radix)
    bases4SPRP = tuple(bases4SPRP)
    for base in bases4SPRP:
        check_int_ge(2, base)
    if not may_begin4exp is None:
        begin = may_begin4exp
        check_type_is(int, begin)
    else:
        begin = 2
    begin
    begin = max(2, begin)
    if not may_end4exp is None:
        max1_p = may_end4exp
        check_type_is(int, max1_p)
        def is_ok_(p, /):
            return p < max1_p
        is_ok_ = max1_p.__gt__
    else:
        def is_ok_(p, /):
            return True
    is_ok_
    if not is_ok_(begin):
        return
    __ = prime_gen.get_or_mk_lazy_prime_seq_()
    old_p = 0
  try:
    for p in prime_gen:
        if not is_ok_(p):
            break
        try_resting_()
        if p < begin:
            continue
        #n = (radix**p-1)//(radix-1)
        n = 泛化梅森数扌(radix, p)
        if radix%p == 1:
            # [radix%p==1]
            #   i.e. [b%ep==1]
            # !! [[b:<-[2..]] -> [e:<-[2..]] -> [b%e==1] -> [((b**e-1)///(b-1)) %e == 0]]
            if not (2 <= p < n and n%p == 0):raise Exception(radix, p)
            b_psprime = False
            if verbose:
                print_err(f'#[divisor=={p}]@', (radix, p))
        else:
            # [radix%p=!=1]
            #   i.e. [b%ep=!=1]
            # !! [is_prime_(p)]
            # => [[may_radix_ep is None]or[is_prime_(ep:=may_radix_ep[1])]]
            b_psprime = _detect_b_psprime(n2num_primes_, bases4SPRP, n, extra4debug=(radix, p), verbose=verbose, may_radix_ep=(radix, p))
        b_psprime
        if b_psprime:
            if verbose:
                print_err('#succ:', (radix, bases4SPRP, p))
            yield p
        else:
            if verbose:
                print_err('#fail:', (radix, bases4SPRP, -p))
            if to_output_fails:
                yield -p
        del b_psprime
        old_p = p
    old_p = 0
  finally:
    if old_p:
        print_err((radix, bases4SPRP, old_p))
            #to resume after KeyboardInterrupt via kw:may_begin4exp
#end-def 枚举冫拟泛化梅森指数扌(*, bases4SPRP, radix, may_end4exp=None, may_begin4exp=None, to_output_fails=False, case4trial_division='none'):

def _detect_b_psprime(n2num_primes_, bases4SPRP, n, /, *, extra4debug, verbose=False, may_radix_ep=None):
    # precondition:[[may_radix_ep is None]or[is_prime_(ep:=may_radix_ep[1])]]
    assert n >= 3, n
        # [(2**2-1)///(2-1) == 3]
    if not (n&1):
        #even
        # [(3**2-1)///(3-1) == 4]
        b_psprime = False
        #divisor = 2
        if verbose:
            print_err('#[divisor==2]@', (bases4SPRP, extra4debug))
    else:
        # [[may_radix_ep is None]or[is_prime_(ep:=may_radix_ep[1])]]
        tb_psprime = _try_div(n2num_primes_, n, verbose=verbose, extra4debug=(bases4SPRP, extra4debug), may_radix_ep=may_radix_ep)
        if tb_psprime is ...:
            _bases = _prepare__bases4SPRP(bases4SPRP, n, extra4debug=extra4debug)
            b_psprime = is_SPRP_(_bases, n)
        else:
            b_psprime = tb_psprime
        b_psprime
    b_psprime
    check_type_is(bool, b_psprime)
    return b_psprime
def _prepare__bases4SPRP(bases4SPRP, n, /, *, extra4debug):
    #_bases = [x for x in bases4SPRP if not x == n] if n in bases4SPRP else bases4SPRP
    _bases = {x%n for x in bases4SPRP}
    if 0 in _bases:
        if not n in bases4SPRP:
            #(radix, p, *???) = extra4debug
            #raise Exception(radix, bases4SPRP, p, n)
            raise Exception(bases4SPRP, n, extra4debug)
    _bases.discard(0)
    _bases.discard(1)
    _bases.discard(n-1)
        # [n==3][base==2==3-1]
    _bases = sorted(_bases)
    return _bases
def _try_div(n2num_primes_, n, /, verbose=False, extra4debug=None, may_radix_ep=None):
    '(n->num_primes) -> n -> tribool'
    # precondition:[[may_radix_ep is None]or[is_prime_(ep:=may_radix_ep[1])]]
    ######################
    if may_radix_ep is None:
        def is_ok_(d):
            return True
    else:
        (radix, ep) = may_radix_ep
        # [is_prime_(ep)]
        def is_ok_(d):
            # precondition:[is_prime_(d)]
            # !! [@[ep,dp::prime] -> @[b::int] -> [b%dp=!=1] -> [dp%ep=!=1] -> [(b**ep-1)%dp =!= 0]]
            # !! [is_prime_(ep)]
            # !! [is_prime_(d)]
            return d%ep == 1 or radix > d
            return d%ep == 1 or radix%d == 1
    is_ok_ # [is_ok_(d) =[def]= (may_radix_ep is None or d%ep==1 or radix>d)]
    ######################
    num_primes = n2num_primes_(n)
    # qs = prime_gen[:num_primes]
    m = isqrt(n)
    tb_psprime = ...
    for d in islice(iter(prime_gen), 0, num_primes):
        # [is_prime_(d)]
        if d > m:
            # [d > m == floor_sqrt(n)]
            # [d**2 > n]
            # [is_prime_(n)]
            tb_psprime = True
            break
        #if n%d == 0:
        #if (may_radix_ep is None or d%ep==1 or radix>d) and n%d == 0:
        if is_ok_(d) and n%d == 0:
            if verbose:
                print_err(f'#[divisor=={d}]@', extra4debug)
            tb_psprime = False
            break
    tb_psprime
    return tb_psprime

def 枚举冫拟泛化梅森指数纟素基灬扌(*, bases4SPRP, begin4radix, end4radix, begin4exp, end4exp, case4trial_division='none'):
    '-> Iter (radix, [exp]) # [is_prime_(radix)][is_prime_(exp)]'
    n2num_primes_ = _mk__n2num_primes_(case4trial_division)
    check_int_ge(2, begin4radix)
    check_int_ge(2, begin4exp)
    check_int_ge(2, end4radix)
    check_int_ge(2, end4exp)
    assert end4radix < 2**81
    __ = prime_gen.get_or_mk_lazy_prime_seq_()
    for radix in iter_pseudoprimes__ge_lt_(begin4radix, end4radix):
        # [is_prime_(radix)]
        es = list(枚举冫拟泛化梅森指数扌(bases4SPRP=bases4SPRP, radix=radix, may_begin4exp=begin4exp, may_end4exp=end4exp, case4trial_division=n2num_primes_))
        yield (radix, es)
#end-def 枚举冫拟泛化梅森指数纟素基灬扌(*, bases4SPRP, begin4radix, end4radix, begin4exp, end4exp, case4trial_division='none'):
def 枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌(*, num_exps_per_radix, bases4SPRP, radix2begin4exp, may_end4exp=None, case4trial_division='none', verbose=False, try_resting_=None):
    '-> Iter (radix, [exp]{len=num_exps_per_radix}) # [is_prime_(exp)]'
    if try_resting_ is None:
        def try_resting_():pass

    check_type_is(bool, verbose)
    n2num_primes_ = _mk__n2num_primes_(case4trial_division)
    check_int_ge(1, num_exps_per_radix)
    radix2begin4exp = dict(radix2begin4exp)
    for radix, begin4exp in radix2begin4exp.items():
        check_int_ge(2, radix)
        check_int_ge(2, begin4exp)
    __ = prime_gen.get_or_mk_lazy_prime_seq_()
    for radix, begin4exp in sorted(radix2begin4exp.items()):
        if verbose:
            print_err('#start:', (radix, begin4exp))
        # may not [is_prime_(radix)]
        es = list(islice(枚举冫拟泛化梅森指数扌(bases4SPRP=bases4SPRP, radix=radix, may_begin4exp=begin4exp, may_end4exp=may_end4exp, case4trial_division=n2num_primes_, verbose=verbose, try_resting_=try_resting_), 0, num_exps_per_radix))
        if verbose:
            print_err('#finish:', (radix, begin4exp), (radix, es))
        yield (radix, es)
#end-def 枚举冫拟泛化梅森指数纟素基灬牜输出指定数量每基扌(*, bases4SPRP, radix2begin4exp, num_exps_per_radix=1, case4trial_division='none', verbose=False):

def _iter_apply_case4trial_division_to_outputs(*, case4trial_division, marker='output_1000x1000', _doc = __doc__):
    '-> Iter (radix, p){fails@case4trial_division}'
    n2num_primes_ = _mk__n2num_primes_(case4trial_division)
    outputs = _iter_outputs5doc(marker=marker, _doc=_doc)
    __ = prime_gen.get_or_mk_lazy_prime_seq_()
    for (radix, es, *_extras) in outputs:
      for p in es:
        n = (radix**p-1)//(radix-1)
        assert n >= 3, n
        assert n & 1, n
        # !! [is_prime_(p)]
        # => [[may_radix_ep is None]or[is_prime_(ep:=may_radix_ep[1])]]
        tb_psprime = _try_div(n2num_primes_, n, may_radix_ep=(radix, p))
        if tb_psprime is False:
            yield (radix, p)
def _iter_outputs5doc(*, marker='output_1000x1000', _doc=__doc__):
    #output_1000x1000:goto
    #updated_output__ver2:goto
    check_type_is(str, marker)
    begin_marker = f'###begin:{marker!s}'
    end_marker = f'###end:{marker!s}'
    i = _doc.index(begin_marker) + len(begin_marker)+1
    j = _doc.index(end_marker, i) -1
    s = _doc[i:j]
    for line in s.split('\n'):
        if not line or line[0] in ' >.#':
            continue
        assert line[0] == '(' # ')'
        yield literal_eval(line)
def _sorted_outputs5doc__by_radix(*, marker='output_1000x1000', _doc = __doc__):
    #mainly for:updated_output__ver2
    #   !! output_1000x1000 were sorted
    '-> [(radix, exps, *_extras/tmay_max1_exp)]{sorted by radix}'
    outputs = _iter_outputs5doc(marker=marker, _doc=_doc)
    return sorted(outputs)
    return sorted(outputs, key=lambda pair:pair[0])

def _sorted_outputs5doc__by_len_exps(*, marker='output_1000x1000', _doc = __doc__):
    '-> [(radix, exps, *_extras/tmay_max1_exp)]{sorted by len(exps)}'
    outputs = _iter_outputs5doc(marker=marker, _doc=_doc)
    return sorted(outputs, key=lambda pair:len(pair[1]))
    ls = [(len(es), radix, es) for (radix, es) in outputs]
    ls.sort()
def _过滤冫拟稠再泛化梅森指数巛输出乊文档扌(*, bases4SPRP, case4trial_division, k0=0, to_output_fails=False, marker='output_1000x1000', _doc = __doc__, verbose=False, try_resting_=None):
    '-> Iter (radix, p, k){[p<-拟稠再泛化梅森指数(k,radix;bases)]}'
    if try_resting_ is None:
        def try_resting_():pass

    check_type_is(bool, verbose)
    check_int_ge(0, k0)
    n2num_primes_ = _mk__n2num_primes_(case4trial_division)
    #outputs = _iter_outputs5doc(marker=marker, _doc=_doc)
    outputs = _sorted_outputs5doc__by_radix(marker=marker, _doc=_doc)
    __ = prime_gen.get_or_mk_lazy_prime_seq_()
    for (radix, es, *_extras) in outputs:
     for p in es:
      if 1:
        B_p_k = radix**p**k0
        # [B_p_k == radix**p**k0]
      for k in count(k0):
        # [B_p_k == radix**p**k]
        try_resting_()
        if verbose:
            print_err('#testing:', (radix, p, k))
        B_p_k1 = B_p_k**p
        # [B_p_k1 == radix**p**(k+1)]
        ######################
        #n = (radix**p**(k+1)-1)//(radix**p**k-1)
        n = (B_p_k1-1)//(B_p_k-1)
        ######################
        b_psprime = _detect_b_psprime(n2num_primes_, bases4SPRP, n, extra4debug=(radix, p, k))
        if b_psprime:
            yield (radix, p, k)
        else:
            if to_output_fails:
                yield (radix, -p, -k)
            break
        ######################
        #next round:
        B_p_k = B_p_k1
        # [B_p_k == radix**p**(k+1)]
        ######################
#end-def _过滤冫拟稠再泛化梅森指数巛输出乊文档扌(*, bases4SPRP, case4trial_division, k0=0, to_output_fails=False, marker='output_1000x1000', _doc = __doc__):
def _过滤冫拟稠再三泛化梅森指数巛输出乊文档扌(*, bases4SPRP, case4trial_division, to_output_fails=False, marker='output_1000x1000', _doc = __doc__, verbose=False, 再三丷再四=False, try_resting_=None, excluded_radixes=(), radix2begin4exp_and_skipped_exps={}, may_end4exp=None, begin4radix=2):
    '-> Iter (radix, e){[e<-拟稠再三泛化梅森指数(radix;bases)]}'
    from seed.math.semi_factor_pint_via_trial_division import semi_factor_pint_via_trial_division
    #from seed.for_libs.for_heapq import heappushs_, heappops_, heappop_eqvs_, heapify, heappush, heappop, heap_remove_at, heap_fix_at__after_key_smaller, heap_fix_at__after_key_bigger, heappushpop, heappoppush, heapreplace
    from seed.for_libs.for_heapq import Heap, std____key__le__reverse_
        #def __init__(sf, heap, /, *, item5obj_, item2val_, key, __le__, reverse, obj_vs_item, applied__heapify, set_idx4item_=None):

    check_int_ge(0, begin4radix)

    if may_end4exp is None:
        end4exp = float('inf')
    else:
        end4exp = may_end4exp
        check_int_ge(0, end4exp)
    end4exp # :: (inf|uint)

    if try_resting_ is None:
        def try_resting_():pass

    check_type_is(bool, 再三丷再四)
    check_type_is(bool, verbose)
    n2num_primes_ = _mk__n2num_primes_(case4trial_division)
    #outputs = _iter_outputs5doc(marker=marker, _doc=_doc)
    outputs = _sorted_outputs5doc__by_radix(marker=marker, _doc=_doc)
    __ = prime_gen.get_or_mk_lazy_prime_seq_()
    for (radix, es, *_extras) in outputs:
        try_resting_()
        if radix < begin4radix or radix in excluded_radixes:
            if verbose:
                print_err('#skip-radix:', (radix, es))
            continue
        (begin4exp, skipped_exps) = radix2begin4exp_and_skipped_exps.get(radix, (2, ''))
        if not begin4exp < end4exp:
            if verbose:
                print_err('#break:', (radix, es), (begin4exp, end4exp))
            continue
        if verbose:
            print_err('#start:', (radix, es))
        hp = Heap([(ep, ep, 1) for ep in es], item5obj_=None, item2val_=None, key=fst, __le__=None, reverse=False, obj_vs_item=False, applied__heapify=False)
            # :: [(e, ep, e///ep)]
            # :: [(new_e, ep, old_e)]
        #hp.heappushs_(es)
        def puts_(hp, old_e, /):
            hp.heappushs_((old_e*ep, ep, old_e) for ep in es)
        for skipped_e in skipped_exps:
            puts_(hp, old_e:=skipped_e)
        while hp:
            try_resting_()
            ts = hp.heappop_eqvs_()
            L = len(ts)
            (new_e, ep, old_e) = ts[0]
            if new_e < begin4exp:
                if verbose:
                    print_err('#skip:', (radix, es), ts)
                continue
            if not new_e < end4exp:
                if verbose:
                    print_err('#break:', (radix, es), ts)
                break
            if verbose:
                print_err('#testing:', (radix, es), ts)
            if old_e == 1:
                assert L == 1
                assert ts == [(ep, ep, 1)]
                b_psprime = True
                ep_c_pairs = [(ep, 1)]
            else:
                (ep2c, unfactored_part) = semi_factor_pint_via_trial_division(_es:=[ep for (new_e, ep, old_e) in ts], new_e)
                assert len(ep2c) == L or skipped_exps
                if not unfactored_part == 1:
                    # 非:稠#拟稠再三泛化梅森指数
                    #即:前置条件不成立:某极大因子非稠
                    #bug:assert len(ep2c) < L, (L, ep2c, ts, hp.heap)
                    #   !! 某极大因子非稠 => 未出现在ts中 故而 相应素因子 累积到unfactored_part
                    continue
                #assert len(ep2c) == L or skipped_exps
                #_ns = ((radix**old_e - 1) for (new_e, ep, old_e) in ts)
                n = 再三再四泛化梅森数扌(radix, new_e, ep2c, 再三丷再四=再三丷再四)
                # 再三:[n == n0///gcd(n0, II(_ns))]
                # 再四:[n == n0///gcd(n0, II(_ns)**+oo)]
                b_psprime = (n==1) or _detect_b_psprime(n2num_primes_, bases4SPRP, n, extra4debug=(radix, new_e, ep2c))
                if b_psprime:
                    ep_c_pairs = sorted(ep2c.items())
            b_psprime
            if not b_psprime:
                del b_psprime
                if verbose:
                    print_err('###fail:', (radix, es), new_e)
                continue
            ep_c_pairs
            if verbose:
                print_err('###succ:', (radix, es), new_e, ep_c_pairs)
            yield (radix, new_e, ep_c_pairs)
            del b_psprime, ep_c_pairs
            puts_(hp, old_e:=new_e)
            continue
        #end-while hp:
#end-def _过滤冫拟稠再三泛化梅森指数巛输出乊文档扌(*, bases4SPRP, case4trial_division, to_output_fails=False, marker='output_1000x1000', _doc = __doc__, verbose=False):
def 再三再四泛化梅森数扌(radix, e, ep2c, /, *, 再三丷再四):
    'radix/{int>=2} -> exp/{int>=2} -> ep2c/{ep:c}/factorization{exp} -> (再三泛化梅森数(radix, exp) if not 再三丷再四 else 再四泛化梅森数(radix, exp))'
    new_e = e
    #_ns = ((radix**old_e - 1) for (new_e, ep, old_e) in ts)
    _ns = ((radix**(new_e//ep) - 1) for ep in ep2c)
    n0 = (radix**new_e - 1)
    _n = II_mod(n0, _ns)
    if 再三丷再四:
        #再四
        n = n0
        g = _n
        while 1:
            g = pow(g, 16, n)
            g = gcd(n, g)
            if g == 1:
                break
            n //= g
        n#n4
    else:
        #再三
        n = n0
        n //= gcd(n0, _n)
        n#n3
    n
    # 再三:[n == n0///gcd(n0, II(_ns))]
    # 再四:[n == n0///gcd(n0, II(_ns)**+oo)]
    return n
#end-def 再三再四泛化梅森数扌(radix, new_e, ep2c, /):
def 泛化梅森数扌(radix, ep, /):
    'radix/{int>=2} -> ep/prime -> 泛化梅森数(radix, ep)'
    n = (radix**ep-1)//(radix-1)
    return n


def _辅助冫整理输出牜再四版扌(*, radix2max1_prime_generator_exp, radix2max1_exp, default_max1_exp=5000, marker='输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千', _doc=__doc__, radixes4empty_exps=None, default_max1_prime_generator_exp=1000, default_max1_prime_generator_exp4radixes4empty_exps=2000):
    ######################
    kwds = dict(locals())
    if radixes4empty_exps:
        del kwds['radixes4empty_exps']
        yield from sorted(chain(_辅助冫整理输出牜再四版扌(**kwds), ((radix, [], radix2max1_exp.get(radix, default_max1_exp), radix2max1_prime_generator_exp.get(radix, default_max1_prime_generator_exp4radixes4empty_exps)) for radix in radixes4empty_exps)))
        return
    ######################
    assert not radixes4empty_exps

    outputs = _iter_outputs5doc(marker=marker, _doc=_doc)
    #for radix, exp, ep_c_pairs in outputs:
    for radix, it in groupby(outputs, key=fst):
        exps = [exp for radix, exp, ep_c_pairs in it]
        max1_exp = radix2max1_exp.get(radix, default_max1_exp)
        max1_prime_generator_exp = radix2max1_prime_generator_exp.get(radix, default_max1_prime_generator_exp)
        yield (radix, exps, max1_exp, max1_prime_generator_exp)

#vs:def 枚举冫拟泛化梅森指数扌(*, bases4SPRP, radix, may_end4exp=None, may_begin4exp=None, to_output_fails=False, case4trial_division='none'):
def 枚举冫拟再四泛化梅森指数牜额外素数候选扌(*, radix, may_end4exp=None, may_begin4exp=None, verbose=False, try_resting_=None, to_output_fails=False, may_bases4SPRP=None, may_case4trial_division=None):
  ''\
    '-> Iter exp # [is_prime_(exp)][再三再四泛化梅森数扌(radix, exp, {exp:1}, 再三丷再四=True) < 泛化梅森数扌(radix, exp)]'
  if 1:
    if may_bases4SPRP is None:
        if not may_case4trial_division is None:raise TypeError
        def test_(radix, e, n, /):
            return True
    else:
        if may_case4trial_division is None:raise TypeError
        case4trial_division = may_case4trial_division
        bases4SPRP = may_bases4SPRP
        bases4SPRP = tuple(bases4SPRP)
        n2num_primes_ = _mk__n2num_primes_(case4trial_division)
        def test_(radix, e, n, /):
            b_psprime = (n==1) or _detect_b_psprime(n2num_primes_, bases4SPRP, n, extra4debug=(radix, e))
            return b_psprime
    test_

    if try_resting_ is None:
        def try_resting_():pass

    check_type_is(bool, to_output_fails)
    check_type_is(bool, verbose)
    check_int_ge(2, radix)
    if not may_begin4exp is None:
        begin = may_begin4exp
        check_type_is(int, begin)
    else:
        begin = 2
    begin
    begin = max(2, begin)
    if not may_end4exp is None:
        max1_p = may_end4exp
        check_type_is(int, max1_p)
        def is_ok_(p, /):
            return p < max1_p
        is_ok_ = max1_p.__gt__
    else:
        def is_ok_(p, /):
            return True
    is_ok_
    if not is_ok_(begin):
        return
    __ = prime_gen.get_or_mk_lazy_prime_seq_()
    old_p = 0
  try:
    for p in prime_gen:
        if not is_ok_(p):
            break
        try_resting_()
        if p < begin:
            continue
        #n = (radix**p-1)//(radix-1)
        n1 = 泛化梅森数扌(radix, p)
        n4 = 再三再四泛化梅森数扌(radix, p, {p:1}, 再三丷再四=True)
        if (not n1 == n4):
            assert n1 > n4, (radix, p)
        if (not n1 == n4) and test_(radix, p, n4):
            if verbose:
                print_err('#succ:', (radix, p))
            yield (radix, p)
        else:
            if verbose:
                print_err('#fail:', (radix, -p))
            if to_output_fails:
                yield (radix, -p)
        old_p = p
    old_p = 0
  finally:
    if old_p:
        print_err((radix, old_p))
            #to resume after KeyboardInterrupt via kw:may_begin4exp
#end-def 枚举冫拟再四泛化梅森指数牜额外素数候选扌(*, radix, may_end4exp=None, may_begin4exp=None, verbose=False, try_resting_=None, to_output_fails=False):


#xxx:def 枚举冫拟再四泛化梅森指数牜额外素数候选扌(*, bases4SPRP, radix, may_end4exp=None, may_begin4exp=None, to_output_fails=False, case4trial_division='none', verbose=False, try_resting_=None):


#vs:def 枚举冫拟泛化梅森指数纟素基灬扌(*, bases4SPRP, begin4radix, end4radix, begin4exp, end4exp, case4trial_division='none'):
def 枚举冫拟再四泛化梅森指数牜额外素数候选纟素基灬扌(*, radixes, may_end4exp=None, may_begin4exp=None, verbose=False, try_resting_=None, composite_radix_ok=False, may_bases4SPRP=None, may_case4trial_division=None, nonempty_only=False):
    check_type_is(bool, nonempty_only)
    check_type_is(bool, composite_radix_ok)
    check_type_is(bool, verbose)
    for radix in radixes:
        if radix < 2 or not (composite_radix_ok or is_prime__le_pow2_81_(radix)):
            if verbose:
                print_err('#skip:', radix)
            continue
        it = 枚举冫拟再四泛化梅森指数牜额外素数候选扌(radix=radix, may_end4exp=may_end4exp, may_begin4exp=may_begin4exp, verbose=verbose, try_resting_=try_resting_, to_output_fails=False, may_bases4SPRP=may_bases4SPRP, may_case4trial_division=may_case4trial_division)
        #yield from it
        es = list(ep for radix, ep in it)
        if nonempty_only and not es:
            continue
        yield (radix, es)


#打补丁:
#   +再四泛化梅森数牜仅额外素指数牜指数受限于一千:goto
#   +整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千:goto
_过滤冫拟稠再三泛化梅森指数巛输出乊文档扌
_辅助冫整理输出牜再四版扌
枚举冫拟再四泛化梅森指数牜额外素数候选纟素基灬扌
def _打补丁冫整理输出牜再四版扌(*, case4trial_division, bases4SPRP, marker='整理输出牜再四版牜指数多数受限于五千牜指数生成子多数受限于一千', _doc=__doc__, verbose=False, try_resting_=None):
    再三丷再四 = True
    from seed.math.semi_factor_pint_via_trial_division import semi_factor_pint_via_trial_division

    check_type_is(bool, verbose)
    bases4SPRP = tuple(bases4SPRP)
    n2num_primes_ = _mk__n2num_primes_(case4trial_division)
    def test_(radix, e, gs):
        (ep2c, unfactored_part) = semi_factor_pint_via_trial_division(gs, e)
        assert unfactored_part == 1, (radix, e, gs, ep2c, unfactored_part)
        n = 再三再四泛化梅森数扌(radix, e, ep2c, 再三丷再四=再三丷再四)
        # 再四:[n == n0///gcd(n0, II(_ns)**+oo)]
        b_psprime = (n==1) or _detect_b_psprime(n2num_primes_, bases4SPRP, n, extra4debug=(radix, e, ep2c))
        return (b_psprime, ep2c)

    __ = prime_gen.get_or_mk_lazy_prime_seq_()
    outputs = _iter_outputs5doc(marker=marker, _doc=_doc)
    for (radix, exps, max1_exp, max1_prime_generator_exp) in outputs:
        [(bp, _more_ep_ls)] = 枚举冫拟再四泛化梅森指数牜额外素数候选纟素基灬扌(radixes=[radix], may_end4exp=max1_prime_generator_exp, may_begin4exp=2, verbose=False, try_resting_=try_resting_, composite_radix_ok=False, may_bases4SPRP=bases4SPRP, may_case4trial_division=case4trial_division, nonempty_only=False)
        assert bp == radix
        es = exps
        s = set(exps)
        def put(e):
            es.append(e)
            s.add(e)
            assert len(es) == len(s)
        if _more_ep_ls:
            gs = [e for e in exps if is_prime__le_pow2_81_(e)]
            gs += _more_ep_ls
        else:
            gs = None
        gs
        for ep in _more_ep_ls:
            assert not ep in s
            put(ep)
            for j in count(0):
                if j == len(es):
                    break
                e = ep*es[j]
                if not e < max1_exp:
                    # NOTE:es unsorted => "continue" instead of "break"
                    continue
                if e in s:
                    continue
                (b_psprime, ep2c) = test_(radix, e, gs)
                b_psprime
                if verbose:
                    print_err('###fail:' if not b_psprime else '###succ:', (radix, e, ep2c, ep, es[j]))
                if b_psprime:
                    put(e)
                    yield (radix, e, ep2c)
        es.sort()
        assert len(es) == len(s)
        yield (radix, exps:=es, max1_exp, max1_prime_generator_exp)

def _蛮力分解冫小整数扌(e, /):
    ep2c = factor_pint__naive_brute_force_(e)
    return ep2c
def _分类冫版本号纟再囜泛化梅森数扌(radix, e, may_ep2c, /, *, subcasing=False):
    ep2c = _蛮力分解冫小整数扌(e) if may_ep2c is None else may_ep2c
    n3 = 再三再四泛化梅森数扌(radix, e, ep2c, 再三丷再四=False)
    n4 = 再三再四泛化梅森数扌(radix, e, ep2c, 再三丷再四=True)
    if n4 < n3:
        case = 4#再四泛化梅森数牜非再三
    elif ep2c == {e:1}:
        # {ep==e:c==1}
        case = 1#泛化梅森数
    elif len(ep2c) == 1:
        # {ep<e:c>=2}
        case = 2#再泛化梅森数牜非平凡
    else:
        # {ep0:c0,ep1:c1,...}
        case = 3#再三泛化梅森数非再二
    case
    if case == 4:
        if ep2c == {e:1}:
            # {ep==e:c==1}
            sub_case = 1#再四vs泛化梅森数
        elif len(ep2c) == 1:
            # {ep<e:c>=2}
            sub_case = 2#再四vs再泛化梅森数牜非平凡
        else:
            # {ep0:c0,ep1:c1,...}
            sub_case = 3#再四vs再三泛化梅森数非再二
        sub_case
    if subcasing:
        if case==4:
            sub_case
            case = 10*case+sub_case
        case
    case
    return (case, ep2c, n4)


__all__
from script.辅助冫有限域本原根判定牜泛化梅森指数 import 枚举冫拟泛化梅森指数扌
from script.辅助冫有限域本原根判定牜泛化梅森指数 import *
