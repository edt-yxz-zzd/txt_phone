#__all__:goto
r'''[[[
e script/辅助冫幂方判定.py
view others/数学/有递增趋势的非递增序列.txt
view ../../python3_src/seed/math/factor_pint_as_pefect_power_.py
view ../../python3_src/seed/math/_data4factor_pint_as_pefect_power_.py

script.辅助冫幂方判定
py -m nn_ns.app.debug_cmd   script.辅助冫幂方判定 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.辅助冫幂方判定:__doc__ -ht # -ff -df

[[
TODO:
    ++arg:is_prime
    view ../../python3_src/seed/math/is_prime__via_complete_factorization_Nmm_.py
]]

[[
@20250104
源起:view ../../python3_src/seed/math/factor_pint_as_pefect_power_.py
    类似:平方剩余判定
    静态制表<p>: (n%p)是否是k次幂剩余
===
$ factor $[1+2*3*5*7]
211: 211
$ factor $[1+2*3*5*7*11]
2311: 2311
$ factor $[1+2*3*5*7*11*13]
30031: 59 509
$ factor $[1+2*3*5*7*11*13*17]
510511: 19 97 277
$ factor $[1+2*3*5*7*11*13*17*19]
9699691: 347 27953
$ factor $[1+2*3*5*7*11*13*17*19*23]223092871: 317 703763
$ factor $[1+2*3*5*7*11*13*17*19*23*29]
6469693231: 331 571 34231
$ factor $[1+2*3*5*7*11*13*17*19*23*29*31]
200560490131: 200560490131
$ factor $[1+2*3*5*7*11*13*17*19*23*29*31*37]
7420738134811: 181 60611 676421
$ factor $[1+2*3*5*7*11*13*17*19*23*29*31*37*41]
304250263527211: 61 450451 11072701
$ factor $[1+2*3*5*7*11*13*17*19*23*29*31*37*41*43]
13082761331670031: 167 78339888213593
$ factor $[1+2*3*5*7*11*13*17*19*23*29*31*37*41*43*47]
614889782588491411: 953 46727 13808181181
===
$ factor $[1+2*11]
23: 23
$ factor $[1+2*11*13]
287: 7 41
$ factor $[1+2*11*13*2]
573: 3 191
$ factor $[1+2*11*13*3]
859: 859
$ factor $[1+2*13]
27: 3 3 3
$ factor $[1+2*13*2]
53: 53
===
]]

[[
py_adhoc_call   script.辅助冫幂方判定   ,100:枚举冫顺次素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次素数整除扌
===
(2, 3, 1)
(3, 7, 2)
(5, 11, 2)
...
(521, 16673, 32)
(523, 5231, 10)
(541, 9739, 18)
===
]]
[[
py_adhoc_call   script.辅助冫幂方判定   ,100:枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌
===
(3, 7, 1)
(5, 11, 1)
(7, 29, 2)
(11, 23, 1)
(13, 53, 2)
(17, 103, 3)
(19, 191, 5)
(23, 47, 1)
(29, 59, 1)
(31, 311, 5)
(37, 149, 2)
(41, 83, 1)
(43, 173, 2)
(47, 283, 3)
(53, 107, 1)
(59, 709, 6)
(61, 367, 3)
(67, 269, 2)
(71, 569, 4)
(73, 293, 2)
(79, 317, 2)
(83, 167, 1)
(89, 179, 1)
(97, 389, 2)
(101, 607, 3)
(103, 619, 3)
(107, 643, 3)
(109, 1091, 5)
(113, 227, 1)
(127, 509, 2)
(131, 263, 1)
(137, 823, 3)
(139, 557, 2)
(149, 1193, 4)
(151, 907, 3)
(157, 1571, 5)
(163, 653, 2)
(167, 2339, 7)
(173, 347, 1)
(179, 359, 1)
(181, 1087, 3)
(191, 383, 1)
(193, 773, 2)
(197, 3547, 9)
(199, 797, 2)
(211, 2111, 5)
(223, 2677, 6)
(227, 5449, 12)
(229, 2749, 6)
(233, 467, 1)
(239, 479, 1)
(241, 1447, 3)
(251, 503, 1)
(257, 1543, 3)
(263, 1579, 3)
(269, 2153, 4)
(271, 1627, 3)
(277, 1109, 2)
(281, 563, 1)
(283, 1699, 3)
(293, 587, 1)
(307, 1229, 2)
(311, 1867, 3)
(313, 1879, 3)
(317, 8243, 13)
(331, 1987, 3)
(337, 3371, 5)
(347, 2083, 3)
(349, 3491, 5)
(353, 4943, 7)
(359, 719, 1)
(367, 2203, 3)
(373, 1493, 2)
(379, 4549, 6)
(383, 4597, 6)
(389, 9337, 12)
(397, 2383, 3)
(401, 3209, 4)
(409, 1637, 2)
(419, 839, 1)
(421, 4211, 5)
(431, 863, 1)
(433, 1733, 2)
(439, 4391, 5)
(443, 887, 1)
(449, 3593, 4)
(457, 13711, 15)
(461, 2767, 3)
(463, 5557, 6)
(467, 2803, 3)
(479, 3833, 4)
(487, 1949, 2)
(491, 983, 1)
(499, 1997, 2)
(503, 3019, 3)
(509, 1019, 1)
(521, 16673, 16)
(523, 5231, 5)
(541, 9739, 9)
(547, 5471, 5)
===
]]


view others/数学/有递增趋势的非递增序列.txt
>>> from itertools import islice
>>> from seed.tiny import at
>>> [*islice(map(at[2], 枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌()), 100)]
[1, 1, 2, 1, 2, 3, 5, 1, 1, 5, 2, 1, 2, 3, 1, 6, 3, 2, 4, 2, 2, 1, 1, 2, 3, 3, 3, 5, 1, 2, 1, 3, 2, 4, 3, 5, 2, 7, 1, 1, 3, 1, 2, 9, 2, 5, 6, 12, 6, 1, 1, 3, 1, 3, 3, 4, 3, 2, 1, 3, 1, 2, 3, 3, 13, 3, 5, 3, 5, 7, 1, 3, 2, 6, 6, 12, 3, 4, 2, 1, 5, 1, 2, 5, 1, 4, 15, 3, 6, 3, 4, 2, 1, 2, 3, 1, 16, 5, 9, 5]

>>> [*islice(map(at[0], 枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌(7)), 100)]
[4, 6, 10, 16, 18, 28, 30, 34, 40, 48, 54, 60, 64, 66, 70, 78, 88, 90, 94, 96, 100, 106, 108, 118, 126, 130, 136, 138, 144, 150, 156, 166, 184, 186, 196, 204, 210, 214, 226, 228, 238, 244, 246, 268, 276, 286, 288, 298, 304, 306, 316, 324, 328, 330, 334, 340, 346, 348, 360, 364, 370, 376, 378, 384, 390, 400, 406, 408, 418, 424, 430, 438, 444, 448, 460, 474, 478, 480, 484, 504, 508, 510, 516, 528, 534, 538, 546, 550, 558, 574, 594, 600, 604, 606, 610, 618, 628, 640, 646, 660]


[[
def _考察冫阈值间素因子纟阈值以下规模纟素模乘法群扌(min4factor, max4factor, max4modulus, /):
    'min4factor -> max4factor -> max4modulus -> Iter (p, [modulus]){[p <- [min4factor..=max4factor]][is_prime(modulus)][modulus%p==1]}'
===
py_adhoc_call   script.辅助冫幂方判定   ,_考察冫阈值间素因子纟阈值以下规模纟素模乘法群扌  =2  =7  =100
(2, [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])
(3, [7, 13, 19, 31, 37, 43, 61, 67, 73, 79, 97])
(5, [11, 31, 41, 61, 71])
(7, [29, 43, 71])
===
py_adhoc_call   script.辅助冫幂方判定   ,_考察冫阈值间素因子纟阈值以下规模纟素模乘法群扌  =11  =47  =500 +acc
===
(11, [23, 67, 89, 199, 331, 353, 397, 419, 463])
(13, [53, 79, 131, 157, 313, 443])
(17, [103, 137, 239, 307, 409, 443])
(19, [191, 229, 419, 457])
(23, [47, 139, 277, 461])
(29, [59, 233, 349])
(31, [311, 373])
(37, [149, 223])
(41, [83])
(43, [173, 431])
(47, [283])
'**acc**'
(23, [11])
(47, [23])
(53, [13])
(59, [29])
(67, [11])
(79, [13])
(83, [41])
(89, [11])
(103, [17])
(131, [13])
(137, [17])
(139, [23])
(149, [37])
(157, [13])
(173, [43])
(191, [19])
(199, [11])
(223, [37])
(229, [19])
(233, [29])
(239, [17])
(277, [23])
(283, [47])
(307, [17])
(311, [31])
(313, [13])
(331, [11])
(349, [29])
(353, [11])
(373, [31])
(397, [11])
(409, [17])
(419, [11, 19])
(431, [43])
(443, [13, 17])
(457, [19])
(461, [23])
(463, [11])
===
py_adhoc_call   script.辅助冫幂方判定   ,_考察冫阈值间素因子纟阈值以下规模纟素模乘法群扌  =11  =101  =1024 +acc
===
(11, [23, 67, 89, 199, 331, 353, 397, 419, 463, 617, 661, 683, 727, 859, 881, 947, 991, 1013])
(13, [53, 79, 131, 157, 313, 443, 521, 547, 599, 677, 859, 911, 937])
(17, [103, 137, 239, 307, 409, 443, 613, 647, 919, 953, 1021])
(19, [191, 229, 419, 457, 571, 647, 761])
(23, [47, 139, 277, 461, 599, 691, 829, 967, 1013])
(29, [59, 233, 349, 523, 929])
(31, [311, 373, 683])
(37, [149, 223, 593])
(41, [83, 739, 821])
(43, [173, 431, 947])
(47, [283, 659, 941])
(53, [107, 743])
(59, [709, 827])
(61, [367, 733, 977])
(67, [269])
(71, [569, 853])
(73, [293, 439, 877])
(79, [317])
(83, [167, 499, 997])
(89, [179])
(97, [389, 971])
(101, [607, 809])
'**acc**'
(23, [11])
(47, [23])
(53, [13])
(59, [29])
(67, [11])
(79, [13])
(83, [41])
(89, [11])
(103, [17])
(107, [53])
(131, [13])
(137, [17])
(139, [23])
(149, [37])
(157, [13])
(167, [83])
(173, [43])
(179, [89])
(191, [19])
(199, [11])
(223, [37])
(229, [19])
(233, [29])
(239, [17])
(269, [67])
(277, [23])
(283, [47])
(293, [73])
(307, [17])
(311, [31])
(313, [13])
(317, [79])
(331, [11])
(349, [29])
(353, [11])
(367, [61])
(373, [31])
(389, [97])
(397, [11])
(409, [17])
(419, [11, 19])
(431, [43])
(439, [73])
(443, [13, 17])
(457, [19])
(461, [23])
(463, [11])
(499, [83])
(521, [13])
(523, [29])
(547, [13])
(569, [71])
(571, [19])
(593, [37])
(599, [13, 23])
(607, [101])
(613, [17])
(617, [11])
(647, [17, 19])
(659, [47])
(661, [11])
(677, [13])
(683, [11, 31])
(691, [23])
(709, [59])
(727, [11])
(733, [61])
(739, [41])
(743, [53])
(761, [19])
(809, [101])
(821, [41])
(827, [59])
(829, [23])
(853, [71])
(859, [11, 13])
(877, [73])
(881, [11])
(911, [13])
(919, [17])
(929, [29])
(937, [13])
(941, [47])
(947, [11, 43])
(953, [17])
(967, [23])
(971, [97])
(977, [61])
(991, [11])
(997, [83])
(1013, [11, 23])
(1021, [17])
===
以500为阈值:选中:
(2, [31, 43, 61])
(3, [31, 43, 61])
(5, [31, 61, 71])
(7, [29, 43, 71])
(11, [23, 67, 89, 419])
(13, [53, 79, 131, 443])
(17, [103, 137, 239, 443])
(19, [191, 229, 419])
(23, [47, 139, 277])
(29, [59, 233, 349])
(31, [311, 373])
(37, [149, 223])
(41, [83])
(43, [173, 431])
(47, [283])
(53, [107])
===
primes_le(29)
[(211, [2,3,5,7])
,(419, [11,19])
,(443, [13,17])
,(47, [23])
,(59, [29])
]
==>>:_main4mk_tbl__ver1()
==>>:_main4show_tbl__ver1()

]]

[[
py_adhoc_call   script.辅助冫幂方判定   @_main4show_tbl__ver1 +to_str_tbl -plain_vs_fancy
>>> _main4show_tbl__ver1(to_str_tbl=True, plain_vs_fancy=False)
N_ps4Nmm_pairs = (
[(211, [2, 3, 5, 7])
,(419, [11, 19])
,(443, [13, 17])
,(47, [23])
,(59, [29])
])
p4Nmm2N = (
{2: 211, 3: 211, 5: 211, 7: 211, 11: 419, 13: 443, 17: 443, 19: 419, 23: 47, 29: 59})
p4Nmm2tbl4N = (
{2
: '1100111001010110100111001100001000101100000111110101111110110010111001110100101111111001000001011001110101010100011001011111011000000010110100011000101100100000010100000111110010111011110011000110100101011000110'
,3
: '1100010010011100001000010101100000000000101000000000000100101001110110010000100100100011111000001110001010010100011100000111110001001001000010011011100101001000000000000101000000000001101010000100001110010010001'
,5
: '1100000000001011000000000010000111100010100100000010001000100001000100000100000000000000100000100000010000000010000001000001000000000000001000001000100001000100010000001001010001111000010000000000110100000000001'
,7
: '1100000000100011000101010000000000000000000000000000000100000100000000010010010000010000000000000000100010010001000000000000000010000010010010000000001000001000000000000000000000000000000010101000110001000000001'
,11
: '11000001000000000000000000000000000000001000000101000000000010000000000000001000000000000110000000000000000100000110000000000000000000011001000000000000000000000000000000010000000000000000000000000001000010001001000100001000000000000000000000000000100000000000000000000000000000001001100000000000000000000110000010000000000000000110000000000001000000000000000100000000001010000001000000000000000000000000000000001000001'
,13
: '11000000000001010010000000000000001000000000000000000000000100010001000001000000000000000000000000000000000000000000000100010000000000000000000000000000000000000000000001000100100000000000000000010000000000000100000000100000010000000010000000000000100000000000000000010010001000000000000000000000000000000000000000000000100010000000000000000000000000000000000000000000001000001000100010000000000000000000000001000000000000000100101000000000001'
,17
: '11000000000000000000000000000000000100100000000000000000100010000100000000000000000000010000000010000000100000000001000000000000000000000000000000000000000000000000000000000000000000001000100000000000000001000000000000000000000000000000001000000000000000010001000000000000000000000000000000000000000000000000000000000000000000001000000000010000000100000000100000000000000000000010000100010000000000000000010010000000000000000000000000000000001'
,19
: '11000000000001000000000000000000000000000000000000000000000100000000010100000000000001000000000000000010000000000000000100000000010000000000000000000000100000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000010000000000000000000000100000000010000000000000000100000000000000001000000000000010100000000010000000000000000000000000000000000000000000001000000000001'
,23
: '11000000000000000000000000000000000000000000001'
,29
: '11000000000000000000000000000000000000000000000000000000001'
})



N2p4Nmm2tbl = (
{47
  : {23
    : '11000000000000000000000000000000000000000000001'
  }
  ,59
  : {29
    : '11000000000000000000000000000000000000000000000000000000001'
  }
  ,211
  : {2
    : '1100111001010110100111001100001000101100000111110101111110110010111001110100101111111001000001011001110101010100011001011111011000000010110100011000101100100000010100000111110010111011110011000110100101011000110'
    ,3
    : '1100010010011100001000010101100000000000101000000000000100101001110110010000100100100011111000001110001010010100011100000111110001001001000010011011100101001000000000000101000000000001101010000100001110010010001'
    ,5
    : '1100000000001011000000000010000111100010100100000010001000100001000100000100000000000000100000100000010000000010000001000001000000000000001000001000100001000100010000001001010001111000010000000000110100000000001'
    ,7
    : '1100000000100011000101010000000000000000000000000000000100000100000000010010010000010000000000000000100010010001000000000000000010000010010010000000001000001000000000000000000000000000000010101000110001000000001'
  }
  ,419
  : {11
    : '11000001000000000000000000000000000000001000000101000000000010000000000000001000000000000110000000000000000100000110000000000000000000011001000000000000000000000000000000010000000000000000000000000001000010001001000100001000000000000000000000000000100000000000000000000000000000001001100000000000000000000110000010000000000000000110000000000001000000000000000100000000001010000001000000000000000000000000000000001000001'
    ,19
    : '11000000000001000000000000000000000000000000000000000000000100000000010100000000000001000000000000000010000000000000000100000000010000000000000000000000100000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000010000000000000000000000100000000010000000000000000100000000000000001000000000000010100000000010000000000000000000000000000000000000000000001000000000001'
  }
  ,443
  : {13
    : '11000000000001010010000000000000001000000000000000000000000100010001000001000000000000000000000000000000000000000000000100010000000000000000000000000000000000000000000001000100100000000000000000010000000000000100000000100000010000000010000000000000100000000000000000010010001000000000000000000000000000000000000000000000100010000000000000000000000000000000000000000000001000001000100010000000000000000000000001000000000000000100101000000000001'
    ,17
    : '11000000000000000000000000000000000100100000000000000000100010000100000000000000000000010000000010000000100000000001000000000000000000000000000000000000000000000000000000000000000000001000100000000000000001000000000000000000000000000000001000000000000000010001000000000000000000000000000000000000000000000000000000000000000000001000000000010000000100000000100000000000000000000010000100010000000000000000010010000000000000000000000000000000001'
  }
})

]]
[[
py_adhoc_call   script.辅助冫幂方判定   @_main4show_tbl__ver2 +to_str_tbl -plain_vs_fancy     >  /sdcard/0my_files/tmp/0tmp      2>&1
view /sdcard/0my_files/tmp/0tmp
>>> _main4show_tbl__ver2(to_str_tbl=True, plain_vs_fancy=False)
p4Nmm_Ns_pairs = (
[(2, [3, 5, 7, 11, 13])
,(3, [7, 13, 19])
,(5, [11, 31, 41])
,(7, [29, 43, 71])
,(11, [23, 67, 89])
,(13, [53, 79, 131])
,(17, [103, 137])
,(19, [191])
,(23, [47, 139])
,(29, [59])
,(31, [311])
,(37, [149])
,(41, [83])
,(43, [173])
,(47, [283])
,(53, [107])
])
p4Nmm2Ns = (
{2
: [3, 5, 7, 11, 13]
,3
: [7, 13, 19]
,5
: [11, 31, 41]
,7
: [29, 43, 71]
,11
: [23, 67, 89]
,13
: [53, 79, 131]
,17
: [103, 137]
,19
: [191]
,23
: [47, 139]
,29
: [59]
,31
: [311]
,37
: [149]
,41
: [83]
,43
: [173]
,47
: [283]
,53
: [107]
})
p4Nmm2II_Ns = (
{2
: 15015
,3
: 1729
,5
: 13981
,7
: 88537
,11
: 137149
,13
: 548497
,17
: 14111
,19
: 191
,23
: 6533
,29
: 59
,31
: 311
,37
: 149
,41
: 83
,43
: 173
,47
: 283
,53
: 107
})
p4Nmm2tbls = (
{2
  : ['110'
    ,'11001'
    ,'1110100'
    ,'11011100010'
    ,'1101100001101'
  ]
  ,3
  : ['1100001'
    ,'1100010010001'
    ,'1100000110011000001'
  ]
  ,5
  : ['11000000001'
    ,'1100011000000000000000000110001'
    ,'11010000010000100000000000010000100000101'
  ]
  ,7
  : ['11000000000010000100000000001'
    ,'1100001100000000000000000000000000001100001'
    ,'11000100000000100100000001000000000000000000001000000010010000000010001'
  ]
  ,11
  : ['11000000000000000000001'
    ,'1100000000000000000000000000011000000110000000000000000000000000001'
    ,'11000000000010000000000000000000001001000000000000001001000000000000000000000100000000001'
  ]
  ,13
  : ['11000000000000000000000100000010000000000000000000001'
    ,'1100000000000000000000011000000000000000000000000000000110000000000000000000001'
    ,'11000000000000000000000000000000000000000010000000000100001001000000001001000010000000000100000000000000000000000000000000000000001'
  ]
  ,17
  : ['1100000000000000000000000000000000000000000000110000000011000000000000000000000000000000000000000000001'
    ,'11000000001000000000000000000000000001000100000000000000000000000000000000000000000000000000000010001000000000000000000000000001000000001'
  ]
  ,19
  : ['11000001000000000000000000000000000000010000000001000000000000000000000000000000001000000000000000000000000001000000000000000000000000000000001000000000100000000000000000000000000000001000001'
  ]
  ,23
  : ['11000000000000000000000000000000000000000000001'
    ,'1100000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000001'
  ]
  ,29
  : ['11000000000000000000000000000000000000000000000000000000001'
  ]
  ,31
  : ['11000010000000000000000000000000000010000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000001000000000000000100000000000000000000000000000100001'
  ]
  ,37
  : ['11000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000001'
  ]
  ,41
  : ['11000000000000000000000000000000000000000000000000000000000000000000000000000000001'
  ]
  ,43
  : ['11000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000010000000000000000000000000000000000000000000000000000000000000000000000000000001'
  ]
  ,47
  : ['1100000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000001'
  ]
  ,53
  : ['11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
  ]
})



===
发现没必要保存整个表O(N)即O(prime_modulus)
    [N==1+d*p4Nmm]
    只有(1+d)即(1+((N-1)/p4Nmm))个 模幂方数
    当d足够小时，可直接保存 所有 模幂方数
    see:枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌
    see:_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌
]]

[[
def _考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌(min4factor, max4factor, max4scale, /):
    'min4factor -> max4factor -> max4scale -> may max_num_scales -> Iter (p, [scale]{len<=max_num_scales}){[p <- [min4factor..=max4factor]][scale <= max4scale][modulus := 1+scale*p][is_prime(modulus)]}'
===
py_adhoc_call   script.辅助冫幂方判定   ,_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌  =2  =101  =100 =3  | lineno
py_adhoc_call   script.辅助冫幂方判定   ,_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌  =2  =1024  =100 =3  | lineno
py_adhoc_call   script.辅助冫幂方判定   ,_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌  =2  =5000  =100 =3  | lineno
1:(2, [1, 2, 3])
2:(3, [2, 4, 6])
...
668:(4993, [4, 6, 16])
669:(4999, [4, 10, 18])
py_adhoc_call   script.辅助冫幂方判定   ,_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌  =2  =10000  =100 =3  | lineno
===
see:_ver3__p4Nmm_scales_pairs
py_adhoc_call   script.辅助冫幂方判定   ,_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌  =2  =10000  =100 =3    >  /sdcard/0my_files/tmp/0tmp      2>&1
===
>>> from seed.helper.stable_repr import stable_repr__expand_top_layer, stable_repr_print__expand_top_layer
>>> ls = [*_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌(2, 10000, 100, 3)]
>>> len(ls)
1229
>>> stable_repr_print__expand_top_layer(None, ls) # the only one less 3: (5869, [12, 22])
[(2, [1, 2, 3])
,(3, [2, 4, 6])
,(5, [2, 6, 8])
,(7, [4, 6, 10])
,(11, [2, 6, 8])
,(13, [4, 6, 10])
,(17, [6, 8, 14])
,(19, [10, 12, 22])
,(23, [2, 6, 12])
,(29, [2, 8, 12])
,(31, [10, 12, 22])
,(37, [4, 6, 16])
,(41, [2, 18, 20])
,(43, [4, 10, 22])
,(47, [6, 14, 20])
,(53, [2, 14, 20])
,(59, [12, 14, 18])
,(61, [6, 12, 16])
,(67, [4, 24, 28])
,(71, [8, 12, 18])
,(73, [4, 6, 12])
,(79, [4, 18, 28])
,(83, [2, 6, 12])
,(89, [2, 12, 24])
,(97, [4, 10, 16])
,(101, [6, 8, 12])
,(103, [6, 10, 12])
,(107, [6, 8, 14])
,(109, [10, 22, 24])
,(113, [2, 14, 24])
,(127, [4, 18, 24])
,(131, [2, 6, 8])
,(137, [6, 8, 18])
,(139, [4, 12, 18])
,(149, [8, 12, 14])
,(151, [6, 10, 16])
,(157, [10, 24, 28])
,(163, [4, 16, 36])
,(167, [14, 30, 44])
,(173, [2, 6, 14])
,(179, [2, 8, 20])
,(181, [6, 10, 16])
,(191, [2, 12, 20])
,(193, [4, 10, 16])
,(197, [18, 24, 38])
,(199, [4, 12, 18])
,(211, [10, 22, 42])
,(223, [12, 30, 34])
,(227, [24, 26, 38])
,(229, [12, 22, 30])
,(233, [2, 6, 12])
,(239, [2, 8, 14])
,(241, [6, 10, 18])
,(251, [2, 18, 20])
,(257, [6, 38, 54])
,(263, [6, 20, 42])
,(269, [8, 12, 14])
,(271, [6, 10, 12])
,(277, [4, 6, 18])
,(281, [2, 12, 18])
,(283, [6, 24, 34])
,(293, [2, 6, 12])
,(307, [4, 18, 24])
,(311, [6, 12, 20])
,(313, [6, 16, 30])
,(317, [26, 30, 48])
,(331, [6, 16, 22])
,(337, [10, 16, 18])
,(347, [6, 8, 18])
,(349, [10, 24, 34])
,(353, [14, 42, 90])
,(359, [2, 30, 32])
,(367, [6, 10, 18])
,(373, [4, 6, 42])
,(379, [12, 18, 28])
,(383, [12, 30, 36])
,(389, [24, 38, 42])
,(397, [6, 16, 28])
,(401, [8, 12, 18])
,(409, [4, 10, 12])
,(419, [2, 14, 38])
,(421, [10, 16, 28])
,(431, [2, 8, 18])
,(433, [4, 12, 34])
,(439, [10, 30, 42])
,(443, [2, 6, 14])
,(449, [8, 14, 32])
,(457, [30, 36, 46])
,(461, [6, 20, 26])
,(463, [12, 24, 40])
,(467, [6, 20, 26])
,(479, [8, 12, 18])
,(487, [4, 10, 16])
,(491, [2, 8, 18])
,(499, [4, 22, 40])
,(503, [6, 12, 14])
,(509, [2, 8, 14])
,(521, [32, 36, 62])
,(523, [10, 12, 16])
,(541, [18, 22, 28])
,(547, [10, 16, 30])
,(557, [6, 8, 44])
,(563, [14, 20, 24])
,(569, [12, 18, 42])
,(571, [10, 16, 46])
,(577, [4, 6, 36])
,(587, [14, 18, 26])
,(593, [2, 6, 30])
,(599, [8, 14, 20])
,(601, [6, 10, 12])
,(607, [6, 30, 34])
,(613, [10, 22, 24])
,(617, [8, 38, 50])
,(619, [4, 22, 28])
,(631, [10, 12, 22])
,(641, [2, 6, 20])
,(643, [12, 16, 34])
,(647, [14, 20, 26])
,(653, [2, 6, 26])
,(659, [2, 8, 14])
,(661, [6, 12, 22])
,(673, [4, 36, 40])
,(677, [8, 14, 24])
,(683, [2, 6, 42])
,(691, [10, 12, 16])
,(701, [18, 30, 32])
,(709, [4, 18, 28])
,(719, [2, 12, 14])
,(727, [4, 6, 16])
,(733, [10, 22, 30])
,(739, [4, 24, 28])
,(743, [2, 26, 30])
,(751, [6, 12, 30])
,(757, [16, 18, 24])
,(761, [2, 6, 8])
,(769, [10, 24, 30])
,(773, [6, 12, 20])
,(787, [6, 28, 34])
,(797, [6, 14, 18])
,(809, [2, 8, 18])
,(811, [10, 12, 28])
,(821, [8, 18, 20])
,(823, [10, 24, 30])
,(827, [14, 18, 26])
,(829, [10, 12, 18])
,(839, [12, 30, 32])
,(853, [4, 6, 16])
,(857, [8, 18, 26])
,(859, [22, 30, 34])
,(863, [6, 12, 32])
,(877, [16, 18, 34])
,(881, [18, 26, 30])
,(883, [4, 10, 12])
,(887, [6, 26, 48])
,(907, [6, 30, 34])
,(911, [2, 26, 32])
,(919, [4, 22, 28])
,(929, [8, 12, 14])
,(937, [6, 10, 28])
,(941, [6, 8, 32])
,(947, [6, 8, 14])
,(953, [2, 12, 30])
,(967, [16, 24, 28])
,(971, [6, 20, 26])
,(977, [8, 14, 20])
,(983, [14, 20, 24])
,(991, [18, 22, 28])
,(997, [4, 24, 28])
,(1009, [10, 12, 30])
,(1013, [2, 6, 12])
,(1019, [2, 32, 38])
,(1021, [10, 12, 18])
,(1031, [2, 12, 30])
,(1033, [4, 6, 10])
,(1039, [4, 10, 22])
,(1049, [2, 12, 20])
,(1051, [12, 18, 28])
,(1061, [6, 20, 36])
,(1063, [4, 6, 10])
,(1069, [10, 12, 24])
,(1087, [4, 16, 30])
,(1091, [6, 12, 20])
,(1093, [4, 16, 40])
,(1097, [14, 30, 38])
,(1103, [2, 6, 14])
,(1109, [12, 14, 18])
,(1117, [6, 10, 18])
,(1123, [4, 12, 24])
,(1129, [4, 18, 30])
,(1151, [6, 8, 18])
,(1153, [22, 24, 30])
,(1163, [32, 42, 50])
,(1171, [6, 22, 28])
,(1181, [12, 26, 38])
,(1187, [8, 14, 20])
,(1193, [6, 14, 26])
,(1201, [6, 10, 22])
,(1213, [12, 22, 34])
,(1217, [24, 26, 44])
,(1223, [2, 14, 26])
,(1229, [2, 8, 14])
,(1231, [16, 18, 28])
,(1237, [16, 36, 40])
,(1249, [10, 18, 22])
,(1259, [14, 32, 38])
,(1277, [20, 24, 26])
,(1279, [10, 12, 24])
,(1283, [6, 26, 32])
,(1289, [2, 8, 14])
,(1291, [10, 12, 22])
,(1297, [4, 16, 46])
,(1301, [20, 26, 68])
,(1303, [16, 40, 42])
,(1307, [8, 20, 38])
,(1319, [18, 24, 32])
,(1321, [6, 22, 30])
,(1327, [4, 6, 18])
,(1361, [6, 8, 12])
,(1367, [8, 14, 26])
,(1373, [12, 36, 42])
,(1381, [6, 12, 18])
,(1399, [18, 24, 48])
,(1409, [2, 8, 14])
,(1423, [4, 6, 12])
,(1427, [6, 14, 20])
,(1429, [4, 24, 28])
,(1433, [6, 14, 20])
,(1439, [2, 14, 18])
,(1447, [24, 30, 34])
,(1451, [2, 6, 18])
,(1453, [4, 6, 30])
,(1459, [10, 12, 18])
,(1471, [16, 18, 22])
,(1481, [2, 6, 48])
,(1483, [10, 24, 30])
,(1487, [6, 8, 20])
,(1489, [10, 34, 40])
,(1493, [14, 32, 56])
,(1499, [2, 12, 24])
,(1511, [2, 6, 12])
,(1523, [14, 30, 36])
,(1531, [6, 36, 42])
,(1543, [4, 12, 46])
,(1549, [4, 18, 30])
,(1553, [6, 12, 24])
,(1559, [2, 8, 20])
,(1567, [4, 6, 10])
,(1571, [8, 18, 26])
,(1579, [4, 10, 22])
,(1583, [2, 24, 30])
,(1597, [4, 10, 24])
,(1601, [2, 8, 12])
,(1607, [6, 18, 20])
,(1609, [10, 12, 28])
,(1613, [6, 20, 24])
,(1619, [8, 12, 20])
,(1621, [18, 28, 46])
,(1627, [18, 28, 36])
,(1637, [38, 48, 56])
,(1657, [16, 24, 30])
,(1663, [4, 10, 22])
,(1667, [8, 14, 24])
,(1669, [10, 12, 34])
,(1693, [6, 10, 52])
,(1697, [8, 20, 26])
,(1699, [12, 22, 30])
,(1709, [12, 18, 24])
,(1721, [20, 30, 32])
,(1723, [10, 22, 30])
,(1733, [2, 6, 24])
,(1741, [22, 52, 72])
,(1747, [10, 16, 34])
,(1753, [4, 22, 24])
,(1759, [18, 22, 28])
,(1777, [4, 6, 16])
,(1783, [12, 22, 24])
,(1787, [6, 30, 36])
,(1789, [10, 18, 22])
,(1801, [12, 16, 22])
,(1811, [2, 6, 8])
,(1823, [6, 14, 24])
,(1831, [6, 10, 16])
,(1847, [6, 18, 26])
,(1861, [40, 42, 46])
,(1867, [10, 16, 24])
,(1871, [8, 12, 18])
,(1873, [6, 10, 24])
,(1877, [8, 30, 38])
,(1879, [4, 12, 40])
,(1889, [2, 12, 20])
,(1901, [2, 36, 42])
,(1907, [6, 14, 18])
,(1913, [14, 20, 26])
,(1931, [2, 6, 12])
,(1933, [12, 30, 46])
,(1949, [18, 48, 68])
,(1951, [22, 28, 36])
,(1973, [2, 6, 12])
,(1979, [20, 24, 48])
,(1987, [4, 6, 16])
,(1993, [6, 12, 30])
,(1997, [44, 48, 54])
,(1999, [10, 18, 24])
,(2003, [2, 24, 30])
,(2011, [12, 30, 42])
,(2017, [4, 18, 24])
,(2027, [6, 8, 24])
,(2029, [4, 18, 28])
,(2039, [2, 12, 14])
,(2053, [46, 54, 70])
,(2063, [2, 6, 26])
,(2069, [2, 8, 18])
,(2081, [6, 8, 20])
,(2083, [16, 22, 24])
,(2087, [18, 36, 60])
,(2089, [22, 40, 42])
,(2099, [12, 14, 18])
,(2111, [8, 20, 30])
,(2113, [12, 16, 30])
,(2129, [2, 8, 50])
,(2131, [28, 36, 52])
,(2137, [6, 54, 60])
,(2141, [2, 12, 20])
,(2143, [4, 12, 22])
,(2153, [6, 24, 30])
,(2161, [6, 10, 12])
,(2179, [22, 30, 48])
,(2203, [6, 10, 12])
,(2207, [8, 18, 26])
,(2213, [12, 14, 24])
,(2221, [6, 16, 18])
,(2237, [14, 20, 44])
,(2239, [10, 40, 48])
,(2243, [32, 36, 42])
,(2251, [10, 16, 18])
,(2267, [20, 24, 26])
,(2269, [10, 22, 28])
,(2273, [2, 12, 42])
,(2281, [6, 10, 16])
,(2287, [6, 10, 28])
,(2293, [4, 6, 30])
,(2297, [14, 26, 66])
,(2309, [14, 20, 38])
,(2311, [12, 28, 46])
,(2333, [6, 12, 26])
,(2339, [2, 8, 12])
,(2341, [18, 22, 42])
,(2347, [6, 28, 48])
,(2351, [2, 6, 60])
,(2357, [6, 14, 24])
,(2371, [22, 40, 48])
,(2377, [18, 34, 58])
,(2381, [12, 18, 36])
,(2383, [4, 10, 12])
,(2389, [12, 18, 30])
,(2393, [2, 14, 26])
,(2399, [2, 12, 14])
,(2411, [8, 12, 18])
,(2417, [6, 20, 36])
,(2423, [12, 14, 24])
,(2437, [4, 10, 16])
,(2441, [20, 26, 36])
,(2447, [6, 8, 14])
,(2459, [2, 18, 30])
,(2467, [10, 24, 36])
,(2473, [16, 42, 46])
,(2477, [14, 18, 26])
,(2503, [10, 34, 70])
,(2521, [12, 28, 42])
,(2531, [6, 8, 30])
,(2539, [10, 12, 24])
,(2543, [2, 6, 12])
,(2549, [2, 8, 30])
,(2551, [6, 22, 28])
,(2557, [18, 28, 34])
,(2579, [12, 14, 20])
,(2591, [18, 30, 32])
,(2593, [6, 10, 22])
,(2609, [8, 14, 20])
,(2617, [10, 28, 30])
,(2621, [6, 26, 32])
,(2633, [36, 42, 44])
,(2647, [4, 30, 46])
,(2657, [14, 50, 56])
,(2659, [10, 28, 34])
,(2663, [12, 24, 26])
,(2671, [10, 16, 18])
,(2677, [4, 6, 18])
,(2683, [4, 16, 30])
,(2687, [14, 24, 30])
,(2689, [10, 22, 30])
,(2693, [2, 20, 24])
,(2699, [2, 32, 38])
,(2707, [16, 24, 28])
,(2711, [6, 12, 18])
,(2713, [4, 34, 42])
,(2719, [10, 24, 40])
,(2729, [12, 18, 20])
,(2731, [22, 30, 36])
,(2741, [2, 6, 8])
,(2749, [30, 40, 42])
,(2753, [2, 6, 12])
,(2767, [4, 6, 16])
,(2777, [20, 30, 38])
,(2789, [12, 14, 38])
,(2791, [6, 12, 16])
,(2797, [16, 24, 28])
,(2801, [8, 12, 32])
,(2803, [4, 10, 12])
,(2819, [2, 12, 38])
,(2833, [12, 16, 22])
,(2837, [8, 14, 48])
,(2843, [32, 44, 50])
,(2851, [6, 12, 22])
,(2857, [10, 18, 28])
,(2861, [6, 20, 30])
,(2879, [12, 30, 42])
,(2887, [4, 10, 48])
,(2897, [6, 14, 18])
,(2903, [2, 6, 20])
,(2909, [18, 32, 38])
,(2917, [24, 28, 30])
,(2927, [8, 24, 26])
,(2939, [2, 18, 24])
,(2953, [4, 10, 12])
,(2957, [14, 20, 24])
,(2963, [2, 36, 42])
,(2969, [2, 8, 24])
,(2971, [6, 18, 36])
,(2999, [8, 20, 38])
,(3001, [10, 12, 16])
,(3011, [32, 38, 50])
,(3019, [12, 28, 34])
,(3023, [2, 12, 14])
,(3037, [4, 6, 16])
,(3041, [8, 12, 20])
,(3049, [4, 10, 22])
,(3061, [6, 22, 42])
,(3067, [4, 10, 18])
,(3079, [24, 48, 70])
,(3083, [12, 36, 56])
,(3089, [18, 20, 30])
,(3109, [4, 10, 12])
,(3119, [8, 24, 32])
,(3121, [16, 18, 46])
,(3137, [8, 18, 24])
,(3163, [4, 6, 12])
,(3167, [36, 48, 50])
,(3169, [30, 34, 40])
,(3181, [6, 18, 28])
,(3187, [16, 18, 28])
,(3191, [30, 38, 56])
,(3203, [6, 14, 24])
,(3209, [8, 14, 24])
,(3217, [16, 34, 48])
,(3221, [12, 38, 42])
,(3229, [4, 12, 22])
,(3251, [6, 32, 36])
,(3253, [10, 34, 36])
,(3257, [6, 14, 20])
,(3259, [4, 22, 28])
,(3271, [22, 36, 40])
,(3299, [2, 8, 14])
,(3301, [16, 18, 22])
,(3307, [4, 6, 10])
,(3313, [30, 34, 54])
,(3319, [10, 12, 18])
,(3323, [12, 14, 26])
,(3329, [2, 8, 30])
,(3331, [10, 40, 66])
,(3343, [22, 24, 30])
,(3347, [8, 24, 30])
,(3359, [2, 20, 38])
,(3361, [16, 22, 28])
,(3371, [18, 20, 32])
,(3373, [24, 40, 42])
,(3389, [2, 60, 68])
,(3391, [6, 10, 12])
,(3407, [6, 14, 20])
,(3413, [2, 6, 20])
,(3433, [6, 22, 24])
,(3449, [2, 12, 30])
,(3457, [4, 6, 16])
,(3461, [8, 18, 20])
,(3463, [10, 36, 52])
,(3467, [8, 14, 20])
,(3469, [4, 24, 58])
,(3491, [2, 6, 12])
,(3499, [4, 18, 28])
,(3511, [6, 10, 18])
,(3517, [10, 36, 40])
,(3527, [6, 18, 24])
,(3529, [10, 12, 24])
,(3533, [12, 14, 24])
,(3539, [2, 14, 18])
,(3541, [6, 28, 42])
,(3547, [6, 28, 30])
,(3557, [24, 36, 56])
,(3559, [10, 12, 18])
,(3571, [12, 18, 28])
,(3581, [6, 8, 32])
,(3583, [6, 10, 16])
,(3593, [2, 6, 12])
,(3607, [16, 18, 30])
,(3613, [10, 16, 36])
,(3617, [20, 38, 48])
,(3623, [2, 6, 14])
,(3631, [6, 12, 48])
,(3637, [4, 16, 28])
,(3643, [6, 12, 22])
,(3659, [20, 44, 48])
,(3671, [6, 12, 20])
,(3673, [6, 36, 40])
,(3677, [6, 14, 26])
,(3691, [6, 12, 22])
,(3697, [24, 40, 46])
,(3701, [20, 30, 38])
,(3709, [18, 24, 30])
,(3719, [8, 14, 18])
,(3727, [24, 34, 48])
,(3733, [12, 16, 34])
,(3739, [4, 28, 40])
,(3761, [2, 6, 8])
,(3767, [8, 18, 26])
,(3769, [4, 10, 18])
,(3779, [2, 18, 24])
,(3793, [4, 16, 24])
,(3797, [6, 20, 24])
,(3803, [2, 32, 56])
,(3821, [2, 12, 20])
,(3823, [10, 16, 24])
,(3833, [60, 66, 86])
,(3847, [16, 18, 28])
,(3851, [2, 8, 36])
,(3853, [4, 12, 46])
,(3863, [2, 14, 20])
,(3877, [28, 40, 48])
,(3881, [12, 18, 20])
,(3889, [10, 18, 24])
,(3907, [4, 18, 28])
,(3911, [2, 12, 30])
,(3917, [8, 18, 20])
,(3919, [10, 24, 30])
,(3923, [6, 24, 26])
,(3929, [12, 44, 54])
,(3931, [16, 28, 42])
,(3943, [4, 12, 40])
,(3947, [14, 20, 30])
,(3967, [10, 16, 54])
,(3989, [12, 24, 30])
,(4001, [6, 8, 18])
,(4003, [6, 10, 30])
,(4007, [6, 8, 14])
,(4013, [12, 30, 44])
,(4019, [2, 14, 24])
,(4021, [18, 22, 28])
,(4027, [16, 28, 30])
,(4049, [12, 14, 18])
,(4051, [16, 22, 30])
,(4057, [4, 24, 30])
,(4073, [2, 6, 26])
,(4079, [8, 14, 38])
,(4091, [6, 26, 42])
,(4093, [12, 52, 84])
,(4099, [18, 24, 28])
,(4111, [12, 16, 18])
,(4127, [6, 18, 36])
,(4129, [12, 18, 28])
,(4133, [6, 12, 32])
,(4139, [8, 12, 14])
,(4153, [6, 16, 22])
,(4157, [6, 14, 18])
,(4159, [22, 24, 30])
,(4177, [10, 30, 34])
,(4201, [16, 18, 30])
,(4211, [2, 20, 32])
,(4217, [6, 24, 36])
,(4219, [40, 52, 54])
,(4229, [14, 18, 32])
,(4231, [12, 18, 22])
,(4241, [6, 12, 38])
,(4243, [24, 30, 42])
,(4253, [20, 30, 42])
,(4259, [12, 14, 24])
,(4261, [10, 12, 40])
,(4271, [2, 36, 42])
,(4273, [4, 6, 22])
,(4283, [20, 24, 56])
,(4289, [8, 20, 50])
,(4297, [4, 18, 34])
,(4327, [10, 16, 28])
,(4337, [14, 24, 44])
,(4339, [10, 12, 28])
,(4349, [2, 12, 14])
,(4357, [18, 28, 34])
,(4363, [16, 22, 42])
,(4373, [2, 14, 24])
,(4391, [2, 6, 8])
,(4397, [14, 18, 24])
,(4409, [2, 24, 38])
,(4421, [18, 30, 36])
,(4423, [6, 12, 16])
,(4441, [6, 18, 28])
,(4447, [4, 6, 16])
,(4451, [20, 26, 32])
,(4457, [26, 30, 36])
,(4463, [14, 20, 36])
,(4481, [2, 12, 26])
,(4483, [22, 34, 40])
,(4493, [6, 12, 14])
,(4507, [6, 30, 40])
,(4513, [10, 30, 34])
,(4517, [6, 8, 18])
,(4519, [4, 10, 18])
,(4523, [12, 24, 32])
,(4547, [6, 14, 18])
,(4549, [10, 18, 28])
,(4561, [6, 16, 22])
,(4567, [4, 18, 24])
,(4583, [26, 30, 44])
,(4591, [28, 46, 48])
,(4597, [6, 10, 16])
,(4603, [4, 22, 36])
,(4621, [22, 36, 42])
,(4637, [6, 8, 14])
,(4639, [22, 24, 28])
,(4643, [12, 14, 20])
,(4649, [24, 42, 44])
,(4651, [10, 12, 18])
,(4657, [6, 60, 64])
,(4663, [16, 22, 24])
,(4673, [14, 24, 30])
,(4679, [12, 18, 20])
,(4691, [8, 26, 30])
,(4703, [6, 12, 14])
,(4721, [18, 20, 36])
,(4723, [34, 36, 54])
,(4729, [4, 24, 30])
,(4733, [2, 26, 30])
,(4751, [20, 26, 38])
,(4759, [4, 10, 24])
,(4783, [12, 22, 34])
,(4787, [6, 24, 48])
,(4789, [4, 22, 28])
,(4793, [2, 6, 14])
,(4799, [8, 14, 30])
,(4801, [6, 30, 48])
,(4813, [6, 10, 24])
,(4817, [26, 30, 38])
,(4831, [10, 12, 18])
,(4861, [6, 10, 42])
,(4871, [2, 12, 18])
,(4877, [14, 36, 38])
,(4889, [8, 14, 18])
,(4903, [10, 22, 24])
,(4909, [12, 22, 28])
,(4919, [2, 12, 24])
,(4931, [6, 20, 32])
,(4933, [6, 10, 12])
,(4937, [14, 18, 44])
,(4943, [2, 14, 24])
,(4951, [18, 22, 28])
,(4957, [18, 28, 30])
,(4967, [6, 14, 30])
,(4969, [12, 18, 28])
,(4973, [14, 36, 56])
,(4987, [4, 10, 18])
,(4993, [4, 6, 16])
,(4999, [4, 10, 18])
,(5003, [2, 12, 26])
,(5009, [18, 48, 50])
,(5011, [10, 12, 16])
,(5021, [8, 18, 26])
,(5023, [6, 10, 16])
,(5039, [2, 18, 24])
,(5051, [2, 6, 20])
,(5059, [10, 28, 30])
,(5077, [16, 18, 28])
,(5081, [2, 18, 32])
,(5087, [8, 20, 26])
,(5099, [14, 32, 38])
,(5101, [22, 36, 42])
,(5107, [6, 10, 60])
,(5113, [10, 12, 40])
,(5119, [4, 18, 28])
,(5147, [8, 18, 50])
,(5153, [12, 26, 30])
,(5167, [36, 46, 60])
,(5171, [2, 12, 20])
,(5179, [4, 24, 30])
,(5189, [8, 14, 30])
,(5197, [4, 6, 10])
,(5209, [18, 22, 24])
,(5227, [76, 78, 94])
,(5231, [2, 6, 8])
,(5233, [22, 36, 42])
,(5237, [8, 26, 36])
,(5261, [6, 8, 30])
,(5273, [12, 14, 32])
,(5279, [2, 14, 30])
,(5281, [6, 40, 46])
,(5297, [14, 26, 38])
,(5303, [2, 36, 50])
,(5309, [8, 12, 20])
,(5323, [10, 46, 70])
,(5333, [2, 12, 20])
,(5347, [6, 28, 40])
,(5351, [20, 32, 36])
,(5381, [8, 20, 26])
,(5387, [6, 20, 24])
,(5393, [6, 12, 14])
,(5399, [2, 20, 30])
,(5407, [6, 18, 24])
,(5413, [6, 22, 30])
,(5417, [6, 38, 48])
,(5419, [12, 24, 28])
,(5431, [6, 10, 12])
,(5437, [10, 16, 24])
,(5441, [2, 6, 12])
,(5443, [4, 22, 24])
,(5449, [34, 42, 54])
,(5471, [18, 50, 56])
,(5477, [14, 20, 24])
,(5479, [22, 24, 30])
,(5483, [20, 26, 36])
,(5501, [2, 38, 60])
,(5503, [4, 12, 22])
,(5507, [24, 30, 38])
,(5519, [14, 32, 42])
,(5521, [16, 28, 40])
,(5527, [4, 18, 30])
,(5531, [8, 12, 18])
,(5557, [4, 6, 34])
,(5563, [10, 16, 22])
,(5569, [4, 10, 24])
,(5573, [12, 26, 30])
,(5581, [6, 12, 18])
,(5591, [6, 8, 20])
,(5623, [6, 12, 22])
,(5639, [2, 18, 38])
,(5641, [58, 60, 90])
,(5647, [16, 34, 36])
,(5651, [18, 20, 30])
,(5653, [4, 10, 22])
,(5657, [26, 36, 38])
,(5659, [4, 10, 18])
,(5669, [14, 18, 20])
,(5683, [24, 52, 54])
,(5689, [10, 24, 28])
,(5693, [6, 32, 50])
,(5701, [22, 28, 36])
,(5711, [2, 6, 20])
,(5717, [6, 8, 14])
,(5737, [28, 60, 76])
,(5741, [2, 32, 68])
,(5743, [4, 12, 36])
,(5749, [18, 40, 54])
,(5779, [4, 10, 22])
,(5783, [14, 24, 30])
,(5791, [6, 12, 16])
,(5801, [6, 26, 36])
,(5807, [6, 8, 14])
,(5813, [36, 42, 62])
,(5821, [10, 18, 28])
,(5827, [6, 10, 46])
,(5839, [4, 10, 78])
,(5843, [6, 12, 30])
,(5849, [2, 20, 60])
,(5851, [6, 10, 18])
,(5857, [28, 36, 40])
,(5861, [8, 18, 60])
,(5867, [14, 18, 36])
,(5869, [12, 22])
,(5879, [12, 14, 38])
,(5881, [12, 30, 40])
,(5897, [14, 24, 36])
,(5903, [2, 6, 20])
,(5923, [22, 30, 36])
,(5927, [8, 30, 38])
,(5939, [8, 18, 24])
,(5953, [4, 12, 24])
,(5981, [36, 42, 60])
,(5987, [6, 26, 44])
,(6007, [4, 18, 24])
,(6011, [6, 30, 36])
,(6029, [14, 30, 44])
,(6037, [24, 36, 46])
,(6043, [22, 34, 54])
,(6047, [14, 20, 54])
,(6053, [2, 6, 20])
,(6067, [16, 30, 34])
,(6073, [16, 24, 34])
,(6079, [4, 12, 18])
,(6089, [14, 68, 72])
,(6091, [18, 36, 46])
,(6101, [2, 6, 8])
,(6113, [2, 44, 54])
,(6121, [10, 12, 36])
,(6131, [2, 6, 18])
,(6133, [4, 10, 12])
,(6143, [20, 30, 62])
,(6151, [10, 66, 70])
,(6163, [6, 10, 34])
,(6173, [2, 6, 12])
,(6197, [20, 26, 48])
,(6199, [10, 22, 28])
,(6203, [14, 24, 42])
,(6211, [16, 18, 28])
,(6217, [10, 28, 46])
,(6221, [12, 38, 66])
,(6229, [4, 24, 28])
,(6247, [4, 6, 28])
,(6257, [20, 24, 26])
,(6263, [2, 6, 14])
,(6269, [2, 8, 14])
,(6271, [12, 40, 42])
,(6277, [6, 24, 28])
,(6287, [14, 18, 24])
,(6299, [18, 42, 44])
,(6301, [42, 46, 100])
,(6311, [32, 50, 60])
,(6317, [20, 24, 38])
,(6323, [2, 14, 20])
,(6329, [2, 14, 24])
,(6337, [4, 18, 34])
,(6343, [4, 16, 22])
,(6353, [6, 30, 50])
,(6359, [8, 24, 38])
,(6361, [6, 10, 12])
,(6367, [4, 10, 16])
,(6373, [6, 22, 24])
,(6379, [22, 28, 48])
,(6389, [20, 24, 30])
,(6397, [4, 24, 30])
,(6421, [22, 30, 42])
,(6427, [10, 28, 30])
,(6449, [2, 8, 20])
,(6451, [6, 16, 28])
,(6469, [18, 22, 30])
,(6473, [6, 20, 42])
,(6481, [10, 12, 30])
,(6491, [2, 8, 12])
,(6521, [2, 32, 38])
,(6529, [28, 34, 58])
,(6547, [4, 28, 40])
,(6551, [2, 26, 72])
,(6553, [16, 22, 24])
,(6563, [2, 24, 44])
,(6569, [8, 14, 20])
,(6571, [12, 16, 22])
,(6577, [4, 18, 28])
,(6581, [2, 36, 60])
,(6599, [14, 30, 48])
,(6607, [10, 18, 28])
,(6619, [10, 30, 42])
,(6637, [64, 70, 88])
,(6653, [24, 32, 36])
,(6659, [42, 50, 54])
,(6661, [22, 30, 46])
,(6673, [4, 6, 12])
,(6679, [4, 10, 12])
,(6689, [20, 30, 42])
,(6691, [16, 28, 30])
,(6701, [8, 18, 30])
,(6703, [4, 42, 66])
,(6709, [18, 24, 60])
,(6719, [12, 18, 48])
,(6733, [34, 60, 72])
,(6737, [6, 8, 18])
,(6761, [2, 20, 48])
,(6763, [10, 12, 36])
,(6779, [12, 14, 20])
,(6781, [12, 16, 22])
,(6791, [32, 66, 80])
,(6793, [6, 10, 12])
,(6803, [6, 12, 32])
,(6823, [6, 16, 22])
,(6827, [8, 18, 20])
,(6829, [22, 30, 34])
,(6833, [24, 32, 36])
,(6841, [6, 22, 36])
,(6857, [6, 18, 24])
,(6863, [6, 26, 36])
,(6869, [14, 32, 42])
,(6871, [6, 10, 16])
,(6883, [6, 16, 40])
,(6899, [2, 14, 18])
,(6907, [6, 48, 54])
,(6911, [6, 26, 30])
,(6917, [8, 30, 44])
,(6947, [14, 26, 48])
,(6949, [10, 12, 22])
,(6959, [8, 24, 38])
,(6961, [18, 42, 52])
,(6967, [18, 28, 34])
,(6971, [12, 38, 62])
,(6977, [6, 8, 24])
,(6983, [2, 20, 24])
,(6991, [6, 10, 16])
,(6997, [6, 16, 36])
,(7001, [8, 18, 26])
,(7013, [26, 30, 44])
,(7019, [12, 20, 24])
,(7027, [4, 10, 18])
,(7039, [18, 24, 48])
,(7043, [2, 26, 30])
,(7057, [4, 10, 16])
,(7069, [4, 24, 28])
,(7079, [2, 8, 18])
,(7103, [2, 12, 20])
,(7109, [8, 14, 32])
,(7121, [2, 6, 12])
,(7127, [18, 24, 26])
,(7129, [4, 12, 40])
,(7151, [2, 30, 36])
,(7159, [12, 30, 52])
,(7177, [6, 16, 18])
,(7187, [24, 36, 38])
,(7193, [2, 6, 14])
,(7207, [24, 28, 30])
,(7211, [2, 8, 12])
,(7213, [60, 66, 76])
,(7219, [12, 30, 60])
,(7229, [14, 24, 42])
,(7237, [4, 16, 18])
,(7243, [10, 22, 40])
,(7247, [8, 18, 20])
,(7253, [12, 26, 44])
,(7283, [14, 20, 62])
,(7297, [6, 24, 34])
,(7307, [14, 20, 26])
,(7309, [10, 70, 72])
,(7321, [12, 18, 40])
,(7331, [6, 12, 18])
,(7333, [4, 10, 16])
,(7349, [2, 18, 30])
,(7351, [16, 36, 52])
,(7369, [22, 24, 30])
,(7393, [4, 24, 42])
,(7411, [28, 36, 40])
,(7417, [4, 16, 30])
,(7433, [2, 24, 30])
,(7451, [12, 20, 26])
,(7457, [14, 18, 26])
,(7459, [4, 18, 34])
,(7477, [10, 16, 18])
,(7481, [6, 26, 36])
,(7487, [24, 30, 38])
,(7489, [10, 24, 34])
,(7499, [12, 14, 44])
,(7507, [4, 34, 48])
,(7517, [14, 26, 44])
,(7523, [6, 14, 26])
,(7529, [14, 30, 38])
,(7537, [36, 70, 76])
,(7541, [2, 6, 30])
,(7547, [36, 44, 60])
,(7549, [4, 28, 48])
,(7559, [12, 68, 74])
,(7561, [10, 16, 18])
,(7573, [4, 6, 10])
,(7577, [8, 26, 56])
,(7583, [12, 14, 26])
,(7589, [18, 30, 38])
,(7591, [42, 46, 52])
,(7603, [10, 12, 22])
,(7607, [30, 38, 48])
,(7621, [12, 16, 22])
,(7639, [4, 30, 42])
,(7643, [2, 26, 42])
,(7649, [2, 20, 24])
,(7669, [4, 22, 24])
,(7673, [12, 24, 26])
,(7681, [12, 30, 36])
,(7687, [10, 24, 30])
,(7691, [2, 6, 26])
,(7699, [10, 24, 28])
,(7703, [6, 14, 20])
,(7717, [4, 10, 36])
,(7723, [4, 34, 36])
,(7727, [14, 26, 48])
,(7741, [6, 12, 18])
,(7753, [4, 30, 36])
,(7757, [8, 18, 26])
,(7759, [10, 18, 28])
,(7789, [34, 40, 52])
,(7793, [14, 20, 32])
,(7817, [30, 50, 56])
,(7823, [2, 44, 50])
,(7829, [8, 12, 24])
,(7841, [2, 30, 60])
,(7853, [6, 14, 20])
,(7867, [4, 34, 48])
,(7873, [12, 22, 24])
,(7877, [26, 36, 44])
,(7879, [4, 10, 28])
,(7883, [2, 12, 56])
,(7901, [2, 6, 26])
,(7907, [18, 20, 74])
,(7919, [8, 18, 30])
,(7927, [6, 24, 28])
,(7933, [6, 22, 34])
,(7937, [6, 14, 18])
,(7949, [20, 30, 32])
,(7951, [12, 16, 30])
,(7963, [6, 10, 42])
,(7993, [4, 12, 24])
,(8009, [18, 30, 60])
,(8011, [10, 22, 28])
,(8017, [4, 16, 18])
,(8039, [12, 20, 32])
,(8053, [4, 22, 34])
,(8059, [4, 18, 30])
,(8069, [2, 8, 14])
,(8081, [6, 12, 18])
,(8087, [6, 20, 26])
,(8089, [18, 34, 48])
,(8093, [2, 12, 32])
,(8101, [12, 18, 22])
,(8111, [2, 20, 36])
,(8117, [8, 24, 38])
,(8123, [14, 26, 32])
,(8147, [6, 18, 30])
,(8161, [10, 28, 40])
,(8167, [6, 10, 28])
,(8171, [26, 30, 36])
,(8179, [4, 22, 34])
,(8191, [46, 60, 70])
,(8209, [30, 64, 70])
,(8219, [14, 24, 32])
,(8221, [28, 46, 66])
,(8231, [12, 20, 26])
,(8233, [4, 40, 64])
,(8237, [14, 24, 26])
,(8243, [2, 6, 36])
,(8263, [4, 22, 24])
,(8269, [22, 28, 30])
,(8273, [2, 6, 12])
,(8287, [4, 58, 66])
,(8291, [6, 18, 32])
,(8293, [16, 24, 42])
,(8297, [6, 8, 14])
,(8311, [12, 28, 36])
,(8317, [16, 28, 46])
,(8329, [4, 30, 40])
,(8353, [4, 6, 12])
,(8363, [12, 20, 24])
,(8369, [14, 20, 30])
,(8377, [6, 16, 24])
,(8387, [18, 30, 36])
,(8389, [10, 12, 22])
,(8419, [10, 40, 48])
,(8423, [6, 30, 42])
,(8429, [8, 12, 38])
,(8431, [6, 12, 22])
,(8443, [4, 10, 16])
,(8447, [6, 8, 14])
,(8461, [6, 12, 28])
,(8467, [18, 24, 36])
,(8501, [12, 20, 48])
,(8513, [2, 14, 32])
,(8521, [12, 16, 18])
,(8527, [18, 58, 94])
,(8537, [20, 48, 74])
,(8539, [4, 34, 52])
,(8543, [24, 50, 54])
,(8563, [4, 34, 40])
,(8573, [6, 12, 72])
,(8581, [6, 18, 46])
,(8597, [8, 18, 36])
,(8599, [10, 34, 42])
,(8609, [20, 32, 48])
,(8623, [24, 30, 40])
,(8627, [14, 20, 26])
,(8629, [10, 12, 30])
,(8641, [18, 48, 52])
,(8647, [4, 30, 34])
,(8663, [2, 14, 32])
,(8669, [14, 24, 68])
,(8677, [10, 48, 58])
,(8681, [12, 18, 32])
,(8689, [4, 30, 40])
,(8693, [2, 20, 30])
,(8699, [8, 14, 20])
,(8707, [10, 16, 18])
,(8713, [16, 34, 36])
,(8719, [4, 18, 24])
,(8731, [6, 12, 16])
,(8737, [4, 28, 30])
,(8741, [2, 8, 20])
,(8747, [24, 30, 50])
,(8753, [12, 20, 32])
,(8761, [6, 16, 22])
,(8779, [4, 22, 60])
,(8783, [12, 14, 26])
,(8803, [30, 52, 70])
,(8807, [8, 18, 24])
,(8819, [12, 24, 38])
,(8821, [10, 30, 36])
,(8831, [18, 30, 38])
,(8837, [14, 20, 26])
,(8839, [48, 58, 72])
,(8849, [8, 12, 14])
,(8861, [18, 26, 30])
,(8863, [12, 30, 36])
,(8867, [8, 14, 84])
,(8887, [6, 16, 24])
,(8893, [4, 6, 36])
,(8923, [10, 12, 22])
,(8929, [18, 22, 24])
,(8933, [12, 14, 26])
,(8941, [42, 46, 58])
,(8951, [2, 20, 30])
,(8963, [20, 36, 60])
,(8969, [2, 20, 42])
,(8971, [16, 30, 46])
,(8999, [8, 18, 20])
,(9001, [10, 12, 28])
,(9007, [10, 34, 48])
,(9011, [8, 20, 26])
,(9013, [36, 60, 70])
,(9029, [2, 18, 32])
,(9041, [18, 30, 36])
,(9043, [12, 24, 46])
,(9049, [30, 40, 42])
,(9059, [2, 12, 14])
,(9067, [4, 6, 30])
,(9091, [6, 10, 22])
,(9103, [34, 46, 76])
,(9109, [28, 30, 34])
,(9127, [16, 66, 96])
,(9133, [6, 10, 12])
,(9137, [26, 44, 54])
,(9151, [6, 16, 42])
,(9157, [4, 10, 16])
,(9161, [30, 48, 56])
,(9173, [20, 26, 36])
,(9181, [10, 28, 60])
,(9187, [4, 18, 64])
,(9199, [54, 58, 64])
,(9203, [6, 12, 24])
,(9209, [8, 20, 48])
,(9221, [2, 32, 36])
,(9227, [44, 54, 56])
,(9239, [14, 18, 24])
,(9241, [30, 52, 66])
,(9257, [18, 36, 50])
,(9277, [6, 18, 36])
,(9281, [12, 20, 56])
,(9283, [10, 24, 30])
,(9293, [2, 32, 36])
,(9311, [8, 12, 32])
,(9319, [4, 12, 22])
,(9323, [14, 24, 26])
,(9337, [10, 16, 18])
,(9341, [8, 26, 56])
,(9343, [16, 24, 34])
,(9349, [4, 10, 28])
,(9371, [2, 26, 30])
,(9377, [6, 8, 38])
,(9391, [10, 22, 28])
,(9397, [4, 6, 10])
,(9403, [30, 46, 70])
,(9413, [6, 14, 20])
,(9419, [2, 8, 30])
,(9421, [6, 40, 60])
,(9431, [12, 20, 32])
,(9433, [6, 10, 16])
,(9437, [30, 38, 74])
,(9439, [34, 40, 48])
,(9461, [6, 8, 18])
,(9463, [4, 6, 12])
,(9467, [38, 48, 50])
,(9473, [2, 14, 30])
,(9479, [2, 8, 12])
,(9491, [30, 32, 56])
,(9497, [6, 26, 44])
,(9511, [10, 40, 48])
,(9521, [26, 30, 36])
,(9533, [24, 54, 84])
,(9539, [2, 30, 68])
,(9547, [4, 6, 10])
,(9551, [12, 20, 32])
,(9587, [8, 14, 24])
,(9601, [36, 42, 46])
,(9613, [4, 6, 64])
,(9619, [12, 22, 28])
,(9623, [20, 26, 36])
,(9629, [2, 14, 20])
,(9631, [6, 16, 18])
,(9643, [6, 10, 24])
,(9649, [18, 34, 54])
,(9661, [12, 28, 42])
,(9677, [8, 14, 20])
,(9679, [28, 40, 70])
,(9689, [2, 8, 12])
,(9697, [16, 28, 36])
,(9719, [14, 18, 32])
,(9721, [16, 28, 42])
,(9733, [4, 12, 42])
,(9739, [18, 22, 28])
,(9743, [14, 20, 44])
,(9749, [12, 20, 30])
,(9767, [6, 8, 14])
,(9769, [18, 24, 30])
,(9781, [6, 12, 22])
,(9787, [10, 16, 36])
,(9791, [2, 38, 48])
,(9803, [24, 26, 36])
,(9811, [18, 22, 28])
,(9817, [34, 48, 60])
,(9829, [4, 18, 40])
,(9833, [20, 26, 30])
,(9839, [8, 48, 50])
,(9851, [6, 8, 12])
,(9857, [8, 14, 18])
,(9859, [22, 34, 78])
,(9871, [10, 12, 18])
,(9883, [16, 40, 42])
,(9887, [18, 20, 36])
,(9901, [6, 22, 40])
,(9907, [6, 18, 60])
,(9923, [6, 14, 20])
,(9929, [8, 32, 42])
,(9931, [12, 30, 36])
,(9941, [12, 18, 42])
,(9949, [12, 18, 34])
,(9967, [4, 16, 18])
,(9973, [12, 16, 22])
]


def 制表辅助冫幂方判定牜素模乊减一素因子扌(N, p4phi4N, /, *, to_str_tbl:bool, plain_vs_fancy:bool):
    'N{is_prime(N)} -> p4phi4N{N%p4phi4N==1} -> tbl/[b_pow/bool]{len=N}/tuple'
>>> all(制表辅助冫幂方判定牜素模乊减一素因子扌(211, p, to_str_tbl=True, plain_vs_fancy=False) == 制表辅助冫幂方判定牜素模乊减一素因子扌(211, p, to_str_tbl=True, plain_vs_fancy=True) for p in [2,3,5,7])
True


]]
[[
py_adhoc_call   script.辅助冫幂方判定   @_main4show_tbl__ver3     >  /sdcard/0my_files/tmp/0tmp      2>&1
view /sdcard/0my_files/tmp/0tmp
#>>> _main4show_tbl__ver3()
e ../../python3_src/seed/math/_data4factor_pint_as_pefect_power_.py
from seed.math._data4factor_pint_as_pefect_power_ import p4Nmm_scales_pairs, p4Nmm_Ns_pairs, p4Nmm2Ns, p4Nmm2II_Ns, p4Nmm2N2modpows

]]


]]]'''#'''
__all__ = r'''
枚举冫系数辻相应素数牜减一被整除扌
    找出冫最小素数牜减一被整除扌
        枚举冫顺次素数辻相应最小素数牜减一被顺次素数整除扌
            枚举冫顺次奇素数辻相应最小素数牜减一被顺次奇素数整除扌

枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌
    找出冫最小素数牜小于二的八十一次幂牜减一被整除扌
        枚举冫顺次素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次素数整除扌
            枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌




制表辅助冫幂方判定牜素模扌
    制表辅助冫幂方判定牜素模乊减一素因子灬扌
        制表辅助冫幂方判定牜素模乊减一素因子扌
集合冫模幂方数牜素模乊减一素因子扌
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from seed.tiny_.dict__add_fmap_filter import fmap4dict_value, filter4dict_value, dict_add__is, dict_add__eq, dict_add__new, group4dict_value
from seed.tiny_.check import check_type_is, check_int_ge
from itertools import count, islice
from seed.math.is_prime__le_pow2_81 import is_prime__le_pow2_81#as is_prime

___end_mark_of_excluded_global_names__0___ = ...

def 找出冫最小素数牜小于二的八十一次幂牜减一被整除扌(d, /, *, with_coeff=False):
    'd -> (p if not with_coeff else (k,p)){[p==1+k*d][is_prime p]}'
    return 找出冫最小素数牜减一被整除扌(is_prime__le_pow2_81, d, with_coeff=with_coeff)
def 找出冫最小素数牜减一被整除扌(is_prime, d, /, *, with_coeff=False):
    'is_prime/(pint->bool) -> d -> (p if not with_coeff else (k,p)){[p==1+k*d][is_prime p]}'
    for k, p in 枚举冫系数辻相应素数牜减一被整除扌(is_prime, d):
        return p if not with_coeff else (k,p)

def 枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌(d, /):
    'd -> Iter (k, p){[p==1+k*d][is_prime p]}'
    return 枚举冫系数辻相应素数牜减一被整除扌(is_prime__le_pow2_81, d)
def 枚举冫系数辻相应素数牜减一被整除扌(is_prime, d, /):
    'is_prime/(pint->bool) -> d -> Iter (k, p){[p==1+k*d][is_prime p]}'
    # is_prime <<== TODO: view ../../python3_src/seed/math/is_prime__via_complete_factorization_Nmm_.py
    check_int_ge(1, d)
    if d == 1:
        yield (1, 2)
    dd = (d << 1) if d&1 else d
    assert not (dd&1)
    # [even dd]
    for odd in count(1+dd, dd):
        if is_prime(odd):
            p = odd
            k = (p-1)//d
            assert p == 1+k*d
            yield (k, p)
assert 3 == 找出冫最小素数牜小于二的八十一次幂牜减一被整除扌(2)
def 枚举冫顺次素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次素数整除扌(begin=2, /):
    'begin/int -> Iter (p, q, d) # [[sorted by p][p >= max(2,begin)][is_prime(p)][[min d] :=> [d >= 1][q == 1+d*p][is_prime(q)]]]'
    return 枚举冫顺次素数辻相应最小素数牜减一被顺次素数整除扌(is_prime__le_pow2_81, begin)
def 枚举冫顺次素数辻相应最小素数牜减一被顺次素数整除扌(is_prime, begin=2, /):
    'is_prime/(pint->bool) -> begin/int -> Iter (p, q, d) # [[sorted by p][p >= max(2,begin)][is_prime(p)][[min d] :=> [d >= 1][q == 1+d*p][is_prime(q)]]]'
    check_type_is(int, begin)
    begin = max(2, begin)
    assert begin >= 2
    if begin == 2:
        #assert 3 == 找出冫最小素数牜小于二的八十一次幂牜减一被整除扌(2)
        yield (2, 3, 1)
        begin += 1
    assert begin >= 3
    begin |= 1
    assert begin&1
    # [odd begin]
    odd_begin = begin
    for n in count(begin, 2):
        if not is_prime(n):continue
        p = n
        #q = 找出冫最小素数牜小于二的八十一次幂牜减一被整除扌(p)
        #q = 找出冫最小素数牜减一被整除扌(is_prime, p)
        (d, q) = 找出冫最小素数牜减一被整除扌(is_prime, p, with_coeff=True)
        #(d, r) = divmod(q, 2*p)
            # !! prev yield (2,3,1)
        #(d, r) = divmod(q, p)
        #assert r == 1

        assert q == 1+d*p
        assert not (d&1)
        # [even d]
        yield (p, q, d)
def 枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌(begin=3, /):
    'begin/int -> Iter (p, q, h) # [[sorted by p][p >= max(3,begin)][is_prime(p)][[min h] :=> [h >= 1][q == 1+2*h*p][is_prime(q)]]]'
    return 枚举冫顺次奇素数辻相应最小素数牜减一被顺次奇素数整除扌(is_prime__le_pow2_81, begin)
def 枚举冫顺次奇素数辻相应最小素数牜减一被顺次奇素数整除扌(is_prime, begin=3, /):
    'is_prime/(pint->bool) -> begin/int -> Iter (p, q, h) # [[sorted by p][p >= max(3,begin)][is_prime(p)][[min h] :=> [h >= 1][q == 1+2*h*p][is_prime(q)]]]'
    check_type_is(int, begin)
    begin = max(3, begin)
    assert begin >= 3

    #for p, q, d in 枚举冫顺次素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次素数整除扌(begin):
    for p, q, d in 枚举冫顺次素数辻相应最小素数牜减一被顺次素数整除扌(is_prime, begin):
        h = d >> 1
        assert q == 1+2*h*p
        yield (p, q, h)


def _考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌(min4factor, max4factor, max4scale, may_max_num_scales=None, /):
    'min4factor -> max4factor -> max4scale -> may max_num_scales -> Iter (p, [scale]{len<=max_num_scales}){[p <- [min4factor..=max4factor]][scale <= max4scale][modulus := 1+scale*p][is_prime(modulus)]}'
    from seed.tiny import fst
    from itertools import islice, takewhile, dropwhile
    from seed.math.prime_gens import prime_gen__Eratosthenes_sieve, prime_gen__Miller_Rabin_primality_test
    max_num_scales = 1+max4scale if may_max_num_scales is None else may_max_num_scales
    it8ps = takewhile(max4factor.__ge__, dropwhile(min4factor.__gt__, iter(prime_gen__Eratosthenes_sieve)))
    for p in it8ps:
        it = 枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌(p)
        #.for (scale, modulus) in it:
        #.    assert modulus == 1+scale*p
        #.    if not scale <= max4scale:break
        ks = [*islice(takewhile(max4scale.__ge__, map(fst, it)), max_num_scales)]
        yield (p, ks)



def _考察冫阈值间素因子纟阈值以下规模纟素模乘法群扌(min4factor, max4factor, max4modulus, /, *, acc=False):
    'min4factor -> max4factor -> max4modulus -> Iter (p, [modulus]){[p <- [min4factor..=max4factor]][modulus <= max4modulus][is_prime(modulus)][modulus%p==1]}'
    from seed.tiny import snd
    from itertools import islice, takewhile, dropwhile
    from seed.math.prime_gens import prime_gen__Eratosthenes_sieve, prime_gen__Miller_Rabin_primality_test
    if acc:
        M2ps = {}
    it8ps = takewhile(max4factor.__ge__, dropwhile(min4factor.__gt__, iter(prime_gen__Eratosthenes_sieve)))
    for p in it8ps:
        Ms = [*takewhile(max4modulus.__ge__, map(snd, 枚举冫系数辻相应素数牜小于二的八十一次幂牜减一被整除扌(p)))]
        yield (p, Ms)
        if acc:
            for M in Ms:
                ps4M = M2ps.setdefault(M, [])
                ps4M.append(p)
    if acc:
        yield '**acc**'
        for M, ps4M in sorted(M2ps.items()):
            yield (M, ps4M)


def 制表辅助冫幂方判定牜素模扌(prime_modulus, /, *, to_str_tbl:bool, plain_vs_fancy:bool):
    from seed.math.factor_pint_by_trial_division_ import factor_pint_by_trial_division_# factor_pint_by_trial_division_ex_
    check_int_ge(2, prime_modulus)
    assert 2 <= prime_modulus < 2**17
    assert is_prime__le_pow2_81(prime_modulus)
    N = prime_modulus
    phi4N = Nmm = N-1
    p2e4phi4N = p2e4Nmm = factor_pint_by_trial_division_(Nmm)
    j2p4phi4N = j2p4Nmm = sorted(p2e4Nmm)
    p2tbl4N = 制表辅助冫幂方判定牜素模乊减一素因子灬扌(N, j2p4phi4N, to_str_tbl=to_str_tbl, plain_vs_fancy=plain_vs_fancy)
        # :: {p4phi4N:tbl/[b_pow/bool]{len=N}}
    return p2tbl4N

def 制表辅助冫幂方判定牜素模乊减一素因子灬扌(N, some_ps4phi4N, /, *, to_str_tbl:bool, plain_vs_fancy:bool):
    'N{is_prime(N)} -> Iter p4phi4N{N%p4phi4N==1} -> p2tbl4N/{p4phi4N:tbl/[b_pow/bool]{len=N}}/FrozenDict'
    from seed.types.FrozenDict import FrozenDict
    j2p4phi4N = tuple(some_ps4phi4N)
    if not len(set(j2p4phi4N)) == len(j2p4phi4N):raise ValueError
    j2r2b_pow = [制表辅助冫幂方判定牜素模乊减一素因子扌(N, p4phi4N, to_str_tbl=to_str_tbl, plain_vs_fancy=plain_vs_fancy) for p4phi4N in j2p4phi4N]
    p2tbl4N = p4phi4N2r2b_pow4N = FrozenDict(zip(j2p4phi4N, j2r2b_pow))
        # :: {p4phi4N:tbl/[b_pow/bool]{len=N}}
    assert len(p2tbl4N) == len(j2p4phi4N)
    return p2tbl4N

def 制表辅助冫幂方判定牜素模乊减一素因子扌(N, p4phi4N, /, *, to_str_tbl:bool, plain_vs_fancy:bool):
    'N{is_prime(N)} -> p4phi4N{N%p4phi4N==1} -> tbl/[b_pow/bool]{len=N}/tuple'
    assert N%p4phi4N == 1
    tbl = [False]*N

    if plain_vs_fancy:
        #fancy
        #from seed.math.sqrts_mod_ import iter_sqrts_mod_prime_power_,  iter_sqrts_mod_prime_
        from seed.math.find_arbitrary_one_primitive_root_mod_prime__using_factorization_of_pmm_ import find_arbitrary_one_primitive_root_mod_prime__using_factorization_of_pmm_# find_the_min_primitive_root_mod_prime__using_factorization_of_pmm_, iter_sorted_primitive_roots_mod_prime__using_factorization_of_pmm_
        from seed.math.factor_pint_by_trial_division_ import factor_pint_by_trial_division_# factor_pint_by_trial_division_ex_
        g = find_arbitrary_one_primitive_root_mod_prime__using_factorization_of_pmm_(factor_pint_by_trial_division_(N-1), N)
        scale = (N-1)//p4phi4N
        gg = pow(g, p4phi4N, N)
        r = gg
        for _i in range(scale):
            assert (r > 1) or (_i+1 == scale), (N, p4phi4N, scale, g, gg, _i, r)
                # (211, 2, 105, 2, 4, 104, 1)
            tbl[r] = True # p4phi4N次幂方%N
            r = r*gg%N
        assert r == gg
        tbl[0] = True
        tbl
    else:
        #plain
        #   too slow
        for i in range(N):
            r = pow(i, p4phi4N, N)
            tbl[r] = True # p4phi4N次幂方%N
        tbl
    tbl
    assert sum(tbl) == 1+(N-1)//p4phi4N
    if to_str_tbl:
        tbl = ''.join('01'[b] for b in tbl)
    else:
        tbl = tuple(tbl)
    return tbl
def 集合冫模幂方数牜素模乊减一素因子扌(N, p4Nmm, /):
    'N{is_prime(N)} -> p4Nmm{N%p4Nmm==1} -> tbl/[b_pow/bool]{len=N}/tuple'
    from itertools import compress
    bs = 制表辅助冫幂方判定牜素模乊减一素因子扌(N, p4Nmm, to_str_tbl=False, plain_vs_fancy=True)
    return set(compress(range(N), bs))


_ver1__N_ps4Nmm_pairs = (
#primes_le(29)
[(211, [2,3,5,7])
,(419, [11,19])
,(443, [13,17])
,(47, [23])
,(59, [29])
])
#_ver2__N_ps4Nmm_pairs = ?
_ver2__p4Nmm_Ns_pairs = (
#primes_le(53)
#(2, [3, 5, 7, 11, 13, 17, 19, 23, 29])
#   II == 3234846615
[(2, [3, 5, 7, 11, 13])
#   II == 15015
,(3, [7, 13, 19])
,(5, [11, 31, 41])
,(7, [29, 43, 71])
,(11, [23, 67, 89])
,(13, [53, 79, 131])
,(17, [103, 137])
,(19, [191])
,(23, [47, 139])
,(29, [59])
,(31, [311])
,(37, [149])
,(41, [83])
,(43, [173])
,(47, [283])
,(53, [107])
])

#_ver3__p4Nmm_scales_pairs = [*_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌(2, 10000, 100, 3)]
    #move into:_main4mk_tbl__ver3()
def _main4mk_tbl__ver3():
    from seed.math.II import II
    _ver3__p4Nmm_scales_pairs = [*_考察冫阈值间素因子纟阈值以下倍增系数纟规模纟素模乘法群扌(2, 10000, 100, 3)]
    p4Nmm_scales_pairs = _ver3__p4Nmm_scales_pairs
    p4Nmm_Ns_pairs = [(p4Nmm, [1+k*p4Nmm for k in ks]) for p4Nmm, ks in p4Nmm_scales_pairs]
    p4Nmm2Ns = dict(p4Nmm_Ns_pairs)
    p4Nmm2II_Ns = fmap4dict_value(II, p4Nmm2Ns)
    p4Nmm2N2modpows = {p4Nmm:{N:集合冫模幂方数牜素模乊减一素因子扌(N, p4Nmm) for N in Ns} for p4Nmm, Ns in p4Nmm_Ns_pairs}
    return (p4Nmm_scales_pairs, p4Nmm_Ns_pairs, p4Nmm2Ns, p4Nmm2II_Ns, p4Nmm2N2modpows)

def _main4mk_tbl__ver2(*, to_str_tbl:bool, plain_vs_fancy:bool):
    from seed.math.II import II
    p4Nmm_Ns_pairs = _ver2__p4Nmm_Ns_pairs
    p4Nmm2Ns = dict(p4Nmm_Ns_pairs)
    p4Nmm2II_Ns = fmap4dict_value(II, p4Nmm2Ns)
    p4Nmm2tbls = {p4Nmm:[制表辅助冫幂方判定牜素模乊减一素因子扌(N, p4Nmm, to_str_tbl=to_str_tbl, plain_vs_fancy=plain_vs_fancy) for N in Ns] for p4Nmm, Ns in p4Nmm_Ns_pairs}
    return (p4Nmm_Ns_pairs, p4Nmm2Ns, p4Nmm2II_Ns, p4Nmm2tbls)
def _main4mk_tbl__ver1(*, to_str_tbl:bool, plain_vs_fancy:bool):
    from seed.types.FrozenDict import FrozenDict
    N_ps4Nmm_pairs = _ver1__N_ps4Nmm_pairs
    def __(p4Nmm2tbl4N, /):
        for N, some_ps4phi4N in N_ps4Nmm_pairs:
            p2tbl4N = 制表辅助冫幂方判定牜素模乊减一素因子灬扌(N, some_ps4phi4N, to_str_tbl=to_str_tbl, plain_vs_fancy=plain_vs_fancy)
            yield N, p2tbl4N
            for p4Nmm, tbl in p2tbl4N.items():
                dict_add__new(p4Nmm2tbl4N, p4Nmm, tbl)
    p4Nmm2tbl4N = {}
    N2p4Nmm2tbl = FrozenDict(__(p4Nmm2tbl4N))
    p4Nmm2tbl4N = FrozenDict(p4Nmm2tbl4N)
    def __():
        for N, some_ps4phi4N in N_ps4Nmm_pairs:
            for p4phi4N in some_ps4phi4N:
                yield p4phi4N, N
    p4Nmm2N = FrozenDict(__())
    return (N_ps4Nmm_pairs, p4Nmm2N, p4Nmm2tbl4N, N2p4Nmm2tbl)
#_kwargs4expand_top_layer = dict(indent='', depth=0, maybe_max_depth=1, has_head_eol_when_indent=False)
_kwargs4expand_zero_layer = {}
_kwargs4expand_one_layer = dict(indent='', depth=0, maybe_max_depth=1, has_head_eol_when_indent=False)
_kwargs4expand_two_layer = dict(indent='  ', depth=0, maybe_max_depth=2, has_head_eol_when_indent=False)
def _main4show_tbl__ver1(*, to_str_tbl:bool, plain_vs_fancy:bool):
    from seed.helper.stable_repr import stable_repr
    #from seed.helper.stable_repr import stable_repr__expand_top_layer, stable_repr_print__expand_top_layer
    (N_ps4Nmm_pairs, p4Nmm2N, p4Nmm2tbl4N, N2p4Nmm2tbl) = _main4mk_tbl__ver1(to_str_tbl=to_str_tbl, plain_vs_fancy=plain_vs_fancy)
    p4Nmm2N = dict(p4Nmm2N)
    p4Nmm2tbl4N = dict(p4Nmm2tbl4N)
    N2p4Nmm2tbl = fmap4dict_value(dict, N2p4Nmm2tbl)
    j2val = (N_ps4Nmm_pairs, p4Nmm2N, p4Nmm2tbl4N, N2p4Nmm2tbl)
    j2nm = 'N_ps4Nmm_pairs p4Nmm2N p4Nmm2tbl4N N2p4Nmm2tbl'.split()
    j2kwds4repr = (_kwargs4expand_one_layer, _kwargs4expand_zero_layer, _kwargs4expand_one_layer, _kwargs4expand_two_layer)
    #.def _show(nm2x, nm, /):
    #.    x = nm2x[nm]
    #.    s = stable_repr__expand_top_layer(x)
    #.    print(f'{nm} = (\n{s})')
    #.for nm in 'N_ps4Nmm_pairs p4Nmm2N N2p4Nmm2tbl'.split():
    #.    _show(locals(), nm)
    it = zip(j2nm, j2val, j2kwds4repr)
    it = islice(it, 3)
    for (nm, val, kwds4repr) in it:
        s = stable_repr(val, **kwds4repr)
        print(f'{nm} = (\n{s})')


def _main4show_tbl__ver2(*, to_str_tbl:bool, plain_vs_fancy:bool):
    from seed.helper.stable_repr import stable_repr
    j2val = (p4Nmm_Ns_pairs, p4Nmm2Ns, p4Nmm2II_Ns, p4Nmm2tbls) = _main4mk_tbl__ver2(to_str_tbl=to_str_tbl, plain_vs_fancy=plain_vs_fancy)
    j2nm = 'p4Nmm_Ns_pairs p4Nmm2Ns p4Nmm2II_Ns p4Nmm2tbls'.split()
    j2kwds4repr = (_kwargs4expand_one_layer, _kwargs4expand_one_layer, _kwargs4expand_one_layer, _kwargs4expand_two_layer)
    it = zip(j2nm, j2val, j2kwds4repr)
    for (nm, val, kwds4repr) in it:
        s = stable_repr(val, **kwds4repr)
        print(f'{nm} = (\n{s})')


def _main4show_tbl__ver3():
    from seed.helper.stable_repr import stable_repr
    j2val = (p4Nmm_scales_pairs, p4Nmm_Ns_pairs, p4Nmm2Ns, p4Nmm2II_Ns, p4Nmm2N2modpows) = _main4mk_tbl__ver3()
    j2nm = 'p4Nmm_scales_pairs p4Nmm_Ns_pairs p4Nmm2Ns p4Nmm2II_Ns p4Nmm2N2modpows'.split()
    j2kwds4repr = (_kwargs4expand_one_layer, _kwargs4expand_one_layer, _kwargs4expand_one_layer, _kwargs4expand_one_layer, _kwargs4expand_two_layer)
    it = zip(j2nm, j2val, j2kwds4repr)
    for (nm, val, kwds4repr) in it:
        s = stable_repr(val, **kwds4repr)
        print(f'{nm} = (\n{s})')






__all__
from script.辅助冫幂方判定 import 找出冫最小素数牜小于二的八十一次幂牜减一被整除扌, 枚举冫顺次素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次素数整除扌, 枚举冫顺次奇素数辻相应最小素数牜小于二的八十一次幂牜减一被顺次奇素数整除扌
from script.辅助冫幂方判定 import 找出冫最小素数牜减一被整除扌, 枚举冫顺次素数辻相应最小素数牜减一被顺次素数整除扌, 枚举冫顺次奇素数辻相应最小素数牜减一被顺次奇素数整除扌
from script.辅助冫幂方判定 import *
