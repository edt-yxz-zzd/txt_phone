#__all__:goto
r'''[[[
e script/搜索冫某进制表达数乊多种进制解读皆为素数.py
[[
usage4output:
cat script/搜索冫某进制表达数乊多种进制解读皆为素数-radixes_17_31-pow_12_8-total_6709.out.txt   |  grep -P '(?<=[(])[0-9A-F]*(?=[)])' -o  | more
    NOTE:[12==radix4show{tail-decimal}]
7z e  -so   script/搜索冫某进制表达数乊多种进制解读皆为素数.py.八位十六进制数囗后续五种素进制解读皆为素数.out.7z   |  grep -P '(?<=[(])[0-9A-F]*(?=[)])' -o  | more
    NOTE:[16==radix4show{tail-decimal}]
]]

[[
源起:
    view script/搜索冫无重复十进制位数字型素数乊位数.py
        八位数素数乊丮十进制丨十一进制丨十三进制丨十七进制丨十九进制丨廿三进制丨廿九进制丨卅一进制厈
            1:12540937
        无冫八位数素数乊丮十进制丨十一进制丨十三进制丨十七进制丨十九进制丨廿三进制丨廿九进制丨卅一进制丨卅七进制厈
本文件:去除约束:
    * 无重复位数
    * 十进制解读为素数
    * 放宽约束:++kw:ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read
]]


script.搜索冫某进制表达数乊多种进制解读皆为素数
py -m nn_ns.app.debug_cmd   script.搜索冫某进制表达数乊多种进制解读皆为素数 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.搜索冫某进制表达数乊多种进制解读皆为素数:__doc__ -ht # -ff -df


[[
grep fmt4str_with_int -r script/
script/搜索冫某进制表达数乊多种进制解读皆为素数.py
script/搜索冫无重复十进制位数字型素数乊位数.py
]]



py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   @搜索冫某进制表达数乊多种进制解读皆为素数扌 +int_vs_str +str_with_int +iter_vs_list  ='[11,13]' =10 =2 =100
>>> 搜索冫某进制表达数乊多种进制解读皆为素数扌([11,13], 10, 2, 100, int_vs_str=True, str_with_int=True, iter_vs_list=True)
['[2]2', '[3]3', '[5]5', '[7]7', '[10]10', '[16]16', '[34]34', '[38]38', '[49]49', '[56]56', '[61]61', '[65]65', '[76]76', '[89]89']

py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   @搜索冫某进制表达数乊多种进制解读皆为素数扌 +iter_vs_list  ='[11,13]' =10 =2 =100
>>> 搜索冫某进制表达数乊多种进制解读皆为素数扌([11,13], 10, 2, 100, iter_vs_list=True)
[2, 3, 5, 7, 10, 16, 34, 38, 49, 56, 61, 65, 76, 89]

py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   @搜索冫某进制表达数乊多种进制解读皆为素数扌 +iter_vs_list  ='[11,12]' =10 =2 =100
>>> 搜索冫某进制表达数乊多种进制解读皆为素数扌([11,12], 10, 2, 100, iter_vs_list=True)
[2, 3, 5, 7, 27, 61, 67, 81]

py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   @搜索冫某进制表达数乊多种进制解读皆为素数扌 +iter_vs_list  ='[11,12]' =10 =2 =100   +ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read
>>> 搜索冫某进制表达数乊多种进制解读皆为素数扌([11,12], 10, 2, 100, iter_vs_list=True, ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read=True)
[2, 3, 5, 7, 12, 16, 18, 27, 29, 34, 38, 43, 49, 54, 56, 61, 67, 72, 76, 81, 89, 92, 94, 98]

py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   @搜索冫某进制表达数乊多种进制解读皆为素数扌 +iter_vs_list  ='[11,12]' =10 :2 :100  #++uint5or_str_()
>>> 搜索冫某进制表达数乊多种进制解读皆为素数扌([11,12], 10, '2', '100', iter_vs_list=True)
[2, 3, 5, 7, 27, 61, 67, 81]

py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   @搜索冫某进制表达数乊多种进制解读皆为素数扌 +iter_vs_list  ='[11,13]' =10 =100 =1000
>>> 搜索冫某进制表达数乊多种进制解读皆为素数扌([11,13], 10, 100, 1000, iter_vs_list=True)
[133, 142, 148, 155, 164, 197, 209, 232, 236, 247, 263, 265, 281, 287, 296, 298, 331, 362, 373, 379, 386, 407, 434, 452, 467, 472, 494, 508, 511, 533, 551, 566, 571, 595, 607, 616, 629, 643, 665, 715, 728, 731, 737, 775, 782, 791, 797, 809, 838, 874, 892, 902, 919, 926, 937, 968]
>>> 搜索冫某进制表达数乊多种进制解读皆为素数扌([11,13], 10, 2, 1000, iter_vs_list=True)
[2, 3, 5, 7, 10, 16, 34, 38, 49, 56, 61, 65, 76, 89, 133, 142, 148, 155, 164, 197, 209, 232, 236, 247, 263, 265, 281, 287, 296, 298, 331, 362, 373, 379, 386, 407, 434, 452, 467, 472, 494, 508, 511, 533, 551, 566, 571, 595, 607, 616, 629, 643, 665, 715, 728, 731, 737, 775, 782, 791, 797, 809, 838, 874, 892, 902, 919, 926, 937, 968]

[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13]' =10 =2 =1000 | lineno
1:2
2:3
3:5
4:7
5:10
6:16
7:34
8:38
9:49
10:56
11:61
12:65
13:76
14:89
15:133
16:142
17:148
18:155
19:164
20:197
21:209
22:232
23:236
24:247
25:263
26:265
27:281
28:287
29:296
30:298
31:331
32:362
33:373
34:379
35:386
36:407
37:434
38:452
39:467
40:472
41:494
42:508
43:511
44:533
45:551
46:566
47:571
48:595
49:607
50:616
51:629
52:643
53:665
54:715
55:728
56:731
57:737
58:775
59:782
60:791
61:797
62:809
63:838
64:874
65:892
66:902
67:919
68:926
69:937
70:968
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13]' =10 =1000 =10000 | lineno -s 71
71:1033
72:1088
73:1127
74:1172
75:1183
76:1244
77:1259
78:1277
79:1288
80:1303
81:1336
82:1376
83:1442
84:1451
85:1552
86:1561
87:1574
88:1594
89:1606
90:1639
91:1688
92:1727
93:1754
94:1787
95:1853
96:1886
97:1949
98:2023
99:2041
100:2045
101:2096
102:2117
103:2146
104:2162
105:2168
106:2221
107:2245
108:2249
109:2254
110:2315
111:2333
112:2353
113:2377
114:2386
115:2465
116:2476
117:2531
118:2573
119:2584
120:2623
121:2656
122:2672
123:2674
124:2827
125:2843
126:2872
127:2881
128:2894
129:2975
130:3008
131:3013
132:3053
133:3079
134:3091
135:3118
136:3158
137:3196
138:3217
139:3224
140:3233
141:3257
142:3349
143:3361
144:3433
145:3442
146:3464
147:3466
148:3536
149:3541
150:3569
151:3596
152:3602
153:3613
154:3664
155:3668
156:3673
157:3734
158:3772
159:3785
160:3806
161:3808
162:3905
163:3929
164:3998
165:4025
166:4058
167:4081
168:4135
169:4157
170:4168
171:4207
172:4274
173:4313
174:4322
175:4384
176:4412
177:4438
178:4445
179:4454
180:4465
181:4522
182:4621
183:4702
184:4753
185:4784
186:4823
187:4841
188:4856
189:4889
190:5033
191:5059
192:5105
193:5114
194:5116
195:5147
196:5198
197:5248
198:5279
199:5347
200:5444
201:5495
202:5545
203:5633
204:5765
205:5774
206:5842
207:5989
208:6029
209:6067
210:6137
211:6155
212:6203
213:6214
214:6238
215:6304
216:6319
217:6326
218:6386
219:6485
220:6506
221:6535
222:6599
223:6601
224:6638
225:6683
226:6698
227:6704
228:6809
229:6814
230:6869
231:6881
232:6896
233:6953
234:6997
235:7019
236:7073
237:7127
238:7192
239:7226
240:7255
241:7259
242:7282
243:7358
244:7381
245:7402
246:7415
247:7426
248:7507
249:7622
250:7646
251:7699
252:7705
253:7754
254:7787
255:7826
256:7844
257:7877
258:7921
259:7925
260:7987
261:8003
262:8018
263:8083
264:8102
265:8171
266:8182
267:8212
268:8245
269:8519
270:8524
271:8531
272:8591
273:8663
274:8722
275:8816
276:8867
277:8948
278:8986
279:9053
280:9107
281:9118
282:9194
283:9206
284:9251
285:9293
286:9334
287:9361
288:9422
289:9679
290:9686
291:9703
292:9811
293:9851
294:9923
295:9938
296:9976
297:9983
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17]' =10    =2 =10000 | lineno
1:2
2:3
3:5
4:7
5:10
6:16
7:38
8:61
9:65
10:142
11:155
12:197
13:209
14:232
15:247
16:263
17:298
18:331
19:362
20:386
21:407
22:472
23:508
24:533
25:551
26:566
27:607
28:629
29:737
30:782
31:838
32:892
33:937
34:968
35:1033
36:1172
37:1244
38:1303
39:1574
40:1606
41:1688
42:1727
43:1787
44:1949
45:2117
46:2245
47:2353
48:2573
49:2584
50:2623
51:2672
52:3008
53:3013
54:3053
55:3079
56:3118
57:3158
58:3196
59:3349
60:3464
61:3541
62:3613
63:3772
64:3785
65:3929
66:4135
67:4168
68:4274
69:4454
70:4889
71:5059
72:5105
73:5116
74:5248
75:5444
76:5545
77:5774
78:5842
79:6067
80:6203
81:6638
82:6809
83:7073
84:7127
85:7255
86:7282
87:7415
88:7622
89:8083
90:8212
91:8524
92:8531
93:8591
94:8663
95:8948
96:9118
97:9334
98:9686
99:9938
100:9983
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17,19]' =10    =2 =10000 | lineno
1:2
2:3
3:5
4:7
5:10
6:142
7:155
8:263
9:407
10:472
11:551
12:629
13:737
14:838
15:892
16:937
17:968
18:1727
19:1949
20:2584
21:3013
22:3079
23:3929
24:4168
25:4454
26:6203
27:7282
28:7415
29:9118
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17,19,23]' =10    =2 =10000 | lineno
1:2
2:3
3:5
4:7
5:10
6:629
7:737
8:892
9:1727
10:1949
11:3013
12:3079
13:7282
14:7415
15:9118
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17,19,23,29]' =10    =2 =10000 | lineno
1:2
2:3
3:5
4:7
5:10
6:629
7:737
8:892
9:1727
10:1949
11:3079
12:7415
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17,19,23,29,31]' =10    =2 =10000 | lineno
1:2
2:3
3:5
4:7
5:10
6:737
7:1727
8:3079
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17,19,23,29,31,37]' =10    =2 =10000 | lineno
1:2
2:3
3:5
4:7
5:10
6:1727
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17,19,23,29,31,37,41]' =10    =2 =10000 | lineno
1:2
2:3
3:5
4:7
5:10
6:1727
]]
[[
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17,19,23,29,31,37,41,43]' =10    =2 =10000 | lineno
1:2
2:3
3:5
4:7
5:10
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13,17,19,23,29,31,37,41,43]' =10    =11 =10000 | lineno
    <None>
]]
[[
factor 1727
1727: 11 157

factor 3079
3079: 3079
]]
[[
===
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ='[11,13]' =10    =11 ='10**6' | lineno   >  /sdcard/0my_files/tmp/00tmp
du -h /sdcard/0my_files/tmp/00tmp
    116K
view /sdcard/0my_files/tmp/00tmp
1:16
... ...
10021:999932
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17]' :'/sdcard/0my_files/tmp/00tmp' --encoding:'ascii' | lineno   >  /sdcard/0my_files/tmp/01tmp
du -h /sdcard/0my_files/tmp/01tmp
    24K
view /sdcard/0my_files/tmp/01tmp
1:16
... ...
2144:999763
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17,19]' :'/sdcard/0my_files/tmp/01tmp' --encoding:'ascii' | lineno   >  /sdcard/0my_files/tmp/02tmp
du -h /sdcard/0my_files/tmp/02tmp
    4.0K
view /sdcard/0my_files/tmp/02tmp
1:142
2:155
3:263
4:407
5:472
6:551
7:629
8:737
9:838
10:892
11:937
12:968
13:1727
14:1949
15:2584
16:3013
17:3079
18:3929
19:4168
20:4454
21:6203
22:7282
23:7415
24:9118
25:10736
26:12178
27:12596
28:13234
29:14806
30:16334
31:17018
32:17401
33:17425
34:29767
35:30239
36:30307
37:30802
38:35915
39:38534
40:40315
41:43307
42:45046
43:45343
44:48773
45:49709
46:50105
47:50291
48:57452
49:59476
50:60616
51:61606
52:62425
53:62887
54:64966
55:66791
56:66935
57:67376
58:70934
59:71726
60:73579
61:73928
62:79906
63:80753
64:82517
65:83534
66:83963
67:85349
68:85592
69:85604
70:85828
71:85844
72:85934
73:87967
74:88618
75:90949
76:92846
77:94963
78:95728
79:96394
80:97087
81:102134
82:102761
83:106138
84:106282
85:108383
86:109658
87:111716
88:111905
89:113114
90:113222
91:115301
92:119129
93:124178
94:125366
95:126985
96:134144
97:138269
98:138401
99:139303
100:140194
101:140338
102:141184
103:144035
104:145232
105:146938
106:147962
107:156629
108:157244
109:158104
110:158951
111:161393
112:162877
113:163054
114:164903
115:168002
116:168178
117:170407
118:170887
119:173828
120:180389
121:184097
122:185924
123:186815
124:186967
125:190649
126:190867
127:192359
128:193828
129:194878
130:195152
131:196906
132:199343
133:200386
134:204061
135:204797
136:205084
137:209093
138:209396
139:213236
140:217733
141:218668
142:220375
143:220814
144:222245
145:224533
146:224797
147:225149
148:226588
149:231661
150:234785
151:235421
152:241165
153:241637
154:241925
155:244157
156:244298
157:244586
158:246146
159:246511
160:247864
161:249833
162:254011
163:254024
164:256972
165:260942
166:261053
167:264496
168:264584
169:272828
170:280414
171:280913
172:281291
173:282928
174:283172
175:284395
176:286618
177:288364
178:291656
179:291665
180:293854
181:294152
182:304118
183:305623
184:309061
185:311477
186:315578
187:316733
188:319187
189:320563
190:324875
191:325027
192:328549
193:332012
194:338249
195:338854
196:352043
197:357853
198:358007
199:358403
200:359668
201:360383
202:370229
203:370777
204:372917
205:373505
206:373637
207:374287
208:375518
209:376001
210:380831
211:381403
212:385571
213:391655
214:401125
215:403798
216:408308
217:409639
218:414161
219:418604
220:423929
221:424346
222:425611
223:429725
224:435755
225:436754
226:437072
227:442333
228:451814
229:454684
230:457456
231:462331
232:465268
233:466762
234:470819
235:475795
236:479687
237:480502
238:501269
239:505373
240:525766
241:528581
242:529849
243:531026
244:531938
245:532687
246:545458
247:548932
248:557491
249:563573
250:566996
251:577127
252:589115
253:592492
254:596551
255:602744
256:604715
257:605903
258:606629
259:607343
260:608717
261:618022
262:620786
263:620995
264:624205
265:631454
266:639913
267:643334
268:651421
269:664025
270:665149
271:668746
272:668821
273:668845
274:677788
275:678325
276:679757
277:695234
278:696961
279:698567
280:702833
281:709313
282:717002
283:717242
284:718861
285:727913
286:732458
287:735194
288:753215
289:755392
290:757406
291:760132
292:768701
293:774454
294:776324
295:777622
296:779239
297:781418
298:785489
299:789238
300:789823
301:793189
302:794179
303:799699
304:806366
305:811427
306:811658
307:817085
308:819478
309:833702
310:836363
311:841006
312:841457
313:846988
314:848395
315:848485
316:852248
317:854822
318:855625
319:860375
320:890626
321:892112
322:899735
323:900118
324:904145
325:923878
326:924716
327:930236
328:932845
329:934373
330:935617
331:937969
332:938551
333:942941
334:951446
335:952337
336:959585
337:959608
338:959914
339:960376
340:962501
341:970012
342:971356
343:973589
344:975028
345:979934
346:987724
347:996203
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17,19,23]' :'/sdcard/0my_files/tmp/02tmp' --encoding:'ascii' | lineno   >  /sdcard/0my_files/tmp/03tmp
du -h /sdcard/0my_files/tmp/03tmp
    4.0K
view /sdcard/0my_files/tmp/03tmp
1:629
2:737
3:892
4:1727
5:1949
6:3013
7:3079
8:7282
9:7415
10:9118
11:12596
12:17401
13:30802
14:35915
15:45343
16:57452
17:59476
18:60616
19:61606
20:66791
21:66935
22:67376
23:80753
24:82517
25:85349
26:85828
27:94963
28:97087
29:102761
30:119129
31:124178
32:125366
33:134144
34:138269
35:141184
36:144035
37:146938
38:156629
39:168178
40:170407
41:173828
42:205084
43:217733
44:225149
45:226588
46:241637
47:241925
48:256972
49:260942
50:280913
51:283172
52:288364
53:305623
54:311477
55:315578
56:316733
57:325027
58:338249
59:338854
60:357853
61:370777
62:372917
63:374287
64:380831
65:418604
66:423929
67:442333
68:466762
69:480502
70:505373
71:532687
72:592492
73:596551
74:602744
75:605903
76:606629
77:620995
78:631454
79:639913
80:665149
81:668821
82:678325
83:696961
84:709313
85:717242
86:727913
87:735194
88:774454
89:793189
90:817085
91:833702
92:836363
93:841457
94:923878
95:930236
96:932845
97:934373
98:937969
99:959585
100:960376
101:971356
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17,19,23,29]' :'/sdcard/0my_files/tmp/03tmp' --encoding:'ascii' | lineno   >  /sdcard/0my_files/tmp/04tmp
view /sdcard/0my_files/tmp/04tmp
1:629
2:737
3:892
4:1727
5:1949
6:3079
7:7415
8:12596
9:17401
10:59476
11:66935
12:67376
13:94963
14:119129
15:125366
16:134144
17:168178
18:226588
19:283172
20:316733
21:380831
22:442333
23:480502
24:505373
25:631454
26:665149
27:668821
28:678325
29:793189
30:817085
31:923878
]]
[[
===
py -m timeit --help

===
py -m timeit -n 3 -r 2 'import os; os.system("echo aaa");'
aaa
aaa
aaa
aaa
aaa
aaa
3 loops, best of 2: 11 msec per loop

===
py -m timeit -n 1 -r 1 'import os; os.system("echo aaa");'
aaa
1 loop, best of 1: 15.5 msec per loop

===
py -m timeit -n 1 -r 1 'import os; os.system("echo aaa | lineno    >  /sdcard/0my_files/tmp/05tmp");'
1 loop, best of 1: 1.1 sec per loop

view /sdcard/0my_files/tmp/05tmp
===
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[11,13,17,19,23,29]" =10    =11 ="10**5"  +str_with_int | lineno
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[11,13,17,19,23,29]" =10    =11 ="10**5" | lineno   >  /sdcard/0my_files/tmp/05tmp""");'
1 loop, best of 1: 3.02 sec per loop

view /sdcard/0my_files/tmp/05tmp
1:629
... ... #见下面:08tmp
13:94963
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[11,13,17,19,23,29]" =10    =11 ="10**6" | lineno   >  /sdcard/0my_files/tmp/06tmp""");'
1 loop, best of 1: 10.4 sec per loop

view /sdcard/0my_files/tmp/06tmp
1:629
... ... #见下面:08tmp
31:923878
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[11,13,17,19,23,29]" =10    =11 ="10**7" | lineno   >  /sdcard/0my_files/tmp/07tmp""");'
1 loop, best of 1: 88.6 sec per loop

view /sdcard/0my_files/tmp/07tmp
1:629
2:737
... ... #见下面:08tmp
95:9409919
96:9883324
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[11,13,17,19,23,29]" =10    =11 ="10**8" | lineno   >  /sdcard/0my_files/tmp/08tmp""");'
1 loop, best of 1: 932 sec per loop

du -h /sdcard/0my_files/tmp/08tmp
    8.0K
view /sdcard/0my_files/tmp/08tmp
1:629
2:737
3:892
4:1727
5:1949
6:3079
7:7415
8:12596
9:17401
10:59476
11:66935
12:67376
13:94963
14:119129
15:125366
16:134144
17:168178
18:226588
19:283172
20:316733
21:380831
22:442333
23:480502
24:505373
25:631454
26:665149
27:668821
28:678325
29:793189
30:817085
31:923878
32:1138961
33:1173425
34:1472153
35:1672067
36:1763068
37:1784045
38:1820345
39:1856216
40:1871176
41:1888468
42:2048078
43:2065747
44:2127784
45:2213564
46:2215643
47:2391617
48:2591899
49:2713699
50:2841112
51:2860087
52:3163954
53:3277297
54:3303266
55:3309053
56:3417305
57:3620398
58:3792758
59:3834997
60:3955205
61:4083934
62:4253645
63:4283543
64:4370126
65:4590605
66:4622179
67:4683163
68:4738777
69:4756322
70:4877335
71:5083447
72:5253817
73:5383408
74:5396239
75:5680435
76:5690102
77:5839439
78:6031247
79:6383324
80:6458132
81:6681655
82:7170556
83:7295662
84:7428808
85:7970602
86:8053816
87:8227769
88:8251546
89:8289914
90:8441903
91:8596414
92:9013996
93:9196321
94:9205087
95:9409919
96:9883324
97:10175629
98:10216601
99:10632467
100:10885379
101:10959454
102:11276068
103:11357446
104:11425424
105:11567425
106:11574014
107:11599138
108:11656831
109:11751004
110:11943272
111:12139975
112:12540937
113:13043141
114:13079957
115:13480535
116:13526129
117:13569973
118:13675045
119:13893869
120:13979471
121:15098789
122:15215441
123:15292741
124:15323131
125:15370625
126:15665905
127:15874385
128:15969953
129:16615136
130:16790974
131:17240878
132:17471995
133:17635586
134:18285548
135:18668639
136:18746795
137:19033867
138:19340668
139:19430714
140:20987825
141:21015181
142:21175409
143:21728939
144:22272095
145:22274606
146:22568437
147:23140876
148:25063645
149:25274603
150:25574945
151:25898465
152:25944865
153:25996156
154:26221547
155:27232823
156:27879356
157:28218916
158:28539554
159:28539776
160:29258492
161:29351498
162:30550808
163:30621515
164:30831284
165:31397794
166:31887745
167:31927214
168:33627361
169:33666865
170:33915062
171:33993178
172:34099439
173:34459556
174:34463243
175:34738792
176:35062205
177:35299528
178:35575198
179:35781052
180:36639437
181:36734512
182:36803317
183:36822367
184:37926383
185:38252566
186:38393605
187:38518765
188:38586272
189:39358814
190:39536696
191:40235513
192:40605169
193:41323655
194:42042694
195:42293207
196:42365863
197:42491065
198:43281074
199:43516181
200:43575016
201:45087131
202:45772408
203:46594735
204:48276646
205:48278219
206:49032689
207:49280431
208:49969415
209:51281231
210:51363302
211:53097661
212:53955604
213:53993864
214:54269843
215:54379072
216:54787624
217:54979508
218:55072729
219:55247512
220:55261888
221:57272602
222:57520354
223:58117489
224:58185844
225:58429667
226:58888994
227:59037661
228:59385629
229:59830321
230:60112427
231:60481147
232:60487372
233:61230919
234:61526629
235:61922377
236:62008979
237:62256424
238:62285851
239:62871359
240:63286222
241:63540676
242:63938774
243:63939139
244:64184044
245:64939246
246:65605847
247:65700283
248:66670909
249:66940808
250:67189916
251:67920667
252:68320066
253:68447521
254:68647921
255:69208976
256:69260026
257:70127992
258:70671976
259:70818373
260:71406388
261:71473568
262:71843033
263:72056533
264:72393872
265:72538372
266:72649492
267:72801298
268:73693643
269:73746013
270:73845815
271:74272496
272:74845847
273:74942197
274:75397169
275:75640421
276:75666722
277:76034344
278:76266101
279:76290946
280:76561286
281:76767415
282:77103973
283:77136313
284:77449219
285:77521784
286:78164131
287:78238456
288:78365914
289:78537614
290:78882431
291:79123199
292:79301111
293:79408591
294:80011292
295:80713534
296:80911598
297:81568915
298:81667267
299:81792446
300:82319941
301:82891841
302:83137966
303:83629942
304:83637839
305:83639455
306:83872856
307:84053719
308:84194098
309:84340918
310:84538355
311:84804043
312:85501174
313:86772809
314:89055406
315:89298809
316:89654036
317:89745415
318:91463185
319:91975262
320:92054908
321:92607106
322:92808091
323:93170045
324:93246085
325:93474181
326:93972878
327:94157173
328:94389923
329:94433866
330:94600253
331:94702915
332:94843391
333:95556362
334:95654086
335:96348407
336:96566735
337:97396652
338:97639652
339:98852821
340:98999735
341:99475928
342:99891629
===
grep ':6.*9$' /sdcard/0my_files/tmp/08tmp
1:629
26:665149
233:61230919
234:61526629
236:62008979
239:62871359
243:63939139
248:66670909
===
view others/app/termux/cmd.txt
column -s: -o $'\t' -t < /sdcard/0my_files/tmp/08tmp | colrm 1 8 | filter4prime | lineno
1:1949
2:3079
3:17401
4:119129
5:442333
6:668821
7:793189
8:1138961
9:1472153
10:2591899
11:2860087
12:3277297
13:4738777
14:6031247
15:10216601
16:10632467
17:10885379
18:12540937
19:21728939
20:22568437
21:27232823
22:49032689
23:49280431
24:58429667
25:59037661
26:59830321
27:60112427
28:60481147
29:61526629
30:70818373
31:73693643
32:74845847
33:77449219
34:78164131
35:79301111
36:79408591
37:86772809
38:89298809
39:93474181
40:98852821
==>>:
5:442333 #接近中间纟六位数
6:668821 #接近中间纟六位数
7:793189 #最大纟六位数
14:6031247 #最大纟七位数
23:49280431 #接近中间纟八位数
24:58429667 #接近中间纟八位数
29:61526629 #6.*9 #无8.*3,4.*7 #不可能有:.*[024568]
===
view others/app/termux/cmd.txt
for s in $(column -s: -o $'\t' -t < /sdcard/0my_files/tmp/08tmp | colrm 1 8) ; do echo $s ; done
for s in $(column -s: -o $'\t' -t < /sdcard/0my_files/tmp/08tmp | colrm 1 8) ; do factor $s ; done
629: 17 37
737: 11 67
892: 2 2 223
1727: 11 157
1949: 1949
3079: 3079
7415: 5 1483
12596: 2 2 47 67
17401: 17401
59476: 2 2 14869
66935: 5 11 1217
67376: 2 2 2 2 4211
94963: 11 89 97
119129: 119129
125366: 2 62683
134144: 2 2 2 2 2 2 2 2 2 2 131
168178: 2 84089
226588: 2 2 37 1531
283172: 2 2 70793
316733: 23 47 293
380831: 11 89 389
442333: 442333
480502: 2 11 21841
505373: 11 45943
631454: 2 157 2011
665149: 37 17977
668821: 668821
678325: 5 5 43 631
793189: 793189
817085: 5 163417
923878: 2 571 809
1138961: 1138961
1173425: 5 5 11 17 251
1472153: 1472153
1672067: 37 45191
1763068: 2 2 367 1201
1784045: 5 509 701
1820345: 5 364069
1856216: 2 2 2 37 6271
1871176: 2 2 2 67 3491
1888468: 2 2 173 2729
2048078: 2 101 10139
2065747: 31 37 1801
2127784: 2 2 2 47 5659
2213564: 2 2 499 1109
2215643: 109 20327
2391617: 43 55619
2591899: 2591899
2713699: 89 30491
2841112: 2 2 2 355139
2860087: 2860087
3163954: 2 103 15359
3277297: 3277297
3303266: 2 179 9227
3309053: 11 300823
3417305: 5 683461
3620398: 2 1810199
3792758: 2 1201 1579
3834997: 23 166739
3955205: 5 149 5309
4083934: 2 2041967
4253645: 5 11 77339
4283543: 11 23 16931
4370126: 2 29 75347
4590605: 5 73 12577
4622179: 1321 3499
4683163: 419 11177
4738777: 4738777
4756322: 2 353 6737
4877335: 5 263 3709
5083447: 461 11027
5253817: 83 63299
5383408: 2 2 2 2 336463
5396239: 613 8803
5680435: 5 1136087
5690102: 2 11 47 5503
5839439: 31 188369
6031247: 6031247
6383324: 2 2 1595831
6458132: 2 2 1614533
6681655: 5 101 101 131
7170556: 2 2 593 3023
7295662: 2 11 53 6257
7428808: 2 2 2 59 15739
7970602: 2 71 56131
8053816: 2 2 2 373 2699
8227769: 11 747979
8251546: 2 89 151 307
8289914: 2 17 157 1553
8441903: 227 37189
8596414: 2 181 23747
9013996: 2 2 2253499
9196321: 73 263 479
9205087: 127 72481
9409919: 73 128903
9883324: 2 2 11 17 73 181
10175629: 37 53 5189
10216601: 10216601
10632467: 10632467
10885379: 10885379
10959454: 2 11 11 11 23 179
11276068: 2 2 53 53189
11357446: 2 23 37 6673
11425424: 2 2 2 2 461 1549
11567425: 5 5 462697
11574014: 2 23 251609
11599138: 2 5799569
11656831: 491 23741
11751004: 2 2 2937751
11943272: 2 2 2 11 135719
12139975: 5 5 23 43 491
12540937: 12540937
13043141: 53 246097
13079957: 11 29 131 313
13480535: 5 2696107
13526129: 2917 4637
13569973: 1753 7741
13675045: 5 2735009
13893869: 11 1263079
13979471: 11 1270861
15098789: 71 109 1951
15215441: 383 39727
15292741: 17 59 79 193
15323131: 521 29411
15370625: 5 5 5 5 24593
15665905: 5 3133181
15874385: 5 337 9421
15969953: 17 137 6857
16615136: 2 2 2 2 2 71 71 103
16790974: 2 8395487
17240878: 2 151 57089
17471995: 5 3494399
17635586: 2 569 15497
18285548: 2 2 37 123551
18668639: 11 1697149
18746795: 5 83 199 227
19033867: 1931 9857
19340668: 2 2 281 17207
19430714: 2 2689 3613
20987825: 5 5 757 1109
21015181: 11 1910471
21175409: 113 187393
21728939: 21728939
22272095: 5 409 10891
22274606: 2 149 74747
22568437: 22568437
23140876: 2 2 11 17 30937
25063645: 5 5012729
25274603: 613 41231
25574945: 5 11 464999
25898465: 5 61 84913
25944865: 5 317 16369
25996156: 2 2 6499039
26221547: 11 11 59 3673
27232823: 27232823
27879356: 2 2 6969839
28218916: 2 2 11 193 3323
28539554: 2 14269777
28539776: 2 2 2 2 2 2 2 222967
29258492: 2 2 223 32801
29351498: 2 11 103 12953
30550808: 2 2 2 23 23 7219
30621515: 5 6124303
30831284: 2 2 11 11 11 5791
31397794: 2 59 266083
31887745: 5 6377549
31927214: 2 11 1451237
33627361: 2311 14551
33666865: 5 709 9497
33915062: 2 16957531
33993178: 2 317 53617
34099439: 11 607 5107
34459556: 2 2 8614889
34463243: 37 139 6701
34738792: 2 2 2 11 394759
35062205: 5 113 62057
35299528: 2 2 2 11 367 1093
35575198: 2 17787599
35781052: 2 2 8945263
36639437: 17 23 83 1129
36734512: 2 2 2 2 53 43319
36803317: 17 2164901
36822367: 263 140009
37926383: 11 3447853
38252566: 2 11 29 59957
38393605: 5 37 37 71 79
38518765: 5 7703753
38586272: 2 2 2 2 2 23 103 509
39358814: 2 11 1789037
39536696: 2 2 2 17 290711
40235513: 149 270037
40605169: 11 37 99767
41323655: 5 8264731
42042694: 2 79 266093
42293207: 11 31 73 1699
42365863: 1783 23761
42491065: 5 67 126839
43281074: 2 21640537
43516181: 37 1176113
43575016: 2 2 2 47 115891
45087131: 233 193507
45772408: 2 2 2 11 157 3313
46594735: 5 11 29 131 223
48276646: 2 11 139 15787
48278219: 11 23 190823
49032689: 49032689
49280431: 49280431
49969415: 5 109 277 331
51281231: 17 3016543
51363302: 2 25681651
53097661: 1439 36899
53955604: 2 2 13488901
53993864: 2 2 2 607 11119
54269843: 643 84401
54379072: 2 2 2 2 2 2 11 77243
54787624: 2 2 2 6848453
54979508: 2 2 13744877
55072729: 197 279557
55247512: 2 2 2 37 186647
55261888: 2 2 2 2 2 2 11 78497
57272602: 2 47 609283
57520354: 2 28760177
58117489: 719 80831
58185844: 2 2 1567 9283
58429667: 58429667
58888994: 2 109 270133
59037661: 59037661
59385629: 37 1605017
59830321: 59830321
60112427: 60112427
60481147: 60481147
60487372: 2 2 11 1374713
61230919: 29 2111411
61526629: 61526629
61922377: 11 5629307
62008979: 17 283 12889
62256424: 2 2 2 79 98507
62285851: 31 103 19507
62871359: 821 76579
63286222: 2 31643111
63540676: 2 2 337 47137
63938774: 2 31969387
63939139: 11 5812649
64184044: 2 2 17 233 4051
64939246: 2 32469623
65605847: 37 1773131
65700283: 11 29 205957
66670909: 167 399227
66940808: 2 2 2 11 79 9629
67189916: 2 2 17 421 2347
67920667: 6079 11173
68320066: 2 34160033
68447521: 37 1849933
68647921: 17 4038113
69208976: 2 2 2 2 263 16447
69260026: 2 11 241 13063
70127992: 2 2 2 11 17 46877
70671976: 2 2 2 439 20123
70818373: 70818373
71406388: 2 2 163 109519
71473568: 2 2 2 2 2 43 127 409
71843033: 643 111731
72056533: 83 868151
72393872: 2 2 2 2 71 63727
72538372: 2 2 18134593
72649492: 2 2 31 585883
72801298: 2 5669 6421
73693643: 73693643
73746013: 11 809 8287
73845815: 5 389 37967
74272496: 2 2 2 2 1427 3253
74845847: 74845847
74942197: 11 11 661 937
75397169: 151 233 2143
75640421: 233 324637
75666722: 2 31 53 23027
76034344: 2 2 2 47 202219
76266101: 47 109 14887
76290946: 2 38145473
76561286: 2 2017 18979
76767415: 5 37 414959
77103973: 59 263 4969
77136313: 1789 43117
77449219: 77449219
77521784: 2 2 2 2221 4363
78164131: 78164131
78238456: 2 2 2 23 47 83 109
78365914: 2 11 1093 3259
78537614: 2 59 665573
78882431: 17 4640143
79123199: 2377 33287
79301111: 79301111
79408591: 79408591
80011292: 2 2 20002823
80713534: 2 11 11 59 5653
80911598: 2 2039 19841
81568915: 5 409 39887
81667267: 11 397 18701
81792446: 2 31 647 2039
82319941: 11 683 10957
82891841: 53 89 17573
83137966: 2 41568983
83629942: 2 11 3801361
83637839: 89 89 10559
83639455: 5 16727891
83872856: 2 2 2 31 338197
84053719: 47 1788377
84194098: 2 17 2476297
84340918: 2 61 97 7127
84538355: 5 11 1537061
84804043: 1223 69341
85501174: 2 11 3886417
86772809: 86772809
89055406: 2 11 4047973
89298809: 89298809
89654036: 2 2 22413509
89745415: 5 17949083
91463185: 5 11 601 2767
91975262: 2 433 106207
92054908: 2 2 11 71 79 373
92607106: 2 31 1493663
92808091: 29 3200279
93170045: 5 953 19553
93246085: 5 577 32321
93474181: 93474181
93972878: 2 5581 8419
94157173: 11 193 44351
94389923: 37 2551079
94433866: 2 59 800287
94600253: 11 8600023
94702915: 5 18940583
94843391: 17 67 83269
95556362: 2 11 11 394861
95654086: 2 11 281 15473
96348407: 37 2604011
96566735: 5 191 101117
97396652: 2 2 24349163
97639652: 2 2 11 2219083
98852821: 98852821
98999735: 5 223 88789
99475928: 2 2 2 12434491
99891629: 79 1264451
==>>:
629: 17 37
737: 11 67
67376: 2 2 2 2 4211
505373: 11 45943
69260026: 2 11 241 13063
79301111: 79301111
58888994: 2 109 270133
53993864: 2 2 2 607 11119
66670909: 167 399227
67920667: 6079 11173
===
grep ':4.*7$' /sdcard/0my_files/tmp/08tmp
68:4738777
195:42293207
===
grep ':7.*4$' /sdcard/0my_files/tmp/08tmp
277:76034344
285:77521784
288:78365914
289:78537614
===
grep ':9.*6$' /sdcard/0my_files/tmp/08tmp
92:9013996
321:92607106
329:94433866
334:95654086
===
grep ':2.*5$' /sdcard/0my_files/tmp/08tmp
140:20987825
144:22272095
148:25063645
150:25574945
151:25898465
152:25944865
===
grep ':5.*2$' /sdcard/0my_files/tmp/08tmp
76:5690102
210:51363302
215:54379072
219:55247512
221:57272602
===
grep ':3.*8$' /sdcard/0my_files/tmp/08tmp
57:3620398
58:3792758
162:30550808
171:33993178
177:35299528
178:35575198
===
grep ':8.*3$' /sdcard/0my_files/tmp/08tmp
90:8441903
311:84804043
===
grep ':.*0$' /sdcard/0my_files/tmp/08tmp
    <None>
===
grep ':.*1$' /sdcard/0my_files/tmp/08tmp | lineno
1:9:17401
2:21:380831
3:27:668821
4:32:1138961
5:93:9196321
6:98:10216601
7:108:11656831
8:113:13043141
9:120:13979471
10:122:15215441
11:123:15292741
12:124:15323131
13:141:21015181
14:168:33627361
15:199:43516181
16:201:45087131
17:207:49280431
18:209:51281231
19:211:53097661
20:227:59037661
21:229:59830321
22:238:62285851
23:253:68447521
24:254:68647921
25:275:75640421
26:278:76266101
27:286:78164131
28:290:78882431
29:292:79301111
30:293:79408591
31:300:82319941
32:301:82891841
33:322:92808091
34:325:93474181
35:332:94843391
36:339:98852821
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17,19,23,29,31]' :'/sdcard/0my_files/tmp/08tmp' --encoding:'ascii' | lineno   >  /sdcard/0my_files/tmp/081tmp
du -h /sdcard/0my_files/tmp/081tmp
    4.0K
view /sdcard/0my_files/tmp/081tmp
1:737
2:1727
3:3079
4:17401
5:226588
6:316733
7:631454
8:1472153
9:1672067
10:1784045
11:1888468
12:2391617
13:2591899
14:3303266
15:3620398
16:3792758
17:3834997
18:4283543
19:4370126
20:8227769
21:8289914
22:8441903
23:9883324
24:11599138
25:11943272
26:12540937
27:13569973
28:15370625
29:15665905
30:15874385
31:18668639
32:19033867
33:21175409
34:21728939
35:33666865
36:33915062
37:33993178
38:34099439
39:35062205
40:35299528
41:36734512
42:43575016
43:49280431
44:53993864
45:54269843
46:58888994
47:59385629
48:60481147
49:60487372
50:61922377
51:64939246
52:65700283
53:68447521
54:69208976
55:73693643
56:73746013
57:73845815
58:74272496
59:74942197
60:77103973
61:77136313
62:81667267
63:89055406
64:91463185
65:92607106
66:93246085
67:94843391
68:95556362
69:98999735
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17,19,23,29,31,37]' :'/sdcard/0my_files/tmp/081tmp' --encoding:'ascii' | lineno   >  /sdcard/0my_files/tmp/082tmp
view /sdcard/0my_files/tmp/082tmp
1:1727
2:17401
3:226588
4:631454
5:1472153
6:1672067
7:1784045
8:3792758
9:3834997
10:8227769
11:8289914
12:9883324
13:19033867
14:33993178
15:81667267
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17,19,23,29,31,37,41]' :'/sdcard/0my_files/tmp/082tmp' --encoding:'ascii' | lineno   >  /sdcard/0my_files/tmp/083tmp
view /sdcard/0my_files/tmp/083tmp
1:1727
2:17401
3:8227769
4:9883324
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17,19,23,29,31,37,41,43]' :'/sdcard/0my_files/tmp/083tmp' --encoding:'ascii' | lineno   >  /sdcard/0my_files/tmp/084tmp
view /sdcard/0my_files/tmp/084tmp
1:17401
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[11,13,17,19,23,29,31,37,41,43,47]' :'/sdcard/0my_files/tmp/084tmp' --encoding:'ascii'
    <None>

===
===
]]
[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]
    <<== view ../../python3_src/nn_ns/math_nn/numbers/prime_number.py
[17,19,23,29,31,37,41,43]%16 == {1,3..=15}


[[
见上面:08tmp#十进制:10**8
这里 增加到12进制:12**8
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[13,17,19]" =12    =13 ="12**3" --imay_radix4beyond=10 +int_vs_str +str_with_int | lineno   >  /sdcard/0my_files/tmp/12_3tmp""");'
1 loop, best of 1: 1.84 sec per loop
view /sdcard/0my_files/tmp/12_3tmp
1:'[118]9A'
2:'[129]A9'
3:'[479]33B'
4:'[573]3B9'
5:'[1378]96A'
6:'[1431]9B3'
7:'[1447]A07'
8:'[1493]A45'
9:'[1499]A4B'
10:'[1521]A69'
11:'[1612]B24'
12:'[1651]B57'
13:'[1703]B9B'
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31,37,41,43]" =12    =13 ="12**4" --imay_radix4beyond=10 +int_vs_str +str_with_int | lineno   >  /sdcard/0my_files/tmp/12_4tmp""");'
1 loop, best of 1: 2.09 sec per loop
view /sdcard/0my_files/tmp/12_4tmp
1:'[17861]A405'
    only one
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[13,17,19]" =12    =13 ="12**5" --imay_radix4beyond=10 | lineno   >  /sdcard/0my_files/tmp/12_5tmp""");'
1 loop, best of 1: 3.8 sec per loop
view /sdcard/0my_files/tmp/12_5tmp
1:118
... ...
496:248404

===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[13,17,19]' :'/sdcard/0my_files/tmp/12_5tmp' --encoding:'ascii' --mid_radix=12 | lineno
1:118
... ...
496:248404
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[13,17,19,23]' :'/sdcard/0my_files/tmp/12_5tmp' --encoding:'ascii' --mid_radix=12 | lineno
1:129
... ...
155:248404
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[13,17,19,23,29]' :'/sdcard/0my_files/tmp/12_5tmp' --encoding:'ascii' --mid_radix=12 | lineno
1:479
... ...
40:245249
==:
1:479
2:1378
3:1499
4:1861
5:2731
6:3313
7:4901
8:5146
9:5602
10:6526
11:13768
12:17861
13:20032
14:27886
15:62011
16:101204
17:107847
18:110337
19:110493
20:110543
21:118782
22:123813
23:126358
24:135538
25:165477
26:174667
27:182157
28:186212
29:189908
30:191074
31:209337
32:223744
33:228163
34:229391
35:230542
36:233116
37:239198
38:239804
39:239941
40:245249
===
py_adhoc_call   script.搜索冫无重复十进制位数字型素数乊位数   ,str.iter_read_last_decimal_digits_per_line__if_isprime_for_all_bases_ ='[13,17,19,23,29,31]' :'/sdcard/0my_files/tmp/12_5tmp' --encoding:'ascii' --mid_radix=12 | lineno
1:1861
2:4901
3:17861
4:27886
5:110493
6:110543
7:135538
8:191074
9:209337
===
xxx:py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[13,17,19,23,29]" =12    =13 ="12**8" --imay_radix4beyond=10 | lineno   >  /sdcard/0my_files/tmp/12_8tmp""");'
===
[17,19,23,29,31,37,41,43]
12**4
-1
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,str.搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31,37,41,43]" =12    =13 ="12**4" --imay_radix4beyond=-1 +int_vs_str +str_with_int +to_swap_fmt4str_with_int | lineno   >  /sdcard/0my_files/tmp/12_44tmp""");'
view /sdcard/0my_files/tmp/12_44tmp
1:(A405)17861
    only one
===
[17,19,23,29,31,37,41,43]
12**8
-1
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,str.搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31,37,41,43]" =12    =13 ="12**8" --imay_radix4beyond=-1 +int_vs_str +str_with_int +to_swap_fmt4str_with_int | lineno   >  /sdcard/0my_files/tmp/12_88tmp""");'
1 loop, best of 1: 5.84e+03 sec per loop
view /sdcard/0my_files/tmp/12_88tmp
1:(A405)17861
... ...
23:(A32B0131)368001973
    2位数:0:0
    3位数:0:0
    4位数:1:0
    5位数:1:1
    6位数:0:0
    7位数:4:1
    8位数:17:5
==:
1:(A405)17861
2:(17401)33409
3:(135AB94)3855136
4:(4060102)12068498
5:(9931A23)29178747
6:(B34A40B)33693131
7:(1027371A)36480838
8:(120742A3)41956251
9:(1986289A)64825462
10:(2058AB41)73092577
11:(21373463)75547083
12:(226518A3)79235259
13:(3439A134)120389944
14:(347468AB)121275779
15:(40428023)144377883
16:(40858585)145436213
17:(484439A1)168299977
18:(57781814)201971536
19:(5B5A19B9)213459549
20:(6869A224)240575932
21:(82898927)294818863
22:(8355B542)296980034
23:(A32B0131)368001973
===
grep -P '\(\d*\)' /sdcard/0my_files/tmp/12_88tmp
2:(17401)33409
4:(4060102)12068498
11:(21373463)75547083
15:(40428023)144377883
16:(40858585)145436213
18:(57781814)201971536
21:(82898927)294818863
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,str.搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31]" =12    =13 ="12**5" --imay_radix4beyond=-1 +int_vs_str +str_with_int +to_swap_fmt4str_with_int | lineno   >  /sdcard/0my_files/tmp/12_55tmp""");'
1 loop, best of 1: 4.56 sec per loop
view /sdcard/0my_files/tmp/12_55tmp
1:(3A)46
... ...
56:(BB77B)248207
    见下面:12_56tmp前56行
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,str.搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31]" =12    =13 ="12**6" --imay_radix4beyond=-1 +int_vs_str +str_with_int +to_swap_fmt4str_with_int | lineno   >  /sdcard/0my_files/tmp/12_56tmp""");'
1 loop, best of 1: 34.4 sec per loop
view /sdcard/0my_files/tmp/12_56tmp
1:(3A)46
... ...
237:(BB272A)2969746
==:
1:(3A)46
2:(A3)123
3:(274)376
4:(737)1051
5:(10B1)1861
6:(1727)2767
7:(2A05)4901
8:(3079)5277
9:(3095)5297
10:(3428)5792
11:(3A33)6663
12:(4A5A)8422
13:(4BBB)8639
14:(9497)16243
15:(A405)17861
16:(10358)21236
17:(109B2)22166
18:(11803)23619
19:(1417A)27886
20:(17401)33409
21:(17995)34241
22:(18176)34794
23:(1B746)40806
24:(2B091)60589
25:(34033)69159
26:(38677)76987
27:(38686)76998
28:(3A396)80034
29:(3A916)80802
30:(52097)107251
31:(53483)109539
32:(53995)110273
33:(53B39)110493
34:(53B7B)110543
35:(5A251)121309
36:(6615B)134999
37:(6652A)135538
38:(70862)146378
39:(7989A)161974
40:(84377)173323
41:(84746)173862
42:(8760A)178858
43:(89B4B)183083
44:(8B879)186141
45:(926AA)191074
46:(96062)197066
47:(A1189)209337
48:(A37A7)213679
49:(A5914)217312
50:(A8742)222242
51:(B25B8)232412
52:(B2A26)233022
53:(B2B14)233152
54:(B4428)235616
55:(B701A)240214
56:(BB77B)248207
57:(1026B9)253293
58:(1043AB)256307
59:(105128)257648
60:(107B75)262601
61:(1167BB)281087
62:(116975)281321
63:(121573)292839
64:(1239A4)296908
65:(13485A)319174
66:(136027)321439
67:(1384B2)325574
68:(1421A1)335497
69:(157B7A)366286
70:(1643A5)380717
71:(164BBA)381886
72:(1741B7)401179
73:(175451)403261
74:(1773B2)406646
75:(17901B)409559
76:(184B58)423284
77:(186097)425203
78:(1867B4)426232
79:(188662)429482
80:(1901B9)435741
81:(196786)446934
82:(19B5BA)455326
83:(1A5229)465153
84:(1B8746)491814
85:(1B8818)491924
86:(1B8B0A)492346
87:(1B9859)493701
88:(1B9958)493844
89:(1BAA09)495657
90:(201455)500033
91:(205622)507194
92:(226588)550328
93:(241732)583382
94:(252743)605859
95:(26B987)642487
96:(270325)643277
97:(2776A5)655901
98:(27976A)659458
99:(279982)659762
100:(28655B)674711
101:(28B295)682961
102:(291728)687056
103:(29488A)692458
104:(29B564)704092
105:(2B1698)728468
106:(304A1B)754871
107:(309665)762989
108:(313259)772773
109:(314599)774981
110:(316733)778647
111:(320707)788983
112:(320B3A)789598
113:(325B19)798213
114:(330A12)810158
115:(363199)876357
116:(36BA49)891417
117:(3702B6)892074
118:(371053)893439
119:(379471)907861
120:(382745)916901
121:(39A979)951789
122:(3A0682)954818
123:(3A4912)962078
124:(3A5A27)963967
125:(3A6936)965562
126:(3BABA8)993584
127:(3BB74B)994667
128:(4026A9)999777
129:(404645)1003157
130:(407521)1008169
131:(4190B4)1031752
132:(421084)1038628
133:(432BBA)1062718
134:(4570BA)1111246
135:(47975B)1157111
136:(47B513)1160223
137:(4863AA)1172146
138:(48855B)1175831
139:(489589)1177593
140:(49922B)1197827
141:(4A4913)1210911
142:(4AB837)1222891
143:(4B0B0B)1225019
144:(4B1337)1225627
145:(4B1456)1225794
146:(4B4433)1230951
147:(4B5272)1232438
148:(4B8A26)1238718
149:(51A64B)1283099
150:(51AB73)1283847
151:(542758)1331636
152:(55110B)1349723
153:(559B52)1365038
154:(575B87)1399639
155:(585B8A)1420378
156:(586013)1420431
157:(58608A)1420522
158:(5A4A3B)1459919
159:(5A6497)1462579
160:(5B0951)1473613
161:(5B098A)1473658
162:(602261)1496809
163:(61281B)1518359
164:(6259AB)1544531
165:(631454)1557568
166:(641659)1578597
167:(659306)1612662
168:(678316)1652418
169:(68B7A5)1679021
170:(694B85)1688213
171:(69A4B3)1697607
172:(6A4887)1708519
173:(6B357B)1727087
174:(6BABAB)1740083
175:(702B74)1746952
176:(70824A)1755994
177:(724B85)1791893
178:(73B037)1823083
179:(7465B4)1835992
180:(752621)1849849
181:(76B973)1886631
182:(772B37)1892059
183:(78683B)1919279
184:(796AB4)1940392
185:(79A614)1946608
186:(7A355B)1955159
187:(7ABA54)1969696
188:(811171)2013349
189:(813649)2017497
190:(815357)2020531
191:(829112)2047838
192:(82A467)2050063
193:(83241B)2056919
194:(834998)2061188
195:(845B54)2083888
196:(865192)2123966
197:(866254)2125792
198:(894538)2184956
199:(8B3B77)2225611
200:(8B3B9B)2225639
201:(8B5256)2227746
202:(8B5328)2227856
203:(8B8A82)2234114
204:(914122)2267306
205:(919273)2276151
206:(919868)2277008
207:(92B214)2300272
208:(92B59B)2300807
209:(944714)2330368
210:(94A086)2339814
211:(976A27)2396479
212:(990A96)2427666
213:(9954A4)2435452
214:(9B1286)2469702
215:(9B5981)2477617
216:(A03B61)2495161
217:(A1181A)2511958
218:(A30556)2551314
219:(A3B814)2570704
220:(A47611)2584237
221:(A4B048)2590328
222:(A50A06)2593446
223:(A55AA3)2602203
224:(A62148)2616392
225:(A69864)2629516
226:(A7B4A1)2653177
227:(AA5309)2704761
228:(B12A23)2762811
229:(B47469)2832849
230:(B57266)2853294
231:(B5AA92)2859662
232:(B64B74)2870152
233:(B72896)2887026
234:(B77394)2894944
235:(B853B3)2912247
236:(B99B3A)2940958
237:(BB272A)2969746
===
py -m timeit -n 1 -r 1 'import os; os.system(r"""py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,str.搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31]" =12    =13 ="12**8" --imay_radix4beyond=-1 +int_vs_str +str_with_int +to_swap_fmt4str_with_int | lineno   >  /sdcard/0my_files/tmp/12_58tmp""");'
du -h /sdcard/0my_files/tmp/12_58tmp
    160K
view /sdcard/0my_files/tmp/12_58tmp
1:(3A)46
... ...
6709:(BB96BB59)429380277
===
cp -iv /sdcard/0my_files/tmp/12_58tmp script/搜索冫某进制表达数乊多种进制解读皆为素数-radixes_17_31-pow_12_8-total_6709.out.txt
grep -P '\(\d*\)' script/搜索冫某进制表达数乊多种进制解读皆为素数-radixes_17_31-pow_12_8-total_6709.out.txt | lineno
1:3:(274)376
... ...
1613:5833:(99867602)351488162
===
===
12**8 # ~= 6000seconds ~= 100minutes
>>> 16**8/10**8
42.94967296
>>> 16**8/12**8
9.988721231519586
>>> 16**8/12**8 *100/60 # ~= 16hours
16.64786871919931
>>> 16**6/10**8
0.16777216
>>> 16**7/10**8
2.68435456
>>> 16**7/12**8 *100/60 # ~= 1hours
1.0404917949499568
>>> 16**6/12**8 *100/60
0.0650307371843723
>>> 16**6/12**8 *100 # ~= 4minutes
3.9018442310623382
>>> 10**8/12**8 *100 # ~= 23minutes
23.256803936137786



mkdir /sdcard/0my_files/tmp/out多种进制解读皆为素数/
mkdir /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8
e ../../python3_src/nn_ns/app/append_eof.py
e ../../python3_src/seed/io/continue_io__folder.py
from seed.io.continue_io__folder import IFolderBasedContinueJob__mk_result5idx4task
py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   @_八位十六进制数囗后续五种素进制解读皆为素数囗断点重启冫拆分成两百五十六个串行子任务 +to_postpone_KeyboardInterrupt_until_subtask_switchover --may_prompt_string4postpone_KeyboardInterrupt_until_subtask_switchover:$'\n\n... postpone_KeyboardInterrupt_until_subtask_switchover ...\n\n'

view others/app/termux/shell_string_expansion.txt
cat /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8/16_56_{{0..9},{A..F}}{{0..9},{A..F}}out | grep "[^']\+" -o | lineno  >  /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp
    1:(2)2
    2:(3)3
    ... ...
    61813:(FFFC900D)4294742029
    61814:(FFFD7A44)4294801988
cat /sdcard/0my_files/tmp/0tmp | 7z a  -si   script/搜索冫某进制表达数乊多种进制解读皆为素数.py.八位十六进制数囗后续五种素进制解读皆为素数.out.7z
7z e  -so   script/搜索冫某进制表达数乊多种进制解读皆为素数.py.八位十六进制数囗后续五种素进制解读皆为素数.out.7z   | diff /sdcard/0my_files/tmp/0tmp -  -s
    => Files /sdcard/0my_files/tmp/0tmp and - are identical
grep -P '.*[(].*[)]' -o  < script/搜索冫某进制表达数乊多种进制解读皆为素数-radixes_17_31-pow_12_8-total_6709.out.txt  >  /sdcard/0my_files/tmp/1tmp
    !! [pow_12_8:radix4show==12]
    !! [八位十六进制数:radix4show==16]
    => remove tail decimal
7z e  -so   script/搜索冫某进制表达数乊多种进制解读皆为素数.py.八位十六进制数囗后续五种素进制解读皆为素数.out.7z  | grep '[C-F]' -v |  grep -P '[(].+[^0][)]' -o | grep '' -n  | diff /sdcard/0my_files/tmp/1tmp -  -s
    => Files /sdcard/0my_files/tmp/1tmp and - are identical
    !! contains 2,3,5,7,B,D,10
    => remove 7 head lines
du -h script/搜索冫某进制表达数乊多种进制解读皆为素数.py.八位十六进制数囗后续五种素进制解读皆为素数.out.7z
    404K
du -h /sdcard/0my_files/tmp/0tmp
    1.6M
du -h /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8/
    2.0M
==>>:
[[
usage4output:
7z e  -so   script/搜索冫某进制表达数乊多种进制解读皆为素数.py.八位十六进制数囗后续五种素进制解读皆为素数.out.7z   |  grep -P '(?<=[(])[0-9A-F]*(?=[)])' -o  | more
<<==:
7z e  -so   script/搜索冫某进制表达数乊多种进制解读皆为素数.py.八位十六进制数囗后续五种素进制解读皆为素数.out.7z   |  grep -P '(?<=[(])[0-9A-F]*(?=[)])' -o | lineno
<==>
7z e  -so   script/搜索冫某进制表达数乊多种进制解读皆为素数.py.八位十六进制数囗后续五种素进制解读皆为素数.out.7z   |  gawk 'BEGIN { FS = "[()]" ; OFS = ":" }    { print FNR, $2 }'

$ echo $'aaa(0A)zzz\n()777\n...(FFE)' | grep '([0-9A-F]*)' -o
(0A)
()
(FFE)
$ echo $'aaa(0A)zzz\n()777\n...(FFE)' | grep -P '(?<=[(])[0-9A-F]*(?=[)])' -o
0A
FFE
    #miss ""
]]


<<==:
view /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8/16_56_00out
du -h /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8/

for i in {0..255} ; do echo $(printf '%02X' $i) ; done
for i in {0..255} ; do echo /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8/16_56_$(printf '%02X' $i)out ; done
cat $(for i in {0..255} ; do echo /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8/16_56_$(printf '%02X' $i)out ; done) | grep "[^']\+" -o | lineno >  /sdcard/0my_files/tmp/0tmp

echo {0,1,2}{3..4}
03 04 13 14 23 24

echo {0..2}{3..4}
03 04 13 14 23 24

echo { {0..9} {A..F} }
{ 0 1 2 3 4 5 6 7 8 9 A B C D E F }

echo {  { {0..9} {A..F} }{ {0..9} {A..F} }  }
{ { 0 1 2 3 4 5 6 7 8 9 A B C D E F }{ 0 1 2 3 4 5 6 7 8 9 A B C D E F } }

echo { {0..9}, {A..F}, }
{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, }

echo { {0..9}, {A..F}, }{ {0..9}, {A..F}, }
{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, }{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, }

echo {{0..9},{A..F},}
0 1 2 3 4 5 6 7 8 9 A B C D E F
echo {{0..9},{A..F}}
0 1 2 3 4 5 6 7 8 9 A B C D E F
echo {{0..9},{A..F}}{{0..9},{A..F}}
00 01 ... ... FE FF

echo /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8/16_56_{{0..9},{A..F}}{{0..9},{A..F}}out
cat /sdcard/0my_files/tmp/out多种进制解读皆为素数/pow16_8/16_56_{{0..9},{A..F}}{{0..9},{A..F}}out | grep "[^']\+" -o | lineno  >  /sdcard/0my_files/tmp/0tmp



<<==:
for i in range(0x100):
    print(f'py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,str.搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31]" =16     ="0x{i:0>2X}*16**6"  ="0x{(i+1):0>2X}*16**6" --imay_radix4beyond=-1 +int_vs_str +str_with_int +to_swap_fmt4str_with_int | lineno   >  /sdcard/0my_files/tmp/out多种进制解读皆为素数/16_56_{i:0>2X}tmp')

for i in range(0x10):
    print(f'py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,str.搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31]" =16     ="0x{i:0>1X}*16**7"  ="0x{(i+1):0>1X}*16**7" --imay_radix4beyond=-1 +int_vs_str +str_with_int +to_swap_fmt4str_with_int | lineno   >  /sdcard/0my_files/tmp/out多种进制解读皆为素数/16_57_{i:0>1X}_tmp')

===
16**7
===
16**6
===
===
]]



#]]]'''
__all__ = r'''
搜索冫某进制表达数乊多种进制解读皆为素数扌
    inc_digits__emplace_
    uint5or_str_
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from seed.math.combination__stated__radix_repr_uint import RadixNumerationIterator
#RadixNumerationIterator.mk5params_(12, 2, 12**8, imay_radix4beyond=10, _may_digits4begin_=None, _may_digits4end_=None)
    #RadixNumerationIterator.mk5params_(cls, radix, begin, may_end, /, *, imay_radix4beyond, _may_digits4begin_, _may_digits4end_):

from itertools import chain, repeat
from seed.iters.are_two_sorted_iterables_disjoint import are_two_sorted_iterables_disjoint

from seed.int_tools.digits.uint2radix_repr import uint2radix_repr__big_endian
from seed.int_tools.digits.radix_repr2uint import radix_repr2uint__big_endian
from seed.int_tools.digits.generic_base85 import b85_alphabet
_tbl_85 = b85_alphabet.decode('ascii')
from seed.math.prime_gens import tabulate_may_all_prime_factors4uint_lt_
#from seed.math.factor_pint_by_trial_division_ import factor_pint_by_trial_division_, factor_pint_by_trial_division_ex_


from seed.tiny import fst, snd
from seed.tiny_.check import check_type_is, check_int_ge
from seed.math.prime_gens import is_strong_pseudoprime__basis_, is_prime__using_A014233_, is_prime__le_pow2_81_, is_prime__tribool_, Case4is_prime__tribool_
_max1 = is_prime__using_A014233_.upperbound
___end_mark_of_excluded_global_names__0___ = ...

class _mixins:
    r'''[[[
    'IFolderBasedContinueJob__mk_result5idx4task'
for i in range(0x100):
    print(f'py_adhoc_call   script.搜索冫某进制表达数乊多种进制解读皆为素数   ,str.搜索冫某进制表达数乊多种进制解读皆为素数扌 ="[17,19,23,29,31]" =16     ="0x{i:0>2X}*16**6"  ="0x{(i+1):0>2X}*16**6" --imay_radix4beyond=-1 +int_vs_str +str_with_int +to_swap_fmt4str_with_int | lineno   >  /sdcard/0my_files/tmp/out多种进制解读皆为素数/16_56_{i:0>2X}tmp')
    #]]]'''#'''
    ___no_slots_ok___ = True
    #odir = r'/sdcard/0my_files/tmp/out多种进制解读皆为素数/'
    def __init__(sf, /, *, subpath4job='pow16_8', subpath4logbook='log.txt', to_postpone_KeyboardInterrupt_until_subtask_switchover=False, may_prompt_string4postpone_KeyboardInterrupt_until_subtask_switchover=None):
        vars(sf).update(subpath4job=subpath4job, subpath4logbook=subpath4logbook, to_postpone_KeyboardInterrupt_until_subtask_switchover=to_postpone_KeyboardInterrupt_until_subtask_switchover, may_prompt_string4postpone_KeyboardInterrupt_until_subtask_switchover=may_prompt_string4postpone_KeyboardInterrupt_until_subtask_switchover)

    #@override
    subpath4job = ... or 'pow16_8'
    #@override
    subpath4logbook = ... or 'log.txt'
    #@override
    to_postpone_KeyboardInterrupt_until_subtask_switchover = ... or False
    #@override
    may_prompt_string4postpone_KeyboardInterrupt_until_subtask_switchover = ... or None

    #@override
    num_tasks = 0x100
    #@override
    fmt4tmp_subpath4task = '16_56_{:0>2X}tmp'
    #@override
    fmt4subpath4task = '16_56_{:0>2X}out'
    #@override
    xencoding4ofile4task = 'ascii'
    #@override
    whether_result4task_is_iterator = True
    #@override
    def mk_result5idx4task_(sf, idx4task, /):
        'idx4task -> result4task'
        return 搜索冫某进制表达数乊多种进制解读皆为素数扌([17,19,23,29,31], 16,     idx4task*16**6,  (idx4task+1)*16**6, imay_radix4beyond=-1, int_vs_str=True, str_with_int=True, to_swap_fmt4str_with_int=True)
    @classmethod
    #@override
    def job_mkr(cls, /, *args4job, **kwds4job):
        '-> sf/job'
        return cls(*args4job, **kwds4job)



def _八位十六进制数囗后续五种素进制解读皆为素数囗断点重启冫拆分成两百五十六个串行子任务(*, odir = r'/sdcard/0my_files/tmp/out多种进制解读皆为素数/', force4ofile=False, force4tmp_ofile=False, verbose=True, subpath4job='pow16_8', subpath4logbook='log.txt', to_postpone_KeyboardInterrupt_until_subtask_switchover=False, may_prompt_string4postpone_KeyboardInterrupt_until_subtask_switchover=None):
    from seed.io.continue_io__folder import IFolderBasedContinueJob__mk_result5idx4task as _basecls
    class T(_mixins, _basecls):
        pass
    #def run_or_resume_(cls, odir, args4job, kwds4job, /, *, force4ofile:bool, force4tmp_ofile:bool, verbose:bool):
    #t = T()
    T.run_or_resume_(odir, [], dict(subpath4job=subpath4job, subpath4logbook=subpath4logbook, to_postpone_KeyboardInterrupt_until_subtask_switchover=to_postpone_KeyboardInterrupt_until_subtask_switchover, may_prompt_string4postpone_KeyboardInterrupt_until_subtask_switchover=may_prompt_string4postpone_KeyboardInterrupt_until_subtask_switchover), force4ofile=force4ofile, force4tmp_ofile=force4tmp_ofile, verbose=verbose)


#.def 搜索冫某进制表达数乊多种进制解读皆为素数扌(列表纟进制基数纟解读型, 进制基数纟表达型, 起数纟表达型, 讫数纟表达型, 数符串纟表达型=_tbl_85):
#.    radixes4read, radix4show, begin4show, end4show, digit_table4show = 列表纟进制基数纟解读型, 进制基数纟表达型, 起数纟表达型, 讫数纟表达型, 数符串纟表达型
def 搜索冫某进制表达数乊多种进制解读皆为素数扌(radixes4read, radix4show, begin4show, end4show, digit_table4show=_tbl_85, *, ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read:'relax_restriction'=False, int_vs_str=False, str_with_int=False, to_swap_fmt4str_with_int=False, iter_vs_list=False, imay_radix4beyond=-1):
    '# [str_with_int takes no effect if not int_vs_str]'
    ######################
    check_type_is(bool, ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read)
    check_type_is(bool, int_vs_str)
    check_type_is(bool, str_with_int)
    check_type_is(bool, to_swap_fmt4str_with_int)
    check_type_is(bool, iter_vs_list)
    ######################
    check_int_ge(-1, imay_radix4beyond)
    check_int_ge(2, radix4show)
    check_type_is(str, digit_table4show)
    if not imay_radix4beyond <= radix4show: raise ValueError(imay_radix4beyond, radix4show)
    if not radix4show <= len(digit_table4show): raise ValueError('digit_table4show too short to show all digits{radix4show}')
    digit_table4show = digit_table4show[:radix4show]
    digit2char = digit_table4show
    char2digit = {char:digit for digit, char in enumerate(digit2char)}
    #if not len(set(digit_table4show)) == radix4show: raise ValueError('digit_table4show contains duplicate digits')
    if not len(char2digit) == radix4show: raise ValueError('digit_table4show contains duplicate digits')
    ######################
    begin4show = uint5or_str_(char2digit, begin4show)
    end4show = uint5or_str_(char2digit, end4show)

    #check_int_ge(2, begin4show)
    #check_int_ge(begin4show, end4show)
    check_int_ge(0, begin4show)
    check_int_ge(0, end4show)
    begin4show = max(2, begin4show)
    end4show = max(begin4show, end4show)
    if not end4show <= _max1: raise ValueError('end4show too big to detect whether prime')

    ######################
    radixes4read = tuple(radixes4read)
    for radix4read in radixes4read:
        #check_int_ge(2, radix4read)
        check_int_ge(radix4show, radix4read)
    radixes4read = tuple(sorted(set(radixes4read)))
    ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read = radixes4read and ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read

    ######################
    def _iter_digits_uint_pairs(radix4show, begin4show, end4show, /):
        assert 2 <= begin4show <= end4show
        if 0:
            for u in range(begin4show, end4show):
                digits = uint2radix_repr__big_endian(radix4show, u)
                yield digits, u
        else:
            #[*digits4end] = uint2radix_repr__big_endian(radix4show, end4show)
            [*digits] = uint2radix_repr__big_endian(radix4show, begin4show-1)
            #while not digits == digits4end:
            for u in range(begin4show, end4show):
                inc_digits__emplace_(radix4show, digits)
                yield tuple(digits), u
    ######################
    def _iter_digits_uint_pairs__ver2(imay_radix4beyond, radix4show, begin4show, end4show, /):
        #RadixNumerationIterator.mk5params_(12, 2, 12**8, imay_radix4beyond=10, _may_digits4begin_=None, _may_digits4end_=None)
        assert 2 <= begin4show <= end4show
        it = RadixNumerationIterator.mk5params_(radix4show, begin4show, end4show, imay_radix4beyond=imay_radix4beyond, _may_digits4begin_=None, _may_digits4end_=None)
        for u, digits in it:
            yield digits, u
    ######################


    is_prime_ = is_prime__using_A014233_
    def is_ok__raw_(jradix4read, digits, /):
        radix4read = radixes4read[jradix4read]
        u4read = radix_repr2uint__big_endian(radix4read, digits)
        return is_prime_(u4read)
    def is_ok__strict_(jradix4read, digits, /):
        return xcoprime_(jradix4read, digits) and is_ok__raw_(jradix4read, digits)
    def is_ok__relax_(jradix4read, digits, /):
        return not xcoprime_(jradix4read, digits) or is_ok__raw_(jradix4read, digits)
    def may_jcoprime_(may_sorted_prime_factors4digit, jradix4read, /):
        if may_sorted_prime_factors4digit is None:
            may_coprime = None
        else:
            sorted_prime_factors4digit = may_sorted_prime_factors4digit
            #coprime = not any(radix4read%p == 0 for p in sorted_prime_factors4digit)
                #if p > radix4read: break
            #sorted_prime_digit_factors4radix4read = radix2sorted_prime_digit_factors[radix4read]
            sorted_prime_digit_factors4radix4read = jradix2sorted_prime_digit_factors[jradix4read]
            coprime = are_two_sorted_iterables_disjoint(sorted_prime_factors4digit, sorted_prime_digit_factors4radix4read)
            may_coprime = coprime
        may_coprime
        return may_coprime

    if 1:
    #if ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read:
        assert radixes4read
        assert radix4show <= radixes4read[0] <= radixes4read[-1]
        digit2may_sorted_prime_factors = tabulate_may_all_prime_factors4uint_lt_(radix4show)
        if 0:
            #bug@[digit==p**k]
            sorted_prime_digits = tuple(digit for digit, may_sorted_prime_factors in enumerate(digit2may_sorted_prime_factors) if digit and len(may_sorted_prime_factors) == 1)
            if 0b0001:print(sorted_prime_digits)
        sorted_prime_digits = tuple(digit for digit, may_sorted_prime_factors in enumerate(digit2may_sorted_prime_factors) if (digit,) == may_sorted_prime_factors)
        prime_digit_set = set(sorted_prime_digits)
        #radix2sorted_prime_factors = {radix4read:tuple(sorted(factor_pint_by_trial_division_(radix4read))) for radix4read in radixes4read}
        #radix2sorted_prime_digit_factors = {radix4read:tuple(p for p in sorted_prime_digits if radix4read%p == 0) for radix4read in radixes4read}
        jradix2sorted_prime_digit_factors = tuple(tuple(p for p in sorted_prime_digits if radix4read%p == 0) for radix4read in radixes4read)
        #always_coprime = not any(radix2sorted_prime_digit_factors.values())
        always_coprime = not any(jradix2sorted_prime_digit_factors)
        if begin4show <= radix4show < end4show:
            all_radixes4read_are_asif_prime = always_coprime and all(map(is_prime_, radixes4read)) #(ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read or )
        if always_coprime:
            ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read = False
            def jcoprime_(jradix4read, nzlsd, /):
                return True
            jcoprime_
        else:
            #.radix2may_digit2may_coprime = {radix4read:
            #.    (None if not sorted_prime_digit_factors4radix4read else tuple(may_coprime_(may_sorted_prime_factors4digit, radix4read) for may_sorted_prime_factors4digit in digit2may_sorted_prime_factors))
            #.    for radix4read, sorted_prime_digit_factors4radix4read in radix2sorted_prime_digit_factors.items()
            #.}
            #.    # :: {radix4read : may [may coprime/bool]{len=radix4show}}
            jradix2may_digit2may_coprime = tuple(
                (None if not sorted_prime_digit_factors4radix4read else tuple(may_jcoprime_(may_sorted_prime_factors4digit, jradix4read) for may_sorted_prime_factors4digit in digit2may_sorted_prime_factors))
                for jradix4read, sorted_prime_digit_factors4radix4read in enumerate(jradix2sorted_prime_digit_factors)
                #for radix4read, sorted_prime_digit_factors4radix4read in zip(radixes4read, jradix2sorted_prime_digit_factors)
            )
                # :: [may [may coprime/bool]{len=radix4show}]{len=len(radixes4read)}
            def jcoprime_(jradix4read, nzlsd, /):
                assert nzlsd > 0
                if not None is (digit2may_coprime := jradix2may_digit2may_coprime[jradix4read]):
                    coprime = digit2may_coprime[nzlsd]
                else:
                    coprime = True
                coprime
                check_type_is(bool, coprime)
                return coprime
            jcoprime_
        jcoprime_
    jcoprime_
    def xcoprime_(jradix4read, digits, /):
        #after:++all_radixes4read_are_asif_prime
        nzlsd = digits[-1]
            # nonzero_least_significant_digit
        if 0:
            # see:is_ok_
            assert not nzlsd == 0
            assert len(digits) > 1
            assert not digits == (1, 0)
        return jcoprime_(jradix4read, nzlsd)
    #.def xcoprime_(jradix4read, digits, /):
        #before:++all_radixes4read_are_asif_prime
        #.nzlsd = digits[-1]
        #.    # nonzero_least_significant_digit
        #.assert not nzlsd == 0 or digits == (1, 0)
        #.return len(digits) == 1 or nzlsd == 0 or jcoprime_(jradix4read, nzlsd)


    if ok_if_nonzero_least_significant_digit_is_not_coprime_with_radix4read:
        jcoprime_
        is_ok_ = is_ok__relax_
    else:
        is_ok_ = is_ok__strict_
    def __(is_ok_, radixes4read, radix4show, begin4show, end4show, /):
        #it = _iter_digits_uint_pairs(radix4show, begin4show, end4show)
        it = _iter_digits_uint_pairs__ver2(imay_radix4beyond, radix4show, begin4show, end4show)
        if not radixes4read:
            yield from it
            return
        assert radixes4read
        js = range(len(radixes4read))
        for digits, u4show in it:
            assert u4show
            assert digits
            #if radixes4read and digits[-1] == 0 and not digits == (1, 0): continue
            if u4show <= radix4show:
                if len(digits) == 2:
                    assert digits == (1, 0), (digits, u4show, radix4show)
                    assert u4show == radix4show
                    ok = all_radixes4read_are_asif_prime
                else:
                    assert len(digits) == 1
                    assert 2 <= u4show < radix4show
                    [nzlsd] = digits
                        # nonzero_least_significant_digit
                    ok = nzlsd in prime_digit_set
                ok
            else:
                # [u4show > radix4show]
                lsd = digits[-1]
                    # least_significant_digit
                if lsd == 0:
                    assert not digits == (1, 0)
                    continue
                nzlsd = lsd
                assert not nzlsd == 0
                assert len(digits) > 1
                assert not digits == (1, 0)
                ok = all(is_ok_(jradix4read, digits) for jradix4read in js)
            ok
            if ok:
                yield digits, u4show
            del ok
    #end-def __():
    ######################
    tbl = digit_table4show
    pairs = __(is_ok_, radixes4read, radix4show, begin4show, end4show)
    if int_vs_str:
        if not str_with_int:
            digitss = map(fst, pairs)
            ss = _digitss2ss__table_(tbl, digitss)
        else:
            ss = _digits_uint_pairs2ss__table_(tbl, pairs, to_swap_fmt4str_with_int=to_swap_fmt4str_with_int)
        ss
        it = ss
    else:
        us = map(snd, pairs)
        it = us
    it # (us|ss)
    if iter_vs_list:
        return list(it)
    return it
    ######################
def uint5or_str_(char2digit, uint_or_str, /):
    if type(uint_or_str) is str:
        s = uint_or_str
        digits = map(char2digit.__getitem__, s)
        radix4show = len(char2digit)
        u = radix_repr2uint__big_endian(radix4show, digits)
    else:
        u = uint_or_str
    u
    check_int_ge(0, u)
    return u
def _xxx():
    from seed.math.gcd import gcd
    from functools import cache
    @cache
    def coprime_(a, b, /):
        #def coprime_(radix4read, nzlsd, /):
        return gcd(a,b) == 1
def inc_digits__emplace_(radix, digits, /):
    assert radix >= 2
    if not digits:
        digits.append(1)
        return
    L = len(digits)
    max4d = radix - 1
    for j, d in enumerate(reversed(digits)):
        if not d == max4d:
            sz = j
            assert sz < L
            break
    else:
        sz = L
    sz
    k = L - sz
    if not k:
        digits[:] = chain([1], repeat(0, sz))
    else:
        digits[k:] = repeat(0, sz)
        digits[k-1] += 1
    return
def _mk_digits2s__table_(tbl, /):
    f = tbl.__getitem__
    def ds2s_(ds, /, *, f=f):
        s = ''.join(map(f, ds))
        return s
    return ds2s_
def _digitss2ss__table_(tbl, digitss, /):
    ds2s_ = _mk_digits2s__table_(tbl)
    return map(ds2s_, digitss)
def _digits_uint_pairs2ss__table_(tbl, pairs, /, *, to_swap_fmt4str_with_int:bool):
    ds2s_ = _mk_digits2s__table_(tbl)
    for digits, u in pairs:
        s = ds2s_(digits)
        if 0:
            # only@[radix4show==10]
            if s.isdecimal():
                u = str(u)
                assert s == u, (digits, u, s)
                    # [radix4show==12]:AssertionError: ((1, 7, 4, 0, 1), '33409', '17401')
        if to_swap_fmt4str_with_int:
            yield f'({s}){u}'#swapped_fmt4str_with_int
        else:
            yield f'[{u}]{s}'#fmt4str_with_int


__all__
from script.搜索冫某进制表达数乊多种进制解读皆为素数 import 搜索冫某进制表达数乊多种进制解读皆为素数扌
from script.搜索冫某进制表达数乊多种进制解读皆为素数 import *
