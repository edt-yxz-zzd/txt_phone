#__all__:goto
r'''[[[
e script/阴阳五行冫德性纟夫妻与亲子.py

script.阴阳五行冫德性纟夫妻与亲子
py -m nn_ns.app.debug_cmd   script.阴阳五行冫德性纟夫妻与亲子 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.阴阳五行冫德性纟夫妻与亲子:__doc__ -ht # -ff -df

[[
尝试:分离子女德性
    穷举证明:初版已是最强:夫妻血缘关系至少隔三代乊考虑直系亲属旁系亲属
<<==:
初版:感觉还是太近
<<==:
#节选:
下帝...:
  大搞封建迷信活动:
    * 教派林立:礼数教、粪神教、作神教、...
    * 阴阳五行:
      生胜:
        *生-母子关系
          金水木火土
        *胜-夫妻关系(只有德性匹配的男女才允许结婚):
          金木土水火
          #男*女->子女
          A:金*木->火
            E:火*金->水
              D:水*火->土
              C:土*水->木
            D:水*火->土
              C:土*水->木
                B:木*土->金
                A:金*木->火
              B:木*土->金
                A:金*木->火
                E:火*金->水
          A-->E男/D女
          B-->A男/E女
          C-->B男/A女
          D-->C男/B女
          E-->D男/C女

          A-->E/D
          B-->A/E
          C-->B/A
          D-->C/B
          E-->D/C

          A-->E/D-->D/C/B-->C/B/A/E-->B/A/E/D/C
          B-->A/E-->E/D/C-->D/C/B/A-->C/B/A/E/D
          C-->B/A-->A/E/D-->E/D/C/B-->D/C/B/A/E
          D-->C/B-->B/A/E-->A/E/D/C-->E/D/C/B/A
          E-->D/C-->C/B/A-->B/A/E/D-->A/E/D/C/B
          ==>>:
          A<--B/C
          B<--C/D
          C<--D/E
          D<--E/A
          E<--A/B
          ==>>:
          #夫妻血缘关系隔离距离:以(A类夫妻:金男*木女)为例
          夫妻血缘关系至少隔三代<<==:
            A(金男)<--B0类父母<--C0类祖父母/D0类外祖父母<--曾祖:D/E0-E0/A0
            A(木女)<--C1类父母<--D1类祖父母/E1类外祖父母<--曾祖:E/A1-A1/B1
            A类夫妻 可能的最近共同祖先为:
              * [A0==A1]:
                [距离牜旁系==3+3==6]
                [距离牜直系==3+0==3]
                  ==>>可能允许娶外曾祖母
                [距离牜直系==0+3==3]
                  ==>>可能允许娶曾孙女
              * [B0==B1]:
                [距离牜旁系==1+3==4]
                  ==>>可能允许娶侄孙女
              * [C0==C1]:
                [距离牜旁系==2+1==3]
                  ==>>可能允许娶姑姑
              * [D0==D1]:
                [距离牜旁系==2+2==4]
                  ==>>可能允许娶舅表妹
              * [E0==E1]:
                [距离牜旁系==3+2==5]

]]



















[[[
@20250316
===
py_adhoc_call { +lineno }  script.阴阳五行冫德性纟夫妻与亲子   ,_尝试分离子女德行扌
    #(最大化:最小夫妻代隔数, ((夫妻关系,母子关系,母女关系,父子关系,父女关系,子女关系), 中介祖先德性讠夫妻代隔数))
1:(4, ((0, 1, 4, 1, 4, 3), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4}))
2:(4, ((0, 2, 3, 2, 3, 1), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5}))
3:(4, ((0, 3, 2, 3, 2, 4), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5}))
4:(4, ((0, 4, 1, 4, 1, 2), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4}))
5:(4, ((1, 0, 4, 1, 0, 4), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 5, 8: 4, 9: 5}))
6:(4, ((1, 1, 3, 2, 4, 2), {0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 4}))
7:(4, ((1, 2, 2, 3, 3, 0), {0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 4}))
8:(4, ((1, 3, 1, 4, 2, 3), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 5, 8: 4, 9: 5}))
9:(4, ((2, 0, 3, 2, 0, 3), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
10:(4, ((2, 1, 2, 3, 4, 1), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
11:(4, ((2, 2, 1, 4, 3, 4), {0: 4, 1: 5, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 5}))
12:(4, ((2, 4, 4, 1, 1, 0), {0: 4, 1: 5, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 5}))
13:(4, ((3, 0, 2, 3, 0, 2), {0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}))
14:(4, ((3, 1, 1, 4, 4, 0), {0: 4, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 4}))
15:(4, ((3, 3, 4, 1, 2, 1), {0: 4, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 4}))
16:(4, ((3, 4, 3, 2, 1, 4), {0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}))
17:(4, ((4, 0, 1, 4, 0, 1), {0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 4, 8: 4, 9: 4}))
18:(4, ((4, 2, 4, 1, 3, 2), {0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 4, 8: 4, 9: 4}))
19:(4, ((4, 3, 3, 2, 2, 0), {0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
20:(4, ((4, 4, 2, 3, 1, 3), {0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
===
#初版:[夫妻关系 为 『胜』][母子关系 为 『生』][母女关系 为 『生』][父子关系 为 『被胜』][父女关系 为 『被胜』][子女关系 为 『同』][非最大化:最小夫妻代隔数==3]
[夫妻关系 为 『胜』] <==> [夫妻关系==2]
    [水 胜 火]
    [夫妻关系 == 水行 -火行 == 3 -1 == 2]
[母子关系 为 『生』] <==> [母子关系==1]
    [金 生 水]
    [母子关系 == 金行 -水行 == 4 -3 == 1]
[最大化:最小夫妻代隔数==4][夫妻关系 为 『胜』][母子关系 为 『生』]:
    [夫妻关系==2][母子关系==1]
    唯一可行解:『10:(4, ((2, 1, 2, 3, 4, 1), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))』
    [母女关系==2]
    [母女关系 为 『胜』]

    [父子关系==3]
    [父女关系==4]
    [父子关系 为 『被胜』]
    [父女关系 为 『被生』]
        这不玄学！

    [子女关系==1]
    [子女关系 为 『生』]
        这不玄学！
[最大化:最小夫妻代隔数==4][夫妻关系 为 『被胜』][母子关系 为 『生』]:
    [夫妻关系==3][母子关系==1]
    唯一可行解:『14:(4, ((3, 1, 1, 4, 4, 0), {0: 4, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 4}))』
    [母女关系==1]
    [母女关系 为 『生』]

    [父子关系==4]
    [父女关系==4]
    [父子关系 为 『被生』]
    [父女关系 为 『被生』]
        这不玄学！

    [子女关系==0]
    [子女关系 为 『同』]
[最大化:最小夫妻代隔数==4][夫妻关系 为 『同』][母子关系 为 『生』]:
    [夫妻关系==0][母子关系==1]
    唯一可行解:『1:(4, ((0, 1, 4, 1, 4, 3), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4}))』
    [母女关系==4]
    [母女关系 为 『被生』]
        这不玄学！

    [父子关系==1]
    [父女关系==4]
    [父子关系 为 『生』]
    [父女关系 为 『被生』]
        这不玄学！

    [子女关系==3]
    [子女关系 为 『被胜』]

===
#.搜索:『(([^41], [^4], [^4], [^4], [^4]), 』
#.    #补偿:)
#.py_adhoc_call { +lineno }  script.阴阳五行冫德性纟夫妻与亲子   ,_尝试分离子女德行扌 | grep '(([^41], [^4], [^4], [^4], [^4]), '
#.    #补偿:)
#.2:(4, ((0, 2, 3, 2, 3), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5}))
#.3:(4, ((0, 3, 2, 3, 2), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5}))
#.9:(4, ((2, 0, 3, 2, 0), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
#.13:(4, ((3, 0, 2, 3, 0), {0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}))

搜索:『(([^41], [^4], [^4], [^4], [^4], [^14]), 』
    #补偿:)
py_adhoc_call { +lineno }  script.阴阳五行冫德性纟夫妻与亲子   ,_尝试分离子女德行扌 | grep '(([^41], [^4], [^4], [^4], [^4], [^14]), '
    #补偿:)
9:(4, ((2, 0, 3, 2, 0, 3), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
13:(4, ((3, 0, 2, 3, 0, 2), {0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}))

[最大化:最小夫妻代隔数==4][夫妻关系 为 『胜』][母子关系 为 『同』]:
    [夫妻关系==2][母子关系==0]
    唯一可行解:『9:(4, ((2, 0, 3, 2, 0, 3), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))』
    [母女关系==3]
    [母女关系 为 『被胜』]

    [父子关系==2]
    [父女关系==0]
    [父子关系 为 『胜』]
    [父女关系 为 『同』]

    [子女关系==3]
    [子女关系 为 『被胜』]
[最大化:最小夫妻代隔数==4][夫妻关系 为 『被胜』][母子关系 为 『同』]:
    [夫妻关系==3][母子关系==0]
    唯一可行解:『13:(4, ((3, 0, 2, 3, 0, 2), {0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}))』
    [母女关系==2]
    [母女关系 为 『胜』]

    [父子关系==3]
    [父女关系==0]
    [父子关系 为 『被胜』]
    [父女关系 为 『同』]

    [子女关系==2]
    [子女关系 为 『胜』]


===
]]]
[[[
@20250316
初版:(2, 1, 1, 3, 3, 0)
    #(2, 1, 1, 3, 3, 0) => [5==(0+2)*2+1][妻0=>夫5]
    57:(3, ((2, 1, 1, 3, 3, 0), {0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}))
    0:6,5:6 <<== 只考虑旁系亲属
===
py_adhoc_call { +lineno }  script.阴阳五行冫德性纟夫妻与亲子   ,_尝试分离子女德行扌 +to_output_all
    #(未必最大化/已排序:最小夫妻代隔数, ((夫妻关系,母子关系,母女关系,父子关系,父女关系,子女关系), 中介祖先德性讠夫妻代隔数))
1:(2, ((0, 1, 1, 1, 1, 0), {0: 10, 1: 10, 2: 2, 3: 2, 4: 4, 5: 4, 6: 6, 7: 6, 8: 8, 9: 8}))
2:(2, ((0, 2, 2, 2, 2, 0), {0: 10, 1: 10, 2: 6, 3: 6, 4: 2, 5: 2, 6: 8, 7: 8, 8: 4, 9: 4}))
3:(2, ((0, 3, 3, 3, 3, 0), {0: 10, 1: 10, 2: 4, 3: 4, 4: 8, 5: 8, 6: 2, 7: 2, 8: 6, 9: 6}))
4:(2, ((0, 4, 4, 4, 4, 0), {0: 10, 1: 10, 2: 8, 3: 8, 4: 6, 5: 6, 6: 4, 7: 4, 8: 2, 9: 2}))
5:(2, ((1, 0, 1, 1, 2, 1), {0: 10, 1: 8, 2: 2, 3: 10, 4: 4, 5: 2, 6: 6, 7: 4, 8: 8, 9: 6}))
6:(2, ((1, 1, 2, 2, 3, 1), {0: 10, 1: 4, 2: 6, 3: 10, 4: 2, 5: 6, 6: 8, 7: 2, 8: 4, 9: 8}))
7:(2, ((1, 2, 3, 3, 4, 1), {0: 10, 1: 6, 2: 4, 3: 10, 4: 8, 5: 4, 6: 2, 7: 8, 8: 6, 9: 2}))
8:(2, ((1, 3, 4, 4, 0, 1), {0: 10, 1: 2, 2: 8, 3: 10, 4: 6, 5: 8, 6: 4, 7: 6, 8: 2, 9: 4}))
9:(2, ((2, 0, 2, 2, 4, 2), {0: 10, 1: 8, 2: 6, 3: 4, 4: 2, 5: 10, 6: 8, 7: 6, 8: 4, 9: 2}))
10:(2, ((2, 1, 3, 3, 0, 2), {0: 10, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 2, 7: 4, 8: 6, 9: 8}))
11:(2, ((2, 2, 4, 4, 1, 2), {0: 10, 1: 4, 2: 8, 3: 2, 4: 6, 5: 10, 6: 4, 7: 8, 8: 2, 9: 6}))
12:(2, ((2, 4, 1, 1, 3, 2), {0: 10, 1: 6, 2: 2, 3: 8, 4: 4, 5: 10, 6: 6, 7: 2, 8: 8, 9: 4}))
13:(2, ((3, 0, 3, 3, 1, 3), {0: 10, 1: 8, 2: 4, 3: 2, 4: 8, 5: 6, 6: 2, 7: 10, 8: 6, 9: 4}))
14:(2, ((3, 1, 4, 4, 2, 3), {0: 10, 1: 6, 2: 8, 3: 4, 4: 6, 5: 2, 6: 4, 7: 10, 8: 2, 9: 8}))
15:(2, ((3, 3, 1, 1, 4, 3), {0: 10, 1: 4, 2: 2, 3: 6, 4: 4, 5: 8, 6: 6, 7: 10, 8: 8, 9: 2}))
16:(2, ((3, 4, 2, 2, 0, 3), {0: 10, 1: 2, 2: 6, 3: 8, 4: 2, 5: 4, 6: 8, 7: 10, 8: 4, 9: 6}))
17:(2, ((4, 0, 4, 4, 3, 4), {0: 10, 1: 8, 2: 8, 3: 6, 4: 6, 5: 4, 6: 4, 7: 2, 8: 2, 9: 10}))
18:(2, ((4, 2, 1, 1, 0, 4), {0: 10, 1: 2, 2: 2, 3: 4, 4: 4, 5: 6, 6: 6, 7: 8, 8: 8, 9: 10}))
19:(2, ((4, 3, 2, 2, 1, 4), {0: 10, 1: 6, 2: 6, 3: 2, 4: 2, 5: 8, 6: 8, 7: 4, 8: 4, 9: 10}))
20:(2, ((4, 4, 3, 3, 2, 4), {0: 10, 1: 4, 2: 4, 3: 8, 4: 8, 5: 2, 6: 2, 7: 6, 8: 6, 9: 10}))
21:(3, ((0, 0, 1, 0, 1, 1), {0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 7, 7: 7, 8: 9, 9: 9}))
22:(3, ((0, 0, 2, 0, 2, 2), {0: 6, 1: 6, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5}))
23:(3, ((0, 0, 3, 0, 3, 3), {0: 6, 1: 6, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7}))
24:(3, ((0, 0, 4, 0, 4, 4), {0: 6, 1: 6, 2: 9, 3: 9, 4: 7, 5: 7, 6: 5, 7: 5, 8: 3, 9: 3}))
25:(3, ((0, 1, 0, 1, 0, 4), {0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 7, 7: 7, 8: 9, 9: 9}))
26:(3, ((0, 1, 2, 1, 2, 1), {0: 6, 1: 6, 2: 4, 3: 4, 4: 3, 5: 3, 6: 4, 7: 4, 8: 5, 9: 5}))
27:(3, ((0, 1, 3, 1, 3, 2), {0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}))
28:(3, ((0, 2, 0, 2, 0, 3), {0: 6, 1: 6, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5}))
29:(3, ((0, 2, 1, 2, 1, 4), {0: 6, 1: 6, 2: 4, 3: 4, 4: 3, 5: 3, 6: 4, 7: 4, 8: 5, 9: 5}))
30:(3, ((0, 2, 4, 2, 4, 2), {0: 6, 1: 6, 2: 4, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 3, 9: 3}))
31:(3, ((0, 3, 0, 3, 0, 2), {0: 6, 1: 6, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7}))
32:(3, ((0, 3, 1, 3, 1, 3), {0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}))
33:(3, ((0, 3, 4, 3, 4, 1), {0: 6, 1: 6, 2: 5, 3: 5, 4: 4, 5: 4, 6: 3, 7: 3, 8: 4, 9: 4}))
34:(3, ((0, 4, 0, 4, 0, 1), {0: 6, 1: 6, 2: 9, 3: 9, 4: 7, 5: 7, 6: 5, 7: 5, 8: 3, 9: 3}))
35:(3, ((0, 4, 2, 4, 2, 3), {0: 6, 1: 6, 2: 4, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 3, 9: 3}))
36:(3, ((0, 4, 3, 4, 3, 4), {0: 6, 1: 6, 2: 5, 3: 5, 4: 4, 5: 4, 6: 3, 7: 3, 8: 4, 9: 4}))
37:(3, ((1, 0, 0, 1, 1, 0), {0: 6, 1: 9, 2: 3, 3: 6, 4: 5, 5: 3, 6: 7, 7: 5, 8: 9, 9: 7}))
38:(3, ((1, 0, 2, 1, 3, 2), {0: 6, 1: 5, 2: 4, 3: 6, 4: 3, 5: 4, 6: 4, 7: 3, 8: 5, 9: 4}))
39:(3, ((1, 0, 3, 1, 4, 3), {0: 6, 1: 4, 2: 3, 3: 6, 4: 5, 5: 3, 6: 4, 7: 5, 8: 4, 9: 4}))
40:(3, ((1, 1, 0, 2, 1, 4), {0: 6, 1: 5, 2: 7, 3: 6, 4: 3, 5: 7, 6: 9, 7: 3, 8: 5, 9: 9}))
41:(3, ((1, 1, 1, 2, 2, 0), {0: 6, 1: 5, 2: 4, 3: 6, 4: 3, 5: 4, 6: 4, 7: 3, 8: 5, 9: 4}))
42:(3, ((1, 1, 4, 2, 0, 3), {0: 6, 1: 3, 2: 4, 3: 6, 4: 4, 5: 4, 6: 5, 7: 4, 8: 3, 9: 5}))
43:(3, ((1, 2, 0, 3, 1, 3), {0: 6, 1: 7, 2: 5, 3: 6, 4: 9, 5: 5, 6: 3, 7: 9, 8: 7, 9: 3}))
44:(3, ((1, 2, 1, 3, 2, 4), {0: 6, 1: 4, 2: 3, 3: 6, 4: 5, 5: 3, 6: 4, 7: 5, 8: 4, 9: 4}))
45:(3, ((1, 2, 4, 3, 0, 2), {0: 6, 1: 4, 2: 5, 3: 6, 4: 4, 5: 5, 6: 3, 7: 4, 8: 4, 9: 3}))
46:(3, ((1, 3, 0, 4, 1, 2), {0: 6, 1: 3, 2: 9, 3: 6, 4: 7, 5: 9, 6: 5, 7: 7, 8: 3, 9: 5}))
47:(3, ((1, 3, 2, 4, 3, 4), {0: 6, 1: 3, 2: 4, 3: 6, 4: 4, 5: 4, 6: 5, 7: 4, 8: 3, 9: 5}))
48:(3, ((1, 3, 3, 4, 4, 0), {0: 6, 1: 4, 2: 5, 3: 6, 4: 4, 5: 5, 6: 3, 7: 4, 8: 4, 9: 3}))
49:(3, ((1, 4, 1, 0, 2, 2), {0: 6, 1: 9, 2: 3, 3: 6, 4: 5, 5: 3, 6: 7, 7: 5, 8: 9, 9: 7}))
50:(3, ((1, 4, 2, 0, 3, 3), {0: 6, 1: 5, 2: 7, 3: 6, 4: 3, 5: 7, 6: 9, 7: 3, 8: 5, 9: 9}))
51:(3, ((1, 4, 3, 0, 4, 4), {0: 6, 1: 7, 2: 5, 3: 6, 4: 9, 5: 5, 6: 3, 7: 9, 8: 7, 9: 3}))
52:(3, ((1, 4, 4, 0, 0, 0), {0: 6, 1: 3, 2: 9, 3: 6, 4: 7, 5: 9, 6: 5, 7: 7, 8: 3, 9: 5}))
53:(3, ((2, 0, 0, 2, 2, 0), {0: 6, 1: 9, 2: 7, 3: 5, 4: 3, 5: 6, 6: 9, 7: 7, 8: 5, 9: 3}))
54:(3, ((2, 0, 1, 2, 3, 1), {0: 6, 1: 4, 2: 4, 3: 5, 4: 3, 5: 6, 6: 4, 7: 4, 8: 5, 9: 3}))
55:(3, ((2, 0, 4, 2, 1, 4), {0: 6, 1: 5, 2: 4, 3: 3, 4: 4, 5: 6, 6: 5, 7: 4, 8: 3, 9: 4}))
56:(3, ((2, 1, 0, 3, 2, 4), {0: 6, 1: 3, 2: 5, 3: 7, 4: 9, 5: 6, 6: 3, 7: 5, 8: 7, 9: 9}))
57:(3, ((2, 1, 1, 3, 3, 0), {0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}))
58:(3, ((2, 1, 4, 3, 1, 3), {0: 6, 1: 3, 2: 5, 3: 4, 4: 4, 5: 6, 6: 3, 7: 5, 8: 4, 9: 4}))
59:(3, ((2, 2, 0, 4, 2, 3), {0: 6, 1: 5, 2: 9, 3: 3, 4: 7, 5: 6, 6: 5, 7: 9, 8: 3, 9: 7}))
60:(3, ((2, 2, 2, 4, 4, 0), {0: 6, 1: 5, 2: 4, 3: 3, 4: 4, 5: 6, 6: 5, 7: 4, 8: 3, 9: 4}))
61:(3, ((2, 2, 3, 4, 0, 1), {0: 6, 1: 3, 2: 5, 3: 4, 4: 4, 5: 6, 6: 3, 7: 5, 8: 4, 9: 4}))
62:(3, ((2, 3, 1, 0, 3, 3), {0: 6, 1: 7, 2: 3, 3: 9, 4: 5, 5: 6, 6: 7, 7: 3, 8: 9, 9: 5}))
63:(3, ((2, 3, 2, 0, 4, 4), {0: 6, 1: 9, 2: 7, 3: 5, 4: 3, 5: 6, 6: 9, 7: 7, 8: 5, 9: 3}))
64:(3, ((2, 3, 3, 0, 0, 0), {0: 6, 1: 3, 2: 5, 3: 7, 4: 9, 5: 6, 6: 3, 7: 5, 8: 7, 9: 9}))
65:(3, ((2, 3, 4, 0, 1, 1), {0: 6, 1: 5, 2: 9, 3: 3, 4: 7, 5: 6, 6: 5, 7: 9, 8: 3, 9: 7}))
66:(3, ((2, 4, 0, 1, 2, 1), {0: 6, 1: 7, 2: 3, 3: 9, 4: 5, 5: 6, 6: 7, 7: 3, 8: 9, 9: 5}))
67:(3, ((2, 4, 2, 1, 4, 3), {0: 6, 1: 4, 2: 4, 3: 5, 4: 3, 5: 6, 6: 4, 7: 4, 8: 5, 9: 3}))
68:(3, ((2, 4, 3, 1, 0, 4), {0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}))
69:(3, ((3, 0, 0, 3, 3, 0), {0: 6, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 6, 8: 7, 9: 5}))
70:(3, ((3, 0, 1, 3, 4, 1), {0: 6, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 6, 8: 4, 9: 3}))
71:(3, ((3, 0, 4, 3, 2, 4), {0: 6, 1: 4, 2: 5, 3: 3, 4: 4, 5: 4, 6: 3, 7: 6, 8: 4, 9: 5}))
72:(3, ((3, 1, 0, 4, 3, 4), {0: 6, 1: 7, 2: 9, 3: 5, 4: 7, 5: 3, 6: 5, 7: 6, 8: 3, 9: 9}))
73:(3, ((3, 1, 2, 4, 0, 1), {0: 6, 1: 4, 2: 4, 3: 5, 4: 4, 5: 3, 6: 5, 7: 6, 8: 3, 9: 4}))
74:(3, ((3, 1, 3, 4, 1, 2), {0: 6, 1: 4, 2: 5, 3: 3, 4: 4, 5: 4, 6: 3, 7: 6, 8: 4, 9: 5}))
75:(3, ((3, 2, 1, 0, 4, 4), {0: 6, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 6, 8: 9, 9: 3}))
76:(3, ((3, 2, 2, 0, 0, 0), {0: 6, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 6, 8: 5, 9: 7}))
77:(3, ((3, 2, 3, 0, 1, 1), {0: 6, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 6, 8: 7, 9: 5}))
78:(3, ((3, 2, 4, 0, 2, 2), {0: 6, 1: 7, 2: 9, 3: 5, 4: 7, 5: 3, 6: 5, 7: 6, 8: 3, 9: 9}))
79:(3, ((3, 3, 0, 1, 3, 2), {0: 6, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 6, 8: 9, 9: 3}))
80:(3, ((3, 3, 2, 1, 0, 4), {0: 6, 1: 3, 2: 4, 3: 4, 4: 3, 5: 5, 6: 4, 7: 6, 8: 5, 9: 4}))
81:(3, ((3, 3, 3, 1, 1, 0), {0: 6, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 6, 8: 4, 9: 3}))
82:(3, ((3, 4, 0, 2, 3, 1), {0: 6, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 6, 8: 5, 9: 7}))
83:(3, ((3, 4, 1, 2, 4, 2), {0: 6, 1: 3, 2: 4, 3: 4, 4: 3, 5: 5, 6: 4, 7: 6, 8: 5, 9: 4}))
84:(3, ((3, 4, 4, 2, 2, 0), {0: 6, 1: 4, 2: 4, 3: 5, 4: 4, 5: 3, 6: 5, 7: 6, 8: 3, 9: 4}))
85:(3, ((4, 0, 0, 4, 4, 0), {0: 6, 1: 9, 2: 9, 3: 7, 4: 7, 5: 5, 6: 5, 7: 3, 8: 3, 9: 6}))
86:(3, ((4, 0, 2, 4, 1, 2), {0: 6, 1: 4, 2: 4, 3: 4, 4: 4, 5: 5, 6: 5, 7: 3, 8: 3, 9: 6}))
87:(3, ((4, 0, 3, 4, 2, 3), {0: 6, 1: 5, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 4, 8: 4, 9: 6}))
88:(3, ((4, 1, 1, 0, 0, 0), {0: 6, 1: 3, 2: 3, 3: 5, 4: 5, 5: 7, 6: 7, 7: 9, 8: 9, 9: 6}))
89:(3, ((4, 1, 2, 0, 1, 1), {0: 6, 1: 7, 2: 7, 3: 3, 4: 3, 5: 9, 6: 9, 7: 5, 8: 5, 9: 6}))
90:(3, ((4, 1, 3, 0, 2, 2), {0: 6, 1: 5, 2: 5, 3: 9, 4: 9, 5: 3, 6: 3, 7: 7, 8: 7, 9: 6}))
91:(3, ((4, 1, 4, 0, 3, 3), {0: 6, 1: 9, 2: 9, 3: 7, 4: 7, 5: 5, 6: 5, 7: 3, 8: 3, 9: 6}))
92:(3, ((4, 2, 0, 1, 4, 3), {0: 6, 1: 3, 2: 3, 3: 5, 4: 5, 5: 7, 6: 7, 7: 9, 8: 9, 9: 6}))
93:(3, ((4, 2, 2, 1, 1, 0), {0: 6, 1: 4, 2: 4, 3: 3, 4: 3, 5: 4, 6: 4, 7: 5, 8: 5, 9: 6}))
94:(3, ((4, 2, 3, 1, 2, 1), {0: 6, 1: 3, 2: 3, 3: 5, 4: 5, 5: 4, 6: 4, 7: 4, 8: 4, 9: 6}))
95:(3, ((4, 3, 0, 2, 4, 2), {0: 6, 1: 7, 2: 7, 3: 3, 4: 3, 5: 9, 6: 9, 7: 5, 8: 5, 9: 6}))
96:(3, ((4, 3, 1, 2, 0, 3), {0: 6, 1: 4, 2: 4, 3: 3, 4: 3, 5: 4, 6: 4, 7: 5, 8: 5, 9: 6}))
97:(3, ((4, 3, 4, 2, 3, 1), {0: 6, 1: 4, 2: 4, 3: 4, 4: 4, 5: 5, 6: 5, 7: 3, 8: 3, 9: 6}))
98:(3, ((4, 4, 0, 3, 4, 1), {0: 6, 1: 5, 2: 5, 3: 9, 4: 9, 5: 3, 6: 3, 7: 7, 8: 7, 9: 6}))
99:(3, ((4, 4, 1, 3, 0, 2), {0: 6, 1: 3, 2: 3, 3: 5, 4: 5, 5: 4, 6: 4, 7: 4, 8: 4, 9: 6}))
100:(3, ((4, 4, 4, 3, 3, 0), {0: 6, 1: 5, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 4, 8: 4, 9: 6}))
101:(4, ((0, 1, 4, 1, 4, 3), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4}))
102:(4, ((0, 2, 3, 2, 3, 1), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5}))
103:(4, ((0, 3, 2, 3, 2, 4), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5}))
104:(4, ((0, 4, 1, 4, 1, 2), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4}))
105:(4, ((1, 0, 4, 1, 0, 4), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 5, 8: 4, 9: 5}))
106:(4, ((1, 1, 3, 2, 4, 2), {0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 4}))
107:(4, ((1, 2, 2, 3, 3, 0), {0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 4}))
108:(4, ((1, 3, 1, 4, 2, 3), {0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 5, 8: 4, 9: 5}))
109:(4, ((2, 0, 3, 2, 0, 3), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
110:(4, ((2, 1, 2, 3, 4, 1), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
111:(4, ((2, 2, 1, 4, 3, 4), {0: 4, 1: 5, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 5}))
112:(4, ((2, 4, 4, 1, 1, 0), {0: 4, 1: 5, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 5}))
113:(4, ((3, 0, 2, 3, 0, 2), {0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}))
114:(4, ((3, 1, 1, 4, 4, 0), {0: 4, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 4}))
115:(4, ((3, 3, 4, 1, 2, 1), {0: 4, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 4}))
116:(4, ((3, 4, 3, 2, 1, 4), {0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}))
117:(4, ((4, 0, 1, 4, 0, 1), {0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 4, 8: 4, 9: 4}))
118:(4, ((4, 2, 4, 1, 3, 2), {0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 4, 8: 4, 9: 4}))
119:(4, ((4, 3, 3, 2, 2, 0), {0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
120:(4, ((4, 4, 2, 3, 1, 3), {0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
===
py_adhoc_call { +lineno }  script.阴阳五行冫德性纟夫妻与亲子   ,_尝试分离子女德行扌 +to_output_all | grep '(([^41], [^4], [^4], [^4], [^4], [^14]), '
    #补偿:)
1:(2, ((0, 1, 1, 1, 1, 0), {0: 10, 1: 10, 2: 2, 3: 2, 4: 4, 5: 4, 6: 6, 7: 6, 8: 8, 9: 8}))
2:(2, ((0, 2, 2, 2, 2, 0), {0: 10, 1: 10, 2: 6, 3: 6, 4: 2, 5: 2, 6: 8, 7: 8, 8: 4, 9: 4}))
3:(2, ((0, 3, 3, 3, 3, 0), {0: 10, 1: 10, 2: 4, 3: 4, 4: 8, 5: 8, 6: 2, 7: 2, 8: 6, 9: 6}))
10:(2, ((2, 1, 3, 3, 0, 2), {0: 10, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 2, 7: 4, 8: 6, 9: 8}))
13:(2, ((3, 0, 3, 3, 1, 3), {0: 10, 1: 8, 2: 4, 3: 2, 4: 8, 5: 6, 6: 2, 7: 10, 8: 6, 9: 4}))
22:(3, ((0, 0, 2, 0, 2, 2), {0: 6, 1: 6, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5}))
23:(3, ((0, 0, 3, 0, 3, 3), {0: 6, 1: 6, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7}))
27:(3, ((0, 1, 3, 1, 3, 2), {0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}))
28:(3, ((0, 2, 0, 2, 0, 3), {0: 6, 1: 6, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5}))
31:(3, ((0, 3, 0, 3, 0, 2), {0: 6, 1: 6, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7}))
32:(3, ((0, 3, 1, 3, 1, 3), {0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}))
53:(3, ((2, 0, 0, 2, 2, 0), {0: 6, 1: 9, 2: 7, 3: 5, 4: 3, 5: 6, 6: 9, 7: 7, 8: 5, 9: 3}))
57:(3, ((2, 1, 1, 3, 3, 0), {0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}))
62:(3, ((2, 3, 1, 0, 3, 3), {0: 6, 1: 7, 2: 3, 3: 9, 4: 5, 5: 6, 6: 7, 7: 3, 8: 9, 9: 5}))
64:(3, ((2, 3, 3, 0, 0, 0), {0: 6, 1: 3, 2: 5, 3: 7, 4: 9, 5: 6, 6: 3, 7: 5, 8: 7, 9: 9}))
69:(3, ((3, 0, 0, 3, 3, 0), {0: 6, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 6, 8: 7, 9: 5}))
76:(3, ((3, 2, 2, 0, 0, 0), {0: 6, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 6, 8: 5, 9: 7}))
79:(3, ((3, 3, 0, 1, 3, 2), {0: 6, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 6, 8: 9, 9: 3}))
81:(3, ((3, 3, 3, 1, 1, 0), {0: 6, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 6, 8: 4, 9: 3}))
109:(4, ((2, 0, 3, 2, 0, 3), {0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}))
113:(4, ((3, 0, 2, 3, 0, 2), {0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}))
===
]]]
[[[
@20250316:+考虑冫非零代隔数纟直系亲属
初版:(2, 1, 1, 3, 3, 0)
    #(2, 1, 1, 3, 3, 0) => [5==(0+2)*2+1][妻0=>夫5]
    ###57:(3, ((2, 1, 1, 3, 3, 0), {0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}))
    ###0:6,5:6 <<== 只考虑旁系亲属
    99:(32, ((2, 1, 1, 3, 3, 0), ({0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}, {0: 3, 5: 3}, {0: 3, 1: 4, 2: 3, 3: 4, 4: 5, 5: 3, 6: 4, 7: 3, 8: 4, 9: 5})))
    0:3,5:3 <<== +考虑直系亲属
    初版已是最强:夫妻血缘关系至少隔三代乊考虑直系亲属旁系亲属
===
py_adhoc_call { +lineno }  script.阴阳五行冫德性纟夫妻与亲子   ,_尝试分离子女德行扌 +to_output_all +考虑冫非零代隔数纟直系亲属  > /sdcard/0my_files/tmp/0tmp
    #(未必最大化/已排序:最小夫妻代隔数, ((夫妻关系,母子关系,母女关系,父子关系,父女关系,子女关系), (中介祖先德性讠夫妻代隔数, 配偶冃祖先德性讠夫妻代隔数, 祖先德性讠夫妻代隔数)))
view /sdcard/0my_files/tmp/0tmp
1:(12, ((0, 0, 1, 0, 1, 1), ({0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 7, 7: 7, 8: 9, 9: 9}, {0: 1, 1: 5}, {0: 1, 1: 5, 2: 3, 3: 3, 4: 5, 5: 5, 6: 7, 7: 7, 8: 9, 9: 9})))
2:(12, ((0, 0, 2, 0, 2, 2), ({0: 6, 1: 6, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5}, {0: 1, 1: 5}, {0: 1, 1: 5, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5})))
3:(12, ((0, 0, 3, 0, 3, 3), ({0: 6, 1: 6, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7}, {0: 1, 1: 5}, {0: 1, 1: 5, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7})))
4:(12, ((0, 0, 4, 0, 4, 4), ({0: 6, 1: 6, 2: 9, 3: 9, 4: 7, 5: 7, 6: 5, 7: 5, 8: 3, 9: 3}, {0: 1, 1: 5}, {0: 1, 1: 5, 2: 9, 3: 9, 4: 7, 5: 7, 6: 5, 7: 5, 8: 3, 9: 3})))
5:(12, ((0, 1, 0, 1, 0, 4), ({0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 7, 7: 7, 8: 9, 9: 9}, {0: 5, 1: 1}, {0: 5, 1: 1, 2: 3, 3: 3, 4: 5, 5: 5, 6: 7, 7: 7, 8: 9, 9: 9})))
6:(12, ((0, 2, 0, 2, 0, 3), ({0: 6, 1: 6, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5}, {0: 5, 1: 1}, {0: 5, 1: 1, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5})))
7:(12, ((0, 3, 0, 3, 0, 2), ({0: 6, 1: 6, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7}, {0: 5, 1: 1}, {0: 5, 1: 1, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7})))
8:(12, ((0, 4, 0, 4, 0, 1), ({0: 6, 1: 6, 2: 9, 3: 9, 4: 7, 5: 7, 6: 5, 7: 5, 8: 3, 9: 3}, {0: 5, 1: 1}, {0: 5, 1: 1, 2: 9, 3: 9, 4: 7, 5: 7, 6: 5, 7: 5, 8: 3, 9: 3})))
9:(12, ((1, 0, 0, 1, 1, 0), ({0: 6, 1: 9, 2: 3, 3: 6, 4: 5, 5: 3, 6: 7, 7: 5, 8: 9, 9: 7}, {0: 5, 3: 1}, {0: 5, 1: 9, 2: 3, 3: 1, 4: 5, 5: 3, 6: 7, 7: 5, 8: 9, 9: 7})))
10:(12, ((1, 1, 0, 2, 1, 4), ({0: 6, 1: 5, 2: 7, 3: 6, 4: 3, 5: 7, 6: 9, 7: 3, 8: 5, 9: 9}, {0: 5, 3: 1}, {0: 5, 1: 5, 2: 7, 3: 1, 4: 3, 5: 7, 6: 9, 7: 3, 8: 5, 9: 9})))
11:(12, ((1, 2, 0, 3, 1, 3), ({0: 6, 1: 7, 2: 5, 3: 6, 4: 9, 5: 5, 6: 3, 7: 9, 8: 7, 9: 3}, {0: 5, 3: 1}, {0: 5, 1: 7, 2: 5, 3: 1, 4: 9, 5: 5, 6: 3, 7: 9, 8: 7, 9: 3})))
12:(12, ((1, 3, 0, 4, 1, 2), ({0: 6, 1: 3, 2: 9, 3: 6, 4: 7, 5: 9, 6: 5, 7: 7, 8: 3, 9: 5}, {0: 5, 3: 1}, {0: 5, 1: 3, 2: 9, 3: 1, 4: 7, 5: 9, 6: 5, 7: 7, 8: 3, 9: 5})))
13:(12, ((1, 4, 1, 0, 2, 2), ({0: 6, 1: 9, 2: 3, 3: 6, 4: 5, 5: 3, 6: 7, 7: 5, 8: 9, 9: 7}, {0: 1, 3: 5}, {0: 1, 1: 9, 2: 3, 3: 5, 4: 5, 5: 3, 6: 7, 7: 5, 8: 9, 9: 7})))
14:(12, ((1, 4, 2, 0, 3, 3), ({0: 6, 1: 5, 2: 7, 3: 6, 4: 3, 5: 7, 6: 9, 7: 3, 8: 5, 9: 9}, {0: 1, 3: 5}, {0: 1, 1: 5, 2: 7, 3: 5, 4: 3, 5: 7, 6: 9, 7: 3, 8: 5, 9: 9})))
15:(12, ((1, 4, 3, 0, 4, 4), ({0: 6, 1: 7, 2: 5, 3: 6, 4: 9, 5: 5, 6: 3, 7: 9, 8: 7, 9: 3}, {0: 1, 3: 5}, {0: 1, 1: 7, 2: 5, 3: 5, 4: 9, 5: 5, 6: 3, 7: 9, 8: 7, 9: 3})))
16:(12, ((1, 4, 4, 0, 0, 0), ({0: 6, 1: 3, 2: 9, 3: 6, 4: 7, 5: 9, 6: 5, 7: 7, 8: 3, 9: 5}, {0: 1, 3: 5}, {0: 1, 1: 3, 2: 9, 3: 5, 4: 7, 5: 9, 6: 5, 7: 7, 8: 3, 9: 5})))
17:(12, ((2, 0, 0, 2, 2, 0), ({0: 6, 1: 9, 2: 7, 3: 5, 4: 3, 5: 6, 6: 9, 7: 7, 8: 5, 9: 3}, {0: 5, 5: 1}, {0: 5, 1: 9, 2: 7, 3: 5, 4: 3, 5: 1, 6: 9, 7: 7, 8: 5, 9: 3})))
18:(12, ((2, 1, 0, 3, 2, 4), ({0: 6, 1: 3, 2: 5, 3: 7, 4: 9, 5: 6, 6: 3, 7: 5, 8: 7, 9: 9}, {0: 5, 5: 1}, {0: 5, 1: 3, 2: 5, 3: 7, 4: 9, 5: 1, 6: 3, 7: 5, 8: 7, 9: 9})))
19:(12, ((2, 2, 0, 4, 2, 3), ({0: 6, 1: 5, 2: 9, 3: 3, 4: 7, 5: 6, 6: 5, 7: 9, 8: 3, 9: 7}, {0: 5, 5: 1}, {0: 5, 1: 5, 2: 9, 3: 3, 4: 7, 5: 1, 6: 5, 7: 9, 8: 3, 9: 7})))
20:(12, ((2, 3, 1, 0, 3, 3), ({0: 6, 1: 7, 2: 3, 3: 9, 4: 5, 5: 6, 6: 7, 7: 3, 8: 9, 9: 5}, {0: 1, 5: 5}, {0: 1, 1: 7, 2: 3, 3: 9, 4: 5, 5: 5, 6: 7, 7: 3, 8: 9, 9: 5})))
21:(12, ((2, 3, 2, 0, 4, 4), ({0: 6, 1: 9, 2: 7, 3: 5, 4: 3, 5: 6, 6: 9, 7: 7, 8: 5, 9: 3}, {0: 1, 5: 5}, {0: 1, 1: 9, 2: 7, 3: 5, 4: 3, 5: 5, 6: 9, 7: 7, 8: 5, 9: 3})))
22:(12, ((2, 3, 3, 0, 0, 0), ({0: 6, 1: 3, 2: 5, 3: 7, 4: 9, 5: 6, 6: 3, 7: 5, 8: 7, 9: 9}, {0: 1, 5: 5}, {0: 1, 1: 3, 2: 5, 3: 7, 4: 9, 5: 5, 6: 3, 7: 5, 8: 7, 9: 9})))
23:(12, ((2, 3, 4, 0, 1, 1), ({0: 6, 1: 5, 2: 9, 3: 3, 4: 7, 5: 6, 6: 5, 7: 9, 8: 3, 9: 7}, {0: 1, 5: 5}, {0: 1, 1: 5, 2: 9, 3: 3, 4: 7, 5: 5, 6: 5, 7: 9, 8: 3, 9: 7})))
24:(12, ((2, 4, 0, 1, 2, 1), ({0: 6, 1: 7, 2: 3, 3: 9, 4: 5, 5: 6, 6: 7, 7: 3, 8: 9, 9: 5}, {0: 5, 5: 1}, {0: 5, 1: 7, 2: 3, 3: 9, 4: 5, 5: 1, 6: 7, 7: 3, 8: 9, 9: 5})))
25:(12, ((3, 0, 0, 3, 3, 0), ({0: 6, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 6, 8: 7, 9: 5}, {0: 5, 7: 1}, {0: 5, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 1, 8: 7, 9: 5})))
26:(12, ((3, 1, 0, 4, 3, 4), ({0: 6, 1: 7, 2: 9, 3: 5, 4: 7, 5: 3, 6: 5, 7: 6, 8: 3, 9: 9}, {0: 5, 7: 1}, {0: 5, 1: 7, 2: 9, 3: 5, 4: 7, 5: 3, 6: 5, 7: 1, 8: 3, 9: 9})))
27:(12, ((3, 2, 1, 0, 4, 4), ({0: 6, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 6, 8: 9, 9: 3}, {0: 1, 7: 5}, {0: 1, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 5, 8: 9, 9: 3})))
28:(12, ((3, 2, 2, 0, 0, 0), ({0: 6, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 6, 8: 5, 9: 7}, {0: 1, 7: 5}, {0: 1, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 5, 8: 5, 9: 7})))
29:(12, ((3, 2, 3, 0, 1, 1), ({0: 6, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 6, 8: 7, 9: 5}, {0: 1, 7: 5}, {0: 1, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 5, 8: 7, 9: 5})))
30:(12, ((3, 2, 4, 0, 2, 2), ({0: 6, 1: 7, 2: 9, 3: 5, 4: 7, 5: 3, 6: 5, 7: 6, 8: 3, 9: 9}, {0: 1, 7: 5}, {0: 1, 1: 7, 2: 9, 3: 5, 4: 7, 5: 3, 6: 5, 7: 5, 8: 3, 9: 9})))
31:(12, ((3, 3, 0, 1, 3, 2), ({0: 6, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 6, 8: 9, 9: 3}, {0: 5, 7: 1}, {0: 5, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 1, 8: 9, 9: 3})))
32:(12, ((3, 4, 0, 2, 3, 1), ({0: 6, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 6, 8: 5, 9: 7}, {0: 5, 7: 1}, {0: 5, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 1, 8: 5, 9: 7})))
33:(12, ((4, 0, 0, 4, 4, 0), ({0: 6, 1: 9, 2: 9, 3: 7, 4: 7, 5: 5, 6: 5, 7: 3, 8: 3, 9: 6}, {0: 5, 9: 1}, {0: 5, 1: 9, 2: 9, 3: 7, 4: 7, 5: 5, 6: 5, 7: 3, 8: 3, 9: 1})))
34:(12, ((4, 1, 1, 0, 0, 0), ({0: 6, 1: 3, 2: 3, 3: 5, 4: 5, 5: 7, 6: 7, 7: 9, 8: 9, 9: 6}, {0: 1, 9: 5}, {0: 1, 1: 3, 2: 3, 3: 5, 4: 5, 5: 7, 6: 7, 7: 9, 8: 9, 9: 5})))
35:(12, ((4, 1, 2, 0, 1, 1), ({0: 6, 1: 7, 2: 7, 3: 3, 4: 3, 5: 9, 6: 9, 7: 5, 8: 5, 9: 6}, {0: 1, 9: 5}, {0: 1, 1: 7, 2: 7, 3: 3, 4: 3, 5: 9, 6: 9, 7: 5, 8: 5, 9: 5})))
36:(12, ((4, 1, 3, 0, 2, 2), ({0: 6, 1: 5, 2: 5, 3: 9, 4: 9, 5: 3, 6: 3, 7: 7, 8: 7, 9: 6}, {0: 1, 9: 5}, {0: 1, 1: 5, 2: 5, 3: 9, 4: 9, 5: 3, 6: 3, 7: 7, 8: 7, 9: 5})))
37:(12, ((4, 1, 4, 0, 3, 3), ({0: 6, 1: 9, 2: 9, 3: 7, 4: 7, 5: 5, 6: 5, 7: 3, 8: 3, 9: 6}, {0: 1, 9: 5}, {0: 1, 1: 9, 2: 9, 3: 7, 4: 7, 5: 5, 6: 5, 7: 3, 8: 3, 9: 5})))
38:(12, ((4, 2, 0, 1, 4, 3), ({0: 6, 1: 3, 2: 3, 3: 5, 4: 5, 5: 7, 6: 7, 7: 9, 8: 9, 9: 6}, {0: 5, 9: 1}, {0: 5, 1: 3, 2: 3, 3: 5, 4: 5, 5: 7, 6: 7, 7: 9, 8: 9, 9: 1})))
39:(12, ((4, 3, 0, 2, 4, 2), ({0: 6, 1: 7, 2: 7, 3: 3, 4: 3, 5: 9, 6: 9, 7: 5, 8: 5, 9: 6}, {0: 5, 9: 1}, {0: 5, 1: 7, 2: 7, 3: 3, 4: 3, 5: 9, 6: 9, 7: 5, 8: 5, 9: 1})))
40:(12, ((4, 4, 0, 3, 4, 1), ({0: 6, 1: 5, 2: 5, 3: 9, 4: 9, 5: 3, 6: 3, 7: 7, 8: 7, 9: 6}, {0: 5, 9: 1}, {0: 5, 1: 5, 2: 5, 3: 9, 4: 9, 5: 3, 6: 3, 7: 7, 8: 7, 9: 1})))
41:(21, ((0, 1, 1, 1, 1, 0), ({0: 10, 1: 10, 2: 2, 3: 2, 4: 4, 5: 4, 6: 6, 7: 6, 8: 8, 9: 8}, {0: 5, 1: 5}, {0: 5, 1: 5, 2: 2, 3: 2, 4: 4, 5: 4, 6: 6, 7: 6, 8: 8, 9: 8})))
42:(21, ((0, 2, 2, 2, 2, 0), ({0: 10, 1: 10, 2: 6, 3: 6, 4: 2, 5: 2, 6: 8, 7: 8, 8: 4, 9: 4}, {0: 5, 1: 5}, {0: 5, 1: 5, 2: 6, 3: 6, 4: 2, 5: 2, 6: 8, 7: 8, 8: 4, 9: 4})))
43:(21, ((0, 3, 3, 3, 3, 0), ({0: 10, 1: 10, 2: 4, 3: 4, 4: 8, 5: 8, 6: 2, 7: 2, 8: 6, 9: 6}, {0: 5, 1: 5}, {0: 5, 1: 5, 2: 4, 3: 4, 4: 8, 5: 8, 6: 2, 7: 2, 8: 6, 9: 6})))
44:(21, ((0, 4, 4, 4, 4, 0), ({0: 10, 1: 10, 2: 8, 3: 8, 4: 6, 5: 6, 6: 4, 7: 4, 8: 2, 9: 2}, {0: 5, 1: 5}, {0: 5, 1: 5, 2: 8, 3: 8, 4: 6, 5: 6, 6: 4, 7: 4, 8: 2, 9: 2})))
45:(21, ((1, 0, 1, 1, 2, 1), ({0: 10, 1: 8, 2: 2, 3: 10, 4: 4, 5: 2, 6: 6, 7: 4, 8: 8, 9: 6}, {0: 5, 3: 5}, {0: 5, 1: 8, 2: 2, 3: 5, 4: 4, 5: 2, 6: 6, 7: 4, 8: 8, 9: 6})))
46:(21, ((1, 1, 2, 2, 3, 1), ({0: 10, 1: 4, 2: 6, 3: 10, 4: 2, 5: 6, 6: 8, 7: 2, 8: 4, 9: 8}, {0: 5, 3: 5}, {0: 5, 1: 4, 2: 6, 3: 5, 4: 2, 5: 6, 6: 8, 7: 2, 8: 4, 9: 8})))
47:(21, ((1, 2, 3, 3, 4, 1), ({0: 10, 1: 6, 2: 4, 3: 10, 4: 8, 5: 4, 6: 2, 7: 8, 8: 6, 9: 2}, {0: 5, 3: 5}, {0: 5, 1: 6, 2: 4, 3: 5, 4: 8, 5: 4, 6: 2, 7: 8, 8: 6, 9: 2})))
48:(21, ((1, 3, 4, 4, 0, 1), ({0: 10, 1: 2, 2: 8, 3: 10, 4: 6, 5: 8, 6: 4, 7: 6, 8: 2, 9: 4}, {0: 5, 3: 5}, {0: 5, 1: 2, 2: 8, 3: 5, 4: 6, 5: 8, 6: 4, 7: 6, 8: 2, 9: 4})))
49:(21, ((2, 0, 2, 2, 4, 2), ({0: 10, 1: 8, 2: 6, 3: 4, 4: 2, 5: 10, 6: 8, 7: 6, 8: 4, 9: 2}, {0: 5, 5: 5}, {0: 5, 1: 8, 2: 6, 3: 4, 4: 2, 5: 5, 6: 8, 7: 6, 8: 4, 9: 2})))
50:(21, ((2, 1, 3, 3, 0, 2), ({0: 10, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 2, 7: 4, 8: 6, 9: 8}, {0: 5, 5: 5}, {0: 5, 1: 2, 2: 4, 3: 6, 4: 8, 5: 5, 6: 2, 7: 4, 8: 6, 9: 8})))
51:(21, ((2, 2, 4, 4, 1, 2), ({0: 10, 1: 4, 2: 8, 3: 2, 4: 6, 5: 10, 6: 4, 7: 8, 8: 2, 9: 6}, {0: 5, 5: 5}, {0: 5, 1: 4, 2: 8, 3: 2, 4: 6, 5: 5, 6: 4, 7: 8, 8: 2, 9: 6})))
52:(21, ((2, 4, 1, 1, 3, 2), ({0: 10, 1: 6, 2: 2, 3: 8, 4: 4, 5: 10, 6: 6, 7: 2, 8: 8, 9: 4}, {0: 5, 5: 5}, {0: 5, 1: 6, 2: 2, 3: 8, 4: 4, 5: 5, 6: 6, 7: 2, 8: 8, 9: 4})))
53:(21, ((3, 0, 3, 3, 1, 3), ({0: 10, 1: 8, 2: 4, 3: 2, 4: 8, 5: 6, 6: 2, 7: 10, 8: 6, 9: 4}, {0: 5, 7: 5}, {0: 5, 1: 8, 2: 4, 3: 2, 4: 8, 5: 6, 6: 2, 7: 5, 8: 6, 9: 4})))
54:(21, ((3, 1, 4, 4, 2, 3), ({0: 10, 1: 6, 2: 8, 3: 4, 4: 6, 5: 2, 6: 4, 7: 10, 8: 2, 9: 8}, {0: 5, 7: 5}, {0: 5, 1: 6, 2: 8, 3: 4, 4: 6, 5: 2, 6: 4, 7: 5, 8: 2, 9: 8})))
55:(21, ((3, 3, 1, 1, 4, 3), ({0: 10, 1: 4, 2: 2, 3: 6, 4: 4, 5: 8, 6: 6, 7: 10, 8: 8, 9: 2}, {0: 5, 7: 5}, {0: 5, 1: 4, 2: 2, 3: 6, 4: 4, 5: 8, 6: 6, 7: 5, 8: 8, 9: 2})))
56:(21, ((3, 4, 2, 2, 0, 3), ({0: 10, 1: 2, 2: 6, 3: 8, 4: 2, 5: 4, 6: 8, 7: 10, 8: 4, 9: 6}, {0: 5, 7: 5}, {0: 5, 1: 2, 2: 6, 3: 8, 4: 2, 5: 4, 6: 8, 7: 5, 8: 4, 9: 6})))
57:(21, ((4, 0, 4, 4, 3, 4), ({0: 10, 1: 8, 2: 8, 3: 6, 4: 6, 5: 4, 6: 4, 7: 2, 8: 2, 9: 10}, {0: 5, 9: 5}, {0: 5, 1: 8, 2: 8, 3: 6, 4: 6, 5: 4, 6: 4, 7: 2, 8: 2, 9: 5})))
58:(21, ((4, 2, 1, 1, 0, 4), ({0: 10, 1: 2, 2: 2, 3: 4, 4: 4, 5: 6, 6: 6, 7: 8, 8: 8, 9: 10}, {0: 5, 9: 5}, {0: 5, 1: 2, 2: 2, 3: 4, 4: 4, 5: 6, 6: 6, 7: 8, 8: 8, 9: 5})))
59:(21, ((4, 3, 2, 2, 1, 4), ({0: 10, 1: 6, 2: 6, 3: 2, 4: 2, 5: 8, 6: 8, 7: 4, 8: 4, 9: 10}, {0: 5, 9: 5}, {0: 5, 1: 6, 2: 6, 3: 2, 4: 2, 5: 8, 6: 8, 7: 4, 8: 4, 9: 5})))
60:(21, ((4, 4, 3, 3, 2, 4), ({0: 10, 1: 4, 2: 4, 3: 8, 4: 8, 5: 2, 6: 2, 7: 6, 8: 6, 9: 10}, {0: 5, 9: 5}, {0: 5, 1: 4, 2: 4, 3: 8, 4: 8, 5: 2, 6: 2, 7: 6, 8: 6, 9: 5})))
61:(23, ((0, 1, 4, 1, 4, 3), ({0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4}, {0: 2, 1: 2}, {0: 2, 1: 2, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4})))
62:(23, ((0, 2, 3, 2, 3, 1), ({0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5}, {0: 2, 1: 2}, {0: 2, 1: 2, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5})))
63:(23, ((0, 3, 2, 3, 2, 4), ({0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5}, {0: 2, 1: 2}, {0: 2, 1: 2, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 4, 8: 5, 9: 5})))
64:(23, ((0, 4, 1, 4, 1, 2), ({0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4}, {0: 2, 1: 2}, {0: 2, 1: 2, 2: 4, 3: 4, 4: 5, 5: 5, 6: 5, 7: 5, 8: 4, 9: 4})))
65:(23, ((1, 0, 4, 1, 0, 4), ({0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 5, 8: 4, 9: 5}, {0: 2, 3: 2}, {0: 2, 1: 4, 2: 4, 3: 2, 4: 5, 5: 4, 6: 5, 7: 5, 8: 4, 9: 5})))
66:(23, ((1, 1, 3, 2, 4, 2), ({0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 4}, {0: 2, 3: 2}, {0: 2, 1: 5, 2: 5, 3: 2, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 4})))
67:(23, ((1, 2, 2, 3, 3, 0), ({0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 4}, {0: 2, 3: 2}, {0: 2, 1: 5, 2: 5, 3: 2, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 4})))
68:(23, ((1, 3, 1, 4, 2, 3), ({0: 4, 1: 4, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 5, 8: 4, 9: 5}, {0: 2, 3: 2}, {0: 2, 1: 4, 2: 4, 3: 2, 4: 5, 5: 4, 6: 5, 7: 5, 8: 4, 9: 5})))
69:(23, ((2, 0, 3, 2, 0, 3), ({0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}, {0: 2, 5: 2}, {0: 2, 1: 4, 2: 5, 3: 5, 4: 4, 5: 2, 6: 4, 7: 5, 8: 5, 9: 4})))
70:(23, ((2, 1, 2, 3, 4, 1), ({0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}, {0: 2, 5: 2}, {0: 2, 1: 4, 2: 5, 3: 5, 4: 4, 5: 2, 6: 4, 7: 5, 8: 5, 9: 4})))
71:(23, ((2, 2, 1, 4, 3, 4), ({0: 4, 1: 5, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 5}, {0: 2, 5: 2}, {0: 2, 1: 5, 2: 4, 3: 4, 4: 5, 5: 2, 6: 5, 7: 4, 8: 4, 9: 5})))
72:(23, ((2, 4, 4, 1, 1, 0), ({0: 4, 1: 5, 2: 4, 3: 4, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 5}, {0: 2, 5: 2}, {0: 2, 1: 5, 2: 4, 3: 4, 4: 5, 5: 2, 6: 5, 7: 4, 8: 4, 9: 5})))
73:(23, ((3, 0, 2, 3, 0, 2), ({0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}, {0: 2, 7: 2}, {0: 2, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 2, 8: 5, 9: 5})))
74:(23, ((3, 1, 1, 4, 4, 0), ({0: 4, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 4}, {0: 2, 7: 2}, {0: 2, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 2, 8: 4, 9: 4})))
75:(23, ((3, 3, 4, 1, 2, 1), ({0: 4, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 4, 8: 4, 9: 4}, {0: 2, 7: 2}, {0: 2, 1: 5, 2: 4, 3: 5, 4: 5, 5: 4, 6: 5, 7: 2, 8: 4, 9: 4})))
76:(23, ((3, 4, 3, 2, 1, 4), ({0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}, {0: 2, 7: 2}, {0: 2, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 2, 8: 5, 9: 5})))
77:(23, ((4, 0, 1, 4, 0, 1), ({0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 4, 8: 4, 9: 4}, {0: 2, 9: 2}, {0: 2, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 4, 8: 4, 9: 2})))
78:(23, ((4, 2, 4, 1, 3, 2), ({0: 4, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 4, 8: 4, 9: 4}, {0: 2, 9: 2}, {0: 2, 1: 4, 2: 4, 3: 5, 4: 5, 5: 5, 6: 5, 7: 4, 8: 4, 9: 2})))
79:(23, ((4, 3, 3, 2, 2, 0), ({0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}, {0: 2, 9: 2}, {0: 2, 1: 5, 2: 5, 3: 4, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 2})))
80:(23, ((4, 4, 2, 3, 1, 3), ({0: 4, 1: 5, 2: 5, 3: 4, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}, {0: 2, 9: 2}, {0: 2, 1: 5, 2: 5, 3: 4, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 2})))
81:(32, ((0, 1, 2, 1, 2, 1), ({0: 6, 1: 6, 2: 4, 3: 4, 4: 3, 5: 3, 6: 4, 7: 4, 8: 5, 9: 5}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 4, 3: 4, 4: 3, 5: 3, 6: 4, 7: 4, 8: 5, 9: 5})))
82:(32, ((0, 1, 3, 1, 3, 2), ({0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4})))
83:(32, ((0, 2, 1, 2, 1, 4), ({0: 6, 1: 6, 2: 4, 3: 4, 4: 3, 5: 3, 6: 4, 7: 4, 8: 5, 9: 5}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 4, 3: 4, 4: 3, 5: 3, 6: 4, 7: 4, 8: 5, 9: 5})))
84:(32, ((0, 2, 4, 2, 4, 2), ({0: 6, 1: 6, 2: 4, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 3, 9: 3}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 4, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 3, 9: 3})))
85:(32, ((0, 3, 1, 3, 1, 3), ({0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4})))
86:(32, ((0, 3, 4, 3, 4, 1), ({0: 6, 1: 6, 2: 5, 3: 5, 4: 4, 5: 4, 6: 3, 7: 3, 8: 4, 9: 4}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 5, 3: 5, 4: 4, 5: 4, 6: 3, 7: 3, 8: 4, 9: 4})))
87:(32, ((0, 4, 2, 4, 2, 3), ({0: 6, 1: 6, 2: 4, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 3, 9: 3}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 4, 3: 4, 4: 4, 5: 4, 6: 5, 7: 5, 8: 3, 9: 3})))
88:(32, ((0, 4, 3, 4, 3, 4), ({0: 6, 1: 6, 2: 5, 3: 5, 4: 4, 5: 4, 6: 3, 7: 3, 8: 4, 9: 4}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 5, 3: 5, 4: 4, 5: 4, 6: 3, 7: 3, 8: 4, 9: 4})))
89:(32, ((1, 0, 2, 1, 3, 2), ({0: 6, 1: 5, 2: 4, 3: 6, 4: 3, 5: 4, 6: 4, 7: 3, 8: 5, 9: 4}, {0: 3, 3: 3}, {0: 3, 1: 5, 2: 4, 3: 3, 4: 3, 5: 4, 6: 4, 7: 3, 8: 5, 9: 4})))
90:(32, ((1, 0, 3, 1, 4, 3), ({0: 6, 1: 4, 2: 3, 3: 6, 4: 5, 5: 3, 6: 4, 7: 5, 8: 4, 9: 4}, {0: 3, 3: 3}, {0: 3, 1: 4, 2: 3, 3: 3, 4: 5, 5: 3, 6: 4, 7: 5, 8: 4, 9: 4})))
91:(32, ((1, 1, 1, 2, 2, 0), ({0: 6, 1: 5, 2: 4, 3: 6, 4: 3, 5: 4, 6: 4, 7: 3, 8: 5, 9: 4}, {0: 3, 3: 3}, {0: 3, 1: 5, 2: 4, 3: 3, 4: 3, 5: 4, 6: 4, 7: 3, 8: 5, 9: 4})))
92:(32, ((1, 1, 4, 2, 0, 3), ({0: 6, 1: 3, 2: 4, 3: 6, 4: 4, 5: 4, 6: 5, 7: 4, 8: 3, 9: 5}, {0: 3, 3: 3}, {0: 3, 1: 3, 2: 4, 3: 3, 4: 4, 5: 4, 6: 5, 7: 4, 8: 3, 9: 5})))
93:(32, ((1, 2, 1, 3, 2, 4), ({0: 6, 1: 4, 2: 3, 3: 6, 4: 5, 5: 3, 6: 4, 7: 5, 8: 4, 9: 4}, {0: 3, 3: 3}, {0: 3, 1: 4, 2: 3, 3: 3, 4: 5, 5: 3, 6: 4, 7: 5, 8: 4, 9: 4})))
94:(32, ((1, 2, 4, 3, 0, 2), ({0: 6, 1: 4, 2: 5, 3: 6, 4: 4, 5: 5, 6: 3, 7: 4, 8: 4, 9: 3}, {0: 3, 3: 3}, {0: 3, 1: 4, 2: 5, 3: 3, 4: 4, 5: 5, 6: 3, 7: 4, 8: 4, 9: 3})))
95:(32, ((1, 3, 2, 4, 3, 4), ({0: 6, 1: 3, 2: 4, 3: 6, 4: 4, 5: 4, 6: 5, 7: 4, 8: 3, 9: 5}, {0: 3, 3: 3}, {0: 3, 1: 3, 2: 4, 3: 3, 4: 4, 5: 4, 6: 5, 7: 4, 8: 3, 9: 5})))
96:(32, ((1, 3, 3, 4, 4, 0), ({0: 6, 1: 4, 2: 5, 3: 6, 4: 4, 5: 5, 6: 3, 7: 4, 8: 4, 9: 3}, {0: 3, 3: 3}, {0: 3, 1: 4, 2: 5, 3: 3, 4: 4, 5: 5, 6: 3, 7: 4, 8: 4, 9: 3})))
97:(32, ((2, 0, 1, 2, 3, 1), ({0: 6, 1: 4, 2: 4, 3: 5, 4: 3, 5: 6, 6: 4, 7: 4, 8: 5, 9: 3}, {0: 3, 5: 3}, {0: 3, 1: 4, 2: 4, 3: 5, 4: 3, 5: 3, 6: 4, 7: 4, 8: 5, 9: 3})))
98:(32, ((2, 0, 4, 2, 1, 4), ({0: 6, 1: 5, 2: 4, 3: 3, 4: 4, 5: 6, 6: 5, 7: 4, 8: 3, 9: 4}, {0: 3, 5: 3}, {0: 3, 1: 5, 2: 4, 3: 3, 4: 4, 5: 3, 6: 5, 7: 4, 8: 3, 9: 4})))
99:(32, ((2, 1, 1, 3, 3, 0), ({0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}, {0: 3, 5: 3}, {0: 3, 1: 4, 2: 3, 3: 4, 4: 5, 5: 3, 6: 4, 7: 3, 8: 4, 9: 5})))
100:(32, ((2, 1, 4, 3, 1, 3), ({0: 6, 1: 3, 2: 5, 3: 4, 4: 4, 5: 6, 6: 3, 7: 5, 8: 4, 9: 4}, {0: 3, 5: 3}, {0: 3, 1: 3, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 5, 8: 4, 9: 4})))
101:(32, ((2, 2, 2, 4, 4, 0), ({0: 6, 1: 5, 2: 4, 3: 3, 4: 4, 5: 6, 6: 5, 7: 4, 8: 3, 9: 4}, {0: 3, 5: 3}, {0: 3, 1: 5, 2: 4, 3: 3, 4: 4, 5: 3, 6: 5, 7: 4, 8: 3, 9: 4})))
102:(32, ((2, 2, 3, 4, 0, 1), ({0: 6, 1: 3, 2: 5, 3: 4, 4: 4, 5: 6, 6: 3, 7: 5, 8: 4, 9: 4}, {0: 3, 5: 3}, {0: 3, 1: 3, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 5, 8: 4, 9: 4})))
103:(32, ((2, 4, 2, 1, 4, 3), ({0: 6, 1: 4, 2: 4, 3: 5, 4: 3, 5: 6, 6: 4, 7: 4, 8: 5, 9: 3}, {0: 3, 5: 3}, {0: 3, 1: 4, 2: 4, 3: 5, 4: 3, 5: 3, 6: 4, 7: 4, 8: 5, 9: 3})))
104:(32, ((2, 4, 3, 1, 0, 4), ({0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}, {0: 3, 5: 3}, {0: 3, 1: 4, 2: 3, 3: 4, 4: 5, 5: 3, 6: 4, 7: 3, 8: 4, 9: 5})))
105:(32, ((3, 0, 1, 3, 4, 1), ({0: 6, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 6, 8: 4, 9: 3}, {0: 3, 7: 3}, {0: 3, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 3, 8: 4, 9: 3})))
106:(32, ((3, 0, 4, 3, 2, 4), ({0: 6, 1: 4, 2: 5, 3: 3, 4: 4, 5: 4, 6: 3, 7: 6, 8: 4, 9: 5}, {0: 3, 7: 3}, {0: 3, 1: 4, 2: 5, 3: 3, 4: 4, 5: 4, 6: 3, 7: 3, 8: 4, 9: 5})))
107:(32, ((3, 1, 2, 4, 0, 1), ({0: 6, 1: 4, 2: 4, 3: 5, 4: 4, 5: 3, 6: 5, 7: 6, 8: 3, 9: 4}, {0: 3, 7: 3}, {0: 3, 1: 4, 2: 4, 3: 5, 4: 4, 5: 3, 6: 5, 7: 3, 8: 3, 9: 4})))
108:(32, ((3, 1, 3, 4, 1, 2), ({0: 6, 1: 4, 2: 5, 3: 3, 4: 4, 5: 4, 6: 3, 7: 6, 8: 4, 9: 5}, {0: 3, 7: 3}, {0: 3, 1: 4, 2: 5, 3: 3, 4: 4, 5: 4, 6: 3, 7: 3, 8: 4, 9: 5})))
109:(32, ((3, 3, 2, 1, 0, 4), ({0: 6, 1: 3, 2: 4, 3: 4, 4: 3, 5: 5, 6: 4, 7: 6, 8: 5, 9: 4}, {0: 3, 7: 3}, {0: 3, 1: 3, 2: 4, 3: 4, 4: 3, 5: 5, 6: 4, 7: 3, 8: 5, 9: 4})))
110:(32, ((3, 3, 3, 1, 1, 0), ({0: 6, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 6, 8: 4, 9: 3}, {0: 3, 7: 3}, {0: 3, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 3, 8: 4, 9: 3})))
111:(32, ((3, 4, 1, 2, 4, 2), ({0: 6, 1: 3, 2: 4, 3: 4, 4: 3, 5: 5, 6: 4, 7: 6, 8: 5, 9: 4}, {0: 3, 7: 3}, {0: 3, 1: 3, 2: 4, 3: 4, 4: 3, 5: 5, 6: 4, 7: 3, 8: 5, 9: 4})))
112:(32, ((3, 4, 4, 2, 2, 0), ({0: 6, 1: 4, 2: 4, 3: 5, 4: 4, 5: 3, 6: 5, 7: 6, 8: 3, 9: 4}, {0: 3, 7: 3}, {0: 3, 1: 4, 2: 4, 3: 5, 4: 4, 5: 3, 6: 5, 7: 3, 8: 3, 9: 4})))
113:(32, ((4, 0, 2, 4, 1, 2), ({0: 6, 1: 4, 2: 4, 3: 4, 4: 4, 5: 5, 6: 5, 7: 3, 8: 3, 9: 6}, {0: 3, 9: 3}, {0: 3, 1: 4, 2: 4, 3: 4, 4: 4, 5: 5, 6: 5, 7: 3, 8: 3, 9: 3})))
114:(32, ((4, 0, 3, 4, 2, 3), ({0: 6, 1: 5, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 4, 8: 4, 9: 6}, {0: 3, 9: 3}, {0: 3, 1: 5, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 4, 8: 4, 9: 3})))
115:(32, ((4, 2, 2, 1, 1, 0), ({0: 6, 1: 4, 2: 4, 3: 3, 4: 3, 5: 4, 6: 4, 7: 5, 8: 5, 9: 6}, {0: 3, 9: 3}, {0: 3, 1: 4, 2: 4, 3: 3, 4: 3, 5: 4, 6: 4, 7: 5, 8: 5, 9: 3})))
116:(32, ((4, 2, 3, 1, 2, 1), ({0: 6, 1: 3, 2: 3, 3: 5, 4: 5, 5: 4, 6: 4, 7: 4, 8: 4, 9: 6}, {0: 3, 9: 3}, {0: 3, 1: 3, 2: 3, 3: 5, 4: 5, 5: 4, 6: 4, 7: 4, 8: 4, 9: 3})))
117:(32, ((4, 3, 1, 2, 0, 3), ({0: 6, 1: 4, 2: 4, 3: 3, 4: 3, 5: 4, 6: 4, 7: 5, 8: 5, 9: 6}, {0: 3, 9: 3}, {0: 3, 1: 4, 2: 4, 3: 3, 4: 3, 5: 4, 6: 4, 7: 5, 8: 5, 9: 3})))
118:(32, ((4, 3, 4, 2, 3, 1), ({0: 6, 1: 4, 2: 4, 3: 4, 4: 4, 5: 5, 6: 5, 7: 3, 8: 3, 9: 6}, {0: 3, 9: 3}, {0: 3, 1: 4, 2: 4, 3: 4, 4: 4, 5: 5, 6: 5, 7: 3, 8: 3, 9: 3})))
119:(32, ((4, 4, 1, 3, 0, 2), ({0: 6, 1: 3, 2: 3, 3: 5, 4: 5, 5: 4, 6: 4, 7: 4, 8: 4, 9: 6}, {0: 3, 9: 3}, {0: 3, 1: 3, 2: 3, 3: 5, 4: 5, 5: 4, 6: 4, 7: 4, 8: 4, 9: 3})))
120:(32, ((4, 4, 4, 3, 3, 0), ({0: 6, 1: 5, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 4, 8: 4, 9: 6}, {0: 3, 9: 3}, {0: 3, 1: 5, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 4, 8: 4, 9: 3})))
===
py_adhoc_call { +lineno }  script.阴阳五行冫德性纟夫妻与亲子   ,_尝试分离子女德行扌 +to_output_all +考虑冫非零代隔数纟直系亲属 | grep '(([^41], [^4], [^4], [^4], [^4], [^14]), '  > /sdcard/0my_files/tmp/0tmp
    #补偿:)
2:(12, ((0, 0, 2, 0, 2, 2), ({0: 6, 1: 6, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5}, {0: 1, 1: 5}, {0: 1, 1: 5, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5})))
3:(12, ((0, 0, 3, 0, 3, 3), ({0: 6, 1: 6, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7}, {0: 1, 1: 5}, {0: 1, 1: 5, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7})))
6:(12, ((0, 2, 0, 2, 0, 3), ({0: 6, 1: 6, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5}, {0: 5, 1: 1}, {0: 5, 1: 1, 2: 7, 3: 7, 4: 3, 5: 3, 6: 9, 7: 9, 8: 5, 9: 5})))
7:(12, ((0, 3, 0, 3, 0, 2), ({0: 6, 1: 6, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7}, {0: 5, 1: 1}, {0: 5, 1: 1, 2: 5, 3: 5, 4: 9, 5: 9, 6: 3, 7: 3, 8: 7, 9: 7})))
17:(12, ((2, 0, 0, 2, 2, 0), ({0: 6, 1: 9, 2: 7, 3: 5, 4: 3, 5: 6, 6: 9, 7: 7, 8: 5, 9: 3}, {0: 5, 5: 1}, {0: 5, 1: 9, 2: 7, 3: 5, 4: 3, 5: 1, 6: 9, 7: 7, 8: 5, 9: 3})))
20:(12, ((2, 3, 1, 0, 3, 3), ({0: 6, 1: 7, 2: 3, 3: 9, 4: 5, 5: 6, 6: 7, 7: 3, 8: 9, 9: 5}, {0: 1, 5: 5}, {0: 1, 1: 7, 2: 3, 3: 9, 4: 5, 5: 5, 6: 7, 7: 3, 8: 9, 9: 5})))
22:(12, ((2, 3, 3, 0, 0, 0), ({0: 6, 1: 3, 2: 5, 3: 7, 4: 9, 5: 6, 6: 3, 7: 5, 8: 7, 9: 9}, {0: 1, 5: 5}, {0: 1, 1: 3, 2: 5, 3: 7, 4: 9, 5: 5, 6: 3, 7: 5, 8: 7, 9: 9})))
25:(12, ((3, 0, 0, 3, 3, 0), ({0: 6, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 6, 8: 7, 9: 5}, {0: 5, 7: 1}, {0: 5, 1: 9, 2: 5, 3: 3, 4: 9, 5: 7, 6: 3, 7: 1, 8: 7, 9: 5})))
28:(12, ((3, 2, 2, 0, 0, 0), ({0: 6, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 6, 8: 5, 9: 7}, {0: 1, 7: 5}, {0: 1, 1: 3, 2: 7, 3: 9, 4: 3, 5: 5, 6: 9, 7: 5, 8: 5, 9: 7})))
31:(12, ((3, 3, 0, 1, 3, 2), ({0: 6, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 6, 8: 9, 9: 3}, {0: 5, 7: 1}, {0: 5, 1: 5, 2: 3, 3: 7, 4: 5, 5: 9, 6: 7, 7: 1, 8: 9, 9: 3})))
41:(21, ((0, 1, 1, 1, 1, 0), ({0: 10, 1: 10, 2: 2, 3: 2, 4: 4, 5: 4, 6: 6, 7: 6, 8: 8, 9: 8}, {0: 5, 1: 5}, {0: 5, 1: 5, 2: 2, 3: 2, 4: 4, 5: 4, 6: 6, 7: 6, 8: 8, 9: 8})))
42:(21, ((0, 2, 2, 2, 2, 0), ({0: 10, 1: 10, 2: 6, 3: 6, 4: 2, 5: 2, 6: 8, 7: 8, 8: 4, 9: 4}, {0: 5, 1: 5}, {0: 5, 1: 5, 2: 6, 3: 6, 4: 2, 5: 2, 6: 8, 7: 8, 8: 4, 9: 4})))
43:(21, ((0, 3, 3, 3, 3, 0), ({0: 10, 1: 10, 2: 4, 3: 4, 4: 8, 5: 8, 6: 2, 7: 2, 8: 6, 9: 6}, {0: 5, 1: 5}, {0: 5, 1: 5, 2: 4, 3: 4, 4: 8, 5: 8, 6: 2, 7: 2, 8: 6, 9: 6})))
50:(21, ((2, 1, 3, 3, 0, 2), ({0: 10, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 2, 7: 4, 8: 6, 9: 8}, {0: 5, 5: 5}, {0: 5, 1: 2, 2: 4, 3: 6, 4: 8, 5: 5, 6: 2, 7: 4, 8: 6, 9: 8})))
53:(21, ((3, 0, 3, 3, 1, 3), ({0: 10, 1: 8, 2: 4, 3: 2, 4: 8, 5: 6, 6: 2, 7: 10, 8: 6, 9: 4}, {0: 5, 7: 5}, {0: 5, 1: 8, 2: 4, 3: 2, 4: 8, 5: 6, 6: 2, 7: 5, 8: 6, 9: 4})))
69:(23, ((2, 0, 3, 2, 0, 3), ({0: 4, 1: 4, 2: 5, 3: 5, 4: 4, 5: 4, 6: 4, 7: 5, 8: 5, 9: 4}, {0: 2, 5: 2}, {0: 2, 1: 4, 2: 5, 3: 5, 4: 4, 5: 2, 6: 4, 7: 5, 8: 5, 9: 4})))
73:(23, ((3, 0, 2, 3, 0, 2), ({0: 4, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 4, 8: 5, 9: 5}, {0: 2, 7: 2}, {0: 2, 1: 4, 2: 5, 3: 4, 4: 4, 5: 5, 6: 4, 7: 2, 8: 5, 9: 5})))
82:(32, ((0, 1, 3, 1, 3, 2), ({0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4})))
85:(32, ((0, 3, 1, 3, 1, 3), ({0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4})))
99:(32, ((2, 1, 1, 3, 3, 0), ({0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}, {0: 3, 5: 3}, {0: 3, 1: 4, 2: 3, 3: 4, 4: 5, 5: 3, 6: 4, 7: 3, 8: 4, 9: 5})))
110:(32, ((3, 3, 3, 1, 1, 0), ({0: 6, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 6, 8: 4, 9: 3}, {0: 3, 7: 3}, {0: 3, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 3, 8: 4, 9: 3})))
===
不违反玄学的最强4方案:『32即3(3-1)』=>最大化直系亲属最小夫妻代隔数为三，在此前提下冫最大化旁系亲属最小夫妻代隔数也为三
82:(32, ((0, 1, 3, 1, 3, 2), ({0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4})))
85:(32, ((0, 3, 1, 3, 1, 3), ({0: 6, 1: 6, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4}, {0: 3, 1: 3}, {0: 3, 1: 3, 2: 3, 3: 3, 4: 5, 5: 5, 6: 4, 7: 4, 8: 4, 9: 4})))
99:(32, ((2, 1, 1, 3, 3, 0), ({0: 6, 1: 4, 2: 3, 3: 4, 4: 5, 5: 6, 6: 4, 7: 3, 8: 4, 9: 5}, {0: 3, 5: 3}, {0: 3, 1: 4, 2: 3, 3: 4, 4: 5, 5: 3, 6: 4, 7: 3, 8: 4, 9: 5})))
110:(32, ((3, 3, 3, 1, 1, 0), ({0: 6, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 6, 8: 4, 9: 3}, {0: 3, 7: 3}, {0: 3, 1: 5, 2: 3, 3: 4, 4: 5, 5: 4, 6: 4, 7: 3, 8: 4, 9: 3})))
===
===
]]]




from script.阴阳五行冫德性纟夫妻与亲子 import *
]]]'''#'''
__all__ = r'''
    男性
    女性
    金行
    水行
    木行
    火行
    土行
    列表纟性别
    列表纟德行
    列表纟德性
    枚举冫德性乊性别扌
    检查冫德性扌
    检查冫德行扌
    检查冫性别扌
    分解冫德性扌
    构造冫德性扌
    求冫性别纟配偶扌
    求冫德性纟配偶扌
    求冫德性纟子巛母扌
    求冫德性纟女巛母扌
    求冫德性纟母巛子扌
    求冫德性纟母巛女扌
    求冫家庭关系扌
    异常冫无效参数
    求冫祖先德性讠最小非零代隔数扌
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from itertools import product #islice
from seed.tiny_.check import check_type_is, check_int_ge, check_uint_lt
from seed.math.sign_of import sign_of
#.
#.from seed.abc.abc__ver1 import abstractmethod, override, ABC
#.from seed.helper.repr_input import repr_helper
___end_mark_of_excluded_global_names__0___ = ...

#.class __(ABC):
#.    __slots__ = ()
#.    ___no_slots_ok___ = True
#.    def __repr__(sf, /):
#.        return repr_helper(sf, *args, **kwargs)
#.if __name__ == "__main__":
#.    raise NotImplementedError

# 德性<==>(德行,性别)
# 性别:
男性 = 1
女性 = 0
# 德行:
金行 = 4
水行 = 3
木行 = 2
火行 = 1
土行 = 0
列表纟性别 = range(2)
列表纟德行 = range(5)
列表纟德性 = range(10)
def 枚举冫德性乊性别扌(性别):
    检查冫性别扌(性别)
    for 德行 in 列表纟德行:
        德性 = 构造冫德性扌(德行, 性别)
        yield 德性
def 检查冫德性扌(德性):
    check_uint_lt(10, 德性)
def 检查冫德行扌(德行):
    check_uint_lt(5, 德行)
def 检查冫性别扌(性别):
    check_uint_lt(2, 性别)
def 分解冫德性扌(德性):
    检查冫德性扌(德性)
    性别 = 德性&1
    德行 = 德性>>1
    检查冫德行扌(德行)
    检查冫性别扌(性别)
    return (德行, 性别)
def 构造冫德性扌(德行, 性别):
    检查冫德行扌(德行)
    检查冫性别扌(性别)
    德性 = (德行<<1)|性别
    检查冫德性扌(德性)
    return 德性
def 求冫性别纟配偶扌(性别):
    检查冫性别扌(性别)
    性别纟配偶 = 1-性别
    检查冫性别扌(性别纟配偶)
    return 性别纟配偶
def 求冫德性纟配偶扌(夫妻关系, 德性):
    (德行, 性别) = 分解冫德性扌(德性)
    性别纟配偶 = 求冫性别纟配偶扌(性别)
    # !! [夫妻关系 =[%5]= 德行纟夫 -德行纟妻]
    德行纟配偶 = (德行 +夫妻关系*(+1 if 性别==女性 else -1)) %5
    检查冫德行扌(德行纟配偶)
    德性纟配偶 = 构造冫德性扌(德行纟配偶, 性别纟配偶)
    return 德性纟配偶
def 求冫德性纟子巛母扌(母子关系, 德性纟母):
    (德行纟母, 性别纟母) = 分解冫德性扌(德性纟母)
    assert 性别纟母 == 女性
    # !! [母子关系 =[%5]= 德行纟母 -德行纟子]
    德行纟子 = (德行纟母 -母子关系) %5
    检查冫德行扌(德行纟子)
    德性纟子 = 构造冫德性扌(德行纟子, 男性)
    return 德性纟子
def 求冫德性纟女巛母扌(母女关系, 德性纟母):
    (德行纟母, 性别纟母) = 分解冫德性扌(德性纟母)
    assert 性别纟母 == 女性
    # !! [母女关系 =[%5]= 德行纟母 -德行纟女]
    德行纟女 = (德行纟母 -母女关系) %5
    检查冫德行扌(德行纟女)
    德性纟女 = 构造冫德性扌(德行纟女, 女性)
    return 德性纟女

def 求冫德性纟母巛子扌(母子关系, 德性纟子):
    (德行纟子, 性别纟子) = 分解冫德性扌(德性纟子)
    assert 性别纟子 == 男性
    # !! [母子关系 =[%5]= 德行纟母 -德行纟子]
    德行纟母 = (德行纟子 +母子关系) %5
    检查冫德行扌(德行纟母)
    德性纟母 = 构造冫德性扌(德行纟母, 女性)
    return 德性纟母
def 求冫德性纟母巛女扌(母女关系, 德性纟女):
    (德行纟女, 性别纟女) = 分解冫德性扌(德性纟女)
    assert 性别纟女 == 女性
    # !! [母女关系 =[%5]= 德行纟母 -德行纟女]
    德行纟母 = (德行纟女 +母女关系) %5
    检查冫德行扌(德行纟母)
    德性纟母 = 构造冫德性扌(德行纟母, 女性)
    return 德性纟母
def 求冫家庭关系扌(夫妻关系,母子关系,母女关系):
    德性讠配偶 = {}
    德性讠父母 = {}
    德性讠子女 = {}
    for 德性纟母 in 枚举冫德性乊性别扌(女性):
        德性纟父 = 求冫德性纟配偶扌(夫妻关系, 德性纟母)
        德性讠配偶[德性纟母] = 德性纟父
        德性讠配偶[德性纟父] = 德性纟母

        德性纟子 = 求冫德性纟子巛母扌(母子关系, 德性纟母)
        德性纟女 = 求冫德性纟女巛母扌(母女关系, 德性纟母)
        德性纟父母 = (德性纟父,德性纟母)
        德性讠父母[德性纟子] = 德性纟父母
        德性讠父母[德性纟女] = 德性纟父母
        德性纟子女 = (德性纟子,德性纟女)
        德性讠子女[德性纟父] = 德性纟子女
        德性讠子女[德性纟母] = 德性纟子女
        assert 德性纟母 == 求冫德性纟配偶扌(夫妻关系, 德性纟父)
        assert 德性纟母 == 求冫德性纟母巛子扌(母子关系, 德性纟子)
        assert 德性纟母 == 求冫德性纟母巛女扌(母女关系, 德性纟女)
    assert len(德性讠配偶) == 10
    assert len(德性讠父母) == 10
    assert len(德性讠子女) == 10
    return (德性讠配偶, 德性讠父母, 德性讠子女)
class 异常冫无效参数(BaseException):pass
def 求冫祖先德性讠最小非零代隔数扌(德性讠父母, 德性):
    祖先德性讠最小非零代隔数 = {}
    规模 = len(列表纟德性)
    集合纟德性乊当代 = frozenset([德性])
    集合纟旧集合 = {集合纟德性乊当代}
    代隔数 = 0
    while not len(祖先德性讠最小非零代隔数) == 规模:
        集合纟德性乊上代 = frozenset(德性牜上代 for 德性 in 集合纟德性乊当代 for 德性牜上代 in 德性讠父母[德性])
        if 集合纟德性乊上代 in 集合纟旧集合:
            raise 异常冫无效参数
        集合纟德性乊当代 = 集合纟德性乊上代
        集合纟旧集合.add(集合纟德性乊当代)
        代隔数 += 1
        源纟德性牜新出现 = (集合纟德性乊当代 -祖先德性讠最小非零代隔数.keys())
        祖先德性讠最小非零代隔数.update((德性, 代隔数) for 德性 in 源纟德性牜新出现)
    return 祖先德性讠最小非零代隔数
def _f1(德性讠配偶, 德性讠父母, 德性讠子女,考虑冫非零代隔数纟直系亲属):
    德行纟妻 = 0
    德性纟妻 = 构造冫德性扌(德行纟妻, 女性)
    德性纟夫 = 德性讠配偶[德性纟妻]
    祖先德性讠最小非零代隔数纟妻 = 求冫祖先德性讠最小非零代隔数扌(德性讠父母, 德性纟妻)
    祖先德性讠最小非零代隔数纟夫 = 求冫祖先德性讠最小非零代隔数扌(德性讠父母, 德性纟夫)
    中介祖先德性讠夫妻代隔数 = {}
    for 德性纟祖先 in 列表纟德性:
        祖先代隔数乊妻 = 祖先德性讠最小非零代隔数纟妻[德性纟祖先]
        祖先代隔数乊夫 = 祖先德性讠最小非零代隔数纟夫[德性纟祖先]
        夫妻代隔数 = 祖先代隔数乊妻+祖先代隔数乊夫
        中介祖先德性讠夫妻代隔数[德性纟祖先] = 夫妻代隔数
    assert len(中介祖先德性讠夫妻代隔数) == 10
    key = 最小夫妻代隔数 = min(中介祖先德性讠夫妻代隔数.values())

    # only for:[德行纟妻 == 0]
    配偶冃祖先德性讠夫妻代隔数 = {}
    #.for 德性 in 列表纟德性:
    #.    德性纟配偶冃祖先 = 德性讠配偶[德性]
    #-->:repr+dict次序:
    for 德性纟配偶冃祖先 in 列表纟德性:
        # only for:[德行纟妻 == 0]
        德性 = 德性讠配偶[德性纟配偶冃祖先]
        #(德行, 性别) = 分解冫德性扌(德性)
        if 德性 == 德性纟妻:
            配偶冃祖先代隔数 = 祖先德性讠最小非零代隔数纟妻[德性纟配偶冃祖先]
        elif 德性 == 德性纟夫:
            配偶冃祖先代隔数 = 祖先德性讠最小非零代隔数纟夫[德性纟配偶冃祖先]
        else:
            continue
        夫妻代隔数 = 配偶冃祖先代隔数
        配偶冃祖先德性讠夫妻代隔数[德性纟配偶冃祖先] = 夫妻代隔数
    if 考虑冫非零代隔数纟直系亲属:
        中介祖先德性讠夫妻代隔数
        配偶冃祖先德性讠夫妻代隔数
        祖先德性讠夫妻代隔数 = {德性纟祖先:min(配偶冃祖先德性讠夫妻代隔数.get(德性纟祖先,999), 中介祖先德性讠夫妻代隔数[德性纟祖先]) for 德性纟祖先 in 列表纟德性}
        s1 = (中介祖先德性讠夫妻代隔数, 配偶冃祖先德性讠夫妻代隔数, 祖先德性讠夫妻代隔数)
        k1 = key
            #只考虑旁系亲属
        k0 = min(祖先德性讠夫妻代隔数.values())
            #考虑旁系亲属丶直系亲属
        key = (k0,k1)
        assert 0 <= k1-1 < 10
        key = (k0*10+(k1-1))
    else:
        s1 = 中介祖先德性讠夫妻代隔数
    return (key, s1)
    return (key, 中介祖先德性讠夫妻代隔数)
def _f(夫妻关系,母子关系,母女关系,考虑冫非零代隔数纟直系亲属):
    (德性讠配偶, 德性讠父母, 德性讠子女) = 求冫家庭关系扌(夫妻关系,母子关系,母女关系)
    父子关系 = (夫妻关系+母子关系) %5
    父女关系 = (夫妻关系+母女关系) %5
    子女关系 = (母女关系-母子关系) %5
    s0 = (夫妻关系,母子关系,母女关系,父子关系,父女关系,子女关系)
    (key, s1) = _f1(德性讠配偶, 德性讠父母, 德性讠子女,考虑冫非零代隔数纟直系亲属)
    return (key, (s0, s1))

def _尝试分离子女德行扌(to_output_all=False, 考虑冫非零代隔数纟直系亲属=False):
    r'''[[[
    [性别 :: uint%2]
    [德行 :: uint%5]
    [德性 :: uint%10]
    [夫妻关系 :: uint%5]
    [母子关系 :: uint%5]
    [母女关系 :: uint%5]
    [性别 <- {男女}]
        #男1,女0
    [德行 <- {金水木火土}]
        #金4,水3,木2,火1,土0
    [德性 == 德行*2 +性别]
    [夫妻关系 =[%5]= 德行纟夫 -德行纟妻]
    [母子关系 =[%5]= 德行纟母 -德行纟子]
    [母女关系 =[%5]= 德行纟母 -德行纟女]

    #]]]'''#'''
    #++考虑冫非零代隔数纟直系亲属@20250316
    if to_output_all:
        rs = []
    max_rs = []
    def cmp_(lhs, rhs):
        '-> {-1,0,+1}'
        (k0, _) = lhs
        (k1, _) = rhs
        return sign_of(k0 -k1)
    for (夫妻关系,母子关系,母女关系) in product(range(5), repeat=3):
        try:
            r = _f(夫妻关系,母子关系,母女关系,考虑冫非零代隔数纟直系亲属)
        except 异常冫无效参数:
            continue
        if to_output_all:
            rs.append(r)
        if not max_rs or 0==(c:=cmp_(max_rs[0], r)):
            max_rs.append(r)
        elif c < 0:
            max_rs = [r]
        else:
            pass
    if to_output_all:
        rs.sort(key=lambda r:r[0])
        return rs
    return max_rs

__all__
from script.阴阳五行冫德性纟夫妻与亲子 import *
