
r"""
parse over regex?
generate another gramma tree
feed set!
what now expected? fail? succ?


========
#似乎〖上下文敏感语法〗也可搞搞？
〖孤语法〗=〖上下文无关语法〗
〖端语法〗=〖正则表达式〗
    #『尾调用』的〖孤语法〗

为了支持『语法分析』作用于〖端语法〗/有向图
    需要：
        支持『询问接着该投放哪些阳符』
        支持『批量投放阳符在同一位置』

支持『表达式阴符』，动态展开规则
    模版，如『回环』，借此可通过用户函数实现，不必内建
    规则=先并后串
    勤性有限并联，惰性无限串联
    #为何要『惰性无限』
    #   他语法 可能 是文件/用户实时输入
    #   ##
    #   后注：之前误以为可以作用于〖孤语法〗，但发现只能是有向图。所以没必要惰性
    #
    按需生成，实例化模版

支持『只读状态』
    保存各历史版本
    允许随时随地增大被识别的〖端语法〗，即：『他』
    看来真的有必要实现finger_tree了

支持『将长串规则拆成两半』
    原因：防止组合数爆炸
    但怎么拆？
        *对半拆
        *只拆头
    如下所示，『只拆头』意义不大，要『对半拆』
    例:
        s = s s s s ... #重复n次
        s = A
        s = pass
        作用于纯A句，句长m
        假设 组合数 f(m,n)
            即：输出语法中，s<0,m,n>的分支数
            当然，如果拆分，则要加上所有中间用规则
                s<真,0,m,n> = s<假,0,i,a> s<假,i,m,n-a>
    不拆:
        f(m,n) = C(m+n-1,n-1) <= O((m+n)^n)
    只拆头:
        f(m,n) = m+1 + sum f(i,n-1) {i=0..m}
            <= m+1+ (m+1)*f(m,n-1) <= O((m+1)^n)

    对半拆:
        f(m,n) = m+1 + sum f(i,n/2)+f(m-i,n/2) {i=0..m}
            <= m+1 + 2*sum f(i,n/2) {i=0..m}
            <= m+1 + 2*(m+1) f(m,n/2)
            <= O((2*m+2)^log2(n))









==================================
==================================
==================================
==================================
==================================
==================================

# 集 与 集名 不作区分
阳符全集名 :: 阳符全集
求交集 :: 阳符集 -> 阳符集 -> 阳符集
批量互斥拆解 :: [阳符集] -> ({阳符集}，[{阳符集}])
    集-块-交集-优先队列-堆


#轻符 = 阳符 | 阴符
# 这里『并』指『阳符集』
并轻符 = 阳符集 | 表达式阴符
阴符 = 表达式阴符 = 直接阴符 | 间接阴符
    # 间接阴符 ==>> 函数调用
    # 在『我语法』拆散投放的情形下，其实，没有区别
    # 『间接阴符』也是『阴符名』
    # 只是『间接阴符』的解释更新通过添加『解释间接阴符』函数实现
    #   而『直接阴符』的解释更新通过直接添加『阴义』实现
阴义 = (阴符，并轻符串)
解释间接阴符/间接阴符解释器 :: 间接阴符 -> {并轻符串}
求间接阴符模版名 :: 间接阴符 -> 间接阴符模版名
卸装并轻符 :: 并轻符 -> (互斥 阳符集 阴符)
卸装阴符 :: 阴符 -> (互斥 直接阴符 间接阴符)


# 我=〖孤语法〗
# 他=〖端语法〗/有向图/文件/用户输入
他飞行 = (他坐点，他向点)
他步行 = (他坐点，并重符，他向点)
解释并重符 :: 并重符 -> 阳符集
    后续 空行
    他空行 的影响
    他出发点 变多
    并重符 变阳符集 的同时，向点 变多
    没有其他情形

双点 = (我点，他向点)
我点 = (并联分支名，串位置)
叒点 = (他坐点，我点，他向点)
    #这里的『他坐点』指『本前缀子串/本串联规则』的起步『他点』
    #这里的『他向点』指『本前缀子串』的止步『他点』

投放他飞 :: 他飞行 -> 我状态 -> 我状态
投放他步 :: 他步行 -> 我状态 -> 我状态
投放直接阴义 :: 直接阴符 -> 并轻符串 -> 我状态 -> 我状态
涂装直接阴符 :: 直接阴符 -> 阴符
投放间接阴符解释器 :: 间接阴符模版名 -> 间接阴符解释器


询问可止 :: 我状态 -> 他可止点集 -> 可结束的启动阴符集
询问所在 :: 我状态 -> 我所在叒点集
询问所期 :: 我状态 -> 我所在叒点 -> 期待的阳符集

出生 :: 我语法 -> 我
询问出发点 :: 我 -> 待启动阴符 -> 我出发点集
出发 :: 我 -> 我启动阴符集 -> 他出发点集 -> 我初始状态


我状态：
    ===我启动信息区
    我启动阴符集 :: {阴符}
    他出发点集 :: {他出发点}
    他可止点集 :: {他可止点}

    ===我语法区
    卸装并轻符 :: 并轻符 -> (互斥 阳符集 阴符)
    卸装阴符 :: 阴符 -> (互斥 直接阴符 间接阴符)
    涂装直接阴符 :: 直接阴符 -> 阴符
    求间接阴符模版名 :: 间接阴符 -> 间接阴符模版名

    阴义解号区 :: [(阴符，并轻符串)]  #阴义号
        # 来自 投放 及 解释
        # 并非冗余
    间接阴符归类区 :: {间接阴符模版名 : {间接阴符}}
        #间接阴符 得自 并轻符串
    间接阴符解释区 :: {间接阴符模版名 : {间接阴符解释器}}
        # 来自 投放
    ===我简略语法区
    轻号包 = 互斥 阳符集号 阴符号
    简略阴义编号区 :: {(阴符号，[轻号包]) : 阴义号}
    简略阴义解号区 :: [(阴符号，[轻号包])]  #阴义号
        #串联
    简略阴义并联区 :: [{阴义号}]  #阴符号
        #并联
    装成轻号包 :: 互斥 阳符集号 阴符号 -> 轻号包
    卸装轻号包 :: 轻号包 -> 互斥 阳符集号 阴符号
    ===我号名对照区
    ####阳符集解号区 :: [阳符集]  #阳符集号
    ####阴符解号区 :: [阴符]  #阴符号
    阳符集编号区 :: {阳符集 : 阳符集号}
    阴符编号区 :: {阴符 : 阴符号}

    #由『投放』至『阴义号』
    #投放间接阴符解释器 => 间接阴符模版名
    # 卸装阴符 => 间接阴符 => 并轻符串
    #投放直接阴义 => 直接阴符 并轻符串
    # => 并轻符
    # 涂装直接阴符 => 阴符
    # 卸装并轻符 => 阳符集 阴符
    # 阴符编号区 => 阴符号
    # 阳符编号区 => 阳符集号
    # 装成轻号包 => 轻号包
    # 简略阴义编号区 => 阴义号
    #
    #
    #由『阴义号』至『阴义』
    # 简略阴义解号区 => 阴符号 [轻号包]
    # 卸装轻号包 => 阴符号 阳符集号
    #   #需 解号+装成并轻符
    # 阴义解号区 :: [(阴符，并轻符串)]  #阴义号
    #

    互斥阳符集解号区 :: [阳符集]
    ===
    解释并重符 :: 并重符 -> 阳符集






对接平台
    对接函数 :: a->b->IO ()
    供方
        已对接数量 :: uint
    需方
        已对接数量 :: uint
            #对应 批发市场 的货物 序列
批发市场
    货物
        依首次进入次序排列 :: [a]
        用于阻止重复 :: {a}
    转发对象
        其他批发市场 :: {(变换函数，批发市场)}

        对接平台供方 :: {对接平台}
        对接平台需方 :: {对接平台}


货物种类:
    子=他空行
    丑=他坐点，阳符集，他向点
    寅=串始他坐点，我向点，他向点
        #我点 之前的部分
    卯=他坐点，阴符，他向点
    辰=他步行
    巳=串始他坐点，他向点，我向点，拆末他点
批发市场
    #名:种%过滤约束
    甲:卯%他坐点，阴符
        卯
        产生-> 乙:空
    乙:寅%串始他坐点，我向点
        寅
        产生-> 满:甲
        转发-> 辛 壬
    丙:丑%他坐点，阳符集
        丑
        转发-> 戊
    丁:子%他空行坐点
        子
    戊:丑%续空行阳化他步行向点
        丑
    己:辰%"他步行"
        辰
        产生-> 丙
    庚:巳%串始他坐点，我向点，他向点
        巳
        #用于 拆串
    辛:寅%他坐点，阳符集
        寅
    壬:寅%他坐点，阴符
        寅
    ？？癸:卯%阴符，他向点
        卯
        #用于求 可止
对接平台
    续空行平台
        戊-丁
        产生-> 丙
    续串平台-甲/丙
        壬-甲
        辛-丙
        产生-> 乙 庚

物流次序:
    *投:己->丙->戊
    *投:丁->
    戊-丁=> 丙

    *求:甲 => 空:乙->辛 壬
    辛-丙 => 乙 庚
    满:乙 => 甲
    壬-甲 => 乙









#"""


