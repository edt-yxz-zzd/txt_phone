#__all__:goto
r'''[[[
e script/对数纟差分倍增.py
view others/数学/有递增趋势的非递增序列.txt

script.对数纟差分倍增
py -m nn_ns.app.debug_cmd   script.对数纟差分倍增 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.对数纟差分倍增:__doc__ -ht # -ff -df



[[[
e script/对数纟差分倍增.py
logarithm_of_differential_doubling
logarithm
doubling
ascending/incremental/progressive/differential
===
[(n+1)/n == 2**?]
[? == log_((n+1)/n, 2)]
===
>>> from math import *
>>> (11/10)**7.272540897341713
2.0
>>> log(2)/log(11/10)
7.272540897341713

===
py_adhoc_call   seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_   ,10:iter_continued_fraction_of_irrational_log_Fraction_  =11  =10  =2  =1
7
3
1
2
43
1
47
1
2
3
===
py_adhoc_call   seed.math.continued_fraction.iter_radix_digits_of_continued_fraction_   ,20:iter_radix_digits_of_continued_fraction__with_int__via_cf_ops_ =10 '=[7,3,1,2,43,1,47,1,2,3]'  +to_chain_integer_part +using_LazyList
7
2
7
2
5
4
0
8
9
7
3
4
1
9
8
8
4
9
9
0
  ~= 7.2725408973419884990
  #vs:7.272540897341713

===
>>> for n in range(1,100): print(f'{n}:{log(2, (n+1)/n)}')
1:1.0
2:1.7095112913514547
3:2.4094208396532095
4:3.10628371950539
5:3.8017840169239308
6:4.49655610560192
7:5.190893069684433
8:5.884949192361718
9:6.578813478960581
10:7.272540897341713
11:7.96616723629781
12:8.659716802522823
13:9.353206684999465
14:10.04664924971328
15:10.740053666281314
16:11.433426878252934
17:12.126774240111914
18:12.820099947341156
19:13.5134073339649
20:14.206699082890461
21:14.899977377480539
22:15.593244012662414
23:16.286500477641212
24:16.979748018338913
25:17.672987685129698
26:18.366220369758814
27:19.059446834201477
28:19.752667733441275
29:20.445883633614336
30:21.139095026580534
31:21.83230234171914
32:22.525505955544585
33:23.21870619960046
34:23.911903366978944
35:24.605097717738357
36:25.298289483430075
37:25.991478870900373
38:26.68466606549988
39:27.377851233805753
40:28.071034525938728
41:28.7642160775476
42:29.45739601151209
43:30.150574439409645
44:30.84375146278754
45:31.536927174263596
46:32.230101658487094
47:32.92327499297901
48:33.61644724886435
49:34.30961849152064
50:35.0027887811465
51:35.69595817326402
52:36.38912671916421
53:37.08229446630307
54:37.77546145865325
55:38.46862773701837
56:39.161793339311416
57:39.85495830080888
58:40.54812265437545
59:41.24128643066455
60:41.93444965830414
61:42.627612364059175
62:43.32077457298239
63:44.013936308547514
64:44.70709759277232
65:45.4002584463308
66:46.09341888865212
67:46.786578938014785
68:47.479738611630204
69:48.17289792571746
70:48.86605689557787
71:49.559215535654076
72:50.2523738595937
73:50.94553188030025
74:51.63868960998577
75:52.331847060214415
76:53.02500424194632
77:53.718161165574315
78:54.411317840962724
79:55.10447427747961
80:55.79763048402861
81:56.490786469073285
82:57.18394224067018
83:57.87709780648795
84:58.57025317383194
85:59.263408349667046
86:59.95656334063498
87:60.64971815307448
88:61.34287279303805
89:62.03602726630724
90:62.72918157840759
91:63.422335734623154
92:64.11548974000965
93:64.80864359940801
94:65.50179731745129
95:66.19495089858158
96:66.8881043470542
97:67.5812576669525
98:68.2744108621913
99:68.96756393652805

===
def f(n, /):
    e = log(2, (n+1)/n)
    return ceil(e) -e

sorted(range(1, 100), key=f)
[1, 37, 24, 99, 11, 86, 73, 60, 47, 34, 21, 96, 8, 83, 70, 57, 44, 31, 18, 93, 5, 80, 67, 54, 41, 28, 15, 90, 77, 2, 64, 51, 38, 25, 12, 87, 74, 61, 48, 35, 22, 97, 9, 84, 71, 58, 45, 32, 19, 94, 6, 81, 68, 55, 42, 29, 16, 91, 78, 3, 65, 52, 39, 26, 13, 88, 75, 62, 49, 36, 23, 98, 10, 85, 72, 59, 46, 33, 20, 95, 7, 82, 69, 56, 43, 30, 17, 92, 4, 79, 66, 53, 40, 27, 14, 89, 76, 63, 50]

sorted(range(1, 1000), key=f)[:100]
[1, 503, 868, 226, 591, 956, 314, 679, 402, 37, 767, 125, 490, 855, 213, 578, 943, 301, 666, 389, 24, 754, 112, 477, 842, 200, 565, 930, 288, 653, 376, 741, 99, 464, 11, 829, 187, 552, 917, 275, 640, 363, 728, 86, 451, 816, 174, 539, 904, 262, 627, 992, 350, 715, 73, 438, 803, 161, 526, 891, 249, 614, 979, 337, 702, 60, 425, 790, 148, 513, 878, 236, 601, 966, 324, 689, 47, 412, 777, 135, 500, 865, 223, 588, 953, 311, 676, 399, 34, 764, 122, 487, 852, 210, 575, 940, 298, 663, 386, 751]

sorted(range(1, 10000), key=f)[:100]
[1, 5085, 9025, 2794, 6734, 503, 4443, 8383, 2152, 6092, 3801, 7741, 1510, 5450, 9390, 3159, 7099, 868, 4808, 8748, 2517, 6457, 4166, 8106, 226, 1875, 5815, 9755, 3524, 7464, 1233, 5173, 9113, 2882, 6822, 591, 4531, 8471, 2240, 6180, 3889, 7829, 1598, 5538, 9478, 3247, 7187, 956, 4896, 8836, 2605, 6545, 4254, 314, 8194, 1963, 5903, 9843, 3612, 7552, 1321, 5261, 9201, 2970, 6910, 679, 4619, 8559, 2328, 6268, 3977, 7917, 1686, 5626, 9566, 3335, 7275, 1044, 4984, 8924, 2693, 6633, 4342, 402, 8282, 37, 2051, 5991, 9931, 3700, 7640, 1409, 5349, 9289, 3058, 6998, 767, 4707, 8647, 2416]

[f(n) for n in [1, 37, 503, 5085]]
[0.0, 0.00852112909962699, 0.0005093095624602029, 2.4620542717457283e-05]

===
def g(n, /):
    e = log(2, (n+1)/n)
    return e -floor(e)

sorted(range(1, 100), key=g)
[1, 50, 63, 76, 89, 14, 27, 40, 53, 66, 79, 4, 92, 17, 30, 43, 56, 69, 82, 7, 95, 20, 33, 46, 59, 72, 85, 10, 98, 23, 36, 49, 62, 75, 88, 13, 26, 39, 52, 65, 3, 78, 91, 16, 29, 42, 55, 68, 81, 6, 94, 19, 32, 45, 58, 71, 84, 9, 97, 22, 35, 48, 61, 74, 87, 12, 25, 38, 51, 64, 2, 77, 90, 15, 28, 41, 54, 67, 80, 5, 93, 18, 31, 44, 57, 70, 83, 8, 96, 21, 34, 47, 60, 73, 86, 11, 99, 24, 37]

sorted(range(1, 1000), key=g)[:100]
[1, 138, 780, 415, 50, 692, 327, 969, 604, 239, 881, 516, 151, 793, 428, 63, 705, 340, 982, 617, 252, 894, 529, 164, 806, 441, 76, 718, 353, 995, 630, 265, 907, 542, 177, 819, 454, 89, 731, 366, 643, 278, 920, 555, 190, 832, 467, 14, 102, 744, 379, 656, 291, 933, 568, 203, 845, 480, 115, 757, 27, 392, 669, 304, 946, 581, 216, 858, 493, 128, 770, 40, 405, 682, 317, 959, 594, 229, 871, 506, 141, 783, 418, 53, 695, 330, 972, 607, 242, 884, 519, 154, 796, 431, 66, 708, 343, 985, 620, 255]

sorted(range(1, 10000), key=g)[:100]
[1, 1145, 7376, 3436, 9667, 5727, 138, 1787, 8018, 4078, 6369, 2429, 8660, 4720, 780, 7011, 3071, 9302, 5362, 1422, 7653, 3713, 9944, 6004, 2064, 8295, 415, 4355, 6646, 50, 2706, 8937, 4997, 1057, 7288, 3348, 9579, 5639, 1699, 7930, 3990, 6281, 2341, 8572, 4632, 692, 6923, 2983, 9214, 5274, 1334, 7565, 3625, 9856, 5916, 1976, 8207, 327, 4267, 6558, 2618, 8849, 4909, 969, 7200, 3260, 9491, 5551, 1611, 7842, 3902, 6193, 2253, 8484, 4544, 604, 6835, 2895, 9126, 5186, 1246, 7477, 3537, 9768, 5828, 1888, 239, 8119, 4179, 6470, 2530, 8761, 4821, 881, 7112, 3172, 9403, 5463, 1523, 7754]

[g(n) for n in [1, 50, 138, 1145]]
[0.0, 0.002788781146499275, 0.0004674500372203738, 4.490597916628758e-05]

===


]]]









py_adhoc_call   script.对数纟差分倍增   ,100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 | lineno -s=+2
2:0
3:0
4:0
5:3
6:2
... ...
35:20
36:10
37:35
38:24
39:13
... ...
95:19
96:85
97:56
98:27
99:95
100:65
101:35
py_adhoc_call   script.对数纟差分倍增   ,100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 +使用冫负对数 | lineno -s=+2
2:0
3:1
4:2
5:0
6:2
7:4
8:0
9:3
10:6
11:0
12:4
13:8
14:12
15:3
16:8
17:13
18:2
19:8
20:14
21:1
22:8
23:15
24:0
25:8
26:16
27:24
28:6
29:15
30:24
31:4
32:14
33:24
34:2
35:13
36:24
37:0
38:12
39:24
40:36
41:9
42:22
43:35
44:6
45:20
46:34
47:3
48:18
49:33
50:48
51:15
52:31
53:47
54:11
55:28
56:45
57:7
58:25
59:43
60:3
61:22
62:41
63:60
64:18
65:38
66:58
67:13
68:34
69:55
70:8
71:30
72:52
73:3
74:26
75:49
76:72
77:20
78:44
79:69
80:15
81:40
82:65
83:9
84:35
85:61
86:3
87:30
88:57
89:84
90:23
91:51
92:79
93:16
94:45
95:74
96:9
97:39
98:69
99:2
100:33
101:64
py_adhoc_call   script.对数纟差分倍增   @list.100:枚举冫插入位置纟小数部分纟对数纟差分倍增扌 +使用冫负对数
[0, 1, 2, 0, 2, 4, 0, 3, 6, 0, 4, 8, 12, 3, 8, 13, 2, 8, 14, 1, 8, 15, 0, 8, 16, 24, 6, 15, 24, 4, 14, 24, 2, 13, 24, 0, 12, 24, 36, 9, 22, 35, 6, 20, 34, 3, 18, 33, 48, 15, 31, 47, 11, 28, 45, 7, 25, 43, 3, 22, 41, 60, 18, 38, 58, 13, 34, 55, 8, 30, 52, 3, 26, 49, 72, 20, 44, 69, 15, 40, 65, 9, 35, 61, 3, 30, 57, 84, 23, 51, 79, 16, 45, 74, 9, 39, 69, 2, 33, 64]



from script.对数纟差分倍增 import *
#]]]'''
__all__ = r'''
    logarithm_of_differential_doubling_
    枚举冫插入位置纟小数部分纟对数纟差分倍增扌
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import iter_continued_fraction_of_irrational_log_Fraction_# =11  =10  =2  =1
from seed.math.continued_fraction.iter_radix_digits_of_continued_fraction_ import iter_radix_digits_of_continued_fraction__with_int__via_cf_ops_#=10 '=[7,3,1,2,43,1,47,1,2,3]'  +to_chain_integer_part +using_LazyList
from seed.math.continued_fraction.continued_fraction_ops____using_LazyList import ContinuedFraction
from seed.math.floor_ceil__tiny import fractional_fixed_point_part_of_, fractional_fixed_point_part_of_neg_

from bisect import bisect_right
#from tiny import snd

___end_mark_of_excluded_global_names__0___ = ...


def logarithm_of_differential_doubling_(n, /):
    'n -> log_((n+1)/n; 2)'
    return ContinuedFraction(iter_continued_fraction_of_irrational_log_Fraction_(n+1,n, 2,1))
def 枚举冫插入位置纟小数部分纟负对数纟差分倍增扌():
    return 枚举冫插入位置纟小数部分纟对数纟差分倍增扌(使用冫负对数=True)
def 枚举冫插入位置纟小数部分纟对数纟差分倍增扌(*, 使用冫负对数=False):
    # [n == i+2]
    ls = []
        # :: [logarithm_of_differential_doubling_(n)]
        # xxx # :: [(n, logarithm_of_differential_doubling_(n))]
    if 使用冫负对数:
        def f(cf, /):
            return -cf
    else:
        def f(cf, /):
            return cf
    f


    n = 1
    while 1:
        # [n == i+2]
        n += 1
        cf = logarithm_of_differential_doubling_(n)
        cf = f(cf)
        cf = cf.fractional_fixed_point_part_of_()
        j = bisect_right(ls, cf)
        yield j
        ls.insert(j, cf)


__all__
from script.对数纟差分倍增 import *
