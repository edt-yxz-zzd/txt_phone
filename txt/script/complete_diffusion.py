
r"""
完全错装数

用于block_cipher的sub-perm construction
	blen(key) <= log2(w<2^n>)


w<n> = 完全错装数<n> = len{f | [perm<n> f][@i<-[0..n-1]. [f(i)!=i]]}

[0<=m<=n]:
	h<n,m> = len{f | [perm<n> f][@i<-[0..n-1]. [f(i)!=i-m]]}
		[0..n-1] <-> [-m..n-1-m]
		完全错装
	g<n,m> = len{f | [perm<n> f][m==len{i<-[0..n-1] | [f(i)!=i]}]}
		只有m个错装

w<n> = h<n,0> = g<n,n>
w<0> = 1
w<1> = 0
w<2> = 1
w<n> = [n==0] + sum C<n-1>(i-1)*(i-1)!*w<n-i> {i<-[2..n]}
	每个错装必出现在一个长度大于1的置换循环中
w<n> = n! - sum C<n>(m)*w<m> {m<-[0..n-1]}
	from g<n,n>



h<n,n> = n!
h<n,m> | 0<=m<n
	= m*h<n-1,m> + [m!=n-1](n-m-1)*h<n-1,m+1>


g<n,0> = 1
g<n,1> = 0
g<n,2> = C<n>(2)
[n! == sum g<n,m> {m<-[0..n]}]
g<n,n> = n! - sum g<n,m> {m<-[0..n-1]}
g<n,m> | 0<=m<n
	= C<n>(m)*g<m,m>
==>> w<n> = n! - sum C<n>(m)*w<m> {m<-[0..n-1]}


#"""

from seed.math.floor_ceil import floor_log2
from nn_ns.math_nn.numbers.choose import C
from math import factorial
import itertools #permutations

class gg:
	w0 = []
	w1 = []
def list_complete_diffusion_numbers(n, m, ver):
	if not 0 <= n <= m: raise ValueError
	if not 0 <= ver < 2: raise ValueError
	wfs = [
			(gg.w0, complete_diffusion_number_at__0)
			,(gg.w1, complete_diffusion_number_at__1)
			]
	w,f = wfs[ver]
	if n<m: f(m)
	return w[n:m]

def iter_complete_diffusion(n, m, ver):
	if not 0 <= n <= m: raise ValueError
	if not 0 <= ver < 2: raise ValueError
	wfs = [
			(gg.w0, complete_diffusion_number_at__0)
			,(gg.w1, complete_diffusion_number_at__1)
			]
	w,f = wfs[ver]
	for i in range(n, m):
		yield f(i)
def complete_diffusion_number_at__0(nn):
	r"""
	w<n> = [n==0] + sum C<n-1>(i-1)*(i-1)!*w<n-i> {i<-[2..n]}
		每个错装必出现在一个长度大于1的置换循环中
	#"""
	if nn < 0: raise ValueError
	w = gg.w0
	for n in range(len(w), nn+1):
		w.append(
				sum((C(n-1,i-1)*factorial(i-1)*w[n-i] for i in range(2, n+1)), int(n==0))
				)
	return w[nn]
def complete_diffusion_number_at__1(nn):
	r"""
	w<n> = n! - sum C<n>(m)*w<m> {m<-[0..n-1]}
		from g<n,n>
	#"""
	if nn < 0: raise ValueError
	w = gg.w1
	for n in range(len(w), nn+1):
		w.append(
				factorial(n)
				-sum(C(n,m)*w[m] for m in range(0, n))
				)
	return w[nn]


def iter_complete_diffusion_permutations_at(n):
	# ~= 3.678794e-01
	s = complete_diffusion_number_at__1(n)
	pp = ()
	for p in itertools.permutations(range(n)):
		for i,o in enumerate(p):
			if i==o:break
		else:
			yield p
			s -= 1
			try:
				assert pp < p
			except:
				if n:
					raise
			pp = p
	if s != 0: raise logic-error
	pass


def main(args=None):
	import argparse

	parser = argparse.ArgumentParser(
		description="完全错装"
		, epilog=""
		, formatter_class=argparse.RawDescriptionHelpFormatter
		)
	parser.add_argument('-m', '--min', type=int, default=0
						, help='min idx of range to output')
	parser.add_argument('-M', '--max', type=int
						, required=True
						, help='max idx of range to output')
	parser.add_argument('-c', '--compute_method', type=int
						, default=-1
						#, required=True
						, choices = [-1,0,1]
						, help='choose 1 of 2 methods to do compute output; -1:both and verify result')
	parser.add_argument('-s', '--list_permutations', action='store_true'
						, default = False
						, help='list all complete_diffusion permutations')
	parser.add_argument('-py', '--list_permutations_in_comma_first_style', action='store_true'
						, default = False
						, help='if --list_permutations turn on, then show permutation as f",{p}"')

	args = parser.parse_args(args)
	n = args.min
	m = 1+args.max
	ver = args.compute_method
	if ver==-1:
		ls = list_complete_diffusion_numbers(n, m, 0)
		ls_ = list_complete_diffusion_numbers(n, m, 1)
		assert ls == ls_
		it = iter(ls)
	else:
		it = iter_complete_diffusion(n, m, ver)
	for i, x in enumerate(it, n):
		y = floor_log2(x) if x>0 else '-inf'
		ddd = factorial(i)
		print(f"@@{i}: {x} # .>= 2^{y} # ./{i}! = {x/ddd:8e}")

		if args.list_permutations:
			it = iter_complete_diffusion_permutations_at(i)
			j = -1
			for j, p in enumerate(it):
				if args.list_permutations_in_comma_first_style:
					print(f"\t#{i}:{j}\n\t,{p}")
				else:
					print(f"\t{i}:{j}: {p}")
			else:
				j+=1
			if j != x: raise logic-error

if __name__ == "__main__":
	main()







r"""
$ python complete_diffusion.py  -M 100

0: 1 # >= 2^0
1: 0 # >= 2^-inf
2: 1 # >= 2^0
3: 2 # >= 2^1
4: 9 # >= 2^3
5: 44 # >= 2^5
6: 265 # >= 2^8
7: 1854 # >= 2^10
8: 14833 # >= 2^13
9: 133496 # >= 2^17
10: 1334961 # >= 2^20
11: 14684570 # >= 2^23
12: 176214841 # >= 2^27
13: 2290792932 # >= 2^31
14: 32071101049 # >= 2^34
15: 481066515734 # >= 2^38
16: 7697064251745 # >= 2^42
17: 130850092279664 # >= 2^46
18: 2355301661033953 # >= 2^51
19: 44750731559645106 # >= 2^55
20: 895014631192902121 # >= 2^59
21: 18795307255050944540 # >= 2^64
22: 413496759611120779881 # >= 2^68
23: 9510425471055777937262 # >= 2^73
24: 228250211305338670494289 # >= 2^77
25: 5706255282633466762357224 # >= 2^82
26: 148362637348470135821287825 # >= 2^86
27: 4005791208408693667174771274 # >= 2^91
28: 112162153835443422680893595673 # >= 2^96
29: 3252702461227859257745914274516 # >= 2^101
30: 97581073836835777732377428235481 # >= 2^106
31: 3025013288941909109703700275299910 # >= 2^111
32: 96800425246141091510518408809597121 # >= 2^116
33: 3194414033122656019847107490716704992 # >= 2^121
34: 108610077126170304674801654684367969729 # >= 2^126
35: 3801352699415960663618057913952878940514 # >= 2^131
36: 136848697178974583890250084902303641858505 # >= 2^136
37: 5063401795622059603939253141385234748764684 # >= 2^141
38: 192409268233638264949691619372638920453057993 # >= 2^147
39: 7503961461111892333037973155532917897669261726 # >= 2^152
40: 300158458444475693321518926221316715906770469041 # >= 2^157
41: 12306496796223503426182275975073985352177589230680 # >= 2^163
42: 516872865441387143899655590953107384791458747688561 # >= 2^168
43: 22225533213979647187685190410983617546032726150608122 # >= 2^173
44: 977923461415104476258148378083279172025439950626757369 # >= 2^179
45: 44006555763679701431616677013747562741144797778204081604 # >= 2^184
46: 2024301565129266265854367142632387886092660697797387753785 # >= 2^190
47: 95142173561075514495155255703722230646355052796477224427894 # >= 2^195
48: 4566824330931624695767452273778667071025042534230906772538913 # >= 2^201
49: 223774392215649610092605161415154686480227084177314431854406736 # >= 2^207
50: 11188719610782480504630258070757734324011354208865721592720336801 # >= 2^212
51: 570624700149906505736143161608644450524579064652151801228737176850 # >= 2^218
52: 29672484407795138298279444403649511427278111361911893663894333196201 # >= 2^224
53: 1572641673613142329808810553393424105645739902181330364186399659398652 # >= 2^229
54: 84922650375109685809675769883244901704869954717791839666065581607527209 # >= 2^235
55: 4670745770631032719532167343578469593767847509478551181633606988413996494 # >= 2^241
56: 261561763155337832293801371240394297250999460530798866171481991351183803665 # >= 2^247
57: 14909020499854256440746678160702474943306969250255535371774473507017476808904 # >= 2^253
58: 864723188991546873563307333320743546711804216514821051562919463407013654916433 # >= 2^258
59: 51018668150501265540235132665923869255996448774374442042212248341013805640069546 # >= 2^264
60: 3061120089030075932414107959955432155359786926462466522532734900460828338404172761 # >= 2^270
61: 186728325430834631877260585557281361476947002514210457874496828928110528642654538420 # >= 2^276
62: 11577156176711747176390156304551444411570714155881048388218803393542852775844581382041 # >= 2^282
63: 729360839132840072112579847186740997928954991820506048457784613793199724878208627068582 # >= 2^288
64: 46679093704501764615205110219951423867453119476512387101298215282764782392205352132389249 # >= 2^294
65: 3034141090792614699988332164296842551384452765973305161584383993379710855493347888605301184 # >= 2^300
66: 200253311992312570199229922843591608391373882554238140664569343563060916462560960647949878145 # >= 2^306
67: 13416971903484942203348404830520637762222050131133955424526146018725081402991584363412641835714 # >= 2^312
68: 912354089436976069827691528475403367831099408917108968867777929273305535403427736712059644828553 # >= 2^318
69: 62952432171151348818110715464802832380345859215280518851876677119858081942836513833132115493170156 # >= 2^324
70: 4406670251980594417267750082536198266624210145069636319631367398390065735998555968319248084521910921 # >= 2^331
71: 312873587890622203626010255860070076930318920299944178693827085285694667255897473750666614001055675390 # >= 2^337
72: 22526898328124798661072738421925045538982962261595980865955550140570016042424618110047996208076008628081 # >= 2^343
73: 1644463577953110302258309904800528324345756245096506603214755160261611171096997122033503723189548629849912 # >= 2^349
74: 121690304768530162367114932955239096001585962137141488637891881859359226661177787030479275516026598608893489 # >= 2^355
75: 9126772857639762177533619971642932200118947160285611647841891139451941999588334027285945663701994895667011674 # >= 2^361
76: 693634737180621925492555117844862847209039984181706485235983726598347591968713386073731870441351612070692887225 # >= 2^368
77: 53409874762907888262926744074054439235096078781991399363170746948072764581590930727677354023984074129443352316324 # >= 2^374
78: 4165970231506815284508286037776246260337494144995329150327318261949675637364092596758833613870757782096581480673273 # >= 2^380
79: 329111648289038407476154596984323454566662037454631002875858142694024375351763315143947855495789864785629936973188566 # >= 2^387
80: 26328931863123072598092367758745876365332962996370480230068651415521950028141065211515828439663189182850394957855085281 # >= 2^393
81: 2132643480912968880445481788458415985591970002706008898635560764657277952279426282132782103612718323810881991586261907760 # >= 2^399
82: 174876765434863448196529506653590110818541540221892729688115982701896792086912955134888132496242902552492323310073476436321 # >= 2^406
83: 14514771531093666200311949052247979197938947838417096564113626564257433743213775276195714997188160911856862834736098544214642 # >= 2^412
84: 1219240808611867960826203720388830252626871618427036111385544631397624434429957123200440059763805516595976478117832277714029929 # >= 2^418
85: 103635468732008776670227316233050571473284087566298069467771293668798076926546355472037405079923468910658000640015743605692543964 # >= 2^425
86: 8912650310952754793639549196042349146702431530701633974228331255516634615682986570595216836873418326316588055041353950089558780905 # >= 2^431
87: 775400577052889667046640780055684375763111543171042155757864819229947211564419831641783864807987394389543160788597793657791613938734 # >= 2^438
88: 68235250780654290700104388644900225067153815799051709706692104092235354617668945184476980103102890706279798149396605841885662026608593 # >= 2^444
89: 6072937319478231872309290589396120030976689606115602163895597264208946560972536121418451229176157272858902035296297919927823920368164776 # >= 2^451
90: 546564358753040868507836153045650802787902064550404194750603753778805190487528250927660610625854154557301183176666812793504152833134829841 # >= 2^457
91: 49737356646526719034213089927154223053699087874086781722304941593871272334365070834417115566952728064714407669076679964208877907815269515530 # >= 2^464
92: 4575836811480458151147604273298188520940316084415983918452054626636157054761586516766374632159650981953725505555054556707216767519004795428761 # >= 2^470
93: 425552823467682608056727197416731532447449395850686504416041080277162606092827546059272840790847541321696472016620073773771159379267445974874772 # >= 2^477
94: 40001965405962165157332356557172764050060243209964531415107861546053284972725789329571647034339668884239468369562286934734488981651139921638228569 # >= 2^483
95: 3800186713566405689946573872931412584755723104946630484435246846875062072408949986309306468262268544002749495108417258799776453256858292555631714054 # >= 2^490
96: 364817924502374946234871091801415608136549418074876526505783697300005958951259198685693420953177780224263951530408056844778539512658396085340644549185 # >= 2^496
97: 35387338676730369784782495904737313989245293553263023071061018638100578018272142272512261832458244681753603298449581513943518332727864420278042521270944 # >= 2^503
98: 3467959190319576238908684598664256770946038768219776260963979826533856645790669942706201659580907978811853123248058988366464796607330713187248167084552513 # >= 2^510
99: 343327959841638047651959775267761420323657838053757849835434002826851807933276324327913964298509889902373459201557839848280014864125740605537568541370698786 # >= 2^516
100: 34332795984163804765195977526776142032365783805375784983543400282685180793327632432791396429850988990237345920155783984828001486412574060553756854137069878601 # >= 2^523
#"""


