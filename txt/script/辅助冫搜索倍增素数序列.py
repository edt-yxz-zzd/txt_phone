#__all__:goto
r'''[[[
e script/辅助冫搜索倍增素数序列.py

script.辅助冫搜索倍增素数序列
py -m nn_ns.app.debug_cmd   script.辅助冫搜索倍增素数序列 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.辅助冫搜索倍增素数序列:__doc__ -ht # -ff -df

[[
问题:是否存在无限长倍增素数序列？长度若不能无限，是否存在固定上限？长度若虽不能无限却可构造任意长，则如何构造？
是否存在无限长倍增素数序列？
    已证明:不存在无限长倍增素数序列
是否存在任意长倍增素数序列？
    极有可能

类似:幺链素数@view ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
...定义:
    p,(2*p+1),(4*p+3),...,(2**e*p+2**e-1) 若是皆为素数，则称为 倍增素数序列
    3->7#15
    5->11->23->47#95
    13#27
    17#35
    19#39
    29->59#119
正式定义:
[p :: int][p>=3][欤奇数扌(p)][欤素数扌(p)][a :: int]:
    [欤属于倍增素数序列乊(p;a) =[def]= [[a>=p][欤奇数扌(a)][欤素数扌(a)][[a==p]or[属于倍增素数序列乊(p;a//2)]]]]
    [倍增素数序列乊(p) =[def]= sorted{a | [a :<- [p..]][欤属于倍增素数序列乊(p;a)]}]
是否存在无限长倍增素数序列？
是否 存在素数p => 任意非p素数q => 任意正整数e => [(2**e*(p+1)-1)%q =!= 0]
???[?[p :<- all_primes] -> @[q :<- all_primes] -> [q=!=p] -> @[e :<- [1..=q]] -> [(2**e*(p+1)-1)%q =!= 0]]???
p%q -> (2*p+1)%q
(2**e*(p+1)-1)%q
[(2**e*(p+1)-1)%q =!= 0]
    <==> [2**e*(p+1)%q =!= 1]
    <==>:or:
    * [2**e*(p+1)%q == 0]:
        * [q==2]
        * [q=!=2][(p+1)%q==0]
            [p%q == q-1]
            [q:=3][p:=5]:
                [2**e*(p+1)%q == 2*6 == 0]
    * [2**e*(p+1)%q >= 2]:
        [gcd(2**e*(p+1), q) == 1]
        [gcd(p+1, q) == 1]
        [inv_p1 := inv_mod_(q,p+1)]
        ... <==> [2**e%q =!= inv_p1]
        !! e是任意选定的
        [not 欤素模本原根扌(q;2)]
            但是 q是任意选定的，比如3
            虽然3可以通过[p%q == q-1]即[p%3==2]规避
            但是对于固定的p有无数q不能规避
            => 不存在无限长倍增素数序列
view ../../python3_src/nn_ns/math_nn/numbers/_patch_prime_..b001918.b002233.out.txt
grep ' 2 2' ../../python3_src/nn_ns/math_nn/numbers/_patch_prime_..b001918.b002233.out.txt   >  /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp
    前一万个素数，有3750个以2为本原根
    1 3 2 2
    2 5 2 2
    4 11 2 2
    5 13 2 2
    7 19 2 2
    9 29 2 2
    11 37 2 2
    15 53 2 2
    16 59 2 2



]]


py_adhoc_call   script.辅助冫搜索倍增素数序列   ,10:枚举冫非平凡倍增素数序列扌 =3 =16
[3, 7]
[5, 11, 23, 47]
py_adhoc_call   script.辅助冫搜索倍增素数序列   ,10:枚举冫非平凡倍增素数序列扌 =3 =16 +with_size --min_size=2
(2, [3, 7])
(4, [5, 11, 23, 47])
py_adhoc_call   script.辅助冫搜索倍增素数序列   ,10:枚举冫非平凡倍增素数序列扌 =3 =16 +with_size --min_size=4
py_adhoc_call   script.辅助冫搜索倍增素数序列   ,10:枚举冫非平凡倍增素数序列扌 =3 =16 +with_size --min_size=5
    无
py_adhoc_call   script.辅助冫搜索倍增素数序列   ,str.枚举冫非平凡倍增素数序列扌 =3 =16 +to_sized_str
2:[3, 7]
4:[5, 11, 23, 47]

[[[
py_adhoc_call   script.辅助冫搜索倍增素数序列   ,枚举冫非平凡倍增素数序列扌 =3 =2**16 > /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp
===
[3, 7]
[5, 11, 23, 47]
[29, 59]
[41, 83, 167]
[53, 107]
[89, 179, 359, 719, 1439, 2879]
[113, 227]
[131, 263]
[173, 347]
[191, 383]
[233, 467]
[239, 479]
[251, 503]
[281, 563]
[293, 587]
[419, 839]
[431, 863]
[443, 887]
[491, 983]
[509, 1019, 2039, 4079]
[593, 1187]
[641, 1283]
[653, 1307]
[659, 1319]
[683, 1367]
[743, 1487]
[761, 1523]
[809, 1619]
[911, 1823]
[953, 1907]
[1013, 2027]
[1031, 2063, 4127]
[1049, 2099]
[1103, 2207]
[1223, 2447]
[1229, 2459, 4919, 9839]
[1289, 2579]
[1409, 2819, 5639, 11279]
[1451, 2903, 5807]
[1481, 2963, 5927]
[1499, 2999]
[1511, 3023, 6047]
[1559, 3119]
[1583, 3167]
[1601, 3203]
[1733, 3467]
[1811, 3623, 7247]
[1889, 3779, 7559]
[1901, 3803, 7607]
[1931, 3863, 7727]
[1973, 3947]
[2003, 4007]
[2069, 4139]
[2129, 4259]
[2141, 4283]
[2273, 4547]
[2339, 4679]
[2351, 4703]
[2393, 4787]
[2399, 4799]
[2543, 5087]
[2549, 5099]
[2693, 5387]
[2699, 5399, 10799, 21599]
[2741, 5483]
[2753, 5507]
[2939, 5879]
[2969, 5939]
[3299, 6599]
[3329, 6659]
[3359, 6719]
[3389, 6779]
[3413, 6827]
[3449, 6899, 13799]
[3491, 6983, 13967]
[3539, 7079, 14159, 28319]
[3593, 7187]
[3761, 7523]
[3821, 7643, 15287]
[3851, 7703]
[3911, 7823, 15647]
[4019, 8039]
[4073, 8147]
[4211, 8423]
[4271, 8543]
[4349, 8699]
[4373, 8747]
[4391, 8783]
[4409, 8819]
[4481, 8963]
[4733, 9467]
[4793, 9587]
[4871, 9743]
[4943, 9887]
[5003, 10007]
[5039, 10079]
[5051, 10103]
[5081, 10163, 20327]
[5171, 10343]
[5231, 10463]
[5279, 10559]
[5303, 10607]
[5333, 10667]
[5441, 10883, 21767]
[5501, 11003]
[5711, 11423]
[5741, 11483]
[5849, 11699, 23399]
[5903, 11807]
[6053, 12107]
[6101, 12203, 24407]
[6113, 12227]
[6131, 12263, 24527]
[6173, 12347]
[6263, 12527]
[6269, 12539]
[6323, 12647]
[6329, 12659]
[6449, 12899, 25799, 51599]
[6491, 12983]
[6521, 13043]
[6551, 13103]
[6563, 13127]
[6581, 13163]
[6761, 13523]
[7043, 14087]
[7103, 14207]
[7121, 14243]
[7151, 14303, 28607]
[7193, 14387]
[7211, 14423]
[7349, 14699, 29399]
[7433, 14867]
[7541, 15083]
[7649, 15299]
[7691, 15383]
[7841, 15683]
[7883, 15767]
[7901, 15803, 31607]
[8069, 16139]
[8093, 16187]
[8111, 16223]
[8243, 16487]
[8273, 16547]
[8513, 17027]
[8663, 17327]
[8693, 17387]
[8741, 17483]
[8951, 17903]
[8969, 17939, 35879]
[9029, 18059]
[9059, 18119]
[9221, 18443, 36887]
[9293, 18587]
[9371, 18743]
[9419, 18839]
[9473, 18947]
[9479, 18959]
[9539, 19079]
[9629, 19259]
[9689, 19379]
[9791, 19583]
[10061, 20123]
[10091, 20183]
[10253, 20507]
[10271, 20543]
[10313, 20627]
[10331, 20663]
[10529, 21059]
[10589, 21179, 42359, 84719]
[10613, 21227]
[10691, 21383, 42767]
[10709, 21419, 42839]
[10733, 21467]
[10781, 21563]
[11171, 22343, 44687]
[11321, 22643]
[11369, 22739]
[11393, 22787]
[11471, 22943, 45887]
[11519, 23039]
[11549, 23099, 46199, 92399]
[11579, 23159]
[11783, 23567]
[11801, 23603, 47207]
[11813, 23627]
[11831, 23663]
[11909, 23819, 47639, 95279]
[11939, 23879]
[12011, 24023]
[12041, 24083]
[12101, 24203, 48407]
[12119, 24239, 48479, 96959]
[12329, 24659]
[12653, 25307]
[12671, 25343]
[12791, 25583]
[12821, 25643, 51287]
[12923, 25847]
[12959, 25919, 51839]
[13001, 26003]
[13049, 26099]
[13229, 26459, 52919]
[13313, 26627]
[13451, 26903]
[13463, 26927]
[13553, 27107]
[13619, 27239]
[13649, 27299]
[13763, 27527]
[13883, 27767]
[13901, 27803]
[13913, 27827]
[14009, 28019, 56039]
[14081, 28163]
[14153, 28307]
[14249, 28499, 56999]
[14321, 28643, 57287]
[14489, 28979]
[14561, 29123]
[14621, 29243]
[14669, 29339, 58679]
[14741, 29483, 58967]
[14783, 29567]
[14831, 29663]
[14879, 29759]
[14939, 29879]
[15101, 30203]
[15161, 30323, 60647]
[15173, 30347]
[15233, 30467]
[15269, 30539]
[15401, 30803]
[15569, 31139]
[15629, 31259]
[15773, 31547]
[15791, 31583]
[15923, 31847]
[16001, 32003, 64007]
[16091, 32183]
[16253, 32507]
[16301, 32603]
[16421, 32843, 65687]
[16493, 32987]
[16553, 33107]
[16673, 33347]
[16811, 33623, 67247]
[16823, 33647]
[16883, 33767]
[16931, 33863]
[17159, 34319, 68639, 137279]
[17183, 34367]
[17291, 34583]
[17333, 34667]
[17351, 34703]
[17579, 35159]
[17669, 35339]
[17681, 35363]
[17981, 35963]
[18041, 36083, 72167]
[18131, 36263]
[18149, 36299]
[18191, 36383, 72767]
[18233, 36467]
[18341, 36683]
[18461, 36923, 73847]
[18731, 37463]
[18773, 37547]
[18803, 37607]
[18899, 37799]
[19163, 38327]
[19301, 38603]
[19319, 38639, 77279]
[19373, 38747]
[19391, 38783]
[19433, 38867]
[19553, 39107]
[19559, 39119]
[19661, 39323]
[19709, 39419, 78839, 157679]
[19751, 39503]
[19889, 39779, 79559, 159119]
[19913, 39827]
[19919, 39839]
[19991, 39983, 79967]
[20063, 40127]
[20249, 40499]
[20369, 40739]
[20393, 40787]
[20411, 40823, 81647]
[20441, 40883]
[20693, 41387]
[20753, 41507]
[20759, 41519]
[20771, 41543]
[20789, 41579]
[20879, 41759]
[20921, 41843]
[20939, 41879]
[20963, 41927]
[21011, 42023, 84047]
[21089, 42179]
[21149, 42299]
[21221, 42443]
[21341, 42683]
[21611, 43223]
[21701, 43403]
[21713, 43427]
[21803, 43607]
[21893, 43787]
[22013, 44027]
[22079, 44159]
[22133, 44267]
[22259, 44519]
[22271, 44543, 89087]
[22349, 44699, 89399, 178799]
[22409, 44819]
[22433, 44867]
[22469, 44939]
[22481, 44963]
[22541, 45083]
[22751, 45503]
[22853, 45707]
[23279, 46559]
[23321, 46643, 93287]
[23339, 46679]
[23459, 46919]
[23561, 47123]
[23669, 47339]
[23753, 47507]
[23909, 47819]
[23981, 47963]
[24281, 48563, 97127]
[24473, 48947]
[24509, 49019]
[24551, 49103, 98207]
[24611, 49223]
[24683, 49367]
[24749, 49499, 98999]
[24971, 49943]
[25073, 50147]
[25229, 50459]
[25523, 51047]
[25601, 51203, 102407]
[25673, 51347]
[25703, 51407]
[25841, 51683]
[25913, 51827]
[26111, 52223]
[26189, 52379, 104759, 209519]
[26501, 53003]
[26573, 53147]
[26633, 53267]
[26849, 53699]
[26879, 53759]
[26891, 53783]
[26993, 53987]
[27143, 54287]
[27281, 54563]
[27479, 54959, 109919, 219839]
[27539, 55079]
[27551, 55103]
[27581, 55163]
[27743, 55487]
[27773, 55547]
[27809, 55619]
[27893, 55787]
[27983, 55967]
[28001, 56003]
[28403, 56807]
[28559, 57119]
[28571, 57143]
[28751, 57503]
[28793, 57587]
[28859, 57719]
[28901, 57803]
[28949, 57899]
[28961, 57923]
[29021, 58043]
[29033, 58067]
[29201, 58403]
[29363, 58727]
[29453, 58907]
[29531, 59063, 118127]
[29723, 59447]
[29873, 59747]
[30269, 60539]
[30389, 60779, 121559, 243119]
[30449, 60899]
[30671, 61343]
[30689, 61379]
[30773, 61547]
[30851, 61703, 123407]
[30983, 61967]
[31019, 62039]
[31151, 62303]
[31253, 62507]
[31319, 62639]
[31469, 62939]
[31649, 63299]
[31721, 63443]
[31793, 63587]
[31799, 63599]
[31859, 63719]
[32009, 64019]
[32141, 64283]
[32159, 64319]
[32381, 64763, 129527]
[32531, 65063, 130127]
[32561, 65123]
[32573, 65147]
[32633, 65267]
[32771, 65543]
[32789, 65579]
[32933, 65867]
[33023, 66047]
[33053, 66107]
[33119, 66239]
[33179, 66359]
[33191, 66383]
[33461, 66923]
[33479, 66959, 133919]
[33521, 67043, 134087]
[33569, 67139]
[33713, 67427]
[33749, 67499, 134999]
[33773, 67547]
[33809, 67619]
[33941, 67883]
[34253, 68507]
[34283, 68567]
[34439, 68879]
[34631, 69263]
[34883, 69767]
[34913, 69827]
[34949, 69899]
[35069, 70139]
[35081, 70163]
[35099, 70199]
[35111, 70223]
[35291, 70583]
[35573, 71147]
[35831, 71663]
[35933, 71867]
[35993, 71987]
[35999, 71999, 143999]
[36191, 72383]
[36251, 72503, 145007]
[36353, 72707]
[36479, 72959]
[36563, 73127]
[36629, 73259, 146519]
[36761, 73523, 147047]
[36791, 73583]
[36821, 73643]
[36929, 73859]
[37013, 74027]
[37049, 74099, 148199]
[37139, 74279]
[37181, 74363, 148727]
[37253, 74507]
[37379, 74759, 149519]
[37619, 75239]
[37853, 75707]
[37871, 75743]
[37991, 75983, 151967]
[38039, 76079]
[38183, 76367]
[38189, 76379]
[38201, 76403]
[38231, 76463]
[38303, 76607]
[38333, 76667]
[38453, 76907]
[38459, 76919]
[38501, 77003]
[38669, 77339]
[38723, 77447]
[38861, 77723]
[38873, 77747]
[38891, 77783]
[38933, 77867]
[39089, 78179]
[39233, 78467]
[39239, 78479]
[39443, 78887]
[39521, 79043]
[39551, 79103]
[39569, 79139]
[39659, 79319]
[39953, 79907]
[39971, 79943]
[39989, 79979]
[40193, 80387]
[40283, 80567]
[40343, 80687]
[40559, 81119]
[40763, 81527]
[40853, 81707]
[40949, 81899]
[41081, 82163]
[41231, 82463]
[41243, 82487]
[41381, 82763, 165527]
[41399, 82799]
[41603, 83207]
[41609, 83219]
[41621, 83243, 166487]
[41669, 83339, 166679]
[41729, 83459, 166919]
[41969, 83939, 167879]
[42071, 84143]
[42089, 84179]
[42131, 84263, 168527]
[42221, 84443, 168887]
[42473, 84947]
[42611, 85223, 170447]
[42719, 85439]
[42743, 85487]
[42821, 85643]
[42923, 85847]
[43013, 86027]
[43313, 86627]
[43391, 86783]
[43541, 87083]
[43649, 87299, 174599, 349199]
[43661, 87323]
[43691, 87383, 174767]
[43721, 87443]
[43793, 87587]
[43943, 87887]
[44111, 88223]
[44129, 88259]
[44189, 88379]
[44249, 88499]
[44273, 88547]
[44501, 89003]
[44651, 89303]
[44729, 89459]
[44879, 89759, 179519]
[44909, 89819]
[45053, 90107]
[45119, 90239]
[45131, 90263]
[45179, 90359]
[45263, 90527]
[45329, 90659]
[45569, 91139, 182279]
[45599, 91199]
[45641, 91283]
[45971, 91943]
[46181, 92363, 184727]
[46229, 92459]
[46349, 92699]
[46523, 93047]
[46589, 93179]
[46619, 93239, 186479]
[46691, 93383]
[46703, 93407]
[46751, 93503]
[47189, 94379]
[47279, 94559]
[47363, 94727]
[47501, 95003]
[47513, 95027]
[47543, 95087]
[47609, 95219]
[47741, 95483]
[48029, 96059]
[48131, 96263]
[48221, 96443, 192887]
[48239, 96479]
[48413, 96827]
[48593, 97187]
[48731, 97463]
[48761, 97523, 195047]
[49193, 98387]
[49253, 98507]
[49331, 98663]
[49433, 98867]
[49463, 98927]
[49481, 98963, 197927]
[49559, 99119]
[49811, 99623, 199247]
[49853, 99707]
[49919, 99839, 199679]
[50021, 100043, 200087]
[50051, 100103]
[50261, 100523]
[50273, 100547]
[50411, 100823]
[50423, 100847]
[50513, 101027]
[50591, 101183]
[50741, 101483, 202967]
[50873, 101747]
[50969, 101939]
[50993, 101987]
[51503, 103007]
[51521, 103043]
[51539, 103079]
[51659, 103319, 206639]
[51893, 103787]
[52103, 104207]
[52121, 104243]
[52163, 104327]
[52289, 104579, 209159]
[52361, 104723]
[52511, 105023]
[52553, 105107]
[52571, 105143]
[52583, 105167]
[52631, 105263, 210527]
[52733, 105467]
[52883, 105767]
[53051, 106103, 212207]
[53093, 106187]
[53309, 106619]
[53411, 106823]
[53453, 106907]
[53549, 107099]
[53591, 107183]
[53639, 107279, 214559, 429119, 858239]
[53849, 107699, 215399, 430799, 861599]
[53951, 107903]
[54011, 108023]
[54101, 108203]
[54251, 108503]
[54293, 108587]
[54401, 108803]
[54413, 108827]
[54443, 108887]
[54773, 109547]
[54941, 109883, 219767]
[55229, 110459, 220919, 441839]
[55439, 110879]
[55469, 110939]
[55631, 111263, 222527]
[55661, 111323, 222647]
[55673, 111347]
[55721, 111443]
[55733, 111467]
[55799, 111599]
[55829, 111659, 223319]
[55889, 111779]
[55931, 111863]
[56009, 112019]
[56081, 112163, 224327]
[56099, 112199]
[56123, 112247]
[56393, 112787]
[56489, 112979]
[56519, 113039]
[56531, 113063]
[56663, 113327]
[56681, 113363]
[56783, 113567]
[56891, 113783, 227567]
[56909, 113819]
[56921, 113843]
[56951, 113903]
[57041, 114083]
[57149, 114299]
[57203, 114407]
[57329, 114659]
[57413, 114827]
[57773, 115547]
[57839, 115679, 231359, 462719]
[57881, 115763]
[58013, 116027]
[58049, 116099]
[58193, 116387]
[58211, 116423, 232847]
[58451, 116903]
[58511, 117023]
[58601, 117203]
[58889, 117779, 235559]
[58979, 117959, 235919]
[59021, 118043, 236087]
[59123, 118247]
[59369, 118739]
[59393, 118787]
[59399, 118799]
[59453, 118907]
[59513, 119027]
[59621, 119243]
[59723, 119447]
[59879, 119759]
[59981, 119963]
[60083, 120167]
[60149, 120299, 240599, 481199]
[60251, 120503]
[60293, 120587]
[60383, 120767]
[60449, 120899]
[60509, 121019]
[60689, 121379]
[60719, 121439]
[60761, 121523]
[60773, 121547]
[61331, 122663]
[61409, 122819, 245639, 491279, 982559]
[61469, 122939]
[61751, 123503, 247007]
[61961, 123923, 247847]
[61991, 123983]
[62099, 124199]
[62171, 124343]
[62213, 124427]
[62351, 124703]
[62423, 124847]
[62459, 124919]
[62501, 125003, 250007]
[62591, 125183]
[62603, 125207]
[62753, 125507]
[62819, 125639]
[62981, 125963]
[63113, 126227]
[63179, 126359]
[63419, 126839, 253679, 507359, 1014719, 2029439]
[63671, 127343]
[63743, 127487]
[63803, 127607]
[63839, 127679]
[63863, 127727]
[63929, 127859]
[64301, 128603]
[64373, 128747]
[64439, 128879]
[64451, 128903]
[64709, 129419]
[64793, 129587]
[64853, 129707]
[64901, 129803]
[65099, 130199, 260399]
[65111, 130223]
[65129, 130259]
[65171, 130343]
[65183, 130367]
[65309, 130619]
[65393, 130787]
===
共:742
最长:6*2:
[89, 179, 359, 719, 1439, 2879]
[63419, 126839, 253679, 507359, 1014719, 2029439]
===
]]]
[[[
py_adhoc_call   script.辅助冫搜索倍增素数序列   ,str.枚举冫非平凡倍增素数序列扌 =3 =2**20 +to_sized_str > /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp
grep 6: /sdcard/0my_files/tmp/0tmp
du -h /sdcard/0my_files/tmp/0tmp
    152K
mv -iv /sdcard/0my_files/tmp/0tmp script/辅助冫搜索倍增素数序列.py..3-2pow20.out.txt
tar -cvf script/辅助冫搜索倍增素数序列.py..3-2pow20.out.txt.tar.lzma  --lzma script/辅助冫搜索倍增素数序列.py..3-2pow20.out.txt
du -h script/辅助冫搜索倍增素数序列.py..3-2pow20.out.txt.tar.lzma
    32K
tar -xvf script/辅助冫搜索倍增素数序列.py..3-2pow20.out.txt.tar.lzma -O | more
py_adhoc_call  { -end4print }  seed.for_libs.for_tarfile   ,str.iter_read_solo_tarfile_  :script/辅助冫搜索倍增素数序列.py..3-2pow20.out.txt.tar.lzma  --xencoding4data:ascii  | diff - script/辅助冫搜索倍增素数序列.py..3-2pow20.out.txt -s
    => identical
rm -iv script/辅助冫搜索倍增素数序列.py..3-2pow20.out.txt

===
:sort n
... ...
4:[5, 11, 23, 47]
4:[509, 1019, 2039, 4079]
4:[1229, 2459, 4919, 9839]
4:[1409, 2819, 5639, 11279]
4:[2699, 5399, 10799, 21599]
4:[3539, 7079, 14159, 28319]
4:[6449, 12899, 25799, 51599]
4:[10589, 21179, 42359, 84719]
4:[11549, 23099, 46199, 92399]
4:[11909, 23819, 47639, 95279]
4:[12119, 24239, 48479, 96959]
4:[17159, 34319, 68639, 137279]
4:[19709, 39419, 78839, 157679]
4:[19889, 39779, 79559, 159119]
4:[22349, 44699, 89399, 178799]
4:[26189, 52379, 104759, 209519]
4:[27479, 54959, 109919, 219839]
4:[30389, 60779, 121559, 243119]
4:[43649, 87299, 174599, 349199]
4:[55229, 110459, 220919, 441839]
4:[57839, 115679, 231359, 462719]
4:[60149, 120299, 240599, 481199]
4:[71399, 142799, 285599, 571199]
4:[74699, 149399, 298799, 597599]
4:[75329, 150659, 301319, 602639]
4:[82499, 164999, 329999, 659999]
4:[87539, 175079, 350159, 700319]
4:[98369, 196739, 393479, 786959]
4:[101399, 202799, 405599, 811199]
4:[104369, 208739, 417479, 834959]
4:[112919, 225839, 451679, 903359]
4:[122099, 244199, 488399, 976799]
4:[139439, 278879, 557759, 1115519]
4:[148829, 297659, 595319, 1190639]
4:[166739, 333479, 666959, 1333919]
4:[167759, 335519, 671039, 1342079]
4:[175349, 350699, 701399, 1402799]
4:[189929, 379859, 759719, 1519439]
4:[196769, 393539, 787079, 1574159]
4:[210209, 420419, 840839, 1681679]
4:[227789, 455579, 911159, 1822319]
4:[229739, 459479, 918959, 1837919]
4:[232409, 464819, 929639, 1859279]
4:[234029, 468059, 936119, 1872239]
4:[235289, 470579, 941159, 1882319]
4:[238109, 476219, 952439, 1904879]
4:[244589, 489179, 978359, 1956719]
4:[253349, 506699, 1013399, 2026799]
4:[255149, 510299, 1020599, 2041199]
4:[257249, 514499, 1028999, 2057999]
4:[266369, 532739, 1065479, 2130959]
4:[279269, 558539, 1117079, 2234159]
4:[287849, 575699, 1151399, 2302799]
4:[299969, 599939, 1199879, 2399759]
4:[314339, 628679, 1257359, 2514719]
4:[321449, 642899, 1285799, 2571599]
4:[330329, 660659, 1321319, 2642639]
4:[334289, 668579, 1337159, 2674319]
4:[395189, 790379, 1580759, 3161519]
4:[396239, 792479, 1584959, 3169919]
4:[413009, 826019, 1652039, 3304079]
4:[430649, 861299, 1722599, 3445199]
4:[433319, 866639, 1733279, 3466559]
4:[449129, 898259, 1796519, 3593039]
4:[452009, 904019, 1808039, 3616079]
4:[458729, 917459, 1834919, 3669839]
4:[471749, 943499, 1886999, 3773999]
4:[480059, 960119, 1920239, 3840479]
4:[480209, 960419, 1920839, 3841679]
4:[500729, 1001459, 2002919, 4005839]
4:[503969, 1007939, 2015879, 4031759]
4:[511859, 1023719, 2047439, 4094879]
4:[528509, 1057019, 2114039, 4228079]
4:[538019, 1076039, 2152079, 4304159]
4:[541529, 1083059, 2166119, 4332239]
4:[577169, 1154339, 2308679, 4617359]
4:[579539, 1159079, 2318159, 4636319]
4:[579569, 1159139, 2318279, 4636559]
4:[588509, 1177019, 2354039, 4708079]
4:[601949, 1203899, 2407799, 4815599]
4:[610409, 1220819, 2441639, 4883279]
4:[639959, 1279919, 2559839, 5119679]
4:[641969, 1283939, 2567879, 5135759]
4:[643949, 1287899, 2575799, 5151599]
4:[655289, 1310579, 2621159, 5242319]
4:[661889, 1323779, 2647559, 5295119]
4:[675539, 1351079, 2702159, 5404319]
4:[698339, 1396679, 2793359, 5586719]
4:[704309, 1408619, 2817239, 5634479]
4:[709589, 1419179, 2838359, 5676719]
4:[712199, 1424399, 2848799, 5697599]
4:[731729, 1463459, 2926919, 5853839]
4:[743069, 1486139, 2972279, 5944559]
4:[751529, 1503059, 3006119, 6012239]
4:[807749, 1615499, 3230999, 6461999]
4:[840179, 1680359, 3360719, 6721439]
4:[849839, 1699679, 3399359, 6798719]
4:[855269, 1710539, 3421079, 6842159]
4:[865829, 1731659, 3463319, 6926639]
4:[888389, 1776779, 3553559, 7107119]
4:[907589, 1815179, 3630359, 7260719]
4:[916109, 1832219, 3664439, 7328879]
4:[934259, 1868519, 3737039, 7474079]
4:[956909, 1913819, 3827639, 7655279]
4:[960299, 1920599, 3841199, 7682399]
4:[964049, 1928099, 3856199, 7712399]
4:[968729, 1937459, 3874919, 7749839]
4:[974819, 1949639, 3899279, 7798559]
4:[978179, 1956359, 3912719, 7825439]
4:[985109, 1970219, 3940439, 7880879]
4:[1021199, 2042399, 4084799, 8169599]
4:[1030619, 2061239, 4122479, 8244959]
4:[1041329, 2082659, 4165319, 8330639]
4:[1043369, 2086739, 4173479, 8346959]
5:[53639, 107279, 214559, 429119, 858239]
5:[53849, 107699, 215399, 430799, 861599]
5:[61409, 122819, 245639, 491279, 982559]
5:[66749, 133499, 266999, 533999, 1067999]
5:[143609, 287219, 574439, 1148879, 2297759]
5:[167729, 335459, 670919, 1341839, 2683679]
5:[186149, 372299, 744599, 1489199, 2978399]
5:[206369, 412739, 825479, 1650959, 3301919]
5:[268049, 536099, 1072199, 2144399, 4288799]
5:[296099, 592199, 1184399, 2368799, 4737599]
5:[340919, 681839, 1363679, 2727359, 5454719]
5:[422069, 844139, 1688279, 3376559, 6753119]
5:[446609, 893219, 1786439, 3572879, 7145759]
5:[539009, 1078019, 2156039, 4312079, 8624159]
5:[594449, 1188899, 2377799, 4755599, 9511199]
5:[607319, 1214639, 2429279, 4858559, 9717119]
5:[658349, 1316699, 2633399, 5266799, 10533599]
5:[671249, 1342499, 2684999, 5369999, 10739999]
5:[725009, 1450019, 2900039, 5800079, 11600159]
5:[775949, 1551899, 3103799, 6207599, 12415199]
5:[812849, 1625699, 3251399, 6502799, 13005599]
5:[819509, 1639019, 3278039, 6556079, 13112159]
5:[926669, 1853339, 3706679, 7413359, 14826719]
5:[1008209, 2016419, 4032839, 8065679, 16131359]
6:[89, 179, 359, 719, 1439, 2879]
6:[63419, 126839, 253679, 507359, 1014719, 2029439]
6:[127139, 254279, 508559, 1017119, 2034239, 4068479]
6:[405269, 810539, 1621079, 3242159, 6484319, 12968639]
6:[810809, 1621619, 3243239, 6486479, 12972959, 25945919]
===
共:7327
    2*6185
    3*999
    4*114
    5*24
    6*5
===
最长:6*5:
6:[89, 179, 359, 719, 1439, 2879]
6:[63419, 126839, 253679, 507359, 1014719, 2029439]
6:[127139, 254279, 508559, 1017119, 2034239, 4068479]
6:[405269, 810539, 1621079, 3242159, 6484319, 12968639]
6:[810809, 1621619, 3243239, 6486479, 12972959, 25945919]
===
]]]



from script.辅助冫搜索倍增素数序列 import 枚举冫非平凡倍增素数序列扌
]]]'''#'''
__all__ = r'''
枚举冫非平凡倍增素数序列扌
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from seed.math.prime_gens import iter_primes__le_pow2_81__ge_
from seed.math.prime_gens import is_prime__le_pow2_81_
from seed.tiny_.check import check_type_is, check_int_ge
from itertools import takewhile #islice
#.
#.from seed.abc.abc__ver1 import abstractmethod, override, ABC
#.from seed.helper.repr_input import repr_helper
___end_mark_of_excluded_global_names__0___ = ...

#.class __(ABC):
#.    __slots__ = ()
#.    ___no_slots_ok___ = True
#.    def __repr__(sf, /):
#.        return repr_helper(sf, *args, **kwargs)
#.if __name__ == "__main__":
#.    raise NotImplementedError

def _列表冫倍增素数序列乊扌(p, /):
    'p/odd_prime -> 倍增素数序列乊(p)'
    ls = [p]
    while 1:
        p <<= 1
        p += 1
        if not is_prime__le_pow2_81_(p):
            break
        ls.append(p)
    return ls
def 枚举冫非平凡倍增素数序列扌(begin=3, may_end=-1, /, *, min_size=2, with_size=False, to_sized_str=False):
    check_type_is(bool, to_sized_str)
    check_type_is(bool, with_size)
    check_int_ge(2, min_size)
    check_type_is(int, begin)
    if not may_end is None:
        end = may_end
        check_type_is(int, end)
    begin = max(3, begin)
    begin |= 1
    # [begin >= 3][is_odd(begin)]
    it = iter_primes__le_pow2_81__ge_(begin)
    if not may_end is None:
        it = takewhile(end.__gt__, it)
    it

    for p in it:
        if p == 5 or not is_prime__le_pow2_81_(p>>1):
            ls = _列表冫倍增素数序列乊扌(p)
            sz = len(ls)
            if sz >= min_size:
                yield (ls if not with_size else (sz, ls)) if not to_sized_str else f'{sz}:{ls}'
    return


__all__
from script.辅助冫搜索倍增素数序列 import *
