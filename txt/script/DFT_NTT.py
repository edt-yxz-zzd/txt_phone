#__all__:goto
r'''[[[
e script/DFT_NTT.py
[[[
#非必要条件冫素模丶但对于数论变换还是比较有效的:here
===
view script/DFT_NTT.py
    只考虑NTT
===
起源:
    view ../../python3_src/nn_ns/math_nn/DFT/NTT.py
    ==>>:
    感觉: [非零特征 M 是 素数] 并非必要
    仅仅是用于证明[[M :: pint] -> [N :: pint] -> [w**N%M==1] -> [[i :<- [1..<N]] -> [1 =!= w**i%M]] -> [[i :<- [1..<N]] -> [0 == sum[w**(i*j)%M | [j :<- [0..<N]]]%M]]]
    ==>>因此有此文件
    ==>>结果反而证明:即使DFT不必要，也是(至少对NTT而言)相当重要/有用

<<==:

[[
[7==1+2*3]
[11==1+2*5]
# [M := 7*11][E := lcm(phi(7),phi(11))]
[M := 77][E := 30]
[ps4M := [7,11]]
[qs4E := [2,3,5]]
assert [j for j in range(M) if not any(j%p==0 for p in ps4M)] == [j for j in range(M) if pow(j, E, M) == 1]
[gs := [j for j in range(M) if not any(j%p==0 for p in ps4M) and not any(pow(j, E//q, M) == 1 for q in qs4E)]]
[gs == [2, 3, 5, 17, 18, 19, 24, 26, 30, 31, 38, 39, 40, 46, 47, 51, 52, 59, 61, 68, 72, 73, 74, 75]]
[len(gs) == 24]
[N := E]
[zs := [w for w in gs if not all(sum(pow(w,i*j,M) for j in range(N))%M == 0 for i in range(1,N))]]
[zs == gs]
[wZis_ls := [(w,[(i,s) for i in range(1,N) if not 0 == (s:=sum(pow(w,i*j,M) for j in range(N))%M)]) for w in zs]]
[wZis_ls == (
[(2, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(3, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(5, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(17, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(18, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(19, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(24, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(26, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(30, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(31, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(38, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(39, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(40, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(46, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(47, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(51, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(52, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(59, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(61, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(68, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(72, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(73, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(74, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(75, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
]
)]
[common__i_s_ls := sorted(set.intersection(*({*i_s_ls} for (w, i_s_ls) in wZis_ls)))]
[common__i_s_ls == [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)]]

]]
]]]




script.DFT_NTT
py -m nn_ns.app.debug_cmd   script.DFT_NTT -x
py -m nn_ns.app.doctest_cmd script.DFT_NTT:__doc__ -ht
from script.DFT_NTT import *


py_adhoc_call   script.DFT_NTT   @探索冫非素数模情形灬扌  =77 =30 '=[7,11]' '=[2,3,5]'
py_adhoc_call   script.DFT_NTT   @探索冫非素数模情形扌  =77

py_adhoc_call   script.DFT_NTT   @探索冫非素数模情形扌  =4 =8 =16 =32
py_adhoc_call   script.DFT_NTT   @探索冫非素数模情形扌  =9 =27 =12 =36
py_adhoc_call   script.DFT_NTT   @探索冫非素数模情形扌  =6 =10 =15 =30

[[
++++++++++++++++++++++
[M := 77]
[E := 30]
[ps4M := [7, 11]]
[qs4E := [2, 3, 5]]
[gs := [2, 3, 5, 17, 18, 19, 24, 26, 30, 31, 38, 39, 40, 46, 47, 51, 52, 59, 61, 68, 72, 73, 74, 75]]
[len_gs := 24]
[zs == gs]
[wZis_ls := ([*()
,(2, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(3, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(5, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(17, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(18, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(19, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(24, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(26, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(30, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(31, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(38, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(39, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(40, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(46, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(47, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(51, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(52, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(59, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
,(61, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(68, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(72, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(73, [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)])
,(74, [(3, 44), (6, 44), (9, 44), (10, 63), (12, 44), (15, 44), (18, 44), (20, 63), (21, 44), (24, 44), (27, 44)])
,(75, [(5, 63), (6, 44), (10, 63), (12, 44), (15, 63), (18, 44), (20, 63), (24, 44), (25, 63)])
]
)]
[common__i_s_ls := [(6, 44), (10, 63), (12, 44), (18, 44), (20, 63), (24, 44)]]
]]
[[
++++++++++++++++++++++
[M := 4]
[E := 2]
[ps4M := [2]]
[qs4E := [2]]
[gs := [3]]
[len_gs := 1]
[zs := []]
[len_zs := 0]
======================
++++++++++++++++++++++
[M := 8]
[E := 2]
[ps4M := [2]]
[qs4E := [2]]
[gs := [3, 5, 7]]
[len_gs := 3]
[zs := [3, 5]]
[len_zs := 2]
[wZis_ls := ([*()
,(3, [(1, 4)])
,(5, [(1, 6)])
]
)]
[common__i_s_ls := []]
======================
++++++++++++++++++++++
[M := 16]
[E := 4]
[ps4M := [2]]
[qs4E := [2]]
[gs := [3, 5, 11, 13]]
[len_gs := 4]
[zs == gs]
[wZis_ls := ([*()
,(3, [(1, 8), (2, 4), (3, 8)])
,(5, [(1, 12), (2, 4), (3, 12)])
,(11, [(1, 8), (2, 4), (3, 8)])
,(13, [(1, 12), (2, 4), (3, 12)])
]
)]
[common__i_s_ls := [(2, 4)]]
======================
++++++++++++++++++++++
[M := 32]
[E := 8]
[ps4M := [2]]
[qs4E := [2]]
[gs := [3, 5, 11, 13, 19, 21, 27, 29]]
[len_gs := 8]
[zs == gs]
[wZis_ls := ([*()
,(3, [(1, 16), (2, 8), (3, 16), (4, 8), (5, 16), (6, 8), (7, 16)])
,(5, [(1, 24), (2, 8), (3, 24), (4, 8), (5, 24), (6, 8), (7, 24)])
,(11, [(1, 16), (2, 8), (3, 16), (4, 8), (5, 16), (6, 8), (7, 16)])
,(13, [(1, 24), (2, 8), (3, 24), (4, 8), (5, 24), (6, 8), (7, 24)])
,(19, [(1, 16), (2, 8), (3, 16), (4, 8), (5, 16), (6, 8), (7, 16)])
,(21, [(1, 24), (2, 8), (3, 24), (4, 8), (5, 24), (6, 8), (7, 24)])
,(27, [(1, 16), (2, 8), (3, 16), (4, 8), (5, 16), (6, 8), (7, 16)])
,(29, [(1, 24), (2, 8), (3, 24), (4, 8), (5, 24), (6, 8), (7, 24)])
]
)]
[common__i_s_ls := [(2, 8), (4, 8), (6, 8)]]
======================
]]
[[
++++++++++++++++++++++
[M := 9]
[E := 6]
[ps4M := [3]]
[qs4E := [2, 3]]
[gs := [2, 5]]
[len_gs := 2]
[zs == gs]
[wZis_ls := ([*()
,(2, [(2, 6), (4, 6)])
,(5, [(2, 6), (4, 6)])
]
)]
[common__i_s_ls := [(2, 6), (4, 6)]]
======================
++++++++++++++++++++++
[M := 27]
[E := 18]
[ps4M := [3]]
[qs4E := [2, 3]]
[gs := [2, 5, 11, 14, 20, 23]]
[len_gs := 6]
[zs == gs]
[wZis_ls := ([*()
,(2, [(2, 18), (4, 18), (6, 18), (8, 18), (10, 18), (12, 18), (14, 18), (16, 18)])
,(5, [(2, 18), (4, 18), (6, 18), (8, 18), (10, 18), (12, 18), (14, 18), (16, 18)])
,(11, [(2, 18), (4, 18), (6, 18), (8, 18), (10, 18), (12, 18), (14, 18), (16, 18)])
,(14, [(2, 18), (4, 18), (6, 18), (8, 18), (10, 18), (12, 18), (14, 18), (16, 18)])
,(20, [(2, 18), (4, 18), (6, 18), (8, 18), (10, 18), (12, 18), (14, 18), (16, 18)])
,(23, [(2, 18), (4, 18), (6, 18), (8, 18), (10, 18), (12, 18), (14, 18), (16, 18)])
]
)]
[common__i_s_ls := [(2, 18), (4, 18), (6, 18), (8, 18), (10, 18), (12, 18), (14, 18), (16, 18)]]
======================
++++++++++++++++++++++
[M := 12]
[E := 2]
[ps4M := [2, 3]]
[qs4E := [2]]
[gs := [5, 7, 11]]
[len_gs := 3]
[zs := [5, 7]]
[len_zs := 2]
[wZis_ls := ([*()
,(5, [(1, 6)])
,(7, [(1, 8)])
]
)]
[common__i_s_ls := []]
======================
++++++++++++++++++++++
[M := 36]
[E := 6]
[ps4M := [2, 3]]
[qs4E := [2, 3]]
[gs := [5, 7, 11, 23, 29, 31]]
[len_gs := 6]
[zs == gs]
[wZis_ls := ([*()
,(5, [(1, 18), (2, 6), (3, 18), (4, 6), (5, 18)])
,(7, [(1, 24), (2, 6), (3, 24), (4, 6), (5, 24)])
,(11, [(2, 6), (4, 6)])
,(23, [(2, 6), (4, 6)])
,(29, [(1, 18), (2, 6), (3, 18), (4, 6), (5, 18)])
,(31, [(1, 24), (2, 6), (3, 24), (4, 6), (5, 24)])
]
)]
[common__i_s_ls := [(2, 6), (4, 6)]]
======================
]]
[[
++++++++++++++++++++++
[M := 6]
[E := 2]
[ps4M := [2, 3]]
[qs4E := [2]]
[gs := [5]]
[len_gs := 1]
[zs := []]
[len_zs := 0]
======================
++++++++++++++++++++++
[M := 10]
[E := 4]
[ps4M := [2, 5]]
[qs4E := [2]]
[gs := [3, 7]]
[len_gs := 2]
[zs := []]
[len_zs := 0]
======================
++++++++++++++++++++++
[M := 15]
[E := 4]
[ps4M := [3, 5]]
[qs4E := [2]]
[gs := [2, 7, 8, 13]]
[len_gs := 4]
[zs == gs]
[wZis_ls := ([*()
,(2, [(2, 10)])
,(7, [(1, 10), (2, 10), (3, 10)])
,(8, [(2, 10)])
,(13, [(1, 10), (2, 10), (3, 10)])
]
)]
[common__i_s_ls := [(2, 10)]]
======================
++++++++++++++++++++++
[M := 30]
[E := 4]
[ps4M := [2, 3, 5]]
[qs4E := [2]]
[gs := [7, 13, 17, 23]]
[len_gs := 4]
[zs == gs]
[wZis_ls := ([*()
,(7, [(1, 10), (2, 10), (3, 10)])
,(13, [(1, 10), (2, 10), (3, 10)])
,(17, [(2, 10)])
,(23, [(2, 10)])
]
)]
[common__i_s_ls := [(2, 10)]]
======================
]]
[[
]]


#]]]'''
__all__ = r'''
'''.split()#'''
__all__

from seed.math.semi_factor_pint_via_trial_division import complete_factor_pint_via_trial_division
from seed.math.is_prime__le_pow2_64 import is_prime__le_pow2_64
#from seed.math.II import II, II_mod, II__p2e_, II__ft2e_, II__ft_e_pairs_
from seed.math.lcm import lcm_many
from seed.math.factor_pint_by_trial_division_ import factor_pint_by_trial_division_# factor_pint_by_trial_division_ex_

def check_factors_(N, ps4N, /):
    assert all(map(is_prime__le_pow2_64, ps4N))
    assert len(ps4N) == len({*ps4N})
    assert complete_factor_pint_via_trial_division(ps4N, N).keys() == {*ps4N}
def max_order_mod_(p2e, /):
    #bug:return lcm_many(_phi_(p,e) for p,e in p2e.items())
    # view others/数学/prime/primitive_root.txt
    # [max_order_mod_(modulus) == lcm~ (p4M-1) *p4M**(gde_(p4M;modulus)-1 -[p4M==2][modulus%8==0]) ~{p4M :<- all_prime_factors_of(modulus)}]
    return lcm_many(_phi_(p,e-(p==2 and e>=3)) for p,e in p2e.items())
def _phi_(p,e, /):
    return (p-1)*p**(e-1)
def check_M_E_(M, E, ps4M, qs4E, /):
    check_factors_(M, ps4M)
    check_factors_(E, qs4E)
    p2e4M = complete_factor_pint_via_trial_division(ps4M, M)
    if not E == max_order_mod_(p2e4M):raise ValueError

def _show(d, nm, /, *, ls=False):
    v = d[nm]
    if not ls:
        print(f'[{nm} := {v}]')
    else:
        vs = v
        print(f'[{nm} := ([*()')
        for v in vs:
            print(f',{v}')
        print(f']')
        print(f')]')
def _prepare_(M, /):
    p2e4M = factor_pint_by_trial_division_(M)
    E = max_order_mod_(p2e4M)
    p2e4E = factor_pint_by_trial_division_(E)
    ps4M = sorted(p2e4M)
    qs4E = sorted(p2e4E)
    return (M, E, ps4M, qs4E)
def 探索冫非素数模情形扌(*Ms):
    for M in Ms:
        print('+'*22)
        (M, E, ps4M, qs4E) = _prepare_(M)
        探索冫非素数模情形灬扌(M, E, ps4M, qs4E)
        print('='*22)
def 探索冫非素数模情形灬扌(M, E, ps4M, qs4E, /):
    check_M_E_(M, E, ps4M, qs4E)
    _show(locals(), 'M')
    _show(locals(), 'E')
    _show(locals(), 'ps4M')
    _show(locals(), 'qs4E')
    assert [j for j in range(M) if not any(j%p==0 for p in ps4M)] == [j for j in range(M) if pow(j, E, M) == 1]
    [gs := [j for j in range(M) if not any(j%p==0 for p in ps4M) and not any(pow(j, E//q, M) == 1 for q in qs4E)]]
    [len_gs := len(gs)]
    _show(locals(), 'gs')
    _show(locals(), 'len_gs')
    if not gs:
        return
    [N := E]
    [zs := [w for w in gs if not all(sum(pow(w,i*j,M) for j in range(N))%M == 0 for i in range(1,N))]]
    #assert (zs == gs), (zs, gs)
    if not (zs == gs):
        [len_zs := len(zs)]
        _show(locals(), 'zs')
        _show(locals(), 'len_zs')
    else:
        print('[zs == gs]')
    if not zs:
        return

    [wZis_ls := [(w,[(i,s) for i in range(1,N) if not 0 == (s:=sum(pow(w,i*j,M) for j in range(N))%M)]) for w in zs]]
    _show(locals(), 'wZis_ls', ls=len(wZis_ls)>1)
    [common__i_s_ls := sorted(set.intersection(*({*i_s_ls} for (w, i_s_ls) in wZis_ls))) if wZis_ls else []]
    _show(locals(), 'common__i_s_ls', ls=len(common__i_s_ls)>60)


__all__
from script.DFT_NTT import *
