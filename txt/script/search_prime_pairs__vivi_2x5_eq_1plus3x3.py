#__all__:goto
r'''[[[
e script/search_prime_pairs__vivi_2x5_eq_1plus3x3.py

view others/数学/oeis整数序列/A068501-A048161-A067756.txt
DONE-www-oeis:
  1, 2, 5, 9, 14, 29, 30, 35, 39, 50, 65, 69, 90, 99
    https://oeis.org/A068501
  3, 5, 11, 19, 29, 59, 61, 71, 79, 101, 131, 139, 181, 199
    https://oeis.org/A048161
  5, 13, 61, 181, 421, 1741, 1861
    https://oeis.org/A067756




script.search_prime_pairs__vivi_2x5_eq_1plus3x3
py -m nn_ns.app.debug_cmd   script.search_prime_pairs__vivi_2x5_eq_1plus3x3 -x
py -m nn_ns.app.doctest_cmd script.search_prime_pairs__vivi_2x5_eq_1plus3x3:__doc__ -ht


[[
vivi: [2*5==1+3**2]
?[p,q :: odd_prime] :=> [2*q==1+p**2]
===
why so many???
===
[p,q :: odd_prime][2*q==1+p**2]:
  [n := (p-1)///2]
  [m := (q-1)///2]
  !! [2*q==1+p**2]
  [2*(2*m+1)
  ==1+(2*n+1)**2
  ==(4*n**2+4*n+2)
  ]
  [m==(n**2+n)]
  [is_prime(2*n+1)]
  [is_prime(2*n**2+2*n+1)]
  [[n > 1] -> [n%3 =!= 1]]
  [[n > k] -> [n%(2*k+1) =!= k]]
  [[n > k] -> [n%(2*k**2+2*k+1) =!= k]]
  [[n > k] -> [n%(2*k**2+2*k+1) =!= (2*k**2+k)]]
      <<==:
      [(2*k**2+k)==(2*k+1)*k==(-1-k)%(2*k**2+2*k+1)]
      [n := -(k+1)]:
        [(2*n**2+2*n+1)%(2*k**2+2*k+1)
        =%=2*(k+1)**2 -2*(k+1) +1
        =%=(2*k**2+4*k+2) -2*k -1
        =%=(2*k**2+2*k+1)
        =%=0
        ]
  [[n > k] -> [n%(2*k**2+2*k+1) !<- {k,(2*k**2+k)}]]
  [[n > k] -> [n%(2*k+1) =!= k]]
  ==>>:
  [[n > 1] -> [n%3 =!= 1]]
  [[n > 1] -> [n%5 !<- {1,3}]]
  [[n > 2] -> [n%5 =!= 2]]
  [[n > 2] -> [n%13 !<- {2,10}]]
  ==>>:
  [[n > 1] -> [n%3 <- {0,2}]]
  [[n > 2] -> [n%5 <- {0,4}]]
  ==>>:
  [[n > 2] -> [n%15 <- [0, 5, 9, 14]]]

===
]]




###py_adhoc_call   script.search_prime_pairs__vivi_2x5_eq_1plus3x3   ,search_prime_pairs__vivi_2x5_eq_1plus3x3___num_mod15_wheels_le_  ='2**16'
py_adhoc_call  { -lineno }   script.search_prime_pairs__vivi_2x5_eq_1plus3x3   ,search_prime_pairs__vivi_2x5_eq_1plus3x3___num_mod15_wheels_le_  ='2**8'

>>> for j, x in enumerate(search_prime_pairs__vivi_2x5_eq_1plus3x3___num_mod15_wheels_le_(2**8)):
...     #(n, (p,q)) = x
...     print(f'{j}:{x}')
0:(1, (3, 5))
1:(2, (5, 13))
2:(5, (11, 61))
3:(9, (19, 181))
4:(14, (29, 421))
5:(29, (59, 1741))
6:(30, (61, 1861))
7:(35, (71, 2521))
8:(39, (79, 3121))
9:(50, (101, 5101))
10:(65, (131, 8581))
11:(69, (139, 9661))
12:(90, (181, 16381))
13:(99, (199, 19801))
14:(135, (271, 36721))
15:(174, (349, 60901))
16:(189, (379, 71821))
17:(204, (409, 83641))
18:(224, (449, 100801))
19:(230, (461, 106261))
20:(260, (521, 135721))
21:(284, (569, 161881))
22:(285, (571, 163021))
23:(315, (631, 199081))
24:(320, (641, 205441))
25:(330, (661, 218461))
26:(369, (739, 273061))
27:(375, (751, 282001))
28:(410, (821, 337021))
29:(440, (881, 388081))
30:(464, (929, 431521))
31:(495, (991, 491041))
32:(515, (1031, 531481))
33:(519, (1039, 539761))
34:(525, (1051, 552301))
35:(534, (1069, 571381))
36:(545, (1091, 595141))
37:(564, (1129, 637321))
38:(575, (1151, 662401))
39:(585, (1171, 685621))
40:(590, (1181, 697381))
41:(680, (1361, 926161))
42:(719, (1439, 1035361))
43:(729, (1459, 1064341))
44:(744, (1489, 1108561))
45:(749, (1499, 1123501))
46:(765, (1531, 1171981))
47:(854, (1709, 1460341))
48:(870, (1741, 1515541))
49:(905, (1811, 1639861))
50:(915, (1831, 1676281))
51:(950, (1901, 1806901))
52:(974, (1949, 1899301))
53:(1080, (2161, 2334961))
54:(1119, (2239, 2506561))
55:(1134, (2269, 2574181))
56:(1140, (2281, 2601481))
57:(1170, (2341, 2740141))
58:(1175, (2351, 2763601))
59:(1190, (2381, 2834581))
60:(1194, (2389, 2853661))
61:(1229, (2459, 3023341))
62:(1269, (2539, 3223261))
63:(1274, (2549, 3248701))
64:(1295, (2591, 3356641))
65:(1304, (2609, 3403441))
66:(1329, (2659, 3535141))
67:(1335, (2671, 3567121))
68:(1355, (2711, 3674761))
69:(1359, (2719, 3696481))
70:(1364, (2729, 3723721))
71:(1365, (2731, 3729181))
72:(1394, (2789, 3889261))
73:(1409, (2819, 3973381))
74:(1500, (3001, 4503001))
75:(1524, (3049, 4648201))
76:(1554, (3109, 4832941))
77:(1559, (3119, 4864081))
78:(1595, (3191, 5091241))
79:(1664, (3329, 5541121))
80:(1695, (3391, 5749441))
81:(1745, (3491, 6093541))
82:(1749, (3499, 6121501))
83:(1764, (3529, 6226921))
84:(1769, (3539, 6262261))
85:(1785, (3571, 6376021))
86:(1845, (3691, 6811741))
87:(1850, (3701, 6848701))
88:(1854, (3709, 6878341))
89:(1925, (3851, 7415101))
90:(1959, (3919, 7679281))
91:(1994, (3989, 7956061))
92:(2010, (4021, 8084221))
93:(2024, (4049, 8197201))
94:(2039, (4079, 8319121))
95:(2049, (4099, 8400901))
96:(2100, (4201, 8824201))
97:(2115, (4231, 8950681))
98:(2120, (4241, 8993041))
99:(2144, (4289, 9197761))
100:(2174, (4349, 9456901))
101:(2280, (4561, 10401361))
102:(2319, (4639, 10760161))
103:(2325, (4651, 10815901))
104:(2345, (4691, 11002741))
105:(2360, (4721, 11143921))
106:(2379, (4759, 11324041))
107:(2399, (4799, 11515201))
108:(2400, (4801, 11524801))
109:(2435, (4871, 11863321))
110:(2499, (4999, 12495001))
111:(2504, (5009, 12545041))
112:(2510, (5021, 12605221))
113:(2639, (5279, 13933921))
114:(2640, (5281, 13944481))
115:(2699, (5399, 14574601))
116:(2715, (5431, 14747881))
117:(2720, (5441, 14802241))
118:(2735, (5471, 14965921))
119:(2765, (5531, 15295981))
120:(2795, (5591, 15629641))
121:(2825, (5651, 15966901))
122:(2834, (5669, 16068781))
123:(2855, (5711, 16307761))
124:(2919, (5839, 17046961))
125:(2924, (5849, 17105401))
126:(2925, (5851, 17117101))
127:(2939, (5879, 17281321))
128:(3014, (6029, 18174421))
129:(3050, (6101, 18611101))
130:(3099, (6199, 19213801))
131:(3110, (6221, 19350421))
132:(3150, (6301, 19851301))
133:(3164, (6329, 20028121))
134:(3179, (6359, 20218441))
135:(3180, (6361, 20231161))
136:(3290, (6581, 21654781))
137:(3309, (6619, 21905581))
138:(3414, (6829, 23317621))
139:(3420, (6841, 23399641))
140:(3435, (6871, 23605321))
141:(3449, (6899, 23798101))
142:(3485, (6971, 24297421))
143:(3534, (7069, 24985381))
144:(3579, (7159, 25625641))
145:(3605, (7211, 25999261))
146:(3725, (7451, 27758701))
147:(3744, (7489, 28042561))
148:(3770, (7541, 28433341))
149:(3779, (7559, 28569241))
150:(3794, (7589, 28796461))


from script.search_prime_pairs__vivi_2x5_eq_1plus3x3 import *
#]]]'''
__all__ = r'''
'''.split()#'''
__all__


def search_prime_pairs__vivi_2x5_eq_1plus3x3___num_mod15_wheels_le_(max_num_mod15_wheels, /):
    from seed.math.is_prime__le_pow2_64 import is_prime__le_pow2_64
    j = -1
    def f(n, /):
        nonlocal j
        p = 2*n+1
        if not is_prime__le_pow2_64(p):
          return
        q = 2*n**2 +2*n +1
        if not is_prime__le_pow2_64(q):
          return
        j += 1
        assert 2*q == 1+p**2, (j, n, (p,q))
        if 0:
            print((j, n, (p,q)))
        yield (n, (p,q))
    for n in [1, 2]:
        yield from f(n)
    #for offset in range(0, 15<<16, 15):
    for offset in range(0, 15*max_num_mod15_wheels, 15):
      for r in [0, 5, 9, 14]:
        n = offset+r
        yield from f(n)

__all__
from script.search_prime_pairs__vivi_2x5_eq_1plus3x3 import *
