#__all__:goto
r'''[[[
e script/杂交.py

script.杂交
py -m nn_ns.app.debug_cmd   script.杂交 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.杂交:__doc__ -ht # -ff -df

[[
推广五行生胜
杂交扌 :: a -> a -> a
杂交扌 :: uint%M -> uint%M -> uint%M
]]

py_adhoc_call   script.杂交   @杂交制表牜模乘法扌 =5 =2
py_adhoc_call   script.杂交   ,迭代杂交制表牜模乘法扌 =5 ='range(5)'
(5, 0, [[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4]])
(5, 1, [[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]])
(5, 2, [[0, 2, 4, 1, 3], [4, 1, 3, 0, 2], [3, 0, 2, 4, 1], [2, 4, 1, 3, 0], [1, 3, 0, 2, 4]])
(5, 3, [[0, 3, 1, 4, 2], [3, 1, 4, 2, 0], [1, 4, 2, 0, 3], [4, 2, 0, 3, 1], [2, 0, 3, 1, 4]])
(5, 4, [[0, 4, 3, 2, 1], [2, 1, 0, 4, 3], [4, 3, 2, 1, 0], [1, 0, 4, 3, 2], [3, 2, 1, 0, 4]])

py_adhoc_call   script.杂交   @杂交制表牜爻位洗牌扌
py_adhoc_call { -lineno }  script.杂交   ,杂交制表牜爻位洗牌扌
0:[0, 2, 1, 3, 4, 6, 5, 7, 2, 0, 3, 1, 6, 4, 7, 5, 8, 10, 9, 11, 12, 14, 13, 15, 10, 8, 11, 9, 14, 12, 15, 13, 4, 6, 5, 7, 0, 2, 1, 3, 6, 4, 7, 5, 2, 0, 3, 1, 12, 14, 13, 15, 8, 10, 9, 11, 14, 12, 15, 13, 10, 8, 11, 9]
1:[16, 18, 17, 19, 20, 22, 21, 23, 18, 16, 19, 17, 22, 20, 23, 21, 24, 26, 25, 27, 28, 30, 29, 31, 26, 24, 27, 25, 30, 28, 31, 29, 20, 22, 21, 23, 16, 18, 17, 19, 22, 20, 23, 21, 18, 16, 19, 17, 28, 30, 29, 31, 24, 26, 25, 27, 30, 28, 31, 29, 26, 24, 27, 25]
2:[8, 10, 9, 11, 12, 14, 13, 15, 10, 8, 11, 9, 14, 12, 15, 13, 0, 2, 1, 3, 4, 6, 5, 7, 2, 0, 3, 1, 6, 4, 7, 5, 12, 14, 13, 15, 8, 10, 9, 11, 14, 12, 15, 13, 10, 8, 11, 9, 4, 6, 5, 7, 0, 2, 1, 3, 6, 4, 7, 5, 2, 0, 3, 1]
3:[24, 26, 25, 27, 28, 30, 29, 31, 26, 24, 27, 25, 30, 28, 31, 29, 16, 18, 17, 19, 20, 22, 21, 23, 18, 16, 19, 17, 22, 20, 23, 21, 28, 30, 29, 31, 24, 26, 25, 27, 30, 28, 31, 29, 26, 24, 27, 25, 20, 22, 21, 23, 16, 18, 17, 19, 22, 20, 23, 21, 18, 16, 19, 17]
4:[32, 34, 33, 35, 36, 38, 37, 39, 34, 32, 35, 33, 38, 36, 39, 37, 40, 42, 41, 43, 44, 46, 45, 47, 42, 40, 43, 41, 46, 44, 47, 45, 36, 38, 37, 39, 32, 34, 33, 35, 38, 36, 39, 37, 34, 32, 35, 33, 44, 46, 45, 47, 40, 42, 41, 43, 46, 44, 47, 45, 42, 40, 43, 41]
5:[48, 50, 49, 51, 52, 54, 53, 55, 50, 48, 51, 49, 54, 52, 55, 53, 56, 58, 57, 59, 60, 62, 61, 63, 58, 56, 59, 57, 62, 60, 63, 61, 52, 54, 53, 55, 48, 50, 49, 51, 54, 52, 55, 53, 50, 48, 51, 49, 60, 62, 61, 63, 56, 58, 57, 59, 62, 60, 63, 61, 58, 56, 59, 57]
6:[40, 42, 41, 43, 44, 46, 45, 47, 42, 40, 43, 41, 46, 44, 47, 45, 32, 34, 33, 35, 36, 38, 37, 39, 34, 32, 35, 33, 38, 36, 39, 37, 44, 46, 45, 47, 40, 42, 41, 43, 46, 44, 47, 45, 42, 40, 43, 41, 36, 38, 37, 39, 32, 34, 33, 35, 38, 36, 39, 37, 34, 32, 35, 33]
7:[56, 58, 57, 59, 60, 62, 61, 63, 58, 56, 59, 57, 62, 60, 63, 61, 48, 50, 49, 51, 52, 54, 53, 55, 50, 48, 51, 49, 54, 52, 55, 53, 60, 62, 61, 63, 56, 58, 57, 59, 62, 60, 63, 61, 58, 56, 59, 57, 52, 54, 53, 55, 48, 50, 49, 51, 54, 52, 55, 53, 50, 48, 51, 49]
8:[16, 18, 17, 19, 20, 22, 21, 23, 18, 16, 19, 17, 22, 20, 23, 21, 24, 26, 25, 27, 28, 30, 29, 31, 26, 24, 27, 25, 30, 28, 31, 29, 20, 22, 21, 23, 16, 18, 17, 19, 22, 20, 23, 21, 18, 16, 19, 17, 28, 30, 29, 31, 24, 26, 25, 27, 30, 28, 31, 29, 26, 24, 27, 25]
9:[0, 2, 1, 3, 4, 6, 5, 7, 2, 0, 3, 1, 6, 4, 7, 5, 8, 10, 9, 11, 12, 14, 13, 15, 10, 8, 11, 9, 14, 12, 15, 13, 4, 6, 5, 7, 0, 2, 1, 3, 6, 4, 7, 5, 2, 0, 3, 1, 12, 14, 13, 15, 8, 10, 9, 11, 14, 12, 15, 13, 10, 8, 11, 9]
10:[24, 26, 25, 27, 28, 30, 29, 31, 26, 24, 27, 25, 30, 28, 31, 29, 16, 18, 17, 19, 20, 22, 21, 23, 18, 16, 19, 17, 22, 20, 23, 21, 28, 30, 29, 31, 24, 26, 25, 27, 30, 28, 31, 29, 26, 24, 27, 25, 20, 22, 21, 23, 16, 18, 17, 19, 22, 20, 23, 21, 18, 16, 19, 17]
11:[8, 10, 9, 11, 12, 14, 13, 15, 10, 8, 11, 9, 14, 12, 15, 13, 0, 2, 1, 3, 4, 6, 5, 7, 2, 0, 3, 1, 6, 4, 7, 5, 12, 14, 13, 15, 8, 10, 9, 11, 14, 12, 15, 13, 10, 8, 11, 9, 4, 6, 5, 7, 0, 2, 1, 3, 6, 4, 7, 5, 2, 0, 3, 1]
12:[48, 50, 49, 51, 52, 54, 53, 55, 50, 48, 51, 49, 54, 52, 55, 53, 56, 58, 57, 59, 60, 62, 61, 63, 58, 56, 59, 57, 62, 60, 63, 61, 52, 54, 53, 55, 48, 50, 49, 51, 54, 52, 55, 53, 50, 48, 51, 49, 60, 62, 61, 63, 56, 58, 57, 59, 62, 60, 63, 61, 58, 56, 59, 57]
13:[32, 34, 33, 35, 36, 38, 37, 39, 34, 32, 35, 33, 38, 36, 39, 37, 40, 42, 41, 43, 44, 46, 45, 47, 42, 40, 43, 41, 46, 44, 47, 45, 36, 38, 37, 39, 32, 34, 33, 35, 38, 36, 39, 37, 34, 32, 35, 33, 44, 46, 45, 47, 40, 42, 41, 43, 46, 44, 47, 45, 42, 40, 43, 41]
14:[56, 58, 57, 59, 60, 62, 61, 63, 58, 56, 59, 57, 62, 60, 63, 61, 48, 50, 49, 51, 52, 54, 53, 55, 50, 48, 51, 49, 54, 52, 55, 53, 60, 62, 61, 63, 56, 58, 57, 59, 62, 60, 63, 61, 58, 56, 59, 57, 52, 54, 53, 55, 48, 50, 49, 51, 54, 52, 55, 53, 50, 48, 51, 49]
15:[40, 42, 41, 43, 44, 46, 45, 47, 42, 40, 43, 41, 46, 44, 47, 45, 32, 34, 33, 35, 36, 38, 37, 39, 34, 32, 35, 33, 38, 36, 39, 37, 44, 46, 45, 47, 40, 42, 41, 43, 46, 44, 47, 45, 42, 40, 43, 41, 36, 38, 37, 39, 32, 34, 33, 35, 38, 36, 39, 37, 34, 32, 35, 33]
16:[1, 3, 0, 2, 5, 7, 4, 6, 3, 1, 2, 0, 7, 5, 6, 4, 9, 11, 8, 10, 13, 15, 12, 14, 11, 9, 10, 8, 15, 13, 14, 12, 5, 7, 4, 6, 1, 3, 0, 2, 7, 5, 6, 4, 3, 1, 2, 0, 13, 15, 12, 14, 9, 11, 8, 10, 15, 13, 14, 12, 11, 9, 10, 8]
17:[17, 19, 16, 18, 21, 23, 20, 22, 19, 17, 18, 16, 23, 21, 22, 20, 25, 27, 24, 26, 29, 31, 28, 30, 27, 25, 26, 24, 31, 29, 30, 28, 21, 23, 20, 22, 17, 19, 16, 18, 23, 21, 22, 20, 19, 17, 18, 16, 29, 31, 28, 30, 25, 27, 24, 26, 31, 29, 30, 28, 27, 25, 26, 24]
18:[9, 11, 8, 10, 13, 15, 12, 14, 11, 9, 10, 8, 15, 13, 14, 12, 1, 3, 0, 2, 5, 7, 4, 6, 3, 1, 2, 0, 7, 5, 6, 4, 13, 15, 12, 14, 9, 11, 8, 10, 15, 13, 14, 12, 11, 9, 10, 8, 5, 7, 4, 6, 1, 3, 0, 2, 7, 5, 6, 4, 3, 1, 2, 0]
19:[25, 27, 24, 26, 29, 31, 28, 30, 27, 25, 26, 24, 31, 29, 30, 28, 17, 19, 16, 18, 21, 23, 20, 22, 19, 17, 18, 16, 23, 21, 22, 20, 29, 31, 28, 30, 25, 27, 24, 26, 31, 29, 30, 28, 27, 25, 26, 24, 21, 23, 20, 22, 17, 19, 16, 18, 23, 21, 22, 20, 19, 17, 18, 16]
20:[33, 35, 32, 34, 37, 39, 36, 38, 35, 33, 34, 32, 39, 37, 38, 36, 41, 43, 40, 42, 45, 47, 44, 46, 43, 41, 42, 40, 47, 45, 46, 44, 37, 39, 36, 38, 33, 35, 32, 34, 39, 37, 38, 36, 35, 33, 34, 32, 45, 47, 44, 46, 41, 43, 40, 42, 47, 45, 46, 44, 43, 41, 42, 40]
21:[49, 51, 48, 50, 53, 55, 52, 54, 51, 49, 50, 48, 55, 53, 54, 52, 57, 59, 56, 58, 61, 63, 60, 62, 59, 57, 58, 56, 63, 61, 62, 60, 53, 55, 52, 54, 49, 51, 48, 50, 55, 53, 54, 52, 51, 49, 50, 48, 61, 63, 60, 62, 57, 59, 56, 58, 63, 61, 62, 60, 59, 57, 58, 56]
22:[41, 43, 40, 42, 45, 47, 44, 46, 43, 41, 42, 40, 47, 45, 46, 44, 33, 35, 32, 34, 37, 39, 36, 38, 35, 33, 34, 32, 39, 37, 38, 36, 45, 47, 44, 46, 41, 43, 40, 42, 47, 45, 46, 44, 43, 41, 42, 40, 37, 39, 36, 38, 33, 35, 32, 34, 39, 37, 38, 36, 35, 33, 34, 32]
23:[57, 59, 56, 58, 61, 63, 60, 62, 59, 57, 58, 56, 63, 61, 62, 60, 49, 51, 48, 50, 53, 55, 52, 54, 51, 49, 50, 48, 55, 53, 54, 52, 61, 63, 60, 62, 57, 59, 56, 58, 63, 61, 62, 60, 59, 57, 58, 56, 53, 55, 52, 54, 49, 51, 48, 50, 55, 53, 54, 52, 51, 49, 50, 48]
24:[17, 19, 16, 18, 21, 23, 20, 22, 19, 17, 18, 16, 23, 21, 22, 20, 25, 27, 24, 26, 29, 31, 28, 30, 27, 25, 26, 24, 31, 29, 30, 28, 21, 23, 20, 22, 17, 19, 16, 18, 23, 21, 22, 20, 19, 17, 18, 16, 29, 31, 28, 30, 25, 27, 24, 26, 31, 29, 30, 28, 27, 25, 26, 24]
25:[1, 3, 0, 2, 5, 7, 4, 6, 3, 1, 2, 0, 7, 5, 6, 4, 9, 11, 8, 10, 13, 15, 12, 14, 11, 9, 10, 8, 15, 13, 14, 12, 5, 7, 4, 6, 1, 3, 0, 2, 7, 5, 6, 4, 3, 1, 2, 0, 13, 15, 12, 14, 9, 11, 8, 10, 15, 13, 14, 12, 11, 9, 10, 8]
26:[25, 27, 24, 26, 29, 31, 28, 30, 27, 25, 26, 24, 31, 29, 30, 28, 17, 19, 16, 18, 21, 23, 20, 22, 19, 17, 18, 16, 23, 21, 22, 20, 29, 31, 28, 30, 25, 27, 24, 26, 31, 29, 30, 28, 27, 25, 26, 24, 21, 23, 20, 22, 17, 19, 16, 18, 23, 21, 22, 20, 19, 17, 18, 16]
27:[9, 11, 8, 10, 13, 15, 12, 14, 11, 9, 10, 8, 15, 13, 14, 12, 1, 3, 0, 2, 5, 7, 4, 6, 3, 1, 2, 0, 7, 5, 6, 4, 13, 15, 12, 14, 9, 11, 8, 10, 15, 13, 14, 12, 11, 9, 10, 8, 5, 7, 4, 6, 1, 3, 0, 2, 7, 5, 6, 4, 3, 1, 2, 0]
28:[49, 51, 48, 50, 53, 55, 52, 54, 51, 49, 50, 48, 55, 53, 54, 52, 57, 59, 56, 58, 61, 63, 60, 62, 59, 57, 58, 56, 63, 61, 62, 60, 53, 55, 52, 54, 49, 51, 48, 50, 55, 53, 54, 52, 51, 49, 50, 48, 61, 63, 60, 62, 57, 59, 56, 58, 63, 61, 62, 60, 59, 57, 58, 56]
29:[33, 35, 32, 34, 37, 39, 36, 38, 35, 33, 34, 32, 39, 37, 38, 36, 41, 43, 40, 42, 45, 47, 44, 46, 43, 41, 42, 40, 47, 45, 46, 44, 37, 39, 36, 38, 33, 35, 32, 34, 39, 37, 38, 36, 35, 33, 34, 32, 45, 47, 44, 46, 41, 43, 40, 42, 47, 45, 46, 44, 43, 41, 42, 40]
30:[57, 59, 56, 58, 61, 63, 60, 62, 59, 57, 58, 56, 63, 61, 62, 60, 49, 51, 48, 50, 53, 55, 52, 54, 51, 49, 50, 48, 55, 53, 54, 52, 61, 63, 60, 62, 57, 59, 56, 58, 63, 61, 62, 60, 59, 57, 58, 56, 53, 55, 52, 54, 49, 51, 48, 50, 55, 53, 54, 52, 51, 49, 50, 48]
31:[41, 43, 40, 42, 45, 47, 44, 46, 43, 41, 42, 40, 47, 45, 46, 44, 33, 35, 32, 34, 37, 39, 36, 38, 35, 33, 34, 32, 39, 37, 38, 36, 45, 47, 44, 46, 41, 43, 40, 42, 47, 45, 46, 44, 43, 41, 42, 40, 37, 39, 36, 38, 33, 35, 32, 34, 39, 37, 38, 36, 35, 33, 34, 32]
32:[32, 34, 33, 35, 36, 38, 37, 39, 34, 32, 35, 33, 38, 36, 39, 37, 40, 42, 41, 43, 44, 46, 45, 47, 42, 40, 43, 41, 46, 44, 47, 45, 36, 38, 37, 39, 32, 34, 33, 35, 38, 36, 39, 37, 34, 32, 35, 33, 44, 46, 45, 47, 40, 42, 41, 43, 46, 44, 47, 45, 42, 40, 43, 41]
33:[48, 50, 49, 51, 52, 54, 53, 55, 50, 48, 51, 49, 54, 52, 55, 53, 56, 58, 57, 59, 60, 62, 61, 63, 58, 56, 59, 57, 62, 60, 63, 61, 52, 54, 53, 55, 48, 50, 49, 51, 54, 52, 55, 53, 50, 48, 51, 49, 60, 62, 61, 63, 56, 58, 57, 59, 62, 60, 63, 61, 58, 56, 59, 57]
34:[40, 42, 41, 43, 44, 46, 45, 47, 42, 40, 43, 41, 46, 44, 47, 45, 32, 34, 33, 35, 36, 38, 37, 39, 34, 32, 35, 33, 38, 36, 39, 37, 44, 46, 45, 47, 40, 42, 41, 43, 46, 44, 47, 45, 42, 40, 43, 41, 36, 38, 37, 39, 32, 34, 33, 35, 38, 36, 39, 37, 34, 32, 35, 33]
35:[56, 58, 57, 59, 60, 62, 61, 63, 58, 56, 59, 57, 62, 60, 63, 61, 48, 50, 49, 51, 52, 54, 53, 55, 50, 48, 51, 49, 54, 52, 55, 53, 60, 62, 61, 63, 56, 58, 57, 59, 62, 60, 63, 61, 58, 56, 59, 57, 52, 54, 53, 55, 48, 50, 49, 51, 54, 52, 55, 53, 50, 48, 51, 49]
36:[0, 2, 1, 3, 4, 6, 5, 7, 2, 0, 3, 1, 6, 4, 7, 5, 8, 10, 9, 11, 12, 14, 13, 15, 10, 8, 11, 9, 14, 12, 15, 13, 4, 6, 5, 7, 0, 2, 1, 3, 6, 4, 7, 5, 2, 0, 3, 1, 12, 14, 13, 15, 8, 10, 9, 11, 14, 12, 15, 13, 10, 8, 11, 9]
37:[16, 18, 17, 19, 20, 22, 21, 23, 18, 16, 19, 17, 22, 20, 23, 21, 24, 26, 25, 27, 28, 30, 29, 31, 26, 24, 27, 25, 30, 28, 31, 29, 20, 22, 21, 23, 16, 18, 17, 19, 22, 20, 23, 21, 18, 16, 19, 17, 28, 30, 29, 31, 24, 26, 25, 27, 30, 28, 31, 29, 26, 24, 27, 25]
38:[8, 10, 9, 11, 12, 14, 13, 15, 10, 8, 11, 9, 14, 12, 15, 13, 0, 2, 1, 3, 4, 6, 5, 7, 2, 0, 3, 1, 6, 4, 7, 5, 12, 14, 13, 15, 8, 10, 9, 11, 14, 12, 15, 13, 10, 8, 11, 9, 4, 6, 5, 7, 0, 2, 1, 3, 6, 4, 7, 5, 2, 0, 3, 1]
39:[24, 26, 25, 27, 28, 30, 29, 31, 26, 24, 27, 25, 30, 28, 31, 29, 16, 18, 17, 19, 20, 22, 21, 23, 18, 16, 19, 17, 22, 20, 23, 21, 28, 30, 29, 31, 24, 26, 25, 27, 30, 28, 31, 29, 26, 24, 27, 25, 20, 22, 21, 23, 16, 18, 17, 19, 22, 20, 23, 21, 18, 16, 19, 17]
40:[48, 50, 49, 51, 52, 54, 53, 55, 50, 48, 51, 49, 54, 52, 55, 53, 56, 58, 57, 59, 60, 62, 61, 63, 58, 56, 59, 57, 62, 60, 63, 61, 52, 54, 53, 55, 48, 50, 49, 51, 54, 52, 55, 53, 50, 48, 51, 49, 60, 62, 61, 63, 56, 58, 57, 59, 62, 60, 63, 61, 58, 56, 59, 57]
41:[32, 34, 33, 35, 36, 38, 37, 39, 34, 32, 35, 33, 38, 36, 39, 37, 40, 42, 41, 43, 44, 46, 45, 47, 42, 40, 43, 41, 46, 44, 47, 45, 36, 38, 37, 39, 32, 34, 33, 35, 38, 36, 39, 37, 34, 32, 35, 33, 44, 46, 45, 47, 40, 42, 41, 43, 46, 44, 47, 45, 42, 40, 43, 41]
42:[56, 58, 57, 59, 60, 62, 61, 63, 58, 56, 59, 57, 62, 60, 63, 61, 48, 50, 49, 51, 52, 54, 53, 55, 50, 48, 51, 49, 54, 52, 55, 53, 60, 62, 61, 63, 56, 58, 57, 59, 62, 60, 63, 61, 58, 56, 59, 57, 52, 54, 53, 55, 48, 50, 49, 51, 54, 52, 55, 53, 50, 48, 51, 49]
43:[40, 42, 41, 43, 44, 46, 45, 47, 42, 40, 43, 41, 46, 44, 47, 45, 32, 34, 33, 35, 36, 38, 37, 39, 34, 32, 35, 33, 38, 36, 39, 37, 44, 46, 45, 47, 40, 42, 41, 43, 46, 44, 47, 45, 42, 40, 43, 41, 36, 38, 37, 39, 32, 34, 33, 35, 38, 36, 39, 37, 34, 32, 35, 33]
44:[16, 18, 17, 19, 20, 22, 21, 23, 18, 16, 19, 17, 22, 20, 23, 21, 24, 26, 25, 27, 28, 30, 29, 31, 26, 24, 27, 25, 30, 28, 31, 29, 20, 22, 21, 23, 16, 18, 17, 19, 22, 20, 23, 21, 18, 16, 19, 17, 28, 30, 29, 31, 24, 26, 25, 27, 30, 28, 31, 29, 26, 24, 27, 25]
45:[0, 2, 1, 3, 4, 6, 5, 7, 2, 0, 3, 1, 6, 4, 7, 5, 8, 10, 9, 11, 12, 14, 13, 15, 10, 8, 11, 9, 14, 12, 15, 13, 4, 6, 5, 7, 0, 2, 1, 3, 6, 4, 7, 5, 2, 0, 3, 1, 12, 14, 13, 15, 8, 10, 9, 11, 14, 12, 15, 13, 10, 8, 11, 9]
46:[24, 26, 25, 27, 28, 30, 29, 31, 26, 24, 27, 25, 30, 28, 31, 29, 16, 18, 17, 19, 20, 22, 21, 23, 18, 16, 19, 17, 22, 20, 23, 21, 28, 30, 29, 31, 24, 26, 25, 27, 30, 28, 31, 29, 26, 24, 27, 25, 20, 22, 21, 23, 16, 18, 17, 19, 22, 20, 23, 21, 18, 16, 19, 17]
47:[8, 10, 9, 11, 12, 14, 13, 15, 10, 8, 11, 9, 14, 12, 15, 13, 0, 2, 1, 3, 4, 6, 5, 7, 2, 0, 3, 1, 6, 4, 7, 5, 12, 14, 13, 15, 8, 10, 9, 11, 14, 12, 15, 13, 10, 8, 11, 9, 4, 6, 5, 7, 0, 2, 1, 3, 6, 4, 7, 5, 2, 0, 3, 1]
48:[33, 35, 32, 34, 37, 39, 36, 38, 35, 33, 34, 32, 39, 37, 38, 36, 41, 43, 40, 42, 45, 47, 44, 46, 43, 41, 42, 40, 47, 45, 46, 44, 37, 39, 36, 38, 33, 35, 32, 34, 39, 37, 38, 36, 35, 33, 34, 32, 45, 47, 44, 46, 41, 43, 40, 42, 47, 45, 46, 44, 43, 41, 42, 40]
49:[49, 51, 48, 50, 53, 55, 52, 54, 51, 49, 50, 48, 55, 53, 54, 52, 57, 59, 56, 58, 61, 63, 60, 62, 59, 57, 58, 56, 63, 61, 62, 60, 53, 55, 52, 54, 49, 51, 48, 50, 55, 53, 54, 52, 51, 49, 50, 48, 61, 63, 60, 62, 57, 59, 56, 58, 63, 61, 62, 60, 59, 57, 58, 56]
50:[41, 43, 40, 42, 45, 47, 44, 46, 43, 41, 42, 40, 47, 45, 46, 44, 33, 35, 32, 34, 37, 39, 36, 38, 35, 33, 34, 32, 39, 37, 38, 36, 45, 47, 44, 46, 41, 43, 40, 42, 47, 45, 46, 44, 43, 41, 42, 40, 37, 39, 36, 38, 33, 35, 32, 34, 39, 37, 38, 36, 35, 33, 34, 32]
51:[57, 59, 56, 58, 61, 63, 60, 62, 59, 57, 58, 56, 63, 61, 62, 60, 49, 51, 48, 50, 53, 55, 52, 54, 51, 49, 50, 48, 55, 53, 54, 52, 61, 63, 60, 62, 57, 59, 56, 58, 63, 61, 62, 60, 59, 57, 58, 56, 53, 55, 52, 54, 49, 51, 48, 50, 55, 53, 54, 52, 51, 49, 50, 48]
52:[1, 3, 0, 2, 5, 7, 4, 6, 3, 1, 2, 0, 7, 5, 6, 4, 9, 11, 8, 10, 13, 15, 12, 14, 11, 9, 10, 8, 15, 13, 14, 12, 5, 7, 4, 6, 1, 3, 0, 2, 7, 5, 6, 4, 3, 1, 2, 0, 13, 15, 12, 14, 9, 11, 8, 10, 15, 13, 14, 12, 11, 9, 10, 8]
53:[17, 19, 16, 18, 21, 23, 20, 22, 19, 17, 18, 16, 23, 21, 22, 20, 25, 27, 24, 26, 29, 31, 28, 30, 27, 25, 26, 24, 31, 29, 30, 28, 21, 23, 20, 22, 17, 19, 16, 18, 23, 21, 22, 20, 19, 17, 18, 16, 29, 31, 28, 30, 25, 27, 24, 26, 31, 29, 30, 28, 27, 25, 26, 24]
54:[9, 11, 8, 10, 13, 15, 12, 14, 11, 9, 10, 8, 15, 13, 14, 12, 1, 3, 0, 2, 5, 7, 4, 6, 3, 1, 2, 0, 7, 5, 6, 4, 13, 15, 12, 14, 9, 11, 8, 10, 15, 13, 14, 12, 11, 9, 10, 8, 5, 7, 4, 6, 1, 3, 0, 2, 7, 5, 6, 4, 3, 1, 2, 0]
55:[25, 27, 24, 26, 29, 31, 28, 30, 27, 25, 26, 24, 31, 29, 30, 28, 17, 19, 16, 18, 21, 23, 20, 22, 19, 17, 18, 16, 23, 21, 22, 20, 29, 31, 28, 30, 25, 27, 24, 26, 31, 29, 30, 28, 27, 25, 26, 24, 21, 23, 20, 22, 17, 19, 16, 18, 23, 21, 22, 20, 19, 17, 18, 16]
56:[49, 51, 48, 50, 53, 55, 52, 54, 51, 49, 50, 48, 55, 53, 54, 52, 57, 59, 56, 58, 61, 63, 60, 62, 59, 57, 58, 56, 63, 61, 62, 60, 53, 55, 52, 54, 49, 51, 48, 50, 55, 53, 54, 52, 51, 49, 50, 48, 61, 63, 60, 62, 57, 59, 56, 58, 63, 61, 62, 60, 59, 57, 58, 56]
57:[33, 35, 32, 34, 37, 39, 36, 38, 35, 33, 34, 32, 39, 37, 38, 36, 41, 43, 40, 42, 45, 47, 44, 46, 43, 41, 42, 40, 47, 45, 46, 44, 37, 39, 36, 38, 33, 35, 32, 34, 39, 37, 38, 36, 35, 33, 34, 32, 45, 47, 44, 46, 41, 43, 40, 42, 47, 45, 46, 44, 43, 41, 42, 40]
58:[57, 59, 56, 58, 61, 63, 60, 62, 59, 57, 58, 56, 63, 61, 62, 60, 49, 51, 48, 50, 53, 55, 52, 54, 51, 49, 50, 48, 55, 53, 54, 52, 61, 63, 60, 62, 57, 59, 56, 58, 63, 61, 62, 60, 59, 57, 58, 56, 53, 55, 52, 54, 49, 51, 48, 50, 55, 53, 54, 52, 51, 49, 50, 48]
59:[41, 43, 40, 42, 45, 47, 44, 46, 43, 41, 42, 40, 47, 45, 46, 44, 33, 35, 32, 34, 37, 39, 36, 38, 35, 33, 34, 32, 39, 37, 38, 36, 45, 47, 44, 46, 41, 43, 40, 42, 47, 45, 46, 44, 43, 41, 42, 40, 37, 39, 36, 38, 33, 35, 32, 34, 39, 37, 38, 36, 35, 33, 34, 32]
60:[17, 19, 16, 18, 21, 23, 20, 22, 19, 17, 18, 16, 23, 21, 22, 20, 25, 27, 24, 26, 29, 31, 28, 30, 27, 25, 26, 24, 31, 29, 30, 28, 21, 23, 20, 22, 17, 19, 16, 18, 23, 21, 22, 20, 19, 17, 18, 16, 29, 31, 28, 30, 25, 27, 24, 26, 31, 29, 30, 28, 27, 25, 26, 24]
61:[1, 3, 0, 2, 5, 7, 4, 6, 3, 1, 2, 0, 7, 5, 6, 4, 9, 11, 8, 10, 13, 15, 12, 14, 11, 9, 10, 8, 15, 13, 14, 12, 5, 7, 4, 6, 1, 3, 0, 2, 7, 5, 6, 4, 3, 1, 2, 0, 13, 15, 12, 14, 9, 11, 8, 10, 15, 13, 14, 12, 11, 9, 10, 8]
62:[25, 27, 24, 26, 29, 31, 28, 30, 27, 25, 26, 24, 31, 29, 30, 28, 17, 19, 16, 18, 21, 23, 20, 22, 19, 17, 18, 16, 23, 21, 22, 20, 29, 31, 28, 30, 25, 27, 24, 26, 31, 29, 30, 28, 27, 25, 26, 24, 21, 23, 20, 22, 17, 19, 16, 18, 23, 21, 22, 20, 19, 17, 18, 16]
63:[9, 11, 8, 10, 13, 15, 12, 14, 11, 9, 10, 8, 15, 13, 14, 12, 1, 3, 0, 2, 5, 7, 4, 6, 3, 1, 2, 0, 7, 5, 6, 4, 13, 15, 12, 14, 9, 11, 8, 10, 15, 13, 14, 12, 11, 9, 10, 8, 5, 7, 4, 6, 1, 3, 0, 2, 7, 5, 6, 4, 3, 1, 2, 0]

from script.杂交 import *
]]]'''#'''
__all__ = r'''
魖杂交
    乸杂交牜爻位洗牌
    魖杂交牜循环偏移等效
        魖杂交牜初始化
            乸杂交牜模乘法
杂交制表扌
    杂交制表牜爻位洗牌扌
    杂交制表牜模乘法扌
        迭代杂交制表牜模乘法扌
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
#.from itertools import islice
from seed.tiny_.check import check_type_is, check_int_ge, check_uint_lt

from seed.abc.abc__ver1 import abstractmethod, override, ABC
#.from seed.helper.repr_input import repr_helper
from seed.tiny_._Base4repr import _Base4repr
        #sf._reset4repr(may_args4repr, may_kwds4repr)
        #sf._init4repr(*args4repr, **kwds4repr)
___end_mark_of_excluded_global_names__0___ = ...

#.class __(ABC):
#.    __slots__ = ()
#.    ___no_slots_ok___ = True
#.    def __repr__(sf, /):
#.        return repr_helper(sf, *args, **kwargs)
#.if __name__ == "__main__":
#.    raise NotImplementedError


class 魖杂交(ABC):
    __slots__ = ()
    @property
    @abstractmethod
    def modulus(sf, /):
        '-> int{>=2}'
    @abstractmethod
    def __call__(sf, a, b, /):
        'uint%modulus -> uint%modulus -> uint%modulus'

    def 杂交制表扌(sf, /):
        M = sf.modulus
        tbl = [[sf(a, b) for b in range(M)] for a in range(M)]
        return tbl

class 魖杂交牜循环偏移等效(魖杂交):
    __slots__ = ()
    @abstractmethod
    def _wcall_(sf, d, /):
        'uint%modulus -> uint%modulus'
    @override
    def __call__(sf, a, b, /):
        'uint%modulus -> uint%modulus -> uint%modulus'
        M = sf.modulus
        check_uint_lt(M, a)
        check_uint_lt(M, b)
        d = (b-a) %M
        e = sf._wcall_(d)
        check_uint_lt(M, e)
        c = (e+a) %M
        #check_uint_lt(M, c)
        return c


class 乸杂交牜爻位洗牌(魖杂交):
    __slots__ = ()
    @property
    @override
    def modulus(sf, /):
        '-> int{>=2}'
        return 64
    @override
    def __call__(sf, a, b, /):
        'uint%modulus -> uint%modulus -> uint%modulus'
        M = sf.modulus
        check_uint_lt(M, a)
        check_uint_lt(M, b)
        a0, a1 = _split_bin_mod64(a)
        b0, b1 = _split_bin_mod64(b)
        c0 = a0+b0
        c1 = a1+b1
        _c1 = _rotate(1, c1)
        c = int(c0, 2)^int(_c1, 2)
        check_uint_lt(M, c)
        return c
def _rotate(sz, s, /):
    check_uint_lt(len(s), sz)
    s0 = s[:sz]
    s1 = s[sz:]
    s = s1+s0
    return s
def _split_bin_mod64(u, /):
    check_uint_lt(64, u)
    s = f'{u:0>6b}'
    assert len(s) == 6
    #if len(s)&1: s = '0'+s
    s0 = s[0::2]
    s1 = s[1::2]
    assert len(s0) == len(s1)
    return s0, s1
class 魖杂交牜初始化(魖杂交牜循环偏移等效, _Base4repr):
    ___no_slots_ok___ = True
    def __init__(sf, modulus, /, *args):
        check_int_ge(2, modulus)
        sf._M = modulus
        sf._init4repr(modulus, *args)

    @property
    @override
    def modulus(sf, /):
        '-> int{>=2}'
        return sf._M
    @override
    def _wcall_(sf, d, /):
        'uint%modulus -> uint%modulus'
class 乸杂交牜模乘法(魖杂交牜初始化):
    def __init__(sf, modulus, scale, offset, /):
        check_type_is(int, scale)
        check_type_is(int, offset)
        super().__init__(modulus, scale, offset)
        scale = scale%modulus
        offset = offset%modulus
        sf._k1 = scale
        sf._k0 = offset
    @override
    def _wcall_(sf, d, /):
        'uint%modulus -> uint%modulus'
        scale = sf._k1
        offset = sf._k0
        M = sf.modulus
        e = (d*scale+offset)%M
        return e

def 杂交制表扌(nm, /, *args):
    cls = globals()[nm]
    sf = cls(*args)
    tbl = sf.杂交制表扌()
    return tbl
def 杂交制表牜爻位洗牌扌():
    return 杂交制表扌('乸杂交牜爻位洗牌')
def 杂交制表牜模乘法扌(modulus, scale, offset, /):
    return 杂交制表扌('乸杂交牜模乘法', modulus, scale, offset)
    sf = 乸杂交牜模乘法(modulus, scale, offset)
    tbl = sf.杂交制表扌()
    return tbl
def 迭代杂交制表牜模乘法扌(modulus, may_scales=None, offset=0, /):
    scales = range(modulus) if may_scales is None else may_scales
    for scale in scales:
        tbl = 杂交制表牜模乘法扌(modulus, scale, offset)
        yield (modulus, scale, tbl)

__all__
from script.杂交 import *
