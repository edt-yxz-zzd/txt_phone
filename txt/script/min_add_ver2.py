r'''[[[({
e script/min_add_ver2.py
最小加法链


最短扩张
已更新:view others/数学/最小加法链.txt
推导定理:goto

py script/min_add_ver2.py ,iter_shortest_add_chains > script/min_add_ver2.py.4.out.txt
    运行直至宕机软重启
view script/min_add_ver2.py.4.out.txt
    共315行

每行格式:
  (num_adds, final_sum, total_shortest_add_chains, shortest_add_chains)
  (uint, pint, pint, sorted[sorted[pint]])
[[输出4元组:
view script/min_add_ver2.py.4.out.txt
du -hs script/min_add_ver2.py.4.out.txt
    2.4MB
首行1行:(0, 1, 1, [(1,)])
末行315行:(10, 528, 10, [(1, 2, 4, 8, 16, 17, 33, 66, 132, 264, 528), (1, 2, 4, 8, 16, 32, 33, 66, 132, 264, 528), (1, 2, 4, 8, 16, 32, 34, 66, 132, 264, 528), (1, 2, 4, 8, 16, 32, 64, 66, 132, 264, 528), (1, 2, 4, 8, 16, 32, 64, 68, 132, 264, 528), (1, 2, 4, 8, 16, 32, 64, 128, 132, 264, 528), (1, 2, 4, 8, 16, 32, 64, 128, 136, 264, 528), (1, 2, 4, 8, 16, 32, 64, 128, 256, 264, 528), (1, 2, 4, 8, 16, 32, 64, 128, 256, 272, 528), (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 528)])
共315行

前315行过滤:[total_shortest_add_chains>=1000]降序排列
#行数从1开始
188行:(10, 142, 3903, ...)
185行:(10, 127, 2661, ...)
193行:(10, 158, 1906, ...)
187行:(10, 141, 1786, ...)
199行:(10, 174, 1686, ...)
205行:(10, 182, 1289, ...)
107行:(9, 71, 1258, ...)
    唯一一个[num_adds < 10][total_shortest_add_chains>=1000]
202行:(10, 178, 1210, ...)
210行:(10, 188, 1153, ...)

231行:(10, 220, 1096, ...)
222行:(10, 210, 1075, ...)
196行:(10, 169, 1034, ...)
237行:(10, 228, 1012, ...)
208行:(10, 186, 1011, ...)


前21行:所有[num_adds <= 5]
1:(0, 1, 1, [(1,)])
(1, 2, 1, [(1, 2)])
(2, 3, 1, [(1, 2, 3)])
(2, 4, 1, [(1, 2, 4)])
(3, 5, 2, [(1, 2, 3, 5), (1, 2, 4, 5)])
(3, 6, 2, [(1, 2, 3, 6), (1, 2, 4, 6)])
(3, 8, 1, [(1, 2, 4, 8)])
(4, 7, 5, [(1, 2, 3, 4, 7), (1, 2, 3, 5, 7), (1, 2, 3, 6, 7), (1, 2, 4, 5, 7), (1, 2, 4, 6, 7)])
(4, 9, 3, [(1, 2, 3, 6, 9), (1, 2, 4, 5, 9), (1, 2, 4, 8, 9)])
(4, 10, 4, [(1, 2, 3, 5, 10), (1, 2, 4, 5, 10), (1, 2, 4, 6, 10), (1, 2, 4, 8, 10)])
(4, 12, 3, [(1, 2, 3, 6, 12), (1, 2, 4, 6, 12), (1, 2, 4, 8, 12)])
(4, 16, 1, [(1, 2, 4, 8, 16)])
(5, 11, 15, [(1, 2, 3, 4, 7, 11), (1, 2, 3, 4, 8, 11), (1, 2, 3, 5, 6, 11), (1, 2, 3, 5, 8, 11), (1, 2, 3, 5, 10, 11), (1, 2, 3, 6, 8, 11), (1, 2, 3, 6, 9, 11), (1, 2, 4, 5, 6, 11), (1, 2, 4, 5, 7, 11), (1, 2, 4, 5, 9, 11), (1, 2, 4, 5, 10, 11), (1, 2, 4, 6, 7, 11), (1, 2, 4, 6, 10, 11), (1, 2, 4, 8, 9, 11), (1, 2, 4, 8, 10, 11)])
(5, 13, 10, [(1, 2, 3, 5, 8, 13), (1, 2, 3, 5, 10, 13), (1, 2, 3, 6, 7, 13), (1, 2, 3, 6, 12, 13), (1, 2, 4, 5, 8, 13), (1, 2, 4, 5, 9, 13), (1, 2, 4, 6, 7, 13), (1, 2, 4, 6, 12, 13), (1, 2, 4, 8, 9, 13), (1, 2, 4, 8, 12, 13)])
(5, 14, 14, [(1, 2, 3, 4, 7, 14), (1, 2, 3, 5, 7, 14), (1, 2, 3, 6, 7, 14), (1, 2, 3, 6, 8, 14), (1, 2, 3, 6, 12, 14), (1, 2, 4, 5, 7, 14), (1, 2, 4, 5, 9, 14), (1, 2, 4, 5, 10, 14), (1, 2, 4, 6, 7, 14), (1, 2, 4, 6, 8, 14), (1, 2, 4, 6, 10, 14), (1, 2, 4, 6, 12, 14), (1, 2, 4, 8, 10, 14), (1, 2, 4, 8, 12, 14)])
(5, 15, 4, [(1, 2, 3, 5, 10, 15), (1, 2, 3, 6, 9, 15), (1, 2, 3, 6, 12, 15), (1, 2, 4, 5, 10, 15)])
(5, 17, 2, [(1, 2, 4, 8, 9, 17), (1, 2, 4, 8, 16, 17)])
(5, 18, 7, [(1, 2, 3, 6, 9, 18), (1, 2, 3, 6, 12, 18), (1, 2, 4, 5, 9, 18), (1, 2, 4, 6, 12, 18), (1, 2, 4, 8, 9, 18), (1, 2, 4, 8, 10, 18), (1, 2, 4, 8, 16, 18)])
(5, 20, 6, [(1, 2, 3, 5, 10, 20), (1, 2, 4, 5, 10, 20), (1, 2, 4, 6, 10, 20), (1, 2, 4, 8, 10, 20), (1, 2, 4, 8, 12, 20), (1, 2, 4, 8, 16, 20)])
(5, 24, 4, [(1, 2, 3, 6, 12, 24), (1, 2, 4, 6, 12, 24), (1, 2, 4, 8, 12, 24), (1, 2, 4, 8, 16, 24)])
(5, 32, 1, [(1, 2, 4, 8, 16, 32)])
22:(6, 19, 33, ...)
36:(6, 64, 1, ...)
37:(7, 29, 132, ...)
62:(7, 128, 1, ...)
63:(8, 47, 220, ...)
106:(8, 256, 1, ...)
107:(9, 71, 1258, ...)
184:(9, 512, 1, ...)
185:(10, 127, 2661, ...)
315:(10, 528, 10, ...)


]]


py script/min_add_ver2.py @_read_output_of_iter_shortest_add_chains :script/min_add_ver2.py.4.out.txt
{1: 0, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 8: 3, 7: 4, 9: 4, 10: 4, 12: 4, 16: 4, 11: 5, 13: 5, 14: 5, 15: 5, 17: 5, 18: 5, 20: 5, 24: 5, 32: 5, 19: 6, 21: 6, 22: 6, 23: 6, 25: 6, 26: 6, 27: 6, 28: 6, 30: 6, 33: 6, 34: 6, 36: 6, 40: 6, 48: 6, 64: 6, 29: 7, 31: 7, 35: 7, 37: 7, 38: 7, 39: 7, 41: 7, 42: 7, 43: 7, 44: 7, 45: 7, 46: 7, 49: 7, 50: 7, 51: 7, 52: 7, 54: 7, 56: 7, 60: 7, 65: 7, 66: 7, 68: 7, 72: 7, 80: 7, 96: 7, 128: 7, 47: 8, 53: 8, 55: 8, 57: 8, 58: 8, 59: 8, 61: 8, 62: 8, 63: 8, 67: 8, 69: 8, 70: 8, 73: 8, 74: 8, 75: 8, 76: 8, 77: 8, 78: 8, 81: 8, 82: 8, 83: 8, 84: 8, 85: 8, 86: 8, 88: 8, 90: 8, 92: 8, 97: 8, 98: 8, 99: 8, 100: 8, 102: 8, 104: 8, 108: 8, 112: 8, 120: 8, 129: 8, 130: 8, 132: 8, 136: 8, 144: 8, 160: 8, 192: 8, 256: 8, 71: 9, 79: 9, 87: 9, 89: 9, 91: 9, 93: 9, 94: 9, 95: 9, 101: 9, 103: 9, 105: 9, 106: 9, 107: 9, 109: 9, 110: 9, 111: 9, 113: 9, 114: 9, 115: 9, 116: 9, 117: 9, 118: 9, 119: 9, 121: 9, 122: 9, 123: 9, 124: 9, 125: 9, 126: 9, 131: 9, 133: 9, 134: 9, 135: 9, 137: 9, 138: 9, 140: 9, 145: 9, 146: 9, 147: 9, 148: 9, 149: 9, 150: 9, 152: 9, 153: 9, 154: 9, 156: 9, 161: 9, 162: 9, 163: 9, 164: 9, 165: 9, 166: 9, 168: 9, 170: 9, 172: 9, 176: 9, 180: 9, 184: 9, 193: 9, 194: 9, 195: 9, 196: 9, 198: 9, 200: 9, 204: 9, 208: 9, 216: 9, 224: 9, 240: 9, 257: 9, 258: 9, 260: 9, 264: 9, 272: 9, 288: 9, 320: 9, 384: 9, 512: 9, 127: 10, 139: 10, 141: 10, 142: 10, 143: 10, 151: 10, 155: 10, 157: 10, 158: 10, 159: 10, 167: 10, 169: 10, 171: 10, 173: 10, 174: 10, 175: 10, 177: 10, 178: 10, 179: 10, 181: 10, 182: 10, 183: 10, 185: 10, 186: 10, 187: 10, 188: 10, 189: 10, 190: 10, 197: 10, 199: 10, 201: 10, 202: 10, 203: 10, 205: 10, 206: 10, 207: 10, 209: 10, 210: 10, 211: 10, 212: 10, 213: 10, 214: 10, 215: 10, 217: 10, 218: 10, 219: 10, 220: 10, 221: 10, 222: 10, 225: 10, 226: 10, 227: 10, 228: 10, 229: 10, 230: 10, 231: 10, 232: 10, 233: 10, 234: 10, 236: 10, 238: 10, 241: 10, 242: 10, 243: 10, 244: 10, 245: 10, 246: 10, 248: 10, 249: 10, 250: 10, 252: 10, 255: 10, 259: 10, 261: 10, 262: 10, 265: 10, 266: 10, 268: 10, 270: 10, 273: 10, 274: 10, 276: 10, 280: 10, 281: 10, 289: 10, 290: 10, 291: 10, 292: 10, 293: 10, 294: 10, 296: 10, 297: 10, 298: 10, 300: 10, 304: 10, 306: 10, 308: 10, 312: 10, 321: 10, 322: 10, 323: 10, 324: 10, 325: 10, 326: 10, 328: 10, 330: 10, 332: 10, 336: 10, 340: 10, 344: 10, 352: 10, 360: 10, 368: 10, 385: 10, 386: 10, 387: 10, 388: 10, 390: 10, 392: 10, 396: 10, 400: 10, 408: 10, 416: 10, 432: 10, 448: 10, 480: 10, 513: 10, 514: 10, 516: 10, 520: 10, 528: 10}

py script/min_add_ver2.py @_mk_rngs5output_of_iter_shortest_add_chains :script/min_add_ver2.py.4.out.txt
[(1, 191), (192, 223), (224, 235), (236, 237), (238, 239), (240, 247), (248, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)]


py script/min_add_ver2.py ,_iter_one_chain_per_final_sum5output_of_iter_shortest_add_chains :script/min_add_ver2.py.4.out.txt > script/min_add_ver2.py.4.out.1chain.txt
view script/min_add_ver2.py.4.out.1chain.txt

py script/min_add_ver2.py ,_iter_two_chains_per_final_sum5output_of_iter_shortest_add_chains :script/min_add_ver2.py.4.out.txt > script/min_add_ver2.py.4.out.2chain.txt
view script/min_add_ver2.py.4.out.2chain.txt
du -hs script/min_add_ver2.py.4.out.2chain.txt
    32KB
[[
(0, 1, 1, [(1,)])
(1, 2, 1, [(1, 2)])
(2, 3, 1, [(1, 2, 3)])
(2, 4, 1, [(1, 2, 4)])
(3, 5, 2, [(1, 2, 3, 5), (1, 2, 4, 5)])
(3, 6, 2, [(1, 2, 3, 6), (1, 2, 4, 6)])
(3, 8, 1, [(1, 2, 4, 8)])
(4, 7, 5, [(1, 2, 3, 4, 7), ..., (1, 2, 4, 6, 7)])
(4, 9, 3, [(1, 2, 3, 6, 9), ..., (1, 2, 4, 8, 9)])
(4, 10, 4, [(1, 2, 3, 5, 10), ..., (1, 2, 4, 8, 10)])
(4, 12, 3, [(1, 2, 3, 6, 12), ..., (1, 2, 4, 8, 12)])
(4, 16, 1, [(1, 2, 4, 8, 16)])
(5, 11, 15, [(1, 2, 3, 4, 7, 11), ..., (1, 2, 4, 8, 10, 11)])
(5, 13, 10, [(1, 2, 3, 5, 8, 13), ..., (1, 2, 4, 8, 12, 13)])
(5, 14, 14, [(1, 2, 3, 4, 7, 14), ..., (1, 2, 4, 8, 12, 14)])
(5, 15, 4, [(1, 2, 3, 5, 10, 15), ..., (1, 2, 4, 5, 10, 15)])
(5, 17, 2, [(1, 2, 4, 8, 9, 17), (1, 2, 4, 8, 16, 17)])
(5, 18, 7, [(1, 2, 3, 6, 9, 18), ..., (1, 2, 4, 8, 16, 18)])
(5, 20, 6, [(1, 2, 3, 5, 10, 20), ..., (1, 2, 4, 8, 16, 20)])
(5, 24, 4, [(1, 2, 3, 6, 12, 24), ..., (1, 2, 4, 8, 16, 24)])
(5, 32, 1, [(1, 2, 4, 8, 16, 32)])
(6, 19, 33, [(1, 2, 3, 4, 8, 11, 19), ..., (1, 2, 4, 8, 16, 18, 19)])
(6, 21, 29, [(1, 2, 3, 4, 7, 14, 21), ..., (1, 2, 4, 8, 16, 20, 21)])
(6, 22, 40, [(1, 2, 3, 4, 7, 11, 22), ..., (1, 2, 4, 8, 16, 20, 22)])
(6, 23, 4, [(1, 2, 3, 5, 10, 13, 23), ..., (1, 2, 4, 5, 9, 18, 23)])
(6, 25, 14, [(1, 2, 3, 5, 10, 15, 25), ..., (1, 2, 4, 8, 16, 24, 25)])
(6, 26, 24, [(1, 2, 3, 5, 8, 13, 26), ..., (1, 2, 4, 8, 16, 24, 26)])
(6, 27, 5, [(1, 2, 3, 6, 9, 18, 27), ..., (1, 2, 4, 8, 9, 18, 27)])
(6, 28, 23, [(1, 2, 3, 4, 7, 14, 28), ..., (1, 2, 4, 8, 16, 24, 28)])
(6, 30, 12, [(1, 2, 3, 5, 10, 15, 30), ..., (1, 2, 4, 8, 10, 20, 30)])
(6, 33, 2, [(1, 2, 4, 8, 16, 17, 33), (1, 2, 4, 8, 16, 32, 33)])
(6, 34, 4, [(1, 2, 4, 8, 9, 17, 34), ..., (1, 2, 4, 8, 16, 32, 34)])
(6, 36, 12, [(1, 2, 3, 6, 9, 18, 36), ..., (1, 2, 4, 8, 16, 32, 36)])
(6, 40, 8, [(1, 2, 3, 5, 10, 20, 40), ..., (1, 2, 4, 8, 16, 32, 40)])
(6, 48, 5, [(1, 2, 3, 6, 12, 24, 48), ..., (1, 2, 4, 8, 16, 32, 48)])
(6, 64, 1, [(1, 2, 4, 8, 16, 32, 64)])
(7, 29, 132, [(1, 2, 3, 4, 7, 11, 18, 29), ..., (1, 2, 4, 8, 16, 24, 28, 29)])
(7, 31, 77, [(1, 2, 3, 4, 7, 14, 17, 31), ..., (1, 2, 4, 8, 10, 20, 30, 31)])
(7, 35, 43, [(1, 2, 3, 4, 7, 14, 21, 35), ..., (1, 2, 4, 8, 16, 32, 34, 35)])
(7, 37, 39, [(1, 2, 3, 5, 8, 16, 21, 37), ..., (1, 2, 4, 8, 16, 32, 36, 37)])
(7, 38, 92, [(1, 2, 3, 4, 8, 11, 19, 38), ..., (1, 2, 4, 8, 16, 32, 36, 38)])
(7, 39, 20, [(1, 2, 3, 5, 8, 13, 26, 39), ..., (1, 2, 4, 8, 12, 13, 26, 39)])
(7, 41, 23, [(1, 2, 3, 5, 10, 20, 21, 41), ..., (1, 2, 4, 8, 16, 32, 40, 41)])
(7, 42, 84, [(1, 2, 3, 4, 7, 14, 21, 42), ..., (1, 2, 4, 8, 16, 32, 40, 42)])
(7, 43, 4, [(1, 2, 3, 5, 10, 20, 23, 43), ..., (1, 2, 4, 8, 9, 17, 34, 43)])
(7, 44, 69, [(1, 2, 3, 4, 7, 11, 22, 44), ..., (1, 2, 4, 8, 16, 32, 40, 44)])
(7, 45, 14, [(1, 2, 3, 5, 10, 15, 30, 45), ..., (1, 2, 4, 8, 9, 18, 36, 45)])
(7, 46, 8, [(1, 2, 3, 5, 10, 13, 23, 46), ..., (1, 2, 4, 8, 10, 18, 36, 46)])
(7, 49, 12, [(1, 2, 3, 6, 12, 24, 25, 49), ..., (1, 2, 4, 8, 16, 32, 48, 49)])
(7, 50, 36, [(1, 2, 3, 5, 10, 15, 25, 50), ..., (1, 2, 4, 8, 16, 32, 48, 50)])
(7, 51, 4, [(1, 2, 3, 6, 12, 24, 27, 51), ..., (1, 2, 4, 8, 16, 17, 34, 51)])
(7, 52, 38, [(1, 2, 3, 5, 8, 13, 26, 52), ..., (1, 2, 4, 8, 16, 32, 48, 52)])
(7, 54, 16, [(1, 2, 3, 6, 9, 18, 27, 54), ..., (1, 2, 4, 8, 16, 18, 36, 54)])
(7, 56, 32, [(1, 2, 3, 4, 7, 14, 28, 56), ..., (1, 2, 4, 8, 16, 32, 48, 56)])
(7, 60, 24, [(1, 2, 3, 5, 10, 15, 30, 60), ..., (1, 2, 4, 8, 16, 20, 40, 60)])
(7, 65, 2, [(1, 2, 4, 8, 16, 32, 33, 65), (1, 2, 4, 8, 16, 32, 64, 65)])
(7, 66, 4, [(1, 2, 4, 8, 16, 17, 33, 66), ..., (1, 2, 4, 8, 16, 32, 64, 66)])
(7, 68, 6, [(1, 2, 4, 8, 9, 17, 34, 68), ..., (1, 2, 4, 8, 16, 32, 64, 68)])
(7, 72, 18, [(1, 2, 3, 6, 9, 18, 36, 72), ..., (1, 2, 4, 8, 16, 32, 64, 72)])
(7, 80, 10, [(1, 2, 3, 5, 10, 20, 40, 80), ..., (1, 2, 4, 8, 16, 32, 64, 80)])
(7, 96, 6, [(1, 2, 3, 6, 12, 24, 48, 96), ..., (1, 2, 4, 8, 16, 32, 64, 96)])
(7, 128, 1, [(1, 2, 4, 8, 16, 32, 64, 128)])
(8, 47, 220, [(1, 2, 3, 4, 7, 10, 20, 27, 47), ..., (1, 2, 4, 8, 12, 13, 26, 39, 47)])
(8, 53, 205, [(1, 2, 3, 5, 6, 12, 24, 29, 53), ..., (1, 2, 4, 8, 16, 32, 48, 52, 53)])
(8, 55, 156, [(1, 2, 3, 4, 7, 11, 22, 33, 55), ..., (1, 2, 4, 8, 16, 18, 36, 54, 55)])
(8, 57, 173, [(1, 2, 3, 4, 7, 14, 28, 29, 57), ..., (1, 2, 4, 8, 16, 32, 48, 56, 57)])
(8, 58, 352, [(1, 2, 3, 4, 7, 11, 18, 29, 58), ..., (1, 2, 4, 8, 16, 32, 48, 56, 58)])
(8, 59, 37, [(1, 2, 3, 4, 7, 14, 28, 31, 59), ..., (1, 2, 4, 8, 16, 17, 34, 51, 59)])
(8, 61, 91, [(1, 2, 3, 5, 7, 14, 28, 33, 61), ..., (1, 2, 4, 8, 16, 20, 40, 60, 61)])
(8, 62, 233, [(1, 2, 3, 4, 7, 14, 17, 31, 62), ..., (1, 2, 4, 8, 16, 20, 40, 60, 62)])
(8, 63, 87, [(1, 2, 3, 4, 7, 14, 21, 42, 63), ..., (1, 2, 4, 8, 16, 20, 21, 42, 63)])
(8, 67, 23, [(1, 2, 3, 4, 8, 16, 32, 35, 67), ..., (1, 2, 4, 8, 16, 32, 64, 66, 67)])
(8, 69, 29, [(1, 2, 3, 5, 8, 16, 32, 37, 69), ..., (1, 2, 4, 8, 16, 32, 64, 68, 69)])
(8, 70, 134, [(1, 2, 3, 4, 7, 14, 21, 35, 70), ..., (1, 2, 4, 8, 16, 32, 64, 68, 70)])
(8, 73, 49, [(1, 2, 3, 6, 9, 18, 36, 37, 73), ..., (1, 2, 4, 8, 16, 32, 64, 72, 73)])
(8, 74, 104, [(1, 2, 3, 5, 8, 16, 21, 37, 74), ..., (1, 2, 4, 8, 16, 32, 64, 72, 74)])
(8, 75, 32, [(1, 2, 3, 5, 10, 15, 25, 50, 75), ..., (1, 2, 4, 8, 16, 24, 25, 50, 75)])
(8, 76, 161, [(1, 2, 3, 4, 8, 11, 19, 38, 76), ..., (1, 2, 4, 8, 16, 32, 64, 72, 76)])
(8, 77, 4, [(1, 2, 4, 5, 9, 18, 36, 41, 77), ..., (1, 2, 4, 8, 9, 17, 34, 68, 77)])
(8, 78, 68, [(1, 2, 3, 5, 8, 13, 26, 39, 78), ..., (1, 2, 4, 8, 16, 24, 26, 52, 78)])
(8, 81, 36, [(1, 2, 3, 5, 10, 20, 40, 41, 81), ..., (1, 2, 4, 8, 16, 32, 64, 80, 81)])
(8, 82, 54, [(1, 2, 3, 5, 10, 20, 21, 41, 82), ..., (1, 2, 4, 8, 16, 32, 64, 80, 82)])
(8, 83, 4, [(1, 2, 3, 5, 10, 20, 40, 43, 83), ..., (1, 2, 4, 8, 16, 17, 33, 66, 83)])
(8, 84, 161, [(1, 2, 3, 4, 7, 14, 21, 42, 84), ..., (1, 2, 4, 8, 16, 32, 64, 80, 84)])
(8, 85, 8, [(1, 2, 3, 5, 10, 20, 40, 45, 85), ..., (1, 2, 4, 8, 16, 17, 34, 68, 85)])
(8, 86, 8, [(1, 2, 3, 5, 10, 20, 23, 43, 86), ..., (1, 2, 4, 8, 16, 18, 34, 68, 86)])
(8, 88, 98, [(1, 2, 3, 4, 7, 11, 22, 44, 88), ..., (1, 2, 4, 8, 16, 32, 64, 80, 88)])
(8, 90, 48, [(1, 2, 3, 5, 10, 15, 30, 45, 90), ..., (1, 2, 4, 8, 16, 18, 36, 72, 90)])
(8, 92, 12, [(1, 2, 3, 5, 10, 13, 23, 46, 92), ..., (1, 2, 4, 8, 16, 20, 36, 72, 92)])
(8, 97, 14, [(1, 2, 3, 6, 12, 24, 48, 49, 97), ..., (1, 2, 4, 8, 16, 32, 64, 96, 97)])
(8, 98, 28, [(1, 2, 3, 6, 12, 24, 25, 49, 98), ..., (1, 2, 4, 8, 16, 32, 64, 96, 98)])
(8, 99, 4, [(1, 2, 3, 6, 12, 24, 48, 51, 99), ..., (1, 2, 4, 8, 16, 32, 33, 66, 99)])
(8, 100, 62, [(1, 2, 3, 5, 10, 15, 25, 50, 100), ..., (1, 2, 4, 8, 16, 32, 64, 96, 100)])
(8, 102, 12, [(1, 2, 3, 6, 12, 24, 27, 51, 102), ..., (1, 2, 4, 8, 16, 32, 34, 68, 102)])
(8, 104, 52, [(1, 2, 3, 5, 8, 13, 26, 52, 104), ..., (1, 2, 4, 8, 16, 32, 64, 96, 104)])
(8, 108, 34, [(1, 2, 3, 6, 9, 18, 27, 54, 108), ..., (1, 2, 4, 8, 16, 32, 36, 72, 108)])
(8, 112, 41, [(1, 2, 3, 4, 7, 14, 28, 56, 112), ..., (1, 2, 4, 8, 16, 32, 64, 96, 112)])
(8, 120, 40, [(1, 2, 3, 5, 10, 15, 30, 60, 120), ..., (1, 2, 4, 8, 16, 32, 40, 80, 120)])
(8, 129, 2, [(1, 2, 4, 8, 16, 32, 64, 65, 129), (1, 2, 4, 8, 16, 32, 64, 128, 129)])
(8, 130, 4, [(1, 2, 4, 8, 16, 32, 33, 65, 130), ..., (1, 2, 4, 8, 16, 32, 64, 128, 130)])
(8, 132, 6, [(1, 2, 4, 8, 16, 17, 33, 66, 132), ..., (1, 2, 4, 8, 16, 32, 64, 128, 132)])
(8, 136, 8, [(1, 2, 4, 8, 9, 17, 34, 68, 136), ..., (1, 2, 4, 8, 16, 32, 64, 128, 136)])
(8, 144, 25, [(1, 2, 3, 6, 9, 18, 36, 72, 144), ..., (1, 2, 4, 8, 16, 32, 64, 128, 144)])
(8, 160, 12, [(1, 2, 3, 5, 10, 20, 40, 80, 160), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160)])
(8, 192, 7, [(1, 2, 3, 6, 12, 24, 48, 96, 192), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192)])
(8, 256, 1, [(1, 2, 4, 8, 16, 32, 64, 128, 256)])
(9, 71, 1258, [(1, 2, 3, 4, 7, 8, 16, 32, 39, 71), ..., (1, 2, 4, 8, 16, 32, 64, 68, 70, 71)])
(9, 79, 621, [(1, 2, 3, 4, 7, 9, 18, 36, 43, 79), ..., (1, 2, 4, 8, 16, 24, 26, 52, 78, 79)])
(9, 87, 507, [(1, 2, 3, 4, 7, 10, 20, 40, 47, 87), ..., (1, 2, 4, 8, 16, 24, 28, 29, 58, 87)])
(9, 89, 471, [(1, 2, 3, 4, 7, 11, 22, 44, 45, 89), ..., (1, 2, 4, 8, 16, 32, 64, 80, 88, 89)])
(9, 91, 359, [(1, 2, 3, 4, 7, 11, 22, 44, 47, 91), ..., (1, 2, 4, 8, 16, 24, 25, 50, 75, 91)])
(9, 93, 306, [(1, 2, 3, 4, 7, 14, 17, 31, 62, 93), ..., (1, 2, 4, 8, 16, 20, 36, 72, 92, 93)])
(9, 94, 643, [(1, 2, 3, 4, 7, 10, 20, 27, 47, 94), ..., (1, 2, 4, 8, 16, 24, 26, 52, 78, 94)])
(9, 95, 180, [(1, 2, 3, 4, 7, 11, 22, 44, 51, 95), ..., (1, 2, 4, 8, 16, 20, 21, 37, 74, 95)])
(9, 101, 270, [(1, 2, 3, 5, 6, 12, 24, 48, 53, 101), ..., (1, 2, 4, 8, 16, 32, 64, 96, 100, 101)])
(9, 103, 99, [(1, 2, 3, 5, 7, 12, 24, 48, 55, 103), ..., (1, 2, 4, 8, 16, 32, 34, 68, 102, 103)])
(9, 105, 332, [(1, 2, 3, 4, 7, 14, 21, 35, 70, 105), ..., (1, 2, 4, 8, 16, 32, 64, 96, 104, 105)])
(9, 106, 533, [(1, 2, 3, 5, 6, 12, 24, 29, 53, 106), ..., (1, 2, 4, 8, 16, 32, 64, 96, 104, 106)])
(9, 107, 30, [(1, 2, 3, 5, 8, 13, 26, 52, 55, 107), ..., (1, 2, 4, 8, 16, 32, 33, 66, 99, 107)])
(9, 109, 125, [(1, 2, 3, 5, 8, 13, 26, 52, 57, 109), ..., (1, 2, 4, 8, 16, 32, 36, 72, 108, 109)])
(9, 110, 531, [(1, 2, 3, 4, 7, 11, 22, 33, 55, 110), ..., (1, 2, 4, 8, 16, 32, 36, 72, 108, 110)])
(9, 111, 88, [(1, 2, 3, 5, 8, 16, 21, 37, 74, 111), ..., (1, 2, 4, 8, 16, 32, 36, 37, 74, 111)])
(9, 113, 135, [(1, 2, 3, 4, 7, 14, 28, 56, 57, 113), ..., (1, 2, 4, 8, 16, 32, 64, 96, 112, 113)])
(9, 114, 512, [(1, 2, 3, 4, 7, 14, 28, 29, 57, 114), ..., (1, 2, 4, 8, 16, 32, 64, 96, 112, 114)])
(9, 115, 41, [(1, 2, 3, 4, 7, 14, 28, 56, 59, 115), ..., (1, 2, 4, 8, 16, 32, 33, 66, 99, 115)])
(9, 116, 619, [(1, 2, 3, 4, 7, 11, 18, 29, 58, 116), ..., (1, 2, 4, 8, 16, 32, 64, 96, 112, 116)])
(9, 117, 86, [(1, 2, 3, 5, 7, 14, 28, 56, 61, 117), ..., (1, 2, 4, 8, 16, 17, 34, 50, 100, 117)])
(9, 118, 96, [(1, 2, 3, 4, 7, 14, 28, 31, 59, 118), ..., (1, 2, 4, 8, 16, 32, 34, 68, 102, 118)])
(9, 119, 20, [(1, 2, 3, 4, 7, 14, 28, 56, 63, 119), ..., (1, 2, 4, 8, 16, 17, 34, 68, 102, 119)])
(9, 121, 120, [(1, 2, 3, 5, 10, 15, 30, 60, 61, 121), ..., (1, 2, 4, 8, 16, 32, 40, 80, 120, 121)])
(9, 122, 259, [(1, 2, 3, 5, 7, 14, 28, 33, 61, 122), ..., (1, 2, 4, 8, 16, 32, 40, 80, 120, 122)])
(9, 123, 64, [(1, 2, 3, 5, 10, 15, 30, 60, 63, 123), ..., (1, 2, 4, 8, 16, 32, 40, 41, 82, 123)])
(9, 124, 419, [(1, 2, 3, 4, 7, 14, 17, 31, 62, 124), ..., (1, 2, 4, 8, 16, 32, 40, 80, 120, 124)])
(9, 125, 48, [(1, 2, 3, 5, 10, 15, 25, 50, 75, 125), ..., (1, 2, 4, 8, 16, 24, 25, 50, 100, 125)])
(9, 126, 310, [(1, 2, 3, 4, 7, 14, 21, 42, 63, 126), ..., (1, 2, 4, 8, 16, 32, 40, 42, 84, 126)])
(9, 131, 23, [(1, 2, 3, 4, 8, 16, 32, 64, 67, 131), ..., (1, 2, 4, 8, 16, 32, 64, 128, 130, 131)])
(9, 133, 21, [(1, 2, 3, 5, 8, 16, 32, 64, 69, 133), ..., (1, 2, 4, 8, 16, 32, 64, 128, 132, 133)])
(9, 134, 58, [(1, 2, 3, 4, 8, 16, 32, 35, 67, 134), ..., (1, 2, 4, 8, 16, 32, 64, 128, 132, 134)])
(9, 135, 32, [(1, 2, 3, 5, 10, 15, 30, 45, 90, 135), ..., (1, 2, 4, 8, 9, 18, 36, 45, 90, 135)])
(9, 137, 21, [(1, 2, 4, 8, 9, 16, 32, 64, 73, 137), ..., (1, 2, 4, 8, 16, 32, 64, 128, 136, 137)])
(9, 138, 74, [(1, 2, 3, 5, 8, 16, 32, 37, 69, 138), ..., (1, 2, 4, 8, 16, 32, 64, 128, 136, 138)])
(9, 140, 269, [(1, 2, 3, 4, 7, 14, 21, 35, 70, 140), ..., (1, 2, 4, 8, 16, 32, 64, 128, 136, 140)])
(9, 145, 67, [(1, 2, 3, 6, 9, 18, 36, 72, 73, 145), ..., (1, 2, 4, 8, 16, 32, 64, 128, 144, 145)])
(9, 146, 128, [(1, 2, 3, 6, 9, 18, 36, 37, 73, 146), ..., (1, 2, 4, 8, 16, 32, 64, 128, 144, 146)])
(9, 147, 24, [(1, 2, 3, 6, 9, 18, 36, 72, 75, 147), ..., (1, 2, 4, 8, 16, 32, 48, 49, 98, 147)])
(9, 148, 179, [(1, 2, 3, 5, 8, 16, 21, 37, 74, 148), ..., (1, 2, 4, 8, 16, 32, 64, 128, 144, 148)])
(9, 149, 4, [(1, 2, 4, 5, 9, 18, 36, 72, 77, 149), ..., (1, 2, 4, 8, 16, 17, 33, 66, 132, 149)])
(9, 150, 116, [(1, 2, 3, 5, 10, 15, 25, 50, 75, 150), ..., (1, 2, 4, 8, 16, 32, 48, 50, 100, 150)])
(9, 152, 234, [(1, 2, 3, 4, 8, 11, 19, 38, 76, 152), ..., (1, 2, 4, 8, 16, 32, 64, 128, 144, 152)])
(9, 153, 14, [(1, 2, 3, 6, 9, 18, 36, 72, 81, 153), ..., (1, 2, 4, 8, 16, 17, 34, 68, 136, 153)])
(9, 154, 8, [(1, 2, 4, 5, 9, 18, 36, 41, 77, 154), ..., (1, 2, 4, 8, 16, 18, 34, 68, 136, 154)])
(9, 156, 144, [(1, 2, 3, 5, 8, 13, 26, 39, 78, 156), ..., (1, 2, 4, 8, 16, 32, 48, 52, 104, 156)])
(9, 161, 29, [(1, 2, 3, 5, 10, 20, 40, 80, 81, 161), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 161)])
(9, 162, 99, [(1, 2, 3, 5, 10, 20, 40, 41, 81, 162), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 162)])
(9, 163, 4, [(1, 2, 3, 5, 10, 20, 40, 80, 83, 163), ..., (1, 2, 4, 8, 16, 32, 33, 65, 130, 163)])
(9, 164, 89, [(1, 2, 3, 5, 10, 20, 21, 41, 82, 164), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 164)])
(9, 165, 8, [(1, 2, 3, 5, 10, 20, 40, 80, 85, 165), ..., (1, 2, 4, 8, 16, 32, 33, 66, 132, 165)])
(9, 166, 8, [(1, 2, 3, 5, 10, 20, 40, 43, 83, 166), ..., (1, 2, 4, 8, 16, 32, 34, 66, 132, 166)])
(9, 168, 256, [(1, 2, 3, 4, 7, 14, 21, 42, 84, 168), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 168)])
(9, 170, 24, [(1, 2, 3, 5, 10, 20, 40, 45, 85, 170), ..., (1, 2, 4, 8, 16, 32, 34, 68, 136, 170)])
(9, 172, 12, [(1, 2, 3, 5, 10, 20, 23, 43, 86, 172), ..., (1, 2, 4, 8, 16, 32, 36, 68, 136, 172)])
(9, 176, 127, [(1, 2, 3, 4, 7, 11, 22, 44, 88, 176), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 176)])
(9, 180, 108, [(1, 2, 3, 5, 10, 15, 30, 45, 90, 180), ..., (1, 2, 4, 8, 16, 32, 36, 72, 144, 180)])
(9, 184, 16, [(1, 2, 3, 5, 10, 13, 23, 46, 92, 184), ..., (1, 2, 4, 8, 16, 32, 40, 72, 144, 184)])
(9, 193, 16, [(1, 2, 3, 6, 12, 24, 48, 96, 97, 193), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 193)])
(9, 194, 32, [(1, 2, 3, 6, 12, 24, 48, 49, 97, 194), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 194)])
(9, 195, 4, [(1, 2, 3, 6, 12, 24, 48, 96, 99, 195), ..., (1, 2, 4, 8, 16, 32, 64, 65, 130, 195)])
(9, 196, 44, [(1, 2, 3, 6, 12, 24, 25, 49, 98, 196), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 196)])
(9, 198, 12, [(1, 2, 3, 6, 12, 24, 48, 51, 99, 198), ..., (1, 2, 4, 8, 16, 32, 64, 66, 132, 198)])
(9, 200, 92, [(1, 2, 3, 5, 10, 15, 25, 50, 100, 200), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 200)])
(9, 204, 24, [(1, 2, 3, 6, 12, 24, 27, 51, 102, 204), ..., (1, 2, 4, 8, 16, 32, 64, 68, 136, 204)])
(9, 208, 66, [(1, 2, 3, 5, 8, 13, 26, 52, 104, 208), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 208)])
(9, 216, 60, [(1, 2, 3, 6, 9, 18, 27, 54, 108, 216), ..., (1, 2, 4, 8, 16, 32, 64, 72, 144, 216)])
(9, 224, 50, [(1, 2, 3, 4, 7, 14, 28, 56, 112, 224), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 224)])
(9, 240, 60, [(1, 2, 3, 5, 10, 15, 30, 60, 120, 240), ..., (1, 2, 4, 8, 16, 32, 64, 80, 160, 240)])
(9, 257, 2, [(1, 2, 4, 8, 16, 32, 64, 128, 129, 257), (1, 2, 4, 8, 16, 32, 64, 128, 256, 257)])
(9, 258, 4, [(1, 2, 4, 8, 16, 32, 64, 65, 129, 258), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 258)])
(9, 260, 6, [(1, 2, 4, 8, 16, 32, 33, 65, 130, 260), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 260)])
(9, 264, 8, [(1, 2, 4, 8, 16, 17, 33, 66, 132, 264), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 264)])
(9, 272, 10, [(1, 2, 4, 8, 9, 17, 34, 68, 136, 272), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 272)])
(9, 288, 33, [(1, 2, 3, 6, 9, 18, 36, 72, 144, 288), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 288)])
(9, 320, 14, [(1, 2, 3, 5, 10, 20, 40, 80, 160, 320), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 320)])
(9, 384, 8, [(1, 2, 3, 6, 12, 24, 48, 96, 192, 384), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 384)])
(9, 512, 1, [(1, 2, 4, 8, 16, 32, 64, 128, 256, 512)])
(10, 127, 2661, [(1, 2, 3, 4, 7, 8, 15, 30, 60, 67, 127), ..., (1, 2, 4, 8, 16, 32, 40, 42, 84, 126, 127)])
(10, 139, 916, [(1, 2, 3, 4, 7, 10, 17, 34, 68, 71, 139), ..., (1, 2, 4, 8, 16, 32, 64, 128, 136, 138, 139)])
(10, 141, 1786, [(1, 2, 3, 4, 7, 10, 20, 27, 47, 94, 141), ..., (1, 2, 4, 8, 16, 32, 64, 128, 136, 140, 141)])
(10, 142, 3903, [(1, 2, 3, 4, 7, 8, 16, 32, 39, 71, 142), ..., (1, 2, 4, 8, 16, 32, 64, 128, 136, 140, 142)])
(10, 143, 861, [(1, 2, 3, 4, 7, 10, 17, 34, 68, 75, 143), ..., (1, 2, 4, 8, 16, 32, 36, 37, 74, 111, 143)])
(10, 151, 705, [(1, 2, 3, 4, 7, 9, 18, 36, 72, 79, 151), ..., (1, 2, 4, 8, 16, 32, 48, 50, 100, 150, 151)])
(10, 155, 607, [(1, 2, 3, 4, 7, 11, 18, 36, 72, 83, 155), ..., (1, 2, 4, 8, 16, 32, 48, 49, 98, 147, 155)])
(10, 157, 684, [(1, 2, 3, 5, 7, 12, 19, 38, 76, 81, 157), ..., (1, 2, 4, 8, 16, 32, 48, 52, 104, 156, 157)])
(10, 158, 1906, [(1, 2, 3, 4, 7, 9, 18, 36, 43, 79, 158), ..., (1, 2, 4, 8, 16, 32, 48, 52, 104, 156, 158)])
(10, 159, 569, [(1, 2, 3, 4, 8, 16, 19, 35, 70, 89, 159), ..., (1, 2, 4, 8, 16, 32, 48, 52, 53, 106, 159)])
(10, 167, 176, [(1, 2, 3, 4, 7, 10, 20, 40, 80, 87, 167), ..., (1, 2, 4, 8, 16, 32, 34, 66, 132, 166, 167)])
(10, 169, 1034, [(1, 2, 3, 4, 7, 14, 21, 42, 84, 85, 169), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 168, 169)])
(10, 171, 690, [(1, 2, 3, 4, 7, 14, 21, 42, 84, 87, 171), ..., (1, 2, 4, 8, 16, 32, 48, 56, 57, 114, 171)])
(10, 173, 205, [(1, 2, 3, 5, 7, 14, 21, 42, 84, 89, 173), ..., (1, 2, 4, 8, 16, 32, 36, 68, 136, 172, 173)])
(10, 174, 1686, [(1, 2, 3, 4, 7, 10, 20, 40, 47, 87, 174), ..., (1, 2, 4, 8, 16, 32, 48, 56, 58, 116, 174)])
(10, 175, 266, [(1, 2, 3, 4, 7, 14, 21, 35, 70, 105, 175), ..., (1, 2, 4, 8, 16, 32, 36, 37, 69, 138, 175)])
(10, 177, 462, [(1, 2, 3, 4, 7, 11, 22, 44, 88, 89, 177), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 176, 177)])
(10, 178, 1210, [(1, 2, 3, 4, 7, 11, 22, 44, 45, 89, 178), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 176, 178)])
(10, 179, 83, [(1, 2, 3, 4, 7, 11, 22, 44, 88, 91, 179), ..., (1, 2, 4, 8, 16, 32, 48, 49, 98, 147, 179)])
(10, 181, 439, [(1, 2, 3, 5, 6, 11, 22, 44, 88, 93, 181), ..., (1, 2, 4, 8, 16, 32, 36, 72, 144, 180, 181)])
(10, 182, 1289, [(1, 2, 3, 4, 7, 11, 22, 44, 47, 91, 182), ..., (1, 2, 4, 8, 16, 32, 48, 50, 100, 150, 182)])
(10, 183, 254, [(1, 2, 3, 4, 7, 11, 22, 44, 88, 95, 183), ..., (1, 2, 4, 8, 16, 32, 36, 37, 73, 146, 183)])
(10, 185, 263, [(1, 2, 3, 5, 8, 16, 21, 37, 74, 111, 185), ..., (1, 2, 4, 8, 16, 32, 40, 72, 144, 184, 185)])
(10, 186, 1011, [(1, 2, 3, 4, 7, 14, 17, 31, 62, 93, 186), ..., (1, 2, 4, 8, 16, 32, 40, 72, 144, 184, 186)])
(10, 187, 72, [(1, 2, 3, 4, 7, 11, 22, 44, 88, 99, 187), ..., (1, 2, 4, 8, 16, 32, 40, 41, 73, 146, 187)])
(10, 188, 1153, [(1, 2, 3, 4, 7, 10, 20, 27, 47, 94, 188), ..., (1, 2, 4, 8, 16, 32, 48, 52, 104, 156, 188)])
(10, 189, 267, [(1, 2, 3, 4, 7, 14, 21, 42, 63, 126, 189), ..., (1, 2, 4, 8, 16, 32, 33, 41, 74, 148, 189)])
(10, 190, 608, [(1, 2, 3, 4, 7, 11, 22, 44, 51, 95, 190), ..., (1, 2, 4, 8, 16, 32, 40, 42, 74, 148, 190)])
(10, 197, 209, [(1, 2, 3, 5, 6, 12, 24, 48, 96, 101, 197), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 196, 197)])
(10, 199, 70, [(1, 2, 3, 5, 7, 12, 24, 48, 96, 103, 199), ..., (1, 2, 4, 8, 16, 32, 64, 66, 132, 198, 199)])
(10, 201, 312, [(1, 2, 3, 4, 8, 16, 32, 35, 67, 134, 201), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 200, 201)])
(10, 202, 729, [(1, 2, 3, 5, 6, 12, 24, 48, 53, 101, 202), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 200, 202)])
(10, 203, 57, [(1, 2, 3, 5, 10, 15, 25, 50, 100, 103, 203), ..., (1, 2, 4, 8, 16, 32, 64, 65, 130, 195, 203)])
(10, 205, 167, [(1, 2, 3, 5, 10, 15, 25, 50, 100, 105, 205), ..., (1, 2, 4, 8, 16, 32, 64, 68, 136, 204, 205)])
(10, 206, 295, [(1, 2, 3, 5, 7, 12, 24, 48, 55, 103, 206), ..., (1, 2, 4, 8, 16, 32, 64, 68, 136, 204, 206)])
(10, 207, 70, [(1, 2, 3, 5, 8, 16, 32, 37, 69, 138, 207), ..., (1, 2, 4, 8, 16, 32, 64, 68, 69, 138, 207)])
(10, 209, 180, [(1, 2, 3, 5, 8, 13, 26, 52, 104, 105, 209), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 208, 209)])
(10, 210, 1075, [(1, 2, 3, 4, 7, 14, 21, 35, 70, 105, 210), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 208, 210)])
(10, 211, 30, [(1, 2, 3, 5, 8, 13, 26, 52, 104, 107, 211), ..., (1, 2, 4, 8, 16, 32, 64, 65, 130, 195, 211)])
(10, 212, 937, [(1, 2, 3, 5, 6, 12, 24, 29, 53, 106, 212), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 208, 212)])
(10, 213, 30, [(1, 2, 3, 5, 8, 13, 26, 52, 104, 109, 213), ..., (1, 2, 4, 8, 16, 32, 33, 49, 82, 164, 213)])
(10, 214, 88, [(1, 2, 3, 5, 8, 13, 26, 52, 55, 107, 214), ..., (1, 2, 4, 8, 16, 32, 64, 66, 132, 198, 214)])
(10, 215, 26, [(1, 2, 3, 5, 10, 15, 25, 50, 100, 115, 215), ..., (1, 2, 4, 8, 16, 17, 33, 66, 132, 198, 215)])
(10, 217, 192, [(1, 2, 3, 6, 9, 18, 27, 54, 108, 109, 217), ..., (1, 2, 4, 8, 16, 32, 64, 72, 144, 216, 217)])
(10, 218, 375, [(1, 2, 3, 5, 8, 13, 26, 52, 57, 109, 218), ..., (1, 2, 4, 8, 16, 32, 64, 72, 144, 216, 218)])
(10, 219, 98, [(1, 2, 3, 6, 9, 18, 27, 54, 108, 111, 219), ..., (1, 2, 4, 8, 16, 32, 64, 72, 73, 146, 219)])
(10, 220, 1096, [(1, 2, 3, 4, 7, 11, 22, 33, 55, 110, 220), ..., (1, 2, 4, 8, 16, 32, 64, 72, 144, 216, 220)])
(10, 221, 58, [(1, 2, 3, 5, 8, 13, 26, 52, 104, 117, 221), ..., (1, 2, 4, 8, 16, 24, 25, 49, 98, 196, 221)])
(10, 222, 310, [(1, 2, 3, 5, 8, 16, 21, 37, 74, 111, 222), ..., (1, 2, 4, 8, 16, 32, 64, 72, 74, 148, 222)])
(10, 225, 251, [(1, 2, 3, 4, 7, 14, 28, 56, 112, 113, 225), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 224, 225)])
(10, 226, 320, [(1, 2, 3, 4, 7, 14, 28, 56, 57, 113, 226), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 224, 226)])
(10, 227, 25, [(1, 2, 3, 4, 7, 14, 28, 56, 112, 115, 227), ..., (1, 2, 4, 8, 16, 32, 64, 65, 130, 195, 227)])
(10, 228, 1012, [(1, 2, 3, 4, 7, 14, 28, 29, 57, 114, 228), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 224, 228)])
(10, 229, 16, [(1, 2, 3, 5, 7, 14, 28, 56, 112, 117, 229), ..., (1, 2, 4, 8, 16, 32, 33, 66, 98, 196, 229)])
(10, 230, 116, [(1, 2, 3, 4, 7, 14, 28, 56, 59, 115, 230), ..., (1, 2, 4, 8, 16, 32, 64, 66, 132, 198, 230)])
(10, 231, 28, [(1, 2, 3, 4, 7, 14, 28, 56, 112, 119, 231), ..., (1, 2, 4, 8, 16, 32, 33, 66, 132, 198, 231)])
(10, 232, 894, [(1, 2, 3, 4, 7, 11, 18, 29, 58, 116, 232), ..., (1, 2, 4, 8, 16, 32, 64, 128, 192, 224, 232)])
(10, 233, 4, [(1, 2, 4, 5, 9, 14, 28, 56, 112, 121, 233), ..., (1, 2, 4, 8, 16, 17, 33, 50, 100, 200, 233)])
(10, 234, 304, [(1, 2, 3, 5, 7, 14, 28, 56, 61, 117, 234), ..., (1, 2, 4, 8, 16, 32, 34, 68, 100, 200, 234)])
(10, 236, 159, [(1, 2, 3, 4, 7, 14, 28, 31, 59, 118, 236), ..., (1, 2, 4, 8, 16, 32, 64, 68, 136, 204, 236)])
(10, 238, 76, [(1, 2, 3, 4, 7, 14, 28, 56, 63, 119, 238), ..., (1, 2, 4, 8, 16, 32, 34, 68, 136, 204, 238)])
(10, 241, 165, [(1, 2, 3, 5, 10, 15, 30, 60, 120, 121, 241), ..., (1, 2, 4, 8, 16, 32, 64, 80, 160, 240, 241)])
(10, 242, 329, [(1, 2, 3, 5, 10, 15, 30, 60, 61, 121, 242), ..., (1, 2, 4, 8, 16, 32, 64, 80, 160, 240, 242)])
(10, 243, 93, [(1, 2, 3, 5, 10, 15, 30, 60, 120, 123, 243), ..., (1, 2, 4, 8, 16, 32, 64, 80, 81, 162, 243)])
(10, 244, 457, [(1, 2, 3, 5, 7, 14, 28, 33, 61, 122, 244), ..., (1, 2, 4, 8, 16, 32, 64, 80, 160, 240, 244)])
(10, 245, 48, [(1, 2, 3, 5, 10, 15, 30, 60, 120, 125, 245), ..., (1, 2, 4, 8, 16, 32, 48, 49, 98, 196, 245)])
(10, 246, 194, [(1, 2, 3, 5, 10, 15, 30, 60, 63, 123, 246), ..., (1, 2, 4, 8, 16, 32, 64, 80, 82, 164, 246)])
(10, 248, 609, [(1, 2, 3, 4, 7, 14, 17, 31, 62, 124, 248), ..., (1, 2, 4, 8, 16, 32, 64, 80, 160, 240, 248)])
(10, 249, 8, [(1, 2, 3, 5, 10, 20, 40, 43, 83, 166, 249), ..., (1, 2, 4, 8, 16, 17, 33, 66, 83, 166, 249)])
(10, 250, 168, [(1, 2, 3, 5, 10, 15, 25, 50, 75, 125, 250), ..., (1, 2, 4, 8, 16, 32, 48, 50, 100, 200, 250)])
(10, 252, 700, [(1, 2, 3, 4, 7, 14, 21, 42, 63, 126, 252), ..., (1, 2, 4, 8, 16, 32, 64, 80, 84, 168, 252)])
(10, 255, 24, [(1, 2, 3, 5, 10, 15, 30, 60, 120, 135, 255), ..., (1, 2, 4, 8, 16, 17, 34, 68, 85, 170, 255)])
(10, 259, 23, [(1, 2, 3, 4, 8, 16, 32, 64, 128, 131, 259), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 258, 259)])
(10, 261, 21, [(1, 2, 3, 5, 8, 16, 32, 64, 128, 133, 261), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 260, 261)])
(10, 262, 58, [(1, 2, 3, 4, 8, 16, 32, 64, 67, 131, 262), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 260, 262)])
(10, 265, 21, [(1, 2, 4, 8, 9, 16, 32, 64, 128, 137, 265), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 264, 265)])
(10, 266, 50, [(1, 2, 3, 5, 8, 16, 32, 64, 69, 133, 266), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 264, 266)])
(10, 268, 101, [(1, 2, 3, 4, 8, 16, 32, 35, 67, 134, 268), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 264, 268)])
(10, 270, 136, [(1, 2, 3, 5, 10, 15, 30, 45, 90, 135, 270), ..., (1, 2, 4, 8, 16, 18, 36, 72, 90, 180, 270)])
(10, 273, 25, [(1, 2, 4, 8, 9, 17, 34, 68, 136, 137, 273), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 272, 273)])
(10, 274, 50, [(1, 2, 4, 8, 9, 16, 32, 64, 73, 137, 274), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 272, 274)])
(10, 276, 135, [(1, 2, 3, 5, 8, 16, 32, 37, 69, 138, 276), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 272, 276)])
(10, 280, 448, [(1, 2, 3, 4, 7, 14, 21, 35, 70, 140, 280), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 272, 280)])
(10, 281, 4, [(1, 2, 4, 8, 9, 17, 34, 68, 136, 145, 281), ..., (1, 2, 4, 8, 16, 17, 33, 66, 132, 264, 281)])
(10, 289, 87, [(1, 2, 3, 6, 9, 18, 36, 72, 144, 145, 289), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 288, 289)])
(10, 290, 168, [(1, 2, 3, 6, 9, 18, 36, 72, 73, 145, 290), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 288, 290)])
(10, 291, 28, [(1, 2, 3, 6, 9, 18, 36, 72, 144, 147, 291), ..., (1, 2, 4, 8, 16, 32, 64, 96, 97, 194, 291)])
(10, 292, 217, [(1, 2, 3, 6, 9, 18, 36, 37, 73, 146, 292), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 288, 292)])
(10, 293, 4, [(1, 2, 4, 5, 9, 18, 36, 72, 144, 149, 293), ..., (1, 2, 4, 8, 16, 32, 33, 65, 130, 260, 293)])
(10, 294, 80, [(1, 2, 3, 6, 9, 18, 36, 72, 75, 147, 294), ..., (1, 2, 4, 8, 16, 32, 64, 96, 98, 196, 294)])
(10, 296, 258, [(1, 2, 3, 5, 8, 16, 21, 37, 74, 148, 296), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 288, 296)])
(10, 297, 14, [(1, 2, 3, 6, 9, 18, 36, 72, 144, 153, 297), ..., (1, 2, 4, 8, 16, 32, 33, 66, 132, 264, 297)])
(10, 298, 8, [(1, 2, 4, 5, 9, 18, 36, 72, 77, 149, 298), ..., (1, 2, 4, 8, 16, 32, 34, 66, 132, 264, 298)])
(10, 300, 264, [(1, 2, 3, 5, 10, 15, 25, 50, 75, 150, 300), ..., (1, 2, 4, 8, 16, 32, 64, 96, 100, 200, 300)])
(10, 304, 307, [(1, 2, 3, 4, 8, 11, 19, 38, 76, 152, 304), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 288, 304)])
(10, 306, 48, [(1, 2, 3, 6, 9, 18, 36, 72, 81, 153, 306), ..., (1, 2, 4, 8, 16, 32, 34, 68, 136, 272, 306)])
(10, 308, 12, [(1, 2, 4, 5, 9, 18, 36, 41, 77, 154, 308), ..., (1, 2, 4, 8, 16, 32, 36, 68, 136, 272, 308)])
(10, 312, 248, [(1, 2, 3, 5, 8, 13, 26, 39, 78, 156, 312), ..., (1, 2, 4, 8, 16, 32, 64, 96, 104, 208, 312)])
(10, 321, 33, [(1, 2, 3, 5, 10, 20, 40, 80, 160, 161, 321), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 320, 321)])
(10, 322, 66, [(1, 2, 3, 5, 10, 20, 40, 80, 81, 161, 322), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 320, 322)])
(10, 323, 4, [(1, 2, 3, 5, 10, 20, 40, 80, 160, 163, 323), ..., (1, 2, 4, 8, 16, 32, 64, 65, 129, 258, 323)])
(10, 324, 194, [(1, 2, 3, 5, 10, 20, 40, 41, 81, 162, 324), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 320, 324)])
(10, 325, 8, [(1, 2, 3, 5, 10, 20, 40, 80, 160, 165, 325), ..., (1, 2, 4, 8, 16, 32, 64, 65, 130, 260, 325)])
(10, 326, 8, [(1, 2, 3, 5, 10, 20, 40, 80, 83, 163, 326), ..., (1, 2, 4, 8, 16, 32, 64, 66, 130, 260, 326)])
(10, 328, 124, [(1, 2, 3, 5, 10, 20, 21, 41, 82, 164, 328), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 320, 328)])
(10, 330, 24, [(1, 2, 3, 5, 10, 20, 40, 80, 85, 165, 330), ..., (1, 2, 4, 8, 16, 32, 64, 66, 132, 264, 330)])
(10, 332, 12, [(1, 2, 3, 5, 10, 20, 40, 43, 83, 166, 332), ..., (1, 2, 4, 8, 16, 32, 64, 68, 132, 264, 332)])
(10, 336, 369, [(1, 2, 3, 4, 7, 14, 21, 42, 84, 168, 336), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 320, 336)])
(10, 340, 48, [(1, 2, 3, 5, 10, 20, 40, 45, 85, 170, 340), ..., (1, 2, 4, 8, 16, 32, 64, 68, 136, 272, 340)])
(10, 344, 16, [(1, 2, 3, 5, 10, 20, 23, 43, 86, 172, 344), ..., (1, 2, 4, 8, 16, 32, 64, 72, 136, 272, 344)])
(10, 352, 156, [(1, 2, 3, 4, 7, 11, 22, 44, 88, 176, 352), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 320, 352)])
(10, 360, 200, [(1, 2, 3, 5, 10, 15, 30, 45, 90, 180, 360), ..., (1, 2, 4, 8, 16, 32, 64, 72, 144, 288, 360)])
(10, 368, 20, [(1, 2, 3, 5, 10, 13, 23, 46, 92, 184, 368), ..., (1, 2, 4, 8, 16, 32, 64, 80, 144, 288, 368)])
(10, 385, 18, [(1, 2, 3, 6, 12, 24, 48, 96, 192, 193, 385), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 385)])
(10, 386, 36, [(1, 2, 3, 6, 12, 24, 48, 96, 97, 193, 386), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 386)])
(10, 387, 4, [(1, 2, 3, 6, 12, 24, 48, 96, 192, 195, 387), ..., (1, 2, 4, 8, 16, 32, 64, 128, 129, 258, 387)])
(10, 388, 50, [(1, 2, 3, 6, 12, 24, 48, 49, 97, 194, 388), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 388)])
(10, 390, 12, [(1, 2, 3, 6, 12, 24, 48, 96, 99, 195, 390), ..., (1, 2, 4, 8, 16, 32, 64, 128, 130, 260, 390)])
(10, 392, 60, [(1, 2, 3, 6, 12, 24, 25, 49, 98, 196, 392), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 392)])
(10, 396, 24, [(1, 2, 3, 6, 12, 24, 48, 51, 99, 198, 396), ..., (1, 2, 4, 8, 16, 32, 64, 128, 132, 264, 396)])
(10, 400, 126, [(1, 2, 3, 5, 10, 15, 25, 50, 100, 200, 400), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 400)])
(10, 408, 40, [(1, 2, 3, 6, 12, 24, 27, 51, 102, 204, 408), ..., (1, 2, 4, 8, 16, 32, 64, 128, 136, 272, 408)])
(10, 416, 80, [(1, 2, 3, 5, 8, 13, 26, 52, 104, 208, 416), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 416)])
(10, 432, 95, [(1, 2, 3, 6, 9, 18, 27, 54, 108, 216, 432), ..., (1, 2, 4, 8, 16, 32, 64, 128, 144, 288, 432)])
(10, 448, 59, [(1, 2, 3, 4, 7, 14, 28, 56, 112, 224, 448), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 384, 448)])
(10, 480, 84, [(1, 2, 3, 5, 10, 15, 30, 60, 120, 240, 480), ..., (1, 2, 4, 8, 16, 32, 64, 128, 160, 320, 480)])
(10, 513, 2, [(1, 2, 4, 8, 16, 32, 64, 128, 256, 257, 513), (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 513)])
(10, 514, 4, [(1, 2, 4, 8, 16, 32, 64, 128, 129, 257, 514), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 514)])
(10, 516, 6, [(1, 2, 4, 8, 16, 32, 64, 65, 129, 258, 516), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 516)])
(10, 520, 8, [(1, 2, 4, 8, 16, 32, 33, 65, 130, 260, 520), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 520)])
(10, 528, 10, [(1, 2, 4, 8, 16, 17, 33, 66, 132, 264, 528), ..., (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 528)])
]]

py script/min_add_ver2.py @在已知数据中列出囗最少加法囗于首个紧致区间上
((1, 191), 190, [0, 1, 2, 2, 3, 3, 4, 3, 4, 4, 5, 4, 5, 5, 5, 4, 5, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 7, 5, 6, 6, 7, 6, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 8, 6, 7, 7, 7, 7, 8, 7, 8, 7, 8, 8, 8, 7, 8, 8, 8, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 8, 8, 8, 8, 9, 7, 8, 8, 8, 8, 8, 8, 9, 8, 9, 8, 9, 8, 9, 9, 9, 7, 8, 8, 8, 8, 9, 8, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 9, 8, 9, 9, 10, 9, 10, 10, 10, 8, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 10, 9, 10, 10, 10, 8, 9, 9, 9, 9, 9, 9, 10, 9, 10, 9, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10])
    # '输出用于搜索OEIS'

[[[
https://oeis.org/A003313
===
(Greetings from The On-Line Encyclopedia of Integer Sequences!)
A003313		Length of shortest addition chain for n.
(Formerly M0255)		59
0, 1, 2, 2, 3, 3, 4, 3, 4, 4, 5, 4, 5, 5, 5, 4, 5, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 7, 5, 6, 6, 7, 6, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 8, 6, 7, 7, 7, 7, 8, 7, 8, 7, 8, 8, 8, 7, 8, 8, 8, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 8, 8, 8, 8, 9, 7, 8, 8, 8, 8, 8, 8, 9, 8, 9, 8, 9, 8, 9, 9, 9, 7, 8, 8, 8, 8 (list; graph; refs; listen; history; text; internal format)
OFFSET	
1,3

COMMENTS	
Equivalently, minimal number of multiplications required to compute the n-th power.

REFERENCES	
Bahig, Hatem M.; El-Zahar, Mohamed H.; Nakamula, Ken; Some results for some conjectures in addition chains, in Combinatorics, computability and logic, pp. 47-54, Springer Ser. Discrete Math. Theor. Comput. Sci., Springer, London, 2001.

D. Bleichenbacher and A. Flammenkamp, An Efficient Algorithm for Computing Shortest Addition Chains, Preprint, 1997.

A. Flammenkamp, Drei Beitraege zur diskreten Mathematik: Additionsketten, No-Three-in-Line-Problem, Sociable Numbers, Diplomarbeit, Bielefeld 1991.

Gashkov, S. B. and Kochergin, V. V.; On addition chains of vectors, gate circuits and the complexity of computations of powers [translation of Metody Diskret. Anal. No. 52 (1992), 22-40, 119-120; 1265027], Siberian Adv. Math. 4 (1994), 1-16.

Gioia, A. A. and Subbarao, M. V., The Scholz-Brauer problem in addition chains, II, in Proceedings of the Eighth Manitoba Conference on Numerical Mathematics and Computing (Univ. Manitoba, Winnipeg, Man., 1978), pp. 251-274, Congress. Numer., XXII, Utilitas Math., Winnipeg, Man., 1979.

D. E. Knuth, The Art of Computer Programming, vol. 2, Seminumerical Algorithms, 2nd ed., Fig. 14 on page 403; 3rd edition, 1998, p. 465.

D. E. Knuth, website, further updates to Vol. 2 of TAOCP.

Rabin, Michael O., and Shmuel Winograd. "Fast evaluation of polynomials by rational preparation." Communications on Pure and Applied Mathematics25.4 (1972): 433-458. See Table p. 455.

N. J. A. Sloane and Simon Plouffe, The Encyclopedia of Integer Sequences, Academic Press, 1995 (includes this sequence).

LINKS	
D. W. Wilson and Antoine Mathys, Table of n, a(n) for n = 1..100000 (10001 terms from D. W. Wilson)
    https://oeis.org/A003313/b003313.txt

F. Bergeron, J. Berstel, S. Brlek, C Duboc, Addition chains using continued fractions, J. Algorithms 10 (1989), 403-412.

Daniel Bleichenbacher, Efficiency and Security of Cryptosystems based on Number Theory. PhD Thesis, Diss. ETH No. 11404, Zürich 1996. See p. 61.

Alfred Brauer, On addition chains Bull. Amer. Math. Soc. 45, (1939). 736-739.

Peter Downey, Benton Leong, and Ravi Sethi, Computing sequences with addition chains SIAM J. Comput. 10 (1981), 638-646.

M. Elia and F. Neri, A note on addition chains and some related conjectures, (Naples/Positano, 1988), pp. 166-181 of R. M. Capocelli, ed., Sequences, Springer-Verlag, NY 1990.

Christian Elsholtz et al., Upper bound on length of addition chain, Math Overflow, Sep 18 2015.

P. Erdős, Remarks on number theory. III. On addition chains, Acta Arith. 6 1960 77-81.

Achim Flammenkamp, Shortest addition chains

A. A. Gioia, M. V. Subbarao, and M. Sugunamma, The Scholz-Brauer problem in addition chains, Duke Math. J. 29 1962 481-487.

Anastasiya Gorodilova, Sergey Agievich, Claude Carlet, Evgeny Gorkunov, Valeriya Idrisova, Nikolay Kolomeec, Alexandr Kutsenko, Svetla Nikova, Alexey Oblaukhov, Stjepan Picek, Bart Preneel, Vincent Rijmen, Natalia Tokareva, Problems and solutions of the Fourth International Students' Olympiad in Cryptography NSUCRYPTO, arXiv:1806.02059 [cs.CR], 2018.

R. L. Graham, A. C.-C. Yao, F. F. Yao, Addition chains with multiplicative cost Discrete Math. 23 (1978), 115-119.

D. Knuth, Letter to N. J. A. Sloane, date unknown

D. E. Knuth, See the achain-all program

D. P. McCarthy, Effect of improved multiplication efficiency on exponentiation algorithms derived from addition chains Math. Comp. 46 (1986), 603-608.

Alec Mihailovs, Notes on using Flammenkamp's tables

Jorge Olivos, On vectorial addition chains J. Algorithms 2 (1981), 13-21.

Hugo Pfoertner, Addition chains

Kari Ragnarsson, Bridget Eileen Tenner, Obtainable Sizes of Topologies on Finite Sets, Oct 06 2008, Journal of Combinatorial Theory, Series A 117 (2010) 138-151.

Arnold Schönhage, A lower bound for the length of addition chains Theor. Comput. Sci. 1 (1975), 1-12.

Edward G. Thurber, The Scholz-Brauer problem on addition chains Pacific J. Math. 49 (1973), 229-242.

Edward G. Thurber, On addition chains l(mn)<=l(n)-b and lower bounds for c(r) Duke Math. J. 40 (1973), 907-913.

Edward G. Thurber, Addition chains and solutions of l(2n)=l(n) and l(2^n-1)=n+l(n)-1, Discrete Math., Vol. 16 (1976), 279-289.

Edward G. Thurber, Addition chains-an erratic sequence Discrete Math. 122 (1993), 287-305.

Edward G. Thurber, Efficient generation of minimal length addition chains, SIAM J. Comput. 28 (1999), 1247-1263.

W. R. Utz, A note on the Scholz-Brauer problem in addition chains, Proc. Amer. Math. Soc. 4, (1953). 462-463.

Emanuel Vegh, A note on addition chains, J. Combinatorial Theory Ser. A 19 (1975), 117-118.

Eric Weisstein's World of Mathematics, Addition Chain

Eric Weisstein's World of Mathematics, Scholz Conjecture

C. T. Whyburn, A note on addition chains Proc. Amer. Math. Soc. 16 1965 1134.

Index to sequences related to the complexity of n

FORMULA	
a(n*m) <= a(n)+a(m). In particular, a(n^k) <= k * a(n). - Max Alekseyev, Jul 22 2005

For all n >= 2, a(n) <= (4/3)*floor(log_2 n) + 2. - Jonathan Vos Post, Oct 08 2008

From Achim Flammenkamp, Oct 26 2016: (Start)

a(n) <= 9/log_2(71) log_2(n), for all n.

It is conjectured by D. E. Knuth, K. Stolarsky et al. that for all n: floor(log_2(n)) + ceiling(log_2(v(n))) <= a(n). (End)

a(n) <= A014701(n). - Charles R Greathouse IV, Jan 03 2018

EXAMPLE	
For n < 149 and for many higher values of n, a(n) is the depth of n in a tree whose first 6 levels are shown below. The path from the root of the tree to n gives an optimal addition chain. (See Knuth, Vol. 2, Sect. 4.6.3, Fig. 14 and Ex. 5):

                  1

                  |

                  2

                 / \

                /   \

               /     \

              /       \

             /         \

            3           4

           / \           \

          /   \           \

         /     \           \

        /       \           \

       5         6           8

      / \        |         /   \

     /   \       |        /     \

    7    10      12      9       16

   /    /  \    /  \    /  \    /  \

  14   11  20  15  24  13  17  18  32

E.g., a(15) = 5 and an optimal chain for 15 is 1, 2, 3, 6, 12, 15.

It is not possible to extend the tree to include the optimal addition chains for all n. For example, the chains for 43, 77, and 149 are incompatible. See the link to Achim Flammenkamp's web page on addition chains.

CROSSREFS	
Cf. A003064, A003065, A005766, A230528, A014701.

Sequence in context: A334200 A128998 A137813 * A353058 A277608 A117497

Adjacent sequences:  A003310 A003311 A003312 * A003314 A003315 A003316

KEYWORD	
nonn,nice,look

AUTHOR	
N. J. A. Sloane

EXTENSIONS	
More terms from Jud McCranie, Nov 01 2001

STATUS	
approved

Last modified September 23 04:03 EDT 2022. Contains 356909 sequences. (Running on oeis4.)
]]]
[[
https://oeis.org/A003313
    D. W. Wilson and Antoine Mathys, Table of n, a(n) for n = 1..100000 (10001 terms from D. W. Wilson)
        https://oeis.org/A003313/b003313.txt
    wget 'https://oeis.org/A003313/b003313.txt' -O '最少加法.txt'
    view /storage/emulated/0/Download/wget_/最少加法.txt
    !du -hs /storage/emulated/0/Download/wget_/最少加法.txt
        868KB
    !cp /storage/emulated/0/Download/wget_/最少加法.txt script/最短加链囗数据列表[1..=10_0000][A003313][oeis.org].txt
    view script/最短加链囗数据列表[1..=10_0000][A003313][oeis.org].txt
    e ../../python3_src/nn_ns/math_nn/numbers/shortest_addition_chain_length.py
        # length_of_shortest_addition_chain_for_pint
    !mkdir script/data__avoid_vim_search/
    !mv script/最短加链囗数据列表[1..=10_0000][A003313][oeis.org].txt script/data__avoid_vim_search/
    view script/data__avoid_vim_search/最短加链囗数据列表[1..=10_0000][A003313][oeis.org].txt
]]


[[[尝试压缩数据:
py script/min_add_ver2.py ,iter_growing_rngss5final_sum2num_adds
[[
(0, (1, 1), [(1, 2)])
(1, (2, 1), [(1, 3)])
(2, (4, 1), [(1, 5)])
(3, (7, 2), [(1, 7), (8, 9)])
(4, (12, 3), [(1, 11), (12, 13), (16, 17)])
(5, (21, 4), [(1, 19), (20, 21), (24, 25), (32, 33)])
(6, (36, 7), [(1, 29), (30, 31), (32, 35), (36, 37), (40, 41), (48, 49), (64, 65)])
(7, (62, 11), [(1, 47), (48, 53), (54, 55), (56, 57), (60, 61), (64, 67), (68, 69), (72, 73), (80, 81), (96, 97), (128, 129)])
(8, (106, 19), [(1, 71), (72, 79), (80, 87), (88, 89), (90, 91), (92, 93), (96, 101), (102, 103), (104, 105), (108, 109), (112, 113), (120, 121), (128, 131), (132, 133), (136, 137), (144, 145), (160, 161), (192, 193), (256, 257)])
(9, (184, 29), [(1, 127), (128, 139), (140, 141), (144, 151), (152, 155), (156, 157), (160, 167), (168, 169), (170, 171), (172, 173), (176, 177), (180, 181), (184, 185), (192, 197), (198, 199), (200, 201), (204, 205), (208, 209), (216, 217), (224, 225), (240, 241), (256, 259), (260, 261), (264, 265), (272, 273), (288, 289), (320, 321), (384, 385), (512, 513)])
(10, (315, 46), [(1, 191), (192, 223), (224, 235), (236, 237), (238, 239), (240, 247), (248, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
]]
py script/min_add_ver2.py ,加载下载的数据并调用 :iter_growing_rngss5final_sum2num_adds > ~/my_tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2num_adds.out.txt
view /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2num_adds.out.txt
!du -hs /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2num_adds.out.txt
    312KB
    vs 868KB:特别分散，即使 按条件(最少加法(n) <= upper4num_adds)求n的区间
py script/min_add_ver2.py ,iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess
[[
(0, (163, 62), [(1, 15), (16, 23), (24, 27), (28, 30), (32, 39), (40, 43), (44, 45), (48, 51), (52, 54), (56, 59), (64, 75), (76, 77), (80, 83), (84, 85), (88, 90), (96, 99), (100, 102), (104, 107), (112, 115), (116, 117), (128, 135), (136, 143), (144, 147), (148, 149), (152, 153), (160, 163), (164, 165), (168, 170), (176, 179), (192, 195), (196, 198), (200, 203), (208, 211), (212, 213), (224, 227), (228, 229), (232, 233), (256, 263), (264, 267), (268, 269), (272, 275), (276, 277), (280, 281), (288, 291), (292, 293), (296, 297), (304, 305), (320, 323), (324, 325), (328, 329), (336, 337), (352, 353), (384, 387), (388, 389), (392, 393), (400, 401), (416, 417), (448, 449), (512, 515), (516, 517), (520, 521), (528, 529)])
(1, (287, 59), [(1, 63), (64, 95), (96, 111), (112, 119), (120, 123), (124, 125), (128, 159), (160, 175), (176, 183), (184, 187), (188, 189), (192, 207), (208, 215), (216, 219), (220, 221), (224, 231), (232, 235), (236, 237), (240, 243), (244, 245), (248, 249), (256, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
(2, (314, 46), [(1, 191), (192, 223), (224, 235), (236, 237), (238, 239), (240, 247), (248, 251), (252, 253), (256, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
(4, (315, 46), [(1, 191), (192, 223), (224, 235), (236, 237), (238, 239), (240, 247), (248, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
]]
py script/min_add_ver2.py ,加载下载的数据并调用 :iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess > ~/my_tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess.out.txt
!du -hs /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess.out.txt
    568KB
        #尝试压缩一:失败
view /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess.out.txt
[[
(0, (3432, 1694), [(1, 15), (16, 23), ...])
(1, (15383, 5391), [(1, 63), (64, 95), ...])
(2, (37807, 9036), [(1, 255), ...])
(3, (61068, 9021), [(1, 255), ...])
(4, (80159, 6636), [(1, 1023), ...])
(5, (93101, 3250), [(1, 3071), ...])
(6, (97793, 1265), [(1, 4095), ...])
(7, (99682, 239), [(1, 16383), ...])
(8, (99954, 39), [(1, 32767), ...])
(9, (99994, 7), [(1, 65535), ...])
(10, (99999, 2), [(1, 65535), ...])
(11, (100000, 1), [(1, 100001)])
]]


py script/min_add_ver2.py ,iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess --name4calc_upper_guess4num_adds:_calc_upper_guess4num_adds__ver2
[[
(0, (202, 60), [(1, 30), (31, 45), (47, 51), (52, 54), (55, 60), (61, 75), (76, 77), (79, 83), (84, 85), (87, 90), (91, 92), (93, 99), (100, 102), (103, 108), (109, 115), (116, 117), (127, 135), (136, 147), (148, 149), (151, 153), (155, 156), (157, 163), (164, 165), (167, 170), (171, 172), (173, 180), (181, 184), (192, 195), (196, 198), (200, 203), (208, 211), (212, 213), (224, 227), (228, 229), (232, 233), (256, 263), (264, 267), (268, 269), (272, 275), (276, 277), (280, 281), (288, 291), (292, 293), (296, 297), (304, 305), (320, 323), (324, 325), (328, 329), (336, 337), (352, 353), (384, 387), (388, 389), (392, 393), (400, 401), (416, 417), (448, 449), (512, 515), (516, 517), (520, 521), (528, 529)])
(1, (315, 46), [(1, 191), (192, 223), (224, 235), (236, 237), (238, 239), (240, 247), (248, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
]]
py script/min_add_ver2.py ,加载下载的数据并调用 :iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess --name4calc_upper_guess4num_adds:_calc_upper_guess4num_adds__ver2 > ~/my_tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver2.out.txt
!du -hs /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver2.out.txt
    344KB
        #尝试压缩二:失败
view /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver2.out.txt
[[
(0, (3588, 1769), [(1, 30), (31, 45), ...])
(1, (21635, 7812), [(1, 759), ...])
(2, (68253, 12006), [(1, 5043), ...])
(3, (99449, 552), [(1, 33660), ...])
(4, (100000, 1), [(1, 100001)])
]]

py script/min_add_ver2.py ,在已知数据中列出囗比特一的数量最多的正整数囗等同最少加法下
[[
(0, 1, [1])
(1, 1, [2])
(2, 2, [3])
(3, 2, [5, 6])
(4, 3, [7])
(5, 4, [15])
(6, 4, [23, 27, 30])
(7, 5, [31])
(8, 6, [63])
(9, 6, [95, 111, 119, 123, 125, 126])
(10, 8, [255])
]]
py script/min_add_ver2.py ,加载下载的数据并调用 :在已知数据中列出囗比特一的数量最多的正整数囗等同最少加法下
[[
(0, 1, [1])
(1, 1, [2])
(2, 2, [3])
(3, 2, [5, 6])
(4, 3, [7])
(5, 4, [15])
(6, 4, [23, 27, 30])
(7, 5, [31])
(8, 6, [63])
(9, 6, [95, 111, 119, 123, 125, 126])
(10, 8, [255])
(11, 8, [447, 495, 510])
(12, 9, [511])
(13, 10, [1023])
(14, 10, [1535, 1791, 1919, 1983, 2015, 2031, 2039, 2043, 2045, 2046])
(15, 12, [4095])
xxxxx:以下可能不完整不正确:特别是[num_adds==20]的情形，肯定不完整，导致max_num_1bits反而下降。
(16, 12, [6143, 7167, 7679, 7935, 8127, 8175, 8187, 8190])
(17, 13, [8191])
(18, 14, [16383])
(19, 16, [65535])
(20, 15, [49151, 57343, 61439, 63487, 64511, 65023, 65279, 65407, 65471, 65503, 65519, 65527, 65531, 65533, 65534, 90111, 94207, 96255, 98175])
(21, 16, [98303])
    #注意:截止到final_sum=10**5，而非按num_adds截止，故而有些数据不完整不正确...
    #[floor_log2(10**5) == 16]
    #[num_adds <= 16]的数据是完整正确的。
]]

py script/min_add_ver2.py ,iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess --name4calc_upper_guess4num_adds:_calc_upper_guess4num_adds__ver3
[[
(0, (287, 63), [(1, 23), (24, 43), (44, 46), (47, 77), (78, 83), (84, 86), (87, 92), (93, 149), (150, 154), (155, 163), (164, 166), (167, 172), (173, 179), (180, 184), (185, 191), (192, 213), (214, 215), (216, 223), (224, 229), (230, 233), (234, 235), (236, 237), (238, 239), (240, 247), (248, 249), (250, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 281), (288, 293), (294, 295), (296, 298), (300, 301), (304, 305), (306, 307), (312, 313), (320, 323), (324, 326), (328, 329), (330, 331), (336, 337), (340, 341), (352, 353), (360, 361), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
(1, (315, 46), [(1, 191), (192, 223), (224, 235), (236, 237), (238, 239), (240, 247), (248, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
]]

py script/min_add_ver2.py ,加载下载的数据并调用 :iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess --name4calc_upper_guess4num_adds:_calc_upper_guess4num_adds__ver3 > ~/my_tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver3.out.txt
!du -hs /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver3.out.txt
    388KB
        #尝试压缩三:失败
view /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver3.out.txt
[[
(0, (43384, 19564), [(1, 23), (24, 43), ...])
(1, (93759, 5273), [(1, 1103), ...])
(2, (99959, 42), [(1, 24467), ...])
(3, (100000, 1), [(1, 100001)])
]]


py script/min_add_ver2.py ,iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess --name4calc_upper_guess4num_adds:_calc_upper_guess4num_adds__ver4
[[
(0, (237, 76), [(1, 45), (46, 51), (52, 75), (76, 77), (78, 83), (84, 85), (86, 90), (91, 99), (100, 102), (103, 115), (116, 117), (118, 119), (120, 121), (122, 123), (124, 125), (126, 135), (136, 147), (148, 149), (151, 153), (155, 163), (164, 165), (167, 170), (171, 180), (181, 185), (186, 187), (188, 189), (190, 191), (192, 195), (196, 198), (200, 203), (206, 207), (208, 211), (212, 213), (214, 215), (216, 217), (218, 219), (220, 221), (222, 223), (224, 227), (228, 229), (232, 233), (236, 237), (240, 241), (244, 245), (248, 249), (252, 253), (256, 263), (264, 267), (268, 269), (272, 275), (276, 277), (280, 281), (288, 291), (292, 293), (296, 297), (304, 305), (312, 313), (320, 323), (324, 325), (328, 329), (336, 337), (344, 345), (352, 353), (368, 369), (384, 387), (388, 389), (392, 393), (400, 401), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
(1, (315, 46), [(1, 191), (192, 223), (224, 235), (236, 237), (238, 239), (240, 247), (248, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
]]
py script/min_add_ver2.py ,iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess --name4calc_upper_guess4num_adds:_calc_upper_guess4num_adds__ver5
[[
(0, (298, 56), [(1, 77), (78, 83), (84, 149), (150, 154), (155, 163), (164, 166), (167, 191), (192, 213), (214, 223), (224, 229), (230, 233), (234, 235), (236, 237), (238, 239), (240, 247), (248, 249), (250, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 281), (288, 293), (294, 295), (296, 298), (300, 301), (304, 305), (306, 307), (312, 313), (320, 323), (324, 326), (328, 329), (330, 331), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
(1, (315, 46), [(1, 191), (192, 223), (224, 235), (236, 237), (238, 239), (240, 247), (248, 251), (252, 253), (255, 263), (264, 267), (268, 269), (270, 271), (272, 275), (276, 277), (280, 282), (288, 295), (296, 299), (300, 301), (304, 305), (306, 307), (308, 309), (312, 313), (320, 327), (328, 329), (330, 331), (332, 333), (336, 337), (340, 341), (344, 345), (352, 353), (360, 361), (368, 369), (384, 389), (390, 391), (392, 393), (396, 397), (400, 401), (408, 409), (416, 417), (432, 433), (448, 449), (480, 481), (512, 515), (516, 517), (520, 521), (528, 529)])
]]

py script/min_add_ver2.py ,加载下载的数据并调用 :iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess --name4calc_upper_guess4num_adds:_calc_upper_guess4num_adds__ver5 > ~/my_tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver5.out.txt
!du -hs /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver5.out.txt
    384KB
        #尝试压缩五:失败
view /sdcard/0my_files/tmp/out4py/min_add_ver2.py.加载下载的数据并调用.iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess.calc_ver5.out.txt
[[
(0, (44534, 19928), [(1, 77), (78, 83), ...])
(1, (94421, 4839), [(1, 1399), ...])
(2, (99976, 25), [(1, 42683), ...])
(3, (100000, 1), [(1, 100001)])
]]




]]]尝试压缩数据


[[[[[推导定理:
[是加法链 :: [int] -> bool]
[最少加法 :: pint -> uint]
[最少加法囗二输出 :: pint -> pint -> uint]
[最小加法链集 :: pint -> {加法链}]
    # [最小加法链集 :: pint -> {sorted[pint]}]
[us :: [int]]:
    [是加法链(us) =[def]= [
        [len(us) >= 1]
        [us[0] == 1]
        [is_strict_sorted(us)]
        [[@k <- [1..<len(us)]] -> [?i,j <- [0..<k]] -> [us[i]+us[j]==us[k]]]
        ]]
[所有加法链 :: {加法链}]
[所有加法链 =[def]= {us :: [int] | [是加法链(us)]}]

[m>=1]:
    [最少加法(m) =[def]= min{len(us) | [us :<- 所有加法链][us[-1] == m]}]
    [最小加法链集(m) =[def]= {us | [us :<- 所有加法链][len(us) == 最少加法(m)]}]
[r>=0][m>=r]:
    [最少加法囗二输出(r,m) =[def]= min{len(us) | [us :<- 所有加法链][us[-1] == m][[r==0]or[r in us]]}]
        #用于『最少加法囗上限估计囗除模拆分囗基本公式』


整数:型如(2**k)，最少加法:k
整数:型如(2**i+2**j){i>j}，最少加法:i+1

[@[m>=1] -> @[n>=1] -> [最少加法(m*n) <= 最少加法(m)+最少加法(n)]]
#bug:[@[m>=1] -> @[n>=1] -> [最少加法(m+n) <= (1 -[m*n>=2])+最少加法(m)+最少加法(n)]]
[@[m>=1] -> @[n>=1] -> [最少加法(m+n) <= (1 -[min(m,n)>=2])+最少加法(m)+最少加法(n)]]
    #共享 比特位2**1
[@[m>=1] -> [最少加法(m) <= (floor_log2(m)+count_num_1bits_of_uint(m)-1)]]
[@[m>=1] -> @[n>=1] -> [最少加法(m+n) <= (floor_log2(m)+count_num_1bits_of_uint(m)-1)]]
    #毫无意义: [@[m>=1] -> @[n>=1] -> [最少加法(m+n) <= (floor_log2(m)+count_num_1bits_of_uint(m)-1) +(floor_log2(n)+count_num_1bits_of_uint(n)-1) +1-floor_log2(min(m,n))]]

[@[k>=0] -> @[m>=1] -> [最少加法(m) <= k] -> [m <= 2**k]]
    证明:极限翻倍
[@[k>=0] -> @[m>=1] -> [m > 2**k] -> [最少加法(m) > k]]
    证明:逆否
[@[k>=0] -> [最少加法(2**k) == k]]
[@[j>=0] -> @[i>j] -> [最少加法(2**i+2**j) == i+1]]
    [[证明:
        !![@[k>=0] -> @[m>=1] -> [m > 2**k] -> [最少加法(m) > k]]
        [最少加法(2**i+2**j) > i]
        [最少加法(2**i+2**j) >= i+1]
        !![@[m>=1] -> @[n>=1] -> [最少加法(m*n) <= 最少加法(m)+最少加法(n)]]
        !![0<=j<i]
        [最少加法(2**i+2**j) == 最少加法((2**(i-j)+1)*2**j) <= 最少加法(2**(i-j)+1)+最少加法(2**j)]
        !![@[m>=1] -> @[n>=1] -> [最少加法(m+n) <= 1+最少加法(m)+最少加法(n)]]
        [最少加法(2**(i-j)+1) <= 1+最少加法(2**(i-j))+最少加法(1) == 1+最少加法(2**(i-j))]
        !![@[k>=0] -> [最少加法(2**k) == k]]
        [最少加法(2**i+2**j) <= 最少加法(2**(i-j)+1)+最少加法(2**j) <= 1+最少加法(2**(i-j))+最少加法(2**j) <= 1+(i-j)+j == i+1]
        !![最少加法(2**i+2**j) >= i+1]
        [最少加法(2**i+2**j) == i+1]
    ]]

[@[m>=1] -> [floor_log2(m) <= 最少加法(m) <= floor_log2(m) + bin(m).count('1')-1]]
[@[k>=1] -> @[i>=0] -> [最少加法(k*2**i) <= 最少加法(k)+i]]

不成立:最小加法链囗下限的乘法因子猜想=[def]=???[@[m>=1] -> @[n>=1] -> [最少加法(m*n) >= 最少加法(m)+[n>=2]]]
    在已知数据中测试囗最小加法链囗下限的乘法因子猜想
    [存在反例513=171*3,最少加法(513)==10==最少加法(171)]
不成立:最小加法链囗偶数猜想=[def]=???[@[k>=1] -> @[i>=0] -> [最少加法(k*2**i) == 最少加法(k)+i]]
    可能的反例候选:比如:126==5**3+1==53*2
    在已知数据中测试囗最小加法链囗偶数猜想
    ===后续:发现反例:
    [存在反例382==191*2,最少加法(382)==11==最少加法(191)]
    [191==0b1100_0000-1==0b1011_1111]
    [382==191*2==0b1011_11110]
py script/min_add_ver2.py ,在已知数据中测试囗最小加法链囗偶数猜想
    #所有已知数据通过测试！
    #但测试没通过 后来下载的数据，见下面
py script/min_add_ver2.py ,在已知数据中测试囗最小加法链囗下限的乘法因子猜想
((513, 10), (171, 10))
    #已知数据有唯一反例！
(10, 513, 2, [(1, 2, 4, 8, 16, 32, 64, 128, 256, 257, 513), (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 513)])
(10, 171, 690, [(1, 2, 3, 4, 7, 14, 21, 42, 84, 87, 171), ..., (1, 2, 4, 8, 16, 32, 48, 56, 57, 114, 171)])
py script/min_add_ver2.py ,加载下载的数据并调用 :在已知数据中测试囗最小加法链囗偶数猜想
    # [1..=10**5]中共有266个本原反例
[[
((382, 11), (191, 11))
((1402, 13), (701, 13))
((1486, 13), (743, 13))
((2222, 14), (1111, 14))
((2778, 14), (1389, 14))
((2958, 14), (1479, 14))
((4206, 15), (2103, 15))
((4430, 15), (2215, 15))
((4750, 15), (2375, 15))
((5362, 15), (2681, 15))
((5902, 15), (2951, 15))
((8562, 16), (4281, 16))
((8846, 16), (4423, 16))
((8982, 16), (4491, 16))
((9486, 16), (4743, 16))
((10674, 16), (5337, 16))
((11034, 16), (5517, 16))
((11790, 16), (5895, 16))
((12638, 17), (6319, 17))
((12734, 17), (6367, 17))
((12982, 17), (6491, 17))
((13406, 17), (6703, 17))
((13502, 17), (6751, 17))
((14494, 17), (7247, 17))
((14638, 17), (7319, 17))
((14926, 17), (7463, 17))
((14962, 17), (7481, 17))
((15142, 17), (7571, 17))
((15502, 17), (7751, 17))
((15818, 17), (7909, 17))
((15986, 17), (7993, 17))
((16086, 17), (8043, 17))
((16166, 17), (8083, 17))
((16538, 17), (8269, 17))
((16850, 17), (8425, 17))
((17074, 17), (8537, 17))
((17678, 17), (8839, 17))
((17706, 17), (8853, 17))
((17942, 17), (8971, 17))
((18958, 17), (9479, 17))
((20962, 17), (10481, 17))
((21298, 17), (10649, 17))
((22042, 17), (11021, 17))
((22966, 18), (11483, 18))
((23006, 18), (11503, 18))
((23566, 17), (11783, 17))
((24230, 18), (12115, 18))
((24266, 18), (12133, 18))
((24382, 18), (12191, 18))
((24526, 18), (12263, 18))
((24830, 18), (12415, 18))
((25082, 18), (12541, 18))
((25406, 18), (12703, 18))
((25914, 18), (12957, 18))
((26106, 18), (13053, 18))
((26510, 18), (13255, 18))
((26878, 18), (13439, 18))
((27346, 18), (13673, 18))
((27598, 18), (13799, 18))
((27636, 18), (13818, 18))
((28974, 18), (14487, 18))
((29482, 18), (14741, 18))
((29514, 18), (14757, 18))
((29838, 18), (14919, 18))
((30246, 18), (15123, 18))
((31002, 18), (15501, 18))
((31562, 18), (15781, 18))
((31922, 18), (15961, 18))
((32022, 18), (16011, 18))
((32294, 18), (16147, 18))
((33050, 18), (16525, 18))
((33102, 18), (16551, 18))
((33506, 18), (16753, 18))
((33618, 18), (16809, 18))
((34346, 18), (17173, 18))
((35342, 18), (17671, 18))
((35370, 18), (17685, 18))
((35862, 18), (17931, 18))
((36574, 19), (18287, 19))
((37726, 19), (18863, 19))
((37902, 18), (18951, 18))
((41278, 19), (20639, 19))
((41826, 18), (20913, 18))
((42546, 18), (21273, 18))
((44058, 18), (22029, 18))
((44750, 19), (22375, 19))
((44822, 19), (22411, 19))
((44906, 19), (22453, 19))
((44910, 19), (22455, 19))
((45626, 19), (22813, 19))
((45850, 19), (22925, 19))
((45918, 19), (22959, 19))
((45938, 19), (22969, 19))
((46050, 19), (23025, 19))
((46078, 19), (23039, 19))
((46506, 19), (23253, 19))
((46958, 19), (23479, 19))
((47118, 18), (23559, 18))
((47454, 19), (23727, 19))
((47758, 19), (23879, 19))
((47854, 19), (23927, 19))
((47958, 19), (23979, 19))
((47986, 19), (23993, 19))
((48014, 19), (24007, 19))
((48058, 19), (24029, 19))
((48098, 19), (24049, 19))
((48338, 19), (24169, 19))
((48382, 19), (24191, 19))
((48422, 19), (24211, 19))
((48458, 19), (24229, 19))
((48498, 19), (24249, 19))
((48910, 19), (24455, 19))
((48946, 19), (24473, 19))
((49038, 19), (24519, 19))
((49094, 19), (24547, 19))
((49726, 19), (24863, 19))
((50038, 19), (25019, 19))
((50042, 19), (25021, 19))
((50174, 19), (25087, 19))
((50534, 19), (25267, 19))
((50550, 19), (25275, 19))
((50750, 19), (25375, 19))
((51122, 19), (25561, 19))
((51382, 19), (25691, 19))
((51734, 19), (25867, 19))
((52798, 19), (26399, 19))
((53006, 19), (26503, 19))
((53034, 19), (26517, 19))
((53118, 19), (26559, 19))
((53342, 19), (26671, 19))
((53630, 19), (26815, 19))
((54154, 19), (27077, 19))
((54610, 19), (27305, 19))
((54854, 19), (27427, 19))
((55118, 19), (27559, 19))
((55156, 19), (27578, 19))
((55170, 19), (27585, 19))
((55850, 19), (27925, 19))
((57502, 19), (28751, 19))
((57646, 19), (28823, 19))
((57934, 19), (28967, 19))
((58510, 19), (29255, 19))
((58594, 19), (29297, 19))
((58950, 19), (29475, 19))
((59662, 19), (29831, 19))
((59698, 19), (29849, 19))
((60454, 19), (30227, 19))
((61966, 19), (30983, 19))
((61978, 19), (30989, 19))
((62354, 19), (31177, 19))
((62690, 19), (31345, 19))
((62886, 19), (31443, 19))
((63794, 19), (31897, 19))
((63894, 19), (31947, 19))
((64550, 19), (32275, 19))
((66074, 19), (33037, 19))
((66126, 19), (33063, 19))
((66466, 19), (33233, 19))
((66914, 19), (33457, 19))
((68650, 19), (34325, 19))
((69114, 20), (34557, 20))
((70670, 19), (35335, 19))
((70698, 19), (35349, 19))
((71702, 19), (35851, 19))
((73102, 20), (36551, 20))
((73578, 20), (36789, 20))
((73726, 20), (36863, 20))
((74558, 20), (37279, 20))
((74670, 20), (37335, 20))
((75166, 20), (37583, 20))
((75262, 20), (37631, 20))
((75710, 20), (37855, 20))
((75790, 19), (37895, 19))
((76094, 20), (38047, 20))
((76526, 20), (38263, 20))
((76782, 20), (38391, 20))
((77246, 20), (38623, 20))
((77742, 20), (38871, 20))
((77758, 20), (38879, 20))
((78262, 20), (39131, 20))
((78318, 20), (39159, 20))
((79454, 20), (39727, 20))
((80246, 20), (40123, 20))
((80638, 20), (40319, 20))
((81274, 20), (40637, 20))
((82494, 20), (41247, 20))
((82882, 19), (41441, 19))
((83554, 19), (41777, 19))
((84206, 20), (42103, 20))
((84430, 20), (42215, 20))
((84442, 20), (42221, 20))
((85042, 19), (42521, 19))
((85370, 20), (42685, 20))
((85466, 20), (42733, 20))
((85606, 20), (42803, 20))
((85886, 20), (42943, 20))
((86462, 20), (43231, 20))
((87002, 20), (43501, 20))
((87646, 20), (43823, 20))
((87834, 20), (43917, 20))
((87994, 20), (43997, 20))
((88014, 20), (44007, 20))
((88050, 20), (44025, 20))
((88090, 19), (44045, 19))
((88446, 20), (44223, 20))
((88634, 20), (44317, 20))
((88654, 20), (44327, 20))
((89014, 20), (44507, 20))
((89242, 20), (44621, 20))
((89466, 20), (44733, 20))
((89754, 20), (44877, 20))
((90550, 20), (45275, 20))
((90922, 20), (45461, 20))
((90966, 20), (45483, 20))
((91106, 20), (45553, 20))
((91130, 20), (45565, 20))
((91194, 20), (45597, 20))
((91438, 20), (45719, 20))
((91674, 20), (45837, 20))
((91762, 20), (45881, 20))
((91774, 20), (45887, 20))
((91874, 20), (45937, 20))
((92002, 20), (46001, 20))
((93006, 20), (46503, 20))
((93146, 20), (46573, 20))
((93242, 20), (46621, 20))
((93806, 20), (46903, 20))
((93994, 20), (46997, 20))
((94174, 20), (47087, 20))
((94222, 19), (47111, 19))
((94522, 20), (47261, 20))
((94734, 20), (47367, 20))
((94838, 20), (47419, 20))
((94862, 20), (47431, 20))
((94958, 20), (47479, 20))
((95118, 20), (47559, 20))
((95374, 20), (47687, 20))
((95502, 20), (47751, 20))
((95694, 20), (47847, 20))
((95854, 20), (47927, 20))
((96014, 20), (48007, 20))
((96098, 20), (48049, 20))
((96142, 20), (48071, 20))
((96226, 20), (48113, 20))
((96382, 20), (48191, 20))
((96526, 20), (48263, 20))
((96590, 20), (48295, 20))
((96806, 20), (48403, 20))
((96842, 20), (48421, 20))
((96882, 20), (48441, 20))
((97166, 20), (48583, 20))
((97338, 20), (48669, 20))
((97614, 20), (48807, 20))
((97806, 20), (48903, 20))
((97842, 20), (48921, 20))
((97990, 20), (48995, 20))
((98008, 20), (49004, 20))
((98174, 20), (49087, 20))
((98858, 20), (49429, 20))
((99150, 20), (49575, 20))
((99306, 20), (49653, 20))
((99314, 20), (49657, 20))
((99390, 20), (49695, 20))
((99730, 20), (49865, 20))
((99958, 20), (49979, 20))
((99962, 20), (49981, 20))
]]
py script/min_add_ver2.py ,加载下载的数据并调用 :在已知数据中测试囗最小加法链囗下限的乘法因子猜想
    # [1..=10**5]中共有(531对)本原反例
    #      其中共有2*(2对) 针对素因子[2,3]
    #      其中共有266个『偶数猜想』本原反例
    # 输出共533行，含有非数据行:num_failure_prime_factors_ge2/2行,all_prime_factors_failure__nonempty/0行
    #  『/, [^23],』搜索得:素因子5共6行
    #       ((16385, 15), 5, (3277, 15))
    #   #补偿『(』
    #  『/), \d\d\+, (』搜索得:无
    #   #补偿『)』
    #   素因子只有[2,3,5]
    #       ==>> 素因子3共259==(533-2 -266 -6)行
    #       验证:『/, 3,』『259n』『n』:确认！
[[
((382, 11), 2, (191, 11))
((513, 10), 3, (171, 10))
((1026, 11), 3, (342, 11))
((1281, 12), 3, (427, 12))
((1402, 13), 2, (701, 13))
((1486, 13), 2, (743, 13))
((2049, 12), 3, (683, 12))
((2052, 12), 3, (684, 12))
((2222, 14), 2, (1111, 14))
((2562, 13), 3, (854, 13))
((2565, 13), 3, (855, 13))
((2778, 14), 2, (1389, 14))
((2958, 14), 2, (1479, 14))
((3333, 14), 3, (1111, 14))
((3585, 14), 3, (1195, 14))
((4098, 13), 3, (1366, 13))
((4101, 14), 3, (1367, 14))
((4104, 13), 3, (1368, 13))
((4206, 15), 2, (2103, 15))
((4353, 14), 3, (1451, 14))
((4430, 15), 2, (2215, 15))
((4750, 15), 2, (2375, 15))
((5121, 14), 3, (1707, 14))
((5124, 14), 3, (1708, 14))
((5130, 14), 3, (1710, 14))
((5362, 15), 2, (2681, 15))
((5902, 15), 2, (2951, 15))
((7170, 15), 3, (2390, 15))
((8193, 14), 3, (2731, 15))
((8196, 14), 3, (2732, 14))
((8202, 15), 3, (2734, 15))
((8208, 14), 3, (2736, 14))
((8562, 16), 2, (4281, 16))
((8706, 15), 3, (2902, 15))
((8846, 16), 2, (4423, 16))
((8982, 16), 2, (4491, 16))
((9486, 16), 2, (4743, 16))
((10242, 15), 3, (3414, 15))
((10245, 15), 3, (3415, 15))
((10248, 15), 3, (3416, 15))
((10260, 15), 3, (3420, 15))
((10674, 16), 2, (5337, 16))
((11034, 16), 2, (5517, 16))
((11265, 16), 3, (3755, 16))
((11790, 16), 2, (5895, 16))
((12609, 16), 3, (4203, 16))
((12638, 17), 2, (6319, 17))
((12734, 17), 2, (6367, 17))
((12813, 16), 3, (4271, 16))
((12982, 17), 2, (6491, 17))
((13406, 17), 2, (6703, 17))
((13502, 17), 2, (6751, 17))
((14340, 16), 3, (4780, 16))
((14343, 16), 3, (4781, 16))
((14494, 17), 2, (7247, 17))
((14638, 17), 2, (7319, 17))
((14926, 17), 2, (7463, 17))
((14962, 17), 2, (7481, 17))
((15142, 17), 2, (7571, 17))
((15502, 17), 2, (7751, 17))
((15818, 17), 2, (7909, 17))
((15986, 17), 2, (7993, 17))
((16086, 17), 2, (8043, 17))
((16166, 17), 2, (8083, 17))
((16385, 15), 5, (3277, 15))
((16386, 15), 3, (5462, 16))
((16389, 16), 3, (5463, 16))
((16392, 15), 3, (5464, 15))
((16404, 16), 3, (5468, 16))
((16416, 15), 3, (5472, 15))
((16449, 16), 3, (5483, 16))
((16538, 17), 2, (8269, 17))
((16850, 17), 2, (8425, 17))
((17074, 17), 2, (8537, 17))
((17409, 16), 3, (5803, 16))
((17412, 16), 3, (5804, 16))
((17678, 17), 2, (8839, 17))
((17706, 17), 2, (8853, 17))
((17942, 17), 2, (8971, 17))
((18957, 17), 3, (6319, 17))
((18958, 17), 2, (9479, 17))
((18993, 17), 3, (6331, 17))
((19149, 17), 3, (6383, 17))
((19473, 17), 3, (6491, 17))
((20481, 16), 3, (6827, 16))
((20484, 16), 3, (6828, 16))
((20490, 16), 3, (6830, 16))
((20496, 16), 3, (6832, 16))
((20520, 16), 3, (6840, 16))
((20673, 17), 3, (6891, 17))
((20962, 17), 2, (10481, 17))
((21015, 17), 3, (7005, 17))
((21298, 17), 2, (10649, 17))
((22017, 17), 3, (7339, 17))
((22042, 17), 2, (11021, 17))
((22530, 17), 3, (7510, 17))
((22966, 18), 2, (11483, 18))
((23006, 18), 2, (11503, 18))
((23566, 17), 2, (11783, 17))
((24230, 18), 2, (12115, 18))
((24266, 18), 2, (12133, 18))
((24382, 18), 2, (12191, 18))
((24526, 18), 2, (12263, 18))
((24801, 17), 3, (8267, 17))
((24830, 18), 2, (12415, 18))
((24993, 17), 3, (8331, 17))
((25082, 18), 2, (12541, 18))
((25089, 17), 3, (8363, 17))
((25137, 17), 3, (8379, 17))
((25218, 17), 3, (8406, 17))
((25406, 18), 2, (12703, 18))
((25605, 17), 3, (8535, 17))
((25617, 17), 3, (8539, 17))
((25626, 17), 3, (8542, 17))
((25914, 18), 2, (12957, 18))
((26106, 18), 2, (13053, 18))
((26510, 18), 2, (13255, 18))
((26631, 17), 3, (8877, 17))
((26637, 17), 3, (8879, 17))
((26878, 18), 2, (13439, 18))
((27346, 18), 2, (13673, 18))
((27598, 18), 2, (13799, 18))
((27636, 18), 2, (13818, 18))
((28677, 17), 3, (9559, 17))
((28680, 17), 3, (9560, 17))
((28686, 17), 3, (9562, 17))
((28974, 18), 2, (14487, 18))
((29482, 18), 2, (14741, 18))
((29514, 18), 2, (14757, 18))
((29838, 18), 2, (14919, 18))
((30246, 18), 2, (15123, 18))
((31002, 18), 2, (15501, 18))
((31562, 18), 2, (15781, 18))
((31922, 18), 2, (15961, 18))
((32022, 18), 2, (16011, 18))
((32294, 18), 2, (16147, 18))
((32769, 16), 3, (10923, 17))
((32770, 16), 5, (6554, 16))
((32772, 16), 3, (10924, 17))
((32778, 17), 3, (10926, 17))
((32784, 16), 3, (10928, 16))
((32808, 17), 3, (10936, 17))
((32832, 16), 3, (10944, 16))
((32898, 17), 3, (10966, 17))
((33050, 18), 2, (16525, 18))
((33102, 18), 2, (16551, 18))
((33345, 17), 3, (11115, 17))
((33506, 18), 2, (16753, 18))
((33618, 18), 2, (16809, 18))
((34346, 18), 2, (17173, 18))
((34818, 17), 3, (11606, 17))
((34824, 17), 3, (11608, 17))
((34833, 17), 3, (11611, 17))
((35342, 18), 2, (17671, 18))
((35370, 18), 2, (17685, 18))
((35862, 18), 2, (17931, 18))
((36574, 19), 2, (18287, 19))
((37377, 18), 3, (12459, 18))
((37726, 19), 2, (18863, 19))
((37902, 18), 2, (18951, 18))
((37905, 18), 3, (12635, 18))
((37911, 18), 3, (12637, 18))
((37986, 18), 3, (12662, 18))
((38298, 18), 3, (12766, 18))
((38913, 18), 3, (12971, 18))
((38919, 18), 3, (12973, 18))
((40962, 17), 3, (13654, 17))
((40965, 17), 3, (13655, 18))
((40968, 17), 3, (13656, 17))
((40977, 18), 3, (13659, 18))
((40980, 17), 3, (13660, 17))
((40983, 18), 3, (13661, 18))
((40989, 18), 3, (13663, 18))
((40992, 17), 3, (13664, 17))
((41001, 18), 3, (13667, 18))
((41013, 18), 3, (13671, 18))
((41025, 18), 3, (13675, 18))
((41040, 17), 3, (13680, 17))
((41061, 18), 3, (13687, 18))
((41121, 18), 3, (13707, 18))
((41157, 18), 3, (13719, 18))
((41217, 18), 3, (13739, 18))
((41278, 19), 2, (20639, 19))
((41313, 18), 3, (13771, 18))
((41346, 18), 3, (13782, 18))
((41826, 18), 2, (20913, 18))
((42009, 18), 3, (14003, 18))
((42030, 18), 3, (14010, 18))
((42501, 18), 3, (14167, 18))
((42546, 18), 2, (21273, 18))
((43521, 18), 3, (14507, 18))
((44034, 18), 3, (14678, 18))
((44037, 18), 3, (14679, 18))
((44049, 18), 3, (14683, 18))
((44055, 18), 3, (14685, 18))
((44058, 18), 2, (22029, 18))
((44058, 18), 3, (14686, 18))
num_failure_prime_factors_ge2:44058: [2 <= 2 <= 4]
((44750, 19), 2, (22375, 19))
((44822, 19), 2, (22411, 19))
((44906, 19), 2, (22453, 19))
((44910, 19), 2, (22455, 19))
((45057, 18), 3, (15019, 18))
((45060, 18), 3, (15020, 18))
((45069, 18), 3, (15023, 18))
((45626, 19), 2, (22813, 19))
((45850, 19), 2, (22925, 19))
((45918, 19), 2, (22959, 19))
((45938, 19), 2, (22969, 19))
((46050, 19), 2, (23025, 19))
((46078, 19), 2, (23039, 19))
((46506, 19), 2, (23253, 19))
((46958, 19), 2, (23479, 19))
((47109, 18), 3, (15703, 18))
((47118, 18), 2, (23559, 18))
((47118, 18), 3, (15706, 18))
num_failure_prime_factors_ge2:47118: [2 <= 2 <= 3]
((47127, 18), 3, (15709, 18))
((47454, 19), 2, (23727, 19))
((47758, 19), 2, (23879, 19))
((47854, 19), 2, (23927, 19))
((47958, 19), 2, (23979, 19))
((47986, 19), 2, (23993, 19))
((48014, 19), 2, (24007, 19))
((48058, 19), 2, (24029, 19))
((48098, 19), 2, (24049, 19))
((48338, 19), 2, (24169, 19))
((48382, 19), 2, (24191, 19))
((48422, 19), 2, (24211, 19))
((48458, 19), 2, (24229, 19))
((48498, 19), 2, (24249, 19))
((48910, 19), 2, (24455, 19))
((48946, 19), 2, (24473, 19))
((49038, 19), 2, (24519, 19))
((49094, 19), 2, (24547, 19))
((49155, 17), 5, (9831, 17))
((49473, 18), 3, (16491, 18))
((49602, 18), 3, (16534, 18))
((49713, 18), 3, (16571, 18))
((49726, 19), 2, (24863, 19))
((49761, 18), 3, (16587, 18))
((49953, 18), 3, (16651, 18))
((49986, 18), 3, (16662, 18))
((50038, 19), 2, (25019, 19))
((50042, 19), 2, (25021, 19))
((50174, 19), 2, (25087, 19))
((50178, 18), 3, (16726, 18))
((50193, 18), 3, (16731, 18))
((50241, 18), 3, (16747, 18))
((50274, 18), 3, (16758, 18))
((50436, 18), 3, (16812, 18))
((50534, 19), 2, (25267, 19))
((50550, 19), 2, (25275, 19))
((50750, 19), 2, (25375, 19))
((51122, 19), 2, (25561, 19))
((51201, 18), 3, (17067, 18))
((51210, 18), 3, (17070, 18))
((51213, 18), 3, (17071, 18))
((51225, 18), 3, (17075, 18))
((51234, 18), 3, (17078, 18))
((51252, 18), 3, (17084, 18))
((51382, 19), 2, (25691, 19))
((51734, 19), 2, (25867, 19))
((52798, 19), 2, (26399, 19))
((53006, 19), 2, (26503, 19))
((53034, 19), 2, (26517, 19))
((53118, 19), 2, (26559, 19))
((53253, 18), 3, (17751, 18))
((53262, 18), 3, (17754, 18))
((53265, 18), 3, (17755, 18))
((53274, 18), 3, (17758, 18))
((53342, 19), 2, (26671, 19))
((53630, 19), 2, (26815, 19))
((54154, 19), 2, (27077, 19))
((54610, 19), 2, (27305, 19))
((54854, 19), 2, (27427, 19))
((55118, 19), 2, (27559, 19))
((55156, 19), 2, (27578, 19))
((55170, 19), 2, (27585, 19))
((55850, 19), 2, (27925, 19))
((56589, 19), 3, (18863, 19))
((57345, 18), 3, (19115, 18))
((57351, 18), 3, (19117, 18))
((57354, 18), 3, (19118, 18))
((57360, 18), 3, (19120, 18))
((57372, 18), 3, (19124, 18))
((57502, 19), 2, (28751, 19))
((57646, 19), 2, (28823, 19))
((57934, 19), 2, (28967, 19))
((58510, 19), 2, (29255, 19))
((58594, 19), 2, (29297, 19))
((58950, 19), 2, (29475, 19))
((59662, 19), 2, (29831, 19))
((59698, 19), 2, (29849, 19))
((60454, 19), 2, (30227, 19))
((60945, 19), 3, (20315, 19))
((61966, 19), 2, (30983, 19))
((61978, 19), 2, (30989, 19))
((62354, 19), 2, (31177, 19))
((62690, 19), 2, (31345, 19))
((62886, 19), 2, (31443, 19))
((63501, 19), 3, (21167, 19))
((63794, 19), 2, (31897, 19))
((63894, 19), 2, (31947, 19))
((64550, 19), 2, (32275, 19))
((65538, 17), 3, (21846, 18))
((65540, 17), 5, (13108, 17))
((65541, 18), 3, (21847, 18))
((65544, 17), 3, (21848, 18))
((65553, 18), 3, (21851, 18))
((65556, 18), 3, (21852, 18))
((65568, 17), 3, (21856, 17))
((65601, 18), 3, (21867, 18))
((65616, 18), 3, (21872, 18))
((65664, 17), 3, (21888, 17))
((65793, 18), 3, (21931, 18))
((65796, 18), 3, (21932, 18))
((66074, 19), 2, (33037, 19))
((66126, 19), 2, (33063, 19))
((66466, 19), 2, (33233, 19))
((66561, 18), 3, (22187, 18))
((66690, 18), 3, (22230, 18))
((66914, 19), 2, (33457, 19))
((68229, 19), 3, (22743, 19))
((68613, 19), 3, (22871, 19))
((68650, 19), 2, (34325, 19))
((69114, 20), 2, (34557, 20))
((69633, 18), 3, (23211, 18))
((69636, 18), 3, (23212, 18))
((69648, 18), 3, (23216, 18))
((69666, 18), 3, (23222, 18))
((70670, 19), 2, (35335, 19))
((70698, 19), 2, (35349, 19))
((71697, 19), 3, (23899, 19))
((71702, 19), 2, (35851, 19))
((71937, 19), 3, (23979, 19))
((73102, 20), 2, (36551, 20))
((73578, 20), 2, (36789, 20))
((73726, 20), 2, (36863, 20))
((74241, 19), 3, (24747, 19))
((74558, 20), 2, (37279, 20))
((74625, 19), 3, (24875, 19))
((74670, 20), 2, (37335, 20))
((74754, 19), 3, (24918, 19))
((74757, 19), 3, (24919, 19))
((75045, 19), 3, (25015, 19))
((75166, 20), 2, (37583, 20))
((75262, 20), 2, (37631, 20))
((75710, 20), 2, (37855, 20))
((75789, 19), 3, (25263, 19))
((75790, 19), 2, (37895, 19))
((75801, 19), 3, (25267, 19))
((75810, 19), 3, (25270, 19))
((75813, 19), 3, (25271, 19))
((75822, 19), 3, (25274, 19))
((75825, 19), 3, (25275, 19))
((75972, 19), 3, (25324, 19))
((76094, 20), 2, (38047, 20))
((76293, 19), 3, (25431, 19))
((76305, 19), 3, (25435, 19))
((76526, 20), 2, (38263, 20))
((76596, 19), 3, (25532, 19))
((76782, 20), 2, (38391, 20))
((77246, 20), 2, (38623, 20))
((77742, 20), 2, (38871, 20))
((77758, 20), 2, (38879, 20))
((77826, 19), 3, (25942, 19))
((77829, 19), 3, (25943, 19))
((77838, 19), 3, (25946, 19))
((78262, 20), 2, (39131, 20))
((78318, 20), 2, (39159, 20))
((78849, 19), 3, (26283, 19))
((79454, 20), 2, (39727, 20))
((80246, 20), 2, (40123, 20))
((80638, 20), 2, (40319, 20))
((81274, 20), 2, (40637, 20))
((81921, 18), 3, (27307, 19))
((81924, 18), 3, (27308, 18))
((81927, 19), 3, (27309, 19))
((81930, 18), 3, (27310, 19))
((81933, 19), 3, (27311, 19))
((81936, 18), 3, (27312, 18))
((81954, 19), 3, (27318, 19))
((81957, 19), 3, (27319, 19))
((81960, 18), 3, (27320, 18))
((81963, 19), 3, (27321, 19))
((81966, 19), 3, (27322, 19))
((81969, 19), 3, (27323, 19))
((81978, 19), 3, (27326, 19))
((81984, 18), 3, (27328, 18))
((81987, 19), 3, (27329, 19))
((82002, 19), 3, (27334, 19))
((82017, 19), 3, (27339, 19))
((82026, 19), 3, (27342, 19))
((82050, 19), 3, (27350, 19))
((82053, 19), 3, (27351, 19))
((82080, 18), 3, (27360, 18))
((82083, 19), 3, (27361, 19))
((82113, 19), 3, (27371, 19))
((82122, 19), 3, (27374, 19))
((82242, 19), 3, (27414, 19))
((82245, 19), 3, (27415, 19))
((82305, 19), 3, (27435, 19))
((82314, 19), 3, (27438, 19))
((82434, 19), 3, (27478, 19))
((82437, 19), 3, (27479, 19))
((82494, 20), 2, (41247, 20))
((82593, 19), 3, (27531, 19))
((82626, 19), 3, (27542, 19))
((82692, 19), 3, (27564, 19))
((82755, 19), 3, (27585, 19))
((82851, 19), 3, (27617, 19))
((82882, 19), 2, (41441, 19))
((83554, 19), 2, (41777, 19))
((83973, 19), 3, (27991, 19))
((83991, 19), 3, (27997, 19))
((84009, 19), 3, (28003, 19))
((84018, 19), 3, (28006, 19))
((84060, 19), 3, (28020, 19))
((84206, 20), 2, (42103, 20))
((84430, 20), 2, (42215, 20))
((84442, 20), 2, (42221, 20))
((84993, 19), 3, (28331, 19))
((85002, 19), 3, (28334, 19))
((85035, 19), 3, (28345, 19))
((85042, 19), 2, (42521, 19))
((85370, 20), 2, (42685, 20))
((85466, 20), 2, (42733, 20))
((85606, 20), 2, (42803, 20))
((85886, 20), 2, (42943, 20))
((86462, 20), 2, (43231, 20))
((87002, 20), 2, (43501, 20))
((87042, 19), 3, (29014, 19))
((87045, 19), 3, (29015, 19))
((87057, 19), 3, (29019, 19))
((87646, 20), 2, (43823, 20))
((87834, 20), 2, (43917, 20))
((87994, 20), 2, (43997, 20))
((88014, 20), 2, (44007, 20))
((88050, 20), 2, (44025, 20))
((88065, 19), 3, (29355, 19))
((88068, 19), 3, (29356, 19))
((88074, 19), 3, (29358, 19))
((88090, 19), 2, (44045, 19))
((88098, 19), 3, (29366, 19))
((88107, 19), 3, (29369, 19))
((88110, 19), 3, (29370, 19))
((88116, 19), 3, (29372, 19))
((88446, 20), 2, (44223, 20))
((88634, 20), 2, (44317, 20))
((88654, 20), 2, (44327, 20))
((89014, 20), 2, (44507, 20))
((89242, 20), 2, (44621, 20))
((89466, 20), 2, (44733, 20))
((89754, 20), 2, (44877, 20))
((90114, 19), 3, (30038, 19))
((90117, 19), 3, (30039, 19))
((90120, 19), 3, (30040, 19))
((90123, 19), 3, (30041, 19))
((90138, 19), 3, (30046, 19))
((90550, 20), 2, (45275, 20))
((90922, 20), 2, (45461, 20))
((90966, 20), 2, (45483, 20))
((91106, 20), 2, (45553, 20))
((91130, 20), 2, (45565, 20))
((91194, 20), 2, (45597, 20))
((91438, 20), 2, (45719, 20))
((91674, 20), 2, (45837, 20))
((91762, 20), 2, (45881, 20))
((91774, 20), 2, (45887, 20))
((91874, 20), 2, (45937, 20))
((92002, 20), 2, (46001, 20))
((93006, 20), 2, (46503, 20))
((93146, 20), 2, (46573, 20))
((93242, 20), 2, (46621, 20))
((93806, 20), 2, (46903, 20))
((93994, 20), 2, (46997, 20))
((94174, 20), 2, (47087, 20))
((94209, 19), 3, (31403, 19))
((94218, 19), 3, (31406, 19))
((94221, 19), 3, (31407, 19))
((94222, 19), 2, (47111, 19))
((94236, 19), 3, (31412, 19))
((94254, 19), 3, (31418, 19))
((94522, 20), 2, (47261, 20))
((94734, 20), 2, (47367, 20))
((94838, 20), 2, (47419, 20))
((94862, 20), 2, (47431, 20))
((94958, 20), 2, (47479, 20))
((95118, 20), 2, (47559, 20))
((95374, 20), 2, (47687, 20))
((95502, 20), 2, (47751, 20))
((95694, 20), 2, (47847, 20))
((95854, 20), 2, (47927, 20))
((96014, 20), 2, (48007, 20))
((96098, 20), 2, (48049, 20))
((96142, 20), 2, (48071, 20))
((96226, 20), 2, (48113, 20))
((96382, 20), 2, (48191, 20))
((96526, 20), 2, (48263, 20))
((96590, 20), 2, (48295, 20))
((96806, 20), 2, (48403, 20))
((96842, 20), 2, (48421, 20))
((96882, 20), 2, (48441, 20))
((97166, 20), 2, (48583, 20))
((97338, 20), 2, (48669, 20))
((97614, 20), 2, (48807, 20))
((97806, 20), 2, (48903, 20))
((97842, 20), 2, (48921, 20))
((97990, 20), 2, (48995, 20))
((98008, 20), 2, (49004, 20))
((98174, 20), 2, (49087, 20))
((98305, 18), 5, (19661, 18))
((98310, 18), 5, (19662, 18))
((98817, 19), 3, (32939, 19))
((98858, 20), 2, (49429, 20))
((98913, 19), 3, (32971, 19))
((98946, 19), 3, (32982, 19))
((99009, 19), 3, (33003, 19))
((99150, 20), 2, (49575, 20))
((99204, 19), 3, (33068, 19))
((99306, 20), 2, (49653, 20))
((99314, 20), 2, (49657, 20))
((99390, 20), 2, (49695, 20))
((99393, 19), 3, (33131, 19))
((99426, 19), 3, (33142, 19))
((99522, 19), 3, (33174, 19))
((99730, 20), 2, (49865, 20))
((99873, 19), 3, (33291, 19))
((99906, 19), 3, (33302, 19))
((99958, 20), 2, (49979, 20))
((99962, 20), 2, (49981, 20))
((99972, 19), 3, (33324, 19))
]]



上面多是:
    [[???] -> [最少加法(n) <= ???]] 型定理
急需:
    [[???] -> [最少加法(n) >= ???]] 型定理
    ===:
    [[最少加法(n) <= ???] -> [???]] 型定理
    [最少加法囗反函数囗下限(m;[0..=???]) == ???] 型定理
        #枚举极大值

[@[m>=2] -> [最少加法(m) >= 1+min{最少加法(n) | [n :<- [(m+1)//2..=m-1]]}]]
[@[m>=2] -> [最少加法(m) >= min{(最少加法(n)+2-[?[ls :<- 最小加法链集(n)] -> [(m-n) <- ls]]) | [n :<- [(m+1)//2..=m-1]]}]]
    [@[m>=2] -> [最少加法(m) >= min{(最少加法(n)+1+[@[ls :<- 最小加法链集(n)] -> [not$ [(m-n) <- ls]]]) | [n :<- [(m+1)//2..=m-1]]}]]
[@[k>=0] -> [[最少加法(2**k) == k][最小加法链集(2**k) == {[2**i | [i :<- [0..=k]]]}]]]
    #增强:[@[k>=0] -> [最少加法(2**k) == k]]

#正整数加法: 比特1的总数控制
[n >= 1]:
    [正整数二进制编码中一的数量(n) =[def]= bin(n).count('1')]
    [pint2num_1bits(n) := 正整数二进制编码中一的数量(n)]
[@[m,n >= 1] -> [pint2num_1bits(m+n) <= pint2num_1bits(m)+pint2num_1bits(n)]]
[@[m,n >= 1] -> [m>=n] -> [pint2num_1bits(m+n) <= pint2num_1bits(m)+pint2num_1bits(n) -[floor_log2(m+n) > floor_log2(m)]*(1+floor_log2(m)-floor_log2(n))]]

[@[m>=2] -> [
    [最少加法(m) >= 1]
    [[ls :<- 最小加法链集(m)] -> [
        [len(ls) == 1+最少加法(m) >= 2]
        [is_sorted(ls)]
        [ls[-1] == m]
        [m/2 <= ls[-2] < m]
        [(m-ls[-2]) <- ls[:-1]]
        ]]
    ]]
[us :: {int{>=2}}]:
    [次极大数集囗最小加法链(us) =[def]= {ls[-2] | [m :<- us][ls :<- 最小加法链集(m)]}]
[@[m>=2] -> [min(次极大数集囗最小加法链({m})) >= m/2]]

[us :: [uint]]:
    [最少加法囗反函数(us) =[def]= {n <- [1..] | [最少加法(n) <- us]}]
[m>=1][us :: [uint]]:
    [最少加法囗反函数囗下限(m;us) =[def]= {n <- [m..] | [最少加法(n) <- us]}]
[m>=1][N>=0]:
    [最少加法囗反函数囗下限囗上限(m;N) =[def]= 最少加法囗反函数囗下限(m;[0..=N])]
[@[N>=0] -> @[m>=1] -> @[n >= m] -> [[n <- 最少加法囗反函数囗下限囗上限(m;N)] <-> [最少加法(n) <= N]]]
[@[N>=0] -> @[m>=1] -> @[n >= m] -> [not$ [n <- 最少加法囗反函数囗下限囗上限(m;N)]] -> [最少加法(n) >= N+1]]

!![@[m>=2] -> [min(次极大数集囗最小加法链({m})) >= m/2]]
[@[i>=0] -> @[j>=0] -> [次极大数集囗最小加法链(最少加法囗反函数囗下限囗上限(2**(i+1);j+1)) |<=| 最少加法囗反函数囗下限囗上限(2**i;j)]]

[@[i>=0] -> [最少加法囗反函数囗下限囗上限(2**(i+1);i) == {}]]
[@[i>=0] -> [最少加法囗反函数囗下限囗上限(2**i;i) == {2**i}]]
[已证明]:[@[i>=0] -> [最少加法囗反函数囗下限囗上限(2**i;i+1) == {2**i} \-/ {2**i+2**j | [j :<- [0..=i]]}]]
    #[j==i] --> 2**(i+1)
    #见下面证明

[最小加法链集(1) == {[1]}]
[已证明]:[@[i>=0] -> [
    [最少加法囗反函数囗下限囗上限(2**i;i) == {2**i}]
        # ==>> [最少加法囗反函数囗下限囗上限(2**(i+1);i) == {}]
    [最少加法囗反函数囗下限(2**i;[i+1]) == 最少加法囗反函数囗下限囗上限(2**i;i+1) \-\ 最少加法囗反函数囗下限囗上限(2**i;i) == {2**i+2**j | [j :<- [0..=i]]}]
    [最小加法链集(2**i) == {[2**j | [j <- [0..=i]]]}]
    [@[j <- [0..=i]] -> [m := 2**i+2**j] -> [
        [最小加法链集(m)
        == (if j == i-3 then {ls++[(2*m///3),m] | [ls :<- 最小加法链集(m///3)]} else {})
            # m==(3*2**j)*3
            # [0b1001 == 9]
            # (4, 9, 3, [(1, 2, 3, 6, 9), (1, 2, 4, 5, 9), (1, 2, 4, 8, 9)])
                # (1,2,3,6,9)
                # 以下两个在『加法交换律』下是等价类:(1+4+4)==9
                # (1,2,4,8,9)
                # (1,2,4,5,9)
                #
        \-/(if 1 <= j < i then {ls++[m] | [ls :<- 最小加法链集(m///2)]} else {})
            # m==(2**(i-1)+2**(j-1))*2
            #   在『乘法交换律』下，与 其他上下分支 是 等价类
        \-/(if j <= i-2 then {ls++[(2**(i-1)+2**j),m] | [ls :<- 最小加法链集(2**(i-1))]} else {})
            # m==(2**(i-1)+2**j)+(2**(i-1))
            #   在『加法交换律』下，与 下面 m==2**i+2**j 是等价类
        \-/{ls++[m] | [ls :<- 最小加法链集(2**i)]}
            # m==2**i+2**j

        ]
        [次极大数集囗最小加法链({m})
        == (if j == i-3 then {(2*m///3)} else {})
        \-/(if 1 <= j < i then {(m///2)} else {})
        \-/(if j <= i-2 then {(2**(i-1)+2**j)} else {})
        \-/{2**i}
        ]
        ]]
    [次极大数集囗最小加法链(最少加法囗反函数囗下限(2**i;[i+1])) == \-/~ [({[j == i-3]?:(2*m///3), [1 <= j < i]?:(m///2), [j <= i-2]?:(2**(i-1)+2**j), 2**i}) | [j :<- [0..=i]] -> [m := 2**i+2**j]]]
    ]]
    [[证明:归纳法:
    * [i==0]:
        [最少加法囗反函数囗下限囗上限(2**i;i+1) \-\ 最少加法囗反函数囗下限囗上限(2**i;i)
        == 最少加法囗反函数囗下限囗上限(1;1) \-\ 最少加法囗反函数囗下限囗上限(1;0)
        == {1,2} \-\ {0}
        == {2}
        == {2**0+2**0}
        == {2**i+2**j | [j :<- [0..=i]]}
        ]
    * [i>=1][@[_i <- [0..<i]] -> [最少加法囗反函数囗下限(2**i_;[i_+1]) == ({2**i_+2**j | [j :<- [0..=i_]]})]]:
        !![@[i>=0] -> @[j>=0] -> [次极大数集囗最小加法链(最少加法囗反函数囗下限囗上限(2**(i+1);j+1)) |<=| 最少加法囗反函数囗下限囗上限(2**i;j)]]
        [次极大数集囗最小加法链(最少加法囗反函数囗下限囗上限(2**i;i+1)) |<=| 最少加法囗反函数囗下限囗上限(2**(i-1);i) == ({2**(i-1)} \-/ {2**(i-1)+2**j | [j :<- [0..=(i-1)]]})] #归纳法
        [m :<- 最少加法囗反函数囗下限囗上限(2**i;i+1)][ls :<- 最小加法链集(m)]:
            !!最少加法囗反函数囗下限囗上限 定义
            [m <- [2**i..]][最少加法(m) <= i+1]
            [m >= 2**i >= 2**1 == 2]
            [最少加法(m) >= 1]
            [len(ls) == 1+最少加法(m) >= 2]
            [ls[-1] == m]
            [n := ls[-2]] #m某链 的 次极大数
            [n <- ({2**(i-1)} \-/ {2**(i-1)+2**j | [j :<- [0..=(i-1)]]})]
            !![@[m>=2] -> [min(次极大数集囗最小加法链({m})) >= m/2]]
            [n >= m/2]
            [m <= 2*n]
            [[分支:
            * [n == 2**(i-1)]:
                [m <= 2*n == 2**i]
                !![m >= 2**i]
                [m == 2**i]
                [m == n+n] #ok
                [ls[:-1] <- 最小加法链集(n)]
                [最少加法(n) == i-1]
                [最少加法(m) == 1+最少加法(n) == i]

            * [j :<- [0..<=(i-1)]][n == 2**(i-1)+2**j]:
                [n+n > 2**i] #m存在
                !!归纳法
                [最少加法(n) == i]
                [len(ls[:-1]) >= 1+最少加法(n) == i+1]
                [len(ls) >= i+2]
                [最少加法(m) == len(ls) -1 >= i+1]
                !![最少加法(m) <= i+1]
                [最少加法(m) == i+1]
                [len(ls) == i+2]
                !![最少加法(2**i) == i]
                [m =!= 2**i]
                !![m >= 2**i]
                [m > 2**i]

                [len(ls[:-1]) == 最少加法(m) == i+1 == 1+最少加法(n)]
                [ls[:-1] <- 最小加法链集(n)]
                [最少加法(n) == i >= 1]
                [n >= 2]
                [len(ls) >= 3]
                [w := ls[-3]] #n某链 的 次极大数
                !![次极大数集囗最小加法链(最少加法囗反函数囗下限(2**i;[i+1])) == \-/~ [({[j == i-3]?:(2*m///3), [1 <= j < i]?:(m///2), [j <= i-2]?:(2**(i-1)+2**j), 2**i}) | [j :<- [0..=i]] -> [m := 2**i+2**j]]] #其实只是单个，替换{m:=n,i:=i-1}
                !!归纳法 递归:
                [w <- {[j == i-4]?:(2*n///3), [1 <= j < i-1]?:(n///2), [j <= i-3]?:(2**(i-2)+2**j), 2**(i-1)}]

                * [j == (i-1)]:
                    [n == 2**i]
                    [w <- {2**(i-1)}]
                    !![@[k>=0] -> [[最少加法(2**k) == k][最小加法链集(2**k) == {[2**i | [i :<- [0..=k]]]}]]]
                    !![ls[:-1] <- 最小加法链集(n)]
                    [ls[:-1] == [2**k | [k :<- [0..=i]]]]
                    [m <- {2**i+2**k | [k :<- [0..=i]]}] #ok#非平凡
                        #含 (n+n)

                * [j < (i-1)]:
                    !![n == 2**(i-1)+2**j]
                    [2**(i-1) < n < 2**i]
                    !![w <- {[j == i-4]?:(2*n///3), [1 <= j < i-1]?:(n///2), [j <= i-3]?:(2**(i-2)+2**j), 2**(i-1)}]
                    !![j < (i-1)]
                    * [j==i-4][w==(2*n///3)]:
                        [n==9*2**j]
                        [n+w==n*(1+2/3)==15*2**j < 16*2**j == 2**(j+4) == 2**i]
                        [m == n+n == 18*2**j > 2**i] #ok
                    * [1 <= j < i-1][w==(n///2)]:
                        [n+w == n*(1+1/2) == n*3/2]
                        [n+w < 2**i]:
                            <==> [n < 2**(i+1)*1/3]
                            !![1/3 == 0b0.01_01_01_...]
                            !![n == 2**(i-1)+2**j]
                            <==> [j <= i-3]
                        [[j > i-3] <==> [n+w >= 2**i]]
                        !![1 <= j < i-1]
                        [[j == i-2 >= 1] <==> [n+w >= 2**i]]
                        * [1 <= j <= i-3]
                            [m == n+n > 2**i] #ok
                        * [j==i-2][i>=3]:
                            !![len(ls) == i+2]
                            [len(ls) == i+2 >= 5]
                            [u := ls[-4]]
                            [最少加法(u) <= len(ls[:-3])-1 == len(ls) -3 -1 == i-2]
                            [u <= 2**(i-2)]
                            [n+u <= 2**(i-1) +2**j +2**(i-2) == 2**i]
                            !![m > 2**i]
                            [m <- {n+n, n+w}]
                            [n+w == n+n/2 == 2**(i-1) +2**j +2**(i-2) +2**(j-1) == 2**(i-1) +2**(i-2) +2**(i-2) +2**(i-3) == 2**i +2**(i-3)]
                            [m <- {2**i+2**(i-1), 2**i +2**(i-3)}] #ok#非平凡

                    * [j <= i-3][w==(2**(i-2)+2**j)]:
                        [n+w == 2**(i-1) +2**j +2**(i-2) +2**j == 2**(i-1) +2**(i-2) +2**(j+1) <= 2**(i-1) +2**(i-2) +2**(i-3 +1) <= 2**i]
                        !![m > 2**i]
                        [m == n+n] #ok
                    * [w==2**(i-1)]:
                        [n+w == 2**(i-1) +2**j +2**(i-1) == 2**i +2**j > 2**i]
                        [m <- {n+n, n+w}]
                        [m <- {2**i+2**(j+1), 2**i+2**j}] #ok#非平凡
            ]]分支
            ===
            [[分支摘要:非平凡的m #除了[m==n+n]
            * [j :<- [0..<=(i-1)]][n == 2**(i-1)+2**j]:
                [w := ls[-3]] #n某链 的 次极大数
                * [j == (i-1)]:
                    [m <- {2**i+2**k | [k :<- [0..=i]]}] #ok#非平凡
                        #按比特位拆分
                * [j==i-2][i>=3]:
                    [m <- {2**i+2**(i-1), 2**i +2**(i-3)}] #ok#非平凡
                        #[m==(n///2)*3] #[9==3*3]
                * [w==2**(i-1)]:
                    [m <- {2**i+2**(j+1), 2**i+2**j}] #ok#非平凡
                        #『加法交换律』:[m==(w+2**j)+w==(w+w)+2**j]
            ]]分支摘要

        证毕！
    ]]
[@[i,j,k::int] -> [i>j>k>=0] -> [最少加法(2**i+2**j+2**k) == i+2]]
    [[证明:
    !![@[i>=0] -> [最少加法囗反函数囗下限囗上限(2**i;i+1) == {2**i} \-/ {2**i+2**j | [j :<- [0..=i]]}]]
    !![@[N>=0] -> @[m>=1] -> @[n >= m] -> [not$ [n <- 最少加法囗反函数囗下限囗上限(m;N)]] -> [最少加法(n) >= N+1]]
        # 替换{N:=i+1, m:=2**i, n:=(2**i+2**j+2**k)}
    [最少加法(2**i+2**j+2**k) >= i+2]

    !![@[m>=1] -> [floor_log2(m) <= 最少加法(m) <= floor_log2(m) + bin(m).count('1')-1]]
        # 替换{m:=(2**i+2**j+2**k)}
    [最少加法(2**i+2**j+2**k) <= i+3-1 == i+2]
    !![最少加法(2**i+2**j+2**k) >= i+2]
    [最少加法(2**i+2**j+2**k) == i+2]
    ]]
[not$ [@[i,j,s,t::int] -> [i>j>s>t>=0] -> [最少加法(2**i+2**j+2**s+2**t) == i+3]]]
    [[证明:
    [最少加法(15)==5]
        # (5, 15, 4, [(1, 2, 3, 5, 10, 15), (1, 2, 3, 6, 9, 15), (1, 2, 3, 6, 12, 15), (1, 2, 4, 5, 10, 15)])
        # [15==2**3+2**2+2**1+2**0]
    ]]

[@[m>=1] -> [num_1bits_of_m := bin(m).count('1')] -> [floor_log2(m) + min(3,num_1bits_of_m)-1 <= 最少加法(m) <= floor_log2(m) + num_1bits_of_m-1]]
    # 增强: [@[m>=1] -> [floor_log2(m) <= 最少加法(m) <= floor_log2(m) + bin(m).count('1')-1]]

[[尝试寻找反例:最小加法链囗偶数猜想:
    #通过程序搜索下载的数据，已发现反例，见上面
    [[bug:一个错误的反例:[{(171,2*171), (2*171, 3*171+171)}两者中有一反例]
        原来以为(4*171==3*171+171)，但此拆分并不合理，[not$ [171 <- 最小加法链集(3*171)]]
    ]]bug:一个错误的反例
    [[
    [2%3==-1]
    [k :: uint]:
        [2**(2*k+1)%3==-1]
        [(2**(2*k+1)+1)%3==0]
        [0b1_00_00_..._00_1///3 == 0b0_01_01_..._01_1]
        !![@[m>=1] -> [num_1bits_of_m := bin(m).count('1')] -> [floor_log2(m) + min(3,num_1bits_of_m)-1 <= 最少加法(m) <= floor_log2(m) + num_1bits_of_m-1]]
        * [k>=1]:
            [最少加法((2**(2*k+1)+1)///3) >= (2*k-1) +min(3,k+1)-1 == (2*k-1) +min(2,k)]
            * [k==1]:
                [最少加法((2**(2*k+1)+1)///3) == (2*k-1) +min(2,k) == 2*k-1 +k == 3*k-1 == 2]
            * [k>=2]:
                [最少加法((2**(2*k+1)+1)///3) == (2*k-1) +min(2,k) == 2*k-1 +2 == 2*k+1]
        * [k==0]:
            [最少加法((2**(2*k+1)+1)///3) == 最少加法(1) == 0 >= -1 == (2*k-1) +min(2,k)]
        [最少加法((2**(2*k+1)+1)///3) >= [k==0]0 +[k==1]2 +[k>=2](2*k+1)]
        #(2**i+2**j)型:
        [最少加法(2**(2*k+1)+1) == 2*k+2]
        # 没用！下限估值太小:[下限估值(最少加法((2**(2*k+1)+1)///3)) <= 2*k+1 < 2*k+2]
        [k==4]:
            [最少加法(171) == 最少加法((2**(2*k+1)+1)///3) >= (2*k+1) == 9]
                #检验:[最少加法(171) == 10]
                # [最少加法(513) == 最少加法(2**9+1) == 10 == 2*k+2]
    ]]
]]


idea:上限估计:[[
    [m>=1]:
        [最少加法(2*m) <= 1+最少加法(m)]
            # (2*m+1) =[拆分]= m+m
        [最少加法(2*m+1) <= 2+最少加法(m)]
            # (2*m+1) =[拆分]= m+m+1
        [m>=2]:
            [最少加法(m) <= 1+(m%2)+最少加法(m//2)]
        [m>=n>=2]:
            [m//n >= 1]
                # 最少加法(m//n)的 前置条件
            [m%n < n <= m]
                # 递归:递降约束

            #bug:[最少加法(m) <= count_num_1bits_of_uint(m%n)+最少加法(n)+最少加法(m//n)]
            #   比特位2**i 不一定存在
            #bug:[最少加法(m) <= ([m%n>=1]最少加法(m%n)+最少加法(n))+最少加法(m//n)]
            [最少加法(m) <= ([m%n>=1]max(1,最少加法(m%n))+最少加法(n))+最少加法(m//n)]
                #因为[n>=2], 比特位2**1必存在，加法拆分时若[(m%n)>=2]则无需加一
            #bug:[最少加法(m) <= ((count_num_1bits_of_uint(m%n)-1)+(floor_log2(n)+count_num_1bits_of_uint(n)-1))+最少加法(m//n)]
            #   『-1』-->『-0』:(m%n)的所有1比特位加到(m//n*n)上
            [最少加法(m) <= ((count_num_1bits_of_uint(m%n)-0)+(floor_log2(n)+count_num_1bits_of_uint(n)-1))+最少加法(m//n)]
                # 共享 比特位2**i <= n
            ##综上:
            [最少加法(m) <= min(((count_num_1bits_of_uint(m%n)-0)+(floor_log2(n)+count_num_1bits_of_uint(n)-1)), ([m%n>=1]max(1,最少加法(m%n))+最少加法(n)))+最少加法(m//n)]
            [k>=0][n==2**k+1]:
                [最少加法(n) == k+1]
                [最少加法(m) <= min((count_num_1bits_of_uint(m%n)-0), [m%(2**k+1)>=1]max(1,最少加法(m%(2**k+1))))+(k+1)+最少加法(m//(2**k+1))]
    ===
    [k>=0][m>=(2**k+1)][(q,r):=divmod(m,(2**k+1))]:
        [最少加法(m) <= min((count_num_1bits_of_uint(r)-0), [r>=1]max(1,最少加法(r))) +(k+1) +最少加法(q)]
    [n>=2][m>=n][(q,r):=divmod(m,n)]:
        [最少加法(m) <= min(((count_num_1bits_of_uint(r)-0)+(floor_log2(n)+count_num_1bits_of_uint(n)-1)), ([r>=1]max(1,最少加法(r))+最少加法(n)))+最少加法(m//n)]
        [最少加法(m) <= 最少加法囗二输出(r,n)+最少加法(m//n)]
    [@[n>=2] -> @[m>n] -> [最少加法(m) <= 最少加法囗二输出(n,m) <= [m%n>0]+最少加法囗二输出(m%n,n)+最少加法(m//n)]] #最少加法囗上限估计囗除模拆分囗基本公式

    [[
    ===转为 上限估计
    [k>=0][m>=(2**k+1)][(q,r):=divmod(m,(2**k+1))]:
        [最少加法囗上限估计(m) := min((count_num_1bits_of_uint(r)-0), [r>=1]max(1,最少加法囗上限估计(r))) +(k+1) +最少加法囗上限估计(q)]

    [m>=2]:
        [最少加法囗上限估计(m) := min{min((count_num_1bits_of_uint(r)-0), [r>=1]max(1,最少加法囗上限估计(r))) +(k+1) +最少加法囗上限估计(q) | [k :<- [0..=-1+ceil_log2(m)==floor_log2(m-1)]][(q,r):=divmod(m,(2**k+1))]}]

    ++最少加法囗上限估计囗除模拆分囗基本公式

    ]]
]]

#上限估计:最少加法囗二输出
#   见:最少加法囗上限估计囗除模拆分囗基本公式

[@[r <- [0,1,2]] -> @[m>=max(1,r)] -> [最少加法囗二输出(r,m) == 最少加法(m)]]
[@[m>=1] -> [最少加法囗二输出(m,m) == 最少加法(m)]]
[@[n>=1] -> @[m>=n] -> [最少加法囗二输出(n,m) >= max{最少加法(n),最少加法(m)}]]
    #部分of最少加法囗上限估计囗除模拆分囗基本公式
[@[n>=1] -> @[m>=1+n] -> [最少加法囗二输出(n,m) >= max{1+最少加法(n),最少加法(m)}]]
[@[n>=1] -> @[m>=1+n] -> [最少加法囗二输出(n,m) >= 1+最少加法(n)]]
[@[n>=1] -> @[k>=0] -> @[m>=1+n*2**k] -> [最少加法囗二输出(n,m) >= 1+k+最少加法(n)]]
[@[n>=1] -> @[k>=0] -> [最少加法囗二输出(n,n*2**k) == k+最少加法(n)]]
[@[n>=1] -> @[j>=0] -> @[i>=j] -> [最少加法囗二输出(n,n*(2**i+2**j)) == i+1+最少加法(n)]]

[@[r>=1] -> @[m>r] -> [最少加法囗二输出(r,m) <= 最少加法(r)+最少加法(m) -[r>=2]]]
    # !![m>=2] 共享 2**0,2**1
[@[r>=3] -> @[m>r] -> [最少加法囗二输出(r,m) <= 最少加法(r)+最少加法(m)-1]]
[@[m>=1] -> @[k>=0] -> [最少加法囗二输出(m//2**k,m) <= floor_log2(m)+count_num_1bits_of_uint(m)-1]]
    # [m == (...(((m//2**k) *2 +?) *2 +?)...)]
[@[k>=0] -> @[m>=2**k] -> [最少加法囗二输出(m//2**k,m) <= 最少加法(m//2**k)+k+count_num_1bits_of_uint(m%2**k)]]

[@[r>=1] -> @[k>=0] -> @[m>=2**k] -> [最少加法囗二输出(r,m) <= 最少加法囗二输出(*sorted([m//2**k,r]))+k+count_num_1bits_of_uint(m%2**k)]]
[@[r>=1] -> @[m>r] -> [最少加法囗二输出(r,m) <= floor_log2(m)+count_num_1bits_of_uint(m)-1 +count_num_1bits_of_uint(r)-max(1,count_num_1bits_of_uint(r&m))]]
    # 上面两式共同构成:次优加法囗二输出囗通过共享比特

[@[r>=1] -> @[m>r] -> [m<2*r] -> [最少加法囗二输出(r,m) <= 1+最少加法囗二输出(m-r,r)]]
[@[r>=2] -> @[m>r] -> [最少加法囗二输出(r,m) <= [m%r>0]+最少加法(m//r)+最少加法囗二输出(m%r,r)]]
    #部分of最少加法囗上限估计囗除模拆分囗基本公式


]]]]]推导定理

TODO:
    _calc_upper_guess4num_adds__ver6
        使用『最少加法囗二输出』的 上限估计
        divmod(m,n):
            [[n <- {2**k+1 | [k:<-[0..=max_k]]}]or[n <- PRIMES[:max_k+1]]]
TODO:
e script/min_add_ver3.py
  等价归类:
    割点:乘法拆分:乘法交换律
    出度为1的点可省略:加法交换律
    混合？比如:m*n+1
      #不算: (a*b)*c+(a*b)==(a*b)*(c+1)
      局部串并联两端分割
  等价归类后的加法链表达:
    ???

(2**k-1)型 #all_1bits
# [upper_guess4num_adds==(k-1) +k-1 ==2*k-2]
# 输入 = 1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,...
# 上限 = 0,2,4, 6, 8,10, 12, 14, 16,  18,  20,  22,  24,...
# [(2**(2*i)-1)%3==0]
# [(2**(3*i)-1)%7==0]
# [(2**(4*i)-1)%5==0]
# [(2**(5*i)-1)%31==0]
# [(2**(7*i)-1)%127==0]
# [(2**(10*i)-1)%11==0]
# [(2**(6*i)-1)%9==0]
(0, 1, 1, [(1,)])
    -0 #输出-上限
(2, 3, 1, [(1, 2, 3)])
    3==1*2+1
    -0
(4, 7, 5, [(1, 2, 3, 4, 7), (1, 2, 3, 5, 7), (1, 2, 3, 6, 7), (1, 2, 4, 5, 7), (1, 2, 4, 6, 7)])
    7==3*2+1
    -0
(5, 15, 4, [(1, 2, 3, 5, 10, 15), (1, 2, 3, 6, 9, 15), (1, 2, 3, 6, 12, 15), (1, 2, 4, 5, 10, 15)])
    15==5*3==3*5
    -1
(7, 31, 77, [(1, 2, 3, 4, 7, 14, 17, 31), ..., (1, 2, 4, 8, 10, 20, 30, 31)])
    31==15*2+1==(8+2)*3+1
    -1
(8, 63, 87, [(1, 2, 3, 4, 7, 14, 21, 42, 63), ..., (1, 2, 4, 8, 16, 20, 21, 42, 63)])
    63==7*3*3==...==(16+4+1)*3
    -2
(10, 127, 2661, [(1, 2, 3, 4, 7, 8, 15, 30, 60, 67, 127), ..., (1, 2, 4, 8, 16, 32, 40, 42, 84, 126, 127)])
    127==63*2+1
    -2
(10, 255, 24, [(1, 2, 3, 5, 10, 15, 30, 60, 120, 135, 255), ..., (1, 2, 4, 8, 16, 17, 34, 68, 85, 170, 255)])
    255==3*5*17
    -4
511 12
    511=255*2+1
    -4
1023 13
    # 1023==3*31*11 ==>> [13 <= 2+7+5==14]
    1023==33*31==(32+1)*31 # ==>> [13 <= 6+7==13]
    -5
2047 15
    2047=1023*2+1
    -5
4095 15
    # 4095==2**12-1
    # 4095==3*3*5*7*13 ==>> [15 <= 2+2+3+4+5==16]
    4095==3*3*7*(64+1) # ==>> [15 <= 2+2+4+7==15]
    -7
8191 17
    8191==4095*2+1
    -7
16383 18
    -8
感觉每逢(2**(2*i)-1){i>=2}，差值(输出-上限)会减一
试更新为:
# [upper_guess4num_adds==(k-1) +k-1 -max(0,k//2 -1)==2*k-2 -[k>=4](k//2-1)]
[[
[最少加法(n) <= floor_log2(n)*4//3 +2]
[最少加法(n) <= floor_log_(71;n**9)]
<<==
https://oeis.org/A003313
For all n >= 2, a(n) <= (4/3)*floor(log_2 n) + 2. - Jonathan Vos Post, Oct 08 2008

From Achim Flammenkamp, Oct 26 2016: (Start)
a(n) <= 9/log_2(71) log_2(n), for all n.
====
???[floor_log2(n)*4//3 +2 >= floor_log_(71;n**9)]:
[log2(n)*4/3 +2 == log2(4*n**(4/3))]

[[log2(n) <= 2/(9/math.log2(71)-4/3)~=15.367890732394379] <-> [log2(n)*4/3 +2 >= log_(71;n**9)] <-> [n < 2**16 == 65536]]

>>> import math as m
>>> m.log2(71)
6.149747119504682
>>> 9/m.log2(71)
1.4634748104447073
>>> 4/3
1.3333333333333333
>>> 2/(9/m.log2(71)-4/3)
15.367890732394379

# [[log2(n) <= 2/(9/math.log2(71)-4/3)~=15.367890732394379] <-> [log2(n)*4/3 +2 >= log2(n)*9/log2(71)] <-> [log2(n)*4/3 +2 >= log_(71;n**9)] <-> [n ~<= 2**15.367890732394379 ~= 42285.94889011243 < 2**16 == 65536]]
>>> [(n, (m.log2(n)*4/3 +2 >= m.log2(n)*9/m.log2(71))) for n in range(42280, 42289)]
[(42280, True), (42281, True), (42282, True), (42283, True), (42284, True), (42285, True), (42286, False), (42287, False), (42288, False)]

# 下面 473:-1,...,511:-1 #不一定连续
# 下面 1955:-1,...2047:-1 #不一定连续
>>> from seed.math.floor_ceil import floor_log2, floor_log_
>>> [(n, floor_log2(n)*4//3 +2 - floor_log_(71,n**9)) for n in range(1,1000)]
[(1, 2), (2, 2), (3, 1), (4, 2), (5, 1), (6, 1), (7, 0), (8, 2), (9, 2), (10, 2), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 2), (17, 2), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 0), (46, 0), (47, 0), (48, 0), (49, 0), (50, 0), (51, 0), (52, 0), (53, 0), (54, 0), (55, 0), (56, 0), (57, 0), (58, 0), (59, 0), (60, 0), (61, 0), (62, 0), (63, 0), (64, 2), (65, 2), (66, 2), (67, 2), (68, 2), (69, 2), (70, 2), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 0), (116, 0), (117, 0), (118, 0), (119, 0), (120, 0), (121, 0), (122, 0), (123, 0), (124, 0), (125, 0), (126, 0), (127, 0), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 0), (185, 0), (186, 0), (187, 0), (188, 0), (189, 0), (190, 0), (191, 0), (192, 0), (193, 0), (194, 0), (195, 0), (196, 0), (197, 0), (198, 0), (199, 0), (200, 0), (201, 0), (202, 0), (203, 0), (204, 0), (205, 0), (206, 0), (207, 0), (208, 0), (209, 0), (210, 0), (211, 0), (212, 0), (213, 0), (214, 0), (215, 0), (216, 0), (217, 0), (218, 0), (219, 0), (220, 0), (221, 0), (222, 0), (223, 0), (224, 0), (225, 0), (226, 0), (227, 0), (228, 0), (229, 0), (230, 0), (231, 0), (232, 0), (233, 0), (234, 0), (235, 0), (236, 0), (237, 0), (238, 0), (239, 0), (240, 0), (241, 0), (242, 0), (243, 0), (244, 0), (245, 0), (246, 0), (247, 0), (248, 0), (249, 0), (250, 0), (251, 0), (252, 0), (253, 0), (254, 0), (255, 0), (256, 1), (257, 1), (258, 1), (259, 1), (260, 1), (261, 1), (262, 1), (263, 1), (264, 1), (265, 1), (266, 1), (267, 1), (268, 1), (269, 1), (270, 1), (271, 1), (272, 1), (273, 1), (274, 1), (275, 1), (276, 1), (277, 1), (278, 1), (279, 1), (280, 1), (281, 1), (282, 1), (283, 1), (284, 1), (285, 1), (286, 1), (287, 1), (288, 1), (289, 1), (290, 1), (291, 1), (292, 1), (293, 1), (294, 0), (295, 0), (296, 0), (297, 0), (298, 0), (299, 0), (300, 0), (301, 0), (302, 0), (303, 0), (304, 0), (305, 0), (306, 0), (307, 0), (308, 0), (309, 0), (310, 0), (311, 0), (312, 0), (313, 0), (314, 0), (315, 0), (316, 0), (317, 0), (318, 0), (319, 0), (320, 0), (321, 0), (322, 0), (323, 0), (324, 0), (325, 0), (326, 0), (327, 0), (328, 0), (329, 0), (330, 0), (331, 0), (332, 0), (333, 0), (334, 0), (335, 0), (336, 0), (337, 0), (338, 0), (339, 0), (340, 0), (341, 0), (342, 0), (343, 0), (344, 0), (345, 0), (346, 0), (347, 0), (348, 0), (349, 0), (350, 0), (351, 0), (352, 0), (353, 0), (354, 0), (355, 0), (356, 0), (357, 0), (358, 0), (359, 0), (360, 0), (361, 0), (362, 0), (363, 0), (364, 0), (365, 0), (366, 0), (367, 0), (368, 0), (369, 0), (370, 0), (371, 0), (372, 0), (373, 0), (374, 0), (375, 0), (376, 0), (377, 0), (378, 0), (379, 0), (380, 0), (381, 0), (382, 0), (383, 0), (384, 0), (385, 0), (386, 0), (387, 0), (388, 0), (389, 0), (390, 0), (391, 0), (392, 0), (393, 0), (394, 0), (395, 0), (396, 0), (397, 0), (398, 0), (399, 0), (400, 0), (401, 0), (402, 0), (403, 0), (404, 0), (405, 0), (406, 0), (407, 0), (408, 0), (409, 0), (410, 0), (411, 0), (412, 0), (413, 0), (414, 0), (415, 0), (416, 0), (417, 0), (418, 0), (419, 0), (420, 0), (421, 0), (422, 0), (423, 0), (424, 0), (425, 0), (426, 0), (427, 0), (428, 0), (429, 0), (430, 0), (431, 0), (432, 0), (433, 0), (434, 0), (435, 0), (436, 0), (437, 0), (438, 0), (439, 0), (440, 0), (441, 0), (442, 0), (443, 0), (444, 0), (445, 0), (446, 0), (447, 0), (448, 0), (449, 0), (450, 0), (451, 0), (452, 0), (453, 0), (454, 0), (455, 0), (456, 0), (457, 0), (458, 0), (459, 0), (460, 0), (461, 0), (462, 0), (463, 0), (464, 0), (465, 0), (466, 0), (467, 0), (468, 0), (469, 0), (470, 0), (471, 0), (472, 0), (473, -1), (474, -1), (475, -1), (476, -1), (477, -1), (478, -1), (479, -1), (480, -1), (481, -1), (482, -1), (483, -1), (484, -1), (485, -1), (486, -1), (487, -1), (488, -1), (489, -1), (490, -1), (491, -1), (492, -1), (493, -1), (494, -1), (495, -1), (496, -1), (497, -1), (498, -1), (499, -1), (500, -1), (501, -1), (502, -1), (503, -1), (504, -1), (505, -1), (506, -1), (507, -1), (508, -1), (509, -1), (510, -1), (511, -1), (512, 1), (513, 1), (514, 1), (515, 1), (516, 1), (517, 1), (518, 1), (519, 1), (520, 1), (521, 1), (522, 1), (523, 1), (524, 1), (525, 1), (526, 1), (527, 1), (528, 1), (529, 1), (530, 1), (531, 1), (532, 1), (533, 1), (534, 1), (535, 1), (536, 1), (537, 1), (538, 1), (539, 1), (540, 1), (541, 1), (542, 1), (543, 1), (544, 1), (545, 1), (546, 1), (547, 1), (548, 1), (549, 1), (550, 1), (551, 1), (552, 1), (553, 1), (554, 1), (555, 1), (556, 1), (557, 1), (558, 1), (559, 1), (560, 1), (561, 1), (562, 1), (563, 1), (564, 1), (565, 1), (566, 1), (567, 1), (568, 1), (569, 1), (570, 1), (571, 1), (572, 1), (573, 1), (574, 1), (575, 1), (576, 1), (577, 1), (578, 1), (579, 1), (580, 1), (581, 1), (582, 1), (583, 1), (584, 1), (585, 1), (586, 1), (587, 1), (588, 1), (589, 1), (590, 1), (591, 1), (592, 1), (593, 1), (594, 1), (595, 1), (596, 1), (597, 1), (598, 1), (599, 1), (600, 1), (601, 1), (602, 1), (603, 1), (604, 1), (605, 1), (606, 1), (607, 1), (608, 1), (609, 1), (610, 1), (611, 1), (612, 1), (613, 1), (614, 1), (615, 1), (616, 1), (617, 1), (618, 1), (619, 1), (620, 1), (621, 1), (622, 1), (623, 1), (624, 1), (625, 1), (626, 1), (627, 1), (628, 1), (629, 1), (630, 1), (631, 1), (632, 1), (633, 1), (634, 1), (635, 1), (636, 1), (637, 1), (638, 1), (639, 1), (640, 1), (641, 1), (642, 1), (643, 1), (644, 1), (645, 1), (646, 1), (647, 1), (648, 1), (649, 1), (650, 1), (651, 1), (652, 1), (653, 1), (654, 1), (655, 1), (656, 1), (657, 1), (658, 1), (659, 1), (660, 1), (661, 1), (662, 1), (663, 1), (664, 1), (665, 1), (666, 1), (667, 1), (668, 1), (669, 1), (670, 1), (671, 1), (672, 1), (673, 1), (674, 1), (675, 1), (676, 1), (677, 1), (678, 1), (679, 1), (680, 1), (681, 1), (682, 1), (683, 1), (684, 1), (685, 1), (686, 1), (687, 1), (688, 1), (689, 1), (690, 1), (691, 1), (692, 1), (693, 1), (694, 1), (695, 1), (696, 1), (697, 1), (698, 1), (699, 1), (700, 1), (701, 1), (702, 1), (703, 1), (704, 1), (705, 1), (706, 1), (707, 1), (708, 1), (709, 1), (710, 1), (711, 1), (712, 1), (713, 1), (714, 1), (715, 1), (716, 1), (717, 1), (718, 1), (719, 1), (720, 1), (721, 1), (722, 1), (723, 1), (724, 1), (725, 1), (726, 1), (727, 1), (728, 1), (729, 1), (730, 1), (731, 1), (732, 1), (733, 1), (734, 1), (735, 1), (736, 1), (737, 1), (738, 1), (739, 1), (740, 1), (741, 1), (742, 1), (743, 1), (744, 1), (745, 1), (746, 1), (747, 1), (748, 1), (749, 1), (750, 1), (751, 1), (752, 1), (753, 1), (754, 1), (755, 1), (756, 1), (757, 1), (758, 1), (759, 0), (760, 0), (761, 0), (762, 0), (763, 0), (764, 0), (765, 0), (766, 0), (767, 0), (768, 0), (769, 0), (770, 0), (771, 0), (772, 0), (773, 0), (774, 0), (775, 0), (776, 0), (777, 0), (778, 0), (779, 0), (780, 0), (781, 0), (782, 0), (783, 0), (784, 0), (785, 0), (786, 0), (787, 0), (788, 0), (789, 0), (790, 0), (791, 0), (792, 0), (793, 0), (794, 0), (795, 0), (796, 0), (797, 0), (798, 0), (799, 0), (800, 0), (801, 0), (802, 0), (803, 0), (804, 0), (805, 0), (806, 0), (807, 0), (808, 0), (809, 0), (810, 0), (811, 0), (812, 0), (813, 0), (814, 0), (815, 0), (816, 0), (817, 0), (818, 0), (819, 0), (820, 0), (821, 0), (822, 0), (823, 0), (824, 0), (825, 0), (826, 0), (827, 0), (828, 0), (829, 0), (830, 0), (831, 0), (832, 0), (833, 0), (834, 0), (835, 0), (836, 0), (837, 0), (838, 0), (839, 0), (840, 0), (841, 0), (842, 0), (843, 0), (844, 0), (845, 0), (846, 0), (847, 0), (848, 0), (849, 0), (850, 0), (851, 0), (852, 0), (853, 0), (854, 0), (855, 0), (856, 0), (857, 0), (858, 0), (859, 0), (860, 0), (861, 0), (862, 0), (863, 0), (864, 0), (865, 0), (866, 0), (867, 0), (868, 0), (869, 0), (870, 0), (871, 0), (872, 0), (873, 0), (874, 0), (875, 0), (876, 0), (877, 0), (878, 0), (879, 0), (880, 0), (881, 0), (882, 0), (883, 0), (884, 0), (885, 0), (886, 0), (887, 0), (888, 0), (889, 0), (890, 0), (891, 0), (892, 0), (893, 0), (894, 0), (895, 0), (896, 0), (897, 0), (898, 0), (899, 0), (900, 0), (901, 0), (902, 0), (903, 0), (904, 0), (905, 0), (906, 0), (907, 0), (908, 0), (909, 0), (910, 0), (911, 0), (912, 0), (913, 0), (914, 0), (915, 0), (916, 0), (917, 0), (918, 0), (919, 0), (920, 0), (921, 0), (922, 0), (923, 0), (924, 0), (925, 0), (926, 0), (927, 0), (928, 0), (929, 0), (930, 0), (931, 0), (932, 0), (933, 0), (934, 0), (935, 0), (936, 0), (937, 0), (938, 0), (939, 0), (940, 0), (941, 0), (942, 0), (943, 0), (944, 0), (945, 0), (946, 0), (947, 0), (948, 0), (949, 0), (950, 0), (951, 0), (952, 0), (953, 0), (954, 0), (955, 0), (956, 0), (957, 0), (958, 0), (959, 0), (960, 0), (961, 0), (962, 0), (963, 0), (964, 0), (965, 0), (966, 0), (967, 0), (968, 0), (969, 0), (970, 0), (971, 0), (972, 0), (973, 0), (974, 0), (975, 0), (976, 0), (977, 0), (978, 0), (979, 0), (980, 0), (981, 0), (982, 0), (983, 0), (984, 0), (985, 0), (986, 0), (987, 0), (988, 0), (989, 0), (990, 0), (991, 0), (992, 0), (993, 0), (994, 0), (995, 0), (996, 0), (997, 0), (998, 0), (999, 0)]
>>> [(n, floor_log2(n)*4//3 +2 - floor_log_(71,n**9)) for n in range(1000,2000)]
[(1000, 0), (1001, 0), (1002, 0), (1003, 0), (1004, 0), (1005, 0), (1006, 0), (1007, 0), (1008, 0), (1009, 0), (1010, 0), (1011, 0), (1012, 0), (1013, 0), (1014, 0), (1015, 0), (1016, 0), (1017, 0), (1018, 0), (1019, 0), (1020, 0), (1021, 0), (1022, 0), (1023, 0), (1024, 1), (1025, 1), (1026, 1), (1027, 1), (1028, 1), (1029, 1), (1030, 1), (1031, 1), (1032, 1), (1033, 1), (1034, 1), (1035, 1), (1036, 1), (1037, 1), (1038, 1), (1039, 1), (1040, 1), (1041, 1), (1042, 1), (1043, 1), (1044, 1), (1045, 1), (1046, 1), (1047, 1), (1048, 1), (1049, 1), (1050, 1), (1051, 1), (1052, 1), (1053, 1), (1054, 1), (1055, 1), (1056, 1), (1057, 1), (1058, 1), (1059, 1), (1060, 1), (1061, 1), (1062, 1), (1063, 1), (1064, 1), (1065, 1), (1066, 1), (1067, 1), (1068, 1), (1069, 1), (1070, 1), (1071, 1), (1072, 1), (1073, 1), (1074, 1), (1075, 1), (1076, 1), (1077, 1), (1078, 1), (1079, 1), (1080, 1), (1081, 1), (1082, 1), (1083, 1), (1084, 1), (1085, 1), (1086, 1), (1087, 1), (1088, 1), (1089, 1), (1090, 1), (1091, 1), (1092, 1), (1093, 1), (1094, 1), (1095, 1), (1096, 1), (1097, 1), (1098, 1), (1099, 1), (1100, 1), (1101, 1), (1102, 1), (1103, 1), (1104, 1), (1105, 1), (1106, 1), (1107, 1), (1108, 1), (1109, 1), (1110, 1), (1111, 1), (1112, 1), (1113, 1), (1114, 1), (1115, 1), (1116, 1), (1117, 1), (1118, 1), (1119, 1), (1120, 1), (1121, 1), (1122, 1), (1123, 1), (1124, 1), (1125, 1), (1126, 1), (1127, 1), (1128, 1), (1129, 1), (1130, 1), (1131, 1), (1132, 1), (1133, 1), (1134, 1), (1135, 1), (1136, 1), (1137, 1), (1138, 1), (1139, 1), (1140, 1), (1141, 1), (1142, 1), (1143, 1), (1144, 1), (1145, 1), (1146, 1), (1147, 1), (1148, 1), (1149, 1), (1150, 1), (1151, 1), (1152, 1), (1153, 1), (1154, 1), (1155, 1), (1156, 1), (1157, 1), (1158, 1), (1159, 1), (1160, 1), (1161, 1), (1162, 1), (1163, 1), (1164, 1), (1165, 1), (1166, 1), (1167, 1), (1168, 1), (1169, 1), (1170, 1), (1171, 1), (1172, 1), (1173, 1), (1174, 1), (1175, 1), (1176, 1), (1177, 1), (1178, 1), (1179, 1), (1180, 1), (1181, 1), (1182, 1), (1183, 1), (1184, 1), (1185, 1), (1186, 1), (1187, 1), (1188, 1), (1189, 1), (1190, 1), (1191, 1), (1192, 1), (1193, 1), (1194, 1), (1195, 1), (1196, 1), (1197, 1), (1198, 1), (1199, 1), (1200, 1), (1201, 1), (1202, 1), (1203, 1), (1204, 1), (1205, 1), (1206, 1), (1207, 1), (1208, 1), (1209, 1), (1210, 1), (1211, 1), (1212, 1), (1213, 1), (1214, 1), (1215, 1), (1216, 1), (1217, 1), (1218, 0), (1219, 0), (1220, 0), (1221, 0), (1222, 0), (1223, 0), (1224, 0), (1225, 0), (1226, 0), (1227, 0), (1228, 0), (1229, 0), (1230, 0), (1231, 0), (1232, 0), (1233, 0), (1234, 0), (1235, 0), (1236, 0), (1237, 0), (1238, 0), (1239, 0), (1240, 0), (1241, 0), (1242, 0), (1243, 0), (1244, 0), (1245, 0), (1246, 0), (1247, 0), (1248, 0), (1249, 0), (1250, 0), (1251, 0), (1252, 0), (1253, 0), (1254, 0), (1255, 0), (1256, 0), (1257, 0), (1258, 0), (1259, 0), (1260, 0), (1261, 0), (1262, 0), (1263, 0), (1264, 0), (1265, 0), (1266, 0), (1267, 0), (1268, 0), (1269, 0), (1270, 0), (1271, 0), (1272, 0), (1273, 0), (1274, 0), (1275, 0), (1276, 0), (1277, 0), (1278, 0), (1279, 0), (1280, 0), (1281, 0), (1282, 0), (1283, 0), (1284, 0), (1285, 0), (1286, 0), (1287, 0), (1288, 0), (1289, 0), (1290, 0), (1291, 0), (1292, 0), (1293, 0), (1294, 0), (1295, 0), (1296, 0), (1297, 0), (1298, 0), (1299, 0), (1300, 0), (1301, 0), (1302, 0), (1303, 0), (1304, 0), (1305, 0), (1306, 0), (1307, 0), (1308, 0), (1309, 0), (1310, 0), (1311, 0), (1312, 0), (1313, 0), (1314, 0), (1315, 0), (1316, 0), (1317, 0), (1318, 0), (1319, 0), (1320, 0), (1321, 0), (1322, 0), (1323, 0), (1324, 0), (1325, 0), (1326, 0), (1327, 0), (1328, 0), (1329, 0), (1330, 0), (1331, 0), (1332, 0), (1333, 0), (1334, 0), (1335, 0), (1336, 0), (1337, 0), (1338, 0), (1339, 0), (1340, 0), (1341, 0), (1342, 0), (1343, 0), (1344, 0), (1345, 0), (1346, 0), (1347, 0), (1348, 0), (1349, 0), (1350, 0), (1351, 0), (1352, 0), (1353, 0), (1354, 0), (1355, 0), (1356, 0), (1357, 0), (1358, 0), (1359, 0), (1360, 0), (1361, 0), (1362, 0), (1363, 0), (1364, 0), (1365, 0), (1366, 0), (1367, 0), (1368, 0), (1369, 0), (1370, 0), (1371, 0), (1372, 0), (1373, 0), (1374, 0), (1375, 0), (1376, 0), (1377, 0), (1378, 0), (1379, 0), (1380, 0), (1381, 0), (1382, 0), (1383, 0), (1384, 0), (1385, 0), (1386, 0), (1387, 0), (1388, 0), (1389, 0), (1390, 0), (1391, 0), (1392, 0), (1393, 0), (1394, 0), (1395, 0), (1396, 0), (1397, 0), (1398, 0), (1399, 0), (1400, 0), (1401, 0), (1402, 0), (1403, 0), (1404, 0), (1405, 0), (1406, 0), (1407, 0), (1408, 0), (1409, 0), (1410, 0), (1411, 0), (1412, 0), (1413, 0), (1414, 0), (1415, 0), (1416, 0), (1417, 0), (1418, 0), (1419, 0), (1420, 0), (1421, 0), (1422, 0), (1423, 0), (1424, 0), (1425, 0), (1426, 0), (1427, 0), (1428, 0), (1429, 0), (1430, 0), (1431, 0), (1432, 0), (1433, 0), (1434, 0), (1435, 0), (1436, 0), (1437, 0), (1438, 0), (1439, 0), (1440, 0), (1441, 0), (1442, 0), (1443, 0), (1444, 0), (1445, 0), (1446, 0), (1447, 0), (1448, 0), (1449, 0), (1450, 0), (1451, 0), (1452, 0), (1453, 0), (1454, 0), (1455, 0), (1456, 0), (1457, 0), (1458, 0), (1459, 0), (1460, 0), (1461, 0), (1462, 0), (1463, 0), (1464, 0), (1465, 0), (1466, 0), (1467, 0), (1468, 0), (1469, 0), (1470, 0), (1471, 0), (1472, 0), (1473, 0), (1474, 0), (1475, 0), (1476, 0), (1477, 0), (1478, 0), (1479, 0), (1480, 0), (1481, 0), (1482, 0), (1483, 0), (1484, 0), (1485, 0), (1486, 0), (1487, 0), (1488, 0), (1489, 0), (1490, 0), (1491, 0), (1492, 0), (1493, 0), (1494, 0), (1495, 0), (1496, 0), (1497, 0), (1498, 0), (1499, 0), (1500, 0), (1501, 0), (1502, 0), (1503, 0), (1504, 0), (1505, 0), (1506, 0), (1507, 0), (1508, 0), (1509, 0), (1510, 0), (1511, 0), (1512, 0), (1513, 0), (1514, 0), (1515, 0), (1516, 0), (1517, 0), (1518, 0), (1519, 0), (1520, 0), (1521, 0), (1522, 0), (1523, 0), (1524, 0), (1525, 0), (1526, 0), (1527, 0), (1528, 0), (1529, 0), (1530, 0), (1531, 0), (1532, 0), (1533, 0), (1534, 0), (1535, 0), (1536, 0), (1537, 0), (1538, 0), (1539, 0), (1540, 0), (1541, 0), (1542, 0), (1543, 0), (1544, 0), (1545, 0), (1546, 0), (1547, 0), (1548, 0), (1549, 0), (1550, 0), (1551, 0), (1552, 0), (1553, 0), (1554, 0), (1555, 0), (1556, 0), (1557, 0), (1558, 0), (1559, 0), (1560, 0), (1561, 0), (1562, 0), (1563, 0), (1564, 0), (1565, 0), (1566, 0), (1567, 0), (1568, 0), (1569, 0), (1570, 0), (1571, 0), (1572, 0), (1573, 0), (1574, 0), (1575, 0), (1576, 0), (1577, 0), (1578, 0), (1579, 0), (1580, 0), (1581, 0), (1582, 0), (1583, 0), (1584, 0), (1585, 0), (1586, 0), (1587, 0), (1588, 0), (1589, 0), (1590, 0), (1591, 0), (1592, 0), (1593, 0), (1594, 0), (1595, 0), (1596, 0), (1597, 0), (1598, 0), (1599, 0), (1600, 0), (1601, 0), (1602, 0), (1603, 0), (1604, 0), (1605, 0), (1606, 0), (1607, 0), (1608, 0), (1609, 0), (1610, 0), (1611, 0), (1612, 0), (1613, 0), (1614, 0), (1615, 0), (1616, 0), (1617, 0), (1618, 0), (1619, 0), (1620, 0), (1621, 0), (1622, 0), (1623, 0), (1624, 0), (1625, 0), (1626, 0), (1627, 0), (1628, 0), (1629, 0), (1630, 0), (1631, 0), (1632, 0), (1633, 0), (1634, 0), (1635, 0), (1636, 0), (1637, 0), (1638, 0), (1639, 0), (1640, 0), (1641, 0), (1642, 0), (1643, 0), (1644, 0), (1645, 0), (1646, 0), (1647, 0), (1648, 0), (1649, 0), (1650, 0), (1651, 0), (1652, 0), (1653, 0), (1654, 0), (1655, 0), (1656, 0), (1657, 0), (1658, 0), (1659, 0), (1660, 0), (1661, 0), (1662, 0), (1663, 0), (1664, 0), (1665, 0), (1666, 0), (1667, 0), (1668, 0), (1669, 0), (1670, 0), (1671, 0), (1672, 0), (1673, 0), (1674, 0), (1675, 0), (1676, 0), (1677, 0), (1678, 0), (1679, 0), (1680, 0), (1681, 0), (1682, 0), (1683, 0), (1684, 0), (1685, 0), (1686, 0), (1687, 0), (1688, 0), (1689, 0), (1690, 0), (1691, 0), (1692, 0), (1693, 0), (1694, 0), (1695, 0), (1696, 0), (1697, 0), (1698, 0), (1699, 0), (1700, 0), (1701, 0), (1702, 0), (1703, 0), (1704, 0), (1705, 0), (1706, 0), (1707, 0), (1708, 0), (1709, 0), (1710, 0), (1711, 0), (1712, 0), (1713, 0), (1714, 0), (1715, 0), (1716, 0), (1717, 0), (1718, 0), (1719, 0), (1720, 0), (1721, 0), (1722, 0), (1723, 0), (1724, 0), (1725, 0), (1726, 0), (1727, 0), (1728, 0), (1729, 0), (1730, 0), (1731, 0), (1732, 0), (1733, 0), (1734, 0), (1735, 0), (1736, 0), (1737, 0), (1738, 0), (1739, 0), (1740, 0), (1741, 0), (1742, 0), (1743, 0), (1744, 0), (1745, 0), (1746, 0), (1747, 0), (1748, 0), (1749, 0), (1750, 0), (1751, 0), (1752, 0), (1753, 0), (1754, 0), (1755, 0), (1756, 0), (1757, 0), (1758, 0), (1759, 0), (1760, 0), (1761, 0), (1762, 0), (1763, 0), (1764, 0), (1765, 0), (1766, 0), (1767, 0), (1768, 0), (1769, 0), (1770, 0), (1771, 0), (1772, 0), (1773, 0), (1774, 0), (1775, 0), (1776, 0), (1777, 0), (1778, 0), (1779, 0), (1780, 0), (1781, 0), (1782, 0), (1783, 0), (1784, 0), (1785, 0), (1786, 0), (1787, 0), (1788, 0), (1789, 0), (1790, 0), (1791, 0), (1792, 0), (1793, 0), (1794, 0), (1795, 0), (1796, 0), (1797, 0), (1798, 0), (1799, 0), (1800, 0), (1801, 0), (1802, 0), (1803, 0), (1804, 0), (1805, 0), (1806, 0), (1807, 0), (1808, 0), (1809, 0), (1810, 0), (1811, 0), (1812, 0), (1813, 0), (1814, 0), (1815, 0), (1816, 0), (1817, 0), (1818, 0), (1819, 0), (1820, 0), (1821, 0), (1822, 0), (1823, 0), (1824, 0), (1825, 0), (1826, 0), (1827, 0), (1828, 0), (1829, 0), (1830, 0), (1831, 0), (1832, 0), (1833, 0), (1834, 0), (1835, 0), (1836, 0), (1837, 0), (1838, 0), (1839, 0), (1840, 0), (1841, 0), (1842, 0), (1843, 0), (1844, 0), (1845, 0), (1846, 0), (1847, 0), (1848, 0), (1849, 0), (1850, 0), (1851, 0), (1852, 0), (1853, 0), (1854, 0), (1855, 0), (1856, 0), (1857, 0), (1858, 0), (1859, 0), (1860, 0), (1861, 0), (1862, 0), (1863, 0), (1864, 0), (1865, 0), (1866, 0), (1867, 0), (1868, 0), (1869, 0), (1870, 0), (1871, 0), (1872, 0), (1873, 0), (1874, 0), (1875, 0), (1876, 0), (1877, 0), (1878, 0), (1879, 0), (1880, 0), (1881, 0), (1882, 0), (1883, 0), (1884, 0), (1885, 0), (1886, 0), (1887, 0), (1888, 0), (1889, 0), (1890, 0), (1891, 0), (1892, 0), (1893, 0), (1894, 0), (1895, 0), (1896, 0), (1897, 0), (1898, 0), (1899, 0), (1900, 0), (1901, 0), (1902, 0), (1903, 0), (1904, 0), (1905, 0), (1906, 0), (1907, 0), (1908, 0), (1909, 0), (1910, 0), (1911, 0), (1912, 0), (1913, 0), (1914, 0), (1915, 0), (1916, 0), (1917, 0), (1918, 0), (1919, 0), (1920, 0), (1921, 0), (1922, 0), (1923, 0), (1924, 0), (1925, 0), (1926, 0), (1927, 0), (1928, 0), (1929, 0), (1930, 0), (1931, 0), (1932, 0), (1933, 0), (1934, 0), (1935, 0), (1936, 0), (1937, 0), (1938, 0), (1939, 0), (1940, 0), (1941, 0), (1942, 0), (1943, 0), (1944, 0), (1945, 0), (1946, 0), (1947, 0), (1948, 0), (1949, 0), (1950, 0), (1951, 0), (1952, 0), (1953, 0), (1954, 0), (1955, -1), (1956, -1), (1957, -1), (1958, -1), (1959, -1), (1960, -1), (1961, -1), (1962, -1), (1963, -1), (1964, -1), (1965, -1), (1966, -1), (1967, -1), (1968, -1), (1969, -1), (1970, -1), (1971, -1), (1972, -1), (1973, -1), (1974, -1), (1975, -1), (1976, -1), (1977, -1), (1978, -1), (1979, -1), (1980, -1), (1981, -1), (1982, -1), (1983, -1), (1984, -1), (1985, -1), (1986, -1), (1987, -1), (1988, -1), (1989, -1), (1990, -1), (1991, -1), (1992, -1), (1993, -1), (1994, -1), (1995, -1), (1996, -1), (1997, -1), (1998, -1), (1999, -1)]
>>> [(n, floor_log2(n)*4//3 +2 - floor_log_(71,n**9)) for n in range(2000,3000)]
[(2000, -1), (2001, -1), (2002, -1), (2003, -1), (2004, -1), (2005, -1), (2006, -1), (2007, -1), (2008, -1), (2009, -1), (2010, -1), (2011, -1), (2012, -1), (2013, -1), (2014, -1), (2015, -1), (2016, -1), (2017, -1), (2018, -1), (2019, -1), (2020, -1), (2021, -1), (2022, -1), (2023, -1), (2024, -1), (2025, -1), (2026, -1), (2027, -1), (2028, -1), (2029, -1), (2030, -1), (2031, -1), (2032, -1), (2033, -1), (2034, -1), (2035, -1), (2036, -1), (2037, -1), (2038, -1), (2039, -1), (2040, -1), (2041, -1), (2042, -1), (2043, -1), (2044, -1), (2045, -1), (2046, -1), (2047, -1), (2048, 0), (2049, 0), (2050, 0), (2051, 0), (2052, 0), (2053, 0), (2054, 0), (2055, 0), (2056, 0), (2057, 0), (2058, 0), (2059, 0), (2060, 0), (2061, 0), (2062, 0), (2063, 0), (2064, 0), (2065, 0), (2066, 0), (2067, 0), (2068, 0), (2069, 0), (2070, 0), (2071, 0), (2072, 0), (2073, 0), (2074, 0), (2075, 0), (2076, 0), (2077, 0), (2078, 0), (2079, 0), (2080, 0), (2081, 0), (2082, 0), (2083, 0), (2084, 0), (2085, 0), (2086, 0), (2087, 0), (2088, 0), (2089, 0), (2090, 0), (2091, 0), (2092, 0), (2093, 0), (2094, 0), (2095, 0), (2096, 0), (2097, 0), (2098, 0), (2099, 0), (2100, 0), (2101, 0), (2102, 0), (2103, 0), (2104, 0), (2105, 0), (2106, 0), (2107, 0), (2108, 0), (2109, 0), (2110, 0), (2111, 0), (2112, 0), (2113, 0), (2114, 0), (2115, 0), (2116, 0), (2117, 0), (2118, 0), (2119, 0), (2120, 0), (2121, 0), (2122, 0), (2123, 0), (2124, 0), (2125, 0), (2126, 0), (2127, 0), (2128, 0), (2129, 0), (2130, 0), (2131, 0), (2132, 0), (2133, 0), (2134, 0), (2135, 0), (2136, 0), (2137, 0), (2138, 0), (2139, 0), (2140, 0), (2141, 0), (2142, 0), (2143, 0), (2144, 0), (2145, 0), (2146, 0), (2147, 0), (2148, 0), (2149, 0), (2150, 0), (2151, 0), (2152, 0), (2153, 0), (2154, 0), (2155, 0), (2156, 0), (2157, 0), (2158, 0), (2159, 0), (2160, 0), (2161, 0), (2162, 0), (2163, 0), (2164, 0), (2165, 0), (2166, 0), (2167, 0), (2168, 0), (2169, 0), (2170, 0), (2171, 0), (2172, 0), (2173, 0), (2174, 0), (2175, 0), (2176, 0), (2177, 0), (2178, 0), (2179, 0), (2180, 0), (2181, 0), (2182, 0), (2183, 0), (2184, 0), (2185, 0), (2186, 0), (2187, 0), (2188, 0), (2189, 0), (2190, 0), (2191, 0), (2192, 0), (2193, 0), (2194, 0), (2195, 0), (2196, 0), (2197, 0), (2198, 0), (2199, 0), (2200, 0), (2201, 0), (2202, 0), (2203, 0), (2204, 0), (2205, 0), (2206, 0), (2207, 0), (2208, 0), (2209, 0), (2210, 0), (2211, 0), (2212, 0), (2213, 0), (2214, 0), (2215, 0), (2216, 0), (2217, 0), (2218, 0), (2219, 0), (2220, 0), (2221, 0), (2222, 0), (2223, 0), (2224, 0), (2225, 0), (2226, 0), (2227, 0), (2228, 0), (2229, 0), (2230, 0), (2231, 0), (2232, 0), (2233, 0), (2234, 0), (2235, 0), (2236, 0), (2237, 0), (2238, 0), (2239, 0), (2240, 0), (2241, 0), (2242, 0), (2243, 0), (2244, 0), (2245, 0), (2246, 0), (2247, 0), (2248, 0), (2249, 0), (2250, 0), (2251, 0), (2252, 0), (2253, 0), (2254, 0), (2255, 0), (2256, 0), (2257, 0), (2258, 0), (2259, 0), (2260, 0), (2261, 0), (2262, 0), (2263, 0), (2264, 0), (2265, 0), (2266, 0), (2267, 0), (2268, 0), (2269, 0), (2270, 0), (2271, 0), (2272, 0), (2273, 0), (2274, 0), (2275, 0), (2276, 0), (2277, 0), (2278, 0), (2279, 0), (2280, 0), (2281, 0), (2282, 0), (2283, 0), (2284, 0), (2285, 0), (2286, 0), (2287, 0), (2288, 0), (2289, 0), (2290, 0), (2291, 0), (2292, 0), (2293, 0), (2294, 0), (2295, 0), (2296, 0), (2297, 0), (2298, 0), (2299, 0), (2300, 0), (2301, 0), (2302, 0), (2303, 0), (2304, 0), (2305, 0), (2306, 0), (2307, 0), (2308, 0), (2309, 0), (2310, 0), (2311, 0), (2312, 0), (2313, 0), (2314, 0), (2315, 0), (2316, 0), (2317, 0), (2318, 0), (2319, 0), (2320, 0), (2321, 0), (2322, 0), (2323, 0), (2324, 0), (2325, 0), (2326, 0), (2327, 0), (2328, 0), (2329, 0), (2330, 0), (2331, 0), (2332, 0), (2333, 0), (2334, 0), (2335, 0), (2336, 0), (2337, 0), (2338, 0), (2339, 0), (2340, 0), (2341, 0), (2342, 0), (2343, 0), (2344, 0), (2345, 0), (2346, 0), (2347, 0), (2348, 0), (2349, 0), (2350, 0), (2351, 0), (2352, 0), (2353, 0), (2354, 0), (2355, 0), (2356, 0), (2357, 0), (2358, 0), (2359, 0), (2360, 0), (2361, 0), (2362, 0), (2363, 0), (2364, 0), (2365, 0), (2366, 0), (2367, 0), (2368, 0), (2369, 0), (2370, 0), (2371, 0), (2372, 0), (2373, 0), (2374, 0), (2375, 0), (2376, 0), (2377, 0), (2378, 0), (2379, 0), (2380, 0), (2381, 0), (2382, 0), (2383, 0), (2384, 0), (2385, 0), (2386, 0), (2387, 0), (2388, 0), (2389, 0), (2390, 0), (2391, 0), (2392, 0), (2393, 0), (2394, 0), (2395, 0), (2396, 0), (2397, 0), (2398, 0), (2399, 0), (2400, 0), (2401, 0), (2402, 0), (2403, 0), (2404, 0), (2405, 0), (2406, 0), (2407, 0), (2408, 0), (2409, 0), (2410, 0), (2411, 0), (2412, 0), (2413, 0), (2414, 0), (2415, 0), (2416, 0), (2417, 0), (2418, 0), (2419, 0), (2420, 0), (2421, 0), (2422, 0), (2423, 0), (2424, 0), (2425, 0), (2426, 0), (2427, 0), (2428, 0), (2429, 0), (2430, 0), (2431, 0), (2432, 0), (2433, 0), (2434, 0), (2435, 0), (2436, 0), (2437, 0), (2438, 0), (2439, 0), (2440, 0), (2441, 0), (2442, 0), (2443, 0), (2444, 0), (2445, 0), (2446, 0), (2447, 0), (2448, 0), (2449, 0), (2450, 0), (2451, 0), (2452, 0), (2453, 0), (2454, 0), (2455, 0), (2456, 0), (2457, 0), (2458, 0), (2459, 0), (2460, 0), (2461, 0), (2462, 0), (2463, 0), (2464, 0), (2465, 0), (2466, 0), (2467, 0), (2468, 0), (2469, 0), (2470, 0), (2471, 0), (2472, 0), (2473, 0), (2474, 0), (2475, 0), (2476, 0), (2477, 0), (2478, 0), (2479, 0), (2480, 0), (2481, 0), (2482, 0), (2483, 0), (2484, 0), (2485, 0), (2486, 0), (2487, 0), (2488, 0), (2489, 0), (2490, 0), (2491, 0), (2492, 0), (2493, 0), (2494, 0), (2495, 0), (2496, 0), (2497, 0), (2498, 0), (2499, 0), (2500, 0), (2501, 0), (2502, 0), (2503, 0), (2504, 0), (2505, 0), (2506, 0), (2507, 0), (2508, 0), (2509, 0), (2510, 0), (2511, 0), (2512, 0), (2513, 0), (2514, 0), (2515, 0), (2516, 0), (2517, 0), (2518, 0), (2519, 0), (2520, 0), (2521, 0), (2522, 0), (2523, 0), (2524, 0), (2525, 0), (2526, 0), (2527, 0), (2528, 0), (2529, 0), (2530, 0), (2531, 0), (2532, 0), (2533, 0), (2534, 0), (2535, 0), (2536, 0), (2537, 0), (2538, 0), (2539, 0), (2540, 0), (2541, 0), (2542, 0), (2543, 0), (2544, 0), (2545, 0), (2546, 0), (2547, 0), (2548, 0), (2549, 0), (2550, 0), (2551, 0), (2552, 0), (2553, 0), (2554, 0), (2555, 0), (2556, 0), (2557, 0), (2558, 0), (2559, 0), (2560, 0), (2561, 0), (2562, 0), (2563, 0), (2564, 0), (2565, 0), (2566, 0), (2567, 0), (2568, 0), (2569, 0), (2570, 0), (2571, 0), (2572, 0), (2573, 0), (2574, 0), (2575, 0), (2576, 0), (2577, 0), (2578, 0), (2579, 0), (2580, 0), (2581, 0), (2582, 0), (2583, 0), (2584, 0), (2585, 0), (2586, 0), (2587, 0), (2588, 0), (2589, 0), (2590, 0), (2591, 0), (2592, 0), (2593, 0), (2594, 0), (2595, 0), (2596, 0), (2597, 0), (2598, 0), (2599, 0), (2600, 0), (2601, 0), (2602, 0), (2603, 0), (2604, 0), (2605, 0), (2606, 0), (2607, 0), (2608, 0), (2609, 0), (2610, 0), (2611, 0), (2612, 0), (2613, 0), (2614, 0), (2615, 0), (2616, 0), (2617, 0), (2618, 0), (2619, 0), (2620, 0), (2621, 0), (2622, 0), (2623, 0), (2624, 0), (2625, 0), (2626, 0), (2627, 0), (2628, 0), (2629, 0), (2630, 0), (2631, 0), (2632, 0), (2633, 0), (2634, 0), (2635, 0), (2636, 0), (2637, 0), (2638, 0), (2639, 0), (2640, 0), (2641, 0), (2642, 0), (2643, 0), (2644, 0), (2645, 0), (2646, 0), (2647, 0), (2648, 0), (2649, 0), (2650, 0), (2651, 0), (2652, 0), (2653, 0), (2654, 0), (2655, 0), (2656, 0), (2657, 0), (2658, 0), (2659, 0), (2660, 0), (2661, 0), (2662, 0), (2663, 0), (2664, 0), (2665, 0), (2666, 0), (2667, 0), (2668, 0), (2669, 0), (2670, 0), (2671, 0), (2672, 0), (2673, 0), (2674, 0), (2675, 0), (2676, 0), (2677, 0), (2678, 0), (2679, 0), (2680, 0), (2681, 0), (2682, 0), (2683, 0), (2684, 0), (2685, 0), (2686, 0), (2687, 0), (2688, 0), (2689, 0), (2690, 0), (2691, 0), (2692, 0), (2693, 0), (2694, 0), (2695, 0), (2696, 0), (2697, 0), (2698, 0), (2699, 0), (2700, 0), (2701, 0), (2702, 0), (2703, 0), (2704, 0), (2705, 0), (2706, 0), (2707, 0), (2708, 0), (2709, 0), (2710, 0), (2711, 0), (2712, 0), (2713, 0), (2714, 0), (2715, 0), (2716, 0), (2717, 0), (2718, 0), (2719, 0), (2720, 0), (2721, 0), (2722, 0), (2723, 0), (2724, 0), (2725, 0), (2726, 0), (2727, 0), (2728, 0), (2729, 0), (2730, 0), (2731, 0), (2732, 0), (2733, 0), (2734, 0), (2735, 0), (2736, 0), (2737, 0), (2738, 0), (2739, 0), (2740, 0), (2741, 0), (2742, 0), (2743, 0), (2744, 0), (2745, 0), (2746, 0), (2747, 0), (2748, 0), (2749, 0), (2750, 0), (2751, 0), (2752, 0), (2753, 0), (2754, 0), (2755, 0), (2756, 0), (2757, 0), (2758, 0), (2759, 0), (2760, 0), (2761, 0), (2762, 0), (2763, 0), (2764, 0), (2765, 0), (2766, 0), (2767, 0), (2768, 0), (2769, 0), (2770, 0), (2771, 0), (2772, 0), (2773, 0), (2774, 0), (2775, 0), (2776, 0), (2777, 0), (2778, 0), (2779, 0), (2780, 0), (2781, 0), (2782, 0), (2783, 0), (2784, 0), (2785, 0), (2786, 0), (2787, 0), (2788, 0), (2789, 0), (2790, 0), (2791, 0), (2792, 0), (2793, 0), (2794, 0), (2795, 0), (2796, 0), (2797, 0), (2798, 0), (2799, 0), (2800, 0), (2801, 0), (2802, 0), (2803, 0), (2804, 0), (2805, 0), (2806, 0), (2807, 0), (2808, 0), (2809, 0), (2810, 0), (2811, 0), (2812, 0), (2813, 0), (2814, 0), (2815, 0), (2816, 0), (2817, 0), (2818, 0), (2819, 0), (2820, 0), (2821, 0), (2822, 0), (2823, 0), (2824, 0), (2825, 0), (2826, 0), (2827, 0), (2828, 0), (2829, 0), (2830, 0), (2831, 0), (2832, 0), (2833, 0), (2834, 0), (2835, 0), (2836, 0), (2837, 0), (2838, 0), (2839, 0), (2840, 0), (2841, 0), (2842, 0), (2843, 0), (2844, 0), (2845, 0), (2846, 0), (2847, 0), (2848, 0), (2849, 0), (2850, 0), (2851, 0), (2852, 0), (2853, 0), (2854, 0), (2855, 0), (2856, 0), (2857, 0), (2858, 0), (2859, 0), (2860, 0), (2861, 0), (2862, 0), (2863, 0), (2864, 0), (2865, 0), (2866, 0), (2867, 0), (2868, 0), (2869, 0), (2870, 0), (2871, 0), (2872, 0), (2873, 0), (2874, 0), (2875, 0), (2876, 0), (2877, 0), (2878, 0), (2879, 0), (2880, 0), (2881, 0), (2882, 0), (2883, 0), (2884, 0), (2885, 0), (2886, 0), (2887, 0), (2888, 0), (2889, 0), (2890, 0), (2891, 0), (2892, 0), (2893, 0), (2894, 0), (2895, 0), (2896, 0), (2897, 0), (2898, 0), (2899, 0), (2900, 0), (2901, 0), (2902, 0), (2903, 0), (2904, 0), (2905, 0), (2906, 0), (2907, 0), (2908, 0), (2909, 0), (2910, 0), (2911, 0), (2912, 0), (2913, 0), (2914, 0), (2915, 0), (2916, 0), (2917, 0), (2918, 0), (2919, 0), (2920, 0), (2921, 0), (2922, 0), (2923, 0), (2924, 0), (2925, 0), (2926, 0), (2927, 0), (2928, 0), (2929, 0), (2930, 0), (2931, 0), (2932, 0), (2933, 0), (2934, 0), (2935, 0), (2936, 0), (2937, 0), (2938, 0), (2939, 0), (2940, 0), (2941, 0), (2942, 0), (2943, 0), (2944, 0), (2945, 0), (2946, 0), (2947, 0), (2948, 0), (2949, 0), (2950, 0), (2951, 0), (2952, 0), (2953, 0), (2954, 0), (2955, 0), (2956, 0), (2957, 0), (2958, 0), (2959, 0), (2960, 0), (2961, 0), (2962, 0), (2963, 0), (2964, 0), (2965, 0), (2966, 0), (2967, 0), (2968, 0), (2969, 0), (2970, 0), (2971, 0), (2972, 0), (2973, 0), (2974, 0), (2975, 0), (2976, 0), (2977, 0), (2978, 0), (2979, 0), (2980, 0), (2981, 0), (2982, 0), (2983, 0), (2984, 0), (2985, 0), (2986, 0), (2987, 0), (2988, 0), (2989, 0), (2990, 0), (2991, 0), (2992, 0), (2993, 0), (2994, 0), (2995, 0), (2996, 0), (2997, 0), (2998, 0), (2999, 0)]
>>>


]]



#})]]]'''
__all__ = '''

    '''.split()

from itertools import count, pairwise, chain
import ast
from seed.data_funcs.rngs import sorted_ints_to_iter_nontouch_ranges
from nn_ns.math_nn.numbers.min_factor import min_factor, factor_uint__via_min_factor_list
from seed.tiny import echo, group4dict_value, fmap4dict_value
from seed.tiny import fmap4dict_value_with_key, group4dict_value_with_key#, filter4dict_value_with_key, filter4dict_item, group4dict_item
from seed.mapping_tools.dict_op import inv__k2v_to_v2ks #inv__k2v_to_v2k, inv__k2v_to_v2ks, inv__k2vs_to_v2k, inv__k2vs_to_v2ks
from seed.func_tools.dot2 import dot
from seed.math.floor_ceil import floor_log2, floor_log_, ceil_log2
from seed.math.max_power_of_base_as_factor_of_ import factor_pint_out_2_powers #max_power_of_base_as_factor_of_, count_num_low_0bits_of_pint, count_num_low_1bits_of_uint, factor_pint_out_2_powers, factor_nonzero_int_out_sign_and_2_powers

def iter_shortest_add_chains():
    '-> Iter<(num_adds/uint,final_sum/uint,total_shortest_add_chains/uint, shortest_add_chains/sorted[sorted[uint]])>'
    uss = [(1,)]
    u2uss = {}
    for L in count(0):
        _u2uss = {}
        for us in uss:
            assert len(us) == L+1
            u = us[-1]
            if u not in u2uss:
                _uss = _u2uss.setdefault(u, [])
                _uss.append(us)
        for u, _uss in sorted(_u2uss.items()):
            yield (L, u, len(_uss), _uss)
        u2uss.update(_u2uss)
        _uss = []
        for us in uss:
            #news = {us[i]+us[j] for i in range(len(us)) for j in range(j, len(us))} - {*us}
            #   不是append而是需要insert保持sorted，不同us产生相同的new_us
            #避免不同us产生相同的new_us
            _u = us[-1]
            news = {*()}
            for ui in us:
                min_uj = _u+1-ui
                for uj in reversed(us):
                    if uj < min_uj:
                        break
                    news.add(ui+uj)
            for u in sorted(news):
                _uss.append((*us, u))
        uss = _uss

def _read_output_of_iter_shortest_add_chains(ipath, /):
    it = _iter_output_of_iter_shortest_add_chains(ipath)
    final_sum2num_adds = {}
    for (num_adds, final_sum, total_shortest_add_chains, shortest_add_chains) in it:
        final_sum2num_adds[final_sum] = num_adds
    return final_sum2num_adds
def _iter_output_of_iter_shortest_add_chains(ipath, /):
    with open(ipath, 'rt', encoding='ascii') as fout:
        for line in fout:
            yield ast.literal_eval(line)

def _mk_rngs5output_of_iter_shortest_add_chains(ipath, /):
    final_sum2num_adds = _read_output_of_iter_shortest_add_chains(ipath)
    us = sorted(final_sum2num_adds)
    rngs = [*sorted_ints_to_iter_nontouch_ranges(us)]
    return rngs

def _iter_one_chain_per_final_sum5output_of_iter_shortest_add_chains(ipath, /):
    it = _iter_output_of_iter_shortest_add_chains(ipath)
    for (num_adds, final_sum, total_shortest_add_chains, shortest_add_chains) in it:
        yield (num_adds, final_sum, total_shortest_add_chains, shortest_add_chains[0])

class _show_3dot:
    def __repr__(sf, /):
        return '...'
_show_3dot = _show_3dot()

def _iter_two_chains_per_final_sum5output_of_iter_shortest_add_chains(ipath, /):
    it = _iter_output_of_iter_shortest_add_chains(ipath)
    for (num_adds, final_sum, total_shortest_add_chains, shortest_add_chains) in it:
        uss = shortest_add_chains
        uss = uss if len(uss) <= 2 else [uss[0], _show_3dot, uss[-1]]
        yield (num_adds, final_sum, total_shortest_add_chains, uss)

class 囗已知数据:
    final_sum2num_adds = (
    #py script/min_add_ver2.py @_read_output_of_iter_shortest_add_chains :script/min_add_ver2.py.4.out.txt
    #s/\([^,]*,\)\{9}\([^,]*\)/\0\r/g
{1: 0, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 8: 3, 7: 4, 9: 4, 10: 4
, 12: 4, 16: 4, 11: 5, 13: 5, 14: 5, 15: 5, 17: 5, 18: 5, 20: 5
, 24: 5, 32: 5, 19: 6, 21: 6, 22: 6, 23: 6, 25: 6, 26: 6, 27: 6
, 28: 6, 30: 6, 33: 6, 34: 6, 36: 6, 40: 6, 48: 6, 64: 6, 29: 7
, 31: 7, 35: 7, 37: 7, 38: 7, 39: 7, 41: 7, 42: 7, 43: 7, 44: 7
, 45: 7, 46: 7, 49: 7, 50: 7, 51: 7, 52: 7, 54: 7, 56: 7, 60: 7
, 65: 7, 66: 7, 68: 7, 72: 7, 80: 7, 96: 7, 128: 7, 47: 8, 53: 8
, 55: 8, 57: 8, 58: 8, 59: 8, 61: 8, 62: 8, 63: 8, 67: 8, 69: 8
, 70: 8, 73: 8, 74: 8, 75: 8, 76: 8, 77: 8, 78: 8, 81: 8, 82: 8
, 83: 8, 84: 8, 85: 8, 86: 8, 88: 8, 90: 8, 92: 8, 97: 8, 98: 8
, 99: 8, 100: 8, 102: 8, 104: 8, 108: 8, 112: 8, 120: 8, 129: 8, 130: 8
, 132: 8, 136: 8, 144: 8, 160: 8, 192: 8, 256: 8, 71: 9, 79: 9, 87: 9
, 89: 9, 91: 9, 93: 9, 94: 9, 95: 9, 101: 9, 103: 9, 105: 9, 106: 9
, 107: 9, 109: 9, 110: 9, 111: 9, 113: 9, 114: 9, 115: 9, 116: 9, 117: 9
, 118: 9, 119: 9, 121: 9, 122: 9, 123: 9, 124: 9, 125: 9, 126: 9, 131: 9
, 133: 9, 134: 9, 135: 9, 137: 9, 138: 9, 140: 9, 145: 9, 146: 9, 147: 9
, 148: 9, 149: 9, 150: 9, 152: 9, 153: 9, 154: 9, 156: 9, 161: 9, 162: 9
, 163: 9, 164: 9, 165: 9, 166: 9, 168: 9, 170: 9, 172: 9, 176: 9, 180: 9
, 184: 9, 193: 9, 194: 9, 195: 9, 196: 9, 198: 9, 200: 9, 204: 9, 208: 9
, 216: 9, 224: 9, 240: 9, 257: 9, 258: 9, 260: 9, 264: 9, 272: 9, 288: 9
, 320: 9, 384: 9, 512: 9, 127: 10, 139: 10, 141: 10, 142: 10, 143: 10, 151: 10
, 155: 10, 157: 10, 158: 10, 159: 10, 167: 10, 169: 10, 171: 10, 173: 10, 174: 10
, 175: 10, 177: 10, 178: 10, 179: 10, 181: 10, 182: 10, 183: 10, 185: 10, 186: 10
, 187: 10, 188: 10, 189: 10, 190: 10, 197: 10, 199: 10, 201: 10, 202: 10, 203: 10
, 205: 10, 206: 10, 207: 10, 209: 10, 210: 10, 211: 10, 212: 10, 213: 10, 214: 10
, 215: 10, 217: 10, 218: 10, 219: 10, 220: 10, 221: 10, 222: 10, 225: 10, 226: 10
, 227: 10, 228: 10, 229: 10, 230: 10, 231: 10, 232: 10, 233: 10, 234: 10, 236: 10
, 238: 10, 241: 10, 242: 10, 243: 10, 244: 10, 245: 10, 246: 10, 248: 10, 249: 10
, 250: 10, 252: 10, 255: 10, 259: 10, 261: 10, 262: 10, 265: 10, 266: 10, 268: 10
, 270: 10, 273: 10, 274: 10, 276: 10, 280: 10, 281: 10, 289: 10, 290: 10, 291: 10
, 292: 10, 293: 10, 294: 10, 296: 10, 297: 10, 298: 10, 300: 10, 304: 10, 306: 10
, 308: 10, 312: 10, 321: 10, 322: 10, 323: 10, 324: 10, 325: 10, 326: 10, 328: 10
, 330: 10, 332: 10, 336: 10, 340: 10, 344: 10, 352: 10, 360: 10, 368: 10, 385: 10
, 386: 10, 387: 10, 388: 10, 390: 10, 392: 10, 396: 10, 400: 10, 408: 10, 416: 10
, 432: 10, 448: 10, 480: 10, 513: 10, 514: 10, 516: 10, 520: 10, 528: 10
})

def 在已知数据中测试囗最小加法链囗偶数猜想(final_sum2num_adds=None, /):
    r'''[[[
最小加法链囗偶数猜想=[def]=???[@[k>=1] -> @[i>=0] -> [最少加法(k*2**i) == 最少加法(k)+i]]
    可能的反例候选:比如:126==5**3+1==53*2

    #]]]'''
    if final_sum2num_adds is None:
        final_sum2num_adds = 囗已知数据.final_sum2num_adds
    for n in sorted(final_sum2num_adds):
        if not n&1:
            half = n//2
            if not final_sum2num_adds[n] == 1+final_sum2num_adds[half]:
                yield ((n, final_sum2num_adds[n]), (half, final_sum2num_adds[half]))

def 在已知数据中测试囗最小加法链囗下限的乘法因子猜想(final_sum2num_adds=None, /):
    r'''[[[
最小加法链囗下限的乘法因子猜想=[def]=???[@[m>=1] -> @[n>=1] -> [最少加法(m*n) >= 最少加法(m)+[n>=2]]]

    #]]]'''
    if final_sum2num_adds is None:
        final_sum2num_adds = 囗已知数据.final_sum2num_adds
    for n in sorted(final_sum2num_adds):
        p2e = factor_uint__via_min_factor_list(n)
        failure_prime_factors = []
        for p in sorted(p2e):
            if not final_sum2num_adds[n] >= 1+final_sum2num_adds[n//p]:
                yield ((n, final_sum2num_adds[n]), p, (n//p, final_sum2num_adds[n//p]))
                failure_prime_factors.append(p)
        total = len(p2e)
        num_failure_prime_factors = len(failure_prime_factors)
        if num_failure_prime_factors >= 2:
            print(f'num_failure_prime_factors_ge2:{n}: [2 <= {num_failure_prime_factors} <= {total}]')
        if num_failure_prime_factors == total >= 1:
            print(f'all_prime_factors_failure__nonempty:{n}: [1 <= {num_failure_prime_factors} == {total}]')

def 在已知数据中列出囗最少加法囗于首个紧致区间上(final_sum2num_adds=None, /):
    '输出用于搜索OEIS'
    if final_sum2num_adds is None:
        final_sum2num_adds = 囗已知数据.final_sum2num_adds
    if 1 not in final_sum2num_adds: raise ValueError
    def _iter():
        for m in range(1, len(final_sum2num_adds)+1):
            if m not in final_sum2num_adds:
                break
            yield final_sum2num_adds[m]
    ls = [*_iter()]
    L = len(ls)
    return ((1, 1+L), L, ls)

def 加载下载的数据():
    from nn_ns.math_nn.numbers.shortest_addition_chain_length import pint2shortest_addition_chain_length__first_100000_terms as ls
    final_sum2num_adds = dict(enumerate(ls))
    del final_sum2num_adds[0]
    assert len(final_sum2num_adds) == 10**5
    return final_sum2num_adds
def 加载下载的数据并调用(func_name, /, *args, **kwargs):
    f = globals()[func_name]
    assert callable(f)
    final_sum2num_adds = 加载下载的数据()
    return f(final_sum2num_adds, *args, **kwargs)

def iter_growing_rngss5final_sum2num_adds(final_sum2num_adds=None, /):
    return _iter_growing_rngss5final_sum2changed_num_adds(None, final_sum2num_adds)

def _iter_growing_rngss5final_sum2changed_num_adds(change4num_adds, final_sum2num_adds, /):
    if final_sum2num_adds is None:
        final_sum2num_adds = 囗已知数据.final_sum2num_adds
    if change4num_adds is None:
        # change4num_adds = echo
        def change4num_adds(final_sum, num_adds, /):
            return num_adds

    #bug:final_sum2changed_num_adds = fmap4dict_value(change4num_adds, final_sum2num_adds)
    #final_sum2changed_num_adds = {k:change4num_adds(k,v) for k,v in final_sum2num_adds.items()}
    final_sum2changed_num_adds = fmap4dict_value_with_key(change4num_adds, final_sum2num_adds)
    del final_sum2num_adds

    final_sum2x = final_sum2changed_num_adds
    del final_sum2changed_num_adds

    xs = sorted({*final_sum2x.values()})
    x2final_sum2x = group4dict_value(echo, final_sum2x)
    assert xs == sorted(x2final_sum2x)

    _final_sum2x = {}
    for upper4x in xs:
        #_mk_rngs5output_of_iter_shortest_add_chains
        _final_sum2x.update(x2final_sum2x[upper4x])
        us = sorted(_final_sum2x)
        rngs = [*sorted_ints_to_iter_nontouch_ranges(us)]
        yield (upper4x, (len(us), len(rngs)), rngs)
    return
def count_num_1bits_of_uint(m, /):
    assert m >= 0
    return bin(m).count('1')
def _calc_upper_guess4num_adds__ver1(final_sum, /):
    m = final_sum
    num_1bits_of_m = count_num_1bits_of_uint(m)
    upper_guess4num_adds = floor_log2(m) +num_1bits_of_m-1
    return upper_guess4num_adds
def _change4num_adds__distance_to_upper_guess__ver1(final_sum, num_adds, /):
    upper_guess4num_adds = _calc_upper_guess4num_adds__ver1(final_sum)
    return upper_guess4num_adds -num_adds
def iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess(final_sum2num_adds=None, /):
    return _iter_growing_rngss5final_sum2changed_num_adds(_change4num_adds__distance_to_upper_guess__ver1, final_sum2num_adds)



def _calc_upper_guess4num_adds__ver2(final_sum, /):
    r'''[[[
[[
[最少加法(n) <= floor_log2(n)*4//3 +2]
[最少加法(n) <= floor_log_(71;n**9)]
<<==
For all n >= 2, a(n) <= (4/3)*floor(log_2 n) + 2. - Jonathan Vos Post, Oct 08 2008

From Achim Flammenkamp, Oct 26 2016: (Start)
a(n) <= 9/log_2(71) log_2(n), for all n.
]]

    #]]]'''
    m = final_sum
    assert m >= 1
    def _iter():
        yield _calc_upper_guess4num_adds__ver1(m)
        yield floor_log2(m)*4//3 +2
        yield floor_log_(71,m**9)
    return min(_iter())
def _calc_upper_guess4num_adds__ver4(final_sum, /):
    m = final_sum
    assert m >= 1
    (e, odd) = factor_pint_out_2_powers(m)
    upper_guess4num_adds__ver4 = e+_calc_upper_guess4num_adds__ver2(odd)
    if __debug__:
        upper_guess4num_adds__ver2 = _calc_upper_guess4num_adds__ver2(m)
        assert upper_guess4num_adds__ver4 <= upper_guess4num_adds__ver2
    return upper_guess4num_adds__ver4


def _calc_upper_guess4num_adds__ver5_(final_sum, /, *, 递降递归囗最少加法囗上限估计):
    return min(
        _calc_upper_guess4num_adds__ver4(final_sum)
        ,_calc_upper_guess4num_adds__ver3_(final_sum, 递降递归囗最少加法囗上限估计=递降递归囗最少加法囗上限估计)
        )
def _calc_upper_guess4num_adds__ver3_(final_sum, /, *, 递降递归囗最少加法囗上限估计):
    r'''[[[
    [m>=2]:
        [最少加法囗上限估计(m) := min{min((count_num_1bits_of_uint(r)-0), [r>=1]max(1,最少加法囗上限估计(r))) +(k+1) +最少加法囗上限估计(q) | [k :<- [0..=-1+ceil_log2(m)==floor_log2(m-1)]][(q,r):=divmod(m,(2**k+1))]}]

    递降递归囗最少加法囗上限估计:最好使用cache[m<-[1..]]
    #]]]'''
    if 递降递归囗最少加法囗上限估计 is None:
        递降递归囗最少加法囗上限估计 = _calc_upper_guess4num_adds__ver3_
        递降递归囗最少加法囗上限估计 = _calc_upper_guess4num_adds__ver1
        递降递归囗最少加法囗上限估计 = _calc_upper_guess4num_adds__ver2
    m = final_sum
    assert m >= 1
    if m == 1:
        return 0

    assert m >= 2
    max_k = floor_log2(m-1)
    return min((min((count_num_1bits_of_uint(r)-0), (0 if r==0 else max(1,递降递归囗最少加法囗上限估计(r)))) +(k+1) +递降递归囗最少加法囗上限估计(q)) for k in range(max_k+1) for (q,r) in [divmod(m,(1<<k)+1)])

class _Cached__upper_guess4num_adds:
    def __init__(sf, /):
        sf._ls = [None]
    def fill_le(sf, m, /):
        ls = sf._ls
        ls.extend(map(sf._calc_upper_guess4num_adds_, range(len(ls), m+1)))
            #sf.calc_and_cache__upper_guess4num_adds(n)
        assert len(ls) >= m+1
    #def calc_and_cache__upper_guess4num_adds(sf, final_sum, /):
    def _calc_upper_guess4num_adds_(sf, final_sum, /):
        raise NotImplementedError
    def _calc_upper_guess4num_adds__verN(sf, final_sum, /):
        sf.fill_le(final_sum)
        return sf._ls[final_sum]

class _Cached__upper_guess4num_adds__ver3(_Cached__upper_guess4num_adds):
    def _calc_upper_guess4num_adds_(sf, final_sum, /):
        return _calc_upper_guess4num_adds__ver3_(final_sum, 递降递归囗最少加法囗上限估计=sf._calc_upper_guess4num_adds__verN)
_calc_upper_guess4num_adds__ver3 = _Cached__upper_guess4num_adds__ver3()._calc_upper_guess4num_adds__verN
#def _calc_upper_guess4num_adds__ver3(final_sum, /):
class _Cached__upper_guess4num_adds__ver5(_Cached__upper_guess4num_adds):
    def _calc_upper_guess4num_adds_(sf, final_sum, /):
        return _calc_upper_guess4num_adds__ver5_(final_sum, 递降递归囗最少加法囗上限估计=sf._calc_upper_guess4num_adds__verN)
_calc_upper_guess4num_adds__ver5 = _Cached__upper_guess4num_adds__ver5()._calc_upper_guess4num_adds__verN
#def _calc_upper_guess4num_adds__ver5(final_sum, /):



def iter_growing_rngss5final_sum2changed_num_adds__name(final_sum2num_adds=None, /, *, name4change4num_adds):
    change4num_adds = globals()[name4change4num_adds]
    assert callable(change4num_adds)
    return _iter_growing_rngss5final_sum2changed_num_adds(change4num_adds, final_sum2num_adds)
def iter_growing_rngss5final_sum2changed_num_adds__distance_to_upper_guess__name4calc_upper_guess(final_sum2num_adds=None, /, *, name4calc_upper_guess4num_adds):
    calc_upper_guess4num_adds = globals()[name4calc_upper_guess4num_adds]
    assert callable(calc_upper_guess4num_adds)
    def change4num_adds(final_sum, num_adds, /):
        upper_guess4num_adds = calc_upper_guess4num_adds(final_sum)
        return upper_guess4num_adds -num_adds
    return _iter_growing_rngss5final_sum2changed_num_adds(change4num_adds, final_sum2num_adds)

def 在已知数据中列出囗比特一的数量最多的正整数囗等同最少加法下(final_sum2num_adds=None, /):
    #TODO:num_1bits_of_m(num_adds<m>)最快增长速率
    if final_sum2num_adds is None:
        final_sum2num_adds = 囗已知数据.final_sum2num_adds
    num_adds2final_sums = inv__k2v_to_v2ks(final_sum2num_adds)
    #num_adds2final_sums = fmap4dict_value(sorted, num_adds2final_sums)
    def _mk_final_sum2num_1bits(final_sums, /):
        return {m:count_num_1bits_of_uint(m) for m in final_sums}
    num_adds2final_sum2num_1bits = fmap4dict_value(_mk_final_sum2num_1bits, num_adds2final_sums)
    num_adds2num_1bits2final_sums = fmap4dict_value(inv__k2v_to_v2ks, num_adds2final_sum2num_1bits)
    num_adds2max_num_1bits_and_final_sums = fmap4dict_value(dot[max, dict.items], num_adds2num_1bits2final_sums)
    for num_adds, (max_num_1bits, final_sums) in sorted(num_adds2max_num_1bits_and_final_sums.items()):
        final_sums = sorted(final_sums)
        yield (num_adds, max_num_1bits, final_sums)
    return
if __name__ == "__main__":
    from seed.recognize.cmdline.adhoc_argparser import adhoc_argparser__main__call, AdhocArgParserError, _NOP_
    adhoc_argparser__main__call(globals(), None)
        #main()


