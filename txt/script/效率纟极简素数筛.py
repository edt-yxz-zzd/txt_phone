#__all__:goto
r'''[[[
e script/效率纟极简素数筛.py

script.效率纟极简素数筛
py -m nn_ns.app.debug_cmd   script.效率纟极简素数筛 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.效率纟极简素数筛:__doc__ -ht # -ff -df

[[
]]


>>> 1/2
0.5
>>> 1/2*2/3
0.3333333333333333
>>> 1/2*2/3*4/5
0.26666666666666666
>>> 1/2*2/3*4/5*6/7
0.2285714285714286
>>> 1/2*2/3*4/5*6/7*10/11
0.20779220779220783
>>> 1/2*2/3*4/5*6/7*10/11*12/13
0.19180819180819184
>>> 1/2*2/3*4/5*6/7*10/11*12/13*16/17
0.18052535699594527
>>> 1/2*2/3*4/5*6/7*10/11*12/13*16/17*18/19
0.17102402241721132
>>> 1/2*2/3*4/5*6/7*10/11*12/13*16/17*18/19*22/23
0.16358819535559344
>>> 1/2*2/3*4/5*6/7*10/11*12/13*16/17*18/19*22/23*28/29
0.1579472231019523
>>> 1/2*2/3*4/5*6/7*10/11*12/13*16/17*18/19*22/23*28/29*30/31
0.1528521513889861
>>> 1/2*2/3*4/5*6/7*10/11*12/13*16/17*18/19*22/23*28/29*30/31*36/37
0.14872101216225675
>>> 1/2*2/3*4/5*6/7*10/11*12/13*16/17*18/19*22/23*28/29*30/31*36/37*40/41
0.1450936704022017

vs:(12, 41, 0.14509367040220164)
    相同:145093670402201

[[[
py_adhoc_call   script.效率纟极简素数筛   ,101:枚举冫筛后剩余比例纟极简素数筛扌
===
(0, 2, 0.5)
(1, 3, 0.3333333333333333)
(2, 5, 0.26666666666666666)
(3, 7, 0.22857142857142856)
(4, 11, 0.2077922077922078)
(5, 13, 0.1918081918081918)
(6, 17, 0.18052535699594524)
(7, 19, 0.17102402241721126)
(8, 23, 0.16358819535559338)
(9, 29, 0.15794722310195225)
(10, 31, 0.15285215138898603)
(11, 37, 0.1487210121622567)
(12, 41, 0.14509367040220164)
(13, 43, 0.14171939899749927)
(14, 47, 0.13870409263585035)
(15, 53, 0.13608703428423055)
(16, 59, 0.133780474381108)
(17, 61, 0.13158735185027015)
(18, 67, 0.12962336152414672)
(19, 71, 0.1277976803759193)
(20, 73, 0.1260470272200848)
(21, 79, 0.12445149522995713)
(22, 83, 0.12295207962477693)
(23, 89, 0.12157059558404909)
(24, 97, 0.12031729047493518)
(25, 101, 0.11912603017320315)
(26, 103, 0.11796946677346332)
(27, 107, 0.11686694839240291)
(28, 109, 0.11579477455394051)
(29, 113, 0.11477004203576403)
(30, 127, 0.1138663409173722)
(31, 131, 0.11299713220807928)
(32, 137, 0.11217233562261884)
(33, 139, 0.11136534040231223)
(34, 149, 0.11061792201035041)
(35, 151, 0.10988535299041431)
(36, 157, 0.109185446283469)
(37, 163, 0.10851559691976674)
(38, 167, 0.1078658029262352)
(39, 173, 0.10724230117521649)
(40, 179, 0.10664318217423763)
(41, 181, 0.10605399332244626)
(42, 191, 0.10549873681290466)
(43, 193, 0.10495211123356318)
(44, 197, 0.10441935939989028)
(45, 199, 0.10389463900089585)
(46, 211, 0.10340224734686317)
(47, 223, 0.1029385601390297)
(48, 227, 0.10248508630581812)
(49, 229, 0.10203755317784512)
(50, 233, 0.10159962376506466)
(51, 239, 0.10117452073675895)
(52, 241, 0.10075470944739481)
(53, 251, 0.10035329626234543)
(54, 257, 0.09996281651035187)
(55, 263, 0.09958272975555965)
(56, 269, 0.09921253373416353)
(57, 271, 0.09884643582370535)
(58, 277, 0.09848958948499162)
(59, 281, 0.09813909272525854)
(60, 283, 0.09779231147887954)
(61, 293, 0.09745854932366152)
(62, 307, 0.097141094765604)
(63, 311, 0.09682874397857633)
(64, 313, 0.09651938696906011)
(65, 317, 0.09621490940764352)
(66, 331, 0.09592422992302828)
(67, 337, 0.09563958829120921)
(68, 347, 0.09536396988114808)
(69, 349, 0.0950907206837809)
(70, 353, 0.09482134187164554)
(71, 359, 0.09455721557116742)
(72, 367, 0.09429956648241765)
(73, 373, 0.09404675263125835)
(74, 379, 0.09379860816521281)
(75, 383, 0.09355370318305821)
(76, 389, 0.09331320523143082)
(77, 397, 0.0930781593744247)
(78, 401, 0.09284604426376528)
(79, 409, 0.09261903682057758)
(80, 419, 0.09239798900000341)
(81, 421, 0.09217851634204616)
(82, 431, 0.09196464507443121)
(83, 433, 0.09175225559388979)
(84, 439, 0.09154325273376704)
(85, 443, 0.09133660882240413)
(86, 449, 0.0911331865310402)
(87, 457, 0.09093377036795258)
(88, 461, 0.09073651706997438)
(89, 463, 0.09054054187111915)
(90, 467, 0.09034666490779769)
(91, 479, 0.09015804974097556)
(92, 487, 0.08997292027538835)
(93, 491, 0.08978967603857493)
(94, 499, 0.0896097368080367)
(95, 503, 0.0894315862378418)
(96, 509, 0.08925588567548848)
(97, 521, 0.0890845691962649)
(98, 523, 0.0889142354119508)
(99, 541, 0.08874988377532983)
(100, 547, 0.08858763535892154)
===
]]]




from script.效率纟极简素数筛 import *
]]]'''#'''
__all__ = r'''
枚举冫筛后剩余比例纟极简素数筛扌
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
#.from itertools import islice
#.from seed.tiny_.check import check_type_is, check_int_ge
#.
___end_mark_of_excluded_global_names__0___ = ...


def 枚举冫筛后剩余比例纟极简素数筛扌():
    from seed.math.prime_gens import prime_gen
    N = D = 1
    for j, p in enumerate(iter(prime_gen)):
        N *= (p-1)
        D *= p
        ratio = N/D
        yield (j, p, ratio)


__all__
from script.效率纟极简素数筛 import *
