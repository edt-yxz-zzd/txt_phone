#__all__:goto
r'''[[[
e script/辅助冫素性判定牜高斯和.py

script.辅助冫素性判定牜高斯和
py -m nn_ns.app.debug_cmd   script.辅助冫素性判定牜高斯和 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.辅助冫素性判定牜高斯和:__doc__ -ht # -ff -df

[[
the deterministic Gauss sums primality test.

@20250225
'Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance).pdf'
4.4 Gauss and Jacobi sums
page197
Algorithm 4.4.5 (Gauss sums primality test).
step1:[Initialize]
    I = −2;
step2. [Preparation]
    I = I + 4;
    Find the prime factors of I by trial division, but if I is not squarefree, goto [Preparation];
    Set F equal to the product of the primes q with [I%(q − 1)==0], but if F**2 <= n goto [Preparation];
    // Now I,F are squarefree, and F > √n.
    If n is a prime factor of IF, return “n is prime”;
    If gcd(n,I*F) > 1, return “n is composite”;
    for(prime q|F) find the least positive primitive root g[q] for q;
step3:... ...

]]

def print_iterable_with_lineno_(max_sz, xs, /, *, offset=0, to_str=repr):
def print_iterable_(max_sz, xs, /, *, to_str=repr, may_min_lineno=None):
def print_iterable_with_linenoT(max_sz, /, *, offset=0, to_str=repr):
def print_iterableT(max_sz, /, *, to_str=repr, may_min_lineno=None):
>>> from seed.tiny_.print_iterable_with_lineno_ import print_iterable_with_lineno_, print_iterable_, print_iterable_with_linenoT, print_iterableT

>>> f = lambda sz:print_iterable_with_lineno_(sz, 枚举冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌(), offset=1)
>>> f(20)
1:((2, 6), ((2,), (2, 3)))
2:((6, 42), ((2, 3), (2, 3, 7)))
3:((10, 66), ((2, 5), (2, 3, 11)))
4:((22, 138), ((2, 11), (2, 3, 23)))
5:((30, 14322), ((2, 3, 5), (2, 3, 11, 7, 31)))
6:((66, 64722), ((2, 3, 11), (2, 3, 23, 7, 67)))
7:((138, 274386), ((2, 3, 23), (2, 3, 47, 7, 139)))
8:((210, 9225988926), ((2, 3, 5, 7), (2, 3, 11, 71, 7, 43, 31, 211)))
9:((690, 64653847566), ((2, 3, 5, 23), (2, 3, 47, 11, 7, 139, 31, 691)))
10:((1326, 200903848194), ((2, 3, 13, 17), (2, 3, 443, 7, 103, 79, 1327)))
11:((2310, 5035290113931125903778), ((2, 3, 5, 7, 11), (2, 3, 23, 11, 71, 7, 67, 43, 463, 31, 331, 211, 2311)))
12:((2730, 129938760413955562413498), ((2, 3, 5, 7, 13), (2, 3, 11, 131, 71, 911, 7, 79, 43, 547, 31, 211, 2731)))
13:((4830, 194566087632722440987506), ((2, 3, 5, 7, 23), (2, 3, 47, 11, 71, 7, 139, 43, 967, 31, 691, 211, 4831)))
14:((6006, 575502929150304528915486), ((2, 3, 7, 11, 13), (2, 3, 23, 2003, 7, 79, 67, 859, 43, 547, 463, 6007)))
15:((7590, 633601423104707805761706), ((2, 3, 5, 11, 23), (2, 3, 47, 23, 11, 2531, 7, 139, 67, 31, 691, 331, 7591)))
16:((11730, 717079884733416284588046), ((2, 3, 5, 17, 23), (2, 3, 47, 11, 3911, 7, 139, 103, 2347, 31, 691, 11731)))
17:((29670, 2112398571628588389196974), ((2, 3, 5, 23, 43), (2, 3, 47, 1979, 11, 431, 7, 139, 31, 1291, 691, 29671)))
18:((30030, 732962968692882219931808949892246022477932266), ((2, 3, 5, 7, 11, 13), (2, 3, 23, 2003, 11, 131, 71, 911, 7, 79, 67, 859, 43, 547, 463, 6007, 31, 331, 211, 2731, 2311)))
19:((43890, 1627376515591430539167456314445611275968043326), ((2, 3, 5, 7, 11, 19), (2, 3, 23, 419, 2927, 11, 191, 71, 7, 67, 43, 463, 8779, 31, 571, 331, 6271, 211, 2311, 43891)))
20:((46410, 2892994585732193521067637338540943207145251798), ((2, 3, 5, 7, 13, 17), (2, 3, 443, 239, 11, 131, 71, 911, 7, 103, 79, 1327, 43, 547, 9283, 31, 211, 3571, 2731, 46411)))

>>> g = lambda sz:print_iterable_(sz, 分离列表冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌(sz))
>>> g(20)  #doctest: +SKIP
[2, 6, 10, 22, 30, 66, 138, 210, 690, 1326, 2310, 2730, 4830, 6006, 7590, 11730, 29670, 30030, 43890, 46410]
[6, 42, 66, 138, 14322, 64722, 274386, 9225988926, 64653847566, 200903848194, 5035290113931125903778, 129938760413955562413498, 194566087632722440987506, 575502929150304528915486, 633601423104707805761706, 717079884733416284588046, 2112398571628588389196974, 732962968692882219931808949892246022477932266, 1627376515591430539167456314445611275968043326, 2892994585732193521067637338540943207145251798]
[(2,), (2, 3), (2, 5), (2, 11), (2, 3, 5), (2, 3, 11), (2, 3, 23), (2, 3, 5, 7), (2, 3, 5, 23), (2, 3, 13, 17), (2, 3, 5, 7, 11), (2, 3, 5, 7, 13), (2, 3, 5, 7, 23), (2, 3, 7, 11, 13), (2, 3, 5, 11, 23), (2, 3, 5, 17, 23), (2, 3, 5, 23, 43), (2, 3, 5, 7, 11, 13), (2, 3, 5, 7, 11, 19), (2, 3, 5, 7, 13, 17)]
[(2, 3), (2, 3, 7), (2, 3, 11), (2, 3, 23), (2, 3, 11, 7, 31), (2, 3, 23, 7, 67), (2, 3, 47, 7, 139), (2, 3, 11, 71, 7, 43, 31, 211), (2, 3, 47, 11, 7, 139, 31, 691), (2, 3, 443, 7, 103, 79, 1327), (2, 3, 23, 11, 71, 7, 67, 43, 463, 31, 331, 211, 2311), (2, 3, 11, 131, 71, 911, 7, 79, 43, 547, 31, 211, 2731), (2, 3, 47, 11, 71, 7, 139, 43, 967, 31, 691, 211, 4831), (2, 3, 23, 2003, 7, 79, 67, 859, 43, 547, 463, 6007), (2, 3, 47, 23, 11, 2531, 7, 139, 67, 31, 691, 331, 7591), (2, 3, 47, 11, 3911, 7, 139, 103, 2347, 31, 691, 11731), (2, 3, 47, 1979, 11, 431, 7, 139, 31, 1291, 691, 29671), (2, 3, 23, 2003, 11, 131, 71, 911, 7, 79, 67, 859, 43, 547, 463, 6007, 31, 331, 211, 2731, 2311), (2, 3, 23, 419, 2927, 11, 191, 71, 7, 67, 43, 463, 8779, 31, 571, 331, 6271, 211, 2311, 43891), (2, 3, 443, 239, 11, 131, 71, 911, 7, 103, 79, 1327, 43, 547, 9283, 31, 211, 3571, 2731, 46411)]


















F[20]才46十进制数位
    n~90十进制数位
F[25]才50十进制数位
    n~100十进制数位
F[27]才55十进制数位
    n~110十进制数位
F[28]才84十进制数位#大跃进
    n~168十进制数位
F[32]才101十进制数位
    n~200十进制数位
F[33]才108十进制数位
    n~216十进制数位
F[34]才109十进制数位
    n~218十进制数位

py_adhoc_call   script.辅助冫素性判定牜高斯和   @list.20:枚举冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌
py_adhoc_call { +lineno }  script.辅助冫素性判定牜高斯和   ,20:枚举冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌
[[[
py_adhoc_call { +lineno }  script.辅助冫素性判定牜高斯和   ,40:枚举冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌
===
1:((2, 6), ((2,), (2, 3)))
2:((6, 42), ((2, 3), (2, 3, 7)))
3:((10, 66), ((2, 5), (2, 3, 11)))
4:((22, 138), ((2, 11), (2, 3, 23)))
5:((30, 14322), ((2, 3, 5), (2, 3, 11, 7, 31)))
6:((66, 64722), ((2, 3, 11), (2, 3, 23, 7, 67)))
7:((138, 274386), ((2, 3, 23), (2, 3, 47, 7, 139)))
8:((210, 9225988926), ((2, 3, 5, 7), (2, 3, 11, 71, 7, 43, 31, 211)))
9:((690, 64653847566), ((2, 3, 5, 23), (2, 3, 47, 11, 7, 139, 31, 691)))
10:((1326, 200903848194), ((2, 3, 13, 17), (2, 3, 443, 7, 103, 79, 1327)))
11:((2310, 5035290113931125903778), ((2, 3, 5, 7, 11), (2, 3, 23, 11, 71, 7, 67, 43, 463, 31, 331, 211, 2311)))
12:((2730, 129938760413955562413498), ((2, 3, 5, 7, 13), (2, 3, 11, 131, 71, 911, 7, 79, 43, 547, 31, 211, 2731)))
13:((4830, 194566087632722440987506), ((2, 3, 5, 7, 23), (2, 3, 47, 11, 71, 7, 139, 43, 967, 31, 691, 211, 4831)))
14:((6006, 575502929150304528915486), ((2, 3, 7, 11, 13), (2, 3, 23, 2003, 7, 79, 67, 859, 43, 547, 463, 6007)))
15:((7590, 633601423104707805761706), ((2, 3, 5, 11, 23), (2, 3, 47, 23, 11, 2531, 7, 139, 67, 31, 691, 331, 7591)))
16:((11730, 717079884733416284588046), ((2, 3, 5, 17, 23), (2, 3, 47, 11, 3911, 7, 139, 103, 2347, 31, 691, 11731)))
17:((29670, 2112398571628588389196974), ((2, 3, 5, 23, 43), (2, 3, 47, 1979, 11, 431, 7, 139, 31, 1291, 691, 29671)))
18:((30030, 732962968692882219931808949892246022477932266), ((2, 3, 5, 7, 11, 13), (2, 3, 23, 2003, 11, 131, 71, 911, 7, 79, 67, 859, 43, 547, 463, 6007, 31, 331, 211, 2731, 2311)))
19:((43890, 1627376515591430539167456314445611275968043326), ((2, 3, 5, 7, 11, 19), (2, 3, 23, 419, 2927, 11, 191, 71, 7, 67, 43, 463, 8779, 31, 571, 331, 6271, 211, 2311, 43891)))
20:((46410, 2892994585732193521067637338540943207145251798), ((2, 3, 5, 7, 13, 17), (2, 3, 443, 239, 11, 131, 71, 911, 7, 103, 79, 1327, 43, 547, 9283, 31, 211, 3571, 2731, 46411)))
21:((53130, 21681061046959412094916093234429617924688164306), ((2, 3, 5, 7, 11, 23), (2, 3, 47, 23, 11, 2531, 71, 7, 139, 67, 43, 967, 463, 10627, 31, 691, 331, 7591, 211, 4831, 2311)))
22:((62790, 924608784380201117748891248418052037640366749682), ((2, 3, 5, 7, 13, 23), (2, 3, 47, 599, 11, 131, 71, 911, 7, 139, 79, 43, 967, 547, 31, 691, 8971, 211, 4831, 2731, 62791)))
23:((108570, 2921367926771118908003761753301328734295471927726), ((2, 3, 5, 7, 11, 47), (2, 3, 23, 659, 11, 5171, 71, 36191, 7, 283, 67, 43, 463, 31, 331, 15511, 211, 9871, 2311, 108571)))
24:((168630, 7628929619273715327151428906097733807867929085214), ((2, 3, 5, 7, 11, 73), (2, 3, 23, 1607, 11243, 11, 71, 7, 439, 67, 43, 3067, 463, 31, 331, 24091, 211, 15331, 2311, 168631)))
25:((198030, 14338084534521470555507019356957725139789234402982), ((2, 3, 5, 7, 23, 41), (2, 3, 83, 47, 11, 9431, 71, 7, 139, 5659, 43, 1723, 967, 39607, 31, 1231, 691, 211, 4831, 198031)))
26:((332310, 18425559026743826512648683560033318680896189597186), ((2, 3, 5, 11, 19, 53), (2, 3, 107, 23, 419, 11, 191, 110771, 7, 6043, 67, 3499, 66463, 31, 571, 30211, 331, 17491, 6271)))
27:((348810, 1757926380028709161481799854674087246273019855158984674), ((2, 3, 5, 7, 11, 151), (2, 3, 23, 3323, 11, 1511, 71, 7, 907, 67, 9967, 43, 6343, 463, 69763, 31, 331, 49831, 211, 2311, 348811)))
28:((510510, 255326063724039312904523743080416423277471162753367341938296020524531511934351748454), ((2, 3, 5, 7, 11, 13, 17), (2, 3, 443, 23, 239, 2003, 11, 131, 1871, 71, 911, 7, 103, 79, 1327, 67, 1123, 859, 43, 547, 9283, 463, 6007, 102103, 31, 331, 72931, 211, 3571, 2731, 46411, 2311)))
29:((570570, 88825439909468064587887880264094131312233163009047803090683973614894619951379034152715394), ((2, 3, 5, 7, 11, 13, 19), (2, 3, 23, 419, 2927, 2003, 38039, 11, 191, 131, 71, 911, 17291, 7, 79, 1483, 67, 859, 43, 547, 463, 8779, 6007, 31, 571, 7411, 331, 6271, 211, 2731, 51871, 2311, 43891)))
30:((1345890, 325530671522292379426299540664052372163600985962324775605061152575854648957593828595243581354), ((2, 3, 5, 7, 13, 17, 29), (2, 3, 59, 443, 239, 5279, 11, 4931, 131, 64091, 71, 34511, 911, 448631, 7, 103, 79, 1327, 43, 20707, 547, 9283, 269179, 31, 11311, 192271, 211, 6091, 3571, 2731, 46411)))
31:((1411410, 2978247957159560897716942709252960759308969328089312446989612542766953985584487319369333078449706), ((2, 3, 5, 7, 11, 13, 47), (2, 3, 1223, 23, 659, 2003, 11, 131, 5171, 67211, 71, 911, 36191, 470471, 7, 283, 79, 67, 859, 43, 547, 463, 6007, 31, 331, 15511, 211, 9871, 2731, 128311, 2311, 108571, 1411411)))
32:((1820910, 10365199545497667920194445403148140253539860167135156060623435574553494335515588947953108846107931546), ((2, 3, 5, 7, 13, 23, 29), (2, 3, 59, 47, 599, 5279, 11, 131, 86711, 71, 46691, 911, 606971, 7, 139, 4003, 79, 52027, 43, 967, 547, 364183, 31, 691, 20011, 11311, 8971, 211, 6091, 4831, 140071, 2731, 62791)))
33:((4305210, 101487193332128699775028626479161386600771520640574167784118749096737426144515362544318437284642637103120866), ((2, 3, 5, 7, 13, 19, 83), (2, 3, 167, 1163, 22079, 15107, 11, 191, 131, 71, 911, 17291, 7, 499, 9463, 79, 1483, 123007, 43, 547, 45319, 861043, 31, 571, 32371, 7411, 615031, 211, 17431, 331171, 2731, 51871, 4305211)))
34:((6003690, 1143374644499935123071581588087569003379377572668849658787156372060110158430716543012827564502506709933009022), ((2, 3, 5, 7, 11, 23, 113), (2, 3, 227, 47, 23, 57179, 1583, 400247, 11, 2531, 71, 181931, 87011, 7, 139, 67, 7459, 43, 967, 109159, 463, 10627, 1200739, 31, 3391, 691, 331, 7591, 857671, 211, 4831, 545791, 2311, 261031)))
... crash ...
===
]]]



py_adhoc_call   script.辅助冫素性判定牜高斯和   @分离列表冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌  =20
py_adhoc_call   script.辅助冫素性判定牜高斯和   ,分离列表冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌  =20


from script.辅助冫素性判定牜高斯和 import *
]]]'''#'''
__all__ = r'''
枚举冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌
分离列表冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
#.from itertools import islice
#.from seed.tiny_.check import check_type_is, check_int_ge
#.
#.from seed.abc.abc__ver1 import abstractmethod, override, ABC
#.from seed.helper.repr_input import repr_helper
___end_mark_of_excluded_global_names__0___ = ...

#.class __(ABC):
#.    __slots__ = ()
#.    ___no_slots_ok___ = True
#.    def __repr__(sf, /):
#.        return repr_helper(sf, *args, **kwargs)
#.if __name__ == "__main__":
#.    raise NotImplementedError


def 分离列表冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌(sz, /):
    from itertools import islice
    it = 枚举冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌()
    it = islice(it, sz)
    lss = [[] for _ in range(4)]
    for (a, b), (c, d) in it:
        lss[0].append(a)
        lss[1].append(b)
        lss[2].append(c)
        lss[3].append(d)
    return tuple(lss)
def 枚举冫首胞无平方因子耂双递增耂正整数有序对暨分解序列纟素性判定牜高斯和扌():
    '-> Iter ((I, F), (prime_factors4I, prime_factors4F))'
    from seed.math.prime_gens import all_prime_factors_gen# tabulate_may_all_prime_factors4uint_lt_
    from seed.math.II import II
    from itertools import product, compress
    #from seed.math.prime_gens import is_prime__le_pow2_81_
    #is_prime_ = is_prime__le_pow2_81_
    def is_prime_(q4F, /):
        return all_prime_factors_gen[q4F] == (q4F,)


    def calc_F_ex_(prime_factors4I, /):
        prime_factors4F = []
        L = len(prime_factors4I)
        for bs in product(range(2), repeat=L):
            q4F = 1+II(compress(prime_factors4I, bs))
            if not is_prime_(q4F):continue
            prime_factors4F.append(q4F)
        prime_factors4F = tuple(prime_factors4F)
        F = II(prime_factors4F)
        return (F, prime_factors4F)

    __ = all_prime_factors_gen.get_or_mk_lazy_all_prime_factors_seq_()
        # weakref-cache
    I = -2
    prev_F = -1
    while 1:
        I += 4
        prime_factors4I = all_prime_factors_gen[I]
        if not II(prime_factors4I) == I: continue
        (F, prime_factors4F) = calc_F_ex_(prime_factors4I)
        if not F > prev_F:continue
        prev_F = F
        yield ((I, F), (prime_factors4I, prime_factors4F))

__all__
from script.辅助冫素性判定牜高斯和 import *
