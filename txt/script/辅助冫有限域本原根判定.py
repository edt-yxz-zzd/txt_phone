#__all__:goto
r'''[[[
e script/辅助冫有限域本原根判定.py
view script/辅助冫有限域本原根判定牜数据收集.py
    部分 输出数据 移至 新文件
view ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py
    (2**n-1) [1..=3000]之间缺失815个
view ../../fxt/_ignore__unzip/fxt/data/mersenne-factors.txt
    (2**n-1) [1..=1200]

++kw:timeout

script.辅助冫有限域本原根判定
py -m nn_ns.app.debug_cmd   script.辅助冫有限域本原根判定 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.辅助冫有限域本原根判定:__doc__ -ht # -ff -df



[[
factor (p**n-1)
    <==> factor (p-1), (p**n-1)/(p-1)
<<==:
[[p :: prime] -> [n :: pint] -> [f(x),g(x) :: (ZZ%p)[x]] -> [deg(f(x)) == n] -> [[g(x)**(p**n-1) %f(x) == 1][@[d :<- all_prime_factor_of(p**n-1)] -> [g(x)**((p**n-1)/d) %f(x) =!= 1]]] -> [[is_primitive_polynomial_(p,n; f(x))][is_finite_field(p,n; (ZZ%p)[x]%f(x))][is_primitive_root_((ZZ%p)[x]%f(x); g(x))]]]
    # GF(p**n)
]]
[[
view ../../fxt/_ignore__unzip/fxt/data/mersenne-factors.txt
    (2**n-1) [1..=1200]
===:
#
# Factorizations of Mersenne numbers 2**n-1 for n<=1200
#
# format:  an entry
#    n: a.b.c.d
# means that 2**n-1 == a*b*c*d
#
# Repeated factors occur according to their multiplicity.
# Composite factors have the letter C prepended.
# The first such entry appears with n=787
#
# Extracted from:
#   J.Brillhart, D.H.Lehmer, J.L.Selfridge, B.Tuckerman, S.S.Wagstaff Jr.:
#   {Factorizations of $b^n +-1 b=2,3,5,6,10,11$ up to high powers},
#   Contemporary Mathematics, Volume~22, Second Edition,
#   American Mathematical Society, 1988
#   (online version of June-2006)
#.

... ...
787: 9951597611230279.96512008100928793.C847485796604747326165327482849934275105622414539817731615514207366361791907216255429043094060871322325590021965236616107269568655093084140543593046072375681421163547606143705166808288886982781571997632241
    ###847485796604747326165327482849934275105622414539817731615514207366361791907216255429043094060871322325590021965236616107269568655093084140543593046072375681421163547606143705166808288886982781571997632241 == 171124793552074153093621463907993111755630713094272377046079303 * 4952443062243070276982618235553391899025005974177841614150652967038194584843406813849759422158280687571671371337185220166834929387719842135047
... ...
]]
[[
view ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py
    view ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py.cached.txt
    [1..=3000]之间缺失815个
        整数分解仍旧是个大问题
    [1..=1206]完整
view script/辅助冫有限域本原根判定牜数据收集.py
815缺失:[1207 ,1213 ,1217 ,1229 ,1231 ,1237 ,1243 ,1249 ,1255 ,1259 ,1265 ,1277 ,1283 ,1291 ,1297 ,1315 ,1319 ,1325 ,1331 ,1339 ,1343 ,1345 ,1349 ,1351 ,1357 ,1367 ,1379 ,1381 ,1385 ,1387 ,1403 ,1415 ,1417 ,1419 ,1421 ,1423 ,1429 ,1433 ,1439 ,1443 ,1447 ,1451 ,1453 ,1463 ,1465 ,1467 ,1475 ,1477 ,1481 ,1483 ,1493 ,1497 ,1499 ,1501 ,1503 ,1505 ,1507 ,1511 ,1513 ,1517 ,1519 ,1521 ,1523 ,1525 ,1533 ,1537 ,1541 ,1549 ,1551 ,1561 ,1565 ,1567 ,1569 ,1571 ,1573 ,1577 ,1579 ,1581 ,1583 ,1585 ,1587 ,1589 ,1591 ,1597 ,1599 ,1601 ,1607 ,1609 ,1611 ,1613 ,1619 ,1621 ,1627 ,1629 ,1631 ,1633 ,1635 ,1639 ,1641 ,1643 ,1645 ,1647 ,1649 ,1651 ,1653 ,1655 ,1659 ,1661 ,1663 ,1665 ,1667 ,1669 ,1675 ,1677 ,1679 ,1685 ,1687 ,1689 ,1691 ,1695 ,1697 ,1699 ,1701 ,1703 ,1705 ,1707 ,1709 ,1711 ,1715 ,1717 ,1719 ,1721 ,1729 ,1731 ,1733 ,1735 ,1737 ,1739 ,1741 ,1743 ,1745 ,1747 ,1749 ,1751 ,1753 ,1757 ,1759 ,1761 ,1763 ,1765 ,1767 ,1769 ,1771 ,1773 ,1777 ,1779 ,1785 ,1787 ,1789 ,1791 ,1793 ,1795 ,1799 ,1801 ,1803 ,1805 ,1807 ,1809 ,1811 ,1817 ,1819 ,1821 ,1823 ,1825 ,1827 ,1829 ,1831 ,1833 ,1835 ,1837 ,1839 ,1841 ,1843 ,1845 ,1847 ,1849 ,1851 ,1853 ,1855 ,1857 ,1859 ,1861 ,1863 ,1865 ,1867 ,1869 ,1871 ,1873 ,1875 ,1877 ,1879 ,1881 ,1885 ,1887 ,1889 ,1891 ,1893 ,1895 ,1897 ,1899 ,1901 ,1903 ,1905 ,1909 ,1911 ,1913 ,1915 ,1919 ,1921 ,1923 ,1929 ,1931 ,1933 ,1937 ,1939 ,1941 ,1943 ,1945 ,1947 ,1949 ,1951 ,1953 ,1955 ,1957 ,1959 ,1961 ,1963 ,1965 ,1967 ,1969 ,1971 ,1973 ,1977 ,1979 ,1981 ,1985 ,1987 ,1989 ,1991 ,1993 ,1995 ,2001 ,2003 ,2005 ,2007 ,2009 ,2011 ,2013 ,2015 ,2017 ,2019 ,2023 ,2025 ,2027 ,2033 ,2035 ,2039 ,2041 ,2043 ,2045 ,2047 ,2049 ,2051 ,2053 ,2055 ,2057 ,2059 ,2061 ,2063 ,2067 ,2071 ,2073 ,2075 ,2077 ,2079 ,2081 ,2083 ,2085 ,2089 ,2091 ,2095 ,2097 ,2099 ,2101 ,2103 ,2105 ,2107 ,2109 ,2111 ,2113 ,2115 ,2117 ,2121 ,2123 ,2125 ,2127 ,2129 ,2131 ,2133 ,2135 ,2137 ,2139 ,2141 ,2143 ,2145 ,2147 ,2149 ,2151 ,2153 ,2155 ,2157 ,2159 ,2161 ,2163 ,2165 ,2167 ,2171 ,2173 ,2179 ,2181 ,2182 ,2183 ,2185 ,2187 ,2189 ,2191 ,2193 ,2194 ,2195 ,2197 ,2199 ,2201 ,2205 ,2207 ,2209 ,2213 ,2215 ,2216 ,2217 ,2218 ,2219 ,2221 ,2223 ,2225 ,2227 ,2229 ,2231 ,2233 ,2235 ,2237 ,2239 ,2241 ,2245 ,2246 ,2247 ,2248 ,2249 ,2253 ,2255 ,2257 ,2258 ,2261 ,2263 ,2265 ,2267 ,2269 ,2272 ,2273 ,2275 ,2277 ,2278 ,2279 ,2283 ,2285 ,2287 ,2291 ,2293 ,2294 ,2295 ,2297 ,2299 ,2301 ,2302 ,2303 ,2305 ,2306 ,2307 ,2309 ,2315 ,2318 ,2319 ,2321 ,2326 ,2327 ,2329 ,2331 ,2333 ,2335 ,2336 ,2337 ,2339 ,2341 ,2343 ,2345 ,2347 ,2349 ,2355 ,2359 ,2360 ,2361 ,2363 ,2367 ,2369 ,2371 ,2373 ,2374 ,2375 ,2377 ,2379 ,2385 ,2389 ,2391 ,2393 ,2395 ,2397 ,2399 ,2401 ,2403 ,2405 ,2407 ,2410 ,2411 ,2414 ,2416 ,2417 ,2419 ,2421 ,2423 ,2425 ,2426 ,2427 ,2429 ,2431 ,2432 ,2433 ,2434 ,2435 ,2437 ,2439 ,2443 ,2445 ,2446 ,2449 ,2451 ,2453 ,2455 ,2457 ,2458 ,2459 ,2461 ,2462 ,2463 ,2465 ,2467 ,2469 ,2471 ,2473 ,2474 ,2475 ,2477 ,2479 ,2480 ,2481 ,2482 ,2483 ,2485 ,2486 ,2487 ,2489 ,2491 ,2493 ,2495 ,2498 ,2501 ,2503 ,2505 ,2507 ,2509 ,2510 ,2511 ,2512 ,2513 ,2515 ,2517 ,2518 ,2519 ,2521 ,2522 ,2523 ,2525 ,2530 ,2531 ,2533 ,2535 ,2537 ,2539 ,2541 ,2542 ,2543 ,2545 ,2546 ,2547 ,2551 ,2552 ,2553 ,2554 ,2555 ,2557 ,2559 ,2561 ,2563 ,2565 ,2566 ,2567 ,2569 ,2570 ,2571 ,2573 ,2575 ,2577 ,2578 ,2579 ,2581 ,2582 ,2584 ,2585 ,2589 ,2591 ,2593 ,2594 ,2595 ,2597 ,2599 ,2600 ,2601 ,2602 ,2603 ,2605 ,2606 ,2607 ,2609 ,2611 ,2613 ,2615 ,2617 ,2619 ,2621 ,2623 ,2625 ,2626 ,2627 ,2629 ,2630 ,2631 ,2632 ,2633 ,2635 ,2638 ,2639 ,2641 ,2642 ,2643 ,2645 ,2647 ,2649 ,2650 ,2653 ,2654 ,2655 ,2656 ,2657 ,2659 ,2661 ,2662 ,2663 ,2665 ,2667 ,2669 ,2671 ,2673 ,2675 ,2678 ,2679 ,2681 ,2683 ,2685 ,2686 ,2687 ,2689 ,2690 ,2691 ,2693 ,2695 ,2696 ,2697 ,2698 ,2701 ,2702 ,2703 ,2705 ,2707 ,2709 ,2711 ,2713 ,2714 ,2717 ,2719 ,2720 ,2721 ,2723 ,2725 ,2726 ,2727 ,2729 ,2731 ,2734 ,2735 ,2737 ,2738 ,2739 ,2741 ,2743 ,2744 ,2745 ,2746 ,2747 ,2750 ,2751 ,2752 ,2753 ,2755 ,2757 ,2758 ,2759 ,2761 ,2762 ,2763 ,2765 ,2767 ,2768 ,2769 ,2770 ,2771 ,2773 ,2774 ,2775 ,2777 ,2779 ,2781 ,2782 ,2783 ,2786 ,2787 ,2791 ,2792 ,2793 ,2794 ,2795 ,2797 ,2798 ,2801 ,2803 ,2806 ,2807 ,2809 ,2811 ,2813 ,2815 ,2816 ,2818 ,2819 ,2821 ,2823 ,2824 ,2825 ,2827 ,2829 ,2830 ,2831 ,2832 ,2833 ,2834 ,2835 ,2838 ,2839 ,2840 ,2841 ,2842 ,2843 ,2845 ,2846 ,2847 ,2848 ,2849 ,2851 ,2853 ,2854 ,2855 ,2857 ,2858 ,2859 ,2861 ,2863 ,2864 ,2866 ,2867 ,2869 ,2870 ,2872 ,2875 ,2877 ,2878 ,2879 ,2881 ,2882 ,2883 ,2885 ,2886 ,2888 ,2889 ,2890 ,2891 ,2893 ,2894 ,2895 ,2896 ,2897 ,2899 ,2902 ,2903 ,2905 ,2906 ,2907 ,2911 ,2912 ,2913 ,2914 ,2915 ,2917 ,2919 ,2920 ,2921 ,2923 ,2925 ,2926 ,2930 ,2931 ,2933 ,2934 ,2935 ,2937 ,2938 ,2939 ,2941 ,2942 ,2943 ,2944 ,2945 ,2946 ,2947 ,2950 ,2951 ,2953 ,2954 ,2955 ,2957 ,2960 ,2962 ,2963 ,2965 ,2966 ,2967 ,2968 ,2969 ,2971 ,2973 ,2974 ,2975 ,2976 ,2977 ,2978 ,2979 ,2983 ,2985 ,2986 ,2987 ,2989 ,2990 ,2991 ,2993 ,2994 ,2995 ,2997 ,2998 ,2999]
]]






$ factor -h 1 2 4 12
1:
2: 2
4: 2^2
12: 2^2 3

py_adhoc_call   script.辅助冫有限域本原根判定   ,stable_repr.factor_pints__via_GNU_factor_ ='[1,2,4,12,27,72]'
(1, {})
(2, {2: 1})
(4, {2: 2})
(12, {2: 2, 3: 1})
(27, {3: 3})
(72, {2: 3, 3: 2})

py_adhoc_call   script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='range(1,10)'
(2, 1, 1, {})
(2, 2, 3, {3: 1})
(2, 3, 7, {7: 1})
(2, 4, 15, {3: 1, 5: 1})
(2, 5, 31, {31: 1})
(2, 6, 63, {3: 2, 7: 1})
(2, 7, 127, {127: 1})
(2, 8, 255, {3: 1, 5: 1, 17: 1})
(2, 9, 511, {7: 1, 73: 1})
py_adhoc_call   script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='range(1,10)' +to_stderr   >  /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp

py_adhoc_call { -flush4print }  script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='range(1,10)' +to_stderr
py_adhoc_call { +flush4print }  script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='range(1,10)' +to_stderr

[[
after:_primes5p2e6doc include all prime factor from:view ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='range(1,3003)' +to_stderr --timeout=4   >  /sdcard/0my_files/tmp/0tmp
===
]]

[[
#py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='count(1)' +to_stderr   >  /sdcard/0my_files/tmp/0tmp
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='count(137)' +to_stderr --timeout=120  >>  /sdcard/0my_files/tmp/0tmp
(2, 1, 1, {})
(2, 2, 3, {3: 1})
(2, 3, 7, {7: 1})
(2, 4, 15, {3: 1, 5: 1})
(2, 5, 31, {31: 1})
(2, 6, 63, {3: 2, 7: 1})
(2, 7, 127, {127: 1})
(2, 8, 255, {3: 1, 5: 1, 17: 1})
(2, 9, 511, {7: 1, 73: 1})
(2, 10, 1023, {3: 1, 11: 1, 31: 1})
(2, 11, 2047, {23: 1, 89: 1})
(2, 12, 4095, {3: 2, 5: 1, 7: 1, 13: 1})
(2, 13, 8191, {8191: 1})
(2, 14, 16383, {3: 1, 43: 1, 127: 1})
(2, 15, 32767, {7: 1, 31: 1, 151: 1})
(2, 16, 65535, {3: 1, 5: 1, 17: 1, 257: 1})
(2, 17, 131071, {131071: 1})
(2, 18, 262143, {3: 3, 7: 1, 19: 1, 73: 1})
(2, 19, 524287, {524287: 1})
(2, 20, 1048575, {3: 1, 5: 2, 11: 1, 31: 1, 41: 1})
(2, 21, 2097151, {7: 2, 127: 1, 337: 1})
(2, 22, 4194303, {3: 1, 23: 1, 89: 1, 683: 1})
(2, 23, 8388607, {47: 1, 178481: 1})
(2, 24, 16777215, {3: 2, 5: 1, 7: 1, 13: 1, 17: 1, 241: 1})
(2, 25, 33554431, {31: 1, 601: 1, 1801: 1})
(2, 26, 67108863, {3: 1, 2731: 1, 8191: 1})
(2, 27, 134217727, {7: 1, 73: 1, 262657: 1})
(2, 28, 268435455, {3: 1, 5: 1, 29: 1, 43: 1, 113: 1, 127: 1})
(2, 29, 536870911, {233: 1, 1103: 1, 2089: 1})
(2, 30, 1073741823, {3: 2, 7: 1, 11: 1, 31: 1, 151: 1, 331: 1})
(2, 31, 2147483647, {2147483647: 1})
(2, 32, 4294967295, {3: 1, 5: 1, 17: 1, 257: 1, 65537: 1})
(2, 33, 8589934591, {7: 1, 23: 1, 89: 1, 599479: 1})
(2, 34, 17179869183, {3: 1, 43691: 1, 131071: 1})
(2, 35, 34359738367, {31: 1, 71: 1, 127: 1, 122921: 1})
(2, 36, 68719476735, {3: 3, 5: 1, 7: 1, 13: 1, 19: 1, 37: 1, 73: 1, 109: 1})
(2, 37, 137438953471, {223: 1, 616318177: 1})
(2, 38, 274877906943, {3: 1, 174763: 1, 524287: 1})
(2, 39, 549755813887, {7: 1, 79: 1, 8191: 1, 121369: 1})
(2, 40, 1099511627775, {3: 1, 5: 2, 11: 1, 17: 1, 31: 1, 41: 1, 61681: 1})
(2, 41, 2199023255551, {13367: 1, 164511353: 1})
(2, 42, 4398046511103, {3: 2, 7: 2, 43: 1, 127: 1, 337: 1, 5419: 1})
(2, 43, 8796093022207, {431: 1, 9719: 1, 2099863: 1})
(2, 44, 17592186044415, {3: 1, 5: 1, 23: 1, 89: 1, 397: 1, 683: 1, 2113: 1})
(2, 45, 35184372088831, {7: 1, 31: 1, 73: 1, 151: 1, 631: 1, 23311: 1})
(2, 46, 70368744177663, {3: 1, 47: 1, 178481: 1, 2796203: 1})
(2, 47, 140737488355327, {2351: 1, 4513: 1, 13264529: 1})
(2, 48, 281474976710655, {3: 2, 5: 1, 7: 1, 13: 1, 17: 1, 97: 1, 241: 1, 257: 1, 673: 1})
(2, 49, 562949953421311, {127: 1, 4432676798593: 1})
(2, 50, 1125899906842623, {3: 1, 11: 1, 31: 1, 251: 1, 601: 1, 1801: 1, 4051: 1})
(2, 51, 2251799813685247, {7: 1, 103: 1, 2143: 1, 11119: 1, 131071: 1})
(2, 52, 4503599627370495, {3: 1, 5: 1, 53: 1, 157: 1, 1613: 1, 2731: 1, 8191: 1})
(2, 53, 9007199254740991, {6361: 1, 69431: 1, 20394401: 1})
(2, 54, 18014398509481983, {3: 4, 7: 1, 19: 1, 73: 1, 87211: 1, 262657: 1})
(2, 55, 36028797018963967, {23: 1, 31: 1, 89: 1, 881: 1, 3191: 1, 201961: 1})
(2, 56, 72057594037927935, {3: 1, 5: 1, 17: 1, 29: 1, 43: 1, 113: 1, 127: 1, 15790321: 1})
(2, 57, 144115188075855871, {7: 1, 32377: 1, 524287: 1, 1212847: 1})
(2, 58, 288230376151711743, {3: 1, 59: 1, 233: 1, 1103: 1, 2089: 1, 3033169: 1})
(2, 59, 576460752303423487, {179951: 1, 3203431780337: 1})
(2, 60, 1152921504606846975, {3: 2, 5: 2, 7: 1, 11: 1, 13: 1, 31: 1, 41: 1, 61: 1, 151: 1, 331: 1, 1321: 1})
(2, 61, 2305843009213693951, {2305843009213693951: 1})
(2, 62, 4611686018427387903, {3: 1, 715827883: 1, 2147483647: 1})
(2, 63, 9223372036854775807, {7: 2, 73: 1, 127: 1, 337: 1, 92737: 1, 649657: 1})
(2, 64, 18446744073709551615, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 6700417: 1})
(2, 65, 36893488147419103231, {31: 1, 8191: 1, 145295143558111: 1})
(2, 66, 73786976294838206463, {3: 2, 7: 1, 23: 1, 67: 1, 89: 1, 683: 1, 20857: 1, 599479: 1})
(2, 67, 147573952589676412927, {193707721: 1, 761838257287: 1})
(2, 68, 295147905179352825855, {3: 1, 5: 1, 137: 1, 953: 1, 26317: 1, 43691: 1, 131071: 1})
(2, 69, 590295810358705651711, {7: 1, 47: 1, 178481: 1, 10052678938039: 1})
(2, 70, 1180591620717411303423, {3: 1, 11: 1, 31: 1, 43: 1, 71: 1, 127: 1, 281: 1, 86171: 1, 122921: 1})
(2, 71, 2361183241434822606847, {228479: 1, 48544121: 1, 212885833: 1})
(2, 72, 4722366482869645213695, {3: 3, 5: 1, 7: 1, 13: 1, 17: 1, 19: 1, 37: 1, 73: 1, 109: 1, 241: 1, 433: 1, 38737: 1})
(2, 73, 9444732965739290427391, {439: 1, 2298041: 1, 9361973132609: 1})
(2, 74, 18889465931478580854783, {3: 1, 223: 1, 1777: 1, 25781083: 1, 616318177: 1})
(2, 75, 37778931862957161709567, {7: 1, 31: 1, 151: 1, 601: 1, 1801: 1, 100801: 1, 10567201: 1})
(2, 76, 75557863725914323419135, {3: 1, 5: 1, 229: 1, 457: 1, 174763: 1, 524287: 1, 525313: 1})
(2, 77, 151115727451828646838271, {23: 1, 89: 1, 127: 1, 581283643249112959: 1})
(2, 78, 302231454903657293676543, {3: 2, 7: 1, 79: 1, 2731: 1, 8191: 1, 121369: 1, 22366891: 1})
(2, 79, 604462909807314587353087, {2687: 1, 202029703: 1, 1113491139767: 1})
(2, 80, 1208925819614629174706175, {3: 1, 5: 2, 11: 1, 17: 1, 31: 1, 41: 1, 257: 1, 61681: 1, 4278255361: 1})
(2, 81, 2417851639229258349412351, {7: 1, 73: 1, 2593: 1, 71119: 1, 262657: 1, 97685839: 1})
(2, 82, 4835703278458516698824703, {3: 1, 83: 1, 13367: 1, 164511353: 1, 8831418697: 1})
(2, 83, 9671406556917033397649407, {167: 1, 57912614113275649087721: 1})
(2, 84, 19342813113834066795298815, {3: 2, 5: 1, 7: 2, 13: 1, 29: 1, 43: 1, 113: 1, 127: 1, 337: 1, 1429: 1, 5419: 1, 14449: 1})
(2, 85, 38685626227668133590597631, {31: 1, 131071: 1, 9520972806333758431: 1})
(2, 86, 77371252455336267181195263, {3: 1, 431: 1, 9719: 1, 2099863: 1, 2932031007403: 1})
(2, 87, 154742504910672534362390527, {7: 1, 233: 1, 1103: 1, 2089: 1, 4177: 1, 9857737155463: 1})
(2, 88, 309485009821345068724781055, {3: 1, 5: 1, 17: 1, 23: 1, 89: 1, 353: 1, 397: 1, 683: 1, 2113: 1, 2931542417: 1})
(2, 89, 618970019642690137449562111, {618970019642690137449562111: 1})
(2, 90, 1237940039285380274899124223, {3: 3, 7: 1, 11: 1, 19: 1, 31: 1, 73: 1, 151: 1, 331: 1, 631: 1, 23311: 1, 18837001: 1})
(2, 91, 2475880078570760549798248447, {127: 1, 911: 1, 8191: 1, 112901153: 1, 23140471537: 1})
(2, 92, 4951760157141521099596496895, {3: 1, 5: 1, 47: 1, 277: 1, 1013: 1, 1657: 1, 30269: 1, 178481: 1, 2796203: 1})
(2, 93, 9903520314283042199192993791, {7: 1, 2147483647: 1, 658812288653553079: 1})
(2, 94, 19807040628566084398385987583, {3: 1, 283: 1, 2351: 1, 4513: 1, 13264529: 1, 165768537521: 1})
(2, 95, 39614081257132168796771975167, {31: 1, 191: 1, 524287: 1, 420778751: 1, 30327152671: 1})
(2, 96, 79228162514264337593543950335, {3: 2, 5: 1, 7: 1, 13: 1, 17: 1, 97: 1, 193: 1, 241: 1, 257: 1, 673: 1, 65537: 1, 22253377: 1})
(2, 97, 158456325028528675187087900671, {11447: 1, 13842607235828485645766393: 1})
(2, 98, 316912650057057350374175801343, {3: 1, 43: 1, 127: 1, 4363953127297: 1, 4432676798593: 1})
(2, 99, 633825300114114700748351602687, {7: 1, 23: 1, 73: 1, 89: 1, 199: 1, 153649: 1, 599479: 1, 33057806959: 1})
(2, 100, 1267650600228229401496703205375, {3: 1, 5: 3, 11: 1, 31: 1, 41: 1, 101: 1, 251: 1, 601: 1, 1801: 1, 4051: 1, 8101: 1, 268501: 1})
(2, 101, 2535301200456458802993406410751, {7432339208719: 1, 341117531003194129: 1})
(2, 102, 5070602400912917605986812821503, {3: 2, 7: 1, 103: 1, 307: 1, 2143: 1, 2857: 1, 6529: 1, 11119: 1, 43691: 1, 131071: 1})
(2, 103, 10141204801825835211973625643007, {2550183799: 1, 3976656429941438590393: 1})
(2, 104, 20282409603651670423947251286015, {3: 1, 5: 1, 17: 1, 53: 1, 157: 1, 1613: 1, 2731: 1, 8191: 1, 858001: 1, 308761441: 1})
(2, 105, 40564819207303340847894502572031, {7: 2, 31: 1, 71: 1, 127: 1, 151: 1, 337: 1, 29191: 1, 106681: 1, 122921: 1, 152041: 1})
(2, 106, 81129638414606681695789005144063, {3: 1, 107: 1, 6361: 1, 69431: 1, 20394401: 1, 28059810762433: 1})
(2, 107, 162259276829213363391578010288127, {162259276829213363391578010288127: 1})
(2, 108, 324518553658426726783156020576255, {3: 4, 5: 1, 7: 1, 13: 1, 19: 1, 37: 1, 73: 1, 109: 1, 87211: 1, 246241: 1, 262657: 1, 279073: 1})
(2, 109, 649037107316853453566312041152511, {745988807: 1, 870035986098720987332873: 1})
(2, 110, 1298074214633706907132624082305023, {3: 1, 11: 2, 23: 1, 31: 1, 89: 1, 683: 1, 881: 1, 2971: 1, 3191: 1, 201961: 1, 48912491: 1})
(2, 111, 2596148429267413814265248164610047, {7: 1, 223: 1, 321679: 1, 26295457: 1, 319020217: 1, 616318177: 1})
(2, 112, 5192296858534827628530496329220095, {3: 1, 5: 1, 17: 1, 29: 1, 43: 1, 113: 1, 127: 1, 257: 1, 5153: 1, 15790321: 1, 54410972897: 1})
(2, 113, 10384593717069655257060992658440191, {3391: 1, 23279: 1, 65993: 1, 1868569: 1, 1066818132868207: 1})
(2, 114, 20769187434139310514121985316880383, {3: 2, 7: 1, 571: 1, 32377: 1, 174763: 1, 524287: 1, 1212847: 1, 160465489: 1})
(2, 115, 41538374868278621028243970633760767, {31: 1, 47: 1, 14951: 1, 178481: 1, 4036961: 1, 2646507710984041: 1})
(2, 116, 83076749736557242056487941267521535, {3: 1, 5: 1, 59: 1, 233: 1, 1103: 1, 2089: 1, 3033169: 1, 107367629: 1, 536903681: 1})
(2, 117, 166153499473114484112975882535043071, {7: 1, 73: 1, 79: 1, 937: 1, 6553: 1, 8191: 1, 86113: 1, 121369: 1, 7830118297: 1})
(2, 118, 332306998946228968225951765070086143, {3: 1, 2833: 1, 37171: 1, 179951: 1, 1824726041: 1, 3203431780337: 1})
(2, 119, 664613997892457936451903530140172287, {127: 1, 239: 1, 20231: 1, 131071: 1, 62983048367: 1, 131105292137: 1})
(2, 120, 1329227995784915872903807060280344575, {3: 2, 5: 2, 7: 1, 11: 1, 13: 1, 17: 1, 31: 1, 41: 1, 61: 1, 151: 1, 241: 1, 331: 1, 1321: 1, 61681: 1, 4562284561: 1})
(2, 121, 2658455991569831745807614120560689151, {23: 1, 89: 1, 727: 1, 1786393878363164227858270210279: 1})
(2, 122, 5316911983139663491615228241121378303, {3: 1, 768614336404564651: 1, 2305843009213693951: 1})
(2, 123, 10633823966279326983230456482242756607, {7: 1, 13367: 1, 3887047: 1, 164511353: 1, 177722253954175633: 1})
(2, 124, 21267647932558653966460912964485513215, {3: 1, 5: 1, 5581: 1, 8681: 1, 49477: 1, 384773: 1, 715827883: 1, 2147483647: 1})
(2, 125, 42535295865117307932921825928971026431, {31: 1, 601: 1, 1801: 1, 269089806001: 1, 4710883168879506001: 1})
(2, 126, 85070591730234615865843651857942052863, {3: 3, 7: 2, 19: 1, 43: 1, 73: 1, 127: 1, 337: 1, 5419: 1, 92737: 1, 649657: 1, 77158673929: 1})
(2, 127, 170141183460469231731687303715884105727, {170141183460469231731687303715884105727: 1})
(2, 128, 340282366920938463463374607431768211455, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 6700417: 1, 67280421310721: 1})
(2, 129, 680564733841876926926749214863536422911, {7: 1, 431: 1, 9719: 1, 2099863: 1, 11053036065049294753459639: 1})
(2, 130, 1361129467683753853853498429727072845823, {3: 1, 11: 1, 31: 1, 131: 1, 2731: 1, 8191: 1, 409891: 1, 7623851: 1, 145295143558111: 1})
(2, 131, 2722258935367507707706996859454145691647, {263: 1, 10350794431055162386718619237468234569: 1})
(2, 132, 5444517870735015415413993718908291383295, {3: 2, 5: 1, 7: 1, 13: 1, 23: 1, 67: 1, 89: 1, 397: 1, 683: 1, 2113: 1, 20857: 1, 312709: 1, 599479: 1, 4327489: 1})
(2, 133, 10889035741470030830827987437816582766591, {127: 1, 524287: 1, 163537220852725398851434325720959: 1})
(2, 134, 21778071482940061661655974875633165533183, {3: 1, 7327657: 1, 193707721: 1, 761838257287: 1, 6713103182899: 1})
(2, 135, 43556142965880123323311949751266331066367, {7: 1, 31: 1, 73: 1, 151: 1, 271: 1, 631: 1, 23311: 1, 262657: 1, 348031: 1, 49971617830801: 1})
(2, 136, 87112285931760246646623899502532662132735, {3: 1, 5: 1, 17: 2, 137: 1, 953: 1, 26317: 1, 43691: 1, 131071: 1, 354689: 1, 2879347902817: 1})
view ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py
    view ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py.cached.txt
    [1..=3000]之间缺失815个
        整数分解仍旧是个大问题
]]
[[
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='[1<<e for e in range(25)]' +to_stderr +without_ppowmm --timeout=120  >>  /sdcard/0my_files/tmp/0tmp
(2, 1, -99999, {})
(2, 2, -99999, {3: 1})
(2, 4, -99999, {3: 1, 5: 1})
(2, 8, -99999, {3: 1, 5: 1, 17: 1})
(2, 16, -99999, {3: 1, 5: 1, 17: 1, 257: 1})
(2, 32, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 65537: 1})
(2, 64, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 6700417: 1})
(2, 128, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 6700417: 1, 67280421310721: 1})
timeout@factor(2**256-1)
timeout@factor(2**512-1)
^C KeyboardInterrupt

view ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py.cached.txt
>256
: {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 6700417: 1, 67280421310721: 1, 59649589127497217: 1, 5704689200685129054721: 1}
.
>512
: {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 6700417: 1, 67280421310721: 1, 1238926361552897: 1, 59649589127497217: 1, 5704689200685129054721: 1, 93461639715357977769163558199606896584051237541638188580280321: 1}
.
>1024
: {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 2424833: 1, 6700417: 1, 67280421310721: 1, 1238926361552897: 1, 59649589127497217: 1, 5704689200685129054721: 1, 7455602825647884208337395736200454918783366342657: 1, 93461639715357977769163558199606896584051237541638188580280321: 1, 741640062627530801524787141901937474059940781097519023905821316144415759504705008092818711693940737: 1}
.
>2048
: {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 2424833: 1, 6700417: 1, 45592577: 1, 6487031809: 1, 67280421310721: 1, 1238926361552897: 1, 59649589127497217: 1, 5704689200685129054721: 1, 4659775785220018543264560743076778192897: 1, 7455602825647884208337395736200454918783366342657: 1, 93461639715357977769163558199606896584051237541638188580280321: 1, 741640062627530801524787141901937474059940781097519023905821316144415759504705008092818711693940737: 1, 130439874405488189727484768796509903946608530841611892186895295776832416251471863574140227977573104895898783928842923844831149032913798729088601617946094119449010595906710130531906171018354491609619193912488538116080712299672322806217820753127014424577: 1}
.

after:++_primes5p2e6doc@factor_pint__via_GNU_factor_
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='[1<<e for e in range(25)]' +to_stderr +without_ppowmm --timeout=120  >>  /sdcard/0my_files/tmp/0tmp
(2, 1, -99999, {})
(2, 2, -99999, {3: 1})
(2, 4, -99999, {3: 1, 5: 1})
(2, 8, -99999, {3: 1, 5: 1, 17: 1})
(2, 16, -99999, {3: 1, 5: 1, 17: 1, 257: 1})
(2, 32, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 65537: 1})
(2, 64, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 6700417: 1})
(2, 128, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 6700417: 1, 67280421310721: 1})
(2, 256, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 6700417: 1, 67280421310721: 1, 59649589127497217: 1, 5704689200685129054721: 1})
(2, 512, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 6700417: 1, 67280421310721: 1, 1238926361552897: 1, 59649589127497217: 1, 5704689200685129054721: 1, 93461639715357977769163558199606896584051237541638188580280321: 1})
(2, 1024, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 2424833: 1, 6700417: 1, 67280421310721: 1, 1238926361552897: 1, 59649589127497217: 1, 5704689200685129054721: 1, 7455602825647884208337395736200454918783366342657: 1, 93461639715357977769163558199606896584051237541638188580280321: 1, 741640062627530801524787141901937474059940781097519023905821316144415759504705008092818711693940737: 1})
(2, 2048, -99999, {3: 1, 5: 1, 17: 1, 257: 1, 641: 1, 65537: 1, 274177: 1, 2424833: 1, 6700417: 1, 45592577: 1, 6487031809: 1, 67280421310721: 1, 1238926361552897: 1, 59649589127497217: 1, 5704689200685129054721: 1, 4659775785220018543264560743076778192897: 1, 7455602825647884208337395736200454918783366342657: 1, 93461639715357977769163558199606896584051237541638188580280321: 1, 741640062627530801524787141901937474059940781097519023905821316144415759504705008092818711693940737: 1, 130439874405488189727484768796509903946608530841611892186895295776832416251471863574140227977573104895898783928842923844831149032913798729088601617946094119449010595906710130531906171018354491609619193912488538116080712299672322806217820753127014424577: 1})
^C KeyboardInterrupt
]]
[[
#py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =3 ='count(1)' +to_stderr   >  /sdcard/0my_files/tmp/0tmp
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =3 ='count(86)' +to_stderr   >>  /sdcard/0my_files/tmp/0tmp
(3, 1, 2, {2: 1})
(3, 2, 8, {2: 3})
(3, 3, 26, {2: 1, 13: 1})
(3, 4, 80, {2: 4, 5: 1})
(3, 5, 242, {2: 1, 11: 2})
(3, 6, 728, {2: 3, 7: 1, 13: 1})
(3, 7, 2186, {2: 1, 1093: 1})
(3, 8, 6560, {2: 5, 5: 1, 41: 1})
(3, 9, 19682, {2: 1, 13: 1, 757: 1})
(3, 10, 59048, {2: 3, 11: 2, 61: 1})
(3, 11, 177146, {2: 1, 23: 1, 3851: 1})
(3, 12, 531440, {2: 4, 5: 1, 7: 1, 13: 1, 73: 1})
(3, 13, 1594322, {2: 1, 797161: 1})
(3, 14, 4782968, {2: 3, 547: 1, 1093: 1})
(3, 15, 14348906, {2: 1, 11: 2, 13: 1, 4561: 1})
(3, 16, 43046720, {2: 6, 5: 1, 17: 1, 41: 1, 193: 1})
(3, 17, 129140162, {2: 1, 1871: 1, 34511: 1})
(3, 18, 387420488, {2: 3, 7: 1, 13: 1, 19: 1, 37: 1, 757: 1})
(3, 19, 1162261466, {2: 1, 1597: 1, 363889: 1})
(3, 20, 3486784400, {2: 4, 5: 2, 11: 2, 61: 1, 1181: 1})
(3, 21, 10460353202, {2: 1, 13: 1, 1093: 1, 368089: 1})
(3, 22, 31381059608, {2: 3, 23: 1, 67: 1, 661: 1, 3851: 1})
(3, 23, 94143178826, {2: 1, 47: 1, 1001523179: 1})
(3, 24, 282429536480, {2: 5, 5: 1, 7: 1, 13: 1, 41: 1, 73: 1, 6481: 1})
(3, 25, 847288609442, {2: 1, 11: 2, 8951: 1, 391151: 1})
(3, 26, 2541865828328, {2: 3, 398581: 1, 797161: 1})
(3, 27, 7625597484986, {2: 1, 13: 1, 109: 1, 433: 1, 757: 1, 8209: 1})
(3, 28, 22876792454960, {2: 4, 5: 1, 29: 1, 547: 1, 1093: 1, 16493: 1})
(3, 29, 68630377364882, {2: 1, 59: 1, 28537: 1, 20381027: 1})
(3, 30, 205891132094648, {2: 3, 7: 1, 11: 2, 13: 1, 31: 1, 61: 1, 271: 1, 4561: 1})
(3, 31, 617673396283946, {2: 1, 683: 1, 102673: 1, 4404047: 1})
(3, 32, 1853020188851840, {2: 7, 5: 1, 17: 1, 41: 1, 193: 1, 21523361: 1})
(3, 33, 5559060566555522, {2: 1, 13: 1, 23: 1, 3851: 1, 2413941289: 1})
(3, 34, 16677181699666568, {2: 3, 103: 1, 307: 1, 1021: 1, 1871: 1, 34511: 1})
(3, 35, 50031545098999706, {2: 1, 11: 2, 71: 1, 1093: 1, 2664097031: 1})
(3, 36, 150094635296999120, {2: 4, 5: 1, 7: 1, 13: 1, 19: 1, 37: 1, 73: 1, 757: 1, 530713: 1})
(3, 37, 450283905890997362, {2: 1, 13097927: 1, 17189128703: 1})
(3, 38, 1350851717672992088, {2: 3, 1597: 1, 2851: 1, 101917: 1, 363889: 1})
(3, 39, 4052555153018976266, {2: 1, 13: 2, 313: 1, 6553: 1, 7333: 1, 797161: 1})
(3, 40, 12157665459056928800, {2: 5, 5: 2, 11: 2, 41: 1, 61: 1, 1181: 1, 42521761: 1})
(3, 41, 36472996377170786402, {2: 1, 83: 1, 2526913: 1, 86950696619: 1})
(3, 42, 109418989131512359208, {2: 3, 7: 2, 13: 1, 43: 1, 547: 1, 1093: 1, 2269: 1, 368089: 1})
(3, 43, 328256967394537077626, {2: 1, 431: 1, 380808546861411923: 1})
(3, 44, 984770902183611232880, {2: 4, 5: 1, 23: 1, 67: 1, 661: 1, 3851: 1, 5501: 1, 570461: 1})
(3, 45, 2954312706550833698642, {2: 1, 11: 2, 13: 1, 181: 1, 757: 1, 1621: 1, 4561: 1, 927001: 1})
(3, 46, 8862938119652501095928, {2: 3, 47: 1, 1001523179: 1, 23535794707: 1})
(3, 47, 26588814358957503287786, {2: 1, 1223: 1, 21997: 1, 5112661: 1, 96656723: 1})
(3, 48, 79766443076872509863360, {2: 6, 5: 1, 7: 1, 13: 1, 17: 1, 41: 1, 73: 1, 97: 1, 193: 1, 577: 1, 769: 1, 6481: 1})
(3, 49, 239299329230617529590082, {2: 1, 491: 1, 1093: 1, 4019: 1, 8233: 1, 51157: 1, 131713: 1})
(3, 50, 717897987691852588770248, {2: 3, 11: 2, 61: 1, 151: 1, 8951: 1, 391151: 1, 22996651: 1})
(3, 51, 2153693963075557766310746, {2: 1, 13: 1, 1871: 1, 12853: 1, 34511: 1, 99810171997: 1})
(3, 52, 6461081889226673298932240, {2: 4, 5: 1, 53: 1, 398581: 1, 797161: 1, 4795973261: 1})
(3, 53, 19383245667680019896796722, {2: 1, 107: 1, 24169: 1, 3747607031112307667: 1})
(3, 54, 58149737003040059690390168, {2: 3, 7: 1, 13: 1, 19: 1, 37: 1, 109: 1, 433: 1, 757: 1, 8209: 1, 19441: 1, 19927: 1})
(3, 55, 174449211009120179071170506, {2: 1, 11: 3, 23: 1, 1321: 1, 3851: 1, 560088668384411: 1})
(3, 56, 523347633027360537213511520, {2: 5, 5: 1, 29: 1, 41: 1, 547: 1, 1093: 1, 16493: 1, 430697: 1, 647753: 1})
(3, 57, 1570042899082081611640534562, {2: 1, 13: 1, 229: 1, 1597: 1, 248749: 1, 363889: 1, 1824179209: 1})
(3, 58, 4710128697246244834921603688, {2: 3, 59: 1, 523: 1, 6091: 1, 28537: 1, 5385997: 1, 20381027: 1})
(3, 59, 14130386091738734504764811066, {2: 1, 14425532687: 1, 489769993189671059: 1})
(3, 60, 42391158275216203514294433200, {2: 4, 5: 2, 7: 1, 11: 2, 13: 1, 31: 1, 61: 1, 73: 1, 271: 1, 1181: 1, 4561: 1, 47763361: 1})
(3, 61, 127173474825648610542883299602, {2: 1, 603901: 1, 105293313660391861035901: 1})
(3, 62, 381520424476945831628649898808, {2: 3, 683: 1, 6883: 1, 102673: 1, 4404047: 1, 22434744889: 1})
(3, 63, 1144561273430837494885949696426, {2: 1, 13: 1, 757: 1, 1093: 1, 368089: 1, 144542918285300809: 1})
(3, 64, 3433683820292512484657849089280, {2: 8, 5: 1, 17: 1, 41: 1, 193: 1, 21523361: 1, 926510094425921: 1})
(3, 65, 10301051460877537453973547267842, {2: 1, 11: 2, 131: 1, 797161: 1, 3701101: 1, 110133112994711: 1})
(3, 66, 30903154382632612361920641803528, {2: 3, 7: 1, 13: 1, 23: 1, 67: 1, 661: 1, 3851: 1, 25411: 1, 176419: 1, 2413941289: 1})
(3, 67, 92709463147897837085761925410586, {2: 1, 221101: 1, 441019876741: 1, 475384700124973: 1})
(3, 68, 278128389443693511257285776231760, {2: 4, 5: 1, 103: 1, 307: 1, 1021: 1, 1871: 1, 34511: 1, 956353: 1, 1743831169: 1})
(3, 69, 834385168331080533771857328695282, {2: 1, 13: 1, 47: 1, 277: 1, 1001523179: 1, 2461243576713869557: 1})
(3, 70, 2503155504993241601315571986085848, {2: 3, 11: 2, 61: 1, 71: 1, 547: 1, 1093: 1, 2664097031: 1, 374857981681: 1})
(3, 71, 7509466514979724803946715958257546, {2: 1, 3754733257489862401973357979128773: 1})
(3, 72, 22528399544939174411840147874772640, {2: 5, 5: 1, 7: 1, 13: 1, 19: 1, 37: 1, 41: 1, 73: 1, 757: 1, 6481: 1, 530713: 1, 282429005041: 1})
(3, 73, 67585198634817523235520443624317922, {2: 1, 11243: 1, 20149: 1, 15768033143: 1, 9460375336977361: 1})
(3, 74, 202755595904452569706561330872953768, {2: 3, 18427: 1, 107671: 1, 13097927: 1, 56737873: 1, 17189128703: 1})
(3, 75, 608266787713357709119683992618861306, {2: 1, 11: 2, 13: 1, 601: 1, 4561: 1, 8951: 1, 9601: 1, 391151: 1, 2098303812601: 1})
(3, 76, 1824800363140073127359051977856583920, {2: 4, 5: 1, 1597: 1, 2851: 1, 101917: 1, 363889: 1, 5301533: 1, 25480398173: 1})
(3, 77, 5474401089420219382077155933569751762, {2: 1, 23: 1, 1093: 1, 3851: 1, 51457561: 1, 7151459701: 1, 76831835389: 1})
(3, 78, 16423203268260658146231467800709255288, {2: 3, 7: 1, 13: 2, 79: 1, 157: 1, 313: 1, 2887: 1, 6553: 1, 7333: 1, 10141: 1, 398581: 1, 797161: 1})
(3, 79, 49269609804781974438694403402127765866, {2: 1, 432853009: 1, 392038110671: 1, 145171177264407947: 1})
(3, 80, 147808829414345923316083210206383297600, {2: 6, 5: 2, 11: 2, 17: 1, 41: 1, 61: 1, 193: 1, 1181: 1, 14401: 1, 42521761: 1, 128653413121: 1})
(3, 81, 443426488243037769948249630619149892802, {2: 1, 13: 1, 109: 1, 433: 1, 757: 1, 3889: 1, 8209: 1, 1190701: 1, 12557612956332313: 1})
(3, 82, 1330279464729113309844748891857449678408, {2: 3, 83: 1, 33703: 1, 2526913: 1, 86950696619: 1, 270547105429567: 1})
(3, 83, 3990838394187339929534246675572349035226, {2: 1, 167: 1, 12119: 1, 1036745531: 1, 950996059627210897943351: 1})
(3, 84, 11972515182562019788602740026717047105680, {2: 4, 5: 1, 7: 2, 13: 1, 29: 1, 43: 1, 73: 1, 547: 1, 1093: 1, 2269: 1, 2857: 1, 16493: 1, 368089: 1, 109688713: 1})
(3, 85, 35917545547686059365808220080151141317042, {2: 1, 11: 2, 1871: 1, 34511: 1, 2663568851051: 1, 862970652262943171: 1})
]]
[[
#py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =5 ='count(1)' +to_stderr   >  /sdcard/0my_files/tmp/0tmp
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =5 ='count(79)' +to_stderr   >>  /sdcard/0my_files/tmp/0tmp
(5, 1, 4, {2: 2})
(5, 2, 24, {2: 3, 3: 1})
(5, 3, 124, {2: 2, 31: 1})
(5, 4, 624, {2: 4, 3: 1, 13: 1})
(5, 5, 3124, {2: 2, 11: 1, 71: 1})
(5, 6, 15624, {2: 3, 3: 2, 7: 1, 31: 1})
(5, 7, 78124, {2: 2, 19531: 1})
(5, 8, 390624, {2: 5, 3: 1, 13: 1, 313: 1})
(5, 9, 1953124, {2: 2, 19: 1, 31: 1, 829: 1})
(5, 10, 9765624, {2: 3, 3: 1, 11: 1, 71: 1, 521: 1})
(5, 11, 48828124, {2: 2, 12207031: 1})
(5, 12, 244140624, {2: 4, 3: 2, 7: 1, 13: 1, 31: 1, 601: 1})
(5, 13, 1220703124, {2: 2, 305175781: 1})
(5, 14, 6103515624, {2: 3, 3: 1, 29: 1, 449: 1, 19531: 1})
(5, 15, 30517578124, {2: 2, 11: 1, 31: 1, 71: 1, 181: 1, 1741: 1})
(5, 16, 152587890624, {2: 6, 3: 1, 13: 1, 17: 1, 313: 1, 11489: 1})
(5, 17, 762939453124, {2: 2, 409: 1, 466344409: 1})
(5, 18, 3814697265624, {2: 3, 3: 3, 7: 1, 19: 1, 31: 1, 829: 1, 5167: 1})
(5, 19, 19073486328124, {2: 2, 191: 1, 6271: 1, 3981071: 1})
(5, 20, 95367431640624, {2: 4, 3: 1, 11: 1, 13: 1, 41: 1, 71: 1, 521: 1, 9161: 1})
(5, 21, 476837158203124, {2: 2, 31: 1, 379: 1, 19531: 1, 519499: 1})
(5, 22, 2384185791015624, {2: 3, 3: 1, 23: 1, 67: 1, 5281: 1, 12207031: 1})
(5, 23, 11920928955078124, {2: 2, 8971: 1, 332207361361: 1})
(5, 24, 59604644775390624, {2: 5, 3: 2, 7: 1, 13: 1, 31: 1, 313: 1, 601: 1, 390001: 1})
(5, 25, 298023223876953124, {2: 2, 11: 1, 71: 1, 101: 1, 251: 1, 401: 1, 9384251: 1})
(5, 26, 1490116119384765624, {2: 3, 3: 1, 5227: 1, 38923: 1, 305175781: 1})
(5, 27, 7450580596923828124, {2: 2, 19: 1, 31: 1, 109: 1, 271: 1, 829: 1, 4159: 1, 31051: 1})
(5, 28, 37252902984619140624, {2: 4, 3: 1, 13: 1, 29: 1, 449: 1, 19531: 1, 234750601: 1})
(5, 29, 186264514923095703124, {2: 2, 59: 1, 35671: 1, 22125996444329: 1})
(5, 30, 931322574615478515624, {2: 3, 3: 2, 7: 1, 11: 1, 31: 1, 61: 1, 71: 1, 181: 1, 521: 1, 1741: 1, 7621: 1})
(5, 31, 4656612873077392578124, {2: 2, 1861: 1, 625552508473588471: 1})
(5, 32, 23283064365386962890624, {2: 7, 3: 1, 13: 1, 17: 1, 313: 1, 2593: 1, 11489: 1, 29423041: 1})
(5, 33, 116415321826934814453124, {2: 2, 31: 1, 199: 1, 12207031: 1, 386478495679: 1})
(5, 34, 582076609134674072265624, {2: 3, 3: 1, 409: 1, 3061: 1, 41540861: 1, 466344409: 1})
(5, 35, 2910383045673370361328124, {2: 2, 11: 1, 71: 1, 211: 1, 631: 1, 4201: 1, 19531: 1, 85280581: 1})
(5, 36, 14551915228366851806640624, {2: 4, 3: 3, 7: 1, 13: 1, 19: 1, 31: 1, 37: 1, 601: 1, 829: 1, 5167: 1, 6597973: 1})
(5, 37, 72759576141834259033203124, {2: 2, 149: 1, 13971969971: 1, 8737481256739: 1})
(5, 38, 363797880709171295166015624, {2: 3, 3: 1, 191: 1, 761: 1, 6271: 1, 19609: 1, 213029: 1, 3981071: 1})
(5, 39, 1818989403545856475830078124, {2: 2, 31: 1, 79: 1, 305175781: 1, 608459012088799: 1})
(5, 40, 9094947017729282379150390624, {2: 5, 3: 1, 11: 1, 13: 1, 41: 1, 71: 1, 241: 1, 313: 1, 521: 1, 9161: 1, 632133361: 1})
(5, 41, 45474735088646411895751953124, {2: 2, 2238236249: 1, 5079304643216687969: 1})
(5, 42, 227373675443232059478759765624, {2: 3, 3: 2, 7: 2, 29: 1, 31: 1, 43: 1, 127: 1, 379: 1, 449: 1, 7603: 1, 19531: 1, 519499: 1})
(5, 43, 1136868377216160297393798828124, {2: 2, 1644512641: 1, 172827552198815888791: 1})
(5, 44, 5684341886080801486968994140624, {2: 4, 3: 1, 13: 1, 23: 1, 67: 1, 89: 1, 5281: 1, 12207031: 1, 1030330938209: 1})
(5, 45, 28421709430404007434844970703124, {2: 2, 11: 1, 19: 1, 31: 1, 71: 1, 181: 1, 829: 1, 1171: 1, 1741: 1, 169831: 1, 297315901: 1})
(5, 46, 142108547152020037174224853515624, {2: 3, 3: 1, 47: 1, 8971: 1, 332207361361: 1, 42272797713043: 1})
(5, 47, 710542735760100185871124267578124, {2: 2, 177635683940025046467781066894531: 1})
(5, 48, 3552713678800500929355621337890624, {2: 6, 3: 2, 7: 1, 13: 1, 17: 1, 31: 1, 313: 1, 601: 1, 11489: 1, 390001: 1, 152587500001: 1})
(5, 49, 17763568394002504646778106689453124, {2: 2, 19531: 1, 227376585863531112677002031251: 1})
(5, 50, 88817841970012523233890533447265624, {2: 3, 3: 1, 11: 1, 71: 1, 101: 1, 251: 1, 401: 1, 521: 1, 1901: 1, 9384251: 1, 50150933101: 1})
(5, 51, 444089209850062616169452667236328124, {2: 2, 31: 1, 409: 1, 90271: 1, 317731: 1, 466344409: 1, 654652168021: 1})
(5, 52, 2220446049250313080847263336181640624, {2: 4, 3: 1, 13: 2, 53: 1, 5227: 1, 38923: 1, 305175781: 1, 83181652304609: 1})
(5, 53, 11102230246251565404236316680908203124, {2: 2, 5960555749: 1, 17154094481: 1, 27145365052629449: 1})
(5, 54, 55511151231257827021181583404541015624, {2: 3, 3: 4, 7: 1, 19: 1, 31: 1, 109: 1, 163: 1, 271: 1, 487: 1, 829: 1, 4159: 1, 5167: 1, 31051: 1, 16018507: 1})
(5, 55, 277555756156289135105907917022705078124, {2: 2, 11: 2, 71: 1, 103511: 1, 511831: 1, 12207031: 1, 65628751: 1, 190295821: 1})
(5, 56, 1387778780781445675529539585113525390624, {2: 5, 3: 1, 13: 1, 29: 1, 313: 1, 449: 1, 19531: 1, 234750601: 1, 59509429687890001: 1})
(5, 57, 6938893903907228377647697925567626953124, {2: 2, 31: 1, 191: 1, 6271: 1, 3981071: 1, 11735415506748076408140121: 1})
(5, 58, 34694469519536141888238489627838134765624, {2: 3, 3: 1, 59: 1, 35671: 1, 5096867: 1, 6090817323763: 1, 22125996444329: 1})
(5, 59, 173472347597680709441192448139190673828124, {2: 2, 21180247636732981: 1, 2047572230657338751575051: 1})
(5, 60, 867361737988403547205962240695953369140624, {2: 4, 3: 2, 7: 1, 11: 1, 13: 1, 31: 1, 41: 1, 61: 1, 71: 1, 181: 1, 521: 1, 601: 1, 1741: 1, 2281: 1, 7621: 1, 9161: 1, 69566521: 1})
(5, 61, 4336808689942017736029811203479766845703124, {2: 2, 8419: 1, 918585913061: 1, 140194179307171898833699259: 1})
(5, 62, 21684043449710088680149056017398834228515624, {2: 3, 3: 1, 1303: 1, 1861: 1, 21207101: 1, 28086211607: 1, 625552508473588471: 1})
(5, 63, 108420217248550443400745280086994171142578124, {2: 2, 19: 1, 31: 1, 379: 1, 829: 1, 19531: 1, 280729: 1, 519499: 1, 2161279: 1, 23792163643711: 1})
(5, 64, 542101086242752217003726400434970855712890624, {2: 8, 3: 1, 13: 1, 17: 1, 313: 1, 641: 1, 2593: 1, 11489: 1, 29423041: 1, 75068993: 1, 241931001601: 1})
(5, 65, 2710505431213761085018632002174854278564453124, {2: 2, 11: 1, 71: 1, 131: 1, 305175781: 1, 1034150930241911: 1, 20986207825565581: 1})
(5, 66, 13552527156068805425093160010874271392822265624, {2: 3, 3: 2, 7: 1, 23: 1, 31: 1, 67: 1, 199: 1, 5281: 1, 595123: 1, 12207031: 1, 190771747: 1, 386478495679: 1})
(5, 67, 67762635780344027125465800054371356964111328124, {2: 2, 269: 1, 1609: 1, 26399: 1, 2454335007529: 1, 604088623657497125653141: 1})
(5, 68, 338813178901720135627329000271856784820556640624, {2: 4, 3: 1, 13: 1, 409: 1, 1973: 1, 3061: 1, 20129: 1, 45289: 1, 41540861: 1, 466344409: 1, 12447002677: 1})
(5, 69, 1694065894508600678136645001359283924102783203124, {2: 2, 31: 1, 139: 1, 6211: 1, 8971: 1, 332207361361: 1, 598761682261: 1, 8868050880709: 1})
(5, 70, 8470329472543003390683225006796419620513916015624, {2: 3, 3: 1, 11: 1, 29: 1, 71: 1, 211: 1, 449: 1, 521: 1, 631: 1, 4201: 1, 19531: 1, 15216601: 1, 85280581: 1, 4698932281: 1})
(5, 71, 42351647362715016953416125033982098102569580078124, {2: 2, 569: 1, 18607929421228039083223253529869111644362732899: 1})
(5, 72, 211758236813575084767080625169910490512847900390624, {2: 5, 3: 3, 7: 1, 13: 1, 19: 1, 31: 1, 37: 1, 73: 1, 313: 1, 601: 1, 829: 1, 5167: 1, 390001: 1, 543097: 1, 6597973: 1, 1503418321: 1})
(5, 73, 1058791184067875423835403125849552452564239501953124, {2: 2, 4853479: 1, 5729041: 1, 9519524151770349914726200576714027279: 1})
(5, 74, 5293955920339377119177015629247762262821197509765624, {2: 3, 3: 1, 149: 1, 9103: 1, 29010221: 1, 13971969971: 1, 8737481256739: 1, 45920153384867: 1})
(5, 75, 26469779601696885595885078146238811314105987548828124, {2: 2, 11: 1, 31: 1, 71: 1, 101: 1, 151: 1, 181: 1, 251: 1, 401: 1, 1741: 1, 3301: 1, 1989151: 1, 9384251: 1, 49892851: 1, 183794551: 1})
(5, 76, 132348898008484427979425390731194056570529937744140624, {2: 4, 3: 1, 13: 1, 191: 1, 761: 1, 6271: 1, 19609: 1, 213029: 1, 3981071: 1, 4885168129: 1, 2864226125209369: 1})
(5, 77, 661744490042422139897126953655970282852649688720703124, {2: 2, 19531: 1, 12207031: 1, 527093491: 1, 8090594434231: 1, 162715052426691233701: 1})
(5, 78, 3308722450212110699485634768279851414263248443603515624, {2: 3, 3: 2, 7: 1, 31: 1, 79: 1, 3121: 1, 5227: 1, 38923: 1, 305175781: 1, 22735632934561: 1, 608459012088799: 1})
]]
[[
#py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =7 ='count(1)' +to_stderr   >  /sdcard/0my_files/tmp/0tmp
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =7 ='count(74)' +to_stderr   >>  /sdcard/0my_files/tmp/0tmp
(7, 1, 6, {2: 1, 3: 1})
(7, 2, 48, {2: 4, 3: 1})
(7, 3, 342, {2: 1, 3: 2, 19: 1})
(7, 4, 2400, {2: 5, 3: 1, 5: 2})
(7, 5, 16806, {2: 1, 3: 1, 2801: 1})
(7, 6, 117648, {2: 4, 3: 2, 19: 1, 43: 1})
(7, 7, 823542, {2: 1, 3: 1, 29: 1, 4733: 1})
(7, 8, 5764800, {2: 6, 3: 1, 5: 2, 1201: 1})
(7, 9, 40353606, {2: 1, 3: 3, 19: 1, 37: 1, 1063: 1})
(7, 10, 282475248, {2: 4, 3: 1, 11: 1, 191: 1, 2801: 1})
(7, 11, 1977326742, {2: 1, 3: 1, 1123: 1, 293459: 1})
(7, 12, 13841287200, {2: 5, 3: 2, 5: 2, 13: 1, 19: 1, 43: 1, 181: 1})
(7, 13, 96889010406, {2: 1, 3: 1, 16148168401: 1})
(7, 14, 678223072848, {2: 4, 3: 1, 29: 1, 113: 1, 911: 1, 4733: 1})
(7, 15, 4747561509942, {2: 1, 3: 2, 19: 1, 31: 1, 2801: 1, 159871: 1})
(7, 16, 33232930569600, {2: 7, 3: 1, 5: 2, 17: 1, 1201: 1, 169553: 1})
(7, 17, 232630513987206, {2: 1, 3: 1, 14009: 1, 2767631689: 1})
(7, 18, 1628413597910448, {2: 4, 3: 3, 19: 1, 37: 1, 43: 1, 1063: 1, 117307: 1})
(7, 19, 11398895185373142, {2: 1, 3: 1, 419: 1, 4534166740403: 1})
(7, 20, 79792266297612000, {2: 5, 3: 1, 5: 3, 11: 1, 191: 1, 281: 1, 2801: 1, 4021: 1})
(7, 21, 558545864083284006, {2: 1, 3: 2, 19: 1, 29: 1, 4733: 1, 11898664849: 1})
(7, 22, 3909821048582988048, {2: 4, 3: 1, 23: 1, 1123: 1, 293459: 1, 10746341: 1})
(7, 23, 27368747340080916342, {2: 1, 3: 1, 47: 1, 3083: 1, 31479823396757: 1})
(7, 24, 191581231380566414400, {2: 6, 3: 2, 5: 2, 13: 1, 19: 1, 43: 1, 73: 1, 181: 1, 193: 1, 409: 1, 1201: 1})
(7, 25, 1341068619663964900806, {2: 1, 3: 1, 2551: 1, 2801: 1, 31280679788951: 1})
(7, 26, 9387480337647754305648, {2: 4, 3: 1, 53: 1, 228511817: 1, 16148168401: 1})
(7, 27, 65712362363534280139542, {2: 1, 3: 4, 19: 1, 37: 1, 109: 1, 811: 1, 1063: 1, 2377: 1, 2583253: 1})
(7, 28, 459986536544739960976800, {2: 5, 3: 1, 5: 2, 29: 1, 113: 1, 911: 1, 4733: 1, 13564461457: 1})
(7, 29, 3219905755813179726837606, {2: 1, 3: 1, 59: 1, 127540261: 1, 71316922984999: 1})
(7, 30, 22539340290692258087863248, {2: 4, 3: 2, 11: 1, 19: 1, 31: 1, 43: 1, 191: 1, 2801: 1, 159871: 1, 6568801: 1})
(7, 31, 157775382034845806615042742, {2: 1, 3: 1, 311: 1, 21143: 1, 3999088279399464409: 1})
(7, 32, 1104427674243920646305299200, {2: 8, 3: 1, 5: 2, 17: 1, 353: 1, 1201: 1, 169553: 1, 47072139617: 1})
(7, 33, 7730993719707444524137094406, {2: 1, 3: 2, 19: 1, 1123: 1, 3631: 1, 293459: 1, 1532917: 1, 12323587: 1})
(7, 34, 54116956037952111668959660848, {2: 4, 3: 1, 14009: 1, 2767631689: 1, 29078814248401: 1})
(7, 35, 378818692265664781682717625942, {2: 1, 3: 1, 29: 1, 2801: 1, 4733: 1, 2127431041: 1, 77192844961: 1})
(7, 36, 2651730845859653471779023381600, {2: 5, 3: 3, 5: 2, 13: 1, 19: 1, 37: 1, 43: 1, 181: 1, 1063: 1, 117307: 1, 13841169553: 1})
(7, 37, 18562115921017574302453163671206, {2: 1, 3: 1, 223: 1, 2887: 1, 4805345109492315767981401: 1})
(7, 38, 129934811447123020117172145698448, {2: 4, 3: 1, 419: 1, 351121: 1, 4058036683: 1, 4534166740403: 1})
(7, 39, 909543680129861140820205019889142, {2: 1, 3: 2, 19: 1, 486643: 1, 7524739: 1, 44975113: 1, 16148168401: 1})
(7, 40, 6366805760909027985741435139224000, {2: 6, 3: 1, 5: 3, 11: 1, 41: 1, 191: 1, 281: 1, 1201: 1, 2801: 1, 4021: 1, 810221830361: 1})
(7, 41, 44567640326363195900190045974568006, {2: 1, 3: 1, 83: 1, 20515909: 1, 4362139336229068656094783: 1})
(7, 42, 311973482284542371301330321821976048, {2: 4, 3: 2, 19: 1, 29: 1, 43: 1, 113: 1, 911: 1, 4733: 1, 51031: 1, 309079: 1, 11898664849: 1})
(7, 43, 2183814375991796599109312252753832342, {2: 1, 3: 1, 166003607842448777: 1, 2192537062271178641: 1})
(7, 44, 15286700631942576193765185769276826400, {2: 5, 3: 1, 5: 2, 23: 1, 661: 1, 1123: 1, 1409: 1, 293459: 1, 10746341: 1, 83960385389: 1})
(7, 45, 107006904423598033356356300384937784806, {2: 1, 3: 3, 19: 1, 31: 1, 37: 1, 1063: 1, 2801: 1, 159871: 1, 1527007411: 1, 125096112091: 1})
(7, 46, 749048330965186233494494102694564493648, {2: 4, 3: 1, 47: 1, 3083: 1, 31479823396757: 1, 3421093417510114543: 1})
(7, 47, 5243338316756303634461458718861951455542, {2: 1, 3: 1, 13722816749522711: 1, 63681511996418550459487: 1})
(7, 48, 36703368217294125441230211032033660188800, {2: 7, 3: 2, 5: 2, 13: 1, 17: 1, 19: 1, 43: 1, 73: 1, 181: 1, 193: 1, 409: 1, 1201: 1, 169553: 1, 33232924804801: 1})
(7, 49, 256923577521058878088611477224235621321606, {2: 1, 3: 1, 29: 1, 3529: 1, 4733: 1, 1074473: 1, 13473433: 1, 6106505825833677713: 1})
(7, 50, 1798465042647412146620280340569649349251248, {2: 4, 3: 1, 11: 1, 191: 1, 2551: 1, 2801: 1, 31280679788951: 1, 79787519018560501: 1})
(7, 51, 12589255298531885026341962383987545444758742, {2: 1, 3: 2, 19: 1, 103: 1, 14009: 1, 365773: 1, 2316281689: 1, 2767631689: 1, 10879733611: 1})
(7, 52, 88124787089723195184393736687912818113311200, {2: 5, 3: 1, 5: 2, 53: 1, 157: 1, 228511817: 1, 16148168401: 1, 1195857367853217109: 1})
(7, 53, 616873509628062366290756156815389726793178406, {2: 1, 3: 1, 8269: 1, 319591: 1, 38904276017035188056372051839841219: 1})
(7, 54, 4318114567396436564035293097707728087552248848, {2: 4, 3: 4, 19: 1, 37: 1, 43: 1, 109: 1, 811: 1, 1063: 1, 2377: 1, 117307: 1, 2583253: 1, 1628413557556843: 1})
(7, 55, 30226801971775055948247051683954096612865741942, {2: 1, 3: 1, 1123: 1, 2801: 1, 293459: 1, 5457586804596062091175455674392801: 1})
(7, 56, 211587613802425391637729361787678676290060193600, {2: 6, 3: 1, 5: 2, 29: 1, 113: 1, 337: 1, 911: 1, 1201: 1, 2129: 1, 4733: 1, 517553: 1, 515717329: 1, 13564461457: 1})
(7, 57, 1481113296616977741464105532513750734030421355206, {2: 1, 3: 2, 19: 2, 419: 1, 19609: 1, 879399649: 1, 4534166740403: 1, 6957533874046531: 1})
(7, 58, 10367793076318844190248738727596255138212949486448, {2: 4, 3: 1, 59: 1, 127540261: 1, 71316922984999: 1, 402488219476647465854701: 1})
(7, 59, 72574551534231909331741171093173785967490646405142, {2: 1, 3: 1, 459257: 1, 134927809: 1, 550413361: 1, 354639323684545612988577649: 1})
(7, 60, 508021860739623365322188197652216501772434524836000, {2: 5, 3: 2, 5: 3, 11: 1, 13: 1, 19: 1, 31: 1, 43: 1, 61: 1, 181: 1, 191: 1, 281: 1, 2801: 1, 4021: 1, 159871: 1, 6568801: 1, 555915824341: 1})
(7, 61, 3556153025177363557255317383565515512407041673852006, {2: 1, 3: 1, 367: 1, 4759: 1, 177237331: 1, 1914662449813727660680530326064591907: 1})
(7, 62, 24893071176241544900787221684958608586849291716964048, {2: 4, 3: 1, 311: 1, 373: 1, 21143: 1, 9754399: 1, 5420506947192709: 1, 3999088279399464409: 1})
(7, 63, 174251498233690814305510551794710260107945042018748342, {2: 1, 3: 3, 19: 1, 29: 1, 37: 1, 1063: 1, 4733: 1, 11898664849: 1, 2643999917660728787808396988849: 1})
(7, 64, 1219760487635835700138573862562971820755615294131238400, {2: 9, 3: 1, 5: 2, 17: 1, 353: 1, 1201: 1, 169553: 1, 7699649: 1, 134818753: 1, 47072139617: 1, 531968664833: 1})
(7, 65, 8538323413450849900970017037940802745289307058918668806, {2: 1, 3: 1, 131: 1, 2801: 1, 157951: 1, 787021: 1, 16148168401: 1, 4446437759531: 1, 434502978835771: 1})
(7, 66, 59768263894155949306790119265585619217025149412430681648, {2: 4, 3: 2, 19: 1, 23: 1, 43: 1, 67: 1, 1123: 1, 3631: 1, 293459: 1, 1532917: 1, 10746341: 1, 12323587: 1, 1357105535093947: 1})
(7, 67, 418377847259091645147530834859099334519176045887014771542, {2: 1, 3: 1, 228337: 1, 147300841: 1, 206244761: 1, 10052011757370829033540932021825161: 1})
(7, 68, 2928644930813641516032715844013695341634232321209103400800, {2: 5, 3: 1, 5: 2, 137: 1, 14009: 1, 59361349: 1, 2767631689: 1, 29078814248401: 1, 133088039373662309: 1})
(7, 69, 20500514515695490612229010908095867391439626248463723805606, {2: 1, 3: 2, 19: 1, 47: 1, 139: 1, 3083: 1, 402011881627: 1, 31479823396757: 1, 235169662395069356312233: 1})
(7, 70, 143503601609868434285603076356671071740077383739246066639248, {2: 4, 3: 1, 11: 1, 29: 1, 71: 1, 113: 1, 191: 1, 421: 1, 911: 1, 2801: 1, 4733: 1, 12128131: 1, 603926681: 1, 2127431041: 1, 77192844961: 1})
(7, 71, 1004525211269079039999221534496697502180541686174722466474742, {2: 1, 3: 1, 990643452963163: 1, 169002145064468556765676975247413756542145739: 1})
(7, 72, 7031676478883553279994550741476882515263791803223057265323200, {2: 6, 3: 3, 5: 2, 13: 1, 19: 1, 37: 1, 43: 1, 73: 1, 181: 1, 193: 1, 409: 1, 1063: 1, 1201: 1, 42409: 1, 117307: 1, 137089: 1, 13841169553: 1, 32952799801: 1})
(7, 73, 49221735352184872959961855190338177606846542622561400857262406, {2: 1, 3: 1, 439: 1, 3675989: 1, 359390389: 1, 1958423494433591: 1, 7222605228105536202757606969: 1})
]]
[[
#py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =11 ='count(1)' +to_stderr   >  /sdcard/0my_files/tmp/0tmp
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =11 ='count(47)' +to_stderr   >>  /sdcard/0my_files/tmp/0tmp
(11, 1, 10, {2: 1, 5: 1})
(11, 2, 120, {2: 3, 3: 1, 5: 1})
(11, 3, 1330, {2: 1, 5: 1, 7: 1, 19: 1})
(11, 4, 14640, {2: 4, 3: 1, 5: 1, 61: 1})
(11, 5, 161050, {2: 1, 5: 2, 3221: 1})
(11, 6, 1771560, {2: 3, 3: 2, 5: 1, 7: 1, 19: 1, 37: 1})
(11, 7, 19487170, {2: 1, 5: 1, 43: 1, 45319: 1})
(11, 8, 214358880, {2: 5, 3: 1, 5: 1, 61: 1, 7321: 1})
(11, 9, 2357947690, {2: 1, 5: 1, 7: 1, 19: 1, 1772893: 1})
(11, 10, 25937424600, {2: 3, 3: 1, 5: 2, 3221: 1, 13421: 1})
(11, 11, 285311670610, {2: 1, 5: 1, 15797: 1, 1806113: 1})
(11, 12, 3138428376720, {2: 4, 3: 2, 5: 1, 7: 1, 13: 1, 19: 1, 37: 1, 61: 1, 1117: 1})
(11, 13, 34522712143930, {2: 1, 5: 1, 1093: 1, 3158528101: 1})
(11, 14, 379749833583240, {2: 3, 3: 1, 5: 1, 43: 1, 45319: 1, 1623931: 1})
(11, 15, 4177248169415650, {2: 1, 5: 2, 7: 1, 19: 1, 3221: 1, 195019441: 1})
(11, 16, 45949729863572160, {2: 6, 3: 1, 5: 1, 17: 1, 61: 1, 7321: 1, 6304673: 1})
(11, 17, 505447028499293770, {2: 1, 5: 1, 50544702849929377: 1})
(11, 18, 5559917313492231480, {2: 3, 3: 3, 5: 1, 7: 1, 19: 1, 37: 1, 590077: 1, 1772893: 1})
(11, 19, 61159090448414546290, {2: 1, 5: 1, 6115909044841454629: 1})
(11, 20, 672749994932560009200, {2: 4, 3: 1, 5: 2, 61: 1, 3221: 1, 13421: 1, 212601841: 1})
(11, 21, 7400249944258160101210, {2: 1, 5: 1, 7: 2, 19: 1, 43: 1, 1723: 1, 8527: 1, 27763: 1, 45319: 1})
(11, 22, 81402749386839761113320, {2: 3, 3: 1, 5: 1, 23: 1, 89: 1, 199: 1, 15797: 1, 58367: 1, 1806113: 1})
(11, 23, 895430243255237372246530, {2: 1, 5: 1, 829: 1, 28878847: 1, 3740221981231: 1})
(11, 24, 9849732675807611094711840, {2: 5, 3: 2, 5: 1, 7: 1, 13: 1, 19: 1, 37: 1, 61: 1, 1117: 1, 7321: 1, 10657: 1, 20113: 1})
(11, 25, 108347059433883722041830250, {2: 1, 5: 3, 3001: 1, 3221: 1, 24151: 1, 1856458657451: 1})
(11, 26, 1191817653772720942460132760, {2: 3, 3: 1, 5: 1, 53: 1, 911: 1, 1093: 1, 59583967: 1, 3158528101: 1})
(11, 27, 13109994191499930367061460370, {2: 1, 5: 1, 7: 1, 19: 1, 1772893: 1, 5559917315850179173: 1})
(11, 28, 144209936106499234037676064080, {2: 4, 3: 1, 5: 1, 29: 1, 43: 1, 61: 1, 1933: 1, 45319: 1, 1623931: 1, 55527473: 1})
(11, 29, 1586309297171491574414436704890, {2: 1, 5: 1, 523: 1, 303309617049998388989376043: 1})
(11, 30, 17449402268886407318558803753800, {2: 3, 3: 2, 5: 2, 7: 1, 19: 1, 31: 1, 37: 1, 3221: 1, 13421: 1, 7537711: 1, 195019441: 1})
(11, 31, 191943424957750480504146841291810, {2: 1, 5: 1, 50159: 1, 2428541: 1, 157571957584602258799: 1})
(11, 32, 2111377674535255285545615254209920, {2: 7, 3: 1, 5: 1, 17: 1, 61: 1, 7321: 1, 51329: 1, 6304673: 1, 447600088289: 1})
(11, 33, 23225154419887808141001767796309130, {2: 1, 5: 1, 7: 1, 19: 1, 661: 1, 1453: 1, 15797: 1, 1806113: 1, 637265428480297: 1})
(11, 34, 255476698618765889551019445759400440, {2: 3, 3: 1, 5: 1, 71707: 1, 264793: 1, 2218331: 1, 50544702849929377: 1})
(11, 35, 2810243684806424785061213903353404850, {2: 1, 5: 2, 43: 1, 211: 1, 3221: 1, 45319: 1, 42437717969530394595211: 1})
(11, 36, 30912680532870672635673352936887453360, {2: 4, 3: 3, 5: 1, 7: 1, 13: 1, 19: 1, 37: 1, 61: 1, 1117: 1, 590077: 1, 1772893: 1, 3138426605161: 1})
(11, 37, 340039485861577398992406882305761986970, {2: 1, 5: 1, 2591: 1, 36855109: 1, 136151713: 1, 2615418118891695851: 1})
(11, 38, 3740434344477351388916475705363381856680, {2: 3, 3: 1, 5: 1, 191: 1, 229: 1, 83791: 1, 1390636259: 1, 6115909044841454629: 1})
(11, 39, 41144777789250865278081232758997200423490, {2: 1, 5: 1, 7: 1, 19: 1, 79: 1, 157: 1, 547: 1, 1093: 1, 84631: 1, 480091: 1, 32508061: 1, 3158528101: 1})
(11, 40, 452592555681759518058893560348969204658400, {2: 5, 3: 1, 5: 2, 41: 1, 61: 1, 3221: 1, 7321: 1, 13421: 1, 212601841: 1, 1120648576818041: 1})
(11, 41, 4978518112499354698647829163838661251242410, {2: 1, 5: 1, 83: 1, 1231: 1, 27061: 1, 509221: 1, 14092193: 1, 29866451: 1, 840139875599: 1})
(11, 42, 54763699237492901685126120802225273763666520, {2: 3, 3: 2, 5: 1, 7: 2, 19: 1, 37: 1, 43: 1, 1723: 1, 8527: 1, 27763: 1, 45319: 1, 1623931: 1, 3421169496361: 1})
(11, 43, 602400691612421918536387328824478011400331730, {2: 1, 5: 1, 1416258521793067: 1, 42534656091583268045915654719: 1})
(11, 44, 6626407607736641103900260617069258125403649040, {2: 4, 3: 1, 5: 1, 23: 1, 61: 1, 89: 1, 199: 1, 15797: 1, 58367: 1, 251857: 1, 1806113: 1, 2649263870814793: 1})
(11, 45, 72890483685103052142902866787761839379440139450, {2: 1, 5: 2, 7: 1, 19: 1, 3221: 1, 1772893: 1, 195019441: 1, 9842332430037465033595921: 1})
(11, 46, 801795320536133573571931534665380233173841533960, {2: 3, 3: 1, 5: 1, 47: 1, 829: 1, 1013: 1, 241363: 1, 28878847: 1, 3740221981231: 1, 6493405343627: 1})
]]


++is_known_Mersenne_prime_
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='[89, 607]'
    cached by _primes5p2e6doc
py_adhoc_call  { +flush4print } script.辅助冫有限域本原根判定   ,stable_repr.factor_ppowmms__via_GNU_factor_ =2 ='[9941, 859433]'

]]]'''#'''
__all__ = r'''
factor_ppowmms__via_GNU_factor_
    factor_pint__via_GNU_factor_
        parse_output_line4GNU_factor_
            regex4output_line4GNU_factor
    factor_pints__via_GNU_factor_
        parse_output_text4GNU_factor_
            regex4output_text4GNU_factor
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from script.辅助冫有限域本原根判定牜数据收集 import _primes5p2e6doc

#from itertools import islice
from seed.tiny_.check import check_type_is, check_int_ge
from seed.exec.text_of_stdout_of_call import text_of_stdout_of_call
from seed.helper.stable_repr import stable_repr #stable_repr_print
from sys import stderr
from subprocess import TimeoutExpired#timeout
from seed.tiny import print_err
from seed.math.semi_factor_pint_via_trial_division import semi_factor_pint_via_trial_division
from seed.math.II import II, II_mod, II__p2e_, II__ft2e_, II__ft_e_pairs_, factorial_mod_
#from nn_ns.math_nn.numbers.Mersenne_exponents import known_Mersenne_exponent_set# is_known_Mersenne_exponent, is_Mersenne_exponent__Lucas_Lehmer_test
from nn_ns.math_nn.numbers.Mersenne_exponents import is_known_Mersenne_prime_
import re
___end_mark_of_excluded_global_names__0___ = ...

regex4output_line4GNU_factor = re.compile(r'(?:\d+:(?: +\d+(?:[\^]\d+)?)*)')
regex4output_text4GNU_factor = re.compile(fr'(?:{regex4output_line4GNU_factor.pattern}(?: *\n{regex4output_line4GNU_factor.pattern})*)?')

def parse_output_text4GNU_factor_(text, /):
    'str -> {uint:{prime:exp}}'
    text = text.strip()
    if not regex4output_text4GNU_factor.fullmatch(text):raise ValueError(text)
    lines = text.split('\n')
    u2p2e = dict(map(parse_output_line4GNU_factor_, lines))
    return u2p2e
def parse_output_line4GNU_factor_(line, /):
    'str -> (uint, {prime:exp})'
    line = line.strip()
    if not regex4output_line4GNU_factor.fullmatch(line):raise ValueError(line)
    [s4u_x, *ls4s4pe] = line.split()
    assert s4u_x[-1:] == ':'
    u = int(s4u_x[:-1])
    if not u > 0:raise ValueError(line)
    p2e = {}
    for s4pe in ls4s4pe:
        s4p, smay_sep, smay4e = s4pe.partition('^')
        if smay_sep:
            assert smay4e
            s4e = smay4e
            e = int(s4e)
        else:
            assert not smay4e
            e = 1
        e
        p = int(s4p)
        p2e[p] = e + p2e.get(p, 0)
    p2e4u = p2e
    return (u, p2e4u)
def factor_pints__via_GNU_factor_(us, /):
    'Iter uint -> Iter (uint, {prime:exp})' \
        ' # [using factor@<https://www.gnu.org/software/coreutils/factor>]'
    for u in us:
        p2e4u = factor_pint__via_GNU_factor_(u)
        yield(u, p2e4u)
#def is_known_Mersenne_prime_(u, /):
#    return u > 0 and (u&(u+1)) == 0 and u.bit_length() in known_Mersenne_exponent_set
def factor_pint__via_GNU_factor_(u, /, *, timeout=None):
    'uint -> {prime:exp}' \
        ' # [using factor@<https://www.gnu.org/software/coreutils/factor>]'
    #######
    if is_known_Mersenne_prime_(u):
        p2e4u = {u:1}
        #assert II__ft2e_(p2e4u) == u, (u)
        ex = ()
    else:
        (p2e_, unfactored_part) = semi_factor_pint_via_trial_division(_primes5p2e6doc, u)
        _p2e = (_factor_pint__via_GNU_factor_(unfactored_part, timeout=timeout)
                if not is_known_Mersenne_prime_(unfactored_part) else
                #print('known_Mersenne_number:', unfactored_part) or
                {unfactored_part:1}
                ) if not unfactored_part == 1 else {}
        p2e4u = {**p2e_, **_p2e}
        assert len(p2e4u) == len(p2e_) + len(_p2e), (u, p2e_, _p2e, unfactored_part)
        #assert II__ft2e_(p2e4u) == u, (u, p2e_, _p2e, unfactored_part)
        ex = (p2e_, _p2e, unfactored_part)
    p2e4u
    assert II__ft2e_(p2e4u) == u, (u, ex)
    return p2e4u
def _factor_pint__via_GNU_factor_(u, /, *, timeout=None):
    check_int_ge(1, u)
    s4u = str(u)

    #cmd = 'factor -h {s4u}'; import os; os.system(cmd)
    cmd = ['factor', '-h', s4u]
    s4out = text_of_stdout_of_call(cmd, timeout=timeout)
    (_u, p2e4u) = parse_output_line4GNU_factor_(s4out)
    assert _u == u, (u, _u, cmd)
    return p2e4u
def is_prime_(u, /):
    return factor_pint__via_GNU_factor_(u) == {u:1}
def _check_prime_(u, /):
    if not is_prime_(u):raise ValueError(u)
    return True
if 0b0000:
    assert all(map(_check_prime_, _primes5p2e6doc))
        #too slow...
    raise 000

#def factor_ppowmms__via_GNU_factor_(p, spec4es, /, *, to_stderr=False):
def _factor_ppowmm__via_GNU_factor_(p, e, /, *, timeout, without_ppowmm):
    '[(p, e) is checked]'
    ppowmm = (p**e-1)
        # without_ppowmm eg: [e==2**23]=>[ppowmm be 1MB]
    p2e4ppowmm = factor_pint__via_GNU_factor_(ppowmm, timeout=timeout)
    tpl = (p, e, -99999 if without_ppowmm else ppowmm, p2e4ppowmm)
    return tpl
def factor_ppowmms__via_GNU_factor_(p, es, /, *, to_stderr=False, timeout=None, without_ppowmm=False):
    'p/prime -> Iter e/uint -> Iter (p, e, ppowmm:=(p**e-1), p2e4ppowmm)'
    check_type_is(bool, to_stderr)
    check_int_ge(2, p)
    #if not {p:1} == factor_pint__via_GNU_factor_(p):raise ValueError(f'not prime:{p}')
    if not is_prime_(p):raise ValueError(f'not prime:{p}')
    if to_stderr:
        def _mayprint(tpl, /):
            #bug:not newline:stable_repr_print(stderr, tpl)
            print(stable_repr(tpl), file=stderr) # end='\n'
    else:
        def _mayprint(tpl, /):
            pass
    _mayprint
    #es = iter_ints_from_spec_(spec4es)
    es = iter(es)
    for e in es:
        check_int_ge(1, e)
        try:
            tpl = _factor_ppowmm__via_GNU_factor_(p, e, timeout=timeout, without_ppowmm=without_ppowmm)
        except TimeoutExpired:
            print_err(f'timeout@factor({p}**{e}-1)')
            continue
        _mayprint(tpl)

        yield tpl

#view ../../python3_src/seed/recognize/cmdline/adhoc_argparser.py
#view ../../python3_src/seed/helper/safe_eval.py
#@20250118: ++kw:using_extended_globals
#<<==:
#.def iter_ints_from_spec_(spec4ints, /):
#.    x = spec4ints
#.    if type(x) is int:
#.        n = x
#.        ns = [n]
#.    elif type(x) in (list, tuple) and ... in x:
#.        ns = _iter_ints_from_dot_list_(dot_list:=x)
#.    else:
#.        ns = x
#.    ns
#.    return iter(ns)
#.def _iter_ints_from_dot_list_(ls, /):
#.    assert type(ls) in (list, tuple)
#.    prev = 0
#.    for x in ls:
#.        if not x is ...:
#.            check_type_is(int, x)
#.    for j, x in enumerate(ls):
#.        if not x is ...:
#.    it = iter(ls)
#.    ...
#.
__all__
from script.辅助冫有限域本原根判定 import factor_ppowmms__via_GNU_factor_
from script.辅助冫有限域本原根判定 import *
