#__all__:goto
r'''[[[
e script/九宫扩展序列.py
py -m nn_ns.app.debug_cmd   script.九宫扩展序列
py -m nn_ns.app.adhoc_argparser__main__call8module   script.九宫扩展序列   ,iters_ =10
py -m nn_ns.app.doctest_cmd script.九宫扩展序列:iters_ -v
from script.九宫扩展序列 import iters_
===
3,19,...
3,?,19,...
  4x+3
  7,11,15
  3,7,19,...
===
>>> from seed.iters.iterate import iterate
>>> from itertools import islice, count

===
===
第7种扩展方案:
  镜像囗比特串囗平方
>>> 0b10011
19
>>> 0b11001
25
>>> bin(3**2)
'0b1001'
>>> bin(5**2)
'0b11001'
>>> bin(7**2)
'0b110001'
>>> bin(9**2)
'0b1010001'
>>> f = lambda k:(lambda odd:(lambda bs:(k,bs,int(bs[::-1],2)))(f'{odd**2:b}'))(2*k+1)
>>> for k in range(10):f(k)
(0, '1', 1)
(1, '1001', 9)
(2, '11001', 19)
(3, '110001', 35)
(4, '1010001', 69)
(5, '1111001', 79)
(6, '10101001', 149)
(7, '11100001', 135)
(8, '100100001', 265)
(9, '101101001', 301)
>>> f'{0b101**2:b}'
'11001'
>>> f'{0b1011**2:b}'
'1111001'
>>> f'{0b10111**2:b}'
'1000010001'
>>> f'{0b1011111**2:b}'
'10001101000001'
>>> [*islice((r for r in (f(k)[-1] for k in count(0)) if r%4==3), 10)]
[19, 35, 79, 135, 315, 587, 527, 1099, 1255, 1215]

#非递增
>>> [*islice((r for r in (f(k)[-1] for k in count(0)) if r%4==3), 100)]
[19, 35, 79, 135, 315, 587, 527, 1099, 1255, 1215, 2259, 2459, 2327, 2079, 4291, 4275, 4843, 4999, 4407, 4591, 8451, 8675, 9587, 10155, 8891, 8999, 9783, 9263, 8255, 18691, 16803, 16723, 18931, 19755, 18331, 17659, 20007, 19351, 17143, 17199, 19039, 20479, 33347, 33699, 37523, 39731, 36363, 34859, 40427, 38619, 34043, 34631, 38247, 40535, 35447, 35919, 39023, 36959, 32895, 78723, 74275, 66403, 66195, 74707, 78451, 72459, 71371, 81835, 76059, 68827, 68539, 77319, 80071, 70567, 73239, 79063, 75703, 66831, 67279, 74863, 79647, 73183, 70015, 149123, 132291, 132899, 148835, 157203, 144467, 143315, 163251, 152051, 137867, 136395, 155435, 160619, 140571, 147035, 158267, 150651]

===
第6种扩展方案:
  倒数
>>> bin(2**34//19)
'0b110101111001010000110101111001'
>>> bin(2**34//3)
'0b101010101010101010101010101010101'
>>> bin(19)
'0b10011'
>>> bin(3)
'0b11'
>>> bin(2**34//0b101)
'0b11001100110011001100110011001100'
>>> bin(2**34//0b10101)
'0b110000110000110000110000110000'
>>> bin(2**34//0b1101)
'0b1001110110001001110110001001110'
>>> bin(2**34//0b110101)
'0b10011010100100001110011111011'
>>> list(map(lambda k:((lambda bs:int(bs[:2+bs.index('11')],2))(bin(2**(64+4*k)//int('1'*k+'01'*k,2))[2:])), range(1,20)))
[3, 19, 139, 267, 2091, 4139, 32939, 65707, 524971, 1049259, 8391339, 16779947, 134228651, 268446379, 2147527339, 4295010987, 34359913131, 68719651499, 549756512939]

===
第5种扩展方案:
  3=0b11
  19=0b10011
  ===素数间隔
  0b11
  0b10011
  0b1010011
  0b1001010011
  0b1001001010011
  0b100001001001010011
>>> 0b100001001001010011
135763
>>> 0b1001001010011
4691
>>> 0b1001010011
595
>>> 0b1010011
83
>>> 0b10011
19
>>> 0b11
3
>>> from nn_ns.math_nn.numbers.prime_number import PRIMES
>>> list(iterate(lambda r:((lambda k:int('1{}{:b}'.format('0'*(PRIMES[k]-(PRIMES[k-1] if k else 0)),r),2))(PRIMES.pi(bin(r).count('0')-1))), 3, 10))
[3, 19, 83, 595, 4691, 135763, 1184339, 34738771, 303174227, 8893108819]

===
第4种扩展方案:
  19=2**(2*3 .bit_length())+3
  f k=2**(2*f(k-1).bit_length())+f(k-1)
py -m nn_ns.app.adhoc_argparser__main__call8module   seed.iters.iterate @list.iterate '=lambda r:2**(2*r.bit_length())+r' =0 =10

>>> list(iterate(lambda r:2**(2*r.bit_length())+r, 0, 7))
[0, 1, 5, 69, 16453, 1073758277, 4611686019501146181]
>>> list(iterate(lambda r:2**(2*r.bit_length())+r, 2, 7))
[2, 18, 1042, 4195346, 70368748373010, 19807040628566154767134360594, 1569275433846670190958947355821723644654155015883142988818]
>>> list(iterate(lambda r:2**(2*r.bit_length())+r, 3, 7))
[3, 19, 1043, 4195347, 70368748373011, 19807040628566154767134360595, 1569275433846670190958947355821723644654155015883142988819]

===
第3种扩展方案:
  19=4**2+4-1
  f k=k**2+k-1
  f(k-1)=k**2-k-1=f(k)-2*k
  f(k)=(k-1)**2+(k-1)+k**2-(k-1)**2
    =(k-1)**2+(k-1)-1 +2*k
    =f(k-1)+2*k
  f(k+1)=f(k)+2*k+2=k**2+3*k+1
py -m nn_ns.app.adhoc_argparser__main__call8module   builtins @list.map '=lambda k:k**2+k-1' '=range(10)'

>>> list(map(lambda k:k**2+k-1, range(10)))
[-1, 1, 5, 11, 19, 29, 41, 55, 71, 89]
>>> list(map(lambda k:k**2+3*k+1, range(10)))
[1, 5, 11, 19, 29, 41, 55, 71, 89, 109]

===
第2种扩展方案:
  每个象限-方长-形同#递归分形
  f 0 = 0
  f k = 1+2*f(k-1)
  f2 k = (f k)**2
  ==>>
  [f k === 2**k-1] #二进制表达:全1
  [f2 k === 2**(2*k)-2**(1+k)+1] #二进制表达:全1
py -m nn_ns.app.adhoc_argparser__main__call8module   seed.iters.iterate ,iterate '=lambda r:1+2*r' =0 =10
py -m nn_ns.app.adhoc_argparser__main__call8module   seed.iters.iterate @list.iterate '=lambda r:1+2*r' =0 =10
[0, 1, 3, 7, 15, 31, 63, 127, 255, 511]
py -m nn_ns.app.adhoc_argparser__main__call8module   builtins @list.map '=lambda k:2**k-1' '=range(10)'
[0, 1, 3, 7, 15, 31, 63, 127, 255, 511]
py -m nn_ns.app.adhoc_argparser__main__call8module   builtins @list.map '=lambda k:(2**k-1)**2' '=range(10)'
[0, 1, 9, 49, 225, 961, 3969, 16129, 65025, 261121]
py -m nn_ns.app.adhoc_argparser__main__call8module   builtins @list.map '=lambda k:1+2*(2**k-1)**2' '=range(10)'
[1, 3, 19, 99, 451, 1923, 7939, 32259, 130051, 522243]
py -m nn_ns.app.adhoc_argparser__main__call8module   builtins @list.map '=lambda k:(1+2*(2**k-1)**2)**2' '=range(10)'
[1, 9, 361, 9801, 203401, 3697929, 63027721, 1040643081, 16913262601, 272737751049]
py -m nn_ns.app.adhoc_argparser__main__call8module   builtins @list.map '=lambda k:1+2*(1+2*(2**k-1)**2)**2' '=range(10)'
[3, 19, 723, 19603, 406803, 7395859, 126055443, 2081286163, 33826525203, 545475502099]
py -m nn_ns.app.adhoc_argparser__main__call8module   builtins @list.map '=lambda k:(1+2*(1+2*(2**k-1)**2)**2)**2' '=range(10)'
[9, 361, 522729, 384277609, 165488680809, 54698730347881, 15889974709926249, 4331752092295262569, 1144233807309194191209, 297543523390156153405801]
py -m nn_ns.app.adhoc_argparser__main__call8module   builtins @list.map '=lambda k:1+2*(1+2*(1+2*(2**k-1)**2)**2)**2' '=range(10)'
[19, 723, 1045459, 768555219, 330977361619, 109397460695763, 31779949419852499, 8663504184590525139, 2288467614618388382419, 595087046780312306811603]

===
第1种扩展方案:
  每个象限平面分割
  19=1+2*(3**2)
  3=1+2*(1**2)
  1=1+2*(0**2)
  f 0 = 0
  f k = 1+2*(f(k-1)**2)
iterate(f, x, /, *args4islice)
    f -> x -> iter([x, f(x), f(f(x)), ...])
>>> from seed.iters.iterate import iterate as g
>>> f1 = lambda r: 1+2*r**2
>>> [*g(f1, 0, 10)]
[0, 1, 3, 19, 723, 1045459, 2185969041363, 9556921299594946409795539, 182669489453303118864862198078197846848343568601043, 66736284754260838751569986258667504511444731209422184665239731909577328659648804587017101288201375699]


#]]]'''
__all__ = r'''
'''.split()#'''
__all__


from seed.iters.iterate import iterate as g
f1 = lambda r: 1+2*r**2
def iters_(/, *args4islice):
    return g(f1, 0, *args4islice)


if __name__ == "__main__":
    pass
