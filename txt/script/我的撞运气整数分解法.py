
r'''[[[
py script/我的撞运气整数分解法.py
e script/我的撞运气整数分解法.py
e others/数学/整数分解/我的撞运气整数分解法.txt

#]]]'''
__all__ = '''

    '''.split()
from seed.math.gcd import gcd

from nn_ns.math_nn.prime2 import primes_lt
def _find_Us(N, /):
    ps = primes_lt(N)
    ps = {*ps}
    ps.remove(2)
    Us = sorted(U for U in ps if U//2 in ps)
    return Us

def _find_Us_then_show(N, /):
    print(N, _find_Us(N))
#_find_Us_then_show(10**4)
r'''[[[
5, 7, 11, 23, 47, 59, 83, 107, 167
A005385 Safe primes p: (p-1)/2 is also prime.
https://oeis.org/A005385
https://oeis.org/A005385/b005385.txt

10000 [7, 11, 23, 47, 59, 83, 107, 167, 179, 227, 263, 347, 359, 383, 467, 479, 503, 563, 587, 719, 839, 863, 887, 983, 1019, 1187, 1283, 1307, 1319, 1367, 1439, 1487, 1523, 1619, 1823, 1907, 2027, 2039, 2063, 2099, 2207, 2447, 2459, 2579, 2819, 2879, 2903, 2963, 2999, 3023, 3119, 3167, 3203, 3467, 3623, 3779, 3803, 3863, 3947, 4007, 4079, 4127, 4139, 4259, 4283, 4547, 4679, 4703, 4787, 4799, 4919, 5087, 5099, 5387, 5399, 5483, 5507, 5639, 5807, 5879, 5927, 5939, 6047, 6599, 6659, 6719, 6779, 6827, 6899, 6983, 7079, 7187, 7247, 7523, 7559, 7607, 7643, 7703, 7727, 7823, 8039, 8147, 8423, 8543, 8699, 8747, 8783, 8819, 8963, 9467, 9587, 9743, 9839, 9887]
#]]]'''


def _inspect_U(U, /):
    '[is_prime(U)][p:=U//2][is_prime(p)]'
    p = U//2
    assert 2*p+1==U
    assert p%2==1
    total = 0
    ls = []
    for n in range(3, U, 2):
        if n%p==0:continue
        total += 1
        #bug:for e in [2, p]:
        for e in [p+1, p]:
            # [p%2==1] ==>> [even (p+1)]
            # [1*p == k*2 +1]
            # [(p+1)//2 *2 == 1*p +1]
            d = gcd(n, pow(n, e, U))
            if 1 < d < n:
                ls.append(n)
                break
        else:
            ...
    num_succ = len(ls)
    assert total == p-2
        # [1..2*p]-所有偶数-{1,p}
        # (U-1)   -p      -2      == (2*p+1 -1)-p-2 == p-2
    return (num_succ/total, U, ls, p, total, num_succ)
def _t(U, /):
    (_, U, ls, p, total, num_succ) = _inspect_U(U)
    print(f'U={U}, p={p}, total={total}, num_succ={num_succ}, num_succ/total={num_succ/total}')

_t(83)
_t(503)
r'''[[[
U=83, p=41, total=39, num_succ=0, num_succ/total=0.0
U=503, p=251, total=249, num_succ=0, num_succ/total=0.0
#]]]'''
r'''[[[bug:
U=83, p=41, total=39, num_succ=7, num_succ/total=0.1794871794871795
U=503, p=251, total=249, num_succ=49, num_succ/total=0.19678714859437751
#]]]'''



def _ts(N, /):
    ls = [_inspect_U(U) for U in _find_Us(N)]
    ls.sort()
    print(f'N={N}, num_Us={len(ls)}')
    for r, U, ls, _, _, _ in ls:
        r = r*2*10**6  //2 /10**6
        print(f'{r}, {U}')

#_ts(10**2)
#_ts(10**4)
r'''[[[bug:
N=10000, num_Us=114
0.0, 7
0.0, 11
0.095238, 47
0.156862, 107
0.157894, 347
0.158995, 1439
0.160919, 179
0.161512, 587
0.16317, 863
0.166318, 2879
0.168458, 563
0.168831, 467
0.170629, 4799
0.172242, 1619
0.172995, 479
0.175043, 3467
0.175602, 2579
0.175898, 2063
0.175914, 5087
0.17605, 6719
0.177103, 3167
0.17765, 2099
0.178417, 6047
0.17903, 2027
0.179487, 83
0.179518, 9887
0.180009, 4127
0.18018, 227
0.180736, 8747
0.180736, 6899
0.180744, 2207
0.181441, 7247
0.181716, 5387
0.181843, 7187
0.18186, 4283
0.182004, 983
0.182644, 6827
0.182957, 8783
0.183167, 7823
0.183535, 1487
0.183565, 3023
0.183673, 887
0.183851, 9839
0.184408, 7727
0.184763, 5807
0.184865, 7643
0.184873, 719
0.185068, 1907
0.185185, 383
0.185185, 3623
0.185645, 2903
0.185819, 2459
0.185913, 2447
0.186266, 7607
0.186413, 3803
0.186641, 9467
0.186654, 6659
0.186872, 8963
0.186906, 4007
0.187088, 1523
0.187294, 5483
0.187403, 1307
0.187434, 9587
0.187446, 6983
0.187711, 4139
0.187815, 7523
0.187817, 1187
0.188068, 5939
0.1881, 7703
0.188118, 1823
0.188405, 8147
0.188528, 4259
0.188624, 4787
0.188736, 3947
0.189016, 4703
0.189118, 8423
0.189358, 1283
0.189772, 9743
0.190016, 8699
0.190152, 8819
0.190744, 3203
0.19255, 8543
0.192608, 2819
0.192806, 5399
0.193373, 2963
0.193953, 5099
0.193962, 3119
0.194187, 4547
0.194488, 3779
0.194894, 4079
0.195453, 6779
0.196292, 5507
0.196787, 503
0.196892, 5927
0.197238, 1019
0.197907, 7079
0.199148, 5639
0.199523, 5879
0.200398, 8039
0.201174, 1367
0.201217, 7559
0.202305, 6599
0.204721, 4919
0.205391, 4679
0.207361, 3863
0.207748, 2999
0.211406, 2039
0.217054, 263
0.222222, 23
0.222222, 59
0.229832, 1319
0.231638, 359
0.2494, 839
0.271604, 167
#]]]'''





