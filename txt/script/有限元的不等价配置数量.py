#__all__:goto
r'''[[[
e script/有限元的不等价配置数量.py


script.有限元的不等价配置数量
py -m nn_ns.app.debug_cmd   script.有限元的不等价配置数量 -x
py -m nn_ns.app.doctest_cmd script.有限元的不等价配置数量:__doc__ -ht


[[[
起源:
view others/数学/编程/编译/翻译框架设计.txt
  『5』从哪来？
  tr_X5Y_6Z
===

[5 == f(3)]

<<==:

采用关系『==』『!=』
  有多少 n不同点 相等关系 的 不等价排列？只有一个:[0..<n]
采用关系『==』『<』『>』『<>』/偏序无关
  有多少 n不同点 偏序关系 的 不等价排列？

===
采用关系『==』『!=』:
f(3)
f(0)=1
f(1+u) = sum[C(u;j)*f(j) | [j :<- [0..=u]]]
  首位必为0 => 『-1』
  其余选出非零位置，递归...


[5 == f(3)]
    000
    001
    010
    011
    012

]]]







[[[
===
py_adhoc_call   script.有限元的不等价配置数量   ,枚举冫有限元的不等价配置数量牜相等关系扌 | more

py_adhoc_call   script.有限元的不等价配置数量   ,10:枚举冫有限元的不等价配置数量牜相等关系扌 +taged
(0, 1)
(1, 1)
(2, 2)
(3, 5)
(4, 15)
(5, 52)
(6, 203)
(7, 877)
(8, 4140)
(9, 21147)

py_adhoc_call   script.有限元的不等价配置数量   ,10:枚举冫有限元的不等价配置数量牜相等关系扌 -taged
1
1
2
5
15
52
203
877
4140
21147


py_adhoc_call  { -lineno }  script.有限元的不等价配置数量   ,10:枚举冫有限元的不等价配置数量牜相等关系扌 -taged
0:1
1:1
2:2
3:5
4:15
5:52
6:203
7:877
8:4140
9:21147


py_adhoc_call  { -lineno }  script.有限元的不等价配置数量   ,46:枚举冫有限元的不等价配置数量牜相等关系扌 -taged
0:1
1:1
2:2
3:5
4:15
5:52
6:203
7:877
8:4140
9:21147
10:115975
11:678570
12:4213597
13:27644437
14:190899322
15:1382958545
16:10480142147
17:82864869804
18:682076806159
19:5832742205057
20:51724158235372
21:474869816156751
22:4506715738447323
23:44152005855084346
24:445958869294805289
25:4638590332229999353
26:49631246523618756274
27:545717047936059989389
28:6160539404599934652455
29:71339801938860275191172
30:846749014511809332450147
31:10293358946226376485095653
32:128064670049908713818925644
33:1629595892846007606764728147
34:21195039388640360462388656799
35:281600203019560266563340426570
36:3819714729894818339975525681317
37:52868366208550447901945575624941
38:746289892095625330523099540639146
39:10738823330774692832768857986425209
40:157450588391204931289324344702531067
41:2351152507740617628200694077243788988
42:35742549198872617291353508656626642567
43:552950118797165484321714693280737767385
44:8701963427387055089023600531855797148876
45:139258505266263669602347053993654079693415


===
]]]


[[[
===
DONE:www-oeis:[1,1,2,5,15,52,203,877,4140,21147]
    [0..<n]的划分数量
    view others/数学/oeis整数序列/摘要.txt
        view others/数学/oeis整数序列/A000110.txt
        https://oeis.org/A000110
    from nn_ns.math_nn.numbers.Bell_number import bell_number
<<==:
grep '\<203\>' -r ../../python3_src/nn_ns/math_nn/numbers/
    查无
grep '\<877\>' -r ../../python3_src/nn_ns/math_nn/numbers/
    查无
ls ../../python3_src/nn_ns/math_nn/numbers/

view ../../python3_src/nn_ns/math_nn/numbers/Bernoulli_number.py
bernoulli
view ../../python3_src/nn_ns/math_nn/numbers/Catalan_number.py
catalan
view ../../python3_src/nn_ns/math_nn/numbers/Eulerian_number.py
eulerian_1st
eulerian_2nd
view ../../python3_src/nn_ns/math_nn/numbers/Stirling_number.py
stirling_circle
stirling_subset


>>> from nn_ns.math_nn.numbers.Bernoulli_number import bernoulli
>>> from nn_ns.math_nn.numbers.Catalan_number import catalan

#>>> from nn_ns.math_nn.numbers.Eulerian_number import eulerian_1st, eulerian_2nd
#>>> from nn_ns.math_nn.numbers.Stirling_number import stirling_circle, stirling_subset

>>> for fr in bernoulli.get_first(46): fr.as_integer_ratio()
(1, 1)
(-1, 2)
(1, 6)
(0, 1)
(-1, 30)
(0, 1)
(1, 42)
(0, 1)
(-1, 30)
(0, 1)
(5, 66)
(0, 1)
(-691, 2730)
(0, 1)
(7, 6)
(0, 1)
(-3617, 510)
(0, 1)
(43867, 798)
(0, 1)
(-174611, 330)
(0, 1)
(854513, 138)
(0, 1)
(-236364091, 2730)
(0, 1)
(8553103, 6)
(0, 1)
(-23749461029, 870)
(0, 1)
(8615841276005, 14322)
(0, 1)
(-7709321041217, 510)
(0, 1)
(2577687858367, 6)
(0, 1)
(-26315271553053477373, 1919190)
(0, 1)
(2929993913841559, 6)
(0, 1)
(-261082718496449122051, 13530)
(0, 1)
(1520097643918070802691, 1806)
(0, 1)
(-27833269579301024235023, 690)
(0, 1)

>>> for u in catalan.get_first(46): u
1
1
2
5
14
42
132
429
1430
4862
16796
58786
208012
742900
2674440
9694845
35357670
129644790
477638700
1767263190
6564120420
24466267020
91482563640
343059613650
1289904147324
4861946401452
18367353072152
69533550916004
263747951750360
1002242216651368
3814986502092304
14544636039226909
55534064877048198
212336130412243110
812944042149730764
3116285494907301262
11959798385860453492
45950804324621742364
176733862787006701400
680425371729975800390
2622127042276492108820
10113918591637898134020
39044429911904443959240
150853479205085351660700
583300119592996693088040
2257117854077248073253720

#>>> for ls in eulerian_1st.get_first(20): ls
[1]
[1, 0]
[1, 1, 0]
[1, 4, 1, 0]
[1, 11, 11, 1, 0]
[1, 26, 66, 26, 1, 0]
[1, 57, 302, 302, 57, 1, 0]
[1, 120, 1191, 2416, 1191, 120, 1, 0]
[1, 247, 4293, 15619, 15619, 4293, 247, 1, 0]
[1, 502, 14608, 88234, 156190, 88234, 14608, 502, 1, 0]
[1, 1013, 47840, 455192, 1310354, 1310354, 455192, 47840, 1013, 1, 0]
[1, 2036, 152637, 2203488, 9738114, 15724248, 9738114, 2203488, 152637, 2036, 1, 0]
[1, 4083, 478271, 10187685, 66318474, 162512286, 162512286, 66318474, 10187685, 478271, 4083, 1, 0]
[1, 8178, 1479726, 45533450, 423281535, 1505621508, 2275172004, 1505621508, 423281535, 45533450, 1479726, 8178, 1, 0]
[1, 16369, 4537314, 198410786, 2571742175, 12843262863, 27971176092, 27971176092, 12843262863, 2571742175, 198410786, 4537314, 16369, 1, 0]
[1, 32752, 13824739, 848090912, 15041229521, 102776998928, 311387598411, 447538817472, 311387598411, 102776998928, 15041229521, 848090912, 13824739, 32752, 1, 0]
[1, 65519, 41932745, 3572085255, 85383238549, 782115518299, 3207483178157, 6382798925475, 6382798925475, 3207483178157, 782115518299, 85383238549, 3572085255, 41932745, 65519, 1, 0]
[1, 131054, 126781020, 14875399450, 473353301060, 5717291972382, 31055652948388, 83137223185370, 114890380658550, 83137223185370, 31055652948388, 5717291972382, 473353301060, 14875399450, 126781020, 131054, 1, 0]
[1, 262125, 382439924, 61403313100, 2575022097600, 40457344748072, 285997074307300, 1006709967915228, 1865385657780650, 1865385657780650, 1006709967915228, 285997074307300, 40457344748072, 2575022097600, 61403313100, 382439924, 262125, 1, 0]
[1, 524268, 1151775897, 251732291184, 13796160184500, 278794377854832, 2527925001876036, 11485644635009424, 27862280567093358, 37307713155613000, 27862280567093358, 11485644635009424, 2527925001876036, 278794377854832, 13796160184500, 251732291184, 1151775897, 524268, 1, 0]

#>>> for ls in eulerian_2nd.get_first(20): ls
[1]
[1, 0]
[1, 2, 0]
[1, 8, 6, 0]
[1, 22, 58, 24, 0]
[1, 52, 328, 444, 120, 0]
[1, 114, 1452, 4400, 3708, 720, 0]
[1, 240, 5610, 32120, 58140, 33984, 5040, 0]
[1, 494, 19950, 195800, 644020, 785304, 341136, 40320, 0]
[1, 1004, 67260, 1062500, 5765500, 12440064, 11026296, 3733920, 362880, 0]
[1, 2026, 218848, 5326160, 44765000, 155357384, 238904904, 162186912, 44339040, 3628800, 0]
[1, 4072, 695038, 25243904, 314369720, 1648384304, 4002695088, 4642163952, 2507481216, 568356480, 39916800, 0]
[1, 8166, 2170626, 114876376, 2051482776, 15548960784, 56041398784, 101180433024, 92199790224, 40788301824, 7827719040, 479001600, 0]
[1, 16356, 6699696, 507259276, 12669817776, 134323420224, 687720046384, 1818188642304, 2549865473424, 1883079661824, 697929436800, 115336085760, 6227020800, 0]
[1, 32738, 20507988, 2189829808, 75016052228, 1084676512416, 7634832149392, 28299910066112, 57494373464592, 64728375139872, 39689578055808, 12550904017920, 1810992556800, 87178291200, 0]
[1, 65504, 62407890, 9292526920, 429826006340, 8308444327968, 78391384831312, 394365587815520, 1111747472569680, 1797171220690560, 1666424486271456, 865023253219584, 236908271543040, 30196376985600, 1307674368000, 0]
[1, 131038, 189123286, 38917528600, 2400028258540, 61026142132648, 756450802018384, 5036317938475648, 19076135772884080, 42430156603438560, 56071264983487776, 43708768764064128, 19515249341231616, 4687098165573120, 532953524275200, 20922789888000, 0]
[1, 262108, 571432036, 161343812980, 13128749622100, 433357644035008, 6942861451710184, 59958264360283168, 297593170417847920, 882128824583603520, 1592677516697452416, 1758073054805500608, 1171582385481357696, 455924361142656000, 97049168010017280, 9927928075161600, 355687428096000, 0]
[1, 524250, 1722945672, 663661077072, 70645406312880, 2994008352873048, 61167401838986520, 674066235530150496, 4297211671488276816, 16558710676700081120, 39572673298262064576, 59321137058404865280, 55666251271784164032, 32157753536587053312, 11030149104146035200, 2099830209402931200, 194677319705702400, 6402373705728000, 0]
[1, 1048536, 5187185766, 2713224461136, 375127847107776, 20224703119250448, 520986071811970128, 7227551939410799568, 58222825873768855728, 285909033568672562048, 882384594551784900576, 1740743150455672062336, 2206689692993315764416, 1786198580035038683136, 905080567903692754176, 276260563641659673600, 47405948832458496000, 4008789120817152000, 121645100408832000, 0]

#>>> for ls in stirling_circle.get_first(20): ls
#>>> for ls in stirling_subset.get_first(20): ls



]]]
#]]]'''
__all__ = r'''
枚举冫有限元的不等价配置数量牜相等关系扌
'''.split()#'''
__all__
from nn_ns.math_nn.numbers.choose import choose as C

def 枚举冫有限元的不等价配置数量牜相等关系扌(*, taged=False):
    n2sz = []
    def put(sz, /):
        assert n == len(n2sz)
        n2sz.append(sz)
        if taged:
            return (n, sz)
        return sz

    n = 0
    sz = 1
    while 1:
        yield put(sz)
        u = n
        n += 1
        sz = sum(C(u,k)*n2sz[k] for k in range(n))

__all__
from script.有限元的不等价配置数量 import 枚举冫有限元的不等价配置数量牜相等关系扌
from script.有限元的不等价配置数量 import *
