#__all__:goto
r'''[[[
e script/链长纟阳爻数.py
view others/数学/有递增趋势的非递增序列.txt

script.链长纟阳爻数
py -m nn_ns.app.debug_cmd   script.链长纟阳爻数 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.链长纟阳爻数:__doc__ -ht # -ff -df

[[
sum of binary digits
int.bit_count
iterate sum of binary digits until 1
[u :<- [1..]]:
    [u.bit_count() <= 1+floor_log2(u) == u.bit_length() < u+[u<3]]
    [u.bit_count() < u+[u==1]]
    [u.bit_count() < u.bit_length()+[u+1 == 2**floor_log2(u+1)]]
[u :<- [2..]]:
    [u.bit_count() < u]
[u :<- [1..]]:
    [求冫链长纟阳爻数纟正整数扌(u) =[def]= if u==1 then 0 else 1+求冫链长纟阳爻数纟正整数扌(u.bit_count())]

[@[u :<-[1..]] -> [[[u>=2] <= 求冫链长纟阳爻数纟正整数扌(u) <= u.bit_count() <= u.bit_length() < u+[u<3]-[u>=4]][求冫链长纟阳爻数纟正整数扌(u) < u][u.bit_count() < u+[u<2]-[u>=4]]]]
    证明:
        #归纳法:
        * [u==1]:
            [0==[u>=2] <= 0==求冫链长纟阳爻数纟正整数扌(u) <= 1==u.bit_count() <= 1==u.bit_length() < 2==u+[u<3]-[u>=4]]
            [0==求冫链长纟阳爻数纟正整数扌(u) < 1==u]
            [1==u.bit_count() < 2==u+[u<2]-[u>=4]]
        * [u==2]:
            [1==[u>=2] <= 1==求冫链长纟阳爻数纟正整数扌(u) <= 1==u.bit_count() <= 2==u.bit_length() < 3==u+[u<3]-[u>=4]]
            [1==求冫链长纟阳爻数纟正整数扌(u) < 2==u]
            [1==u.bit_count() < 2==u+[u<2]-[u>=4]]
        * [u==3]:
            [1==[u>=2] <= 2==求冫链长纟阳爻数纟正整数扌(u) <= 2==u.bit_count() <= 2==u.bit_length() <= 3==u+[u<3]-[u>=4]]
            [2==求冫链长纟阳爻数纟正整数扌(u) < 3==u]
            [2==u.bit_count() < 3==u+[u<2]-[u>=4]]
        * [u==4]:
            [1==[u>=2] <= 1==求冫链长纟阳爻数纟正整数扌(u) <= 1==u.bit_count() <= 3==u.bit_length() <= 3==u+[u<3]-[u>=4]]
            [1==求冫链长纟阳爻数纟正整数扌(u) < 4==u]
            [1==u.bit_count() < 3==u+[u<2]-[u>=4]]
        * [u==5]:
            [1==[u>=2] <= 2==求冫链长纟阳爻数纟正整数扌(u) <= 2==u.bit_count() <= 3==u.bit_length() <= 4==u+[u<3]-[u>=4]]
            [2==求冫链长纟阳爻数纟正整数扌(u) < 5==u]
            [2==u.bit_count() < 4==u+[u<2]-[u>=4]]
        * [u>=6][@[h :<-[1..<u]] -> [[[h>=2] <= 求冫链长纟阳爻数纟正整数扌(h) <= h.bit_count() <= h.bit_length() < h+[h<3]-[h>=4]][求冫链长纟阳爻数纟正整数扌(h) < h][h.bit_count() < h+[h<2]-[h>=4]]]]:
            [h := u//2]
            [3 <= h <= u-3]
            [1==[h>=2] <= 求冫链长纟阳爻数纟正整数扌(h) <= h.bit_count() <= h.bit_length() < h+[h<3]-[h>=4]]
            # [求冫链长纟阳爻数纟正整数扌(h) < h]
            # [h.bit_count() < h+[h<2]-[h>=4]]

            [1 <= h.bit_count() <= u.bit_count() <= 1+h.bit_count() <= 1+h.bit_length() == u.bit_length() < 1+h+[h<3]-[h>=4] <= 1+(u-3)+0-0 == u-2 < u-1]
            [1 <= u.bit_count() <= u.bit_length() < u-1]
            [[u.bit_count()>=2] <= 求冫链长纟阳爻数纟正整数扌(u.bit_count()) <= u.bit_count().bit_count() <= u.bit_count().bit_length() < u.bit_count()+[u.bit_count()<3]]
            [求冫链长纟阳爻数纟正整数扌(u.bit_count()) < u.bit_count()]
            # [u.bit_count().bit_count() < u.bit_count()+[u.bit_count()<2]-[u.bit_count()>=4]]

            [0 <= 求冫链长纟阳爻数纟正整数扌(u.bit_count()) < u.bit_count()]
            !! [u > 1]
            [求冫链长纟阳爻数纟正整数扌(u) == 1+求冫链长纟阳爻数纟正整数扌(u.bit_count())]
            [求冫链长纟阳爻数纟正整数扌(u) >= 1+0 == 1]
            [求冫链长纟阳爻数纟正整数扌(u) < 1+u.bit_count()]
            [1 <= 求冫链长纟阳爻数纟正整数扌(u) <= u.bit_count()]
            !! [1 <= u.bit_count() <= u.bit_length() < u-1]
            [[u>=2] <= 求冫链长纟阳爻数纟正整数扌(u) <= u.bit_count() <= u.bit_length() < u+[u<3]-[u>=4]]

            !! [u >= 6]
            [u >= 4]
            [求冫链长纟阳爻数纟正整数扌(u) < u]
            [u.bit_count() < u+[u<2]-[u>=4]]


]]

>>> for u in range(10):print((u, u.bit_length(), u.bit_count()))
(0, 0, 0)
(1, 1, 1)
(2, 2, 1)
(3, 2, 2)
(4, 3, 1)
(5, 3, 2)
(6, 3, 2)
(7, 3, 3)
(8, 4, 1)
(9, 4, 2)
>>> all(u.bit_count() <= u.bit_length() for u in range(1, 1000))
True
>>> all(u.bit_count() <= u for u in range(0, 1000))
True
>>> [u for u in range(1000) if not u.bit_length() <= u]
[]
>>> all(u.bit_count() <= u.bit_length() <= u for u in range(1000))
True
>>> all(u.bit_count() < u for u in range(2, 1000))
True
>>> all(u.bit_count() < u+(u<2) for u in range(1000))
True
>>> [u for u in range(1, 1000) if not 求冫链长纟阳爻数纟正整数扌(u) <= u.bit_count()]
[]
>>> all(0 <= 求冫链长纟阳爻数纟正整数扌(u) <= u.bit_count() < u+(u<2) for u in range(1, 1000))
True
>>> all(0 <= 求冫链长纟阳爻数纟正整数扌(u) <= u.bit_count() < u for u in range(2, 1000))
True
>>> all(0 <= 求冫链长纟阳爻数纟正整数扌(u) <= u.bit_count() <= u.bit_length() < u for u in range(3, 1000))
True
>>> for u in range(1,10):print((u, u.bit_length(), u.bit_count(), 求冫链长纟阳爻数纟正整数扌(u)))
(1, 1, 1, 0)
(2, 2, 1, 1)
(3, 2, 2, 2)
(4, 3, 1, 1)
(5, 3, 2, 2)
(6, 3, 2, 2)
(7, 3, 3, 3)
(8, 4, 1, 1)
(9, 4, 2, 2)
>>> all(0 <= 求冫链长纟阳爻数纟正整数扌(u) < u for u in range(1, 1000))
True

py_adhoc_call   script.链长纟阳爻数   ,10:枚举冫链长纟阳爻数纟正整数扌
0
1
2
1
2
2
3
1
2
2
py_adhoc_call   script.链长纟阳爻数   ,10:枚举冫链长纟阳爻数纟正整数扌 +to_tag
(1, 0)
(2, 1)
(3, 2)
(4, 1)
(5, 2)
(6, 2)
(7, 3)
(8, 1)
(9, 2)
(10, 2)

py_adhoc_call { +lineno }  script.链长纟阳爻数   ,10:枚举冫链长纟阳爻数纟正整数扌
1:0
2:1
3:2
4:1
5:2
6:2
7:3
8:1
9:2
10:2

[[
[小进步大退步乊(u;f) =[def]= [f(u+1) <= f(u)+1]]
[小进步大退步(f) =[def]= [@[u::pint] -> [f(u+1) <= f(u)+1]]]

[小进步大退步(bit_count)]
    bit_count每次步进最多+1 #偶=>+1，奇=>不增
        [u%2==0] => +1
        [u%4==1] => +0
        [u%4==3] => 递减
            [u%8==3] => -1
            [u%16==7] => -2
            ...

bug:[小进步大退步(求冫链长纟阳爻数纟正整数扌)]
    反例: [4==链长(507+1) > 1+链长(507)==3]
        u  =0b111111011=507
        u+1=0b111111100=508
        u.bit_count()    =8
        (u+1).bit_count()=7
        链长(u)  =1+链长(8)==2
        链长(u+1)=1+链长(7)==4
        链长(u+1) > 1+链长(u)

py_adhoc_call { +lineno }  script.链长纟阳爻数   ,10:枚举冫正整数牜大步进纟链长纟阳爻数扌
1:507
2:763
3:891
4:955
5:987
6:1003
7:1011
8:1275
9:1403
10:1467

factor $(py_adhoc_call  script.链长纟阳爻数   ,10:枚举冫正整数牜大步进纟链长纟阳爻数扌)
507: 3 13 13
763: 7 109
891: 3 3 3 3 11
955: 5 191
987: 3 7 47
1003: 17 59
1011: 3 337
1275: 3 5 5 17
1403: 23 61
1467: 3 3 163

py_adhoc_call script.链长纟阳爻数   ,10:枚举冫正整数牜大步进纟链长纟阳爻数扌 +more
(507, 2, 4, '0b111111011', 8, 7)
(763, 2, 4, '0b1011111011', 8, 7)
(891, 2, 4, '0b1101111011', 8, 7)
(955, 2, 4, '0b1110111011', 8, 7)
(987, 2, 4, '0b1111011011', 8, 7)
(1003, 2, 4, '0b1111101011', 8, 7)
(1011, 2, 4, '0b1111110011', 8, 7)
(1275, 2, 4, '0b10011111011', 8, 7)
(1403, 2, 4, '0b10101111011', 8, 7)
(1467, 2, 4, '0b10110111011', 8, 7)

]]

[[
py_adhoc_call { +lineno }  script.链长纟阳爻数   ,1000:枚举冫链长纟阳爻数纟正整数扌
1:0
2:1
3:2
4:1
5:2
6:2
7:3
8:1
9:2
10:2
11:3
12:2
13:3
14:3
15:2
16:1
17:2
18:2
19:3
20:2
21:3
22:3
23:2
24:2
25:3
26:3
27:2
28:3
29:2
30:2
31:3
32:1
33:2
34:2
35:3
36:2
37:3
38:3
39:2
40:2
41:3
42:3
43:2
44:3
45:2
46:2
47:3
48:2
49:3
50:3
51:2
52:3
53:2
54:2
55:3
56:3
57:2
58:2
59:3
60:2
61:3
62:3
63:3
64:1
65:2
66:2
67:3
68:2
69:3
70:3
71:2
72:2
73:3
74:3
75:2
76:3
77:2
78:2
79:3
80:2
81:3
82:3
83:2
84:3
85:2
86:2
87:3
88:3
89:2
90:2
91:3
92:2
93:3
94:3
95:3
96:2
97:3
98:3
99:2
100:3
101:2
102:2
103:3
104:3
105:2
106:2
107:3
108:2
109:3
110:3
111:3
112:3
113:2
114:2
115:3
116:2
117:3
118:3
119:3
120:2
121:3
122:3
123:3
124:3
125:3
126:3
127:4
128:1
129:2
130:2
131:3
132:2
133:3
134:3
135:2
136:2
137:3
138:3
139:2
140:3
141:2
142:2
143:3
144:2
145:3
146:3
147:2
148:3
149:2
150:2
151:3
152:3
153:2
154:2
155:3
156:2
157:3
158:3
159:3
160:2
161:3
162:3
163:2
164:3
165:2
166:2
167:3
168:3
169:2
170:2
171:3
172:2
173:3
174:3
175:3
176:3
177:2
178:2
179:3
180:2
181:3
182:3
183:3
184:2
185:3
186:3
187:3
188:3
189:3
190:3
191:4
192:2
193:3
194:3
195:2
196:3
197:2
198:2
199:3
200:3
201:2
202:2
203:3
204:2
205:3
206:3
207:3
208:3
209:2
210:2
211:3
212:2
213:3
214:3
215:3
216:2
217:3
218:3
219:3
220:3
221:3
222:3
223:4
224:3
225:2
226:2
227:3
228:2
229:3
230:3
231:3
232:2
233:3
234:3
235:3
236:3
237:3
238:3
239:4
240:2
241:3
242:3
243:3
244:3
245:3
246:3
247:4
248:3
249:3
250:3
251:4
252:3
253:4
254:4
255:2
256:1
257:2
258:2
259:3
260:2
261:3
262:3
263:2
264:2
265:3
266:3
267:2
268:3
269:2
270:2
271:3
272:2
273:3
274:3
275:2
276:3
277:2
278:2
279:3
280:3
281:2
282:2
283:3
284:2
285:3
286:3
287:3
288:2
289:3
290:3
291:2
292:3
293:2
294:2
295:3
296:3
297:2
298:2
299:3
300:2
301:3
302:3
303:3
304:3
305:2
306:2
307:3
308:2
309:3
310:3
311:3
312:2
313:3
314:3
315:3
316:3
317:3
318:3
319:4
320:2
321:3
322:3
323:2
324:3
325:2
326:2
327:3
328:3
329:2
330:2
331:3
332:2
333:3
334:3
335:3
336:3
337:2
338:2
339:3
340:2
341:3
342:3
343:3
344:2
345:3
346:3
347:3
348:3
349:3
350:3
351:4
352:3
353:2
354:2
355:3
356:2
357:3
358:3
359:3
360:2
361:3
362:3
363:3
364:3
365:3
366:3
367:4
368:2
369:3
370:3
371:3
372:3
373:3
374:3
375:4
376:3
377:3
378:3
379:4
380:3
381:4
382:4
383:2
384:2
385:3
386:3
387:2
388:3
389:2
390:2
391:3
392:3
393:2
394:2
395:3
396:2
397:3
398:3
399:3
400:3
401:2
402:2
403:3
404:2
405:3
406:3
407:3
408:2
409:3
410:3
411:3
412:3
413:3
414:3
415:4
416:3
417:2
418:2
419:3
420:2
421:3
422:3
423:3
424:2
425:3
426:3
427:3
428:3
429:3
430:3
431:4
432:2
433:3
434:3
435:3
436:3
437:3
438:3
439:4
440:3
441:3
442:3
443:4
444:3
445:4
446:4
447:2
448:3
449:2
450:2
451:3
452:2
453:3
454:3
455:3
456:2
457:3
458:3
459:3
460:3
461:3
462:3
463:4
464:2
465:3
466:3
467:3
468:3
469:3
470:3
471:4
472:3
473:3
474:3
475:4
476:3
477:4
478:4
479:2
480:2
481:3
482:3
483:3
484:3
485:3
486:3
487:4
488:3
489:3
490:3
491:4
492:3
493:4
494:4
495:2
496:3
497:3
498:3
499:4
500:3
501:4
502:4
503:2
504:3
505:4
506:4
507:2
508:4
509:2
510:2
511:3
512:1
513:2
514:2
515:3
516:2
517:3
518:3
519:2
520:2
521:3
522:3
523:2
524:3
525:2
526:2
527:3
528:2
529:3
530:3
531:2
532:3
533:2
534:2
535:3
536:3
537:2
538:2
539:3
540:2
541:3
542:3
543:3
544:2
545:3
546:3
547:2
548:3
549:2
550:2
551:3
552:3
553:2
554:2
555:3
556:2
557:3
558:3
559:3
560:3
561:2
562:2
563:3
564:2
565:3
566:3
567:3
568:2
569:3
570:3
571:3
572:3
573:3
574:3
575:4
576:2
577:3
578:3
579:2
580:3
581:2
582:2
583:3
584:3
585:2
586:2
587:3
588:2
589:3
590:3
591:3
592:3
593:2
594:2
595:3
596:2
597:3
598:3
599:3
600:2
601:3
602:3
603:3
604:3
605:3
606:3
607:4
608:3
609:2
610:2
611:3
612:2
613:3
614:3
615:3
616:2
617:3
618:3
619:3
620:3
621:3
622:3
623:4
624:2
625:3
626:3
627:3
628:3
629:3
630:3
631:4
632:3
633:3
634:3
635:4
636:3
637:4
638:4
639:2
640:2
641:3
642:3
643:2
644:3
645:2
646:2
647:3
648:3
649:2
650:2
651:3
652:2
653:3
654:3
655:3
656:3
657:2
658:2
659:3
660:2
661:3
662:3
663:3
664:2
665:3
666:3
667:3
668:3
669:3
670:3
671:4
672:3
673:2
674:2
675:3
676:2
677:3
678:3
679:3
680:2
681:3
682:3
683:3
684:3
685:3
686:3
687:4
688:2
689:3
690:3
691:3
692:3
693:3
694:3
695:4
696:3
697:3
698:3
699:4
700:3
701:4
702:4
703:2
704:3
705:2
706:2
707:3
708:2
709:3
710:3
711:3
712:2
713:3
714:3
715:3
716:3
717:3
718:3
719:4
720:2
721:3
722:3
723:3
724:3
725:3
726:3
727:4
728:3
729:3
730:3
731:4
732:3
733:4
734:4
735:2
736:2
737:3
738:3
739:3
740:3
741:3
742:3
743:4
744:3
745:3
746:3
747:4
748:3
749:4
750:4
751:2
752:3
753:3
754:3
755:4
756:3
757:4
758:4
759:2
760:3
761:4
762:4
763:2
764:4
765:2
766:2
767:3
768:2
769:3
770:3
771:2
772:3
773:2
774:2
775:3
776:3
777:2
778:2
779:3
780:2
781:3
782:3
783:3
784:3
785:2
786:2
787:3
788:2
789:3
790:3
791:3
792:2
793:3
794:3
795:3
796:3
797:3
798:3
799:4
800:3
801:2
802:2
803:3
804:2
805:3
806:3
807:3
808:2
809:3
810:3
811:3
812:3
813:3
814:3
815:4
816:2
817:3
818:3
819:3
820:3
821:3
822:3
823:4
824:3
825:3
826:3
827:4
828:3
829:4
830:4
831:2
832:3
833:2
834:2
835:3
836:2
837:3
838:3
839:3
840:2
841:3
842:3
843:3
844:3
845:3
846:3
847:4
848:2
849:3
850:3
851:3
852:3
853:3
854:3
855:4
856:3
857:3
858:3
859:4
860:3
861:4
862:4
863:2
864:2
865:3
866:3
867:3
868:3
869:3
870:3
871:4
872:3
873:3
874:3
875:4
876:3
877:4
878:4
879:2
880:3
881:3
882:3
883:4
884:3
885:4
886:4
887:2
888:3
889:4
890:4
891:2
892:4
893:2
894:2
895:3
896:3
897:2
898:2
899:3
900:2
901:3
902:3
903:3
904:2
905:3
906:3
907:3
908:3
909:3
910:3
911:4
912:2
913:3
914:3
915:3
916:3
917:3
918:3
919:4
920:3
921:3
922:3
923:4
924:3
925:4
926:4
927:2
928:2
929:3
930:3
931:3
932:3
933:3
934:3
935:4
936:3
937:3
938:3
939:4
940:3
941:4
942:4
943:2
944:3
945:3
946:3
947:4
948:3
949:4
950:4
951:2
952:3
953:4
954:4
955:2
956:4
957:2
958:2
959:3
960:2
961:3
962:3
963:3
964:3
965:3
966:3
967:4
968:3
969:3
970:3
971:4
972:3
973:4
974:4
975:2
976:3
977:3
978:3
979:4
980:3
981:4
982:4
983:2
984:3
985:4
986:4
987:2
988:4
989:2
990:2
991:3
992:3
993:3
994:3
995:4
996:3
997:4
998:4
999:2
1000:3
]]


>>> [*islice(枚举冫阳爻数纟正整数扌(), 100)]
[1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3]
>>> [*islice(枚举冫链长纟阳爻数纟正整数扌(), 100)]
[0, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 2, 3, 3, 2, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 2, 3, 3, 2, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3]
>>> [*islice(枚举冫正整数牜大步进纟链长纟阳爻数扌(), 30)]
[507, 763, 891, 955, 987, 1003, 1011, 1275, 1403, 1467, 1499, 1515, 1523, 1659, 1723, 1755, 1771, 1779, 1851, 1883, 1899, 1907, 1947, 1963, 1971, 1995, 2003, 2019, 2299, 2427]
>>> [*islice(枚举冫差分纟正整数牜大步进纟链长纟阳爻数扌(to_div_by8=True), 50)]
[32, 16, 8, 4, 2, 1, 33, 16, 8, 4, 2, 1, 17, 8, 4, 2, 1, 9, 4, 2, 1, 5, 2, 1, 3, 1, 2, 35, 16, 8, 4, 2, 1, 17, 8, 4, 2, 1, 9, 4, 2, 1, 5, 2, 1, 3, 1, 2, 19, 8]
>>> [*islice(枚举冫加一负差分纟链长纟阳爻数纟正整数扌(), 800)] == (
... [0, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 2, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2
... , 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 4, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2
... , 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 2, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0
... , 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2
... , 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 1, 1, 0, 2, 0
... , 1, 3, 0, 0, 1, 3, -1, 3, 1, 0, 3, 0, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0
... , 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0
... , 1, 3, 0, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 1, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 3, 0, 1, 1, 0, 2, 0, 1, 3, 0, 0, 1, 3, -1, 3, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2
... ])
True

]]]'''#'''
__all__ = r'''
求冫阳爻数纟正整数扌
求冫链长纟阳爻数纟正整数扌

枚举冫阳爻数纟正整数扌
枚举冫链长纟阳爻数纟正整数扌
枚举冫正整数牜大步进纟链长纟阳爻数扌
枚举冫差分纟正整数牜大步进纟链长纟阳爻数扌
枚举冫加一负差分纟链长纟阳爻数纟正整数扌
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from itertools import islice, count, tee, pairwise
from seed.tiny_.check import check_type_is, check_int_ge

___end_mark_of_excluded_global_names__0___ = ...


def 求冫阳爻数纟正整数扌(u, /):
    check_int_ge(1, u)
    return u.bit_count()
def 求冫链长纟阳爻数纟正整数扌(u, /):
    check_int_ge(1, u)
    u0 = u
    n = 0
    while not u==1:
        n += 1
        u = u.bit_count()
    n
    assert 0 <= n < u0
    return n
def 枚举冫加一负差分纟链长纟阳爻数纟正整数扌(u=1, /):
    it = 枚举冫链长纟阳爻数纟正整数扌(u)
    for n, _n in pairwise(it):
        d = _n - n
        yield 1-d
    return
def 枚举冫差分纟正整数牜大步进纟链长纟阳爻数扌(u=1, /, *, to_div_by8=False):
    it = 枚举冫正整数牜大步进纟链长纟阳爻数扌(u)
    for n, _n in pairwise(it):
        d = _n - n
        #q,r = divmod(d,8)
        assert d&7 == 0
        yield d if not to_div_by8 else d>>3
    return
    n_ = 0
    for n in it:
        yield n-n_
        n_ = n
def 枚举冫正整数牜大步进纟链长纟阳爻数扌(u=1, /, *, more=False):
    check_int_ge(1, u)
    it = 枚举冫链长纟阳爻数纟正整数扌(u, to_tag=True)
    for (u, L), (u1, L1) in pairwise(it):
        #if not L1 <= L+1
        if L+2 <= L1:
            yield u if not more else (u, L, L1, bin(u), u.bit_count(), u1.bit_count())


def 枚举冫阳爻数纟正整数扌(u_or_us=1, /, *, to_tag=False):
    return _iter4f(求冫阳爻数纟正整数扌, u_or_us, to_tag=to_tag)
def 枚举冫链长纟阳爻数纟正整数扌(u_or_us=1, /, *, to_tag=False):
    return _iter4f(求冫链长纟阳爻数纟正整数扌, u_or_us, to_tag=to_tag)
def _iter4f(f, u_or_us=1, /, *, to_tag):
    check_type_is(bool, to_tag)
    if type(u_or_us) is int:
        u = u_or_us
        check_int_ge(1, u)
        us = count(u)
    else:
        us = u_or_us
    us
    us = iter(us)
    if to_tag:
        us, js = tee(us)
    it = map(f, us)
    if to_tag:
        it = zip(js, it)
    return it


__all__
from script.链长纟阳爻数 import 求冫阳爻数纟正整数扌,求冫链长纟阳爻数纟正整数扌,枚举冫链长纟阳爻数纟正整数扌
from script.链长纟阳爻数 import *
