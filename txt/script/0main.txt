
def main(args=None):
	import argparse
	from seed.io.may_open import may_open_stdin, may_open_stdout

	parser = argparse.ArgumentParser(
		description="
		, epilog=""
		, formatter_class=argparse.RawDescriptionHelpFormatter
		)
	parser.add_argument('-i', '--input', type=str, default=None
						, help='input hfile path')
	parser.add_argument('-o', '--output', type=str, default=None
						, help='output file path')
	parser.add_argument('-e', '--encoding', type=str
						, default='utf8'
						, help='input/output file encoding')
	parser.add_argument('-f', '--force', action='store_true'
						, default = False
						, help='open mode for output file')

	args = parser.parse_args(args)
	encoding = args.encoding
	omode = 'wt' if args.force else 'xt'

	may_ifname = args.input
	with may_open_stdin(may_ifname, 'rt', encoding=encoding) as fin:

	may_ofname = args.output
	with may_open_stdout(may_ofname, omode, encoding=encoding) as fout:
if __name__ == "__main__":
	main()







__all__ = '''
	'''.split()
from itertools import chain
from .abc import ABC, abstractmethod, override, not_implemented, ABCMeta
	# since abc.ABC has no "__slots__ = ()"
	__slots__ = ()
	(printf "\"%s\"\0" "class \|__slots__ =" && find -name "*.py" -and -not -path *-* -print0) | xargs -0 grep
class IXXX(metaclass=ABCMeta):
	__slots__ = ()
class IXXX(ABC):
	__slots__ = ()
	raise NotImplementedError

if __name__ == "__main__":
	import doctest
	doctest.testmod()
	#doctest: +ELLIPSIS
	#doctest: +NORMALIZE_WHITESPACE
	#doctest: +IGNORE_EXCEPTION_DETAIL
	#Traceback (most recent call last):

if __name__ == '__main__':
	classes = [XXX]
	excludes = '''
		logic
		error
		'''.split()

	from seed.helper.ongo import main
	main(modules=[__name__], classes=classes, excludes=excludes)

from seed.helper.repr_input import repr_helper_ex
from seed.helper.repr_input import repr_helper
	def __repr__(self):
		return repr_helper(self, *args, **kwargs)
		return repr_helper_ex(self, args, ordered_attrs, kwargs, ordered_attrs_only=False)
from seed.abc import abstractmethod, ABC, final, override
from seed.decorators.__special_method__ import (
	__static_method__
	,__class_method__
	,__instance_method__
	)



if __name__ == "__main__":
	from timeit import timeit
	from time import perf_counter, process_time
	from random import *




if __name__ == '__main__':
	from seed.test_utils.generate_test_data import str2values_by_line2expr
	data = '''
		[input], [output]
		[input], [output]
		'''
	data = str2values_by_line2expr(data)

from seed.tiny import does_run_as_main
if does_run_as_main(__name__):
	main()






if __name__ == '__main__':
	excludes = ???
	qnames = ???

	from seed.pkg_tools.dectect_all_unbound_names import DectectAllUnboundNames

	excludes = frozenset(excludes)
	for __name__ in qnames:
		print(f'module: {__name__}')
		unbound_names = forgots = (DectectAllUnboundNames.from_module_qname(__name__))

if __name__ == '__main__':
	XXX = ???

	from seed.helper.print_methods import wrapped_print_methods
	wrapped_print_methods(XXX)

	from seed.helper.detect_method_conflict import \
		wrapped_print_detect_method_conflict
	wrapped_print_detect_method_conflict(XXX)

	from seed.helper.find_bases_without_slots import print_bases_without_slots
	print_bases_without_slots(XXX)


if __name__ == '__main__':
	from seed.helper.print_global_names import print_global_names
	print_global_names(globals())

if __name__ == '__main__':
	print('\n'.join(dir(XXX)))
	print('\n'.join(n for n in dir(XXX) if getattr(getattr(XXX, n), '__isabstractmethod__', False)))
	print('\n'.join('\n\t'.join([XXX.__name__, '\n\t'.join(dir(XXX))]) for XXX in map(globals().__getitem__, __all__) if isinstance(XXX, type)))



