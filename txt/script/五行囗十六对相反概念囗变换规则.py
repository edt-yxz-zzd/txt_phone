#__all__:goto
r'''[[[
e script/五行囗十六对相反概念囗变换规则.py
view others/杂/词语解释/五囗囗囗.txt

py -m nn_ns.app.debug_cmd    script.五行囗十六对相反概念囗变换规则

xxx py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举 =各向同性囗囗五德终始()
NameError: name '各向同性囗囗五德终始' is not defined

py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗五德终始
py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗有先则现囗无强不亡
py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第一版囗有误
py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第二版
py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有


py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗长命名囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有
py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 @各向同性囗囗变换囗囗格式字符串化囗囗长命名囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有
py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概念囗变换规则 @打印囗囗各向同性囗囗变换囗囗格式字符串化囗囗长命名囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有
see:_str4long_name2hz_str


.../txt_phone/txt $ py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概 念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗五德终始
('囗囗囗囗囗', '囗囗囗囗囗')
('囗囗囗囗土', '金囗囗囗囗')
('囗囗囗火囗', '囗囗囗囗土')
('囗囗囗火土', '金囗囗囗土')
('囗囗木囗囗', '囗囗囗火囗')
('囗囗木囗土', '金囗囗火囗')
('囗囗木火囗', '囗囗囗火土')
('囗囗木火土', '金囗囗火土')
('囗水囗囗囗', '囗囗木囗囗')
('囗水囗囗土', '金囗木囗囗')
('囗水囗火囗', '囗囗木囗土')
('囗水囗火土', '金囗木囗土')
('囗水木囗囗', '囗囗木火囗')
('囗水木囗土', '金囗木火囗')
('囗水木火囗', '囗囗木火土')
('囗水木火土', '金囗木火土')
('金囗囗囗囗', '囗水囗囗囗')
('金囗囗囗土', '金水囗囗囗')
('金囗囗火囗', '囗水囗囗土')
('金囗囗火土', '金水囗囗土')
('金囗木囗囗', '囗水囗火囗')
('金囗木囗土', '金水囗火囗')
('金囗木火囗', '囗水囗火土')
('金囗木火土', '金水囗火土')
('金水囗囗囗', '囗水木囗囗')
('金水囗囗土', '金水木囗囗')
('金水囗火囗', '囗水木囗土')
('金水囗火土', '金水木囗土')
('金水木囗囗', '囗水木火囗')
('金水木囗土', '金水木火囗')
('金水木火囗', '囗水木火土')
('金水木火土', '金水木火土')
.../txt_phone/txt $ py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概 念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗有先则现囗无强不亡
('囗囗囗囗囗', '囗囗囗囗囗')
('囗囗囗囗土', '金囗囗囗土')
('囗囗囗火囗', '囗囗囗火土')
('囗囗囗火土', '金囗囗火土')
('囗囗木囗囗', '囗囗木火囗')
('囗囗木囗土', '金囗木火囗')
('囗囗木火囗', '囗囗木火土')
('囗囗木火土', '金囗木火土')
('囗水囗囗囗', '囗水木囗囗')
('囗水囗囗土', '金囗木囗土')
('囗水囗火囗', '囗水木囗土')
('囗水囗火土', '金囗木囗土')
('囗水木囗囗', '囗水木火囗')
('囗水木囗土', '金囗木火囗')
('囗水木火囗', '囗水木火土')
('囗水木火土', '金囗木火土')
('金囗囗囗囗', '金水囗囗囗')
('金囗囗囗土', '金水囗囗土')
('金囗囗火囗', '囗水囗火土')
('金囗囗火土', '金水囗火土')
('金囗木囗囗', '金水囗火囗')
('金囗木囗土', '金水囗火囗')
('金囗木火囗', '囗水囗火土')
('金囗木火土', '金水囗火土')
('金水囗囗囗', '金水木囗囗')
('金水囗囗土', '金水木囗土')
('金水囗火囗', '囗水木囗土')
('金水囗火土', '金水木囗土')
('金水木囗囗', '金水木火囗')
('金水木囗土', '金水木火囗')
('金水木火囗', '囗水木火土')
('金水木火土', '金水木火土')
    全缺->[全缺]
    全有->[全有]
    有单->有生->缺生->缺单->[缺单]
    有克->缺克->[缺克]
.../txt_phone/txt $ py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概 念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第一版囗有误
('囗囗囗囗囗', '囗囗囗囗囗')
('囗囗囗囗土', '金囗囗囗囗')
('囗囗囗火囗', '囗囗囗囗土')
('囗囗囗火土', '金囗囗火囗')
('囗囗木囗囗', '囗囗囗火囗')
('囗囗木囗土', '金囗囗火囗')
('囗囗木火囗', '囗囗木囗土')
('囗囗木火土', '金囗木囗囗')
('囗水囗囗囗', '囗囗木囗囗')
('囗水囗囗土', '金囗木囗囗')
('囗水囗火囗', '囗囗木囗土')
('囗水囗火土', '金囗木囗囗')
('囗水木囗囗', '囗水囗火囗')
('囗水木囗土', '金囗囗火囗')
('囗水木火囗', '囗水囗囗土')
('囗水木火土', '金囗囗囗囗')
('金囗囗囗囗', '囗水囗囗囗')
('金囗囗囗土', '囗水囗囗土')
('金囗囗火囗', '囗水囗囗土')
('金囗囗火土', '囗水囗火囗')
('金囗木囗囗', '囗水囗火囗')
('金囗木囗土', '囗水囗火囗')
('金囗木火囗', '囗水囗囗土')
('金囗木火土', '囗水囗囗囗')
('金水囗囗囗', '金囗木囗囗')
('金水囗囗土', '囗囗木囗土')
('金水囗火囗', '囗囗木囗土')
('金水囗火土', '囗囗木囗囗')
('金水木囗囗', '金囗囗火囗')
('金水木囗土', '囗囗囗火囗')
('金水木火囗', '囗囗囗囗土')
('金水木火土', '囗囗囗囗囗')
    全有->全缺->[全缺]
    缺单->有单->[有单]
    有生/缺克/缺生->有克->[有克]
.../txt_phone/txt $ py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概 念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第二版
('囗囗囗囗囗', '囗囗囗囗囗')
('囗囗囗囗土', '金囗囗囗囗')
('囗囗囗火囗', '囗囗囗囗土')
('囗囗囗火土', '金囗囗火囗')
('囗囗木囗囗', '囗囗囗火囗')
('囗囗木囗土', '金囗囗火囗')
('囗囗木火囗', '囗囗木囗土')
('囗囗木火土', '金囗囗火土')
('囗水囗囗囗', '囗囗木囗囗')
('囗水囗囗土', '金囗木囗囗')
('囗水囗火囗', '囗囗木囗土')
('囗水囗火土', '金囗木囗囗')
('囗水木囗囗', '囗水囗火囗')
('囗水木囗土', '金囗囗火囗')
('囗水木火囗', '囗囗木火土')
('囗水木火土', '金囗木火土')
('金囗囗囗囗', '囗水囗囗囗')
('金囗囗囗土', '囗水囗囗土')
('金囗囗火囗', '囗水囗囗土')
('金囗囗火土', '金水囗囗土')
('金囗木囗囗', '囗水囗火囗')
('金囗木囗土', '囗水囗火囗')
('金囗木火囗', '囗水囗囗土')
('金囗木火土', '金水囗火土')
('金水囗囗囗', '金囗木囗囗')
('金水囗囗土', '金水木囗囗')
('金水囗火囗', '囗囗木囗土')
('金水囗火土', '金水木囗土')
('金水木囗囗', '囗水木火囗')
('金水木囗土', '金水木火囗')
('金水木火囗', '囗水木火土')
('金水木火土', '金水木火土')
    全缺->[全缺]
    全有->[全有]
    有单->[有单]
    缺单->[缺单]
    缺生->[缺生]
    有生/缺克->有克->[有克]
.../txt_phone/txt $ py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概 念囗变换规则 ,各向同性囗囗变换囗囗迭代枚举囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有
('囗囗囗囗囗', '金水木火土')
('囗囗囗囗土', '金囗囗囗土')
('囗囗囗火囗', '囗囗囗火土')
('囗囗囗火土', '金囗囗火土')
('囗囗木囗囗', '囗囗木火囗')
('囗囗木囗土', '金囗木火囗')
('囗囗木火囗', '囗囗木火土')
('囗囗木火土', '金囗木火囗')
('囗水囗囗囗', '囗水木囗囗')
('囗水囗囗土', '金囗木囗土')
('囗水囗火囗', '囗水木囗土')
('囗水囗火土', '金囗木囗土')
('囗水木囗囗', '囗水木火囗')
('囗水木囗土', '金囗木火囗')
('囗水木火囗', '囗水木囗土')
('囗水木火土', '金囗木囗囗')
('金囗囗囗囗', '金水囗囗囗')
('金囗囗囗土', '金水囗囗土')
('金囗囗火囗', '囗水囗火土')
('金囗囗火土', '囗水囗火土')
('金囗木囗囗', '金水囗火囗')
('金囗木囗土', '金水囗火囗')
('金囗木火囗', '囗水囗火土')
('金囗木火土', '囗水囗火囗')
('金水囗囗囗', '金水木囗囗')
('金水囗囗土', '金囗木囗土')
('金水囗火囗', '囗水木囗土')
('金水囗火土', '囗囗木囗土')
('金水木囗囗', '金水囗火囗')
('金水木囗土', '金囗囗火囗')
('金水木火囗', '囗水囗囗土')
('金水木火土', '囗囗囗囗囗')
    全缺->全有->[[全缺]>>]
    缺单->有克->缺克->[缺克]
    有单->有生->缺生->[[缺克]^^]
.../txt_phone/txt $ py -m nn_ns.app.adhoc_argparser__main__call8module    script.五行囗十六对相反概 念囗变换规则 @打印囗囗各向同性囗囗变换囗囗格式字符串化囗囗长命名囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有
全缺:无:囗囗囗囗囗:->金水木火土/全有:全
全有:全:金水木火土:->囗囗囗囗囗/全缺:无
有金:元:金囗囗囗囗:->金水囗囗囗/有生金水:识
有水:幽:囗水囗囗囗:->囗水木囗囗/有生水木:相
有木:纹:囗囗木囗囗:->囗囗木火囗/有生木火:思
有火:易:囗囗囗火囗:->囗囗囗火土/有生火土:迹
有土:素:囗囗囗囗土:->金囗囗囗土/有生土金:工
缺金:未:囗水木火土:->金囗木囗囗/有克金木:理
缺水:信:金囗木火土:->囗水囗火囗/有克水火:迷
缺木:简:金水囗火土:->囗囗木囗土/有克木土:名
缺火:安:金水木囗土:->金囗囗火囗/有克火金:延
缺土:史:金水木火囗:->囗水囗囗土/有克土水:怪
有生金水:识:金水囗囗囗:->金水木囗囗/缺生火土:礼
有生水木:相:囗水木囗囗:->囗水木火囗/缺生土金:幼
有生木火:思:囗囗木火囗:->囗囗木火土/缺生金水:天
有生火土:迹:囗囗囗火土:->金囗囗火土/缺生水木:义
有生土金:工:金囗囗囗土:->金水囗囗土/缺生木火:固
缺生金水:天:囗囗木火土:->金囗木火囗/缺克土水:美
缺生水木:义:金囗囗火土:->囗水囗火土/缺克金木:神
缺生木火:固:金水囗囗土:->金囗木囗土/缺克水火:权
缺生火土:礼:金水木囗囗:->金水囗火囗/缺克木土:学
缺生土金:幼:囗水木火囗:->囗水木囗土/缺克火金:性
有克金木:理:金囗木囗囗:->金水囗火囗/缺克木土:学
有克木土:名:囗囗木囗土:->金囗木火囗/缺克土水:美
有克土水:怪:囗水囗囗土:->金囗木囗土/缺克水火:权
有克水火:迷:囗水囗火囗:->囗水木囗土/缺克火金:性
有克火金:延:金囗囗火囗:->囗水囗火土/缺克金木:神
缺克金木:神:囗水囗火土:->金囗木囗土/缺克水火:权
缺克木土:学:金水囗火囗:->囗水木囗土/缺克火金:性
缺克土水:美:金囗木火囗:->囗水囗火土/缺克金木:神
缺克水火:权:金囗木囗土:->金水囗火囗/缺克木土:学
缺克火金:性:囗水木囗土:->金囗木火囗/缺克土水:美
.../txt_phone/txt $



#]]]'''
__all__ = r'''
'''.split()#'''
__all__

from seed.tiny import check_type_is, fst

def _uint2bit_str(u, /):
    assert 0 <= u < 32 #2**5
    s = f'{u:0>5b}'
    return s
def _bit_str2tpl(s, /):
    return tuple(ch=='1' for ch in s)
def _bit_str5tpl(ls, /):
    return ''.join(str(int(b)) for b in ls)

_hzs = '金水木火土'
def _bit_str2hz_str(s, /):
    return ''.join(hz if ch=='1' else '囗' for ch,hz in zip(s,_hzs))
def _bit_str5hz_str(hzs, /):
    return ''.join(str(int(not hz=='囗')) for hz in hzs)
def __hz_str2tpl(hzs, /):
    return _bit_str2tpl(_bit_str5hz_str(hzs))
def __hz_str5tpl(ls, /):
    return _bit_str2hz_str(_bit_str5tpl(ls))
def _hz_str2tpl(hzs, /):
    assert len(hzs)==5
    ls = __hz_str2tpl(hzs)
    _hzs = __hz_str5tpl(ls)
    assert hzs == _hzs
    return ls
def _hz_str5tpl(ls, /):
    assert len(ls)==5
    hzs = __hz_str5tpl(ls)
    _ls = __hz_str2tpl(hzs)
    assert ls == _ls
    return hzs

def 迭代枚举囗此世我后弱强先存亡():
    for u in range(32):
        s = _uint2bit_str(u)
        ls = _bit_str2tpl(s)
        yield ls


_str4long_name2hz_str = r'''
#十六对相反概念
#无全元未幽信纹简易安素史识天相义思固迹礼工幼理神名学怪美迷权延性
#无,全;元,未;幽,信;纹,简;易,安;素,史;识,天;相,义;思,固;迹,礼;工,幼;理,神;名,学;怪,美;迷,权;延,性
#无,全;金:元,未;水:幽,信;木:纹,简;火:易,安;土:素,史;金水:识,天;水木:相,义;木火:思,固;火土:迹,礼;土金:工,幼;金木:理,神;木土:名,学;土水:怪,美;水火:迷,权;火金:延,性

全缺:无:囗囗囗囗囗
全有:全:金水木火土

#有单
有金:元:金囗囗囗囗
有水:幽:囗水囗囗囗
有木:纹:囗囗木囗囗
有火:易:囗囗囗火囗
有土:素:囗囗囗囗土

#缺单
缺金:未:囗水木火土
缺水:信:金囗木火土
缺木:简:金水囗火土
缺火:安:金水木囗土
缺土:史:金水木火囗

#有生
有生金水:识:金水囗囗囗
有生水木:相:囗水木囗囗
有生木火:思:囗囗木火囗
有生火土:迹:囗囗囗火土
有生土金:工:金囗囗囗土

#缺生
缺生金水:天:囗囗木火土
缺生水木:义:金囗囗火土
缺生木火:固:金水囗囗土
缺生火土:礼:金水木囗囗
缺生土金:幼:囗水木火囗

#有克
有克金木:理:金囗木囗囗
有克木土:名:囗囗木囗土
有克土水:怪:囗水囗囗土
有克水火:迷:囗水囗火囗
有克火金:延:金囗囗火囗

#缺克
缺克金木:神:囗水囗火土
缺克木土:学:金水囗火囗
缺克土水:美:金囗木火囗
缺克水火:权:金囗木囗土
缺克火金:性:囗水木囗土

'''#'''
_str4long_name2hz_str
def _():
    ss = _str4long_name2hz_str.split()
    ps = [s.rsplit(':', 1) for s in ss if not s.startswith('#')]
    long_name2hz_str = dict(ps)
    hz_str2long_name = dict(map(reversed, ps))
    assert len(long_name2hz_str) == 32 == len(hz_str2long_name)

    ordered_long_names = (*map(fst, ps),)
    return (ordered_long_names, long_name2hz_str, hz_str2long_name)
(ordered_long_names, long_name2hz_str, hz_str2long_name) = _()



class 囗各向同性:
    def 此世我后弱强先存亡之来世我存亡(sf, 此世我后弱强先存亡, /):
        '->来世我存亡:bool'
    def 此世我后弱强先存亡之来世我后弱强先存亡(sf, 此世我后弱强先存亡, /):
        '->来世我后弱强先存亡:[bool]{len=5}'
        (今我,今后,今弱,今强,今先) = 此世我后弱强先存亡
        ls_ls = 此世我后弱强先存亡+此世我后弱强先存亡
        out = []
        for i in range(5):
            (今我,今后,今弱,今强,今先) = ls = ls_ls[i:i+5]
            来我 = sf.此世我后弱强先存亡之来世我存亡(ls)
            check_type_is(bool, 来我)
            out.append(来我)
        来世我后弱强先存亡 = (*out,)
        return 来世我后弱强先存亡
    def 变换囗囗迭代枚举(sf, /):
        return 各向同性囗囗变换囗囗迭代枚举(sf)
    def 变换囗囗迭代枚举囗囗长命名(sf, /):
        return 各向同性囗囗变换囗囗迭代枚举囗囗长命名(sf)
    def 变换囗囗格式字符串化囗囗长命名(sf, /):
        return 各向同性囗囗变换囗囗格式字符串化囗囗长命名(sf)

def 各向同性囗囗变换囗囗迭代枚举(sf, /):
    for 此世我后弱强先存亡 in 迭代枚举囗此世我后弱强先存亡():
        来世我后弱强先存亡 = sf.此世我后弱强先存亡之来世我后弱强先存亡(此世我后弱强先存亡)
        yield _hz_str5tpl(此世我后弱强先存亡), _hz_str5tpl(来世我后弱强先存亡)
def 各向同性囗囗变换囗囗迭代枚举囗囗长命名(sf, /):
    hzs_pairs = 各向同性囗囗变换囗囗迭代枚举(sf)
    long_name_hzs_pair_pairs = 各向同性囗囗变换囗囗迭代枚举囗囗长命名囗(hzs_pairs)
    return long_name_hzs_pair_pairs
def 各向同性囗囗变换囗囗格式字符串化囗囗长命名(sf, /):
    long_name_hzs_pair_pairs = 各向同性囗囗变换囗囗迭代枚举囗囗长命名(sf)
    s = 各向同性囗囗变换囗囗格式字符串化囗囗长命名囗(long_name_hzs_pair_pairs)
    return s

def 各向同性囗囗变换囗囗迭代枚举囗囗长命名囗(hzs_pairs, /):
    it = iter(hzs_pairs)
    #hzs2hzs = dict(it)
    d = hz_str2long_name
    long_name2long_name = {d[hzs0]: d[hzs1] for hzs0, hzs1 in it}

    d = long_name2hz_str
    def f(long_name, /):
        hzs = d[long_name]
        return (long_name, hzs)


    for long_name0 in ordered_long_names:
        long_name1 = long_name2long_name[long_name0]
        yield f(long_name0), f(long_name1)

def 各向同性囗囗变换囗囗格式字符串化囗囗长命名囗(long_name_hzs_pair_pairs, /):
    def f():
        for (long_name0, hzs0), (long_name1, hzs1) in long_name_hzs_pair_pairs:
            yield f'{long_name0!s}:{hzs0!s}:->{hzs1!s}/{long_name1!s}'
    return '\n'.join(f())


class 各向同性囗囗有先则现囗无强不亡(囗各向同性):
    r'''[[[
    * 有先则现囗无强不亡
      例:[我:=木]
          [此世有水->来世有木]
          [此世缺水有金->来世缺木]
          [此世缺水缺金缺木->来世缺木]
          [此世缺水缺金有木->来世有木]
    #]]]'''
    def 此世我后弱强先存亡之来世我存亡(sf, 此世我后弱强先存亡, /):
        '->来世我存亡:bool'
        (木,火,土,金,水) = (今我,今后,今弱,今强,今先) = 此世我后弱强先存亡
        return 水 or (not 金 and 木)

class 各向同性囗囗五德终始(囗各向同性):
    r'''[[[
    * 五德终始
      例:[我:=木]
          [此世有水->来世有木]
          [此世缺水->来世缺木]
    #]]]'''
    def 此世我后弱强先存亡之来世我存亡(sf, 此世我后弱强先存亡, /):
        '->来世我存亡:bool'
        (木,火,土,金,水) = (今我,今后,今弱,今强,今先) = 此世我后弱强先存亡
        return 水

class 各向同性囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第一版囗有误(囗各向同性):
    r'''[[[第一版囗有误
    * 生则迁囗有后无先则阻生囗有强无先则杀囗囗第一版囗有误
      例:[我:=木]
          [此世有水缺木->来世有木] # 迁:水->木
          [此世有水有木->来世缺木] # 迁:木->火
              [此世有水有木缺火->来世缺木] # 迁:木->火
              [此世有水有木有火->来世缺木] # 迁:木->火 #<<==水灭火
          [此世缺水有金->来世缺木] # 杀:金灭木
          [此世缺水缺金缺木->来世缺木] # 惯性
          [此世缺水缺金有木有火->来世有木] # 阻生:木->火
          [此世缺水缺金有木缺火->来世缺木] # 迁:木->火
          ==>>
          [(此世有水缺木or此世缺水缺金有木有火) <-> 来世有木]
    #]]]'''
    def 此世我后弱强先存亡之来世我存亡(sf, 此世我后弱强先存亡, /):
        '->来世我存亡:bool'
        (木,火,土,金,水) = (今我,今后,今弱,今强,今先) = 此世我后弱强先存亡
        return (水 and not 木) or (not 水 and not 金 and 木 and 火)



class 各向同性囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第二版(囗各向同性):
    r'''[[[第二版
    * 生则迁囗有后无先则阻生囗有强无先则杀囗囗第二版
      例:[我:=木]
          [此世有水缺木->来世有木] # 迁:水->木
          [此世有水有木有火->来世有木] # 三邻杀重迁:迁:木->火;水->木 #<<==杀:水灭火
          [此世有水有木有金->来世有木] # 三邻杀重迁:迁:水->木;金->水 #<<==杀:金灭木
          [此世有水有木缺火缺金->来世缺木] # 迁:木->火;???阻生:水->木 #not-bug:不与 三邻杀重迁 相悖

          [此世缺水有金->来世缺木] # 杀:金灭木
          [此世缺水缺木->来世缺木] # 惯性
          [此世缺水缺金有木缺火->来世缺木] # 迁:木->火
          #bug:[此世缺水缺金有木有火->来世有木] # ???阻生:木->火 #bug:与 三邻杀重迁 相悖
          [此世缺水缺金有木有火有土->来世缺木] # 三邻杀重迁:迁:火->土;木->火 #<<==杀:木灭土
          [此世缺水缺金有木有火缺土->来世有木] # ???阻生:木->火 #not-bug:不与 三邻杀重迁 相悖
          ==>>
          [(此世有水缺木or此世有水有木有火or此世有水有木有金or此世缺水缺金有木有火缺土) <-> 来世有木]
    #]]]'''
    def 此世我后弱强先存亡之来世我存亡(sf, 此世我后弱强先存亡, /):
        '->来世我存亡:bool'
        (木,火,土,金,水) = (今我,今后,今弱,今强,今先) = 此世我后弱强先存亡
        return (水 and (not 木 or (火 or 金))) or (not 水 and not 金 and 木 and 火 and not 土)



class 各向同性囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有(囗各向同性):
    r'''[[[
    * 生必生囗灭必灭囗不生不灭则惯性囗全缺变全有
      ===
      ???希望如何??? ==>> ^^^^^
      ('金囗囗囗囗', '金水囗囗囗') #生而不迁#不生不灭则惯性
      ('金囗木囗囗', '金水囗火囗') #灭则亡
      ('金囗木火囗', '囗水囗火土') #生灭则反转#==>>生必生，灭必灭
      ('金水囗囗囗', '金水木囗囗')
      ('金水木囗囗', '金水囗火囗')
      ('金水木火囗', '囗水囗囗土')
      ('金水木火土', '囗囗囗囗囗')
      ('囗囗囗囗囗', '金水木火土') #全缺变全有
      ==>>
      全缺->全有->[[全缺]>>]
      缺单->有克->缺克->[缺克]
      有单->有生->缺生->[[缺克]^^]
      ==>>
      例:[我:=木]
          [此世全缺->来世有木] # 道生一
          [此世缺木有水->来世有木] # 必生:水->木
          [此世缺木缺水非全缺->来世缺木] # 惯性
          [此世有木有金->来世缺木] # 必灭:金灭木
          [此世有木缺金->来世有木] # 惯性
          ==>>
          [(此世缺木有水or此世有木缺金or此世全缺) <-> 来世有木]

    #]]]'''
    def 此世我后弱强先存亡之来世我存亡(sf, 此世我后弱强先存亡, /):
        '->来世我存亡:bool'
        (木,火,土,金,水) = (今我,今后,今弱,今强,今先) = 此世我后弱强先存亡
        return (not 木 and 水) or (木 and not 金) or not any(此世我后弱强先存亡)




各向同性囗囗变换囗囗迭代枚举囗囗有先则现囗无强不亡 = 各向同性囗囗有先则现囗无强不亡().变换囗囗迭代枚举
各向同性囗囗变换囗囗迭代枚举囗囗五德终始 = 各向同性囗囗五德终始().变换囗囗迭代枚举
各向同性囗囗变换囗囗迭代枚举囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第一版囗有误 = 各向同性囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第一版囗有误().变换囗囗迭代枚举
各向同性囗囗变换囗囗迭代枚举囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第二版 = 各向同性囗囗生则迁囗有后无先则阻生囗有强无先则杀囗囗第二版().变换囗囗迭代枚举
各向同性囗囗变换囗囗迭代枚举囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有 = 各向同性囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有().变换囗囗迭代枚举


#################################
各向同性囗囗变换囗囗迭代枚举囗囗长命名囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有 = 各向同性囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有().变换囗囗迭代枚举囗囗长命名
各向同性囗囗变换囗囗格式字符串化囗囗长命名囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有 = 各向同性囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有().变换囗囗格式字符串化囗囗长命名
打印囗囗各向同性囗囗变换囗囗格式字符串化囗囗长命名囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有 = lambda:print(各向同性囗囗生必生囗灭必灭囗不生不灭则惯性囗全缺变全有().变换囗囗格式字符串化囗囗长命名())

if __name__ == "__main__":
    import doctest
    doctest.testmod()
    #doctest: +IGNORE_EXCEPTION_DETAIL

