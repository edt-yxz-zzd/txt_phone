r'''[[[
e script/hex_repr__vs__dec_repr.py

py -m nn_ns.app.doctest_cmd script.hex_repr__vs__dec_repr:__doc__ -ff -v

from script.hex_repr__vs__dec_repr import diff_len_, cmp_len__via_diff_len_, cmp_len__via_ranges_

[[
conclusion:
  [u < 10**6] => [dec shorter]
  [u >= 10**17] => [hex shorter]
  [10**6 <= u < 10**17] => [abs diff <= 1]
    [u < 10**12] => [dec shorter or eq]
    [u >= 10**11] => [hex shorter or eq]
]]
[[
conclusion:
    =====
    [u >= 0]:
        [diff_len_ u =[def]= len(hex(u))-len(str(u))]
    =====
    [10**6 < 10**12 < 16**10 < 16**15]
    [[u < 10**6] -> [diff_len_ u > 0]]
    [[u < 10**12] -> [diff_len_ u >= 0]]
    [[u >= 16**10] -> [diff_len_ u <= 0]]
    [[u >= 16**15] -> [diff_len_ u < 0]]
    =====
    [[u < 10**11] -> [diff_len_ u >= 0]]
    [[10**11 <= u < 10**12] -> [diff_len_ u == 0]]
    [[u >= 10**12] -> [diff_len_ u <= 0]]
    =====
    [[u >= 0] -> [[diff_len_ u == 0] <-> [u <- \-/~ [10**e..<16**(e-1)] ~{e:<-[6..=10]} \-/ [10**11..<10**12] \-/ \-/~ [16**e..<10**(e+3)] ~{e:<-[10..=14]}]]]
    [[u < 10**6] -> [diff_len_ u > 0]]
    [[u >= 10**17] -> [diff_len_ u < 0]]
    =====

[(16, 4), (10, 5)
    !
, (10, 6), (16, 5)
, (10, 7), (16, 6)
, (10, 8), (16, 7)
, (10, 9), (16, 8)
, (10, 10), (16, 9)
    !
, (10, 11), (10, 12)
    !
, (16, 10), (10, 13)
, (16, 11), (10, 14)
, (16, 12), (10, 15)
, (16, 13), (10, 16)
, (16, 14), (10, 17)
    !
, (10, 18), (16, 15), (10, 19), (16, 16)]

]]


len(hex(u))-len(str(u))
log16(u)+2 == log10(u)
log16(u)+2 == log16(u)/log16(10)
log16(u)+2 == log16(u)*log10(16)
+2 == log16(u)*(log10(1.6))
u == 16**(2/(log10(1.6)))
u == 16**(2/(log10(1.6)))
628288020075.8407


>>> from math import log10
>>> 16**(2/(log10(1.6)))
628288020075.8407
>>> (2/(log10(1.6)))
9.798158778855589

>>> def f(base, e, /):
...     u = base**e
...     print('====='
...     ,(base, e)
...     )
...     return g(u)
>>> def g(u, /):
...     print(
...     hex(u)
...     ,u
...     ,len(hex(u))
...     ,len(str(u))
...     ,diff_len_(u)
...     ,sep='\n'
...     )
...     return diff_len_(u)
>>> def diff_len_(u, /):
...     return len(hex(u))-len(str(u))

#>>> for base,E in [(10,6+200), (16,10+200)]:
...   for e in range(1,E+1):
...     if f(base, e) < 0: break
>>> for base,E in [(10,20), (16,18)]:
...   for e in range(1,E+1):
...     __ = f(base, e)
===== (10, 1)
0xa
10
3
2
1
===== (10, 2)
0x64
100
4
3
1
===== (10, 3)
0x3e8
1000
5
4
1
===== (10, 4)
0x2710
10000
6
5
1
===== (10, 5)
0x186a0
100000
7
6
1
===== (10, 6)
0xf4240
1000000
7
7
0
===== (10, 7)
0x989680
10000000
8
8
0
===== (10, 8)
0x5f5e100
100000000
9
9
0
===== (10, 9)
0x3b9aca00
1000000000
10
10
0
===== (10, 10)
0x2540be400
10000000000
11
11
0
===== (10, 11)
0x174876e800
100000000000
12
12
0
===== (10, 12)
0xe8d4a51000
1000000000000
12
13
-1
===== (10, 13)
0x9184e72a000
10000000000000
13
14
-1
===== (10, 14)
0x5af3107a4000
100000000000000
14
15
-1
===== (10, 15)
0x38d7ea4c68000
1000000000000000
15
16
-1
===== (10, 16)
0x2386f26fc10000
10000000000000000
16
17
-1
===== (10, 17)
0x16345785d8a0000
100000000000000000
17
18
-1
===== (10, 18)
0xde0b6b3a7640000
1000000000000000000
17
19
-2
===== (10, 19)
0x8ac7230489e80000
10000000000000000000
18
20
-2
===== (10, 20)
0x56bc75e2d63100000
100000000000000000000
19
21
-2
===== (16, 1)
0x10
16
4
2
2
===== (16, 2)
0x100
256
5
3
2
===== (16, 3)
0x1000
4096
6
4
2
===== (16, 4)
0x10000
65536
7
5
2
===== (16, 5)
0x100000
1048576
8
7
1
===== (16, 6)
0x1000000
16777216
9
8
1
===== (16, 7)
0x10000000
268435456
10
9
1
===== (16, 8)
0x100000000
4294967296
11
10
1
===== (16, 9)
0x1000000000
68719476736
12
11
1
===== (16, 10)
0x10000000000
1099511627776
13
13
0
===== (16, 11)
0x100000000000
17592186044416
14
14
0
===== (16, 12)
0x1000000000000
281474976710656
15
15
0
===== (16, 13)
0x10000000000000
4503599627370496
16
16
0
===== (16, 14)
0x100000000000000
72057594037927936
17
17
0
===== (16, 15)
0x1000000000000000
1152921504606846976
18
19
-1
===== (16, 16)
0x10000000000000000
18446744073709551616
19
20
-1
===== (16, 17)
0x100000000000000000
295147905179352825856
20
21
-1
===== (16, 18)
0x1000000000000000000
4722366482869645213696
21
22
-1

>>> pow_ = lambda p:pow(*p)
>>> base_exp_pairs = [(base, e) for base,E in [(10,20), (16,18)]   for e in range(4,E+1)]
>>> sorted(base_exp_pairs, key=pow_)
[(10, 4), (16, 4), (10, 5), (10, 6), (16, 5), (10, 7), (16, 6), (10, 8), (16, 7), (10, 9), (16, 8), (10, 10), (16, 9), (10, 11), (10, 12), (16, 10), (10, 13), (16, 11), (10, 14), (16, 12), (10, 15), (16, 13), (10, 16), (16, 14), (10, 17), (10, 18), (16, 15), (10, 19), (16, 16), (10, 20), (16, 17), (16, 18)]


>>> base_exp_pairs = [(16, 4), (10, 5), (10, 6), (16, 5), (10, 7), (16, 6), (10, 8), (16, 7), (10, 9), (16, 8), (10, 10), (16, 9), (10, 11), (10, 12), (16, 10), (10, 13), (16, 11), (10, 14), (16, 12), (10, 15), (16, 13), (10, 16), (16, 14), (10, 17), (10, 18), (16, 15), (10, 19), (16, 16)]
>>> from itertools import pairwise
>>> for ((b,e), u), ((_b,_e), _u) in pairwise(zip(base_exp_pairs, map(pow_, base_exp_pairs))):
...     assert u < _u
...     assert diff_len_(u) == diff_len_(_u-1)
...     (b,e), (_b,_e), diff_len_(u)
((16, 4), (10, 5), 2)
((10, 5), (10, 6), 1)
((10, 6), (16, 5), 0)
((16, 5), (10, 7), 1)
((10, 7), (16, 6), 0)
((16, 6), (10, 8), 1)
((10, 8), (16, 7), 0)
((16, 7), (10, 9), 1)
((10, 9), (16, 8), 0)
((16, 8), (10, 10), 1)
((10, 10), (16, 9), 0)
((16, 9), (10, 11), 1)
((10, 11), (10, 12), 0)
((10, 12), (16, 10), -1)
((16, 10), (10, 13), 0)
((10, 13), (16, 11), -1)
((16, 11), (10, 14), 0)
((10, 14), (16, 12), -1)
((16, 12), (10, 15), 0)
((10, 15), (16, 13), -1)
((16, 13), (10, 16), 0)
((10, 16), (16, 14), -1)
((16, 14), (10, 17), 0)
((10, 17), (10, 18), -1)
((10, 18), (16, 15), -2)
((16, 15), (10, 19), -1)
((10, 19), (16, 16), -2)


#>>> from script.hex_repr__vs__dec_repr import diff_len_, cmp_len__via_diff_len_, cmp_len__via_ranges_
>>> for ((b,e), u) in (zip(base_exp_pairs, map(pow_, base_exp_pairs))):
...     for v in [u, u-1, u+1]:
...         assert cmp_len__via_ranges_(v) == cmp_len__via_diff_len_(v)

#]]]'''

from seed.data_funcs.rngs import (
    sorted_unique_ints_to_iter_nontouch_ranges
    ,make_NonTouchRanges
    ,make_Ranges
    )

def diff_len_(u, /):
    return len(hex(u))-len(str(u))

def cmp_len__via_diff_len_(u, /):
    d = diff_len_(u)
    if d:
        return -1 if d < 0 else +1
    return 0

_10_6 = 10**6
_10_11 = 10**11
_10_17 = 10**17
_rngs4zero = make_NonTouchRanges(
((10**6, 16**5)
,(10**7, 16**6)
,(10**8, 16**7)
,(10**9, 16**8)
,(10**10, 16**9)
#####
,(10**11, 10**12)
#####
,(16**10, 10**13)
,(16**11, 10**14)
,(16**12, 10**15)
,(16**13, 10**16)
,(16**14, 10**17)
))
def cmp_len__via_ranges_(u, /):
    r'''
    [[u < 10**6] -> [diff_len_ u > 0]]
    [[u >= 10**17] -> [diff_len_ u < 0]]
    [[u >= 0] -> [[diff_len_ u == 0] <-> [u <- \-/~ [10**e..<16**(e-1)] ~{e:<-[6..=10]} \-/ [10**11..<10**12] \-/ \-/~ [16**e..<10**(e+3)] ~{e:<-[10..=14]}]]]
    '''#'''
    assert u >= 0
    if u >= _10_17:
        return -1
    if u < _10_6:
        return +1
    if u in _rngs4zero:
        return 0
    return +1 if u < _10_11 else -1


#from script.hex_repr__vs__dec_repr import diff_len_, cmp_len__via_diff_len_, cmp_len__via_ranges_
