#__all__:goto
r'''[[[
e script/模变换序号.py
view others/数学/有递增趋势的非递增序列.txt
    比如框架:模变换/加密/散列{序号}
      比如: [f(n)! %n | [n :<- [1..]]]
          比如: [factorial_(floor_sqrt_(n)//e) %n | [n :<- [1..]]]
          比如: [factorial_(floor_sqrt_(floor_sqrt_(n//3))) %n | [n :<- [1..]]]
          比如: [II[n*144//233..<n*144//233+n.bit_length()] %n | [n :<- [1..]]]


script.模变换序号
py -m nn_ns.app.debug_cmd   script.模变换序号 -x # -off_defs
py -m nn_ns.app.doctest_cmd script.模变换序号:__doc__ -ht # -ff -df


===
py_adhoc_call   script.模变换序号   @list.100:iter_modN_factorial_floor_divE_floor_sqrtN_ -exact_E
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]

===
py_adhoc_call   script.模变换序号   @list.100:iter_modN_factorial_floor_sqrt_sqrt_div3_N_
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_factorial_floor_sqrt_sqrt_div3_N_ --begin='10**4'
[5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_factorial_floor_sqrt_sqrt_div3_N_ --begin='10**6'
[360000, 901847, 524478, 505226, 121436, 650475, 369712, 556545, 488376, 442628]






===
===
===
===
===
===
py_adhoc_call   script.模变换序号   @list.100:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_
[0, 0, 2, 0, 0, 0, 1, 0, 6, 4, 10, 0, 3, 10, 0, 8, 13, 0, 6, 0, 0, 16, 14, 0, 10, 24, 18, 0, 22, 0, 6, 0, 0, 28, 0, 0, 22, 22, 0, 0, 12, 0, 2, 16, 0, 44, 32, 0, 14, 0, 0, 48, 17, 0, 0, 0, 0, 10, 35, 0, 6, 20, 0, 0, 35, 0, 23, 52, 0, 0, 44, 0, 60, 2, 0, 60, 28, 0, 12, 0, 0, 6, 7, 0, 25, 18, 0, 0, 7, 0, 14, 4, 0, 78, 5, 0, 90, 84, 0, 20]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**4'
[2000, 5947, 7518, 6223, 1476, 1380, 3558, 6838, 5544, 8552]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**6'
[800000, 423787, 708414, 254342, 786096, 970170, 883988, 804460, 0, 27897]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**8'
[0, 12685825, 74919090, 8422014, 57028036, 72688350, 39007360, 43022704, 80523720, 96907072]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**10'
[2400000000, 6170531204, 4719027096, 9623783946, 2676971204, 4796562480, 9513687246, 2985598283, 5758766136, 2481876906]


py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='17401'
[3174, 12628, 9558, 6412, 5565, 13446, 2184, 0, 7728, 8190]



===
+coprime
py_adhoc_call   script.模变换序号   @list.100:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ +coprime
[0, 1, 2, 1, 2, 1, 1, 1, 1, 9, 10, 1, 3, 13, 7, 9, 13, 5, 6, 17, 16, 1, 14, 17, 4, 17, 7, 27, 22, 1, 6, 31, 4, 19, 12, 35, 22, 35, 16, 27, 12, 25, 2, 17, 37, 9, 32, 23, 27, 7, 41, 49, 17, 17, 31, 27, 8, 1, 35, 29, 6, 29, 62, 61, 4, 7, 23, 55, 34, 19, 44, 43, 60, 3, 44, 41, 23, 47, 12, 23, 31, 11, 7, 73, 16, 83, 73, 47, 7, 77, 55, 45, 41, 61, 53, 55, 90, 93, 56, 99]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**4' +coprime
[6667, 5947, 5393, 4608, 6775, 5348, 2219, 6838, 1439, 8552]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**6' +coprime
[314049, 423787, 697993, 254342, 349541, 661954, 779451, 133688, 335375, 27897]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**8' +coprime
[49890283, 81195354, 26954341, 44516470, 50192461, 40133206, 46850513, 43022704, 73266503, 96907072]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**10' +coprime
[1017123103, 6170531204, 8292500459, 1575266195, 1205752359, 9590575723, 6874084767, 2674486816, 564877541, 2481876906]





===
+coprime +size_be_N_mod_bit_length
py_adhoc_call   script.模变换序号   @list.100:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ +coprime +size_be_N_mod_bit_length
[1, 1, 1, 3, 2, 1, 4, 1, 5, 3, 6, 1, 8, 1, 7, 9, 8, 1, 8, 1, 13, 19, 2, 13, 1, 17, 2, 9, 19, 1, 19, 15, 16, 33, 33, 1, 22, 5, 20, 9, 25, 1, 26, 35, 17, 33, 12, 1, 30, 23, 40, 47, 42, 1, 34, 43, 44, 47, 21, 1, 37, 49, 13, 39, 32, 31, 15, 37, 41, 1, 43, 71, 54, 9, 28, 53, 1, 49, 61, 47, 73, 81, 54, 1, 52, 77, 28, 65, 33, 83, 1, 57, 74, 9, 59, 59, 76, 1, 61, 43]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**4' +coprime +size_be_N_mod_bit_length
[6189, 4673, 8819, 3268, 4817, 154, 4515, 118, 6085, 7798]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**6' +coprime +size_be_N_mod_bit_length
[1, 618026, 316979, 719263, 272537, 132136, 953371, 419232, 246917, 900459]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**8' +coprime +size_be_N_mod_bit_length
[77350663, 56150245, 88296875, 48087817, 36493965, 33455473, 1265049, 85164399, 1, 61802580]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**10' +coprime +size_be_N_mod_bit_length
[4632430143, 9113976488, 8621052379, 1098901852, 9456824891, 2978682148, 5038622127, 5235152519, 4439226989, 6237201628]



===
+coprime +size_be_N_mod_bit_length --offset4size=3
py_adhoc_call   script.模变换序号   @list.100:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ +coprime +size_be_N_mod_bit_length --offset4size=3
[0, 1, 1, 1, 2, 1, 1, 3, 1, 3, 1, 5, 3, 11, 11, 9, 13, 17, 17, 19, 5, 1, 13, 13, 21, 9, 7, 27, 25, 13, 7, 11, 4, 15, 4, 7, 15, 31, 16, 27, 14, 5, 16, 23, 37, 1, 41, 25, 22, 49, 41, 15, 19, 13, 49, 53, 8, 47, 21, 11, 44, 55, 62, 49, 34, 25, 23, 49, 47, 31, 9, 23, 57, 3, 46, 11, 72, 67, 27, 41, 31, 59, 50, 37, 64, 47, 46, 47, 78, 89, 41, 33, 52, 75, 53, 25, 86, 75, 40, 19]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**4' +coprime +size_be_N_mod_bit_length --offset4size=3
[79, 2285, 6781, 1586, 2891, 1984, 6295, 6838, 3493, 6330]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**6' +coprime +size_be_N_mod_bit_length --offset4size=3
[766273, 634169, 343121, 896137, 783585, 968671, 967277, 177448, 664931, 165543]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**8' +coprime +size_be_N_mod_bit_length --offset4size=3
[75999767, 33319702, 43438601, 40930295, 94670371, 40133206, 87071641, 6146076, 75063119, 87066872]

py_adhoc_call   script.模变换序号   @list.10:iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_ --begin='10**10' +coprime +size_be_N_mod_bit_length --offset4size=3
[9608887469, 1628131670, 2738376223, 2536751015, 6389579809, 5401916428, 3002061971, 3452203113, 8779834903, 9050229905]



===
>>> from seed.iters.apply_may_args4islice_ import list_islice_# show_islice_, stable_show_islice_, stable_list_islice_
>>> def f(iter_modN_xxx_, **kwds):
...     for sz, begin in [(100, 1), (10, 10**2), (10, 10**3), (10, 10**4), (10, 10**5), (10, 10**6), (10, 10**7), (10, 10**8), (10, 10**9), (10, 10**10)]:
...         us = list_islice_(sz, iter_modN_xxx_(begin=begin, **kwds))
...         ss = sorted({len(str(u)) for u in us})
...         print((sz, begin, us, ss))

===
===
#>>> f(iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_)
#>>> f(iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_, coprime=True)
#>>> f(iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_, coprime=True, size_be_N_mod_bit_length=True)
#>>> f(iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_, coprime=True, size_be_N_mod_bit_length=True, offset4size=3)




===
===
#>>> f(iter_modN_factorial_bit_lengthN_)
#>>> f(iter_modN_factorial_bit_lengthN_, coprime=True)
#>>> f(iter_modN_factorial_bit_lengthN_, coprime=True, offset4size=3)

===
===
#>>> f(iter_modN_factorial_coprimes_until_beyondN_)
#>>> f(iter_modN_factorial_coprimes_until_beyondN_, inverse=True)


===
===
===


>>> f(iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_)
(100, 1, [0, 0, 2, 0, 0, 0, 1, 0, 6, 4, 10, 0, 3, 10, 0, 8, 13, 0, 6, 0, 0, 16, 14, 0, 10, 24, 18, 0, 22, 0, 6, 0, 0, 28, 0, 0, 22, 22, 0, 0, 12, 0, 2, 16, 0, 44, 32, 0, 14, 0, 0, 48, 17, 0, 0, 0, 0, 10, 35, 0, 6, 20, 0, 0, 35, 0, 23, 52, 0, 0, 44, 0, 60, 2, 0, 60, 28, 0, 12, 0, 0, 6, 7, 0, 25, 18, 0, 0, 7, 0, 14, 4, 0, 78, 5, 0, 90, 84, 0, 20], [1, 2])
(10, 100, [20, 5, 0, 6, 0, 0, 14, 56, 0, 54], [1, 2])
(10, 1000, [0, 0, 708, 337, 532, 75, 458, 342, 0, 82], [1, 2, 3])
(10, 10000, [2000, 5947, 7518, 6223, 1476, 1380, 3558, 6838, 5544, 8552], [4])
(10, 100000, [8000, 71236, 61530, 65186, 47056, 1695, 93558, 59410, 49896, 8918], [4, 5])
(10, 1000000, [800000, 423787, 708414, 254342, 786096, 970170, 883988, 804460, 0, 27897], [1, 5, 6])
(10, 10000000, [4000000, 157696, 8381040, 3704922, 381444, 3412785, 7268642, 6616595, 1383624, 5718651], [6, 7])
(10, 100000000, [0, 12685825, 74919090, 8422014, 57028036, 72688350, 39007360, 43022704, 80523720, 96907072], [1, 7, 8])
(10, 1000000000, [880000000, 436467031, 123575808, 775950885, 102650060, 713799165, 441870054, 39324731, 117931968, 857451766], [8, 9])
(10, 10000000000, [2400000000, 6170531204, 4719027096, 9623783946, 2676971204, 4796562480, 9513687246, 2985598283, 5758766136, 2481876906], [10])

>>> f(iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_, coprime=True)
(100, 1, [0, 1, 2, 1, 2, 1, 1, 1, 1, 9, 10, 1, 3, 13, 7, 9, 13, 5, 6, 17, 16, 1, 14, 17, 4, 17, 7, 27, 22, 1, 6, 31, 4, 19, 12, 35, 22, 35, 16, 27, 12, 25, 2, 17, 37, 9, 32, 23, 27, 7, 41, 49, 17, 17, 31, 27, 8, 1, 35, 29, 6, 29, 62, 61, 4, 7, 23, 55, 34, 19, 44, 43, 60, 3, 44, 41, 23, 47, 12, 23, 31, 11, 7, 73, 16, 83, 73, 47, 7, 77, 55, 45, 41, 61, 53, 55, 90, 93, 56, 99], [1, 2])
(10, 100, [99, 5, 49, 6, 73, 68, 41, 56, 5, 54], [1, 2])
(10, 1000, [659, 212, 29, 337, 103, 491, 955, 629, 551, 82], [2, 3])
(10, 10000, [6667, 5947, 5393, 4608, 6775, 5348, 2219, 6838, 1439, 8552], [4])
(10, 100000, [59483, 27979, 10597, 65186, 73789, 45628, 21869, 59410, 85063, 94883], [5])
(10, 1000000, [314049, 423787, 697993, 254342, 349541, 661954, 779451, 133688, 335375, 27897], [5, 6])
(10, 10000000, [9622441, 1386409, 4810987, 5725396, 4917285, 9520711, 3085209, 6616595, 4485529, 7848951], [7])
(10, 100000000, [49890283, 81195354, 26954341, 44516470, 50192461, 40133206, 46850513, 43022704, 73266503, 96907072], [8])
(10, 1000000000, [718003407, 419456438, 773025157, 602512469, 80661577, 640540442, 655667753, 39324731, 713991961, 857451766], [8, 9])
(10, 10000000000, [1017123103, 6170531204, 8292500459, 1575266195, 1205752359, 9590575723, 6874084767, 2674486816, 564877541, 2481876906], [9, 10])

>>> f(iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_, coprime=True, size_be_N_mod_bit_length=True)
(100, 1, [1, 1, 1, 3, 2, 1, 4, 1, 5, 3, 6, 1, 8, 1, 7, 9, 8, 1, 8, 1, 13, 19, 2, 13, 1, 17, 2, 9, 19, 1, 19, 15, 16, 33, 33, 1, 22, 5, 20, 9, 25, 1, 26, 35, 17, 33, 12, 1, 30, 23, 40, 47, 42, 1, 34, 43, 44, 47, 21, 1, 37, 49, 13, 39, 32, 31, 15, 37, 41, 1, 43, 71, 54, 9, 28, 53, 1, 49, 61, 47, 73, 81, 54, 1, 52, 77, 28, 65, 33, 83, 1, 57, 74, 9, 59, 59, 76, 1, 61, 43], [1, 2])
(10, 100, [43, 9, 79, 76, 47, 1, 65, 35, 41, 15], [1, 2])
(10, 1000, [1, 618, 869, 538, 617, 137, 367, 292, 61, 610], [1, 2, 3])
(10, 10000, [6189, 4673, 8819, 3268, 4817, 154, 4515, 118, 6085, 7798], [3, 4])
(10, 100000, [83459, 15042, 90487, 74202, 11535, 27698, 69373, 6914, 26861, 21285], [4, 5])
(10, 1000000, [1, 618026, 316979, 719263, 272537, 132136, 953371, 419232, 246917, 900459], [1, 6])
(10, 10000000, [4796561, 3568003, 7599797, 2661238, 814969, 4418207, 3596183, 5827205, 1, 6180263], [1, 6, 7])
(10, 100000000, [77350663, 56150245, 88296875, 48087817, 36493965, 33455473, 1265049, 85164399, 1, 61802580], [1, 7, 8])
(10, 1000000000, [315460743, 508335055, 619618501, 827577824, 693854801, 34665292, 294863623, 342131685, 610894351, 299086263], [8, 9])
(10, 10000000000, [4632430143, 9113976488, 8621052379, 1098901852, 9456824891, 2978682148, 5038622127, 5235152519, 4439226989, 6237201628], [10])

>>> f(iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_, coprime=True, size_be_N_mod_bit_length=True, offset4size=3)
(100, 1, [0, 1, 1, 1, 2, 1, 1, 3, 1, 3, 1, 5, 3, 11, 11, 9, 13, 17, 17, 19, 5, 1, 13, 13, 21, 9, 7, 27, 25, 13, 7, 11, 4, 15, 4, 7, 15, 31, 16, 27, 14, 5, 16, 23, 37, 1, 41, 25, 22, 49, 41, 15, 19, 13, 49, 53, 8, 47, 21, 11, 44, 55, 62, 49, 34, 25, 23, 49, 47, 31, 9, 23, 57, 3, 46, 11, 72, 67, 27, 41, 31, 59, 50, 37, 64, 47, 46, 47, 78, 89, 41, 33, 52, 75, 53, 25, 86, 75, 40, 19], [1, 2])
(10, 100, [19, 58, 49, 8, 3, 104, 101, 69, 89, 54], [1, 2, 3])
(10, 1000, [577, 659, 379, 342, 591, 811, 817, 629, 229, 878], [3])
(10, 10000, [79, 2285, 6781, 1586, 2891, 1984, 6295, 6838, 3493, 6330], [2, 4])
(10, 100000, [1043, 90683, 81763, 45403, 10737, 7183, 72663, 47599, 85063, 87950], [4, 5])
(10, 1000000, [766273, 634169, 343121, 896137, 783585, 968671, 967277, 177448, 664931, 165543], [6])
(10, 10000000, [9971383, 8140804, 1251341, 1568291, 5946237, 9520711, 9679481, 2246795, 4564867, 2855984], [7])
(10, 100000000, [75999767, 33319702, 43438601, 40930295, 94670371, 40133206, 87071641, 6146076, 75063119, 87066872], [7, 8])
(10, 1000000000, [772440089, 543851475, 35007137, 491242011, 244421417, 211316999, 855990837, 70750886, 358443203, 783869454], [8, 9])
(10, 10000000000, [9608887469, 1628131670, 2738376223, 2536751015, 6389579809, 5401916428, 3002061971, 3452203113, 8779834903, 9050229905], [10])

===
===
>>> f(iter_modN_factorial_bit_lengthN_)
(100, 1, [0, 0, 2, 2, 1, 0, 6, 0, 6, 4, 2, 0, 11, 10, 9, 8, 1, 12, 6, 0, 15, 10, 5, 0, 20, 16, 12, 8, 4, 0, 27, 16, 27, 6, 20, 0, 17, 36, 18, 0, 23, 6, 32, 16, 0, 30, 15, 0, 34, 20, 6, 44, 31, 18, 5, 48, 36, 24, 12, 0, 49, 38, 27, 48, 35, 24, 15, 8, 3, 0, 70, 0, 3, 8, 15, 24, 35, 48, 63, 0, 18, 38, 60, 0, 25, 52, 81, 24, 56, 0, 35, 72, 18, 58, 5, 48, 93, 42, 90, 40], [1, 2])
(10, 100, [40, 91, 42, 96, 48, 0, 58, 11, 72, 26], [1, 2])
(10, 1000, [800, 175, 558, 949, 344, 750, 158, 579, 0, 436], [1, 3])
(10, 10000, [1200, 4243, 9030, 5558, 3828, 3840, 5594, 9090, 4320, 1290], [4])
(10, 100000, [96000, 57288, 89712, 93269, 67956, 13770, 30714, 18781, 77976, 8281], [4, 5])
(10, 1000000, [640000, 64723, 355236, 511524, 533572, 421365, 174888, 794133, 279072, 629705], [5, 6])
(10, 10000000, [9360000, 519453, 643218, 9727575, 7768796, 4763160, 706944, 5596432, 9427896, 2197604], [6, 7])
(10, 100000000, [68000000, 71412546, 48649842, 99646557, 24337352, 22656900, 94539870, 39920917, 58734720, 50915939], [8])
(10, 1000000000, [480000000, 280910630, 799854126, 35238967, 985473644, 648966630, 24126410, 109361473, 903080304, 403691370], [8, 9])
(10, 10000000000, [3520000000, 8858947646, 3218581314, 4827504213, 1914319548, 2707630530, 5436040368, 8328152271, 9612569448, 7517895108], [10])

>>> f(iter_modN_factorial_bit_lengthN_, coprime=True)
(100, 1, [0, 1, 2, 3, 1, 5, 6, 1, 4, 9, 2, 1, 11, 9, 11, 1, 1, 1, 6, 19, 5, 21, 5, 13, 19, 9, 10, 1, 4, 7, 27, 27, 29, 25, 32, 17, 17, 21, 17, 27, 23, 29, 32, 9, 23, 45, 15, 29, 34, 27, 47, 47, 31, 35, 18, 41, 17, 13, 12, 43, 49, 41, 50, 31, 4, 5, 15, 19, 44, 53, 70, 71, 3, 11, 14, 7, 62, 61, 63, 19, 44, 81, 60, 79, 74, 29, 41, 3, 56, 89, 27, 79, 80, 57, 84, 71, 93, 83, 26, 59], [1, 2])
(10, 100, [59, 91, 101, 96, 29, 62, 91, 11, 71, 26], [2, 3])
(10, 1000, [243, 586, 629, 949, 595, 2, 131, 579, 941, 436], [1, 3])
(10, 10000, [187, 4243, 6899, 5854, 7839, 4858, 7691, 9090, 2021, 1290], [3, 4])
(10, 100000, [83481, 66471, 74231, 93269, 33569, 74926, 75539, 18781, 39961, 68167], [5])
(10, 1000000, [439949, 64723, 602149, 511524, 623809, 542786, 98431, 794133, 971311, 629705], [5, 6])
(10, 10000000, [7560361, 5031589, 5313527, 3322255, 7246549, 5610976, 7737887, 5596432, 4853809, 1953917], [7])
(10, 100000000, [99310641, 58797134, 4204159, 99646557, 47754157, 92076946, 25055963, 39920917, 73863899, 50915939], [7, 8])
(10, 1000000000, [866608907, 387472271, 906441197, 177930782, 111195655, 843570563, 54635251, 109361473, 633274769, 403691370], [8, 9])
(10, 10000000000, [660152163, 8858947646, 1704132401, 3526467683, 2935525007, 6829684877, 1920741263, 4847188233, 3768673853, 7517895108], [9, 10])

>>> f(iter_modN_factorial_bit_lengthN_, coprime=True, offset4size=3)
(100, 1, [0, 1, 1, 3, 3, 5, 6, 7, 8, 9, 2, 11, 9, 13, 14, 1, 13, 13, 2, 1, 10, 7, 1, 1, 1, 25, 25, 11, 10, 1, 20, 1, 13, 9, 6, 1, 21, 37, 11, 21, 30, 29, 3, 1, 16, 43, 40, 25, 29, 41, 43, 7, 42, 1, 42, 13, 28, 1, 30, 31, 52, 11, 55, 51, 7, 43, 13, 19, 44, 27, 61, 29, 43, 15, 62, 17, 47, 47, 14, 43, 41, 75, 40, 17, 22, 67, 41, 21, 3, 37, 67, 35, 14, 87, 42, 53, 30, 89, 76, 43], [1, 2])
(10, 100, [43, 72, 67, 7, 43, 97, 41, 2, 29, 81], [1, 2])
(10, 1000, [339, 492, 805, 615, 1, 133, 393, 662, 211, 507], [1, 3])
(10, 10000, [3481, 9710, 4459, 4950, 6629, 8744, 2079, 1258, 7633, 8475], [4])
(10, 100000, [39949, 33276, 41917, 40823, 63311, 70256, 45729, 53052, 42817, 45555], [5])
(10, 1000000, [382379, 745911, 572669, 437719, 689059, 223469, 697647, 398192, 377197, 185111], [6])
(10, 10000000, [9310641, 2546205, 796955, 7096771, 1204563, 5278283, 9304579, 7312853, 5846435, 6157992], [6, 7])
(10, 100000000, [66608907, 58688123, 6060101, 90055701, 87606689, 39511058, 75918231, 73470052, 69152309, 12162413], [7, 8])
(10, 1000000000, [140483761, 322355086, 416978579, 426777764, 195762043, 605581306, 612441663, 57155068, 394633217, 240569385], [8, 9])
(10, 10000000000, [1796027919, 4139215220, 5507455459, 6500930556, 3001258461, 6834179458, 8935250761, 5279429790, 1848457399, 4269619528], [10])


===
===
>>> f(iter_modN_factorial_coprimes_until_beyondN_)
(100, 1, [0, 1, 2, 3, 1, 5, 3, 7, 4, 1, 2, 11, 11, 1, 11, 9, 7, 17, 5, 1, 19, 17, 1, 11, 19, 1, 13, 23, 4, 17, 27, 9, 7, 3, 4, 25, 9, 29, 1, 29, 38, 13, 34, 17, 11, 13, 26, 1, 22, 39, 25, 1, 14, 7, 34, 23, 52, 47, 2, 17, 59, 43, 5, 41, 14, 59, 53, 37, 4, 17, 49, 25, 47, 31, 73, 29, 43, 73, 41, 29, 37, 23, 37, 43, 59, 19, 19, 17, 31, 11, 29, 13, 1, 11, 49, 1, 23, 37, 82, 89], [1, 2])
(10, 100, [89, 19, 79, 17, 1, 74, 97, 13, 61, 11], [1, 2])
(10, 1000, [79, 755, 997, 25, 355, 908, 335, 5, 59, 1004], [1, 2, 3, 4])
(10, 10000, [7027, 316, 5069, 1825, 391, 4034, 389, 292, 5021, 284], [3, 4])
(10, 100000, [59459, 62877, 30941, 62871, 35131, 96856, 35129, 62859, 16487, 18355], [5])
(10, 1000000, [729721, 628797, 616613, 628791, 27017, 350266, 922751, 628779, 877859, 628773], [5, 6])
(10, 10000000, [3324141, 3545596, 7182139, 9916791, 3223781, 4350331, 4459407, 9916779, 7182121, 9916773], [7])
(10, 100000000, [83324141, 79001596, 18792347, 79001588, 57639235, 40545742, 54729039, 79001572, 29553553, 79001564], [8])
(10, 1000000000, [216455243, 492991999, 957055073, 227020782, 749310523, 635158508, 749310497, 227020758, 851007851, 227020746], [9])
(10, 10000000000, [3844291561, 7178291192, 6957055121, 3343615997, 3749310571, 1973487566, 3749310569, 7178291144, 6957055109, 7178291128], [10])

>>> f(iter_modN_factorial_coprimes_until_beyondN_, inverse=True)
(100, 1, [0, 1, 2, 3, 1, 5, 5, 7, 7, 1, 6, 11, 6, 1, 11, 9, 5, 17, 4, 1, 10, 13, 1, 11, 4, 1, 25, 11, 22, 23, 23, 25, 19, 23, 9, 13, 33, 21, 1, 29, 27, 13, 19, 13, 41, 39, 38, 1, 29, 9, 49, 1, 19, 31, 34, 39, 34, 21, 30, 53, 30, 13, 38, 25, 14, 47, 43, 57, 52, 33, 29, 49, 14, 43, 37, 21, 43, 31, 27, 69, 46, 25, 9, 43, 49, 77, 55, 57, 23, 41, 22, 85, 1, 77, 64, 1, 38, 53, 64, 9], [1, 2])
(10, 100, [9, 16, 31, 97, 1, 44, 47, 33, 85, 10], [1, 2])
(10, 1000, [519, 118, 601, 321, 823, 632, 1003, 403, 803, 807], [3, 4])
(10, 10000, [9963, 8830, 809, 5799, 1791, 2939, 9543, 2913, 9125, 3771], [3, 4])
(10, 100000, [52939, 74295, 8135, 94991, 35611, 15466, 90825, 8989, 19799, 50296], [4, 5])
(10, 1000000, [860681, 346120, 932303, 404910, 941337, 161401, 91205, 414150, 833939, 748439], [5, 6])
(10, 10000000, [1231461, 1244121, 9768589, 3055690, 8144809, 4295296, 9997555, 9124700, 2129569, 7480544], [7])
(10, 100000000, [71231461, 32329913, 97176725, 60657280, 45760283, 1070803, 97483309, 61457932, 4719169, 41905983], [7, 8])
(10, 1000000000, [550923107, 544967421, 147439457, 372787022, 120598495, 516354347, 464787913, 490841026, 730096235, 123486711], [9])
(10, 10000000000, [8501886041, 7594148944, 1916046389, 6070070763, 696395431, 8320590776, 4087163263, 3843364583, 5309092517, 4081182718], [9, 10])




===
===
===




]]]'''#'''
__all__ = r'''
iter_modN_factorial_floor_divE_floor_sqrtN_
iter_modN_factorial_floor_sqrt_sqrt_div3_N_
iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_
iter_modN_factorial_bit_lengthN_
iter_modN_factorial_coprimes_until_beyondN_



n2modN_factorial_floor_sqrt_sqrt_div3_N_
n2modN_factorial_floor_divE_floor_sqrtN__inexact_E_
n2modN_II_bit_lengthN_offset_floordiv233_mul144_N_
n2modN_factorial_bit_lengthN_
n2modN_factorial_coprimes_until_beyondN_
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from math import factorial as factorial_, isqrt as floor_sqrt_, e, floor as floor_
from itertools import count as count_, islice
from functools import partial


from seed.math.II import II, II_mod, factorial_mod_
from seed.math.gcd import gcd, gcd_many, are_coprime
from seed.math.continued_fraction.continued_fraction_fold import inv_mod_
___end_mark_of_excluded_global_names__0___ = ...

def _iter(begin, n2r, /, **kwds):
    if kwds:
        n2r = partial(n2r, **kwds)
    return map(n2r, count_(begin))


def n2modN_factorial_floor_sqrt_sqrt_div3_N_(n, /):
    return factorial_mod_(n, floor_sqrt_(floor_sqrt_(n//3)))

def iter_modN_factorial_floor_sqrt_sqrt_div3_N_(*, begin=1):
    return _iter(begin, n2modN_factorial_floor_sqrt_sqrt_div3_N_)
    #.for n in count_(begin):
    #.    #yield factorial_(floor_sqrt_(floor_sqrt_(n//3))) %n
    #.    yield factorial_mod_(n, floor_sqrt_(floor_sqrt_(n//3)))

def n2modN_factorial_floor_divE_floor_sqrtN__inexact_E_(n, /):
    return factorial_mod_(n, floor_(floor_sqrt_(n)//e))

def iter_modN_factorial_floor_divE_floor_sqrtN_(*, exact_E, begin=1):
    if exact_E:raise NotImplementedError
    return _iter(begin, n2modN_factorial_floor_divE_floor_sqrtN__inexact_E_)
    #.for n in count_(begin):
    #.    #yield factorial_(floor_(floor_sqrt_(n)//e)) %n
    #.    yield factorial_mod_(n, floor_(floor_sqrt_(n)//e))


def n2modN_II_bit_lengthN_offset_floordiv233_mul144_N_(n, /, *, coprime=False, size_be_N_mod_bit_length=False, offset4size=0):
    offset = n*144//233
    sz = n.bit_length()
    if size_be_N_mod_bit_length:
        sz = n %sz
    sz += offset4size
    it = range(offset, offset+sz) if not coprime else islice(filter(partial(are_coprime, n), count_(offset)), sz)
    return II_mod(n, it)
def iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_(*, begin=1, coprime=False, size_be_N_mod_bit_length=False, offset4size=0):
    return _iter(begin, n2modN_II_bit_lengthN_offset_floordiv233_mul144_N_, coprime=coprime, size_be_N_mod_bit_length=size_be_N_mod_bit_length, offset4size=offset4size)



def n2modN_factorial_bit_lengthN_(n, /, *, coprime=False, offset4size=0):
    offset = 1
    sz = n.bit_length()
    sz += offset4size
    it = range(offset, offset+sz) if not coprime else islice(filter(partial(are_coprime, n), count_(offset)), sz)
    return II_mod(n, it)
def iter_modN_factorial_bit_lengthN_(*, begin=1, coprime=False, offset4size=0):
    return _iter(begin, n2modN_factorial_bit_lengthN_, coprime=coprime, offset4size=offset4size)






def n2modN_factorial_coprimes_until_beyondN_(n, /, *, inverse=False):
    acc = 1
    for k in filter(partial(are_coprime, n), count_(2)):
        acc *= k
        if acc > n:break
    acc %= n
    return acc if not inverse else inv_mod_(n, acc)
def iter_modN_factorial_coprimes_until_beyondN_(*, begin=1, inverse=False):
    return _iter(begin, n2modN_factorial_coprimes_until_beyondN_, inverse=inverse)


__all__
from script.模变换序号 import iter_modN_factorial_floor_divE_floor_sqrtN_, iter_modN_factorial_floor_sqrt_sqrt_div3_N_, iter_modN_II_bit_lengthN_offset_floordiv233_mul144_N_
from script.模变换序号 import *
