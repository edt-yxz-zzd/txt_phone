#__all__:goto
r'''[[[
e script/素数链.py
view others/数学/有递增趋势的非递增序列.txt
    ++序列纟链长纟扩展幺链素数
        枚举冫链长纟扩展幺链素数扌

mv -iv script/素数链.py  'script/[20240706]素数链.py'
cp -iv 'script/[20240706]素数链.py' ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py
e ../../python3_src/seed/math/primes__inductive_generated__almost_smooth.py

[[
素数链:(2**e*(odd_p|1)+1)
[n :: int]:
    [欤幺链素数扌(n) =[def]= [[n >= 3][is_prime(n)][(ez4n,h4n) :=> [ez4n,h4n :: uint][2**(ez4n+1)*(h4n*2+1)+1==n]][odd4n := (h4n*2+1)][[odd4n==1]or欤幺链素数扌(odd4n)]]]
[n :: int][ps :: {odd_prime}]:
    [欤扩展幺链素数扌(ps;n) =[def]= [[n >= 3][is_prime(n)][(ez4n,h4n) :=> [ez4n,hr4n :: uint][p2ep4n :: {uint:uint}][p2ep4n.keys()==set(ps)][ex := II__p2e_(p2ep4n)][ex*2**(ez4n+1)*(hr4n*2+1)+1==n]][rigid4n := (hr4n*2+1)][[rigid4n==1]or欤扩展幺链素数扌(rigid4n)]]]
]]









py -m script.素数链
py -m nn_ns.app.debug_cmd   script.素数链 -x
py -m nn_ns.app.doctest_cmd script.素数链:__doc__ -ht
from script.素数链 import *





























[[[
共978行:
py_adhoc_call   script.素数链   ,枚举冫幺链素数牜小于六十四比特扌
py_adhoc_call { +lineno }  script.素数链   ,枚举冫幺链素数牜小于六十四比特扌
===
:枚举冫幺链素数牜小于六十四比特扌:begin
1:(3, 1)
2:(5, 1)
3:(17, 1)
4:(257, 1)
5:(65537, 1)
6:(7, 2)
7:(13, 2)
8:(97, 2)
9:(193, 2)
10:(769, 2)
11:(12289, 2)
12:(786433, 2)
13:(3221225473, 2)
14:(206158430209, 2)
15:(6597069766657, 2)
16:(11, 2)
17:(41, 2)
18:(641, 2)
19:(40961, 2)
20:(163841, 2)
21:(167772161, 2)
22:(2748779069441, 2)
23:(180143985094819841, 2)
24:(137, 2)
25:(557057, 2)
26:(2281701377, 2)
27:(38280596832649217, 2)
28:(29, 3)
29:(113, 3)
30:(449, 3)
31:(114689, 3)
32:(7340033, 3)
33:(469762049, 3)
34:(7881299347898369, 3)
35:(31525197391593473, 3)
36:(53, 3)
37:(3329, 3)
38:(13313, 3)
39:(13631489, 3)
40:(3489660929, 3)
41:(389, 3)
42:(1553, 3)
43:(1589249, 3)
44:(101711873, 3)
45:(106652627894273, 3)
46:(773, 3)
47:(3089, 3)
48:(49409, 3)
49:(790529, 3)
50:(3238002689, 3)
51:(51808043009, 3)
52:(207232172033, 3)
53:(12599297, 3)
54:(54113564272623617, 3)
55:(49157, 3)
56:(51543801857, 3)
57:(824700829697, 3)
58:(54047593574957057, 3)
59:(12582929, 3)
60:(3221229569, 3)
61:(12884901893, 3)
62:(52776558149633, 3)
63:(824633720837, 3)
64:(6755399441056769, 3)
65:(108086391056908289, 3)
66:(432345564227633153, 3)
67:(6917529027642130433, 3)
68:(23, 3)
69:(89, 3)
70:(353, 3)
71:(1409, 3)
72:(5767169, 3)
73:(23068673, 3)
74:(96757023244289, 3)
75:(83, 3)
76:(83969, 3)
77:(21495809, 3)
78:(1283, 3)
79:(1312769, 3)
80:(336068609, 3)
81:(344134254593, 3)
82:(327689, 3)
83:(335552513, 3)
84:(21475360769, 3)
85:(5629636973166593, 3)
86:(22518547892666369, 3)
87:(1441187065130647553, 3)
88:(335546369, 3)
89:(335544323, 3)
90:(1342177289, 3)
91:(5497558171649, 3)
92:(87960930746369, 3)
93:(351843722985473, 3)
94:(90071993084280833, 3)
95:(1097, 3)
96:(18387828737, 3)
97:(75316546502657, 3)
98:(59, 4)
99:(233, 4)
100:(929, 4)
101:(59393, 4)
102:(3892314113, 4)
103:(255086697644033, 4)
104:(4179340454199820289, 4)
105:(227, 4)
106:(3617, 4)
107:(925697, 4)
108:(970662608897, 4)
109:(3593, 4)
110:(14369, 4)
111:(58851329, 4)
112:(15065939969, 4)
113:(4044232465378705409, 4)
114:(917513, 4)
115:(3670049, 4)
116:(58720769, 4)
117:(240520265729, 4)
118:(3848324251649, 4)
119:(14680067, 4)
120:(3758096897, 4)
121:(16140903263519113217, 4)
122:(15032385569, 4)
123:(15393162821633, 4)
124:(4035225274713899009, 4)
125:(1008806316530991233, 4)
126:(107, 4)
127:(1697, 4)
128:(6946817, 4)
129:(111149057, 4)
130:(6659, 4)
131:(26633, 4)
132:(1704449, 4)
133:(109084673, 4)
134:(27925676033, 4)
135:(1830137104433153, 4)
136:(7320548417732609, 4)
137:(1874060394939547649, 4)
138:(26627, 4)
139:(446710153217, 4)
140:(7147362451457, 4)
141:(114349217677313, 4)
142:(468374395606269953, 4)
143:(29273397586296833, 4)
144:(796673, 4)
145:(49697, 4)
146:(3178499, 4)
147:(12713993, 4)
148:(50855969, 4)
149:(52076511233, 4)
150:(13331586875393, 4)
151:(53326347501569, 4)
152:(54606179841605633, 4)
153:(13979182039451041793, 4)
154:(13331578617857, 4)
155:(6962565023914786817, 4)
156:(98849, 4)
157:(6326273, 4)
158:(404881409, 4)
159:(25912410113, 4)
160:(103649640449, 4)
161:(6633576988673, 4)
162:(395273, 4)
163:(25297409, 4)
164:(1619034113, 4)
165:(26526254891009, 4)
166:(424420078256129, 4)
167:(1738424640537100289, 4)
168:(414464344193, 4)
169:(26525718028289, 4)
170:(6790583815241729, 4)
171:(434597364175470593, 4)
172:(434597364043350017, 4)
173:(1612710017, 4)
174:(105690563608577, 4)
175:(393257, 4)
176:(6597740855297, 4)
177:(432380748608045057, 4)
178:(402653729, 4)
179:(26388314718209, 4)
180:(1688852008271873, 4)
181:(432346114117599233, 4)
182:(6917537825881587713, 4)
183:(864691128455266433, 4)
184:(864691128455266313, 4)
185:(47, 4)
186:(11777, 4)
187:(188417, 4)
188:(12348030977, 4)
189:(50577534877697, 4)
190:(12947848928690177, 4)
191:(179, 4)
192:(11393, 4)
193:(45569, 4)
194:(186646529, 4)
195:(12232066859009, 4)
196:(740294657, 4)
197:(2819, 4)
198:(11273, 4)
199:(189112778753, 4)
200:(756451115009, 4)
201:(11811162113, 4)
202:(3023657500673, 4)
203:(3096225280688129, 4)
204:(12384901122752513, 4)
205:(11811160577, 4)
206:(198158392194236417, 4)
207:(12384898975268993, 4)
208:(167, 4)
209:(2657, 4)
210:(671753, 4)
211:(10748033, 4)
212:(171968513, 4)
213:(176095756289, 4)
214:(704383025153, 4)
215:(2817532100609, 4)
216:(738599134981783553, 4)
217:(2954396539927134209, 4)
218:(2751463553, 4)
219:(176093667329, 4)
220:(41057, 4)
221:(176334177304577, 4)
222:(45141549389971457, 4)
223:(42008609, 4)
224:(43016814593, 4)
225:(172067258369, 4)
226:(10754195489, 4)
227:(44049184718849, 4)
228:(655379, 4)
229:(41944193, 4)
230:(167776769, 4)
231:(687213641729, 4)
232:(11529531705417269249, 4)
233:(2748846186497, 4)
234:(687211544609, 4)
235:(180148383149719553, 4)
236:(11259273946333187, 4)
237:(671092739, 4)
238:(171799740929, 4)
239:(687198963713, 4)
240:(45035996575694849, 4)
241:(11258999135535233, 4)
242:(180143986168563713, 4)
243:(140417, 4)
244:(35946497, 4)
245:(9649314045362177, 4)
246:(602532372021257, 4)
247:(1889, 5)
248:(120833, 5)
249:(7918845953, 5)
250:(2027224563713, 5)
251:(467, 5)
252:(7457, 5)
253:(119297, 5)
254:(1908737, 5)
255:(30539777, 5)
256:(7818182657, 5)
257:(2001454759937, 5)
258:(2098677426354651137, 5)
259:(7433, 5)
260:(118913, 5)
261:(475649, 5)
262:(487063553, 5)
263:(118787, 5)
264:(30409217, 5)
265:(2089705411471998977, 5)
266:(510173395419137, 5)
267:(130604389193744897, 5)
268:(464897, 5)
269:(7438337, 5)
270:(7799660609537, 5)
271:(511158557706551297, 5)
272:(7767448354817, 5)
273:(1895827457, 5)
274:(30333239297, 5)
275:(7187, 5)
276:(29433857, 5)
277:(493818159824897, 5)
278:(7901090557198337, 5)
279:(7356929, 5)
280:(30133977089, 5)
281:(30857192538113, 5)
282:(8088464930757410819, 5)
283:(1835027, 5)
284:(469766657, 5)
285:(7881376657309697, 5)
286:(29360393, 5)
287:(120260165633, 5)
288:(120260134913, 5)
289:(30786594537473, 5)
290:(7881368201592833, 5)
291:(481040531459, 5)
292:(7881299364676097, 5)
293:(126100789834817537, 5)
294:(857, 5)
295:(13697, 5)
296:(897581057, 5)
297:(14361296897, 5)
298:(13577, 5)
299:(3821304283823865857, 5)
300:(14227081217, 5)
301:(14227079297, 5)
302:(14918173899882497, 5)
303:(3409409, 5)
304:(13637633, 5)
305:(13964935169, 5)
306:(893755850753, 5)
307:(228801497792513, 5)
308:(937170934958129153, 5)
309:(53267, 5)
310:(3574488629249, 5)
311:(14641105425399809, 5)
312:(893621641217, 5)
313:(893621633057, 5)
314:(234257549367443489, 5)
315:(223363465217, 5)
316:(14987980659400638497, 5)
317:(14987979564183978497, 5)
318:(104421523457, 5)
319:(1670744375297, 5)
320:(1751902454070378497, 5)
321:(6361217, 5)
322:(1628471297, 5)
323:(106723494854657, 5)
324:(27321214682791937, 5)
325:(25427993, 5)
326:(106652728557569, 5)
327:(26663175847937, 5)
328:(1627391009, 5)
329:(26663173751297, 5)
330:(6989591019725651969, 5)
331:(197699, 5)
332:(790793, 5)
333:(3163169, 5)
334:(50610689, 5)
335:(809771009, 5)
336:(202440737, 5)
337:(51824828417, 5)
338:(3239051273, 5)
339:(13267154010113, 5)
340:(869476205206700033, 5)
341:(51824820227, 5)
342:(829197123593, 5)
343:(849097854558209, 5)
344:(790547, 5)
345:(3238076417, 5)
346:(3395360760266753, 5)
347:(3395360628146177, 5)
348:(54325770050338817, 5)
349:(217303080067145729, 5)
350:(54324670522064897, 5)
351:(3395291907620993, 5)
352:(3298878816257, 5)
353:(52782061060097, 5)
354:(3459045988864360457, 5)
355:(13835075651763183617, 5)
356:(1729382256910532867, 5)
357:(24119297, 5)
358:(404654638759937, 5)
359:(404622426505217, 5)
360:(25288767440897, 5)
361:(103582791437910017, 5)
362:(359, 5)
363:(1433, 5)
364:(366593, 5)
365:(5865473, 5)
366:(93847553, 5)
367:(6150393167873, 5)
368:(98406290685953, 5)
369:(403072166649659393, 5)
370:(22787, 5)
371:(382285643777, 5)
372:(1565841996906497, 5)
373:(91139, 5)
374:(400829162928996353, 5)
375:(5972688929, 5)
376:(400820368983457793, 5)
377:(1565704557953153, 5)
378:(5922357257, 5)
379:(24257975320577, 5)
380:(1589770670609268737, 5)
381:(5639, 5)
382:(94589943809, 5)
383:(24796186229604353, 5)
384:(96825742721537, 5)
385:(396598242187411457, 5)
386:(6345571874973417473, 5)
387:(6047315001857, 5)
388:(6341069374849286657, 5)
389:(21377, 5)
390:(87064577, 5)
391:(1460701197500417, 5)
392:(23371219160006657, 5)
393:(21496067, 5)
394:(5770305742077953, 5)
395:(22540256804873, 5)
396:(88046833697, 5)
397:(22539989426177, 5)
398:(352187334659, 5)
399:(1442559322759169, 5)
400:(5255297, 5)
401:(1344275489, 5)
402:(21508390979, 5)
403:(344134255649, 5)
404:(5506148090369, 5)
405:(360850921250357249, 5)
406:(1310759, 5)
407:(20972129, 5)
408:(83888513, 5)
409:(21990870089729, 5)
410:(87963480358913, 5)
411:(90074603887525889, 5)
412:(21475426433, 5)
413:(21990836666369, 5)
414:(5629654186590209, 5)
415:(360297867941773313, 5)
416:(5764765887068372993, 5)
417:(1374427283459, 5)
418:(5629654153043969, 5)
419:(1374423089219, 5)
420:(87963077709953, 5)
421:(5629636973436929, 5)
422:(22518547893747713, 5)
423:(5764748260791025697, 5)
424:(17973377, 5)
425:(4601151617, 5)
426:(18846317019137, 5)
427:(77194514510381057, 5)
428:(3779, 6)
429:(60449, 6)
430:(241793, 6)
431:(15474689, 6)
432:(63384322049, 6)
433:(259622183108609, 6)
434:(241667, 6)
435:(1037938976751617, 6)
436:(64871186038817, 6)
437:(244842497, 6)
438:(954497, 6)
439:(256220569010177, 6)
440:(65592465666605057, 6)
441:(954377, 6)
442:(16789560148325564417, 6)
443:(244318337, 6)
444:(1049339262933139457, 6)
445:(3909091457, 6)
446:(4098979348873217, 6)
447:(1049338713311543297, 6)
448:(16789419410845597697, 6)
449:(14867, 6)
450:(237857, 6)
451:(974258177, 6)
452:(4183879238199279617, 6)
453:(951299, 6)
454:(974129153, 6)
455:(3896516609, 6)
456:(1021448449687553, 6)
457:(15943321255937, 6)
458:(1044835113818392577, 6)
459:(4089268461652934657, 6)
460:(4072379963050295297, 6)
461:(242665914377, 6)
462:(254453653832728577, 6)
463:(919937, 6)
464:(60267954179, 6)
465:(61714385078273, 6)
466:(3758133257, 6)
467:(962082113537, 6)
468:(58720787, 6)
469:(240520331267, 6)
470:(4035261550041235457, 6)
471:(985171025207297, 6)
472:(252203782450970657, 6)
473:(6857, 6)
474:(28082177, 6)
475:(120612027520516097, 6)
476:(29414083526657, 6)
477:(7529455635398657, 6)
478:(120471290040549377, 6)
479:(113816634377, 6)
480:(27275273, 6)
481:(6982469633, 6)
482:(28600195612673, 6)
483:(436404257, 6)
484:(111719481353, 6)
485:(117146366869766657, 6)
486:(1874341869916258307, 6)
487:(27927248897, 6)
488:(1874061494451175553, 6)
489:(468515098734886979, 6)
490:(7496241579758191649, 6)
491:(213855280038017, 6)
492:(208444358657, 6)
493:(13019132417, 6)
494:(13651549255368833, 6)
495:(3254782019, 6)
496:(52076512289, 6)
497:(3332896786433, 6)
498:(13331587145729, 6)
499:(54606179842656257, 6)
500:(103651213313, 6)
501:(1698221478903809, 6)
502:(404886017, 6)
503:(6326339, 6)
504:(25305353, 6)
505:(404885633, 6)
506:(26534584778753, 6)
507:(1658411057153, 6)
508:(1619542019, 6)
509:(25912414337, 6)
510:(27171135774785537, 6)
511:(6633578037377, 6)
512:(424548928323617, 6)
513:(1738952410413400067, 6)
514:(1658394247187, 6)
515:(26534307954977, 6)
516:(434738101533803009, 6)
517:(6324377, 6)
518:(6631580502017, 6)
519:(1697684608516097, 6)
520:(434607259780120577, 6)
521:(6953698566443368577, 6)
522:(26391030530057, 6)
523:(1729562576817258497, 6)
524:(13258597304052482177, 6)
525:(719, 6)
526:(11489, 6)
527:(45953, 6)
528:(183809, 6)
529:(50524758319562753, 6)
530:(12934338129808064513, 6)
531:(733697, 6)
532:(3005218817, 6)
533:(806144341889253377, 6)
534:(50384020831207937, 6)
535:(182297, 6)
536:(2916737, 6)
537:(11946950657, 6)
538:(182279, 6)
539:(195719512195073, 6)
540:(200416780487753729, 6)
541:(11945377859, 6)
542:(47781511433, 6)
543:(47378858057, 6)
544:(3105020841558017, 6)
545:(194063802564617, 6)
546:(11279, 6)
547:(721793, 6)
548:(2956460033, 6)
549:(189213442049, 6)
550:(756853768193, 6)
551:(3100073034514433, 6)
552:(189179887619, 6)
553:(774880819683329, 6)
554:(48378520014857, 6)
555:(2736257, 6)
556:(43780097, 6)
557:(696516617, 6)
558:(2852932059137, 6)
559:(45646912946177, 6)
560:(11270129975297, 6)
561:(11269994713217, 6)
562:(180319915411457, 6)
563:(2885118646583297, 6)
564:(2885118645526529, 6)
565:(2954361493019164673, 6)
566:(11285664372883457, 6)
567:(172067262593, 6)
568:(11012304805889, 6)
569:(704786955599873, 6)
570:(2753074045193, 6)
571:(41944289, 6)
572:(10995443433473, 6)
573:(45037336303501313, 6)
574:(180149345214005249, 6)
575:(11529558093696335873, 6)
576:(720596865459945473, 6)
577:(687214698497, 6)
578:(45037302480633857, 6)
579:(703707842871329, 6)
580:(11529549297603837953, 6)
581:(45037301943763457, 6)
582:(43981673070689, 6)
583:(45037095787495433, 6)
584:(9423158511617, 6)
585:(7559, 7)
586:(120929, 7)
587:(120899, 7)
588:(123799553, 7)
589:(31692685313, 7)
590:(126770741249, 7)
591:(129813239037953, 7)
592:(129811628425217, 7)
593:(531708430029684737, 7)
594:(495190049, 7)
595:(8307909859606529, 7)
596:(33231639438426113, 7)
597:(519244366217219, 7)
598:(30933377, 7)
599:(8303511812968577, 7)
600:(128110418722817, 7)
601:(2049509001527297, 7)
602:(32791852100878337, 7)
603:(1902977, 7)
604:(30445697, 7)
605:(8172704288997377, 7)
606:(7794065417, 7)
607:(124705046657, 7)
608:(31924491943937, 7)
609:(130762719002361857, 7)
610:(1948258307, 7)
611:(127546570047497, 7)
612:(2040745120759937, 7)
613:(7359497, 7)
614:(30144495617, 7)
615:(482311929857, 7)
616:(7716990877697, 7)
617:(1975549664690177, 7)
618:(1928574533729, 7)
619:(1974860322504737, 7)
620:(31525506704736257, 7)
621:(120260171777, 7)
622:(30786602402177, 7)
623:(126101891226534017, 7)
624:(14043137, 7)
625:(224690177, 7)
626:(14725295374337, 7)
627:(15440591322439745537, 7)
628:(224657417, 7)
629:(964896254523867137, 7)
630:(15421451024023945217, 7)
631:(54550547, 7)
632:(57200393322497, 7)
633:(3660824241504257, 7)
634:(57200374452737, 7)
635:(3748122988902351107, 7)
636:(14992483159516383299, 7)
637:(1667554869257, 7)
638:(426894046529537, 7)
639:(1666448949377, 7)
640:(426610931040257, 7)
641:(109212398346305537, 7)
642:(27303098510737667, 7)
643:(27303090474975233, 7)
644:(109212361899900929, 7)
645:(109212361897811969, 7)
646:(13911830355180003329, 7)
647:(829206562817, 7)
648:(13267294486529, 7)
649:(809771297, 7)
650:(809771267, 7)
651:(13585707440275457, 7)
652:(217371318507544577, 7)
653:(849106461262337, 7)
654:(3316822054913, 7)
655:(217369086198284297, 7)
656:(207237185537, 7)
657:(3476863024969547777, 7)
658:(3476858078240964617, 7)
659:(1439, 7)
660:(92033, 7)
661:(368129, 7)
662:(376963073, 7)
663:(96502546433, 7)
664:(404761016509923329, 7)
665:(367649, 7)
666:(1505886209, 7)
667:(385506869249, 7)
668:(6316144545759233, 7)
669:(1616933003714363393, 7)
670:(6467732014857453569, 7)
671:(23527937, 7)
672:(376446977, 7)
673:(94110209, 7)
674:(1578907287420929, 7)
675:(6315629149683713, 7)
676:(101050066394939393, 7)
677:(6467204249276121089, 7)
678:(93913217, 7)
679:(1502611457, 7)
680:(1575602310086657, 7)
681:(25209636961386497, 7)
682:(1575600163127297, 7)
683:(95575638017, 7)
684:(6263645013016577, 7)
685:(1603343039995052033, 7)
686:(400833560975507459, 7)
687:(1529008365953, 7)
688:(1565704566734849, 7)
689:(1443713, 7)
690:(23099393, 7)
691:(5913444353, 7)
692:(23653777409, 7)
693:(1550173956210689, 7)
694:(1443587, 7)
695:(23097377, 7)
696:(6200154658963457, 7)
697:(24219320590337, 7)
698:(6054830145569, 7)
699:(387509129314817, 7)
700:(387440409843713, 7)
701:(1549761639366659, 7)
702:(1586955918711457793, 7)
703:(350240897, 7)
704:(5603854337, 7)
705:(5603852417, 7)
706:(89661638657, 7)
707:(5842804857110657, 7)
708:(5908793904488513537, 7)
709:(5908722988202622977, 7)
710:(344134525187, 7)
711:(83888579, 7)
712:(1342217249, 7)
713:(21475475969, 7)
714:(1407416793038849, 7)
715:(5764779184287121409, 7)
716:(21990886866947, 7)
717:(1441194761712042017, 7)
718:(1441193730919890947, 7)
719:(22518650971882529, 7)
720:(5629654153048193, 7)
721:(90074466448771073, 7)
722:(1441191463180337153, 7)
723:(5764765852721348609, 7)
724:(1441187065199853857, 7)
725:(4058207223809, 8)
726:(3869729, 8)
727:(3962601473, 8)
728:(1014425976833, 8)
729:(16230815629313, 8)
730:(4155088801103873, 8)
731:(247601153, 8)
732:(990404609, 8)
733:(15846473729, 8)
734:(253543579649, 8)
735:(259626480173057, 8)
736:(1063430062788837377, 8)
737:(16226654879873, 8)
738:(16226387525633, 8)
739:(64905550102529, 8)
740:(265853133219954689, 8)
741:(1063412532879818753, 8)
742:(4253650131519275009, 8)
743:(4086352278716417, 8)
744:(1046106183351402497, 8)
745:(16737698383866628097, 8)
746:(4086334968823937, 8)
747:(942015617, 8)
748:(987774966562817, 8)
749:(15798882580307969, 8)
750:(15393301987457, 8)
751:(16141046200232574977, 8)
752:(28760344577, 8)
753:(1884837942132737, 8)
754:(482518513185980417, 8)
755:(117802363518977, 8)
756:(1884837807915137, 8)
757:(482448129409417217, 8)
758:(6982470017, 8)
759:(29286593932034057, 8)
760:(213447023264897, 8)
761:(13979182323187319297, 8)
762:(108685676433645569, 8)
763:(1738970822938329089, 8)
764:(1738970554502742017, 8)
765:(108685659522203657, 8)
766:(6792851690098697, 8)
767:(1698212892115457, 8)
768:(1738952689586274377, 8)
769:(1738431512493162497, 8)
770:(2879, 8)
771:(46049, 8)
772:(188612609, 8)
773:(12360915877889, 8)
774:(790557450305537, 8)
775:(3238123316451475457, 8)
776:(736259, 8)
777:(753928193, 8)
778:(3015712769, 8)
779:(197637751963649, 8)
780:(809522033019846659, 8)
781:(47059073, 8)
782:(12047122433, 8)
783:(771013739009, 8)
784:(789518068744193, 8)
785:(3011575937, 8)
786:(48185213057, 8)
787:(12934619639144513537, 8)
788:(48184427009, 8)
789:(770950832129, 8)
790:(50525033734340609, 8)
791:(202100132789878913, 8)
792:(12020891657, 8)
793:(192334266497, 8)
794:(12604818489081857, 8)
795:(3226833533204955137, 8)
796:(50109160104656897, 8)
797:(801746561666121857, 8)
798:(12826251810691883009, 8)
799:(739181057, 8)
800:(198422403833921537, 8)
801:(46198787, 8)
802:(775087011659777, 8)
803:(3100347912421379, 8)
804:(793689065579872769, 8)
805:(11548697, 8)
806:(184779017, 8)
807:(12109677592577, 8)
808:(49601237271707657, 8)
809:(12109660291139, 8)
810:(3100073034531329, 8)
811:(49601168552501249, 8)
812:(3173911837439696897, 8)
813:(44830819337, 8)
814:(752136339331219457, 8)
815:(180425601941241857, 8)
816:(720597406625824769, 8)
817:(2684434499, 8)
818:(42950951969, 8)
819:(687215231489, 8)
820:(45037337410797569, 8)
821:(11529549297603854849, 8)
822:(180148932897542177, 8)
823:(32465657790473, 9)
824:(32461631266817, 9)
825:(32461631258657, 9)
826:(495202307, 9)
827:(32453578196993, 9)
828:(2028348637193, 9)
829:(129814312780289, 9)
830:(2077011841384457, 9)
831:(33232189462151297, 9)
832:(531715031394420737, 9)
833:(8507440502310699017, 9)
834:(8507300263038550049, 9)
835:(493887483805697, 9)
836:(126435195854258177, 9)
837:(504407719524990977, 9)
838:(3859585035275337737, 9)
839:(228801577517057, 9)
840:(6994232058344144897, 9)
841:(13911764436021936137, 9)
842:(368513, 9)
843:(1474049, 9)
844:(1509425153, 9)
845:(1545651355649, 9)
846:(6182605422593, 9)
847:(405183228974989313, 9)
848:(1473569, 9)
849:(23577089, 9)
850:(1508933633, 9)
851:(24721831755779, 9)
852:(6328788929479169, 9)
853:(23560289, 9)
854:(94241153, 9)
855:(1507858433, 9)
856:(96502939649, 9)
857:(6176188137473, 9)
858:(1581104163192833, 9)
859:(24125702177, 9)
860:(6176179757057, 9)
861:(24704719003649, 9)
862:(101190529038942209, 9)
863:(6476193858492301313, 9)
864:(1581102015709193, 9)
865:(385481719937, 9)
866:(385481704457, 9)
867:(98683316340737, 9)
868:(1578933061451777, 9)
869:(1616801079532453889, 9)
870:(24670426628129, 9)
871:(98681706512513, 9)
872:(394726826050049, 9)
873:(94615175297, 9)
874:(6200696227495937, 9)
875:(1587378131159745539, 9)
876:(1478233217, 9)
877:(6054838829057, 9)
878:(24800619843813377, 9)
879:(396809915353563137, 9)
880:(1587237393680040449, 9)
881:(6348949574720161793, 9)
882:(99202337105002499, 9)
883:(358646554697, 9)
884:(1443404815529934857, 9)
885:(21475475993, 9)
886:(1374430463489, 9)
887:(5629667178446849, 9)
888:(5764779190729572353, 9)
889:(1374430463009, 9)
890:(351854198530049, 9)
891:(22518668705923073, 9)
892:(1407416794089473, 9)
893:(90074674821726209, 9)
894:(17019243729338761217, 10)
895:(4154058008969249, 10)
896:(11792393, 10)
897:(12365219233793, 10)
898:(791374030962689, 10)
899:(12365210845193, 10)
900:(12661975905476609, 10)
901:(12361192701953, 10)
902:(3017867393, 10)
903:(197778957402113, 10)
904:(12657853273735169, 10)
905:(12361184321537, 10)
906:(12657577858958849, 10)
907:(810084982973333633, 10)
908:(753929249, 10)
909:(3088094199809, 10)
910:(12352376799233, 10)
911:(3238101463657873409, 10)
912:(3015716897, 10)
913:(3162208328482817, 10)
914:(3088094068769, 10)
915:(3162208326418433, 10)
916:(12648833305673729, 10)
917:(3162208326386177, 10)
918:(202381058279243777, 10)
919:(49409438007299, 10)
920:(12952387716985126913, 10)
921:(3162204031418387, 10)
922:(202103439982329857, 10)
923:(12631464491614337, 10)
924:(49340853256259, 10)
925:(197363413025033, 10)
926:(50525033734408193, 10)
927:(808400539750531073, 10)
928:(189213851777, 10)
929:(48438710632457, 10)
930:(12697899149440323593, 10)
931:(11752130304311297, 10)
932:(687215231777, 10)
933:(703708397060609, 10)
934:(2882389594360250369, 10)
935:(132929856287015969, 11)
936:(23584787, 11)
937:(101295884553158657, 11)
938:(101295875963232257, 11)
939:(1582748061925379, 11)
940:(101295875963224193, 11)
941:(6330987952738817, 11)
942:(101262890614398977, 11)
943:(1620206249830383617, 11)
944:(1545148105217, 11)
945:(98889474572297, 11)
946:(405051287848124417, 11)
947:(24125735969, 11)
948:(98819014524929, 11)
949:(1581104232398849, 11)
950:(6324416929595393, 11)
951:(101190670739316737, 11)
952:(25297666627862537, 11)
953:(404762666045800577, 11)
954:(1619050663126237697, 11)
955:(6324408064934273, 11)
956:(25262516867204609, 11)
957:(94017042434490377, 11)
958:(87963549667457, 11)
959:(1441194797180127233, 11)
960:(12365220806657, 12)
961:(50647944424062977, 12)
962:(12965872123293728897, 12)
963:(3165496123850759, 12)
964:(3241468030823174177, 12)
965:(791115796578377, 12)
966:(772023551009, 12)
967:(3162208464928769, 12)
968:(809525367021764609, 12)
969:(12952405872348233729, 12)
970:(809525366988218369, 12)
971:(3238101467952842753, 12)
972:(202381341747052577, 12)
973:(405183503852897153, 13)
974:(1620205151392516097, 13)
975:(101190670877851649, 13)
976:(25297667719430153, 13)
977:(1619050734043529729, 13)
978:(12965872123292708897, 14)
:枚举冫幺链素数牜小于六十四比特扌:end
    #用于:提取数据
===
===
>>> (12965872123292708897).bit_length()
64
>>> (12965872123292708897).bit_count()-1
14
>>> bin(12965872123292708897)
'0b1011001111110000000010000000000000000000000000000111000000100001'
>>> bin(12965872123292708897).count('1')-1
14
>>> hex(12965872123292708897)
'0xb3f0080000007021'

===
===
]]]

[[[
扩展
扩展幺链素数
py_adhoc_call { +lineno }  script.素数链   ,枚举冫扩展幺链素数牜小于六十四比特扌 ='[3]'
    太多了
    估计远多于:978**2==956484
===
... ...
... ...
464249:(16620838164898044289, 4)
464250:(6232814312742715609, 4)
KeyboardInterrupt
===
]]]
[[[
===
共980行:
py_adhoc_call { +lineno }  script.素数链   ,枚举冫扩展幺链素数牜小于六十四比特扌 --_max1_='2**16' ='[3]'
===
1:(3, 1)
2:(5, 1)
3:(17, 1)
4:(257, 1)
5:(7, 1)
6:(13, 1)
7:(97, 1)
8:(193, 1)
9:(769, 1)
10:(12289, 1)
11:(19, 1)
12:(37, 1)
13:(73, 1)
14:(577, 1)
15:(1153, 1)
16:(18433, 1)
17:(109, 1)
18:(433, 1)
19:(3457, 1)
20:(163, 1)
21:(1297, 1)
22:(2593, 1)
23:(10369, 1)
24:(487, 1)
25:(3889, 1)
26:(1459, 1)
27:(2917, 1)
28:(17497, 1)
29:(52489, 1)
30:(39367, 1)
31:(11, 2)
32:(41, 2)
33:(641, 2)
34:(40961, 2)
35:(31, 2)
36:(61, 2)
37:(241, 2)
38:(7681, 2)
39:(15361, 2)
40:(61441, 2)
41:(181, 2)
42:(23041, 2)
43:(271, 2)
44:(541, 2)
45:(2161, 2)
46:(8641, 2)
47:(811, 2)
48:(1621, 2)
49:(6481, 2)
50:(4861, 2)
51:(9721, 2)
52:(19441, 2)
53:(58321, 2)
54:(21871, 2)
55:(137, 2)
56:(103, 2)
57:(409, 2)
58:(6529, 2)
59:(26113, 2)
60:(307, 2)
61:(613, 2)
62:(919, 2)
63:(3673, 2)
64:(8263, 2)
65:(33049, 2)
66:(1543, 2)
67:(13879, 2)
68:(29, 2)
69:(113, 2)
70:(449, 2)
71:(43, 2)
72:(337, 2)
73:(673, 2)
74:(2689, 2)
75:(10753, 2)
76:(127, 2)
77:(1009, 2)
78:(2017, 2)
79:(32257, 2)
80:(64513, 2)
81:(379, 2)
82:(757, 2)
83:(12097, 2)
84:(2269, 2)
85:(53, 2)
86:(3329, 2)
87:(13313, 2)
88:(79, 2)
89:(157, 2)
90:(313, 2)
91:(1249, 2)
92:(4993, 2)
93:(39937, 2)
94:(937, 2)
95:(1873, 2)
96:(7489, 2)
97:(12637, 2)
98:(389, 2)
99:(1553, 2)
100:(4657, 2)
101:(1747, 2)
102:(10477, 2)
103:(47143, 2)
104:(773, 2)
105:(3089, 2)
106:(49409, 2)
107:(37057, 2)
108:(6949, 2)
109:(27793, 2)
110:(31267, 2)
111:(62533, 2)
112:(18457, 2)
113:(36913, 2)
114:(49157, 2)
115:(1217, 2)
116:(19457, 2)
117:(229, 2)
118:(457, 2)
119:(7297, 2)
120:(14593, 2)
121:(58369, 2)
122:(43777, 2)
123:(2053, 2)
124:(8209, 2)
125:(16417, 2)
126:(32833, 2)
127:(3079, 2)
128:(149, 2)
129:(593, 2)
130:(9473, 2)
131:(37889, 2)
132:(223, 2)
133:(1777, 2)
134:(10657, 2)
135:(21313, 2)
136:(1999, 2)
137:(7993, 2)
138:(23977, 2)
139:(293, 2)
140:(4673, 2)
141:(439, 2)
142:(877, 2)
143:(1753, 2)
144:(10513, 2)
145:(3943, 2)
146:(63073, 2)
147:(11827, 2)
148:(2309, 2)
149:(36929, 2)
150:(3463, 2)
151:(27697, 2)
152:(20773, 2)
153:(31159, 2)
154:(27673, 2)
155:(6977, 2)
156:(2617, 2)
157:(5233, 2)
158:(20929, 2)
159:(31393, 2)
160:(17659, 2)
161:(35317, 2)
162:(1733, 2)
163:(5197, 2)
164:(31177, 2)
165:(13829, 2)
166:(55313, 2)
167:(20743, 2)
168:(653, 2)
169:(2609, 2)
170:(10433, 2)
171:(41729, 2)
172:(15649, 2)
173:(5869, 2)
174:(23473, 2)
175:(8803, 2)
176:(26407, 2)
177:(52813, 2)
178:(5189, 2)
179:(20753, 2)
180:(15559, 2)
181:(62233, 2)
182:(1949, 2)
183:(7793, 2)
184:(11689, 2)
185:(17509, 2)
186:(26263, 2)
187:(23, 3)
188:(89, 3)
189:(353, 3)
190:(1409, 3)
191:(67, 3)
192:(2113, 3)
193:(199, 3)
194:(397, 3)
195:(3169, 3)
196:(6337, 3)
197:(2377, 3)
198:(19009, 3)
199:(1783, 3)
200:(7129, 3)
201:(28513, 3)
202:(5347, 3)
203:(32077, 3)
204:(64153, 3)
205:(83, 3)
206:(7873, 3)
207:(31489, 3)
208:(739, 3)
209:(2953, 3)
210:(17713, 3)
211:(19927, 3)
212:(59779, 3)
213:(1283, 3)
214:(3847, 3)
215:(46153, 3)
216:(7937, 3)
217:(373, 3)
218:(1489, 3)
219:(5953, 3)
220:(1117, 3)
221:(8929, 3)
222:(53569, 3)
223:(5023, 3)
224:(20089, 3)
225:(40177, 3)
226:(30133, 3)
227:(977, 3)
228:(367, 3)
229:(733, 3)
230:(5857, 3)
231:(17569, 3)
232:(13177, 3)
233:(9883, 3)
234:(1447, 3)
235:(46273, 3)
236:(4339, 3)
237:(8677, 3)
238:(26029, 3)
239:(52057, 3)
240:(39043, 3)
241:(2897, 3)
242:(46337, 3)
243:(1087, 3)
244:(8689, 3)
245:(17377, 3)
246:(3259, 3)
247:(13033, 3)
248:(39097, 3)
249:(4337, 3)
250:(1627, 3)
251:(3253, 3)
252:(13009, 3)
253:(26017, 3)
254:(29269, 3)
255:(58537, 3)
256:(25969, 3)
257:(9739, 3)
258:(19477, 3)
259:(38953, 3)
260:(12967, 3)
261:(25933, 3)
262:(9733, 3)
263:(58393, 3)
264:(29179, 3)
265:(29167, 3)
266:(1097, 3)
267:(823, 3)
268:(6577, 3)
269:(52609, 3)
270:(2467, 3)
271:(4933, 3)
272:(14797, 3)
273:(44389, 3)
274:(619, 3)
275:(1237, 3)
276:(2473, 3)
277:(19777, 3)
278:(3709, 3)
279:(7417, 3)
280:(5563, 3)
281:(44497, 3)
282:(1637, 3)
283:(26177, 3)
284:(4909, 3)
285:(9817, 3)
286:(58897, 3)
287:(1229, 3)
288:(7369, 3)
289:(14737, 3)
290:(29473, 3)
291:(5527, 3)
292:(39233, 3)
293:(14713, 3)
294:(3677, 3)
295:(49627, 3)
296:(22039, 3)
297:(33053, 3)
298:(6173, 3)
299:(18517, 3)
300:(59, 3)
301:(233, 3)
302:(929, 3)
303:(59393, 3)
304:(349, 3)
305:(5569, 3)
306:(22273, 3)
307:(523, 3)
308:(2089, 3)
309:(4177, 3)
310:(8353, 3)
311:(33409, 3)
312:(1567, 3)
313:(25057, 3)
314:(9397, 3)
315:(18793, 3)
316:(56377, 3)
317:(42283, 3)
318:(227, 3)
319:(3617, 3)
320:(2713, 3)
321:(16273, 3)
322:(65089, 3)
323:(48817, 3)
324:(18307, 3)
325:(54919, 3)
326:(3593, 3)
327:(14369, 3)
328:(24247, 3)
329:(173, 3)
330:(2753, 3)
331:(1033, 3)
332:(4129, 3)
333:(1549, 3)
334:(49537, 3)
335:(6967, 3)
336:(13933, 3)
337:(20899, 3)
338:(5393, 3)
339:(21569, 3)
340:(8089, 3)
341:(32353, 3)
342:(6067, 3)
343:(18199, 3)
344:(2693, 3)
345:(64609, 3)
346:(24229, 3)
347:(36343, 3)
348:(43013, 3)
349:(509, 3)
350:(3049, 3)
351:(2287, 3)
352:(18289, 3)
353:(41149, 3)
354:(61723, 3)
355:(64577, 3)
356:(12109, 3)
357:(8069, 3)
358:(48409, 3)
359:(36307, 3)
360:(4549, 3)
361:(6823, 3)
362:(54577, 3)
363:(40933, 3)
364:(12113, 3)
365:(48449, 3)
366:(18169, 3)
367:(13627, 3)
368:(27253, 3)
369:(40879, 3)
370:(107, 3)
371:(1697, 3)
372:(10177, 3)
373:(20353, 3)
374:(30529, 3)
375:(61057, 3)
376:(25759, 3)
377:(51517, 3)
378:(6659, 3)
379:(26633, 3)
380:(26627, 3)
381:(317, 3)
382:(3793, 3)
383:(1423, 3)
384:(5689, 3)
385:(34129, 3)
386:(12799, 3)
387:(51193, 3)
388:(40193, 3)
389:(3769, 3)
390:(7537, 3)
391:(15073, 3)
392:(60289, 3)
393:(5653, 3)
394:(5009, 3)
395:(1879, 3)
396:(16903, 3)
397:(50707, 3)
398:(22483, 3)
399:(19973, 3)
400:(29959, 3)
401:(5623, 3)
402:(50599, 3)
403:(11239, 3)
404:(44953, 3)
405:(50549, 3)
406:(9337, 3)
407:(42013, 3)
408:(49697, 3)
409:(9319, 3)
410:(18637, 3)
411:(37273, 3)
412:(27943, 3)
413:(27953, 3)
414:(4639, 3)
415:(9277, 3)
416:(18553, 3)
417:(55603, 3)
418:(29209, 3)
419:(58417, 3)
420:(14657, 3)
421:(2749, 3)
422:(10993, 3)
423:(43969, 3)
424:(24733, 3)
425:(21937, 3)
426:(16453, 3)
427:(43783, 3)
428:(1193, 3)
429:(19073, 3)
430:(1789, 3)
431:(2683, 3)
432:(10729, 3)
433:(1187, 3)
434:(3559, 3)
435:(56929, 3)
436:(42697, 3)
437:(18947, 3)
438:(57089, 3)
439:(2677, 3)
440:(16057, 3)
441:(12043, 3)
442:(7109, 3)
443:(28433, 3)
444:(10663, 3)
445:(42649, 3)
446:(47977, 3)
447:(35983, 3)
448:(31973, 3)
449:(587, 3)
450:(9377, 3)
451:(1759, 3)
452:(3517, 3)
453:(42193, 3)
454:(15823, 3)
455:(28097, 3)
456:(14033, 3)
457:(15787, 3)
458:(31573, 3)
459:(7013, 3)
460:(42073, 3)
461:(63079, 3)
462:(15773, 3)
463:(47317, 3)
464:(47309, 3)
465:(55817, 3)
466:(41863, 3)
467:(3467, 3)
468:(55457, 3)
469:(10399, 3)
470:(41593, 3)
471:(20789, 3)
472:(31183, 3)
473:(1307, 3)
474:(20897, 3)
475:(3919, 3)
476:(23509, 3)
477:(47017, 3)
478:(20873, 3)
479:(62617, 3)
480:(62597, 3)
481:(41513, 3)
482:(41507, 3)
483:(35083, 3)
484:(46757, 3)
485:(47, 4)
486:(11777, 4)
487:(139, 4)
488:(277, 4)
489:(829, 4)
490:(1657, 4)
491:(3313, 4)
492:(13249, 4)
493:(26497, 4)
494:(4969, 4)
495:(3727, 4)
496:(59617, 4)
497:(179, 4)
498:(11393, 4)
499:(45569, 4)
500:(1069, 4)
501:(2137, 4)
502:(4273, 4)
503:(25633, 4)
504:(9613, 4)
505:(38449, 4)
506:(14419, 4)
507:(28837, 4)
508:(33889, 4)
509:(50833, 4)
510:(2819, 4)
511:(11273, 4)
512:(269, 4)
513:(4289, 4)
514:(1609, 4)
515:(3217, 4)
516:(9649, 4)
517:(38593, 4)
518:(7237, 4)
519:(32563, 4)
520:(33809, 4)
521:(25357, 4)
522:(797, 4)
523:(2389, 4)
524:(3583, 4)
525:(28657, 4)
526:(21493, 4)
527:(6353, 4)
528:(25409, 4)
529:(2383, 4)
530:(38113, 4)
531:(14293, 4)
532:(25349, 4)
533:(42787, 4)
534:(21397, 4)
535:(42793, 4)
536:(64189, 4)
537:(28517, 4)
538:(32083, 4)
539:(167, 4)
540:(2657, 4)
541:(499, 4)
542:(997, 4)
543:(1993, 4)
544:(15937, 4)
545:(31873, 4)
546:(11953, 4)
547:(47809, 4)
548:(4483, 4)
549:(17929, 4)
550:(26893, 4)
551:(2957, 4)
552:(47297, 4)
553:(17737, 4)
554:(11813, 4)
555:(35437, 4)
556:(41057, 4)
557:(7699, 4)
558:(61553, 4)
559:(47623, 4)
560:(1493, 4)
561:(23873, 4)
562:(2239, 4)
563:(35809, 4)
564:(20143, 4)
565:(60427, 4)
566:(23813, 4)
567:(6703, 4)
568:(53617, 4)
569:(20107, 4)
570:(40213, 4)
571:(30139, 4)
572:(7817, 4)
573:(2203, 4)
574:(6607, 4)
575:(19819, 4)
576:(52709, 4)
577:(34729, 4)
578:(52069, 4)
579:(17383, 4)
580:(52147, 4)
581:(4349, 4)
582:(17393, 4)
583:(52177, 4)
584:(39133, 4)
585:(58699, 4)
586:(34757, 4)
587:(13037, 4)
588:(29287, 4)
589:(58573, 4)
590:(51869, 4)
591:(38933, 4)
592:(59239, 4)
593:(52673, 4)
594:(19753, 4)
595:(29629, 4)
596:(26309, 4)
597:(59209, 4)
598:(29599, 4)
599:(59197, 4)
600:(2477, 4)
601:(33427, 4)
602:(19793, 4)
603:(59377, 4)
604:(44533, 4)
605:(39569, 4)
606:(29669, 4)
607:(58909, 4)
608:(2459, 4)
609:(9833, 4)
610:(22123, 4)
611:(22109, 4)
612:(22063, 4)
613:(12347, 4)
614:(37039, 4)
615:(1889, 4)
616:(709, 4)
617:(2833, 4)
618:(11329, 4)
619:(1063, 4)
620:(16993, 4)
621:(3187, 4)
622:(6373, 4)
623:(57349, 4)
624:(467, 4)
625:(7457, 4)
626:(1399, 4)
627:(2797, 4)
628:(22369, 4)
629:(8389, 4)
630:(12583, 4)
631:(50329, 4)
632:(37747, 4)
633:(7433, 4)
634:(11149, 4)
635:(8377, 4)
636:(37693, 4)
637:(22277, 4)
638:(8369, 4)
639:(6277, 4)
640:(12553, 4)
641:(37657, 4)
642:(33413, 4)
643:(50119, 4)
644:(6269, 4)
645:(25073, 4)
646:(9403, 4)
647:(37589, 4)
648:(56383, 4)
649:(5449, 4)
650:(24517, 4)
651:(49033, 4)
652:(10853, 4)
653:(7187, 4)
654:(21559, 4)
655:(43117, 4)
656:(347, 4)
657:(1039, 4)
658:(4153, 4)
659:(6229, 4)
660:(12457, 4)
661:(9343, 4)
662:(37369, 4)
663:(28027, 4)
664:(56053, 4)
665:(5507, 4)
666:(16519, 4)
667:(33037, 4)
668:(4133, 4)
669:(16529, 4)
670:(6199, 4)
671:(24793, 4)
672:(37189, 4)
673:(49549, 4)
674:(6197, 4)
675:(27883, 4)
676:(55733, 4)
677:(32359, 4)
678:(64717, 4)
679:(5387, 4)
680:(64633, 4)
681:(1019, 4)
682:(4073, 4)
683:(27487, 4)
684:(54973, 4)
685:(12197, 4)
686:(13723, 4)
687:(48437, 4)
688:(16139, 4)
689:(64553, 4)
690:(40939, 4)
691:(857, 4)
692:(13697, 4)
693:(643, 4)
694:(10273, 4)
695:(3853, 4)
696:(30817, 4)
697:(5779, 4)
698:(13577, 4)
699:(40709, 4)
700:(53267, 4)
701:(40577, 4)
702:(15217, 4)
703:(15173, 4)
704:(60689, 4)
705:(5693, 4)
706:(22769, 4)
707:(8539, 4)
708:(17077, 4)
709:(51229, 4)
710:(51197, 4)
711:(15077, 4)
712:(60293, 4)
713:(22613, 4)
714:(7517, 4)
715:(22549, 4)
716:(33739, 4)
717:(37277, 4)
718:(55663, 4)
719:(43973, 4)
720:(38177, 4)
721:(7159, 4)
722:(42937, 4)
723:(32203, 4)
724:(10733, 4)
725:(42929, 4)
726:(9497, 4)
727:(42709, 4)
728:(64063, 4)
729:(10709, 4)
730:(16063, 4)
731:(48187, 4)
732:(56873, 4)
733:(10567, 4)
734:(31699, 4)
735:(63397, 4)
736:(56263, 4)
737:(31663, 4)
738:(63149, 4)
739:(31547, 4)
740:(27737, 4)
741:(41597, 4)
742:(41579, 4)
743:(10457, 4)
744:(283, 5)
745:(1129, 5)
746:(4513, 5)
747:(18049, 5)
748:(36097, 5)
749:(1693, 5)
750:(13537, 5)
751:(27073, 5)
752:(2539, 5)
753:(5077, 5)
754:(40609, 5)
755:(60913, 5)
756:(557, 5)
757:(1669, 5)
758:(6673, 5)
759:(53377, 5)
760:(2503, 5)
761:(10009, 5)
762:(7507, 5)
763:(15013, 5)
764:(1109, 5)
765:(17729, 5)
766:(1663, 5)
767:(13297, 5)
768:(4987, 5)
769:(9973, 5)
770:(29917, 5)
771:(59833, 5)
772:(9949, 5)
773:(14923, 5)
774:(26513, 5)
775:(39769, 5)
776:(59629, 5)
777:(359, 5)
778:(1433, 5)
779:(4297, 5)
780:(34369, 5)
781:(12889, 5)
782:(19333, 5)
783:(22787, 5)
784:(12829, 5)
785:(25657, 5)
786:(57727, 5)
787:(12823, 5)
788:(17093, 5)
789:(25639, 5)
790:(38453, 5)
791:(57679, 5)
792:(5639, 5)
793:(33829, 5)
794:(2153, 5)
795:(8609, 5)
796:(3229, 5)
797:(38737, 5)
798:(43579, 5)
799:(34313, 5)
800:(19309, 5)
801:(51473, 5)
802:(28949, 5)
803:(4783, 5)
804:(14347, 5)
805:(28669, 5)
806:(43003, 5)
807:(57329, 5)
808:(21499, 5)
809:(38119, 5)
810:(9533, 5)
811:(28597, 5)
812:(57193, 5)
813:(57173, 5)
814:(21377, 5)
815:(8017, 5)
816:(16033, 5)
817:(24049, 5)
818:(36073, 5)
819:(1997, 5)
820:(26947, 5)
821:(3989, 5)
822:(63809, 5)
823:(23929, 5)
824:(47857, 5)
825:(11959, 5)
826:(23917, 5)
827:(23627, 5)
828:(47777, 5)
829:(26813, 5)
830:(13219, 5)
831:(26437, 5)
832:(8699, 5)
833:(52189, 5)
834:(44587, 5)
835:(4919, 5)
836:(44263, 5)
837:(3779, 5)
838:(60449, 5)
839:(22669, 5)
840:(45337, 5)
841:(2837, 5)
842:(45377, 5)
843:(34033, 5)
844:(12763, 5)
845:(38287, 5)
846:(45329, 5)
847:(33997, 5)
848:(45317, 5)
849:(4253, 5)
850:(6379, 5)
851:(12757, 5)
852:(50993, 5)
853:(57367, 5)
854:(38239, 5)
855:(2803, 5)
856:(25219, 5)
857:(33577, 5)
858:(25183, 5)
859:(44753, 5)
860:(50333, 5)
861:(14867, 5)
862:(50263, 5)
863:(37663, 5)
864:(12539, 5)
865:(50153, 5)
866:(50147, 5)
867:(65119, 5)
868:(2777, 5)
869:(44417, 5)
870:(2083, 5)
871:(8329, 5)
872:(16657, 5)
873:(6247, 5)
874:(4157, 5)
875:(24919, 5)
876:(24917, 5)
877:(24799, 5)
878:(49597, 5)
879:(32323, 5)
880:(2039, 5)
881:(32609, 5)
882:(8147, 5)
883:(24439, 5)
884:(6857, 5)
885:(15427, 5)
886:(30853, 5)
887:(46279, 5)
888:(10289, 5)
889:(7717, 5)
890:(61729, 5)
891:(15413, 5)
892:(46237, 5)
893:(23117, 5)
894:(60869, 5)
895:(30347, 5)
896:(34159, 5)
897:(34157, 5)
898:(21467, 5)
899:(64399, 5)
900:(56983, 5)
901:(21419, 5)
902:(62743, 5)
903:(1699, 6)
904:(6793, 6)
905:(61129, 6)
906:(4517, 6)
907:(54193, 6)
908:(20323, 6)
909:(10159, 6)
910:(30469, 6)
911:(60937, 6)
912:(4457, 6)
913:(3343, 6)
914:(26737, 6)
915:(20029, 6)
916:(26693, 6)
917:(40039, 6)
918:(40037, 6)
919:(30029, 6)
920:(13309, 6)
921:(53233, 6)
922:(19963, 6)
923:(59887, 6)
924:(6653, 6)
925:(53189, 6)
926:(19949, 6)
927:(59693, 6)
928:(719, 6)
929:(11489, 6)
930:(45953, 6)
931:(25849, 6)
932:(19387, 6)
933:(8599, 6)
934:(17189, 6)
935:(11279, 6)
936:(12919, 6)
937:(51673, 6)
938:(12917, 6)
939:(38749, 6)
940:(57899, 6)
941:(57397, 6)
942:(57389, 6)
943:(32069, 6)
944:(47869, 6)
945:(47837, 6)
946:(9839, 6)
947:(59029, 6)
948:(7559, 6)
949:(22697, 6)
950:(11213, 6)
951:(33637, 6)
952:(33329, 6)
953:(49993, 6)
954:(33317, 6)
955:(24989, 6)
956:(37483, 6)
957:(24943, 6)
958:(4079, 6)
959:(24469, 6)
960:(48883, 6)
961:(41143, 6)
962:(30869, 6)
963:(42839, 6)
964:(20389, 7)
965:(40759, 7)
966:(36137, 7)
967:(27103, 7)
968:(40637, 7)
969:(1439, 7)
970:(8629, 7)
971:(17257, 7)
972:(34513, 7)
973:(51769, 7)
974:(32633, 7)
975:(2879, 8)
976:(46049, 8)
977:(34537, 8)
978:(25903, 8)
979:(65267, 8)
980:(34549, 9)
===
]]]
[[[
===
===
共2455行:
py_adhoc_call { +lineno }  script.素数链   ,枚举冫扩展幺链素数牜小于六十四比特扌 --_max1_='2**16' ='[3,5]'
... ...
... ...
2453:(25903, 7)
2454:(65267, 8)
2455:(34549, 8)
===
由于『5』的加入:降低了:链长(34549)
    (34549, 9)@[3]
    -->
    (34549, 8)@[3,5]
===
===
共3527行:
py_adhoc_call { +lineno }  script.素数链   ,枚举冫扩展幺链素数牜小于六十四比特扌 --_max1_='2**16' ='[3,5,7]'
... ...
... ...
3520:(57107, 6)
3521:(2879, 7)
3522:(46049, 7)
3523:(34537, 7)
3524:(25903, 7)
3525:(20147, 7)
3526:(65267, 7)
3527:(34549, 8)
===
由于『7』的加入:降低了:链长(65267)
    (65267, 8)@[3]
    (65267, 8)@[3,5]
    -->
    (65267, 7)@[3,5,7]
===
===
]]]
[[[
===
===
共301行:
py_adhoc_call { +lineno }  script.素数链   ,枚举冫扩展幺链素数牜小于六十四比特扌 --_max1_='2**32' ='[]'
... ...
... ...
296:(1478233217, 9)
297:(11792393, 10)
298:(3017867393, 10)
299:(753929249, 10)
300:(3015716897, 10)
301:(23584787, 11)
===
===
共97033行:
py_adhoc_call { +lineno }  script.素数链   ,枚举冫扩展幺链素数牜小于六十四比特扌 --_max1_='2**32' ='[3]'
... ...
... ...
97002:(3409113509, 12)
97003:(2991836129, 12)
97004:(1682907823, 12)
97005:(3820871269, 13)
97006:(2547247553, 13)
97007:(2149240123, 13)
97008:(537310013, 13)
97009:(1910423969, 13)
97010:(716408989, 13)
97011:(2865635953, 13)
97012:(1074613483, 13)
97013:(1910423939, 13)
97014:(2865632579, 13)
97015:(53065907, 13)
97016:(3820743989, 13)
97017:(1909737419, 13)
97018:(954902129, 13)
97019:(716176597, 13)
97020:(59681213, 13)
97021:(179043637, 13)
97022:(3819597329, 13)
97023:(2864697233, 13)
97024:(3222784387, 13)
97025:(1611392197, 13)
97026:(954264107, 13)
97027:(2862792319, 13)
97028:(2544703907, 13)
97029:(3720003709, 13)
97030:(2547163537, 14)
97031:(2148523669, 14)
97032:(716174549, 14)
97033:(1432349099, 15)
===
>>> 97033/2**32
2.2592255845665932e-05
>>> 97033/(2**32//32)
0.0007229521870613098
>>> 97033/(2**32//32) *100
0.07229521870613098

[素数涉及率{<2**32} ~= (0.07%)]
===
===
]]]

[[[
py_adhoc_call { +lineno }  script.素数链   ,50:枚举冫扩展幺链素数牜加二枚举扌 ='[]'
py_adhoc_call { +lineno }  script.素数链   ,100:枚举冫扩展幺链素数牜加二枚举扌 ='[]'
    很慢！？
    因为『加二』
===
1:(3, 1)
2:(5, 1)
3:(7, 2)
4:(11, 2)
5:(13, 2)
6:(17, 1)
7:(23, 3)
8:(29, 3)
9:(41, 2)
10:(47, 4)
11:(53, 3)
12:(59, 4)
13:(83, 3)
14:(89, 3)
15:(97, 2)
16:(107, 4)
17:(113, 3)
18:(137, 2)
19:(167, 4)
20:(179, 4)
21:(193, 2)
22:(227, 4)
23:(233, 4)
24:(257, 1)
25:(353, 3)
26:(359, 5)
27:(389, 3)
28:(449, 3)
29:(467, 5)
30:(641, 2)
31:(719, 6)
32:(769, 2)
33:(773, 3)
34:(857, 5)
35:(929, 4)
36:(1097, 3)
37:(1283, 3)
38:(1409, 3)
39:(1433, 5)
40:(1439, 7)
41:(1553, 3)
42:(1697, 4)
43:(1889, 5)
44:(2657, 4)
45:(2819, 4)
46:(2879, 8)
47:(3089, 3)
48:(3329, 3)
49:(3593, 4)
50:(3617, 4)
51:(3779, 6)
52:(5639, 5)
53:(6659, 4)
54:(6857, 6)
55:(7187, 5)
56:(7433, 5)
57:(7457, 5)
58:(7559, 7)
59:(11273, 4)
60:(11279, 6)
61:(11393, 4)
62:(11489, 6)
63:(11777, 4)
64:(12289, 2)
65:(13313, 3)
66:(13577, 5)
67:(13697, 5)
68:(14369, 4)
69:(14867, 6)
70:(21377, 5)
71:(22787, 5)
72:(26627, 4)
73:(26633, 4)
74:(40961, 2)
75:(41057, 4)
76:(45569, 4)
77:(45953, 6)
78:(46049, 8)
79:(49157, 3)
80:(49409, 3)
81:(49697, 4)
82:(53267, 5)
83:(59393, 4)
84:(60449, 6)
85:(65537, 1)
86:(83969, 3)
87:(91139, 5)
88:(92033, 7)
89:(98849, 4)
90:(114689, 3)
91:(118787, 5)
92:(118913, 5)
93:(119297, 5)
94:(120833, 5)
95:(120899, 7)
96:(120929, 7)
97:(140417, 4)
98:(163841, 2)
99:(182279, 6)
100:(182297, 6)
===
===
===
]]]
[[[
py_adhoc_call { +lineno }  script.素数链   ,50:枚举冫扩展幺链素数牜加二枚举扌 ='[3]'
===
1:(3, 1)
2:(5, 1)
3:(7, 1)
4:(11, 2)
5:(13, 1)
6:(17, 1)
7:(19, 1)
8:(23, 3)
9:(29, 2)
10:(31, 2)
11:(37, 1)
12:(41, 2)
13:(43, 2)
14:(47, 4)
15:(53, 2)
16:(59, 3)
17:(61, 2)
18:(67, 3)
19:(73, 1)
20:(79, 2)
21:(83, 3)
22:(89, 3)
23:(97, 1)
24:(103, 2)
25:(107, 3)
26:(109, 1)
27:(113, 2)
28:(127, 2)
29:(137, 2)
30:(139, 4)
31:(149, 2)
32:(157, 2)
33:(163, 1)
34:(167, 4)
35:(173, 3)
36:(179, 4)
37:(181, 2)
38:(193, 1)
39:(199, 3)
40:(223, 2)
41:(227, 3)
42:(229, 2)
43:(233, 3)
44:(241, 2)
45:(257, 1)
46:(269, 4)
47:(271, 2)
48:(277, 4)
49:(283, 5)
50:(293, 2)
===
]]]
[[[
py_adhoc_call { +lineno }  script.素数链   ,100:枚举冫扩展幺链素数牜归纳生成扌 ='[]'
===
... ...
... ...
94:(120833, 5)
95:(120899, 7)
96:(120929, 7)
97:(140417, 4)
98:(163841, 2)
99:(182279, 6)
100:(182297, 6)
===
]]]
[[[
py_adhoc_call { +lineno }  script.素数链   ,50:枚举冫扩展幺链素数牜归纳生成扌 ='[]'
===
... ...
... ...
46:(2879, 8)
47:(3089, 3)
48:(3329, 3)
49:(3593, 4)
50:(3617, 4)
===
]]]
[[[
py_adhoc_call { +lineno }  script.素数链   ,50:枚举冫扩展幺链素数牜归纳生成扌 ='[3]'
===
... ...
... ...
46:(269, 4)
47:(271, 2)
48:(277, 4)
49:(283, 5)
50:(293, 2)
===
]]]
[[[
py_adhoc_call { +lineno }  script.素数链   ,50:枚举冫扩展幺链素数牜归纳生成扌 ='[3]' --_max1_=283
===
... ...
... ...
46:(269, 4)
47:(271, 2)
48:(277, 4)
===
]]]

>>> from itertools import islice
>>> [*islice(枚举冫链长纟扩展幺链素数扌([3,5,7]), 100)]
[1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 3, 1, 1, 1, 2, 2, 3, 2, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 3, 3, 1, 3, 1, 4, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 4, 2, 2, 1, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 3, 3, 1, 1, 3, 2, 2, 2, 2, 1, 2, 4, 2]
>>> [*islice(枚举冫链长纟扩展幺链素数扌([3,5,7], _max1_=283), 100)]
[1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 3, 1, 1, 1, 2, 2, 3, 2, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 3, 3, 1, 3, 1]



#]]]'''
__all__ = r'''
欤幺链素数牜小于六十四比特扌
枚举冫幺链素数牜小于六十四比特扌
    提取数据冫邪序列表纟幺链素数牜小于六十四比特

欤扩展幺链素数牜小于六十四比特扌
    枚举冫扩展幺链素数牜小于六十四比特扌



欤扩展幺链素数扌
    求冫链长纟扩展幺链素数扌
    枚举冫扩展幺链素数牜加二枚举扌
    枚举冫扩展幺链素数牜归纳生成扌
    枚举冫链长纟扩展幺链素数扌

'''.split()#'''
__all__

from ast import literal_eval

from seed.iters.is_sorted import is_strict_sorted
from seed.tiny import mk_tuple
from seed.tiny_.check import check_type_is, check_int_ge
from seed.math.is_prime__le_pow2_64 import is_prime__le_pow2_64
from seed.math.semi_factor_pint_via_trial_division import semi_factor_pint_via_trial_division, iter_unsorted_products_of_coprime_factors__ge_le


from seed.math.is_prime__via_complete_factorization_Nmm_ import is_prime__via_complete_factorization_Nmm_


#枚举冫扩展幺链素数牜归纳生成扌<<==:
#from collections import deque
from itertools import count as count_
from heapq import heappush, heapreplace, heappop

from seed.tiny import snd
from seed.types.LazyList import LazyList# LazyListError
#from seed.types.LazyList import to_LazyList, to_LazyListIter
from seed.math.iter_sorted_products_of_uints import iter_sorted_products_of_strict_sorted_pairwise_coprime_uints# iter_sorted_products_of_strict_sorted_pairwise_coprime_uints__with_ifactor_exp_pairs #iter_sorted_products_of_uints
def __():
  def iter_sorted_products_of_strict_sorted_pairwise_coprime_uints(sorted_coprime_factors, /, *, finite_seq_vs_infinite_seq, turnoff__verify_factors_are_pairwise_coprime):
    ...
  def iter_sorted_products_of_strict_sorted_pairwise_coprime_uints__with_ifactor_exp_pairs(sorted_coprime_factors, /, *, finite_seq_vs_infinite_seq, turnoff__verify_factors_are_pairwise_coprime):
    ...









######################
######################
######################

_pow2_63 = 1<<63
_pow2_64 = 1<<64

def 欤幺链素数牜小于六十四比特扌(n, /):
    check_type_is(int, n)
    while 1:
        if not (3 <= n < _pow2_64 and is_prime__le_pow2_64(n)):
            return False
        odd4n = n - 1
        while odd4n&1 == 0:
            odd4n >>= 1
        #return odd4n == 1 or 欤幺链素数牜小于六十四比特扌(odd4n)
        if odd4n == 1:
            return True
        n = odd4n
    raise 000

def 枚举冫幺链素数牜小于六十四比特扌():
    '-> Iter (幺链素数,链长) where [幺链素数 < 2**64] # [wfs:广度优先算法==>>[链长:递增]]'
    phs = [(1, 0)]
        # :: [(odd4n, height)]
        # :: [((1|幺链素数), 链长)]
    i = 0
    prev_height = -1
    while i < len(phs):
        (odd4n, height) = phs[i]
        i += 1
        height += 1
        # [(2**(ez4n+1)*odd4n+1) == n < 2**64]
        # [odd4n < (2**64-1)/2/2**ez4n < 2**32]
        half4n = odd4n
        while half4n < _pow2_63:
            half4n *= 2
            n = half4n + 1
            assert n < _pow2_64
            if is_prime__le_pow2_64(n):
                assert prev_height <= height
                    # [wfs:广度优先算法==>>[链长:递增]]
                prev_height = height
                phs.append((n, height))
                yield (n, height)

    return

def 提取数据冫邪序列表纟幺链素数牜小于六十四比特(doc=__doc__, /):
    #提取数据
    def __(doc, /):
        _, _doc = doc.split(':枚举冫幺链素数牜小于六十四比特扌:begin\n')
        _doc_, _ = _doc.split('\n:枚举冫幺链素数牜小于六十四比特扌:end')
        ls = _doc_.split('\n')
        assert 978 == len(ls)
        s = ','.join(ls)
        s = f'{{{s}}}'
        d = literal_eval(s)
        phs = sorted(d.items())
        for i, (j, (p, height)) in enumerate(phs, 1):
            assert i == j
            assert p.bit_count()-1 == height
            yield p
    邪序列表纟幺链素数牜小于六十四比特 = tuple(__(doc))
    return 邪序列表纟幺链素数牜小于六十四比特
if __name__ == "__main__":
    邪序列表纟幺链素数牜小于六十四比特 = 提取数据冫邪序列表纟幺链素数牜小于六十四比特(__doc__)
    assert all(map(欤幺链素数牜小于六十四比特扌, 邪序列表纟幺链素数牜小于六十四比特))








######################
######################
######################
def 欤扩展幺链素数牜小于六十四比特扌(ps, n, /):
    check_type_is(int, n)
    len(ps)
    qs = [2, *ps]
    while 1:
        if not (3 <= n < _pow2_64 and is_prime__le_pow2_64(n)):
            return False
        (q2e4Nmm, unfactored_part4Nmm) = semi_factor_pint_via_trial_division(qs, n-1)
        rigid4n = unfactored_part4Nmm
        assert rigid4n&1
        #return rigid4n == 1 or 欤扩展幺链素数牜小于六十四比特扌(ps, rigid4n)
        if rigid4n == 1:
            return True
        n = rigid4n
    raise 000

def 枚举冫扩展幺链素数牜小于六十四比特扌(ps, /, *, _max1_=_pow2_64, turnoff__verify_outputs_are_unique=False):
    '-> Iter (扩展幺链素数,链长) where [扩展幺链素数 < _max1_ <= 2**64] # [wfs:广度优先算法==>>[链长:递增]]'
    if not 2 <= _max1_ <= _pow2_64:raise ValueError(_max1_)

    ps = sorted({p for p in ps if p < _max1_})
    for p in ps:
        if not is_prime__le_pow2_64(p): raise ValueError(p)
    len(ps)
    qs = (2, *ps) if 2 not in ps[:1] else (*ps,)
    ps = None
    assert qs
    assert qs[0] == 2
    assert qs.count(2) == 1
    p_set = set(qs[1:])

    def f(lsls, j4q, q, /):
        yield
    phs = [(1, 0)]
        # :: [(rigid4n, height)]
        # :: [((1|扩展幺链素数), 链长)]
    i = 0
    prev_height = -1
    if not turnoff__verify_outputs_are_unique:
        outs = set()
    while i < len(phs):
        (rigid4n, height) = phs[i]
        i += 1
        height += 1
        min__n_neg1 = rigid4n*2
        lsls = [[min__n_neg1]]
        max__scale = (_max1_-2)//min__n_neg1
            # [n-1 == n_neg1 == min__n_neg1*scale <= min__n_neg1*max__scale < _max1_-1]
            # [min__n_neg1*max__scale <= _max1_-2]
            # [max__scale <= (_max1_-2) /min__n_neg1]
            # [max__scale <= (_max1_-2)//min__n_neg1]
            #
        if not max__scale >= 1:
            continue

        it = iter_unsorted_products_of_coprime_factors__ge_le(coprime_factors:=qs, lowerbound:=1, upperbound:=max__scale, turnoff__verify_factors_are_pairwise_coprime=True)
        for scale in it:
            n_neg1 = min__n_neg1*scale
            n = 1+n_neg1
            assert n < _max1_
            if is_prime__le_pow2_64(n):
                assert prev_height <= height
                    # [wfs:广度优先算法==>>[链长:递增]]
                prev_height = height
                if not n in p_set:
                    phs.append((n, height))
                if not turnoff__verify_outputs_are_unique:
                    assert not n in outs
                    outs.add(n)
                yield (n, height)

    return






######################
######################
######################
def 欤扩展幺链素数扌(ps, n, /, *, _ps_is_qs_=False):
    return bool(求冫链长纟扩展幺链素数扌(ps, n, _ps_is_qs_=_ps_is_qs_))
def _ps2qs_(ps, /, *, _ps_is_qs_):
    if _ps_is_qs_:
        qs = ps
        check_type_is(tuple, qs)
        if not (qs and qs[0] == 2 and is_strict_sorted(qs)):raise ValueError(qs)
    else:
        ps = mk_tuple(ps)
        if ps and ps[0] == 2 and is_strict_sorted(ps):
            qs = ps
        else:
            qs = tuple(sorted({2, *ps}))
        qs
    return qs
def 求冫链长纟扩展幺链素数扌(ps, n, /, *, _ps_is_qs_=False):
    '-> 链长/uint'
    check_type_is(int, n)
    qs = _ps2qs_(ps, _ps_is_qs_=_ps_is_qs_)
    if not (3 <= n):
        return 0#False
    stack = []
    while 1:
        (q2e4Nmm, unfactored_part4Nmm) = semi_factor_pint_via_trial_division(qs, n-1)
        stack.append((n, q2e4Nmm, unfactored_part4Nmm))

        rigid4n = unfactored_part4Nmm
        assert rigid4n&1
        if rigid4n == 1:
            break
        n = rigid4n
    L = len(stack)
    assert stack[-1][-1] == 1
        # [first_round.p_or_1 == 1]
    while stack:
        (n, q2e4Nmm, p_or_1) = stack.pop()
        # [[p_or_1 == 1]or[is_prime(p_or_1)]]
        if not p_or_1 == 1:
            # [is_prime(p_or_1)]
            p = p_or_1
            # [is_prime(p)]
            assert not p in q2e4Nmm
            q2e4Nmm[p] = 1
        # [is_complete_factorization_of_(n-1, q2e4Nmm)]
        if not is_prime__via_complete_factorization_Nmm_(q2e4Nmm, n):
            return 0#False
        # [is_prime(n)]
        # !! [next_round.p_or_1 == curr_round.n]
        # [is_prime(next_round.p_or_1)]
    assert L
    return L#True

_f4SPRP = None
def _is_SPRP_(n, /):
    global _f4SPRP
    f = _f4SPRP
    if f is None:
        from seed.math.prime_gens import detect_strong_pseudoprime__not_waste_too_much_time_ as _f4SPRP
        f = _f4SPRP
    if f is None:
        raise 000
    return bool(f(n))

def 枚举冫扩展幺链素数牜加二枚举扌(ps, /, *, _ps_is_qs_=False):
    '-> Iter (扩展幺链素数,链长) # [加二枚举==>>[扩展幺链素数:递增]] #加二枚举:太耗时 #归纳生成法能起到修剪无用分支的作用'
    qs = _ps2qs_(ps, _ps_is_qs_=_ps_is_qs_)
    for n in count_(3, 2):
        if not _is_SPRP_(n):continue
        L = 求冫链长纟扩展幺链素数扌(qs, n, _ps_is_qs_=True)
        if L:
            yield (n, L)
    raise 000






######################
######################
######################
def 枚举冫扩展幺链素数牜归纳生成扌(ps, /, *, _max1_=None, _ps_is_qs_=False):
    '-> Iter (扩展幺链素数,链长) # [归纳生成==>>[扩展幺链素数:递增]] #加二枚举:太耗时 #归纳生成法能起到修剪无用分支的作用'
    qs = _ps2qs_(ps, _ps_is_qs_=_ps_is_qs_)
    q_set = frozenset(qs)
    # [rigid4n == (1|out exclude qs)]
    # [scale <- products_of(qs)]
    # [n := 1+2*scale*rigid4n]
    # [n := 1+2*scale*(1|out-{*qs})]
    #
    # [nhr == (N,height4n,rigid4n) == (n,h4n,r4n)]
    # [rh == (rigid4n,height4rigid4n) == (r,h4r)]
    # [oh == (out,height4out) == (o,h4o) == (扩展幺链素数,链长)]

    heap = []
        # :: [(nhr, Iter nhr)]
        # [nhr == (N,height4n,rigid4n)]
    scales = LazyList(iter_sorted_products_of_strict_sorted_pairwise_coprime_uints(qs, finite_seq_vs_infinite_seq=False, turnoff__verify_factors_are_pairwise_coprime=False))
        # :: [product_of_qs]


    def _iter_nhrs5rh_(rh, /):
        '-> Iter nhr'
        (rigid4n, h) = rh
        #h : h4r --> h4n
        h += 1
        for sc in scales:
            # [n := 1+2*scale*rigid4n]
            n = 1+2*sc*rigid4n
            yield (n, h, rigid4n)
    #is_head_ok_
    if 0:
        def is_head_ok_(head, /):
            #(n, h4n, r4n) = head #nhr
            return (_max1_ is None or head[0] < _max1_)
    elif _max1_ is None:
        def is_head_ok_(head, /):
            return True
    else:
        def is_head_ok_(head, /):
            #(n, h4n, r4n) = head #nhr
            return (head[0] < _max1_)
    #end-is_head_ok_
    def _put_rh_(rh, /):
        it__nhrs = _iter_nhrs5rh_(rh)
        head = next(it__nhrs)
        if not is_head_ok_(head):
            return
        heap_item = (head, it__nhrs)
        heappush(heap, heap_item)
    def _extract_one_nhr_():
        (nhr, tail) = heap[0]
        head = next(tail)

        if not is_head_ok_(head):
            heappop(heap)
        else:
            heapreplace(heap, (head, tail))
        return nhr
    def is_prime_nr_(n, rigid4n, /):
        if not rigid4n == 1:
            ps4Nmm = (*qs, rigid4n)
        else:
            ps4Nmm = qs
        return is_prime__via_complete_factorization_Nmm_(ps4Nmm, n)

    rh0 = (1, 0)
    _put_rh_(rh0)
    def _iter_ohs_():
        '-> Iter (扩展幺链素数,链长) #严格递增'
        #while 1:
        #   now:++_max1_
        while heap:
            nhr = _extract_one_nhr_()
            (n, h4n, r4n) = nhr
            if not is_prime_nr_(n, r4n):
                continue
            oh = (o, h4o) = (n, h4n)
            yield oh
            if not o in q_set:
                rh = oh
                _put_rh_(rh)
        if _max1_ is None:
            raise 000
        return
    return _iter_ohs_()

def 枚举冫链长纟扩展幺链素数扌(ps, /, *, _max1_=None, _ps_is_qs_=False):
    '-> 序列纟链长纟扩展幺链素数/Iter 链长 #归纳生成'
    #view others/数学/有递增趋势的非递增序列.txt
    return map(snd, 枚举冫扩展幺链素数牜归纳生成扌(ps, _max1_=_max1_, _ps_is_qs_=_ps_is_qs_))



__all__
from script.素数链 import *
