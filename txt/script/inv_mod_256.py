
r'''[[[[[
e script/inv_mod_256.py
py script/inv_mod_256.py

简单地 加密字节
用途:
    比如:将 『/sdcard/0my_files/book/math/』里的文件 各自压缩，再拆成片段 至 独占文件夹，备份到github
    片段 独立 简单 字节加密
    片段文件夹的文件名 = 原文件的文件名 字符加密？
,(29, 53, 1537, (6, 1))
    29*53%256  #最小，双-素数
    29*53=1537=6*256+1
        简单加密(x) = (a*x+b)%M
            a=29
            b=?233


view ../../python3_src/nn_ns/math_nn/integer/inv_mod_pow.py

e /sdcard/0my_files/git_repos/python3_src/nn_ns/math_nn/integer/mod.py
from fractions import gcd
ImportError: cannot import name 'gcd' from 'fractions' (/data/data/com.termux/files/usr/lib/python3.10/fractions.py)
from seed.math.gcd import gcd, gcd_many



[[[
.../txt_phone/txt $ py script/inv_mod_256.py
1 1
    1, 1
3 171
    11, 10101011
5 205
    101, 11001101
7 183
    111, 10110111
9 57
    1001, 111001
11 163
    1011, 10100011
13 197
    1101, 11000101
15 239
    1111, 11101111
17 241
    10001, 11110001
19 27
    10011, 11011
21 61
    10101, 111101
23 167
    10111, 10100111
25 41
    11001, 101001
29 53
    11101, 110101
31 223
    11111, 11011111
33 225
    100001, 11100001
35 139
    100011, 10001011
37 173
    100101, 10101101
39 151
    100111, 10010111
43 131
    101011, 10000011
45 165
    101101, 10100101
47 207
    101111, 11001111
49 209
    110001, 11010001
51 251
    110011, 11111011
55 135
    110111, 10000111
59 243
    111011, 11110011
63 191
    111111, 10111111
65 193
    1000001, 11000001
67 107
    1000011, 1101011
69 141
    1000101, 10001101
71 119
    1000111, 1110111
73 249
    1001001, 11111001
75 99
    1001011, 1100011
77 133
    1001101, 10000101
79 175
    1001111, 10101111
81 177
    1010001, 10110001
83 219
    1010011, 11011011
85 253
    1010101, 11111101
87 103
    1010111, 1100111
89 233
    1011001, 11101001
91 211
    1011011, 11010011
93 245
    1011101, 11110101
95 159
    1011111, 10011111
97 161
    1100001, 10100001
101 109
    1100101, 1101101
105 217
    1101001, 11011001
111 143
    1101111, 10001111
113 145
    1110001, 10010001
115 187
    1110011, 10111011
117 221
    1110101, 11011101
121 201
    1111001, 11001001
123 179
    1111011, 10110011
125 213
    1111101, 11010101
127 127
    1111111, 1111111
129 129
    10000001, 10000001
137 185
    10001001, 10111001
147 155
    10010011, 10011011
149 189
    10010101, 10111101
153 169
    10011001, 10101001
157 181
    10011101, 10110101
195 235
    11000011, 11101011
199 247
    11000111, 11110111
203 227
    11001011, 11100011
215 231
    11010111, 11100111
229 237
    11100101, 11101101
255 255
    11111111, 11111111
[(1, 1, 1, (0, 1))
,(19, 27, 513, (2, 1))
,(9, 57, 513, (2, 1))
,(3, 171, 513, (2, 1))
,(25, 41, 1025, (4, 1))
,(5, 205, 1025, (4, 1))
,(21, 61, 1281, (5, 1))
,(7, 183, 1281, (5, 1))
,(29, 53, 1537, (6, 1))
,(11, 163, 1793, (7, 1))
,(13, 197, 2561, (10, 1))
,(15, 239, 3585, (14, 1))
,(23, 167, 3841, (15, 1))
,(17, 241, 4097, (16, 1))
,(35, 139, 4865, (19, 1))
,(43, 131, 5633, (22, 1))
,(39, 151, 5889, (23, 1))
,(37, 173, 6401, (25, 1))
,(31, 223, 6913, (27, 1))
,(67, 107, 7169, (28, 1))
,(75, 99, 7425, (29, 1))
,(55, 135, 7425, (29, 1))
,(45, 165, 7425, (29, 1))
,(33, 225, 7425, (29, 1))
,(71, 119, 8449, (33, 1))
,(87, 103, 8961, (35, 1))
,(69, 141, 9729, (38, 1))
,(47, 207, 9729, (38, 1))
,(77, 133, 10241, (40, 1))
,(49, 209, 10241, (40, 1))
,(101, 109, 11009, (43, 1))
,(63, 191, 12033, (47, 1))
,(65, 193, 12545, (49, 1))
,(51, 251, 12801, (50, 1))
,(79, 175, 13825, (54, 1))
,(81, 177, 14337, (56, 1))
,(59, 243, 14337, (56, 1))
,(95, 159, 15105, (59, 1))
,(97, 161, 15617, (61, 1))
,(111, 143, 15873, (62, 1))
,(127, 127, 16129, (63, 1))
,(113, 145, 16385, (64, 1))
,(129, 129, 16641, (65, 1))
,(83, 219, 18177, (71, 1))
,(73, 249, 18177, (71, 1))
,(91, 211, 19201, (75, 1))
,(89, 233, 20737, (81, 1))
,(115, 187, 21505, (84, 1))
,(85, 253, 21505, (84, 1))
,(123, 179, 22017, (86, 1))
,(147, 155, 22785, (89, 1))
,(105, 217, 22785, (89, 1))
,(93, 245, 22785, (89, 1))
,(121, 201, 24321, (95, 1))
,(137, 185, 25345, (99, 1))
,(153, 169, 25857, (101, 1))
,(117, 221, 25857, (101, 1))
,(125, 213, 26625, (104, 1))
,(149, 189, 28161, (110, 1))
,(157, 181, 28417, (111, 1))
,(195, 235, 45825, (179, 1))
,(203, 227, 46081, (180, 1))
,(199, 247, 49153, (192, 1))
,(215, 231, 49665, (194, 1))
,(229, 237, 54273, (212, 1))
,(255, 255, 65025, (254, 1))
]
.../txt_phone/txt $
]]]

#]]]]]'''

if 0:
    import math
    help(math)
    import fractions
    help(fractions)
    from math import gcd
    help(gcd)

from nn_ns.math_nn.integer.mod import invmod
from nn_ns.math_nn.integer.inv_mod_pow import InvModPow
from seed.tiny import snd, at
from seed.helper.stable_repr import stable_repr__expand_top_layer, stable_repr_print__expand_top_layer
import sys



def _t():
    inv_mod_pow2_ = InvModPow(2)
    num_bits = 8
    modulus = 2**num_bits
    ps = []
    for i in range(1, modulus, 2):
        inv = inv_mod_pow2_(i, num_bits)
        assert 0 <= i < modulus
        assert 0 <= inv < modulus
        assert 1 == (i*inv) % modulus

        if i <= inv:
            print(i, inv)
            print(f'    {i:b}, {inv:b}')
            m = i*inv
            qr = divmod(m, modulus)
            ps.append((i, inv, m, qr))
    ps.sort(key=snd)   #两重排序！
    ps.sort(key=at[-1])
    stable_repr_print__expand_top_layer(sys.stdout, ps)
    print()


_t()


