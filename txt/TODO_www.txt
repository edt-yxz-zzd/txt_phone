
小说推荐
app 定时关闭进程
app 图论 作图 手动调整 类似『线条别交叉』
  线条别交叉 @com.livelikepoet.linecross
app svn/file-merge/backup
  要能够修改TF卡
酵母的保存
预防接种服务APP

详尽:达尔文过程六要素
  源起:
    e others/book/read.txt
    view /sdcard/20220614_copy5sd__0my_files/book_txt/小说天堂txt/重命名/小说天堂txt-8/《大脑如何思维——智力演化的今昔》.txt
2005:小说天堂:《通向完美的桥梁——数学方法谈》、《遨游系统的海洋——系统方法谈》、《攀登理性的阶梯——逻辑方法谈》、《走进实验的殿堂——实验方法谈》
  已有:系统方法谈
  系统要素分类:(决策层+受控层)<<==(统治阶级+被统治阶级)<<==(人+信息/物质/能量)
  控制论:退馈pullback???
出处:天之至私，用之至公。禽之制在气。生者，死之根；死者，生之根。
  发现是:阴符经
出处:时来天地皆同力，运去英雄不自由
缘督以为经
  e others/杂/词语解释/缘督.txt
庄子注#向郭注，郭象注
  [已有]老子:王弼注
中国哲学简史-英文版
  简史:翻译？
官官忘:忽怳 出处
待确认:《啄木诗》:[#?遗漏?#]此盖自卑
  => e ../lots/NOTE/诗/啄木诗.txt

待确认:史记:(嬴政)...姓赵氏 => 我:嬴姓赵氏
  => e others/杂/词语解释/夏五郭公.txt

道之华，前知，放心:
  find  /sdcard/0my_files/novel/  -name '*十州*'
  find /sdcard/20220614_copy5sd__0my_files/novel/  -name '*十州*'
  view ++enc=gbk /sdcard/20220614_copy5sd__0my_files/novel/11/《十州风云志》（校对版全本）作者：知秋.txt
    前知者道之华，愚之始。
    学问之道无他，求其放心而已。
e others/杂/词语解释/放心.txt

download:new edition:/sdcard/0my_files/book/math/factorint/202308/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance)/Prime numbers-A Computational Perspective(2ed)(2005)(Pomerance).pdf
download:new edition:/sdcard/0my_files/book/math/factorint/snd/The new book of prime number records(3ed)(1996)(Ribenboim).djvu
???what is:the first case of Fermat's last theorem (which I abbreviate First FLT)
x**p+y**p=z**p into two cases:
  • Case 1: x,y,z pairwise coprime and not p|xyz
  • Case 2: x,y,z pairwise coprime and p|xyz
e others/数学/术语/费马大定理之第一子类.txt

TODO:整数分解:Cunningham numbers (k**n+(+/-1))
  view script/辅助冫有限域本原根判定.py
TODO:oeis class number #formulas
e others/数学/class_number/class_number.txt
[[[
===
]]]
[[[
===
]]]
[[[
===
]]]
[[[
===
]]]
[[[
===
]]]
[[[
===
]]]

TODO:lim sup
TODO:lim inf
psp vs prp
naive vs native

doc:pari,fortune??? FORTRAN
  download:book about fortune #not forth
DONE:pkg install lfortran
pkg show lfortran
Interactive Fortran 77: A Hands on Approach by Ian D Chivers, Jane Sleightholme
Introduction to Programming using Fortran 95/2003/2008 by Ed Jorgensen
Professional Programmer’s Guide to Fortran77 by Clive G. Page

DONE:pkg install openssl-tool


fail:pip install sympy -f /sdcard/0my_files/zip/py/sympy-1.5.1-py2.py3-none-any.whl
  howto install wheel
  howto install downloaded package py
SageMath
  https://www.sagemath.org/download.html
  1G多
pip download sympy
pip install sympy
  python setup.py install
   py.test --pyargs simpy
   https://pypi.org/project/simpy
   https://pypi.python.org/pypi/sympy/
   https://files.pythonhosted.org/packages/a2/09/77d55d46fd61b4a135c444fc97158ef34a095e5681d0a6c10b75bf356191/sympy-1.14.0-py3-none-any.whl
   wget https://files.pythonhosted.org/packages/83/d3/803453b36afefb7c2bb238361cd4ae6125a569b4db67cd9e79846ba2d68c/sympy-1.14.0.tar.gz
   d3d3fe8df1e5a0b42f0e7bdf50541697dbe7d23746e894990c030e2b05e72517
[[[
https://pypi.org/project/sympy/#files
===
Skip to main content
PyPI
Menu 
Search PyPI
Search projects
Search
sympy 1.14.0
pip install sympyCopy PIP instructions
Latest version
Released: Apr 27, 2025

Computer algebra system (CAS) in Python

 Project description
 Project details
 Release history
 Download files
Project description
SymPy
pypi version Join the chat at https://gitter.im/sympy/sympy Zenodo Badge Downloads GitHub Issues Git Tutorial Powered by NumFocus Commits since last release

SymPy Banner

See the AUTHORS file for the list of authors.

And many more people helped on the SymPy mailing list, reported bugs, helped organize SymPy's participation in the Google Summer of Code, the Google Highly Open Participation Contest, Google Code-In, wrote and blogged about SymPy...

License: New BSD License (see the LICENSE file for details) covers all files in the sympy repository unless stated otherwise.

Our mailing list is at https://groups.google.com/forum/?fromgroups#!forum/sympy.

We have a community chat at Gitter. Feel free to ask us anything there. We have a very welcoming and helpful community.

Download
The recommended installation method is through Anaconda, https://www.anaconda.com/products/distribution

You can also get the latest version of SymPy from https://pypi.python.org/pypi/sympy/

To get the git version do

$ git clone https://github.com/sympy/sympy.git
For other options (tarballs, debs, etc.), see https://docs.sympy.org/dev/install.html.

Documentation and Usage
For in-depth instructions on installation and building the documentation, see the SymPy Documentation Style Guide.

Everything is at:

https://docs.sympy.org/

You can generate everything at the above site in your local copy of SymPy by:

$ cd doc
$ make html
Then the docs will be in _build/html. If you don't want to read that, here is a short usage:

From this directory, start Python and:

>>> from sympy import Symbol, cos
>>> x = Symbol('x')
>>> e = 1/cos(x)
>>> print(e.series(x, 0, 10))
1 + x**2/2 + 5*x**4/24 + 61*x**6/720 + 277*x**8/8064 + O(x**10)
SymPy also comes with a console that is a simple wrapper around the classic python console (or IPython when available) that loads the SymPy namespace and executes some common commands for you.

To start it, issue:

$ bin/isympy
from this directory, if SymPy is not installed or simply:

$ isympy
if SymPy is installed.

Installation
To install SymPy using PyPI, run the following command:

$ pip install sympy
To install SymPy using Anaconda, run the following command:

$ conda install -c anaconda sympy
To install SymPy from GitHub source, first clone SymPy using git:

$ git clone https://github.com/sympy/sympy.git
Then, in the sympy repository that you cloned, simply run:

$ pip install .
See https://docs.sympy.org/dev/install.html for more information.

Contributing
We welcome contributions from anyone, even if you are new to open source. Please read our Introduction to Contributing page and the SymPy Documentation Style Guide. If you are new and looking for some way to contribute, a good place to start is to look at the issues tagged Easy to Fix.

Please note that all participants in this project are expected to follow our Code of Conduct. By participating in this project you agree to abide by its terms. See CODE_OF_CONDUCT.md.

Tests
To execute all tests, run:

$./setup.py test
in the current directory.

For the more fine-grained running of tests or doctests, use bin/test or respectively bin/doctest. The master branch is automatically tested by GitHub Actions.

To test pull requests, use sympy-bot.

Regenerate Experimental LaTeX Parser/Lexer
The parser and lexer were generated with the ANTLR4 toolchain in sympy/parsing/latex/_antlr and checked into the repo. Presently, most users should not need to regenerate these files, but if you plan to work on this feature, you will need the antlr4 command-line tool (and you must ensure that it is in your PATH). One way to get it is:

$ conda install -c conda-forge antlr=4.11.1
Alternatively, follow the instructions on the ANTLR website and download the antlr-4.11.1-complete.jar. Then export the CLASSPATH as instructed and instead of creating antlr4 as an alias, make it an executable file with the following contents:

#!/bin/bash
java -jar /usr/local/lib/antlr-4.11.1-complete.jar "$@"
After making changes to sympy/parsing/latex/LaTeX.g4, run:

$ ./setup.py antlr
Clean
To clean everything (thus getting the same tree as in the repository):

$ git clean -Xdf
which will clear everything ignored by .gitignore, and:

$ git clean -df
to clear all untracked files. You can revert the most recent changes in git with:

$ git reset --hard
WARNING: The above commands will all clear changes you may have made, and you will lose them forever. Be sure to check things with git status, git diff, git clean -Xn, and git clean -n before doing any of those.

Bugs
Our issue tracker is at https://github.com/sympy/sympy/issues. Please report any bugs that you find. Or, even better, fork the repository on GitHub and create a pull request. We welcome all changes, big or small, and we will help you make the pull request if you are new to git (just ask on our mailing list or Gitter Channel). If you further have any queries, you can find answers on Stack Overflow using the sympy tag.

Brief History
SymPy was started by Ondřej Čertík in 2005, he wrote some code during the summer, then he wrote some more code during summer 2006. In February 2007, Fabian Pedregosa joined the project and helped fix many things, contributed documentation, and made it alive again. 5 students (Mateusz Paprocki, Brian Jorgensen, Jason Gedge, Robert Schwarz, and Chris Wu) improved SymPy incredibly during summer 2007 as part of the Google Summer of Code. Pearu Peterson joined the development during the summer 2007 and he has made SymPy much more competitive by rewriting the core from scratch, which has made it from 10x to 100x faster. Jurjen N.E. Bos has contributed pretty-printing and other patches. Fredrik Johansson has written mpmath and contributed a lot of patches.

SymPy has participated in every Google Summer of Code since 2007. You can see https://github.com/sympy/sympy/wiki#google-summer-of-code for full details. Each year has improved SymPy by bounds. Most of SymPy's development has come from Google Summer of Code students.

In 2011, Ondřej Čertík stepped down as lead developer, with Aaron Meurer, who also started as a Google Summer of Code student, taking his place. Ondřej Čertík is still active in the community but is too busy with work and family to play a lead development role.

Since then, a lot more people have joined the development and some people have also left. You can see the full list in doc/src/aboutus.rst, or online at:

https://docs.sympy.org/dev/aboutus.html#sympy-development-team

The git history goes back to 2007 when development moved from svn to hg. To see the history before that point, look at https://github.com/sympy/sympy-old.

You can use git to see the biggest developers. The command:

$ git shortlog -ns
will show each developer, sorted by commits to the project. The command:

$ git shortlog -ns --since="1 year"
will show the top developers from the last year.

Citation
To cite SymPy in publications use

Meurer A, Smith CP, Paprocki M, Čertík O, Kirpichev SB, Rocklin M, Kumar A, Ivanov S, Moore JK, Singh S, Rathnayake T, Vig S, Granger BE, Muller RP, Bonazzi F, Gupta H, Vats S, Johansson F, Pedregosa F, Curry MJ, Terrel AR, Roučka Š, Saboo A, Fernando I, Kulal S, Cimrman R, Scopatz A. (2017) SymPy: symbolic computing in Python. PeerJ Computer Science 3:e103 https://doi.org/10.7717/peerj-cs.103

A BibTeX entry for LaTeX users is

@article{10.7717/peerj-cs.103,
 title = {SymPy: symbolic computing in Python},
 author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \v{C}ert\'{i}k, Ond\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, Amit and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\v{c}ka, \v{S}t\v{e}p\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},
 year = 2017,
 month = Jan,
 keywords = {Python, Computer algebra system, Symbolics},
 abstract = {
            SymPy is an open-source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provides additional examples and further outlines details of the architecture and features of SymPy.
         },
 volume = 3,
 pages = {e103},
 journal = {PeerJ Computer Science},
 issn = {2376-5992},
 url = {https://doi.org/10.7717/peerj-cs.103},
 doi = {10.7717/peerj-cs.103}
}
SymPy is BSD licensed, so you are free to use it whatever you like, be it academic, commercial, creating forks or derivatives, as long as you copy the BSD statement if you redistribute it (see the LICENSE file for details). That said, although not required by the SymPy license, if it is convenient for you, please cite SymPy when using it in your work and also consider contributing all your changes back, so that we can incorporate it and all of us will benefit in the end.

Project details
Verified details 
These details have been verified by PyPI
Project links
Source
GitHub Statistics
Maintainers
Avatar for Aaron.Meurer from gravatar.com Aaron.Meurer
Avatar for certik from gravatar.com certik
Avatar for oscarbenjamin from gravatar.com oscarbenjamin
Unverified details
These details have not been verified by PyPI
Project links
Homepage
Meta
License: BSD License (BSD)
Author: SymPy development team
 TagsMath, CAS
Requires: Python >=3.9
Provides-Extra: dev
Classifiers
License
OSI Approved :: BSD License
Operating System
OS Independent
Programming Language
Python
Python :: 3
Python :: 3 :: Only
Python :: 3.9
Python :: 3.10
Python :: 3.11
Python :: 3.12
Python :: 3.13
Python :: Implementation :: CPython
Python :: Implementation :: PyPy
Topic
Scientific/Engineering
Scientific/Engineering :: Mathematics
Scientific/Engineering :: Physics

Release history
Release notifications | RSS feed 
1.14.0

Apr 27, 2025

1.14.0rc2 PRE-RELEASE

Apr 25, 2025

1.14.0rc1 PRE-RELEASE

Apr 14, 2025

1.13.3

Sep 18, 2024

1.13.2

Aug 11, 2024

1.13.1

Jul 19, 2024

1.13.0

Jul 8, 2024

1.13.0rc4 PRE-RELEASE

Jul 2, 2024

1.13.0rc3 PRE-RELEASE

Jun 26, 2024

1.13.0rc2 PRE-RELEASE

Jun 16, 2024

1.13.0rc1 PRE-RELEASE

Jun 6, 2024

1.12.1

May 29, 2024

1.12.1rc1 PRE-RELEASE

Mar 31, 2024

1.12.1a4 PRE-RELEASE YANKED

Mar 31, 2024

Reason this release was yanked:

Testing release infrastructure

1.12.1a3 PRE-RELEASE YANKED

Mar 31, 2024

Reason this release was yanked:

Testing release infrastructure

1.12.1a2 PRE-RELEASE YANKED

Mar 30, 2024

Reason this release was yanked:

Testing release infrastructure

1.12.1a1 PRE-RELEASE YANKED

Mar 27, 2024

Reason this release was yanked:

Release was a temporary fix

1.12

May 10, 2023

1.12rc1 PRE-RELEASE

Mar 13, 2023

1.11.1

Aug 30, 2022

1.11

Aug 23, 2022

1.11rc1 PRE-RELEASE

Aug 9, 2022

1.10.1

Mar 20, 2022

1.10

Mar 6, 2022

1.10rc3 PRE-RELEASE

Feb 26, 2022

1.10rc2 PRE-RELEASE

Feb 21, 2022

1.10rc1 PRE-RELEASE

Feb 18, 2022

1.9

Oct 8, 2021

1.9rc1 PRE-RELEASE

Sep 20, 2021

1.8

Apr 9, 2021

1.7.1

Dec 12, 2020

1.7

Nov 29, 2020

1.7rc1 PRE-RELEASE

Nov 23, 2020

1.6.2

Aug 9, 2020

1.6.1

Jul 2, 2020

1.6

May 24, 2020

1.6rc2 PRE-RELEASE

May 19, 2020

1.6rc1 PRE-RELEASE

May 13, 2020

1.5.1

Jan 5, 2020

1.5

Dec 13, 2019

1.5rc1 PRE-RELEASE

Nov 29, 2019

1.5b1 PRE-RELEASE

Nov 17, 2019

1.4

Apr 10, 2019

1.3

Sep 14, 2018

1.2

Jul 9, 2018

1.1.1

Jul 27, 2017

1.1

Jul 6, 2017

1.0

Mar 9, 2016

0.7.6.1

Sep 3, 2015

0.7.6

Nov 20, 2014

0.7.5

Feb 22, 2014

0.7.4.1

Dec 15, 2013

0.7.4

Dec 9, 2013

0.7.3

Jul 13, 2013

0.7.2

Oct 17, 2012

0.7.1

Jul 30, 2011

0.7.0

Jul 1, 2011

0.6.6

Dec 26, 2009

0.6.5

Jul 16, 2009

0.6.4

Apr 5, 2009

0.6.3

Nov 19, 2008

0.6.2

Aug 17, 2008

0.6.1

Jul 22, 2008

0.6.0

Jul 9, 2008

0.5.15

May 24, 2008

0.5.14

Apr 26, 2008

0.5.13-hg

Apr 1, 2008

Download files
Download the file for your platform. If you're not sure which to choose, learn more about installing packages.

Source Distribution
sympy-1.14.0.tar.gz (7.8 MB view details)
Uploaded Apr 27, 2025 Source

Built Distribution
sympy-1.14.0-py3-none-any.whl (6.3 MB view details)
Uploaded Apr 27, 2025 Python 3

File details
Details for the file sympy-1.14.0.tar.gz.

File metadata
Download URL: sympy-1.14.0.tar.gz
Upload date: Apr 27, 2025
Size: 7.8 MB
Tags: Source
Uploaded using Trusted Publishing? Yes
Uploaded via: twine/6.1.0 CPython/3.12.9
File hashes
Hashes for sympy-1.14.0.tar.gz
SHA256
d3d3fe8df1e5a0b42f0e7bdf50541697dbe7d23746e894990c030e2b05e72517
Copy
MD5
9872deb5bd7816dfbc89bec086b9e522
Copy
BLAKE2b-256
83d3803453b36afefb7c2bb238361cd4ae6125a569b4db67cd9e79846ba2d68c
Copy
See more details on using hashes here.

Provenance
The following attestation bundles were made for sympy-1.14.0.tar.gz:

Publisher:  release.yml on sympy/sympy

Attestations:
Values shown here reflect the state when the release was signed and may no longer be current.
Statement:
Statement type: https://in-toto.io/Statement/v1
Predicate type: https://docs.pypi.org/attestations/publish/v1
Subject name: sympy-1.14.0.tar.gz
Subject digest: d3d3fe8df1e5a0b42f0e7bdf50541697dbe7d23746e894990c030e2b05e72517
Sigstore transparency entry: 203388703
Sigstore integration time: Apr 27, 2025
Source repository:
Permalink: sympy/sympy@16fa855354eb7bcabd3fe10993841e03b1382692
Branch / Tag: refs/tags/sympy-1.14.0
Owner: https://github.com/sympy
Access: public
Publication detail:
Token Issuer: https://token.actions.githubusercontent.com
Runner Environment: github-hosted
Publication workflow: release.yml@16fa855354eb7bcabd3fe10993841e03b1382692
Trigger Event: push
File details
Details for the file sympy-1.14.0-py3-none-any.whl.

File metadata
Download URL: sympy-1.14.0-py3-none-any.whl
Upload date: Apr 27, 2025
Size: 6.3 MB
Tags: Python 3
Uploaded using Trusted Publishing? Yes
Uploaded via: twine/6.1.0 CPython/3.12.9
File hashes
Hashes for sympy-1.14.0-py3-none-any.whl
SHA256
e091cc3e99d2141a0ba2847328f5479b05d94a6635cb96148ccb3f34671bd8f5
Copy
MD5
9f9b6994240343ef1f6889d194399de5
Copy
BLAKE2b-256
a20977d55d46fd61b4a135c444fc97158ef34a095e5681d0a6c10b75bf356191
Copy
See more details on using hashes here.

Provenance
The following attestation bundles were made for sympy-1.14.0-py3-none-any.whl:

Publisher:  release.yml on sympy/sympy

Attestations:
Values shown here reflect the state when the release was signed and may no longer be current.
Statement:
Statement type: https://in-toto.io/Statement/v1
Predicate type: https://docs.pypi.org/attestations/publish/v1
Subject name: sympy-1.14.0-py3-none-any.whl
Subject digest: e091cc3e99d2141a0ba2847328f5479b05d94a6635cb96148ccb3f34671bd8f5
Sigstore transparency entry: 203388704
Sigstore integration time: Apr 27, 2025
Source repository:
Permalink: sympy/sympy@16fa855354eb7bcabd3fe10993841e03b1382692
Branch / Tag: refs/tags/sympy-1.14.0
Owner: https://github.com/sympy
Access: public
Publication detail:
Token Issuer: https://token.actions.githubusercontent.com
Runner Environment: github-hosted
Publication workflow: release.yml@16fa855354eb7bcabd3fe10993841e03b1382692
Trigger Event: push

Help
Installing packages
Uploading packages
User guide
Project name retention
FAQs
About PyPI
PyPI Blog
Infrastructure dashboard
Statistics
Logos & trademarks
Our sponsors
Contributing to PyPI
Bugs and feedback
Contribute on GitHub
Translate PyPI
Sponsor PyPI
Development credits
Using PyPI
Terms of Service
Report security issue
Code of conduct
Privacy Notice
Acceptable Use Policy
Status: all systems operational

Developed and maintained by the Python community, for the Python community.
Donate today!

"PyPI", "Python Package Index", and the blocks logos are registered trademarks of the Python Software Foundation.
© 2025 Python Software Foundation
Site map

 English español français 日本語 português (Brasil) українська Ελληνικά Deutsch 中文 (简体) 中文 (繁體) русский עברית Esperanto 한국어
Supported by

AWS
Datadog
Fastly
Google
Pingdom
Sentry
StatusPage
]]]

pkg install iproute2
  for:ip
how to host/dns???

addition chain data path

[[[
http://additionchains.com/
http://additionchains.com/Calculating.html
===

===
Addition Chains
Why?
We often want to raise some value (not necessarily a real value) to an integer power (exponentiation). This is a pretty common operation in cryptography. The product rule of exponents tells us that \(x^a\times x^b=x^{a+b}\). So, let's try and see how we would calculate \(x^{29}\). I pick 29 as this number shows up many strange properties that make the subject worth studying.

\(x^{29}=x^{20}\times x^9\)

\(x^{20}=x^{11}\times x^9\)

\(x^{11}=x^9\times x^2\)

\(x^9=x^8\times x^1\)

\(x^8=x^4\times x^4\)

\(x^4=x^2\times x^2\)

\(x^2=x^1\times x^1=x\times x\)

Now we can dispense with all the \(x^a\) type terms and just record the \(a\) (exponent) values. 1 2 4 8 9 11 20 29. Under the assumption that all the multiplies have the same cost (often true but not true for example with integers as the bigger they get the more expensive they are to multiply) and that squaring \(x^a\times x^a\) is the same cost as a general multiply \(x^a\times x^b, a\ne b\) we want to keep the list of exponents small in number. It turns out that the way I calculated \(x^{29}\) above is an example of a shortest chain. You can't do better than 7 steps (8 exponent values). There are 132 different ways of getting to 29 in 7 steps if we ignore how each exponent value is constructed and just focus on the exponent value. The number of ways of getting to 29 explode as we increase the length. So, for example, in 8, 9, 10 and 11 steps we have 1781, 12619, 58875 and 205368 ways to get to 29 respectively. 

We will put what we saw here into more exact mathematical language next. That will make it easier to describe just how strange this simple problem is. Things that seem obvious are in fact not true and we don't really know very much about the subject.

My primary interest is in trying to find ways that computers can find shortest chains more efficiently. I got interested in this topic trying to hack the VMS password hashing algorithm (Purdy Polynomial). I am a bit of a treasure hunter looking for numbers with strange properties. Few people actually study this area and so this website is here to find people who want to exchange ideas, talk about the area or write programs. Beware it's highly addictive trying to improve addition chain programs.

Send me mail Neill Clift if you're interested.

Definitions
Start with a list of numbers containing initially 1. Perform a number of steps where we add two (not necessarily different) existing numbers together and add the new number to the list. If we eventually arrive at the number \(n\) we call this an addition chain (or more rarely an additive chain) for \(n\).

So, for example, we could create the following list 1,2,3,6,9,9,12,24,18 and call this an addition chain for \(n=18\). We will call the individual values in an addition chain elements and \(n\) the target.

We should note some things about this addition chain for 18.

It contains values bigger than \(n\) like 24. We could remove these and still have a valid addition chain.
It is not ordered by element size. We could order it by size, and this would keep the chain valid if we have eliminated elements greater than the target.
It has duplicate elements. We could remove duplicates and the chain would still be valid.
Some elements may be constructed in more than one way (18=9+9 or 12+6).
We will assume from now on that addition chains are ordered and duplicate or values exceeding the target are removed.

Formally then an addition chain is:

\(1=a_{0}<a_{1}<\cdots<a_{r}=n,\,a_{i} =a_{j} +a_{k}\)  with \(i>j\ge k\ge0\)

We say this addition chain has length \(r\). The chain with the shortest length we call the optimal chain. We denote its length by \(l(n)\). Many interesting questions arise when we consider optimal chains. Lots of stuff that might seem obvious is in fact wrong. For example, it seems reasonable to assume that each step in an addition chain uses the largest element created so far or that the best way to reach \(2n\) is by doubling the last element of a chain for \(n\). Both of these assumptions turn out to be false.

We define:

\(\lambda(n)=\left\lfloor log_{2}(n)\right\rfloor \)

\(v(n)=\begin{cases}
0 & n=0\\
v(\left\lfloor \frac{n}{2}\right\rfloor )+n\bmod2 & n>0
\end{cases}\)   So, it's the number of 1s in the binary representation of n.

\(s(n) = l(n) - \lambda(n)\)

For step \(i\) of an addition chain we have two possibilities:

\(\lambda(a_i) =\lambda(a_{i-1}) + 1\) and we call this a large step
\(\lambda(a_i) =\lambda(a_{i-1})\) and we call this a small step
We can see from this that \(s(n)\) and \(\lambda(n)\) count the number of small and large steps respectively in an optimal addition chain for \(n\).

Additionally for step \(i\) we say that:

If \(a_i=2a_{i-1}\)  is called a doubling
If \(a_i=a_{i-1}+a_j\) is called a star step
We define \(\Lambda(n)\) as the number of optimal addition chains for \(n\). 

The smallest target requiring \(r\) steps in its optimal chain \(c(r) = \min \{n | l(n) = r\}\).

The number of targets requiring exactly \(r\) steps in their optimal chains \(d(r) = |\{n | l(n) = r\}|\).

We will often want to remove the ambiguity of how an addition chain element is constructed. We do this by tracking how each element is formed. I will use a hash notation to show this. For example, in this non-optimal addition chain for 4

1 2 3 4

I will use:

1 2 3 4#1,1 to show the element 4 is made from 2+2 or:

1 2 3 4#0,2 to show the element 4 is made from 1+3.

Here the hash is followed by two zero base indices into the addition chain.

The Amazing cases of \(l(2n)\le l(n)\)
\(l(2n)\le l(n)\)

\(c(r)\) and \(d(r)\) Tables
c(r)/d(r)

Number Of Optimal Addition Chains
Finding \(\Lambda\) Values

Star and \(l^0(n)\) Chains
Star and L0

Conjecture on Trailing Star Steps
Trailing Star Steps

Conjecture on \(\pi(x)\) Values
primes

Knuth-Stolarsky Conjecture
It seems remarkable that \(v(n)\) appears to be bounded by the small step count of the chain:

\(v(n)\le2^{s(n)}\)

This conjecture is normally stated differently:

\(l(n)\ge\lambda(n)+\left\lceil log_{2}(v(n))\right\rceil \)

Cases \(s(n)=0,1\) can be determined with simple bounds. If \(s(n)=0\) then \(n=2^A\) and with \(s(n)=1\) then \(n=2^A+2^B\) is the best we can do bit count wise. Knuth outlines the case for \(s(n)=2\) yielding \(n=2^A+2^B+2^C\) or four cases were  \(n=2^A+2^B+2^C+2^D\) (for example \(A-B=C-D\)).

The three-bit case was proved in [8] and the four-bit case by Knuth himself. Ed Thurber in his PhD thesis [9] proved the \(s(n)=3\) case. Achim Flammenkamp in his diploma thesis [10] wrote a computer program to enumerate all numbers reachable via 3 small steps and likewise found \(v(n)\le8\). I wrote a program to mimic the proof technique of Ed Thurber's thesis and verified the result but could not get it to work for the case \(s(n)=4\).

Using the derivative chains of Hansen transformed to graphs and making heavy use of symmetry to reduce problem size I was able to enumerate all numbers reachable with 4 and 5 small steps. I was also able to enumerate all the numbers reachable by 6 small steps restricted to those that might violate the conjecture.

So overall we know that \(v(n)\le2^{s(n)}\) for \(s(n)\le6\). So, for example, any number with \(v(n)\ge65\) must have \(s(n)\ge7\).

If this conjecture is true, it has some interesting consequences. Let's consider the number \(n = 223696213\) or in binary \(1101010101010101010101010101_2\). We have \(v(n) = 15\) so we expect \(s(n) \ge 4\).

We can easily see though that \(s(n) \ne 4\) since if \(s(n) = 4\) we could take an addition chain for \(n\) and extend it to form \(3n = 100111111111111111111111111111_2\):

1, 2, ..., 223696213, 447392426, 671088639

We have added only large steps but \(v(671088639) = 28\) so we expect \(5 \le s(3n) = s(n) = 4\) which is a contradiction. So, we must have \(s(n) \ge 5\).

Computer searches show \(s(671088639) = s(223696213) = 6\) achieved with the following chain:

1, 2, 3, 5, 10, 13, 23, 46, 92, 105, 210, 420, 840, 1680, 3360, 6720, 6825, 13650, 27300, 54600, 109200, 218400, 436800, 873600, 1747200, 3494400, 6988800, 13977600, 27955200, 55910400, 111820800, 223641600, 223696200, 223696213

I outline enumeration of small step chains here:

Small Step Enumeration

Exact Equality in the Scholz-Brauer Conjecture
Find details here of the first known cases where \(l(2^n-1)<l(n)+n-1\). I found this case first Exact Equality but a few days later I put some effort into trying to find a smaller case:

Exact Equality 

The smallest case I have found so far is here but with way less verbiage:  Exact Equality 

Scholz-Brauer Conjecture
This conjecture asserts that:

\(l(2^n-1)\le l(n) + n - 1\)

I like the following alternate bound:

\(s(2^n-1)\le l(n)\)

To see why we might think this conjecture is true let's look at an optimal chain for \(2^8-1=255\) in binary:

1 10 11 110 1100 1111 11110 111100 1111000 11110000 11111111

We construct the target using only doublings and small steps that have no carries (in red). So, the bit counts of the small step elements and 1 form an addition chain for 8:

1 2 4 8

Obviously, we could take a chain for some other \(n\) and try to generate an addition chain for \(2^n-1\) using this technique. This only works though if the addition chain for \(n\) has all-star steps. Such a chain is called a star chain or a Brauer chain.

Brauer in [1] outlined the procedure to convert a Brauer chain for n into a chain for \(2^n-1\). Hansen in [2,3] generalized this for chains with a bit more flexibility (\(l^0\) or Hansen chains). Knuth [4] describes the Hansen algorithm via underlined elements.

Let's see this with the smallest number that has no optimal star chains (12509):

Each step must use the largest underlined entry in the chain. The last entry is underlined unconditionally. So, you must choose to underline in a way that achieves this. There can be more than one way to do it.

1, 2, 4, 8, 16, 17, 32, 64, 128, 256, 512, 1024, 1041, 2082, 4164, 8328, 12492, 12509

The red elements are forced as the next step is a doubling. One element of the two consumed by a step must be underlined. Using the same element in a doubling, forces the issue.

The blue elements are underlined because a step that consumes it also uses an underlined element that is not the largest in the list so far.

The green elements are underlined because they are consumed by a step that uses another element before the largest underlined one.

We could choose to underline or not underline the orange element as we wish.

In code checking that a chain is \(l^0\) I could not manage to come up with a better method than recursively trying the underlining cases for each step pruning out the invalid ones. When I discovered the first non-\(l^0\) (non-Hansen) number I did so with buggy detection code. I had somehow convinced myself I didn't need to backtrack ever in the underlining assignment. So, I had to run the search again to make sure I had found the first one.

The first non-Hansen number is 5784689 and its 16 optimal addition chains are:

1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 49169 81937 98322 180259 360518 721036 1442072 2884144 2900545 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 49169 81937 98322 180259 360518 721036 1442072 2884144 5768288 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 49169 81937 163874 180259 360518 721036 1442072 2884144 2900545 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 49169 81937 163874 180259 360518 721036 1442072 2884144 5768288 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 65536 81937 98322 180259 360518 721036 1442072 2884144 2900545 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 65536 81937 98322 180259 360518 721036 1442072 2884144 5768288 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 65536 81937 163874 180259 360518 721036 1442072 2884144 2900545 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 65536 81937 163874 180259 360518 721036 1442072 2884144 5768288 5784689
1 2 4 8 16 32 64 65 97 128 225 353 706 1412 2824 5648 11296 22592 45184 90368 180736 180801 361537 723074 1446148 2892296 2892393 5784689
1 2 4 8 16 32 64 65 97 128 225 353 706 1412 2824 5648 11296 22592 45184 90368 180736 180801 361537 723074 1446148 2892296 5784592 5784689
1 2 4 8 16 32 64 65 97 128 225 353 706 1412 2824 5648 11296 22592 45184 90368 180736 361472 361537 723074 1446148 2892296 2892393 5784689
1 2 4 8 16 32 64 65 97 128 225 353 706 1412 2824 5648 11296 22592 45184 90368 180736 361472 361537 723074 1446148 2892296 5784592 5784689
1 2 4 8 16 32 64 65 97 128 256 353 706 1412 2824 5648 11296 22592 45184 90368 180736 180801 361537 723074 1446148 2892296 2892393 5784689
1 2 4 8 16 32 64 65 97 128 256 353 706 1412 2824 5648 11296 22592 45184 90368 180736 180801 361537 723074 1446148 2892296 5784592 5784689
1 2 4 8 16 32 64 65 97 128 256 353 706 1412 2824 5648 11296 22592 45184 90368 180736 361472 361537 723074 1446148 2892296 2892393 5784689
1 2 4 8 16 32 64 65 97 128 256 353 706 1412 2824 5648 11296 22592 45184 90368 180736 361472 361537 723074 1446148 2892296 5784592 5784689

We can see these are non-Hansen chains by noting that the red element must be underlined because it is doubled in the production of the green element. This forces the two elements between the red and green element to not be underlined. The blue element though uses the previous element (which cannot be underlined) and an element before the red element. So, it fails to use the largest underlined element.

So, from the first non-Hansen we know the Scholz-Brauer conjecture is true for all \(n < 5784689\) (assuming no programming errors). The mechanics of creating an addition chain for \(2^n-1\) from an \(l^0\) chain for \(n\) is best seen graphically and for this we need derivative chains.

Derivative Chains
Hansen [3] introduced derivative chains in his PhD thesis. A derivative chain represents and infinite number of addition chains with similar structure. They represent the non-doubling steps only and allow you to represent all addition chains with the same non-doubling steps with different numbers and placement of doubling steps.

So, take a couple of addition chains. Make them formal addition chains by selecting how each element is constructed (sometime and element may be made in more than one way):

1 2 4 8 16 17 33 66 99

We marked in red those elements that are doubling steps. Now for each non-doubling step we follow the chain of doublings for what it consumes till we get to non-doubled elements and form the sum from that.

So, 17 = 16 + 1 => 1 + 1 = 2. We also adjust any other element that consumes the changes elements. So, 33 = 17 + 16 => 2 + 1 = 3. then we delete the doubled elements as nothing should be using them. Programmatically I find it easier to replace the doubled elements with the undoubled values and recompute all the sums:

1 2 4 8 16 17 33 66 99

1 1 1 1   1  2   3    3   6

Yielding after deletion a derivative of 1 2 3 6.

A larger case that has non-star steps:

1 2 4 5 7 8#4,0 15 23 28 51 58 109

1 1 1 2 3 4          7 11 13 24 27   51

Yielding after deletion a derivative of 1 2 3 4 7 11 13 24 27 51.

Here are all the chains for 99 with their derivatives in curly brackets: 
 {1 2 4}    1 2 3 6 12 24 48 96 99

 {1 2 4}    1 2 4 8 16 32 33 66 99

 {1 2 3 6} 1 2 4 8 16 17 33 66 99

 {1 2 4 6} 1 2 3 6 12 24 48 51 99

Derivative chains do not have to be monotonically increasing. Here this optimal addition chain for 11 has two derivatives depending on how we form 6 = 5 + 1 or 6 = 4 + 2 and one of the derivatives contains the value 2 twice. Note also that we need the derivatives to be formal and record how they are constructed. The last 4 in the first derivative is formed by the sum of the two different 2's:

 {1 2 2 4#2,1}  {1 2 3 5} 1 2 4 5 6 11

Derivatives may also have their values decrease as we can see in this optimal chain for 29:

{1 2 3 2 5} 1 2 4 8 9 13 16 29

If we take the values in a derivative chain and have those as vertices in a graph. We have directed edges representing the two elements consumed starting at the sum source vertices and ending at the vertices representing the sum.

Each vertex then represents a set of numbers that are powers of two of a base number. These are all the numbers that would have been removed when we created the derivative. Since all but the last element in a derivative chain have associated vertices that are the source of an edge, we can encode what element is selected in an edge label. So, if the base number is \(b\) then the vertex for b represents the values \(b,2b,4b,..., 2^{e}b\). An edge with the label \(e_1\) selects the value \(2^{e_1}\). So, if we have a derivative chain for \(n\) it has \(n\) directed paths from the vertex representing 1 to the vertex for \(n\). Each path has an edge sum that represents a single bit in a potential target the derivative can generate.

Here is an example derivative graph for an optimal chain for 99. The edge labels match the algorithm for generating an addition chain for \(2^{99}-1\) of Brauer.



There are 99 paths from vertex 1 to vertex 99. Each path has a distinct edge label sum from 0-98. So, you can think of the single bit in the value 1 traveling all these paths to generate the value \(2^{99}-1\). You get the doubling count for a vertex by taking the maximal edge count for edges leaving the vertex. You use the doubling count once you know the base value to generate the appropriate number of doublings. Edge numbers tell you what element to select from the list of doublings in the addition to form a new element.

The rules for the labeling for a Brauer chain are to take the two inputs for each vertex (apart from 1). For the largest vertex input edge give it a value equal to the difference between the input and output vertex. If the input edges come from the same source, you can choose either edge from the pair. All other edges get the value zero. Let's build the addition chain for \(2^{99}-1\) from this graph:

1 2 3 6 7 14 28 56 63 ... 4032 4095 ... 16773120 16777215 ... 281474959933440 281474976710655 ... 2251799813685240 2251799813685247 ... 633825300114114419273374892032 633825300114114700748351602687

It is easy to prove by induction that for the vertex representing the value \(v\) has a base value of \(2^v-1\). We must also prove that this chain has \(n - 1 = 98\) doublings. It's easy to see this by summing the vertex doubling counts. There must be one critical path that passes through the maximal doubling of each vertex. The critical path must go through an edge with a label that is the largest for all the edges leaving a vertex. Its edge sum must be \(n-1\). It's this property that can fail if we try to label a non-Brauer chain in this way.

Let's take the following \(l^0\) chain:

1 2 4 8 9 12 17 29

If we create the graph and label it like we did a Brauer chain, we get the following:



We can see this graph has no critical path. The largest edge leaving 8 is 4 but no path going through this edge can capture the largest non-zero (and only edge) leaving 9. As a result, this addition chain has 1+2+4+4+8+0+12 = 31 doublings. For an addition chain for 229-1 using this derivative graph we need 28 doublings.

We can resolve this by changing the labeling rules to work with \(l^0\) chains. We label the edge to the largest underlined vertex with a label equal to the other edges vertex. If both edges, go to the same place, we can select between the two as we like. The other edge gets the label 0. This algorithm generates the following labeling:



This will generate an addition chain with 1+2+4+9+0+0+12 = 28 which is the correct number. We can see again that each vertex for v will have a base value of \(2^v-1\). The critical path will be a path through the underlined vertices.

The next thought then is if we can label a non-Hansen derivative graph in such a way that we generate all the path edge sums from 0 to \(n-1\) and have a critical path. The idea here is to try and find another labeling algorithm that would bridge the gap created by the non-Hansen number 5784689. Let's take the following non-Hansen chain:

1 2 4 8 9 13 16 29

With this chain the first 5 values are forced to be underlined. the construction of 16 though cannot satisfy the underlining requirement and we have a non-Hansen chain. Computationally labeling the edges of a graph to satisfy the requirements seems to be very expensive. So, we need to keep the total number of paths small. Here is one such labelling:



This critical path contains vertices 1 2 4 8 16 29 with edge labels of 1+2+4+8+13 =  28. This generates the following addition chain:

1 2 3 6 12 15 30 60 120 240 255 510 1020 2040 4080 8160 8161 8191 16320 32640 65280  65535 ... 536862720 536870911

The two numbers placed inside the purple run are for vertices 9 and 13. We no longer have the property that vertex v has a base value of \(2^v-1\). 

I spent quite a bit of time labeling larger and larger graphs getting the feeling you could always seem to do it unless the graph had some structures, I thought too strange to appear in optimal addition chains.

I made a smaller graph from the non-Hansen number by deleting some doubling steps. The idea being to try and keep some structure that might be important. I ended up with this graph:



It's not possible to label this graph under the constraints that all paths must have label sums that are unique from 0-108 and have a critical path. This floored me as I didn't expect this.

I was unable to come up with a way of proving this in a simple way.

So, I searched for numbers that have structures I can prove can't be labeled. I found the monster:

1 2 4 6 12 24 48 96 192 384 396 397 768 793 1536 3072 3865 7730 15460 30920 61840 123680 247360 494720 989440 1978880 3957760 3958553 7917106 15834212 31668424 63336848 126673696 253347392 506694784 1013389568 2026779136 4053558272 8107116544 16214233088 32428466176 32428466573

It's easy to prove the problematic red numbers can prevent the graph for this addition chain having a critical path. All the addition chains for this number appear to have a similar structure. This can be seen from the partial graph:



Here the parallel edges through vertices 384, 768, 1536, 3072 mean the critical path must go through those vertices. There are two paths from 396 to 793 so to prevent a single bit that follow these paths carrying we need one of the edges in this loop to be non-zero. That edge though can't be in a path with say the vertex for 1536. So, this graph can't be labeled.

What this means is that the derivative chains for the optimal addition chains for \(2^{32428466573}-1\) can never be for the target 32428466573. So, it's harder to see a relationship between \(l(2^{32428466573}-1)\) and \(l(32428466573)\).

Repairing the Scholz-Brauer for some non-Hansen Numbers
We do seem to be able to correct some gaps caused by non-Hansen chains. The first case I found was for the 7th non-Hansen 23097633. I then found the 19th and 20th non-Hansen 31942247 and 32364653 respectively could be constructed.
Using a different technique, I was able to close the gap for the first and second non-Hansen 5784689, 11568241.

Details here: Repair

Lucas/Differential Addition Chain
These addition chains with an extra condition on each step are quite interesting. I calculated some values here:

Lucas

Calculating Optimal Addition Chains
Calculating Optimal Addition Chains

Hardware
I run a bunch of machines to search for various things in the addition chain space. Currently I am using mostly EPYC 9654 processors.

2 X AsRock Rack 1U4L4E-GENOA/2T EPYC 9654
1 X Asus RS500A-E12-RS12U EPYC 9654
1 X MSI S2206-02 Dual EPYC 9654
1 X Dell 7525 Dual EPYC 7713 64 core machine

Rack

Bibliography
I have tried to build a list of all publications on addition chains. This is not simple because it can be difficult to draw the line between a paper on addition chains and one that uses them.

I do not include addition-subtraction chains but do include addition sequences and vector addition chains as recent work shows they are tied together.

I have tried to obtain all of these publications and only have a few missing. I would welcome any additional references or access to the stuff I do not have. The article in red I do not have a copy of.

I manage the following BibTex file with JabRef (JabRef.org):

BibTex

[1] Brauer A (1939), "On addition chains", Bulletin of the American Mathematical Society. Vol. 45(10), pp. 736-739.

[2] Hansen W (1957), "Untersuchungen über die Scholz-Brauerschen Additionsketten und deren Verallgemeinerung". Thesis at: Göttingen.

[3] Hansen W (1959), "Zum Scholz-Brauerschen Problem.", Journal für die reine und angewandte Mathematik. Vol. 202, pp. 129-136.

[4] Knuth DE (1969), "The art of computer programming, 2: seminumerical algorithms, Addison Wesley", Reading, MA., §4.6.3, pp. 398-422.

[5] Knuth DE (1998), "The art of computer programming, 2: seminumerical algorithms, Addison Wesley", Reading, MA., §4.6.3, pp. 461-485.

[6] Thurber EG (1999), "Efficient Generation of Minimal Length Addition Chains", SIAM Journal on Computing. Vol. 28(4), pp. 1247-1263.

[7] Thurber EG and Clift NM, "Addition chains, vector chains, and efficient computation", Discrete Mathematics, Volume 344, Issue 2, 2021,

[8] Gioia A, Subbarao M and Sugunama M (1962), "The Scholz-Brauer problem in addition chains", Duke Math. J. Vol. 29, pp. 481-487.

[9] Thurber, E. "The Scholz-Brauer Problem on Addition Chains", University of Southern California, University of Southern California, 1971.

[10] Flammenkamp A (1991), "Drei Beiträge zur diskreten Mathematik: Additionsketten, No-Three-in-Line-Problem, Sociable Numbers". Thesis at: Diplomarbeit an der Fakultät für Mathematik, Universität Bielefeld.

Bleichenbacher D (1999), "Addition chains for large sets", Unpublished manuscript.

Neill Clift
===
Addition Chains
Why?
We often want to raise some value (not necessarily a real value) to an integer power (exponentiation). This is a pretty common operation in cryptography. The product rule of exponents tells us that . So, let's try and see how we would calculate . I pick 29 as this number shows up many strange properties that make the subject worth studying.








Now we can dispense with all the  type terms and just record the  (exponent) values. 1 2 4 8 9 11 20 29. Under the assumption that all the multiplies have the same cost (often true but not true for example with integers as the bigger they get the more expensive they are to multiply) and that squaring  is the same cost as a general multiply  we want to keep the list of exponents small in number. It turns out that the way I calculated  above is an example of a shortest chain. You can't do better than 7 steps (8 exponent values). There are 132 different ways of getting to 29 in 7 steps if we ignore how each exponent value is constructed and just focus on the exponent value. The number of ways of getting to 29 explode as we increase the length. So, for example, in 8, 9, 10 and 11 steps we have 1781, 12619, 58875 and 205368 ways to get to 29 respectively. 

We will put what we saw here into more exact mathematical language next. That will make it easier to describe just how strange this simple problem is. Things that seem obvious are in fact not true and we don't really know very much about the subject.

My primary interest is in trying to find ways that computers can find shortest chains more efficiently. I got interested in this topic trying to hack the VMS password hashing algorithm (Purdy Polynomial). I am a bit of a treasure hunter looking for numbers with strange properties. Few people actually study this area and so this website is here to find people who want to exchange ideas, talk about the area or write programs. Beware it's highly addictive trying to improve addition chain programs.

Send me mail Neill Clift if you're interested.

Definitions
Start with a list of numbers containing initially 1. Perform a number of steps where we add two (not necessarily different) existing numbers together and add the new number to the list. If we eventually arrive at the number  we call this an addition chain (or more rarely an additive chain) for .

So, for example, we could create the following list 1,2,3,6,9,9,12,24,18 and call this an addition chain for . We will call the individual values in an addition chain elements and  the target.

We should note some things about this addition chain for 18.

It contains values bigger than  like 24. We could remove these and still have a valid addition chain.
It is not ordered by element size. We could order it by size, and this would keep the chain valid if we have eliminated elements greater than the target.
It has duplicate elements. We could remove duplicates and the chain would still be valid.
Some elements may be constructed in more than one way (18=9+9 or 12+6).
We will assume from now on that addition chains are ordered and duplicate or values exceeding the target are removed.

Formally then an addition chain is:

  with 

We say this addition chain has length . The chain with the shortest length we call the optimal chain. We denote its length by . Many interesting questions arise when we consider optimal chains. Lots of stuff that might seem obvious is in fact wrong. For example, it seems reasonable to assume that each step in an addition chain uses the largest element created so far or that the best way to reach  is by doubling the last element of a chain for . Both of these assumptions turn out to be false.

We define:


 
    So, it's the number of 1s in the binary representation of n.


For step  of an addition chain we have two possibilities:

 and we call this a large step
 and we call this a small step
We can see from this that  and  count the number of small and large steps respectively in an optimal addition chain for .

Additionally for step  we say that:

If   is called a doubling
If  is called a star step
We define  as the number of optimal addition chains for . 

The smallest target requiring  steps in its optimal chain .

The number of targets requiring exactly  steps in their optimal chains .

We will often want to remove the ambiguity of how an addition chain element is constructed. We do this by tracking how each element is formed. I will use a hash notation to show this. For example, in this non-optimal addition chain for 4

1 2 3 4

I will use:

1 2 3 4#1,1 to show the element 4 is made from 2+2 or:

1 2 3 4#0,2 to show the element 4 is made from 1+3.

Here the hash is followed by two zero base indices into the addition chain.

The Amazing cases of 

 and  Tables
c(r)/d(r)

Number Of Optimal Addition Chains
Finding  Values

Star and  Chains
Star and L0

Conjecture on Trailing Star Steps
Trailing Star Steps

Conjecture on  Values
primes

Knuth-Stolarsky Conjecture
It seems remarkable that  appears to be bounded by the small step count of the chain:


This conjecture is normally stated differently:


Cases  can be determined with simple bounds. If  then  and with  then  is the best we can do bit count wise. Knuth outlines the case for  yielding  or four cases were   (for example ).

The three-bit case was proved in [8] and the four-bit case by Knuth himself. Ed Thurber in his PhD thesis [9] proved the  case. Achim Flammenkamp in his diploma thesis [10] wrote a computer program to enumerate all numbers reachable via 3 small steps and likewise found . I wrote a program to mimic the proof technique of Ed Thurber's thesis and verified the result but could not get it to work for the case .

Using the derivative chains of Hansen transformed to graphs and making heavy use of symmetry to reduce problem size I was able to enumerate all numbers reachable with 4 and 5 small steps. I was also able to enumerate all the numbers reachable by 6 small steps restricted to those that might violate the conjecture.

So overall we know that  for . So, for example, any number with  must have .

If this conjecture is true, it has some interesting consequences. Let's consider the number  or in binary . We have  so we expect .

We can easily see though that  since if  we could take an addition chain for  and extend it to form :

1, 2, ..., 223696213, 447392426, 671088639

We have added only large steps but  so we expect  which is a contradiction. So, we must have .

Computer searches show  achieved with the following chain:

1, 2, 3, 5, 10, 13, 23, 46, 92, 105, 210, 420, 840, 1680, 3360, 6720, 6825, 13650, 27300, 54600, 109200, 218400, 436800, 873600, 1747200, 3494400, 6988800, 13977600, 27955200, 55910400, 111820800, 223641600, 223696200, 223696213

I outline enumeration of small step chains here:

Small Step Enumeration

Exact Equality in the Scholz-Brauer Conjecture
Find details here of the first known cases where . I found this case first Exact Equality but a few days later I put some effort into trying to find a smaller case:

Exact Equality 

The smallest case I have found so far is here but with way less verbiage:  Exact Equality 

Scholz-Brauer Conjecture
This conjecture asserts that:


I like the following alternate bound:


To see why we might think this conjecture is true let's look at an optimal chain for  in binary:

1 10 11 110 1100 1111 11110 111100 1111000 11110000 11111111

We construct the target using only doublings and small steps that have no carries (in red). So, the bit counts of the small step elements and 1 form an addition chain for 8:

1 2 4 8

Obviously, we could take a chain for some other  and try to generate an addition chain for  using this technique. This only works though if the addition chain for  has all-star steps. Such a chain is called a star chain or a Brauer chain.

Brauer in [1] outlined the procedure to convert a Brauer chain for n into a chain for . Hansen in [2,3] generalized this for chains with a bit more flexibility ( or Hansen chains). Knuth [4] describes the Hansen algorithm via underlined elements.

Let's see this with the smallest number that has no optimal star chains (12509):

Each step must use the largest underlined entry in the chain. The last entry is underlined unconditionally. So, you must choose to underline in a way that achieves this. There can be more than one way to do it.

1, 2, 4, 8, 16, 17, 32, 64, 128, 256, 512, 1024, 1041, 2082, 4164, 8328, 12492, 12509

The red elements are forced as the next step is a doubling. One element of the two consumed by a step must be underlined. Using the same element in a doubling, forces the issue.

The blue elements are underlined because a step that consumes it also uses an underlined element that is not the largest in the list so far.

The green elements are underlined because they are consumed by a step that uses another element before the largest underlined one.

We could choose to underline or not underline the orange element as we wish.

In code checking that a chain is  I could not manage to come up with a better method than recursively trying the underlining cases for each step pruning out the invalid ones. When I discovered the first non- (non-Hansen) number I did so with buggy detection code. I had somehow convinced myself I didn't need to backtrack ever in the underlining assignment. So, I had to run the search again to make sure I had found the first one.

The first non-Hansen number is 5784689 and its 16 optimal addition chains are:

1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 49169 81937 98322 180259 360518 721036 1442072 2884144 2900545 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 49169 81937 98322 180259 360518 721036 1442072 2884144 5768288 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 49169 81937 163874 180259 360518 721036 1442072 2884144 2900545 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 49169 81937 163874 180259 360518 721036 1442072 2884144 5768288 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 65536 81937 98322 180259 360518 721036 1442072 2884144 2900545 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 65536 81937 98322 180259 360518 721036 1442072 2884144 5768288 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 65536 81937 163874 180259 360518 721036 1442072 2884144 2900545 5784689
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 16385 16401 32768 65536 81937 163874 180259 360518 721036 1442072 2884144 5768288 5784689
1 2 4 8 16 32 64 65 97 128 225 353 706 1412 2824 5648 11296 22592 45184 90368 180736 180801 361537 723074 1446148 2892296 2892393 5784689
1 2 4 8 16 32 64 65 97 128 225 353 706 1412 2824 5648 11296 22592 45184 90368 180736 180801 361537 723074 1446148 2892296 5784592 5784689
1 2 4 8 16 32 64 65 97 128 225 353 706 1412 2824 5648 11296 22592 45184 90368 180736 361472 361537 723074 1446148 2892296 2892393 5784689
1 2 4 8 16 32 64 65 97 128 225 353 706 1412 2824 5648 11296 22592 45184 90368 180736 361472 361537 723074 1446148 2892296 5784592 5784689
1 2 4 8 16 32 64 65 97 128 256 353 706 1412 2824 5648 11296 22592 45184 90368 180736 180801 361537 723074 1446148 2892296 2892393 5784689
1 2 4 8 16 32 64 65 97 128 256 353 706 1412 2824 5648 11296 22592 45184 90368 180736 180801 361537 723074 1446148 2892296 5784592 5784689
1 2 4 8 16 32 64 65 97 128 256 353 706 1412 2824 5648 11296 22592 45184 90368 180736 361472 361537 723074 1446148 2892296 2892393 5784689
1 2 4 8 16 32 64 65 97 128 256 353 706 1412 2824 5648 11296 22592 45184 90368 180736 361472 361537 723074 1446148 2892296 5784592 5784689

We can see these are non-Hansen chains by noting that the red element must be underlined because it is doubled in the production of the green element. This forces the two elements between the red and green element to not be underlined. The blue element though uses the previous element (which cannot be underlined) and an element before the red element. So, it fails to use the largest underlined element.

So, from the first non-Hansen we know the Scholz-Brauer conjecture is true for all  (assuming no programming errors). The mechanics of creating an addition chain for  from an  chain for  is best seen graphically and for this we need derivative chains.

Derivative Chains
Hansen [3] introduced derivative chains in his PhD thesis. A derivative chain represents and infinite number of addition chains with similar structure. They represent the non-doubling steps only and allow you to represent all addition chains with the same non-doubling steps with different numbers and placement of doubling steps.

So, take a couple of addition chains. Make them formal addition chains by selecting how each element is constructed (sometime and element may be made in more than one way):

1 2 4 8 16 17 33 66 99

We marked in red those elements that are doubling steps. Now for each non-doubling step we follow the chain of doublings for what it consumes till we get to non-doubled elements and form the sum from that.

So, 17 = 16 + 1 => 1 + 1 = 2. We also adjust any other element that consumes the changes elements. So, 33 = 17 + 16 => 2 + 1 = 3. then we delete the doubled elements as nothing should be using them. Programmatically I find it easier to replace the doubled elements with the undoubled values and recompute all the sums:

1 2 4 8 16 17 33 66 99

1 1 1 1   1  2   3    3   6

Yielding after deletion a derivative of 1 2 3 6.

A larger case that has non-star steps:

1 2 4 5 7 8#4,0 15 23 28 51 58 109

1 1 1 2 3 4          7 11 13 24 27   51

Yielding after deletion a derivative of 1 2 3 4 7 11 13 24 27 51.

Here are all the chains for 99 with their derivatives in curly brackets: 
 {1 2 4}    1 2 3 6 12 24 48 96 99

 {1 2 4}    1 2 4 8 16 32 33 66 99

 {1 2 3 6} 1 2 4 8 16 17 33 66 99

 {1 2 4 6} 1 2 3 6 12 24 48 51 99

Derivative chains do not have to be monotonically increasing. Here this optimal addition chain for 11 has two derivatives depending on how we form 6 = 5 + 1 or 6 = 4 + 2 and one of the derivatives contains the value 2 twice. Note also that we need the derivatives to be formal and record how they are constructed. The last 4 in the first derivative is formed by the sum of the two different 2's:

 {1 2 2 4#2,1}  {1 2 3 5} 1 2 4 5 6 11

Derivatives may also have their values decrease as we can see in this optimal chain for 29:

{1 2 3 2 5} 1 2 4 8 9 13 16 29

If we take the values in a derivative chain and have those as vertices in a graph. We have directed edges representing the two elements consumed starting at the sum source vertices and ending at the vertices representing the sum.

Each vertex then represents a set of numbers that are powers of two of a base number. These are all the numbers that would have been removed when we created the derivative. Since all but the last element in a derivative chain have associated vertices that are the source of an edge, we can encode what element is selected in an edge label. So, if the base number is  then the vertex for b represents the values . An edge with the label  selects the value . So, if we have a derivative chain for  it has  directed paths from the vertex representing 1 to the vertex for . Each path has an edge sum that represents a single bit in a potential target the derivative can generate.

Here is an example derivative graph for an optimal chain for 99. The edge labels match the algorithm for generating an addition chain for  of Brauer.



There are 99 paths from vertex 1 to vertex 99. Each path has a distinct edge label sum from 0-98. So, you can think of the single bit in the value 1 traveling all these paths to generate the value . You get the doubling count for a vertex by taking the maximal edge count for edges leaving the vertex. You use the doubling count once you know the base value to generate the appropriate number of doublings. Edge numbers tell you what element to select from the list of doublings in the addition to form a new element.

The rules for the labeling for a Brauer chain are to take the two inputs for each vertex (apart from 1). For the largest vertex input edge give it a value equal to the difference between the input and output vertex. If the input edges come from the same source, you can choose either edge from the pair. All other edges get the value zero. Let's build the addition chain for  from this graph:

1 2 3 6 7 14 28 56 63 ... 4032 4095 ... 16773120 16777215 ... 281474959933440 281474976710655 ... 2251799813685240 2251799813685247 ... 633825300114114419273374892032 633825300114114700748351602687

It is easy to prove by induction that for the vertex representing the value  has a base value of . We must also prove that this chain has  doublings. It's easy to see this by summing the vertex doubling counts. There must be one critical path that passes through the maximal doubling of each vertex. The critical path must go through an edge with a label that is the largest for all the edges leaving a vertex. Its edge sum must be . It's this property that can fail if we try to label a non-Brauer chain in this way.

Let's take the following  chain:

1 2 4 8 9 12 17 29

If we create the graph and label it like we did a Brauer chain, we get the following:



We can see this graph has no critical path. The largest edge leaving 8 is 4 but no path going through this edge can capture the largest non-zero (and only edge) leaving 9. As a result, this addition chain has 1+2+4+4+8+0+12 = 31 doublings. For an addition chain for 229-1 using this derivative graph we need 28 doublings.

We can resolve this by changing the labeling rules to work with  chains. We label the edge to the largest underlined vertex with a label equal to the other edges vertex. If both edges, go to the same place, we can select between the two as we like. The other edge gets the label 0. This algorithm generates the following labeling:



This will generate an addition chain with 1+2+4+9+0+0+12 = 28 which is the correct number. We can see again that each vertex for v will have a base value of . The critical path will be a path through the underlined vertices.

The next thought then is if we can label a non-Hansen derivative graph in such a way that we generate all the path edge sums from 0 to  and have a critical path. The idea here is to try and find another labeling algorithm that would bridge the gap created by the non-Hansen number 5784689. Let's take the following non-Hansen chain:

1 2 4 8 9 13 16 29

With this chain the first 5 values are forced to be underlined. the construction of 16 though cannot satisfy the underlining requirement and we have a non-Hansen chain. Computationally labeling the edges of a graph to satisfy the requirements seems to be very expensive. So, we need to keep the total number of paths small. Here is one such labelling:



This critical path contains vertices 1 2 4 8 16 29 with edge labels of 1+2+4+8+13 =  28. This generates the following addition chain:

1 2 3 6 12 15 30 60 120 240 255 510 1020 2040 4080 8160 8161 8191 16320 32640 65280  65535 ... 536862720 536870911

The two numbers placed inside the purple run are for vertices 9 and 13. We no longer have the property that vertex v has a base value of . 

I spent quite a bit of time labeling larger and larger graphs getting the feeling you could always seem to do it unless the graph had some structures, I thought too strange to appear in optimal addition chains.

I made a smaller graph from the non-Hansen number by deleting some doubling steps. The idea being to try and keep some structure that might be important. I ended up with this graph:



It's not possible to label this graph under the constraints that all paths must have label sums that are unique from 0-108 and have a critical path. This floored me as I didn't expect this.

I was unable to come up with a way of proving this in a simple way.

So, I searched for numbers that have structures I can prove can't be labeled. I found the monster:

1 2 4 6 12 24 48 96 192 384 396 397 768 793 1536 3072 3865 7730 15460 30920 61840 123680 247360 494720 989440 1978880 3957760 3958553 7917106 15834212 31668424 63336848 126673696 253347392 506694784 1013389568 2026779136 4053558272 8107116544 16214233088 32428466176 32428466573

It's easy to prove the problematic red numbers can prevent the graph for this addition chain having a critical path. All the addition chains for this number appear to have a similar structure. This can be seen from the partial graph:



Here the parallel edges through vertices 384, 768, 1536, 3072 mean the critical path must go through those vertices. There are two paths from 396 to 793 so to prevent a single bit that follow these paths carrying we need one of the edges in this loop to be non-zero. That edge though can't be in a path with say the vertex for 1536. So, this graph can't be labeled.

What this means is that the derivative chains for the optimal addition chains for  can never be for the target 32428466573. So, it's harder to see a relationship between  and .

Repairing the Scholz-Brauer for some non-Hansen Numbers
We do seem to be able to correct some gaps caused by non-Hansen chains. The first case I found was for the 7th non-Hansen 23097633. I then found the 19th and 20th non-Hansen 31942247 and 32364653 respectively could be constructed.
Using a different technique, I was able to close the gap for the first and second non-Hansen 5784689, 11568241.

Details here: Repair

Lucas/Differential Addition Chain
These addition chains with an extra condition on each step are quite interesting. I calculated some values here:

Lucas

Calculating Optimal Addition Chains
Calculating Optimal Addition Chains

Hardware
I run a bunch of machines to search for various things in the addition chain space. Currently I am using mostly EPYC 9654 processors.

2 X AsRock Rack 1U4L4E-GENOA/2T EPYC 9654
1 X Asus RS500A-E12-RS12U EPYC 9654
1 X MSI S2206-02 Dual EPYC 9654
1 X Dell 7525 Dual EPYC 7713 64 core machine

Rack

Bibliography
I have tried to build a list of all publications on addition chains. This is not simple because it can be difficult to draw the line between a paper on addition chains and one that uses them.

I do not include addition-subtraction chains but do include addition sequences and vector addition chains as recent work shows they are tied together.

I have tried to obtain all of these publications and only have a few missing. I would welcome any additional references or access to the stuff I do not have. The article in red I do not have a copy of.

I manage the following BibTex file with JabRef (JabRef.org):

BibTex

[1] Brauer A (1939), "On addition chains", Bulletin of the American Mathematical Society. Vol. 45(10), pp. 736-739.

[2] Hansen W (1957), "Untersuchungen über die Scholz-Brauerschen Additionsketten und deren Verallgemeinerung". Thesis at: Göttingen.

[3] Hansen W (1959), "Zum Scholz-Brauerschen Problem.", Journal für die reine und angewandte Mathematik. Vol. 202, pp. 129-136.

[4] Knuth DE (1969), "The art of computer programming, 2: seminumerical algorithms, Addison Wesley", Reading, MA., §4.6.3, pp. 398-422.

[5] Knuth DE (1998), "The art of computer programming, 2: seminumerical algorithms, Addison Wesley", Reading, MA., §4.6.3, pp. 461-485.

[6] Thurber EG (1999), "Efficient Generation of Minimal Length Addition Chains", SIAM Journal on Computing. Vol. 28(4), pp. 1247-1263.

[7] Thurber EG and Clift NM, "Addition chains, vector chains, and efficient computation", Discrete Mathematics, Volume 344, Issue 2, 2021,

[8] Gioia A, Subbarao M and Sugunama M (1962), "The Scholz-Brauer problem in addition chains", Duke Math. J. Vol. 29, pp. 481-487.

[9] Thurber, E. "The Scholz-Brauer Problem on Addition Chains", University of Southern California, University of Southern California, 1971.

[10] Flammenkamp A (1991), "Drei Beiträge zur diskreten Mathematik: Additionsketten, No-Three-in-Line-Problem, Sociable Numbers". Thesis at: Diplomarbeit an der Fakultät für Mathematik, Universität Bielefeld.

Bleichenbacher D (1999), "Addition chains for large sets", Unpublished manuscript.

Neill Clift
===
]]]
[[[
view script/辅助冫搜索倍增素数序列.py
  [89, 179, 359, 719, 1439, 2879]
https://oeis.org/A075712
===
A075712
Rearrangement of primes into Germain groups (or Cunningham chains).
7
2, 5, 11, 23, 47, 3, 7, 13, 17, 19, 29, 59, 31, 37, 41, 83, 167, 43, 53, 107, 61, 67, 71, 73, 79, 89, 179, 359, 719, 1439, 2879, 97, 101, 103, 109, 113, 227, 127, 131, 263, 137, 139, 149, 151, 157, 163, 173, 347, 181, 191, 383, 193, 197, 199, 211, 223, 229, 233
(list; graph; refs; listen; history; text; internal format)
OFFSET
1,1
COMMENTS
In each group, p(i+1) = 2*p(i)+1.
The groups are also known as Cunningham chains of the first kind.
LINKS
Michael De Vlieger, Table of n, a(n) for n = 1..10000
EXAMPLE
The groups are:
{2, 5, 11, 23, 47},
{3, 7},
{13},
{17},
{19},
{29, 59},
{31},
{37},
{41, 83, 167},
{43},
{53, 107},
{61},
{67},
{71},
{73},
{79},
{89, 179, 359, 719, 1439, 2879},
{97},
{101},
{103},
{109},
{113, 227},
{127},
{131, 263},
{137},
{139},
...
MATHEMATICA
Block[{a = {2}, j = 1, k, p}, Do[k = j; If[PrimeQ@ a[[-1]], AppendTo[a, 2 a[[-1]] + 1], While[! FreeQ[a, Set[p, Prime[k]]], k++]; j++; Set[a, Append[a[[1 ;; -2]], p]]], 10^3]; a] (* Michael De Vlieger, Nov 17 2020 *)
PROG
(PARI) first(n) = my(res=List([2, 5, 11, 23, 47])); forprime(p=3, oo, if(!isprime((p-1)>>1), listput(res, p); c = 2*p+1; while(isprime(c), listput(res, c); c=2*c+1)); if(#res>n, return(res))); res \\ David A. Corneth, Nov 13 2021
CROSSREFS
Cf. A005384, A059452, A059453, A059455, A059456, A053176.
See also A181697.
See A059456 for initial terms, A338945 for lengths.
Sequence in context: A248646 A093053 A192580 * A349411 A347309 A174162
Adjacent sequences:  A075709 A075710 A075711 * A075713 A075714 A075715
KEYWORD
nonn,tabf
AUTHOR
Zak Seidov, Oct 03 2002
EXTENSIONS
Edited by N. J. A. Sloane, Nov 13 2021
More terms from David A. Corneth, Nov 13 2021
STATUS
approved
]]]

[[[
  搜索相关
A073639
  本原不可约三项式
  其他相关序列？
===
A073639
A002475
A073571
A057486
===
A073639
Numbers k such that x^k + x + 1 is a primitive polynomial modulo 2.
6
2, 3, 4, 6, 7, 15, 22, 60, 63, 127, 153, 471, 532, 865, 900, 1366
(list; graph; refs; listen; history; text; internal format)
OFFSET
1,1
COMMENTS
Subsequence of A002475, which gives k for which the polynomial x^k + x + 1 is irreducible modulo 2. Term m of A002475 belongs to this sequence iff A046932(m) = 2^m - 1.
Note that a(16) = 1366 = A002475(23). For k = A002475(24) and A002475(25), polynomial x^k + x + 1 is not primitive modulo 2, so a(17) >= A002475(26) = 4495.
The following large terms of A002475 do not belong here: 53484, 62481, 83406, 103468. - Max Alekseyev, Aug 18 2015
LINKS
Table of n, a(n) for n=1..16.
Joerg Arndt, Matters Computational (The Fxtbook), section 40.9.3 "Irreducible trinomials of the form 1 + x^k + x^d", p.850
I. F. Blake, S. Gao and R. J. Lambert, Constructive problems for irreducible polynomials over finite fields, in Information Theory and Applications, LNCS 793, Springer-Verlag, Berlin, 1994, 1-23, See Table 2.
R. P. Brent, Searching for primitive trinomials (mod 2)
R. P. Brent, S. Larvala and P. Zimmermann, A fast algorithm for testing reducibility of trinomials ..., Math. Comp. 72 (2003), 1443-1452.
N. Zierler, Primitive trinomials whose degree is a Mersenne exponent, Information and Control 15 1969 67-69.
N. Zierler, On x^n+x+1 over GF(2), Information and Control 16 1970 502-505.
N. Zierler and J. Brillhart, On primitive trinomials (mod 2), Information and Control 13 1968 541-554.
N. Zierler and J. Brillhart, On primitive trinomials (mod 2), II, Information and Control 14 1969 566-569.
Index entries for sequences related to trinomials over GF(2)
MATHEMATICA
Select[Range[2, 1000], PrimitivePolynomialQ[x^# + x + 1, 2] &] (* Robert Price, Sep 19 2018 *)
CROSSREFS
Cf. A002475, A073571, A057486.
Sequence in context: A039059 A151892 A162570 * A130776 A077292 A270475
Adjacent sequences:  A073636 A073637 A073638 * A073640 A073641 A073642
KEYWORD
nonn,nice,hard,more
AUTHOR
Richard P. Brent and Paul Zimmermann, Sep 05 2002
STATUS
approved
===
A002475
Numbers k such that x^k + x + 1 is irreducible over GF(2).
(Formerly M0544 N0194)
23
0, 2, 3, 4, 6, 7, 9, 15, 22, 28, 30, 46, 60, 63, 127, 153, 172, 303, 471, 532, 865, 900, 1366, 2380, 3310, 4495, 6321, 7447, 10198, 11425, 21846, 24369, 27286, 28713, 32767, 34353, 46383, 53484, 62481, 83406, 87382, 103468, 198958, 248833
(list; graph; refs; listen; history; text; internal format)
OFFSET
1,2
COMMENTS
k=1 is excluded since the polynomial "1" is not normally regarded as irreducible.
2^(A073639(m)) - 1 is a term for all m. - Joerg Arndt, Aug 23 2015
Any subsequent terms are > 300000. - Lucas A. Brown, Nov 28 2022
REFERENCES
N. J. A. Sloane, A Handbook of Integer Sequences, Academic Press, 1973 (includes this sequence).
N. J. A. Sloane and Simon Plouffe, The Encyclopedia of Integer Sequences, Academic Press, 1995 (includes this sequence).
Stephen Wolfram, A New Kind of Science, Wolfram Media, 2002; p. 975.
LINKS
Table of n, a(n) for n=1..44.
Joerg Arndt, Matters Computational (The Fxtbook), section 40.9.3 "Irreducible trinomials of the form 1 + x^k + x^d", p.850
Lucas A. Brown, Python program.
Lucas A. Brown, Sage program.
N. Zierler, On x^n+x+1 over GF(2), Information and Control, 16 1970 502-505.
Index entries for sequences related to trinomials over GF(2)
MAPLE
select(n -> Irreduc(x^n+x+1) mod 2, [0, $2..10000]); # Robert Israel, Aug 09 2015
MATHEMATICA
Do[ If[ ToString[ Factor[ x^n + x + 1, Modulus -> 2 ] ] == ToString[ x^n + x + 1 ], Print [ n ] ], {n, 0, 28713} ]
Select[Range[1000], IrreduciblePolynomialQ[x^# + x + 1, Modulus -> 2] &] (* Robert Price, Sep 19 2018 *)
PROG
(Magma) P<x> := PolynomialRing(GaloisField(2)); for n := 0 to 100000 do if IsIrreducible(x^n+x+1) then print(n); end if; end for;
(SageMath)
P.<x> = GF(2)[]
for n in range(90):
       if (x^n+x+1).is_irreducible():
           print(n) # Ruperto Corso, Dec 11 2011
(PARI)
for (n=1, 10^6, if ( polisirreducible(Mod(1, 2)*(x^n+x+1)), print1(n, ", ") ) );
/* Joerg Arndt, Apr 28 2012 */
(PARI) is(n)=if(n>3&&[1, 0, 1, 1, 0, 1, 0, 0][n%8+1], return(0)); polisirreducible(Mod('x^n+'x+1, 2)) \\ Charles R Greathouse IV, Jun 04 2015
CROSSREFS
Cf. A001153, A073639, A057496, A223938 (n such that x^n-x-1 is irreducible over GF(3)).
Sequence in context: A165773 A064414 A224482 * A208281 A306074 A250252
Adjacent sequences:  A002472 A002473 A002474 * A002476 A002477 A002478
KEYWORD
nonn,hard,more,nice
AUTHOR
N. J. A. Sloane
EXTENSIONS
Two more terms from Paul Zimmermann, Sep 05 2002
a(37)-a(39) from Max Alekseyev, Oct 29 2011
a(40)-a(41) from Ruperto Corso, Dec 11 2011
a(42) from Manfred Scheucher, Jun 04 2015
a(43) from Manfred Scheucher, Aug 09 2015
a(44) from Lucas A. Brown, Nov 28 2022
STATUS
approved
===
A073571
Irreducible trinomials: numbers n such that x^n + x^k + 1 is an irreducible polynomial (mod 2) for some k with 0 < k < n.
12
2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 25, 28, 29, 30, 31, 33, 34, 35, 36, 39, 41, 42, 44, 46, 47, 49, 52, 54, 55, 57, 58, 60, 62, 63, 65, 66, 68, 71, 73, 74, 76, 79, 81, 84, 86, 87, 89, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 105, 106, 108, 110, 111, 113
(list; graph; refs; listen; history; text; internal format)
OFFSET
1,1
COMMENTS
This sequence is infinite: Golomb, "Shift Register Sequences," on p. 96 (1st ed., 1966) states that "It is easy to exhibit an infinite class of irreducible trinomials. viz. x^(2*3^a) + x^(3^a) + 1 for all a = 0, 1, 2, ..., but whose roots have only 3^(a+1) as their period." - A. M. Odlyzko, Dec 05 1997.
REFERENCES
S. W. Golomb, "Shift register sequence", revised edition, reprinted by Aegean Park Press, 1982. See Tables V-1, V-2.
LINKS
Joerg Arndt, Table of n, a(n) for n = 1..1500
A. J. Menezes, P. C. van Oorschot and S. A. Vanstone, Handbook of Applied Cryptography, CRC Press, 1996; see Table 4.6.
Index entries for sequences related to trinomials over GF(2)
MAPLE
a := proc(n) local k; for k from 1 to n-1 do if Irreduc(x^n+x^k+1) mod 2 then RETURN(n) fi od; NULL end: [seq(a(n), n=1..130)];
MATHEMATICA
irreducibleQ[n_] := (irr = False; k = 1; While[k < n, If[ Factor[ x^n + x^k + 1, Modulus -> 2] == x^n + x^k + 1, irr = True; Break[]]; k++]; irr); Select[ Range[120], irreducibleQ] (* Jean-François Alcover, Jan 07 2013 *)
PROG
(PARI) is(n)=for(s=1, n-1, if(polisirreducible((x^n+x^s+1)*Mod(1, 2)), return(1))); 0 \\ Charles R Greathouse IV, May 30 2013
CROSSREFS
For the numbers of such trinomials for a given n, see A057646.
See A073726 for primitive trinomials and A001153 for primitive Mersenne trinomials (and references). Complement of A057486. For values of k see A057774.
Sequence in context: A026470 A014133 A070115 * A328242 A380550 A294295
Adjacent sequences:  A073568 A073569 A073570 * A073572 A073573 A073574
KEYWORD
nonn
AUTHOR
Paul Zimmermann, Sep 05 2002
STATUS
approved
===
A057486
Numbers k such that x^k + x^m + 1 is factorable over GF(2) for all m between 1 and k.
5
8, 13, 16, 19, 24, 26, 27, 32, 37, 38, 40, 43, 45, 48, 50, 51, 53, 56, 59, 61, 64, 67, 69, 70, 72, 75, 77, 78, 80, 82, 83, 85, 88, 91, 96, 99, 101, 104, 107, 109, 112, 114, 115, 116, 117, 120, 122, 125, 128, 131, 133, 136, 138, 139, 141, 143, 144, 149, 152, 157
(list; graph; refs; listen; history; text; internal format)
OFFSET
1,1
COMMENTS
Brent, Hart, Kruppa, and Zimmermann found that 57885161 is a term of this sequence. - Charles R Greathouse IV, May 30 2013
LINKS
Charles R Greathouse IV, Table of n, a(n) for n = 1..5000 (first 200 terms from T. D. Noe)
Richard Brent, The Software gf2x.
Paul Zimmermann, There is no primitive trinomial of degree 57885161 over GF(2), posting to NMBRTHRY mailing list [alternate link]
Index entries for sequences related to trinomials over GF(2)
EXAMPLE
a(1) = 8 because
x^8 + x^1 + 1 = (1 + x + x^2)*(1 + x^2 + x^3 + x^5 + x^6),
x^8 + x^2 + 1 = (1 + x + x^4)^2,
x^8 + x^3 + 1 = (1 + x + x^3)*(1 + x + x^2 + x^3 + x^5),
x^8 + x^4 + 1 = (1 + x + x^2)^4,
x^8 + x^5 + 1 = (1 + x^2 + x^3)*(1 + x^2 + x^3 + x^4 + x^5),
x^8 + x^6 + 1 = (1 + x^3 + x^4)^2, and
x^8 + x^7 + 1 = (1 + x + x^2)*(1 + x + x^3 + x^4 + x^6).
MATHEMATICA
Do[ k = 1; While[ ToString[ Factor[ x^n + x^k + 1, Modulus -> 2 ]] != ToString[ x^n + x^k + 1 ] && k < n, k++ ]; If[ k == n, Print[ n ]], {n, 2, 234} ]
PROG
(PARI) is(n)=for(s=1, n\2, if(polisirreducible((x^n+x^s+1)*Mod(1, 2)), return(0))); 1 \\ Charles R Greathouse IV, May 30 2013
CROSSREFS
Complement of A073571. Cf. A001153, A002475, A073639.
Sequence in context: A328241 A287159 A272486 * A188198 A129410 A338598
Adjacent sequences:  A057483 A057484 A057485 * A057487 A057488 A057489
KEYWORD
nonn
AUTHOR
Robert G. Wilson v, Sep 28 2000
STATUS
approved
===
]]]


usage:readline

download:the GP language
  view /storage/emulated/0/0my_files/book/math/fxtbook[Matters Computational][Algorithms for Programmers].pdf
  pkg install pari
  https://gpblocks.org/download/
    https://gpblocks.org/versions/GP.zip
      24M

高精度浮点数运算/脚本/原理
  e others/数学/float/浮点数运算.txt
BBP
BBP-type formulas
  view:/storage/emulated/0/0my_files/book/math/float/High-Precision Arithmetic-Progress and Challenges(after2015)(Bailey).pdf
  e others/数学/BBP-type-formulas[浮点数片段截取].txt

翻译:极简模式/极简主义
  ??extreme case??
[[
极度:
top
utmost
extreme
vital
===
top:n. 顶部，顶端；上部；首席；陀螺vi. 结束；达到顶点；高出，超越
utmost:n. 极限；最大可能adj. 极度的；最远的
extreme:adj. 极端的；极度的；偏激的；尽头的n. 极端；末端；最大程度；极端的事物
vital:adj. 生死攸关的；至关重要的；有活力的
===
simplicity:n.
simplify:vt
simple:adj
simpleton:n. 头脑简单的人, 傻子
simplified:adj.简化了的，简式，简易式
simplicial:adj. 单纯的(单形的)
simplicial homology:单纯同调
simplicial subdivision:单形分割
simplicial approximation:单纯逼近
===
]]



factor:源代码:
  https://www.gnu.org/software/coreutils/factor

构想:翻译


十二都天神魔:
都:
 10.泛指匯聚。
 明徐渭《歌風臺》詩之一：“豐沛中，群酒徒，噱季鼻大糟所都，誰喚隆準而公乎？”
 11.居；處於。
 《漢書‧東方朔傳》：“蘇秦、張儀一當萬乘之主，而都卿相之位，澤及後世。”
 顏師古注引如淳曰：“都，居也。”
 隋王通《中說‧立命》：“子曰：氣為上，形為下，識都其中，而三才備矣。”
 阮逸注；“都，居也。”
 宋范鎮《東齋記事》卷一：“是時，山東顏太初作詩美其不忘本，而刺譏士大夫都貴位、享厚祿，而不知尊孔子。”
 12.統領，統率。
 唐陸龜蒙《江湖散人歌》：“大君年小丞相少，當軸自請都旌旗。”參見“都部”。
 13.美好；閑雅。
















[[
杀破狼:何解？
LL0?
LL(0)?
]]

[[
躶？
捰倮躶裸
捰:捰袖揎拳
倮=裸
躶
]]

[[
感觉不太对:
@x:A. B
    dependent product
?x:A. B
    dependent sum

]]

[[
TODO:
"An Extended Calculus of Constructions (1990)(Zhaohui Luo)(PhD thesis)"
]]

[[
TODO:
dlopen failed: cannot locate symbol "stg_bh_upd_frame_info"
  ghc
  runghc
  man ghc
ghc ../../python3_src/haskell_src/try_Parsec.hs --run
<interactive>: <command line>: dlopen failed: cannot locate symbol "stg_bh_upd_frame_info" referenced by "/data/data/com.termux/files/usr/lib/ghc-9.2.5/text-1.2.5.0/libHStext-1.2.5.0-ghc9.2.5.so"...
]]

[[
TODO
  gbk each version update chars+time
  https://icu-project.org/docs/papers/gb18030.html
  e ../lots/NOTE/encoding/gbk-www.txt
]]





[[
TODO:F_Droid::游戏
  e others/app/app.txt
  『+』:已下载
  ===新版优先:
  +Xeonjia寒冰之旅
    29.2 MiB @ver:3.0.1
    日式RPG
    换地图时自动保存，没有其他保存方法
    只能退出到主菜单界面，没有退出应用的途径！

  +Li-Ri
    23.1 MiB @ver:3.1.4
    在岔口点击选择前进方向？贪吃蛇？

  +小行星的报复
    39.3 MiB @ver:0.10.8
      ???有点无趣

  ===旧版优先
  +PlanetCon
    ok
  +...knights...
    ok
  +Computational Demonology
    ok,耗电？
  +Thugaim
    非全屏？
  +Ask me any meaningful
    过气，不正常运行
  AndroFish
  Planet Rider
  freeminer
  ReGeX
    Perl regex
  Open Flood
  starun
  frozen bubble
  Rocket Guardian
  Tanks...
  Critical...
  defendo

]]






[[
TODO:download:ver15 ucd,unihan...
TODO:download:CLDR
[CLDR]	CLDR - Unicode Common Locale Data Repository
http://cldr.unicode.org/
For the latest version of the associated specification (LDML), see:
https://www.unicode.org/reports/tr35/
==>>:
  the Default Unicode Collation Element Table (DUCET)
/sdcard/0my_files/unicode/unicode14_0/www.unicode.org/reports/tr10/tr10-45.html
Unicode® Technical Standard #10 Unicode Collation Algorithm
UTS10

]]


[[[
TODO:upload
===

%s/^\/storage\/emulated\/0/\/sdcard
/sdcard/0my_files/tmp/out4py/script.搜索词汇中的回文..收集词汇中的可反转词.7词典词汇.out.txt



/sdcard/0my_files/tmp/out4py/script.中文字典囗..格式化囗新华字典囗..新华字典.out.txt
/sdcard/0my_files/tmp/out4py/script.汉语辞海囗.dump8dic.out.txt


/sdcard/0my_files/tmp/out4py/去除冗余-欧路词典囗.二十一世纪英汉汉英双向词典.out.词典.txt
/sdcard/0my_files/tmp/out4py/古汉语字典囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
/sdcard/0my_files/tmp/out4py/汉语辞海囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
/sdcard/0my_files/tmp/out4py/英语词霸囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt


===
ls /sdcard/0my_files/tmp/out4py/汉语字典囗*
/sdcard/0my_files/tmp/out4py/汉语字典囗.py..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
/sdcard/0my_files/tmp/out4py/汉语字典囗.py..义未详.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
/sdcard/0my_files/tmp/out4py/汉语字典囗.py..仅提取拼音..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
/sdcard/0my_files/tmp/out4py/汉语字典囗.py..仅提取拼音.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
/sdcard/0my_files/tmp/out4py/汉语字典囗.py..仅提取笔顺码..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
/sdcard/0my_files/tmp/out4py/汉语字典囗.py..仅提取笔顺码.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt

===
ls /sdcard/0my_files/tmp/out4py/script.欧路词典囗*
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.中华成语大词典.out.杂项.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.中华成语大词典.out.词典.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.中华成语大词典.out.词汇.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.新世纪汉英科技大词典.out.杂项.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.新世纪汉英科技大词典.out.词典.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.新世纪汉英科技大词典.out.词汇.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.新世纪汉英科技大词典.out.词汇囗依词义序囗附词义字节串信息.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.新世纪英汉科技大词典.out.杂项.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.新世纪英汉科技大词典.out.词典.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.新世纪英汉科技大词典.out.词汇.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.新世纪英汉科技大词典.out.词汇囗依词义序囗附词义字节串信息.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.杂项.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.杂项.单列校 验.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.词典-初步清 理.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.词典-词汇繁 简对照-补空.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.词典-词汇繁 简对照.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.词典.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.词汇.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.词汇.单列校 验.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.汉语大辞典.out.词汇囗依词义序囗附词义字节串信息.单列校验.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.现代汉语词典.out.全文.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.现代汉语词典.out.杂项.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.现代汉语词典.out.词典.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.现代汉语词典.out.词汇.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.计算机词汇.out.杂项.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.计算机词汇.out.杂项.单列校 验.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.计算机词汇.out.词典.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.计算机词汇.out.词典.单列校 验.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.计算机词汇.out.词汇.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.计算机词汇.out.词汇.单列校 验.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗假设简介字节数地址固定囗.计算机词汇.out.词汇囗依词义序囗附词义字节串信息.单列校验.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗定位关键位置全过程囗自动化囗.二十一世纪英汉汉英双向 词典.out.杂项.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗定位关键位置全过程囗自动化囗.二十一世纪英汉汉英双向 词典.out.词典.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗定位关键位置全过程囗自动化囗.二十一世纪英汉汉英双向 词典.out.词汇.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗.试读囗 囗定位关键位置全过程囗自动化囗.二十一世纪英汉汉英双向 词典.out.词汇囗依词义序囗附词义字节串信息.txt
/sdcard/0my_files/tmp/out4py/script.欧路词典囗汉语大辞典.看看有哪些直接存储的字符串.out.select.txt
===
]]]
[[[
===
煎蛋:
https://wx3.moyu.im/large/6d050af1ly1hevfay3f5ng20600ao7wo.gif
Sorry, you have been blocked
You are unable to access moyu.im
===
https://github.com/DIYgod/RSSHub/issues/11528
煎蛋网 所有图片都无法显示 #11528

===
]]]

[[
TODO:Y[r,c] 是啥序列？
  1,1,1,1,2,2,1,3,5,5,1,4,10,15,15,1,5,17,37,52,52
  e others/数学/oeis整数序列/A000110.txt
  #https://oeis.org/A000110
  Y[r,c] := [0==c<=r] + [1<=c<=r]*((r-c)*Y[r-1,c-1] + Y[r,c-1])
  [A000110[n]
  == Y[n,n]
  == [0==n] + [1<=n]*Y[n,n-1]
  == [0==n] + [1==n] + [2<=n]*(1*Y[n-1,n-2] + Y[n,n-2])
  == 1 + [2<=n]*sum [Y[j,j-2] | [j:<-[2..=n]]]
  ]

from functools import cache
@cache
def Y(h, n): return int(n < 1) or (h-n)*Y(h-1,n-1) + Y(h,n-1)

for h in range(N:=10):
  print([Y(h,n) for n in range(h+2)])

[1, 0]
[1, 1, 1]
[1, 2, 2, 1]
[1, 3, 5, 5, 4]
[1, 4, 10, 15, 15, 11]
[1, 5, 17, 37, 52, 52, 41]
[1, 6, 26, 77, 151, 203, 203, 162]
[1, 7, 37, 141, 372, 674, 877, 877, 715]
[1, 8, 50, 235, 799, 1915, 3263, 4140, 4140, 3425]
[1, 9, 65, 365, 1540, 4736, 10481, 17007, 21147, 21147, 17722]

https://oeis.org/A005492
https://oeis.org/A005491
https://oeis.org/A002522

1, 2, 5, 10, 17, 26, 37, 50, 65,
  https://oeis.org/A002522
  n^2+1
1,   5, 15, 37, 77, 141, 235, 365,
  https://oeis.org/A005491
  n^3 + 3*n + 1

4, 15, 52, 151, 372, 799, 1540,
  https://oeis.org/A005492
  a(n) = n^4 - 16*n^3 + 102*n^2 - 300*n + 340
  a(n) = 5*a(n-1) - 10*a(n-2) + 10*a(n-3) - 5*a(n-4) + a(n-5)

falling_factorial/Bell_number/Stirling_number
e others/数学/oeis整数序列/[A000110]A002522-A005491-A005492.txt

]]



[[
DONE:www-oeis:[1,1,2,5,15,52,203,877,4140,21147]
  e script/有限元的不等价配置数量.py
  [[[
view script/有限元的不等价配置数量.py
https://oeis.org/A000110



DONE
https://oeis.org/A008277
https://oeis.org/A008275
https://oeis.org/A008517
https://oeis.org/A008292
buggy:找出 真实定义:Stirling_number,Eulerian_1st
view ../../python3_src/nn_ns/math_nn/numbers/Stirling_number.py

  ]]]
e others/数学/oeis整数序列/A008275.txt
e others/数学/oeis整数序列/A008277.txt
]]
[[
DONE-www-oeis:
  e script/search_prime_pairs__vivi_2x5_eq_1plus3x3.py
  1, 2, 5, 9, 14, 29, 30, 35, 39, 50, 65, 69, 90, 99
    https://oeis.org/A068501
  3, 5, 11, 19, 29, 59, 61, 71, 79, 101, 131, 139, 181, 199
    https://oeis.org/A048161
  5, 13, 61, 181, 421
    https://oeis.org/A067756
  e others/数学/oeis整数序列/A068501-A048161-A067756.txt
]]
[[
DONE:重构=refactor??
  Surrogates Area: U+D800..U+DFFF
  代理区域
  ???统合码代理区
  Unicode:统一码/万国码/单一码
  emoji表情符号
e others/杂/词语解释-软件/重构.txt
e ../lots/NOTE/abbr/software.txt
]]


DONE
  view ../lots/NOTE/Haskell/download-docs.txt
  view ../lots/NOTE/Python/download-docs.txt




『寒武』何意？不是音译？Geology
  e others/杂/词语解释/寒武.txt
蛋白质与蛋白是什么关系？
  查无
  『?noadapt=1』百度百科电脑版

  https://baike.baidu.com/item/%E8%9B%8B%E7%99%BD%E8%B4%A8/309120?noadapt=1
  e others/杂/词语解释/蛋白质.txt


view others/杂/词语解释/科技三定律.txt
  “1）任何在我出生时已经有的科技都是稀松平常的世界本来秩序的一部分。2）任何在我15-35岁之间诞生的科技都是将会改变世界的革命性产物。3）任何在我35岁之后诞生的科技都是违反自然规律要遭天谴的。”
九锡文:全文
  e others/杂/词语解释/九锡.txt
git w3schools#源代码:应该没有冗余
  https://github.com/topics/w3schools
    https://github.com/devcenter-square/Learning-Resource-Path-Front-End
      https://learning-resource-path.gitbook.io/resources

https://mathworld.wolfram.com/CodingTheory.html
  https://mathworld.wolfram.com/Error-CorrectingCode.html
  e others/数学/编程/coding_theory/error_correcting_code.txt

apk:
  图片编辑器:压缩，缩放
  gif编辑器/pix-gif
  音频生成器
    py??
e others/app/termux/apt_pkg/20240627__pkg_upgrade.txt
  pkg reinstall ffmpeg
    <<==: ffmpeg 不支持『-loop 1』



[[
词义:
  grep
  glob
  perl
  git
  Pascal
    e others/杂/词语解释-软件/grep.txt
    e others/杂/词语解释-软件/glob.txt
    e others/杂/词语解释-软件/perl.txt
    e others/杂/词语解释-软件/git.txt
    e others/杂/词语解释-软件/pascal.txt
  强人
  好汉
]]





e others/杂/词语解释/三戒-柳宗元.txt
  黔之驴:临江之麋:
  柳宗元:三戒？
  奴才信条:我们被强行灌输强化某些刻板印象，包括对自身的认知。


[[

新世纪汉英科技大词典
  卷积码:
    convolutional code
    convolution code
    recurrent code
    卷积编码:convoluotinal encoding
  纠错码:error correcting code:误差纠错码组
    纠错编码:Golay code
    纠错循环码:Fire code:法尔码:法耳码
book:
  信息论
  编码论
wget_U https://bdt.semi.ac.cn/library/upload/files/2016/1/29112436302.pdf -O Algebraic_Coding_Theory.pdf
Ｂｅｒｌｅｋａｍｐ Ｅｌｗｙｎ Ｒ 
Ａｌｇｅｂｒａｉｃ Ｃｏｄｉｎｇ Ｔｈｅｏｒｙ 
Ｒｅｖｉｓｅｄ Ｅｄｉｔｉｏｎ 
２０１５， 
５００ ｐｐ
https://github.com/apachecn/huazhang-cs-books/
https://github.com/apachecn/huazhang-cs-books/blob/master/%E4%BF%A1%E6%81%AF%E8%AE%BA%E3%80%81%E7%BC%96%E7%A0%81%E4%B8%8E%E5%AF%86%E7%A0%81%E5%AD%A6.pdf
/信息论、编码与密码学.pdf
12.2MB


https://www.researchgate.net/publication/293123965_Algebraic_geometry_of_codes_handbook_of_coding_theory
  https://www.researchgate.net/profile/R-Pellikaan/publication/293123965_Algebraic_geometry_of_codes_handbook_of_coding_theory/links/56c59cc708ae7fd4625baa21/Algebraic-geometry-of-codes-handbook-of-coding-theory.pdf?_tp=eyJjb250ZXh0Ijp7ImZpcnN0UGFnZSI6InB1YmxpY2F0aW9uIiwicGFnZSI6InB1YmxpY2F0aW9uIn19
Algebraic geometry of codes, handbook of coding theory
January 1998
Authors:
T. Høholdt
J. Van Lint
R. Pellikaan
Eindhoven University of Technology

wget_U 'https://www.researchgate.net/profile/R-Pellikaan/publication/293123965_Algebraic_geometry_of_codes_handbook_of_coding_theory/links/56c59cc708ae7fd4625baa21/Algebraic-geometry-of-codes-handbook-of-coding-theory.pdf?_tp=eyJjb250ZXh0Ijp7ImZpcnN0UGFnZSI6InB1YmxpY2F0aW9uIiwicGFnZSI6InB1YmxpY2F0aW9uIn19' -O 'Algebraic geometry of codes-handbook of coding theory(1998).pdf'
curl -L -C - -f -S --remote-name-all 
curl -L -C - -f -S --remote-name-all https://www.researchgate.net/profile/R-Pellikaan/publication/293123965_Algebraic_geometry_of_codes_handbook_of_coding_theory/links/56c59cc708ae7fd4625baa21/Algebraic-geometry-of-codes-handbook-of-coding-theory.pdf?_tp=eyJjb250ZXh0Ijp7ImZpcnN0UGFnZSI6InB1YmxpY2F0aW9uIiwicGFnZSI6InB1YmxpY2F0aW9uIn19


Reed-Solomon码
    将数据编码为多项式方程以纠正突发错误。
    用于存储设备和卫星通信。
    纠错能力强但计算复杂度高。


https://pages.mtu.edu/~tonchev/Coding-Theory-Tohoku-June-09.pdf
https://www.researchgate.net/publication/281218335_Coding_theory
https://madhu.seas.harvard.edu/papers/2001/focs01-tut.pdf

An Introduction to Coding Theory: Lecture Notes 
Vladimir D. Tonchev 
http://www.math.mtu.edu/∼tonchev/Coding-Theory-Tohoku-June-09.pdf 
May 16, 2009


cd /sdcard/0my_files/tmp-download/coding_theory/
mv -iv Coding_theory.pdf 'Workshop--Coding theory(2007)(Shokrollahi).pdf'
  论文集
mv -iv lect.pdf 'Modern Coding Theory--The Statistical Mechanics and Computer Science Point of View(2007)(Montanari).pdf'
  信息熵，信道编码#无用
mv -iv 31.pdf  'Algebraic geometry of codes-handbook of coding theory(1998).pdf'
  过于抽象
mv -iv focs01-tut.pdf 'Coding Theory--Tutorial+Survey(2001)(Madhu Sudan).pdf'
  回顾(含实例)[good]
mv -iv Coding-Theory-Tohoku-June-09.pdf 'An Introduction to Coding Theory--Lecture Notes(2009)(Tonchev).pdf'
  待查看



]]


ffc080:eec591:burlywood2#??实木色??
  硬木色？
颜色翻译对照
  e others/杂/颜色翻译对照.txt
html tag example
  e ../lots/NOTE/html/tag.txt
  view ../lots/NOTE/html/tag/TODO.txt
vim:encode/decode:bytes / blob ops example


无遮大会:『遮』字？遮奢/遮丑/遮羞
  e others/杂/词语解释/无遮大会.txt
金针菇:自种
  e others/杂/金针菇种植.txt

大马哈鱼？鲑鱼？回溯产卵？
  大马哈鱼 是 鲑鱼 一种，回溯产卵[yes]
汉字拆分:
  单字管理:单字-->不同字体
    归类:
      *字形唯一的汉字
      *有不同字形的汉字
    归类:
      结构+偏旁
  pdf to image
  pdf font extractor
  font to image render
  image process
  html font
  iphone web server

upload:
  view /sdcard/0my_files/tmp/out4py/去除冗余-欧路词典囗.二十一世纪英汉汉英双向词典.out.词典.txt

[[

Pascal-P language specification
  https://standardpascal.org/PascalP.html
  P5 - 标准化
  P6 - 扩展
P-code specification
  P-Code Reference Manual
  https://spinsel.dev/assets/2020-06-17-ghidra-brainfuck-processor-1/ghidra_docs/language_spec/html/pcoderef.html
==>>:
e /sdcard/0my_files/book/lang/Pascal/www-Pascal.txt
e /sdcard/0my_files/book/lang/P_code/www-P_code.txt
]]







https://www.w3schools.com/TAGs/
  view script/clean_w3schools_html_TAGs.py
  view ../lots/NOTE/html/tag/README-show-html.txt
view others/app/termux/web_server.txt
  apache2::httpd
download:shell web browser
  view others/app/termux/browser.txt
  lynx


www:老鼠吃不吃蟑螂？
www:撞白？活性黑
www:脚手架？
www:铁的密度？金箍棒若是铁打的，体积多少？才『一萬三千五百斤』，一点都不玄幻！
  铁密度:7874 kg/m^3
  金箍棒体积牜铁 = (13500/2 kg) / (7874 kg/m^3) = 13500/2/7874 m^3 = 0.857251714503429 m^3
  金密度:19.32 g/cm^3
  金箍棒体积牜金 = (13500/2 kg) / (19320 kg/m^3) = 13500/2/19320 m^3 = 0.34937888198757766 m^3
  e others/杂/词语解释/密度.txt

www:标点符号的区别:symbol vs punctuation
  e others/杂/词语解释/symbol vs punctuation.txt
wwww:寺人-->寺庙？先有的『寺人』，再由『无后』拓展到僧侣？







DONE:
  to search in oeis:
    view others/数学/condition4_WW1_eq_2VV.txt

[[[
查无@20140608
===
to search in oeis:
seq of odd4Nmm:from:
  view ../../python3_src/seed/math/primality_proving__plain.py
  view ../../python3_src/seed/math/_output_/seed.math.primality_proving__plain..iter_continue4iter_odd_prime_exs__zpow_dominance_Pmm__P_per_bit_length_.out.txt
      (num_bits4N, odd4Nmm, ez4Nmm, gz)
===
(2, 1, 1, 2)
(3, 1, 2, 2)
(4, 3, 2, 2)
(5, 1, 4, 3)
(6, 5, 3, 3)
(7, 3, 5, 5)
(8, 3, 6, 5)
(9, 1, 8, 3)
(10, 3, 8, 7)
(11, 9, 7, 5)
(12, 13, 8, 3)
(13, 15, 9, 13)
(14, 3, 12, 11)
(15, 9, 11, 5)
(16, 5, 13, 3)
(17, 1, 16, 3)
(18, 5, 15, 3)
(19, 33, 13, 5)
(20, 3, 18, 5)
(21, 9, 17, 19)
(22, 21, 17, 5)
(23, 7, 20, 3)
(24, 13, 20, 3)
(25, 11, 21, 3)
(26, 69, 19, 5)
(27, 25, 22, 3)
(28, 5, 25, 3)
(29, 7, 26, 3)
(30, 45, 24, 11)
===
(1, 1, 3, 1, 5, 3, 3, 1, 3, 9, 13, 15, 3, 9, 5, 1, 5, 33, 3, 9, 21, 7, 13, 11, 69, 25, 5, 7, 45, 15, 3, 59, 23, 45, 49, 9, 3, 73, 99, 15, 5, 3, 63, 27, 9, 9, 15, 27, 63, 19, 15, 7, 23, 7, 17, 25, 5, 51, 49, 27, 29, 87, 27, 31, 45, 9, 3, 9, 75, 9, 33, 31, 23, 221, 39, 39, 5, 39, 29, 67, 15, 25, 145, 9, 13, 249, 5, 51, 37, 53, 65, 87, 61, 7, 57, 27, 29, 33, 43, 85
    , ... ..., 2595, 1633, 1565, 1191, 3067, 471, 2403, 379, 733, 1593, 3127, 2657, 589, 1945, 775)
    #odd4Nmm__seq for num_bits4N <- [2..=2102]
  查无@20140608
===
===
===
seq of significand4Nmm<10>:from:
  view ../../python3_src/seed/math/_output_/seed.math.primality_proving__plain..iter_continue4iter_xxx_odd_prime_exs__radix_pow_dominance_Pmm__P_per_num_digits4N_.10.out.txt
(1, 1, 3, 7, 7, 21, 3, 6, 6, 3, 22, 19, 4, 42, 6, 69, 13, 37, 15, 6, 96, 9, 28, 96, 61, 6, 9, 3, 51, 33, 63, 57, 112, 55, 49, 3, 16, 6, 12, 42, 24, 36, 72, 21, 6, 21, 24, 33, 61, 21, 85, 31, 49, 13, 93, 18, 9, 151, 16, 123, 19, 9, 42, 111, 6, 31, 3, 36, 16, 196, 115, 19, 99, 15, 141, 147, 42, 9, 16, 42, 3, 82, 88, 63, 16, 19, 264, 112, 78, 123, 226, 43, 63, 55, 16, 13, 94, 27, 72, 82, 321, 111, 22, 123, 84, 13, 88, 48, 124, 42, 115, 6, 55, 192, 39, 205, 34, 46, 45, 97, 37, 64, 85, 289, 234, 13, 79, 135, 48, 97, 238, 73, 78, 165, 115, 7, 94, 564, 39, 201, 234, 7, 502, 15, 511, 33, 3, 88, 109, 36, 16, 162, 51, 52, 205, 228, 279, 7, 231, 156, 229, 114, 213, 13, 115, 226, 171, 226, 19, 121, 208, 145, 361, 664, 244, 114, 69, 151, 16, 235, 49, 172, 355, 126, 42, 436, 258, 277, 82, 189, 16, 82, 15, 235, 39, 429, 103, 72, 117, 24)
  查无@20140608
]]]
]]]





阶元系统
  生物分类 乱七八糟 改来改去，何不用『一级类』『二级类』...代替『种属科目纲门界域』？


Mersenne Twister
e others/数学/PRNG/Mersenne_Twister.txt
https://cs.stackexchange.com/questions/50059/why-is-the-mersenne-twister-regarded-as-good
Best and fastest are: wyrand, xoshiro128+, xoroshiro64**, xoshiro128++, xoroshiro64*, lxm, efiix64 plus the slow threefry2x64.






生物图鉴，或 分类谱系-纲门类科种？貓科
  e others/杂/生物分类谱系.txt
界 门 的 区别
中国生物物种名录2023版在线发布
分类学
域（Domain）、界（Kingdom）、门（Phylum）、纲（Class）、目（Order）、科（Family）、属（Genus）、种（Species）
Domain Kingdom Phylum Class Order Family Genus Species




[[
e others/book/pseudo_period_of_word.txt
===20230722新增:
P. T. Nielsen. A Note on Bifix-Free Sequences. IEEE Transactions on Information Theory, vol. IT-29, 704-706, September 1973.
  https://www.semanticscholar.org/paper/A-Note-on-Bifix-Free-Sequences-Nielsen/748f2ba160314efd750671a74c85d54275f64d53
    http://orbit.dtu.dk/files/4640005/Tolstrup.pdf
      A Note on Bifix-Free Sequences(1973)(Tolstrup Nielsen)[good].pdf
]]



[[
e others/app/无法访问本地路径.txt
app 浏览本地网页，防止路径加密
  app view local webpage by path
  ==>>web server
  ==>>httpd
$ httpd
The program httpd is not installed. Install it by executing:
 pkg install apache2
e others/app/termux/web_server.txt


PrivacyBrowser #12.9MB#F_Droid
  左上角『三』-->open-->BROWSE-->左上角『三』-->『囗手机名』-->...
  真我-手机-有效本地网页地址
  content://com.android.externalstorage.documents/document/primary%3A0my_files%2Funicode%2Funicode14_0%2Fwww.unicode.org%2Freports%2Ftr31%2Ftr31-35.html
  view /sdcard/0my_files/unicode/unicode14_0/www.unicode.org/reports/tr31/tr31-35.html
]]


app font to pix picture
  e others/数学/编程/python/py-font-info-extract.txt
android 系统字体 路径
  e script/hz/汉字笔顺码初步分解.py
  view script/hz/查看哪些汉字无法显示.py
    ...没用...不知 系统字体 及其路径
  字体文件 信息提取
  字体工具app
  view others/app/gvim/set_font.txt
    『查找系统字体路径』
    ls /system/fonts -1

[[
上传 欧路词典-解包后+原文件
下载 zlib decompress 代码
下载 txt 汉语大辞典
反编译 java,app #欧路词典::汉语大辞典
  view script/欧路词典.py
  1317108648.eudb
    '汉语大辞典'
    昔者莊周夢為胡蝶
py script/欧路词典.py search -t '昔者莊周夢為胡蝶' -i  /sdcard/20220614_copy5sd__0my_files/unzip/eudb_en/1317108648.eudb   -v 2
  无结果
py script/欧路词典.py search -t '汉语大辞典' -i  /sdcard/20220614_copy5sd__0my_files/unzip/eudb_en/1317108648.eudb   -v 2
1046
view /sdcard/20220614_copy5sd__0my_files/unzip/eudb_en/1317108648.eudb
e script/欧路词典囗.py
  下载 zlib decompress 代码
]]

TODO:天干地支-单字~系统解释
  e others/杂/词语解释/干支.txt
  《七修類稿‧天地六‧支干》
  《甲骨文字研究‧釋支干》
  『辛』:
   明郎瑛《七修類稿‧天地六‧支干》：“辛，被罪也。”
   參閱郭沫若《甲骨文字研究‧釋支干》。



告死？查无
频显？频现？查无
七寸？查無

挠脚底？古代人到底穿不穿内裤？
成王败寇-出处？最晚元朝
杞狗？芝馬？没查到
钻木取火-出处-韩非子？
圊团-没查到
尾指？小指？#查无『尾指』
脐带？#查无『内呼吸』
二十等爵？
  五大夫:為二十等爵的第九級。
  列大夫/公大夫/七大夫:秦二十等爵中的第七級。
奇書？易經、山海經？素问？


？囡囡===阿奴？
？麻将『和/胡』<<==『亡秦者胡也』？
法律法规
  实际案例
  青梅竹马条款？
e others/杂/法律法规/青梅竹马条款.txt




[[[
===
e others/数学/本福特定律[首位数字概率相关].txt
如意小郎君::第二百九十四章 户部假账
　　本福特定律的深层原因唐宁也不清楚，他只知道，在一堆从实际生活得出的数据中，以一为首位数字的数的出现概率约为总数的三成，接近期望值九分之一的三倍，这也被称为第一数字定律。
      --??那要是改变进制数的底数呢？
      --其余位置什么情况？
]]]




xxx:fail:古今中外姓氏汇总

不允许建房是怎么回事？
DONE:调色板:对色号
输入法:黑色背景+双拼自然码+键盘布局自定义

DONE:矩阵乘法链？结合律
  view others/book/On-instances-of-the-matrix-chain-product-problem-solved-in-linear-time (2009)(Sana).pdf.txt

e others/数学/float/high-precision-floating-point-arithmetic.txt
浮动数高精度算法




最短加链
http://additionchains.com/
  也不错
  http://additionchains.com/st.cpp
  https://www.sciencedirect.com/science/article/pii/S0012365X20303861
    https://www.sciencedirect.com/science/article/pii/S0012365X20303861/pdfft?md5=1ced526251333e825a447351cea41581&pid=1-s2.0-S0012365X20303861-main.pdf
    wget 'https://www.sciencedirect.com/science/article/pii/S0012365X20303861/pdfft?md5=1ced526251333e825a447351cea41581&pid=1-s2.0-S0012365X20303861-main.pdf' -O 'Addition chains, vector chains, and efficient computation(2021)(Edward G.Thurber).pdf'
    下载中断？TODO:重下
    --> e others/数学/最小加法链.txt




DONE:陛下，殿下，阁下，在下，卑下，标下
  view others/杂/词语解释/陛下，殿下，阁下，在下，卑下，标下.txt

[[
wget 403: Forbidden.
===
https://bobcares.com/blog/wget-403-forbidden/
===
Wget 403 forbidden – Quick Fix!!
by Lakshmi S Panicker | Jan 7, 2020

Are you stuck with Wget 403 forbidden? Here’s how we fix it.

Usually, wget 403 forbidden occurs due to errors with cookies, referer, user agent and so on.
]]
[[DONE:
view ../../python3_src/nn_ns/math_nn/numbers/exponents4Fermat_prime.py
费马素数
  已知 列表
  Fermat_number
  [3, 5, 17, 257, 65537, 4294967297, 18446744073709551617, ... (sequence A000215 in the OEIS).]
  https://oeis.org/A000215
    It is conjectured that just the first 5 numbers in this sequence are primes.
]]

[[DONE:2^m±1
view others/数学/整数分解/factorint.txt
https://primes.utm.edu/references/refs.cgi/BLS75
  J. Brillhart, D. H. Lehmer and J. L. Selfridge, "New primality criteria and factorizations of 2m ± 1," Math. Comp., 29 (1975) 620--647.  MR 52:5546 [The article for the classical (n2 -1) primality tests. Table errata in [Brillhart1982]]
]

更新 微信

名:
  树新蜂
  晴雨
  雅译

see: TODO.txt [explain-section:待查-]
一家 白藕 青叶 红莲

?下载《论语疏证》杨树达
  view /storage/72A2-151D/000edt/0my_files/book_txt/小说天堂txt/重命名/小说天堂txt-3/《论语疏证》.txt
    #子罕第九 诸后缺失
?下载 老子他说
  view  /storage/72A2-151D/000edt/0my_files/book_txt/小说天堂txt/重命名/小说天堂txt-6/《老子他说》.txt
    共26章，也只解说了 道德经 前26章，似乎不全
?下载《云笈七签》《雲笈七籤》
?下载《春秋策：先秦诸子与史记评述》 第2章 诸子天人论导源 『兹为图以明五者之相关如下：』下面没有了。
view ++enc=gbk /mnt/m_external_sd/000edt/0my_files/novel/《逍遥小书生》（校对版全本）作者：荣小荣.txt
  一百多章后，尾丢头前插
  第91章~第120章 完全缺失
    第91章 我家小姐有请
    第120章 如仪视察
永乐:
  纪纲 死期 与 刘永福？战败于北漠，孰先孰后？
    #拖后腿？
    #土木堡？
古代每户人家平均几人？
婚礼新娘跑路，份子钱咋整？
外挂接口？外挂 翻译 ？attachment?


天气晚来秋
四书五经，大学
歌词:爱恨情仇 人憔悴

Heyting algebra model
    not_all2any_not:To demonstrate that this is not constructively valid we need the more powerful technique of Heyting algebra models, which are beyond the scope of this Primer.
to download: Primer Homotopy Type Theory
    A Primer on Homotopy Type Theory Part 1: The Formal Type Theory
      http://philsci-archive.pitt.edu/11157/1/HTT_Primer%2DPART%2D1.pdf
        philsci-archive.pitt.edu/11157/1/HTT_Primer-PART-1.pdf




TODO 翻译
  无印 #初版？无副标题？无版本号？无标签？
DONE 翻译
  raw_string raw string 原始字符串/原生字符串
    e others/数学/编程/术语/raw_string原始字符串_原生字符串.txt
  first order logic 一阶逻辑
    e others/数学/编程/logic/命题逻辑vs一阶谓词逻辑.txt
  同或 XNOR
    e others/数学/编程/术语/同或XNOR.txt
    异或 XOR = [is_odd total_1s]
    同或 XNOR = ???
      if = not $ fold XOR<2> =[is_even total_1s]
      if = fold XNOR<2> =[is_even total_0s]
      if = pairwise EQU<2> =[0 == total_0s]or[0 == total_1s]
    同或 XNOR/ENOR/ExNOR 同或门=异或非门



book about
  first order logic 一阶逻辑/[一阶]谓词逻辑
  propositional logic 命题逻辑

[[[[[
]]]]]
[[[[[
]]]]]




农历公历对照表 农历节日 公历节日
  e others/数学/编程/农历/py农历.txt
现代 电器 电磁炉 为何便宜？

DONE 万年历数据 github
<h3 id="-2012pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373454963">中华万年历全书(超值版) (家庭珍藏经典畅销书系)-2012.pdf</a></h3>
  87.07MB 未下载

https://gist.github.com/chenzx/5004512
  Chinese 10000 Yeas' Calendar · GitHub
https://github.com/anbangli/worktips/blob/master/%E6%97%A5%E6%A2%AD%E4%B8%87%E5%B9%B4%E5%8E%86.htm
  worktips/日梭万年历.htm - github.com
  一些常用软件的教学资料. Contribute to anbangli/worktips development by creating an account on GitHub.

DONE 葡萄干 吃前 需不需要 清洗？
  需要 清洗！
238g 食品重量 为什么有此常见的重量？



手机充值
c++哪些库 需要 链接？-lstdc++ -lm？
便携式存储器 外部存储器 获得 写权限

为什么手机 刷<F5>键？是不是可用内存太少，需要显式垃圾回收？还是 闹钟作怪？

下载:
  古籍-纯文本
    论语
      https://m.xstt5.com/txt/18-901-0.html



how new operator satisfy alignment
  void* operator new  ( std::size_t count, std::align_val_t al );
    (3) 	(since C++17)
  void* operator new[]( std::size_t count, std::align_val_t al );
    (4) 	(since C++17)
how unordered_map::rehash() (worst caseO(n∗n))
  需要测试相等？插入一个元素是O(n)，构造一个映射表是O(n**2)，但只要equal_to<T>不变，复制/赋值/rehash()恰好不需要 相等测试，所以只要O(n)，哪来的O(n**2)？


c++如何构造 异常信息？for main()catch(...)#all
  how to get the trace at the current point
    #include <execinfo.h>
    backtrace
    execinfo.h backtrace
  c++ print exception context like terminate

update termux clang c++20
  2021-07-25 仅支持C++1y
c++
  std:: or ::std::
  e others/book/C++.txt
下载:
  e others/book/C++.txt
  ISO C++ standard library specification
  ISO C standard library specification
  C语言标准 draft
    http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf
  posix 标准
    http://www.open-std.org/JTC1/SC22/WG15/
  regex 标准？
  C++标准库 各库清单
  C标准库 各库清单
  C++标准 网页版
  C标准 网页版


手机充值卡？怎么充值优惠？关注 中国联通 公众号？
  您的设备处于root环境 是什么意思？
  【温馨提醒】尊敬的客户，目前本机号码余额不足20元，为保证您的正常通信，建议您及时充值话费。现可参与充值50元另得50元话费活动，点击： https://u.10010.cn/qApN2 立即参与（限收到短信当月参与一次，转发无效）。回复TD屏蔽【广东联通】

pdf:
  Gaussian elimination [Freeman,1992], [Stewart,1998], [Wood,1999]
  DONE tensors张量矩阵泛化
      e others/book/tensors张量矩阵泛化.txt
  DONE 大素数随机生成器 big prime number generate for crypt
      e others/数学/编程/生成大素数.txt


关注领域:
  prop 逻辑命题
  lambda/combinatory?
    formal proof 形式证明
      type theory 类型理论
      PTS #pure type system
  grammar
    CFG 上下文无关语法
    regex
      DFSM
      IDFSM 非确定型有限状态机
  group
    group representation #？群的归一化关系表达型？
    matrix 矩阵
    polynomial 多项式
  knot
  graph
    DAG 有向无环图
    planar-graph 平面图
  number series
    prime number
    continued-fraction
      geometry?-compute?
  crypt 密码学
    digest/hash 摘要/散列
    compress? 压缩



白噪声-大暴雨-下载音频
  白噪声 音频 python 生成
    https://www.cnblogs.com/HolyShine/p/10445067.html
    e others/数学/编程/python/python生成音频.txt
9527 - 95年2月7日？？no 鸠唔易出


DONE ERP EPR
DONE empty-base optimization
DONE 手机 TF存储卡，格式化 内部存储器 便携式存储器 区别
  why android repeating keys
DONE 要什么自行车
DONE yyds 永远滴神
DONE 腐竹vs豆皮vs腐皮vs腐枝  #腐皮 vs 腐竹 及 营养 吸收 配合
DONE 黄金万两体积多大




e /sdcard/0my_files/zip/万年历github/www.txt
github 格式
  https://github.com/<user_name>/<repo_name>
    https://github.com/<user_name>/<repo_name>.git
    gh repo clone <user_name>/<repo_name>
    https://github.com/<user_name>/<repo_name>/archive/refs/heads/master.zip

万年历数据 github
  https://github.com/songgz/wizcalendar
    https://github.com/songgz/wizcalendar.git
    gh repo clone songgz/wizcalendar
    https://github.com/songgz/wizcalendar/archive/refs/heads/master.zip
    wizcalendar
      chinese calendar （重构寿星天文万年历）
      参考 http://bieyu.com/
      许剑伟先生(福建莆田第十中学)的“寿星”天文万年历，是一款真正精确的万年历，它提供西元-4712年到西元9999年的西历及农历日期查询。
      寿星万年历采用先进的天文算法，使用javascript实现，可以说是目前为止最好的万年历实现版本。但是许先生毕竟不是专业的程序员，所以程序代码写的很杂乱，非常不符合程序规范，也不符合程序库的规范，也不符合W3C的标准。
      在各种浏览器中的兼容性极差，极大地影响了这套代码的复用，枉费了许先生艰辛地研究天文算法的一翻心血。
  https://github.com/yuangu/sxtwl_cpp
    寿星天文历的C++实现版本
    详细介绍
      sxtwl_cpp是一个寿星天文历的C++实现日历库。因为其依据天文历法算法实现，故其可查询范围广(BC722年以后与实历相符)。支持Android、IOS、Windows、MacOS、Linux等平台。使用swig暴露接口给python,lua,java等语言使用。
    功能介绍
        获取农历、公历以及天干地支数据
  https://github.com/rpplusplus/LunarCalendar
    LunarCalendar
      一个由 JS 万年历移植而来的，兼容 iOS / Android 的 cpp 农历模块，量程为 1900~2100 。
      对于 iOS，还提供一个用 JSCore 直接调用 Calendar.js 的版本
    功能
        支持 农历 转 公历
        支持 公历 转 农历
        支持 天干、地支 数据
        支持 24 节气
        支持 农历日期的中文显示
  https://github.com/zzyss86/LunarCalendar
    https://github.com/zzyss86/LunarCalendar/archive/refs/heads/master.zip
    #LunarCalendar#
      农历（阴历）万年历，是一款支持Node.js和浏览器端使用的全功能农历和公历日历类库。支持农历与公历之间相互转换，含有二十四节气，天干地支纪年纪月纪日，生肖属相，公历节假日及农历传统节假日信息等功能。自带2013-2014节假日安排数据，并可自行配置。带有黄历数据，可自行选择配置。支持1891-2100年。使用LunarCalendar可快速开发一款属于自己的万年历产品，行动起来吧！
    ##Install##
        Node.js服务器端(使用npm安装)： npm install lunar-calendar
    浏览器端使用，引用脚本： <script type="text/javascript" src="lib/LunarCalendar.min.js"></script>

  https://github.com/mircode/calender
    #压缩包 33MB！
    万年历 Calender
        本款万年历实现了农历，公历，天干地支，24节气，国内国际假日，每日宜忌（08年20年），节假日（14年16年）的查询。 万年历界面采用百度日历UI界面，核心JS代码手动编写，没有依赖函数库。代码采用模块式开发，gulp构建，HBuilder开发。另用node-webkit打包了一版桌面应用，方便使用。
    四、主要模块
        核心算法模块（calender.js）
        仿jQuery模块，提供工具函数（common.js）
        Dom模块，生成HTML页面结构（dom.js）
        Event模块，日历中各种事件（event.js）
        入口模块（main.js）
  https://github.com/jkinfeng/dbwnl
    https://github.com/jkinfeng/dbwnl/archive/refs/heads/master.zip
    数据库 万年历 公元1900-01-01至2099-12-31截止的日历信息，包含节气，数据库查询即可，无需天文等计算方式

  https://github.com/iceplumblossom/sxwnl
    https://github.com/iceplumblossom/sxwnl/archive/refs/heads/master.zip
    本项目起源于网络上的寿星万年历。

  https://github.com/qaiu/sxwnl-cpp
    https://github.com/qaiu/sxwnl-cpp/archive/refs/heads/master.zip
    基于寿星万年历的天文历算法库

[[[
e others/数学/编程/农历/0农历在线www.txt
  others/数学/编程/农历/0农历在线[四个网站两个有用].zip

===
寿星万年历 http://bieyu.com/
  wget http://bieyu.com/
  wget http://www.nongli.net/sxwnl/

日梭万年历网络版
  wget https://ks3-cn-beijing.ksyun.com/attachment/e0a42f0f5c75bcc2933e439cb0160db3
    e others/数学/编程/农历/js农历-1.html
  wget http://supfree.cn/tool/Calendar/
    e others/数学/编程/农历/js农历-2.html


===================================
===================================
cd $my_tmp/wget_/0农历在线/
wget -r -l inf --no-remove-listing --no-parent -p -k -nc -N --no-use-server-timestamps -c --random-wait --wait=8 --tries=30 --limit-rate=200K --compression=auto -U "Mozilla/5.0 (iPhone; CPU iPhone OS 12_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Mobile/15E148 Safari/604.1" http://bieyu.com/
FINISHED --2021-09-26 15:36:46--
Total wall clock time: 26m 23s
Downloaded: 187 files, 1.6M in 4.3s (380 KB/s)
Converted links in 49 files in 0.4 seconds.

du -bh $my_tmp/wget_/0农历在线/bieyu.com/
1.7M    /sdcard/0my_files/tmp//wget_/0农历在 线/bieyu.com


===================================
===================================
cd $my_tmp/wget_/0农历在线/
wget -r -l inf --no-remove-listing --no-parent -p -k -nc -N --no-use-server-timestamps -c --random-wait --wait=8 --tries=30 --limit-rate=200K --compression=auto -U "Mozilla/5.0 (iPhone; CPU iPhone OS 12_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Mobile/15E148 Safari/604.1" http://www.nongli.net/sxwnl/
FINISHED --2021-09-26 15:52:43--
Total wall clock time: 46s
Downloaded: 5 files, 475K in 2.2s (216 KB/s)
Converting links in www.nongli.net/sxwnl/index.html... 4-0
Converted links in 1 files in 0.01 seconds.




===================================
===================================
cd $my_tmp/wget_/0农历在线/
wget -r -l inf --no-remove-listing --no-parent -p -k -nc -N --no-use-server-timestamps -c --random-wait --wait=8 --tries=30 --limit-rate=200K --compression=auto -U "Mozilla/5.0 (iPhone; CPU iPhone OS 12_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Mobile/15E148 Safari/604.1" https://ks3-cn-beijing.ksyun.com/attachment/e0a42f0f5c75bcc2933e439cb0160db3
FINISHED --2021-09-26 15:54:37--
Total wall clock time: 1.1s
Downloaded: 1 files, 102K in 0.4s (233 KB/s)
Converting links in ks3-cn-beijing.ksyun.com/attachment/e0a42f0f5c75bcc2933e439cb0160db3... nothing to do.
Converted links in 1 files in 0.004 seconds.


===================================
===================================
cd $my_tmp/wget_/0农历在线/
wget -r -l inf --no-remove-listing --no-parent -p -k -nc -N --no-use-server-timestamps -c --random-wait --wait=8 --tries=30 --limit-rate=200K --compression=auto -U "Mozilla/5.0 (iPhone; CPU iPhone OS 12_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Mobile/15E148 Safari/604.1" http://supfree.cn/tool/Calendar/
FINISHED --2021-09-26 15:57:37--
Total wall clock time: 2m 11s
Downloaded: 18 files, 498K in 3.5s (140 KB/s)
Converted links in 4 files in 0.1 seconds.


===================================
===================================
]]]


xxxxxxxxx[[[
https://china-testing.github.io/wannianli_books.html
  万年历书籍汇总下载 - GitHub Pages

<h3 id="-2013pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373452308">万年历- 2013.pdf</a></h3>
  910KB 已下载
<h3 id="-2012pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373454963">中华万年历全书(超值版) (家庭珍藏经典畅销书系)-2012.pdf</a></h3>
  87.07MB 未下载
<h3 id="-2007pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373452341">中华民俗万年历-2007.pdf</a></h3>
  失效链接
<h3 id="1901-21002-2011pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373452337">新编实用万年历(1901-2100年)(第2版) - 2011.pdf</a></h3>
  22.42MB 已下载
    有问题，大量空白页！
<h3 id="-2014">万年历法 : 古代历法与岁时文化 - 2014</h3>
  本书下载 https://itbooks.pipipan.com/fs/18113597-371261903
  本书下载 https://itbooks.pipipan.com/fs/18113597-371261792
  2个 失效链接

<h3 id="-2015azw3">历法-万年历法源流- 2015.azw3</h3>
???

<h3 id="-2008pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373456960">老黄历-2008.pdf</a></h3>
  本书下载 https://itbooks.pipipan.com/fs/18113597-373456960
  本书下载 https://itbooks.pipipan.com/fs/18113597-367731476
  3~2个 失效链接
https://china-testing.github.io/bazi.html
https://china-testing.github.io/testing_books.html

xxxxxxxxx===xxxxxxxxx
        <title>万年历书籍汇总下载</title>
<h3 id="-2013pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373452308">万年历- 2013.pdf</a></h3>
<p>前言
第一章　历法常识
第二章　纪年法及相关常识
第三章　民间择吉
第四章　民间谚语精粹
第五章　家庭医疗常识</p>

<h3 id="-2012pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373454963">中华万年历全书(超值版) (家庭珍藏经典畅销书系)-2012.pdf</a></h3>
<p>雅瑟主编的《中华万年历全书(超值金版)》突破了以往同类书籍过于“民俗”的特点，摒除了旧有的传统思想和不符合时代的现点，以科学性和实用性为根本，突出知识性和趣味性；语言通俗易懂，数据精确科学，版式设计精美，是集查阅、欣赏和实用为一体的生活工具书。
《中华万年历全书(超值金版)》主要由三大部分和附录构成：
第一部分：
天文历法知识，涵盖了中华历法演变规律及常识、天干地文、生肖时辰、天文和地理科普知识、节气与时令的自然观律等传统历法知识，有论有据，有理有趣；
第二部分：
万年历表，作为本书的主体部分之一，以表格的形式列举1900一2050年间的历史纪年，具有精确、科学、便于查阅的特点，为读者提供了很大的便利，实用性强；
第三部分：
中华民俗文化大观，介绍了五行与《周易》、中华姓氏起名学问、民间禁忌、侍统楹联文化等中华民俗民情知识，内容丰富，妙趣横生；
附录部分：
包括月食日食速查表、常用天文数据表、中国人年龄代称、中国及世界传统节日全览等内容。下载 QQ群 338228106</p>
<p>第一部分　天文历法
第一章　历法常识
历法
什么是历法
历法的形成与发展
历书与万年历
关于历书
原始的观象授时历书《夏小正》
第一部具有历史意义的科学历书《四分历》
我国有完整资料的第一部传世历书《太初历》
第一部载有定朔算法的历书《乾象历》
祖冲之的《大明历》
占有重要地位的《黄极历》
唐代著名历书《大衍历》和《宣明历》
宋代较为完善的《统天历》
沈括和他的《十二气历》
古代历法的巅峰《授时历》
具有划时代意义的《崇祯历书》
清代新历本《时宪书》和《西洋新法历书》
我国现在使用的几种历法
阳历
阴历
阴阳合历叫"农历"
年、月、日和星期
回归年
历月
太阳日
国际日界线
闰年闰月的计算法
星期的由来
昼夜交替和四季的变化
认识时间
时区
区时
我国的标准时间"北京时间"
朔望两弦
认识月相
朔月、望月、上弦月和下弦月
朔望两弦与"潮汐"
两弦与地震的关系
朔望节律对人体生理的影响
日食和月食
日食
月食
日月交食</p>
<p>第二章　节气与时令
认识二十四节气
二十四节气的名称
二十四节气的性质
古代二十四节气的测定法
二十四节气与历法的配合
节气与中气
二十四节气在阳历上的日期
二十四节气在农历上的日期
二十四节气与七十二候</p>
<p>第三章　天干与地支
了解天干与地支
十天干和十二地支
干支的相合、相冲、相害和相刑
干支配四时方位、月建和人体
干支纪法
干支纪年法
干支纪月法
干支纪日法
干支纪时法
干支纪法与阳历的近似换算
计算农历年干支（每60年循环一次）
计算农历月干支（每5年循环一次）
计算日干支（每60天循环一次）
计算时干支（每5天循环一次）
六十甲子
六十甲子循环纪年法
六十甲子表
时辰
古时辰与今24时的对应关系
古代的"更点"
古代辰制的分类
第二部分　万年历（1900-2050年）
第三部分　中华民俗文化知识</p>
<p>第四章　阴阳五行学说
阴阳八卦
阴阳说
"八卦"解析
认识八卦图
六十四卦象对照表
五行：金木水火土
五行常识
天干、地支与五行属性
五行与四时、方位
五行属性对应总表
六十甲子纳音表
阴阳五行与健康养生
阴阳学说在中医上的应用
五行在养生中的运用
五行食疗法</p>
<p>第五章　《周易》文化
《周易》与人生预测
群经之首--《周易》
四柱预测法
四柱与姓名
五格剖象法看命理
《周易》与风水
旺宅风水
旺财风水
健康风水
婚姻风水
《周易》与择吉日
开张的择日
婚姻嫁娶的择日
修造动土的择日
神像开光（塑绘）的择日
黄道日历专有名词批注
《周易》与开运旺运
旺财运
旺事业运
旺姻缘运
旺健康运</p>
<p>第六章　中华姓氏起名学问
姓氏与文化内涵
姓氏的来历
姓名的文化内涵
起名六蔡忌
忌姓名"拗口"
忌污秽粗俗字眼人名
忌用生僻字、多音字、繁体字、异体字，以及电脑无法识别的字起名
忌姓名字体的单调重复
避免重名、俗名或洋名
忌用祖先和先贤的名字
现代起名艺术
巧让名字诗意化
巧用儿话音取名
巧用中性字取女孩名
借用现代汉语的修辞手法起名
按照出生季节或月份起名
精炼成语起名
巧用典故起名
以俗为雅，凸显个性
让名字"很有内涵"</p>
<p>第七章　中国民间禁忌全观
饮食禁忌
饮食方式禁忌
食物禁忌
食具禁忌
民族饮食禁忌
居地蔡忌
宅居禁忌
迁居禁忌
居地栽植禁忌
节日蔡忌
春节禁忌
立春禁忌
"二月二"禁忌
清明节禁忌
立秋民间禁忌
中元节（七月十五）禁忌
社交蔡忌
民间人际交往禁忌
待人接物禁忌
语言禁忌
服饰禁忌
服饰颜色禁忌
服饰款式禁忌
穿戴禁忌
服饰保养禁忌
行业蔡忌
农业生产禁忌
畜牧业、副业禁忌
渔业、航运禁忌
商业禁忌</p>
<p>第八章　古今实用对联楹联
春联
春联的寓意象征
如何选副好春联
春联的张贴规矩
传统春联的写法规则
佳联欣赏
楹联
楹联的作用
读书楹联
园林名胜楹联
行业楹联
警世楹联
言志抒怀楹联
社会征联活动
婚联
婚联志禧
婚联的写法规则
不同场合婚联的张贴规矩
寿联
寿联的规范
男寿通用佳联欣赏
女寿通用佳联欣赏
男女双寿用联
按年龄选用寿联
挽联
致挽联
自挽联
墓祠联
附录 </p>

<h3 id="-2007pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373452341">中华民俗万年历-2007.pdf</a></h3>
<p>《中华民俗万年历》分为中华传统节日，中华民俗民风，民间诸神，中华古文化探源，天文历法共五章。《万年历》是清朝皇帝颁布的《御定万年历》的简称，又叫《黄历》。知天文地理，让你运筹帷幄，晓人情世俗，为君指点迷津。</p>
<p>第一章 中华传统节日
一、春节／1
二、立春／26
三、二月二青龙节／127
四、清明节／28
五、五月五端午节／29
六、七夕七巧节／31
七、七月十五鬼节．／32
八、八月十五中秋节／33
九、九月九重阳节／35
十、诸神的生日／38</p>
<p>第二章 中华民俗民风
一、民间吉祥象征／42
二、十二生肖传说／58
三、中国古代礼仪／68
四、悠远的民间传说／72
五、奇妙的传统俗信／76
六、姓氏家谱渊远／78
七、传统结婚习俗／80
八、传统生育习俗／83
九、传统生日习俗／85
十、民间禁忌／86
十一、中华传世民谚／92
十二、传统对联／97</p>
<p>第三章 民间诸神
一、玉皇大帝／106
二、王母娘娘／106
三、观音菩萨／108
四、福星／111
五、禄星／114
六、寿星／119
七、财神／122
八、门神／129
九、灶君／132
十、农神／133
十一、土地神／134
十二、药王／135
十三、八仙／136
十四、钟馗／138
十五、东岳大帝／139
十六、碧霞元君／140
十七、龙王／141
十八、风雨雷电四神／141
十九、四大金刚／144
二十、冥司神灵／145
二十一、上古传说诸神／147
二十二、中国古代神位一览表／152</p>
<p>第四章 中华古文化探源
一、五行学说／162
二、太极八卦／165
三、中华古代方术探源／168</p>
<p>第五章 天文历法
一、中华传统历法／173
二、二十八宿／185
三、万年历（1931-2030年）／187</p>

<h3 id="1901-21002-2011pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373452337">新编实用万年历(1901-2100年)(第2版) - 2011.pdf</a></h3>
<p>历书是人们生活、学习、工作中常用的工具书。《新编实用万年历(1901—2100年)(第2版)》的主要特点是，在给出公历农历对照表、历法与相关天文知识的同时，还介绍了大量与人们平时生活休戚相关的常用数据、传统习俗和常用应用文写法等极具实用性的内容，希望能满足广大读者对历书求新求变、经济实用的要求。夏历是中国古六历（黄帝、颛顶、夏、殷、周、鲁六种古历的合称）之一，属阴阳历。其特点之一是以建寅之月为正月。目前，我国既采用公历纪元，同时又使用夏历。需要指出的是，现在人们普遍把夏历称为农历，这是不尽恰当的。但考虑到人们的习惯，《新编实用万年历(1901—2100年)(第2版)》在万年历部分仍沿用农历称谓。</p>
<p>一、万年历（1901－2100年）
二、历法与天文知识
（一）阴历、阳历和阴阳历
（二）天干地支和六十甲子
（三）宇宙和天体
（四）地球的公转
（五）地球的自转
（六）地球上日期的计算
（七）公历2月份为什么常有28天
（八）月球上1“天”的长短
（九）日食和月食
（十）日食、月食表（2001－2020年）
（十一）朔望两弦
（十二）潮汐
（十三）四季的成因
（十四）时间
（十五）世界时和区时
（十六）国际日期变更线
（十七）古代的时辰制度
（十八）二十四节气
（十九）七十二候
（二十）节气与农谚
（二十一）风力等级表
（二十二）我国各类云的常见云底高范围表
（二十三）一般天文数据
（二十四）太阳数据
（二十五）地球数据
（二十六）月球数据
三、生活常用数据与传统习俗
（一）太阳出没时刻表
（二）世界各地时差对照
（三）我国主要城市邮政编码及长途电话区号
（四）国际长途直拨电话代码简表
（五）中国历史朝代概况表
（六）中国人年龄代称
（七）结婚周年代称
（八）180年干支综合表
（九）常用称谓表
四、常用应用文
（一）日常书信
（二）专用书信
1.感谢信
2.表扬信
3.批评信、投诉信
4.检举信
5.申诉信
6.慰问信
7.介绍信
8.证明信
9.咨询信
10.求助信
11.申请书
（三）商务书信
1.调查信
2.建立贸易关系信
3.询盘信（向卖方询问价格的信）
4.发盘信（向买方报价的信）
5.订购信
6.通知发货付款信
（四）条据、启事
1.条据
2.启事
（五）合同
1.购销合同
2.分家契约
3.收养协议书、解除收养协议书
4.抚养（赡养）协议书
（六）遗嘱和赠与书
1.遗嘱
2.赠与书</p>

<h3 id="-2014">万年历法 : 古代历法与岁时文化 - 2014</h3>
<p>本书共分为时间法则——传统历法、时间计量——计时制度、时间周期——岁时文化共三部分，主要内容包括：虞喜发现岁差与制定历法、祖冲之测算回归年与历法等。</p>

<h3 id="-2015azw3">历法-万年历法源流- 2015.azw3</h3>
<p>古代各国家、民族，主要因为农业生产的需要，对日月星辰的运行，进行了长期的精密的观察、记录，并在此基础上作了整理，于是有了历法。但由于当时科学文化水平的限制，以及一年的日数不是一个月的整倍数，也不能用十二除尽，因此在不同的时期产生了各种历法。下载 QQ群 338228106</p>
<p>传统历法
虞喜发现岁差与制定历法
祖冲之测算回归年与历法
推算出天干地支与历法
把十二生肖应用于历法
独创二十四节气与历法
计时制度
逐步完善分段计时之制
发明漏刻的计时方法
采取独特的十二辰计时法
实行夜晚的更点制度
岁时文化
春季岁时习俗的产生
夏季岁时习俗的流传
秋季岁时习俗的继承
冬季岁时习俗的嬗变</p>

<h3 id="-2008pdf"><a href="https://itbooks.pipipan.com/fs/18113597-373456960">老黄历-2008.pdf</a></h3>
<p>黄历主要内容为二十四节气的日期表，每天的吉凶宜忌、生肖运程等。即古人把每一天的喜忌都记在日历上，作行动指南。就某种程度来说，中国老黄历古代的历法就是一种编算天文年历的工作。它包括中国古代天文学的许多重要内容，是古代科学观察和研究的结晶。</p>

xxxxxxxxx]]]

pkg install patch
diff /sdcard/0my_files/tmp/xxx/diff_lhs.txt  /sdcard/0my_files/tmp/xxx/diff_rhs.txt
TODO git-like
how git export series commits? 仓库序列化
what "diff"/"patch" algo?
  ?编辑距离?edit distance
  split by \n ?
  sort lines of two files
  find out eq block?
    move
    copy
    delete
    edit




